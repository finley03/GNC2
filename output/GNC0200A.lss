
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a0  20000000  000057fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007bc  200000a0  000058a0  000200a0  2**4
                  ALLOC
  3 .stack        00002004  2000085c  0000605c  000200a0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001bec3  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00006489  00000000  00000000  0003bfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 000071ea  00000000  00000000  00042460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000df0  00000000  00000000  00049650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 00001013  00000000  00000000  0004a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00009fb6  00000000  00000000  0004b453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00019ef3  00000000  00000000  00055409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b5722  00000000  00000000  0006f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001de8  00000000  00000000  00124a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  00126808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
    eeprom_read_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}

bool save_global(Global_Variable_IDs id) {
       0:	60 28 00 20 55 01 00 00 51 01 00 00 51 01 00 00     `(. U...Q...Q...
	...
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
    if (!get_address_from_id(type, id, &address, &size)) return false;
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...
    EEPROM_Request request;
    eeprom_write_request(&request, eeprom_address, address, size);
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
    eeprom_wait_until_done(&request);
    return true;
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      5c:	59 3f 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Y?..Q...Q...Q...
	// send adc read command
	spi_command(desc->sercom, BARO_ADC_READ);
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
	uint8_t data1 = spi_command(desc->sercom, 0);
	uint8_t data2 = spi_command(desc->sercom, 0);
      6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      8c:	a9 2e 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ....Q...Q...Q...
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	000057fc 	.word	0x000057fc
      d0:	000057fc 	.word	0x000057fc
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	000057fc 	.word	0x000057fc
      f8:	000057fc 	.word	0x000057fc
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	200000a0 	.word	0x200000a0
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	000057fc 	.word	0x000057fc

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	200000a4 	.word	0x200000a4
     14c:	000057fc 	.word	0x000057fc

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	000057fc 	.word	0x000057fc
     1a4:	20000000 	.word	0x20000000
     1a8:	200000a0 	.word	0x200000a0
     1ac:	200000a0 	.word	0x200000a0
     1b0:	2000085c 	.word	0x2000085c
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	000051a5 	.word	0x000051a5
     1c4:	00000000 	.word	0x00000000
     1c8:	00002e35 	.word	0x00002e35

000001cc <getGlobalHash>:
uint8_t rxframe[GNCLINK_FRAME_TOTAL_LENGTH];
uint8_t txframe[GNCLINK_FRAME_TOTAL_LENGTH];

extern void SOS();

bool getGlobalHash() {
     1cc:	b510      	push	{r4, lr}
    uint32_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     1ce:	4c06      	ldr	r4, [pc, #24]	; (1e8 <getGlobalHash+0x1c>)
     1d0:	0020      	movs	r0, r4
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <getGlobalHash+0x20>)
     1d4:	4798      	blx	r3
    *payload = __GLOBAL_HASH;
     1d6:	4b06      	ldr	r3, [pc, #24]	; (1f0 <getGlobalHash+0x24>)
     1d8:	6003      	str	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetGlobalHash, GNClink_PacketFlags_Response, 4)) return false;
     1da:	2304      	movs	r3, #4
     1dc:	2202      	movs	r2, #2
     1de:	2101      	movs	r1, #1
     1e0:	0020      	movs	r0, r4
     1e2:	4c04      	ldr	r4, [pc, #16]	; (1f4 <getGlobalHash+0x28>)
     1e4:	47a0      	blx	r4
    return true;
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	200000bc 	.word	0x200000bc
     1ec:	00004061 	.word	0x00004061
     1f0:	9fc0b1d3 	.word	0x9fc0b1d3
     1f4:	00004065 	.word	0x00004065

000001f8 <getValueList>:

bool getValueList() {
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46c6      	mov	lr, r8
     1fc:	b500      	push	{lr}
     1fe:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     200:	4d1a      	ldr	r5, [pc, #104]	; (26c <getValueList+0x74>)
     202:	0028      	movs	r0, r5
     204:	3040      	adds	r0, #64	; 0x40
     206:	4c1a      	ldr	r4, [pc, #104]	; (270 <getValueList+0x78>)
     208:	47a0      	blx	r4
     20a:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     20c:	0028      	movs	r0, r5
     20e:	47a0      	blx	r4
     210:	4680      	mov	r8, r0
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     212:	783e      	ldrb	r6, [r7, #0]
     214:	b2f6      	uxtb	r6, r6
    if (IDCount > (GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1) / 2) {
     216:	2e1d      	cmp	r6, #29
     218:	d825      	bhi.n	266 <getValueList+0x6e>
        // too many IDs, do something...
        return false;
    }

    int payloadIndex = 0;
    for (int index = 0; index < IDCount; ++index) {
     21a:	2400      	movs	r4, #0
    int payloadIndex = 0;
     21c:	2500      	movs	r5, #0
     21e:	e007      	b.n	230 <getValueList+0x38>
            // no more space, do something...
            return false;
        }

        // copy value to payload
        memcpy(&txpayload[payloadIndex], address, size);
     220:	4643      	mov	r3, r8
     222:	1958      	adds	r0, r3, r5
     224:	9900      	ldr	r1, [sp, #0]
     226:	4b13      	ldr	r3, [pc, #76]	; (274 <getValueList+0x7c>)
     228:	4798      	blx	r3
        payloadIndex += size;
     22a:	9b01      	ldr	r3, [sp, #4]
     22c:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     22e:	3401      	adds	r4, #1
     230:	42b4      	cmp	r4, r6
     232:	da11      	bge.n	258 <getValueList+0x60>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     234:	0063      	lsls	r3, r4, #1
     236:	18fb      	adds	r3, r7, r3
     238:	7858      	ldrb	r0, [r3, #1]
        if (!get_global_address_size(ID, &address, &size)) {
     23a:	aa01      	add	r2, sp, #4
     23c:	4669      	mov	r1, sp
     23e:	4b0e      	ldr	r3, [pc, #56]	; (278 <getValueList+0x80>)
     240:	4798      	blx	r3
     242:	2800      	cmp	r0, #0
     244:	d003      	beq.n	24e <getValueList+0x56>
        if (payloadIndex + size > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     246:	9a01      	ldr	r2, [sp, #4]
     248:	1953      	adds	r3, r2, r5
     24a:	2b3b      	cmp	r3, #59	; 0x3b
     24c:	d9e8      	bls.n	220 <getValueList+0x28>
            return false;
     24e:	2000      	movs	r0, #0
    }

    // construct packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
    return true;
}
     250:	b002      	add	sp, #8
     252:	bc80      	pop	{r7}
     254:	46b8      	mov	r8, r7
     256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
     258:	4804      	ldr	r0, [pc, #16]	; (26c <getValueList+0x74>)
     25a:	002b      	movs	r3, r5
     25c:	2202      	movs	r2, #2
     25e:	2102      	movs	r1, #2
     260:	4c06      	ldr	r4, [pc, #24]	; (27c <getValueList+0x84>)
     262:	47a0      	blx	r4
     264:	e7f4      	b.n	250 <getValueList+0x58>
        return false;
     266:	2000      	movs	r0, #0
     268:	e7f2      	b.n	250 <getValueList+0x58>
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	200000bc 	.word	0x200000bc
     270:	00004061 	.word	0x00004061
     274:	000051f5 	.word	0x000051f5
     278:	00000609 	.word	0x00000609
     27c:	00004065 	.word	0x00004065

00000280 <getValueCount>:

bool getValueCount() {
     280:	b510      	push	{r4, lr}
    uint16_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     282:	4c06      	ldr	r4, [pc, #24]	; (29c <getValueCount+0x1c>)
     284:	0020      	movs	r0, r4
     286:	4b06      	ldr	r3, [pc, #24]	; (2a0 <getValueCount+0x20>)
     288:	4798      	blx	r3
    *payload = __GLOBAL_ID_END - __GLOBAL_ID_START;
     28a:	2311      	movs	r3, #17
     28c:	8003      	strh	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueCount, GNClink_PacketFlags_Response, 2)) return false;
     28e:	3b0f      	subs	r3, #15
     290:	2202      	movs	r2, #2
     292:	2106      	movs	r1, #6
     294:	0020      	movs	r0, r4
     296:	4c03      	ldr	r4, [pc, #12]	; (2a4 <getValueCount+0x24>)
     298:	47a0      	blx	r4
    return true;
}
     29a:	bd10      	pop	{r4, pc}
     29c:	200000bc 	.word	0x200000bc
     2a0:	00004061 	.word	0x00004061
     2a4:	00004065 	.word	0x00004065

000002a8 <getValueName>:

bool getValueName() {
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	b082      	sub	sp, #8
    uint16_t* rxpayload = (uint16_t*)GNClink_Get_Packet_Payload_Pointer(rxpacket);
     2ac:	4e14      	ldr	r6, [pc, #80]	; (300 <getValueName+0x58>)
     2ae:	0030      	movs	r0, r6
     2b0:	3040      	adds	r0, #64	; 0x40
     2b2:	4d14      	ldr	r5, [pc, #80]	; (304 <getValueName+0x5c>)
     2b4:	47a8      	blx	r5
     2b6:	0004      	movs	r4, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     2b8:	0030      	movs	r0, r6
     2ba:	47a8      	blx	r5
     2bc:	0005      	movs	r5, r0

    // get variable ID
    uint16_t id = *rxpayload;
     2be:	8824      	ldrh	r4, [r4, #0]

    int length = 0;
     2c0:	2300      	movs	r3, #0
     2c2:	9301      	str	r3, [sp, #4]

    __Global_Variable_Types type;
    if (!get_global_type_from_id(id, &type)) return false;
     2c4:	b2e4      	uxtb	r4, r4
     2c6:	466b      	mov	r3, sp
     2c8:	1cd9      	adds	r1, r3, #3
     2ca:	0020      	movs	r0, r4
     2cc:	4b0e      	ldr	r3, [pc, #56]	; (308 <getValueName+0x60>)
     2ce:	4798      	blx	r3
     2d0:	2800      	cmp	r0, #0
     2d2:	d101      	bne.n	2d8 <getValueName+0x30>

    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;

    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
    return true;
}
     2d4:	b002      	add	sp, #8
     2d6:	bd70      	pop	{r4, r5, r6, pc}
    *txpayload = (uint8_t*)type;
     2d8:	466b      	mov	r3, sp
     2da:	3303      	adds	r3, #3
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	702b      	strb	r3, [r5, #0]
    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;
     2e0:	1c69      	adds	r1, r5, #1
     2e2:	233a      	movs	r3, #58	; 0x3a
     2e4:	aa01      	add	r2, sp, #4
     2e6:	0020      	movs	r0, r4
     2e8:	4c08      	ldr	r4, [pc, #32]	; (30c <getValueName+0x64>)
     2ea:	47a0      	blx	r4
     2ec:	2800      	cmp	r0, #0
     2ee:	d0f1      	beq.n	2d4 <getValueName+0x2c>
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
     2f0:	9b01      	ldr	r3, [sp, #4]
     2f2:	3301      	adds	r3, #1
     2f4:	4802      	ldr	r0, [pc, #8]	; (300 <getValueName+0x58>)
     2f6:	2202      	movs	r2, #2
     2f8:	2107      	movs	r1, #7
     2fa:	4c05      	ldr	r4, [pc, #20]	; (310 <getValueName+0x68>)
     2fc:	47a0      	blx	r4
     2fe:	e7e9      	b.n	2d4 <getValueName+0x2c>
     300:	200000bc 	.word	0x200000bc
     304:	00004061 	.word	0x00004061
     308:	000005cd 	.word	0x000005cd
     30c:	00000641 	.word	0x00000641
     310:	00004065 	.word	0x00004065

00000314 <evaluatePacket>:

bool evaluatePacket() {
     314:	b510      	push	{r4, lr}
    // check packet
    if (!GNClink_Check_Packet(rxpacket)) {
     316:	4815      	ldr	r0, [pc, #84]	; (36c <evaluatePacket+0x58>)
     318:	4b15      	ldr	r3, [pc, #84]	; (370 <evaluatePacket+0x5c>)
     31a:	4798      	blx	r3
     31c:	2800      	cmp	r0, #0
     31e:	d006      	beq.n	32e <evaluatePacket+0x1a>
    // reset_process(&bz);
    // bz_count = (int)(*GNClink_Get_Packet_Payload_Pointer(rxpacket));
    // dispatch_process(&bz);

    // check packet is not response packet
    GNClink_PacketFlags flags = GNClink_Get_Packet_Flags(rxpacket);
     320:	4812      	ldr	r0, [pc, #72]	; (36c <evaluatePacket+0x58>)
     322:	4b14      	ldr	r3, [pc, #80]	; (374 <evaluatePacket+0x60>)
     324:	4798      	blx	r3
    if (flags & GNClink_PacketFlags_Response) return false;
     326:	0780      	lsls	r0, r0, #30
     328:	d504      	bpl.n	334 <evaluatePacket+0x20>
     32a:	2000      	movs	r0, #0
        default:
        return false;
    }

    return false;
}
     32c:	bd10      	pop	{r4, pc}
        SOS();
     32e:	4b12      	ldr	r3, [pc, #72]	; (378 <evaluatePacket+0x64>)
     330:	4798      	blx	r3
     332:	e7f5      	b.n	320 <evaluatePacket+0xc>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     334:	480d      	ldr	r0, [pc, #52]	; (36c <evaluatePacket+0x58>)
     336:	4b11      	ldr	r3, [pc, #68]	; (37c <evaluatePacket+0x68>)
     338:	4798      	blx	r3
     33a:	2806      	cmp	r0, #6
     33c:	d013      	beq.n	366 <evaluatePacket+0x52>
     33e:	d808      	bhi.n	352 <evaluatePacket+0x3e>
     340:	2801      	cmp	r0, #1
     342:	d00d      	beq.n	360 <evaluatePacket+0x4c>
     344:	2802      	cmp	r0, #2
     346:	d102      	bne.n	34e <evaluatePacket+0x3a>
        return getValueList();
     348:	4b0d      	ldr	r3, [pc, #52]	; (380 <evaluatePacket+0x6c>)
     34a:	4798      	blx	r3
     34c:	e7ee      	b.n	32c <evaluatePacket+0x18>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     34e:	2000      	movs	r0, #0
     350:	e7ec      	b.n	32c <evaluatePacket+0x18>
     352:	2807      	cmp	r0, #7
     354:	d102      	bne.n	35c <evaluatePacket+0x48>
        return getValueName();
     356:	4b0b      	ldr	r3, [pc, #44]	; (384 <evaluatePacket+0x70>)
     358:	4798      	blx	r3
     35a:	e7e7      	b.n	32c <evaluatePacket+0x18>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     35c:	2000      	movs	r0, #0
     35e:	e7e5      	b.n	32c <evaluatePacket+0x18>
        return getGlobalHash();
     360:	4b09      	ldr	r3, [pc, #36]	; (388 <evaluatePacket+0x74>)
     362:	4798      	blx	r3
     364:	e7e2      	b.n	32c <evaluatePacket+0x18>
        return getValueCount();
     366:	4b09      	ldr	r3, [pc, #36]	; (38c <evaluatePacket+0x78>)
     368:	4798      	blx	r3
     36a:	e7df      	b.n	32c <evaluatePacket+0x18>
     36c:	200000fc 	.word	0x200000fc
     370:	00004091 	.word	0x00004091
     374:	000040c5 	.word	0x000040c5
     378:	00002e11 	.word	0x00002e11
     37c:	000040c1 	.word	0x000040c1
     380:	000001f9 	.word	0x000001f9
     384:	000002a9 	.word	0x000002a9
     388:	000001cd 	.word	0x000001cd
     38c:	00000281 	.word	0x00000281

00000390 <get_packet>:

// returns false if resend is being requested
bool get_packet() {
     390:	b5f0      	push	{r4, r5, r6, r7, lr}
     392:	b083      	sub	sp, #12
    bool receivedFrames[GNCLINK_MAX_FRAMES_PER_PACKET];
    for (int i = 0; i < GNCLINK_MAX_FRAMES_PER_PACKET; ++i) receivedFrames[i] = false;
     394:	2300      	movs	r3, #0
     396:	e003      	b.n	3a0 <get_packet+0x10>
     398:	aa01      	add	r2, sp, #4
     39a:	2100      	movs	r1, #0
     39c:	54d1      	strb	r1, [r2, r3]
     39e:	3301      	adds	r3, #1
     3a0:	2b03      	cmp	r3, #3
     3a2:	ddf9      	ble.n	398 <get_packet+0x8>
     3a4:	e02a      	b.n	3fc <get_packet+0x6c>
            continue;
        }

        // check if frame is requesting resend
        if (GNClink_Frame_RequestResend(rxframe)) {
            return false;
     3a6:	2500      	movs	r5, #0
            // packet fully received
            else break;
        }
    }
    return true;
}
     3a8:	0028      	movs	r0, r5
     3aa:	b003      	add	sp, #12
     3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     3ae:	3401      	adds	r4, #1
     3b0:	4828      	ldr	r0, [pc, #160]	; (454 <get_packet+0xc4>)
     3b2:	4b29      	ldr	r3, [pc, #164]	; (458 <get_packet+0xc8>)
     3b4:	4798      	blx	r3
     3b6:	42a0      	cmp	r0, r4
     3b8:	dd07      	ble.n	3ca <get_packet+0x3a>
                if (!receivedFrames[i]) payload->resendIndexes[resendCount++] = (uint8_t)i;
     3ba:	ab01      	add	r3, sp, #4
     3bc:	5d1b      	ldrb	r3, [r3, r4]
     3be:	2b00      	cmp	r3, #0
     3c0:	d1f5      	bne.n	3ae <get_packet+0x1e>
     3c2:	19bb      	adds	r3, r7, r6
     3c4:	705c      	strb	r4, [r3, #1]
     3c6:	3601      	adds	r6, #1
     3c8:	e7f1      	b.n	3ae <get_packet+0x1e>
            if (resendCount) {
     3ca:	2e00      	cmp	r6, #0
     3cc:	d0ec      	beq.n	3a8 <get_packet+0x18>
                payload->resendCount = (uint8_t)resendCount;
     3ce:	703e      	strb	r6, [r7, #0]
                GNClink_Construct_RequestResendFrame(txframe);
     3d0:	4d22      	ldr	r5, [pc, #136]	; (45c <get_packet+0xcc>)
     3d2:	0028      	movs	r0, r5
     3d4:	4b22      	ldr	r3, [pc, #136]	; (460 <get_packet+0xd0>)
     3d6:	4798      	blx	r3
                led_on();
     3d8:	2480      	movs	r4, #128	; 0x80
     3da:	03e4      	lsls	r4, r4, #15
     3dc:	0021      	movs	r1, r4
     3de:	2001      	movs	r0, #1
     3e0:	4b20      	ldr	r3, [pc, #128]	; (464 <get_packet+0xd4>)
     3e2:	4798      	blx	r3
                serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     3e4:	2214      	movs	r2, #20
     3e6:	0029      	movs	r1, r5
     3e8:	2000      	movs	r0, #0
     3ea:	4b1f      	ldr	r3, [pc, #124]	; (468 <get_packet+0xd8>)
     3ec:	4798      	blx	r3
                serial_write_wait_until_complete(PORT0);
     3ee:	2000      	movs	r0, #0
     3f0:	4b1e      	ldr	r3, [pc, #120]	; (46c <get_packet+0xdc>)
     3f2:	4798      	blx	r3
                led_off();
     3f4:	0021      	movs	r1, r4
     3f6:	2001      	movs	r0, #1
     3f8:	4b1d      	ldr	r3, [pc, #116]	; (470 <get_packet+0xe0>)
     3fa:	4798      	blx	r3
        serial_read_start(PORT0, rxframe, GNCLINK_FRAME_TOTAL_LENGTH);
     3fc:	4c15      	ldr	r4, [pc, #84]	; (454 <get_packet+0xc4>)
     3fe:	2214      	movs	r2, #20
     400:	0021      	movs	r1, r4
     402:	2000      	movs	r0, #0
     404:	4b1b      	ldr	r3, [pc, #108]	; (474 <get_packet+0xe4>)
     406:	4798      	blx	r3
        serial_read_wait_until_complete(PORT0);
     408:	2000      	movs	r0, #0
     40a:	4b1b      	ldr	r3, [pc, #108]	; (478 <get_packet+0xe8>)
     40c:	4798      	blx	r3
        if (!GNClink_Check_Frame(rxframe)) {
     40e:	0020      	movs	r0, r4
     410:	4b1a      	ldr	r3, [pc, #104]	; (47c <get_packet+0xec>)
     412:	4798      	blx	r3
     414:	1e05      	subs	r5, r0, #0
     416:	d0f1      	beq.n	3fc <get_packet+0x6c>
        if (GNClink_Frame_RequestResend(rxframe)) {
     418:	480e      	ldr	r0, [pc, #56]	; (454 <get_packet+0xc4>)
     41a:	4b19      	ldr	r3, [pc, #100]	; (480 <get_packet+0xf0>)
     41c:	4798      	blx	r3
     41e:	2800      	cmp	r0, #0
     420:	d1c1      	bne.n	3a6 <get_packet+0x16>
        receivedFrames[GNClink_Get_Frame_Index(rxframe)] = true;
     422:	4c0c      	ldr	r4, [pc, #48]	; (454 <get_packet+0xc4>)
     424:	0020      	movs	r0, r4
     426:	4b0c      	ldr	r3, [pc, #48]	; (458 <get_packet+0xc8>)
     428:	4798      	blx	r3
     42a:	2301      	movs	r3, #1
     42c:	aa01      	add	r2, sp, #4
     42e:	5413      	strb	r3, [r2, r0]
        bool moreFrames = true;
     430:	466a      	mov	r2, sp
     432:	70d3      	strb	r3, [r2, #3]
        GNClink_Reconstruct_Packet_From_Frames(rxframe, rxpacket, &moreFrames);
     434:	4913      	ldr	r1, [pc, #76]	; (484 <get_packet+0xf4>)
     436:	3203      	adds	r2, #3
     438:	0020      	movs	r0, r4
     43a:	4b13      	ldr	r3, [pc, #76]	; (488 <get_packet+0xf8>)
     43c:	4798      	blx	r3
        if (!moreFrames) {
     43e:	466b      	mov	r3, sp
     440:	78db      	ldrb	r3, [r3, #3]
     442:	2b00      	cmp	r3, #0
     444:	d1da      	bne.n	3fc <get_packet+0x6c>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(txframe);
     446:	4805      	ldr	r0, [pc, #20]	; (45c <get_packet+0xcc>)
     448:	4b10      	ldr	r3, [pc, #64]	; (48c <get_packet+0xfc>)
     44a:	4798      	blx	r3
     44c:	0007      	movs	r7, r0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     44e:	2400      	movs	r4, #0
            int resendCount = 0;
     450:	2600      	movs	r6, #0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     452:	e7ad      	b.n	3b0 <get_packet+0x20>
     454:	2000013c 	.word	0x2000013c
     458:	00004187 	.word	0x00004187
     45c:	20000150 	.word	0x20000150
     460:	0000418d 	.word	0x0000418d
     464:	00001bc9 	.word	0x00001bc9
     468:	00000bd1 	.word	0x00000bd1
     46c:	00000c59 	.word	0x00000c59
     470:	00001bd9 	.word	0x00001bd9
     474:	00000cb9 	.word	0x00000cb9
     478:	00000d41 	.word	0x00000d41
     47c:	00004151 	.word	0x00004151
     480:	0000417d 	.word	0x0000417d
     484:	200000fc 	.word	0x200000fc
     488:	000041ad 	.word	0x000041ad
     48c:	000040c9 	.word	0x000040c9

00000490 <send_packet>:

bool send_packet(bool resendFrames) {
     490:	b5f0      	push	{r4, r5, r6, r7, lr}
     492:	b085      	sub	sp, #20
     494:	0006      	movs	r6, r0
    int count = 0;
    bool moreFrames = true;
     496:	230f      	movs	r3, #15
     498:	446b      	add	r3, sp
     49a:	2201      	movs	r2, #1
     49c:	701a      	strb	r2, [r3, #0]
    int count = 0;
     49e:	2500      	movs	r5, #0
    while (moreFrames) {
     4a0:	e01e      	b.n	4e0 <send_packet+0x50>
        // check if frames are being resent
        if (resendFrames) {
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
            // break if all have been sent
            if (count == payload->resendCount) break;
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     4a2:	2202      	movs	r2, #2
     4a4:	e02d      	b.n	502 <send_packet+0x72>
        int frameIndex = count;
     4a6:	002b      	movs	r3, r5
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     4a8:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
        }

        // send frames
        GNClink_Get_Frame(txpacket, txframe, frameFlags, frameIndex, &moreFrames);
     4aa:	4c19      	ldr	r4, [pc, #100]	; (510 <send_packet+0x80>)
     4ac:	4819      	ldr	r0, [pc, #100]	; (514 <send_packet+0x84>)
     4ae:	210f      	movs	r1, #15
     4b0:	4469      	add	r1, sp
     4b2:	9100      	str	r1, [sp, #0]
     4b4:	0021      	movs	r1, r4
     4b6:	4f18      	ldr	r7, [pc, #96]	; (518 <send_packet+0x88>)
     4b8:	47b8      	blx	r7

        // send frame
        led_on();
     4ba:	2780      	movs	r7, #128	; 0x80
     4bc:	03ff      	lsls	r7, r7, #15
     4be:	0039      	movs	r1, r7
     4c0:	2001      	movs	r0, #1
     4c2:	4b16      	ldr	r3, [pc, #88]	; (51c <send_packet+0x8c>)
     4c4:	4798      	blx	r3
        serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     4c6:	2214      	movs	r2, #20
     4c8:	0021      	movs	r1, r4
     4ca:	2000      	movs	r0, #0
     4cc:	4b14      	ldr	r3, [pc, #80]	; (520 <send_packet+0x90>)
     4ce:	4798      	blx	r3
        serial_write_wait_until_complete(PORT0);
     4d0:	2000      	movs	r0, #0
     4d2:	4b14      	ldr	r3, [pc, #80]	; (524 <send_packet+0x94>)
     4d4:	4798      	blx	r3
        led_off();
     4d6:	0039      	movs	r1, r7
     4d8:	2001      	movs	r0, #1
     4da:	4b13      	ldr	r3, [pc, #76]	; (528 <send_packet+0x98>)
     4dc:	4798      	blx	r3

        ++count;
     4de:	3501      	adds	r5, #1
    while (moreFrames) {
     4e0:	230f      	movs	r3, #15
     4e2:	446b      	add	r3, sp
     4e4:	781b      	ldrb	r3, [r3, #0]
     4e6:	2b00      	cmp	r3, #0
     4e8:	d00e      	beq.n	508 <send_packet+0x78>
        if (resendFrames) {
     4ea:	2e00      	cmp	r6, #0
     4ec:	d0db      	beq.n	4a6 <send_packet+0x16>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
     4ee:	480f      	ldr	r0, [pc, #60]	; (52c <send_packet+0x9c>)
     4f0:	4b0f      	ldr	r3, [pc, #60]	; (530 <send_packet+0xa0>)
     4f2:	4798      	blx	r3
            if (count == payload->resendCount) break;
     4f4:	7803      	ldrb	r3, [r0, #0]
     4f6:	42ab      	cmp	r3, r5
     4f8:	d006      	beq.n	508 <send_packet+0x78>
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     4fa:	3b01      	subs	r3, #1
     4fc:	42ab      	cmp	r3, r5
     4fe:	d0d0      	beq.n	4a2 <send_packet+0x12>
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     500:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
     502:	1940      	adds	r0, r0, r5
     504:	7843      	ldrb	r3, [r0, #1]
     506:	e7d0      	b.n	4aa <send_packet+0x1a>
    }
    return true;
}
     508:	2001      	movs	r0, #1
     50a:	b005      	add	sp, #20
     50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	20000150 	.word	0x20000150
     514:	200000bc 	.word	0x200000bc
     518:	000040cd 	.word	0x000040cd
     51c:	00001bc9 	.word	0x00001bc9
     520:	00000bd1 	.word	0x00000bd1
     524:	00000c59 	.word	0x00000c59
     528:	00001bd9 	.word	0x00001bd9
     52c:	2000013c 	.word	0x2000013c
     530:	000040c9 	.word	0x000040c9

00000534 <comms_loop>:

bool comms_loop() {
     534:	b510      	push	{r4, lr}
    bool run = true;
    while (run) {
     536:	e002      	b.n	53e <comms_loop+0xa>
        // get packet, resend if required
        while (!get_packet()) {
            send_packet(true);
     538:	2001      	movs	r0, #1
     53a:	4b07      	ldr	r3, [pc, #28]	; (558 <comms_loop+0x24>)
     53c:	4798      	blx	r3
        while (!get_packet()) {
     53e:	4b07      	ldr	r3, [pc, #28]	; (55c <comms_loop+0x28>)
     540:	4798      	blx	r3
     542:	2800      	cmp	r0, #0
     544:	d0f8      	beq.n	538 <comms_loop+0x4>
        }

        if (evaluatePacket()) {
     546:	4b06      	ldr	r3, [pc, #24]	; (560 <comms_loop+0x2c>)
     548:	4798      	blx	r3
     54a:	2800      	cmp	r0, #0
     54c:	d0f7      	beq.n	53e <comms_loop+0xa>
            send_packet(false);
     54e:	2000      	movs	r0, #0
     550:	4b01      	ldr	r3, [pc, #4]	; (558 <comms_loop+0x24>)
     552:	4798      	blx	r3
     554:	e7f3      	b.n	53e <comms_loop+0xa>
     556:	46c0      	nop			; (mov r8, r8)
     558:	00000491 	.word	0x00000491
     55c:	00000391 	.word	0x00000391
     560:	00000315 	.word	0x00000315

00000564 <get_address_from_id>:
    switch (type) {
     564:	2804      	cmp	r0, #4
     566:	d011      	beq.n	58c <get_address_from_id+0x28>
     568:	280b      	cmp	r0, #11
     56a:	d01c      	beq.n	5a6 <get_address_from_id+0x42>
     56c:	2803      	cmp	r0, #3
     56e:	d001      	beq.n	574 <get_address_from_id+0x10>
}
     570:	2000      	movs	r0, #0
     572:	4770      	bx	lr
        if (id < __GLOBAL_I32_ID_START || id >= __GLOBAL_I32_ID_END) return false;
     574:	1e48      	subs	r0, r1, #1
     576:	b2c0      	uxtb	r0, r0
     578:	280b      	cmp	r0, #11
     57a:	d8f9      	bhi.n	570 <get_address_from_id+0xc>
        *size = 4;
     57c:	2004      	movs	r0, #4
     57e:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_I32_ID_START;
     580:	3901      	subs	r1, #1
        *address = &(globals.__GLOBAL_I32_START_VARIABLE) + index;
     582:	4b0f      	ldr	r3, [pc, #60]	; (5c0 <get_address_from_id+0x5c>)
     584:	0089      	lsls	r1, r1, #2
     586:	185b      	adds	r3, r3, r1
     588:	6013      	str	r3, [r2, #0]
        break;
     58a:	e7f2      	b.n	572 <get_address_from_id+0xe>
        if (id < __GLOBAL_U32_ID_START || id >= __GLOBAL_U32_ID_END) return false;
     58c:	0008      	movs	r0, r1
     58e:	380d      	subs	r0, #13
     590:	b2c0      	uxtb	r0, r0
     592:	2801      	cmp	r0, #1
     594:	d8ec      	bhi.n	570 <get_address_from_id+0xc>
        *size = 4;
     596:	2004      	movs	r0, #4
     598:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U32_ID_START;
     59a:	390d      	subs	r1, #13
        *address = &(globals.__GLOBAL_U32_START_VARIABLE) + index;
     59c:	4b09      	ldr	r3, [pc, #36]	; (5c4 <get_address_from_id+0x60>)
     59e:	0089      	lsls	r1, r1, #2
     5a0:	185b      	adds	r3, r3, r1
     5a2:	6013      	str	r3, [r2, #0]
        break;
     5a4:	e7e5      	b.n	572 <get_address_from_id+0xe>
        if (id < __GLOBAL_BOOL_ID_START || id >= __GLOBAL_BOOL_ID_END) return false;
     5a6:	0008      	movs	r0, r1
     5a8:	380f      	subs	r0, #15
     5aa:	b2c0      	uxtb	r0, r0
     5ac:	2802      	cmp	r0, #2
     5ae:	d8df      	bhi.n	570 <get_address_from_id+0xc>
        *size = 1;
     5b0:	2001      	movs	r0, #1
     5b2:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_BOOL_ID_START;
     5b4:	390f      	subs	r1, #15
        *address = &(globals.__GLOBAL_BOOL_START_VARIABLE) + index;
     5b6:	4b04      	ldr	r3, [pc, #16]	; (5c8 <get_address_from_id+0x64>)
     5b8:	185b      	adds	r3, r3, r1
     5ba:	6013      	str	r3, [r2, #0]
}
     5bc:	e7d9      	b.n	572 <get_address_from_id+0xe>
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	20000168 	.word	0x20000168
     5c4:	20000198 	.word	0x20000198
     5c8:	200001a0 	.word	0x200001a0

000005cc <get_global_type_from_id>:
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     5cc:	1e43      	subs	r3, r0, #1
     5ce:	b2db      	uxtb	r3, r3
     5d0:	2b10      	cmp	r3, #16
     5d2:	d817      	bhi.n	604 <get_global_type_from_id+0x38>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     5d4:	2800      	cmp	r0, #0
     5d6:	d009      	beq.n	5ec <get_global_type_from_id+0x20>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     5d8:	280c      	cmp	r0, #12
     5da:	d90b      	bls.n	5f4 <get_global_type_from_id+0x28>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     5dc:	280e      	cmp	r0, #14
     5de:	d90d      	bls.n	5fc <get_global_type_from_id+0x30>
    if (id - __GLOBAL_BOOL_ID_END < 0) {*type = __BOOL; return true;}
     5e0:	2811      	cmp	r0, #17
     5e2:	d810      	bhi.n	606 <get_global_type_from_id+0x3a>
     5e4:	230b      	movs	r3, #11
     5e6:	700b      	strb	r3, [r1, #0]
     5e8:	2001      	movs	r0, #1
     5ea:	e00c      	b.n	606 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     5ec:	2301      	movs	r3, #1
     5ee:	700b      	strb	r3, [r1, #0]
     5f0:	3001      	adds	r0, #1
     5f2:	e008      	b.n	606 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     5f4:	2303      	movs	r3, #3
     5f6:	700b      	strb	r3, [r1, #0]
     5f8:	2001      	movs	r0, #1
     5fa:	e004      	b.n	606 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     5fc:	2304      	movs	r3, #4
     5fe:	700b      	strb	r3, [r1, #0]
     600:	2001      	movs	r0, #1
     602:	e000      	b.n	606 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     604:	2000      	movs	r0, #0
}
     606:	4770      	bx	lr

00000608 <get_global_address_size>:
bool get_global_address_size(Global_Variable_IDs id, void** address, int* size) {
     608:	b570      	push	{r4, r5, r6, lr}
     60a:	b082      	sub	sp, #8
     60c:	0004      	movs	r4, r0
     60e:	000d      	movs	r5, r1
     610:	0016      	movs	r6, r2
    if (!get_global_type_from_id(id, &type)) return false;
     612:	466b      	mov	r3, sp
     614:	1dd9      	adds	r1, r3, #7
     616:	4b08      	ldr	r3, [pc, #32]	; (638 <get_global_address_size+0x30>)
     618:	4798      	blx	r3
     61a:	2800      	cmp	r0, #0
     61c:	d102      	bne.n	624 <get_global_address_size+0x1c>
}
     61e:	2000      	movs	r0, #0
     620:	b002      	add	sp, #8
     622:	bd70      	pop	{r4, r5, r6, pc}
    if (!get_address_from_id(type, id, address, size)) return false;
     624:	466b      	mov	r3, sp
     626:	79d8      	ldrb	r0, [r3, #7]
     628:	0033      	movs	r3, r6
     62a:	002a      	movs	r2, r5
     62c:	0021      	movs	r1, r4
     62e:	4c03      	ldr	r4, [pc, #12]	; (63c <get_global_address_size+0x34>)
     630:	47a0      	blx	r4
     632:	2800      	cmp	r0, #0
     634:	d1f4      	bne.n	620 <get_global_address_size+0x18>
     636:	e7f2      	b.n	61e <get_global_address_size+0x16>
     638:	000005cd 	.word	0x000005cd
     63c:	00000565 	.word	0x00000565

00000640 <get_global_name>:
}

bool get_global_name(Global_Variable_IDs id, uint8_t* buffer, int* length, int maxLength) {
     640:	b5f0      	push	{r4, r5, r6, r7, lr}
     642:	46c6      	mov	lr, r8
     644:	b500      	push	{lr}
     646:	000d      	movs	r5, r1
     648:	0017      	movs	r7, r2
     64a:	001c      	movs	r4, r3
    bool ret = true;
    if (id >= __GLOBAL_ID_END) {
     64c:	2811      	cmp	r0, #17
     64e:	d817      	bhi.n	680 <get_global_name+0x40>
    bool ret = true;
     650:	2301      	movs	r3, #1
     652:	4698      	mov	r8, r3
        id = 0;
        ret = false;
    }

    *length = MIN_2(maxLength, strlen(global_variable_names[id]) + 1);
     654:	0006      	movs	r6, r0
     656:	4b0c      	ldr	r3, [pc, #48]	; (688 <get_global_name+0x48>)
     658:	0080      	lsls	r0, r0, #2
     65a:	58c0      	ldr	r0, [r0, r3]
     65c:	4b0b      	ldr	r3, [pc, #44]	; (68c <get_global_name+0x4c>)
     65e:	4798      	blx	r3
     660:	3001      	adds	r0, #1
     662:	42a0      	cmp	r0, r4
     664:	d800      	bhi.n	668 <get_global_name+0x28>
     666:	0004      	movs	r4, r0
     668:	603c      	str	r4, [r7, #0]

    memcpy(buffer, global_variable_names[id], *length);
     66a:	4b07      	ldr	r3, [pc, #28]	; (688 <get_global_name+0x48>)
     66c:	00b6      	lsls	r6, r6, #2
     66e:	58f1      	ldr	r1, [r6, r3]
     670:	0022      	movs	r2, r4
     672:	0028      	movs	r0, r5
     674:	4b06      	ldr	r3, [pc, #24]	; (690 <get_global_name+0x50>)
     676:	4798      	blx	r3

    return ret;
}
     678:	4640      	mov	r0, r8
     67a:	bc80      	pop	{r7}
     67c:	46b8      	mov	r8, r7
     67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = false;
     680:	2300      	movs	r3, #0
     682:	4698      	mov	r8, r3
        id = 0;
     684:	2000      	movs	r0, #0
     686:	e7e5      	b.n	654 <get_global_name+0x14>
     688:	20000000 	.word	0x20000000
     68c:	00005285 	.word	0x00005285
     690:	000051f5 	.word	0x000051f5

00000694 <init_globals>:

bool init_globals() {
     694:	b570      	push	{r4, r5, r6, lr}
     696:	b08a      	sub	sp, #40	; 0x28
    // load header
    EEPROM_Request request;
    eeprom_read_request(&request, 0, &__eeprom_header, sizeof(__eeprom_header));
     698:	4c1b      	ldr	r4, [pc, #108]	; (708 <init_globals+0x74>)
     69a:	0022      	movs	r2, r4
     69c:	3240      	adds	r2, #64	; 0x40
     69e:	2308      	movs	r3, #8
     6a0:	2100      	movs	r1, #0
     6a2:	4668      	mov	r0, sp
     6a4:	4d19      	ldr	r5, [pc, #100]	; (70c <init_globals+0x78>)
     6a6:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     6a8:	4668      	mov	r0, sp
     6aa:	4b19      	ldr	r3, [pc, #100]	; (710 <init_globals+0x7c>)
     6ac:	4798      	blx	r3
    
    // check and modify header values
    if (__eeprom_header.GlobalHash != __GLOBAL_HASH) {
     6ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
     6b0:	4b18      	ldr	r3, [pc, #96]	; (714 <init_globals+0x80>)
     6b2:	429a      	cmp	r2, r3
     6b4:	d11c      	bne.n	6f0 <init_globals+0x5c>
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
        eeprom_wait_until_done(&request);
    }
    
    ++__eeprom_header.StartupCount;
     6b6:	4c14      	ldr	r4, [pc, #80]	; (708 <init_globals+0x74>)
     6b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
     6ba:	3301      	adds	r3, #1
     6bc:	6463      	str	r3, [r4, #68]	; 0x44
    eeprom_write_request(&request, 4, &(__eeprom_header.StartupCount), 4);
     6be:	0022      	movs	r2, r4
     6c0:	3244      	adds	r2, #68	; 0x44
     6c2:	2304      	movs	r3, #4
     6c4:	2104      	movs	r1, #4
     6c6:	4668      	mov	r0, sp
     6c8:	4d13      	ldr	r5, [pc, #76]	; (718 <init_globals+0x84>)
     6ca:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     6cc:	4668      	mov	r0, sp
     6ce:	4d10      	ldr	r5, [pc, #64]	; (710 <init_globals+0x7c>)
     6d0:	47a8      	blx	r5

    // load globals
    eeprom_read_request(&request, __EEPROM_GLOBAL_VARIABLES_START_ADDRESS, &globals, sizeof(globals));
     6d2:	2340      	movs	r3, #64	; 0x40
     6d4:	0022      	movs	r2, r4
     6d6:	2120      	movs	r1, #32
     6d8:	4668      	mov	r0, sp
     6da:	4e0c      	ldr	r6, [pc, #48]	; (70c <init_globals+0x78>)
     6dc:	47b0      	blx	r6
    eeprom_wait_until_done(&request);
     6de:	4668      	mov	r0, sp
     6e0:	47a8      	blx	r5

    globals.GlobalHash = __eeprom_header.GlobalHash;
     6e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
     6e4:	6323      	str	r3, [r4, #48]	; 0x30
    globals.StartupCount = __eeprom_header.StartupCount;
     6e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
     6e8:	6363      	str	r3, [r4, #52]	; 0x34

    return true;
     6ea:	2001      	movs	r0, #1
     6ec:	b00a      	add	sp, #40	; 0x28
     6ee:	bd70      	pop	{r4, r5, r6, pc}
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
     6f0:	4a05      	ldr	r2, [pc, #20]	; (708 <init_globals+0x74>)
     6f2:	6413      	str	r3, [r2, #64]	; 0x40
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
     6f4:	3240      	adds	r2, #64	; 0x40
     6f6:	2304      	movs	r3, #4
     6f8:	2100      	movs	r1, #0
     6fa:	4668      	mov	r0, sp
     6fc:	4c06      	ldr	r4, [pc, #24]	; (718 <init_globals+0x84>)
     6fe:	47a0      	blx	r4
        eeprom_wait_until_done(&request);
     700:	4668      	mov	r0, sp
     702:	4b03      	ldr	r3, [pc, #12]	; (710 <init_globals+0x7c>)
     704:	4798      	blx	r3
     706:	e7d6      	b.n	6b6 <init_globals+0x22>
     708:	20000168 	.word	0x20000168
     70c:	00000785 	.word	0x00000785
     710:	00003975 	.word	0x00003975
     714:	9fc0b1d3 	.word	0x9fc0b1d3
     718:	000007b1 	.word	0x000007b1

0000071c <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     71c:	b510      	push	{r4, lr}
     71e:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     720:	2480      	movs	r4, #128	; 0x80
     722:	05e4      	lsls	r4, r4, #23
     724:	0021      	movs	r1, r4
     726:	2001      	movs	r0, #1
     728:	4b0b      	ldr	r3, [pc, #44]	; (758 <init_eeprom+0x3c>)
     72a:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     72c:	0021      	movs	r1, r4
     72e:	2001      	movs	r0, #1
     730:	4b0a      	ldr	r3, [pc, #40]	; (75c <init_eeprom+0x40>)
     732:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     734:	ab02      	add	r3, sp, #8
     736:	490a      	ldr	r1, [pc, #40]	; (760 <init_eeprom+0x44>)
     738:	680a      	ldr	r2, [r1, #0]
     73a:	9202      	str	r2, [sp, #8]
     73c:	7909      	ldrb	r1, [r1, #4]
     73e:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     740:	4808      	ldr	r0, [pc, #32]	; (764 <init_eeprom+0x48>)
     742:	2180      	movs	r1, #128	; 0x80
     744:	0209      	lsls	r1, r1, #8
     746:	9100      	str	r1, [sp, #0]
     748:	9b03      	ldr	r3, [sp, #12]
     74a:	4907      	ldr	r1, [pc, #28]	; (768 <init_eeprom+0x4c>)
     74c:	4c07      	ldr	r4, [pc, #28]	; (76c <init_eeprom+0x50>)
     74e:	47a0      	blx	r4

    return true;
}
     750:	2001      	movs	r0, #1
     752:	b004      	add	sp, #16
     754:	bd10      	pop	{r4, pc}
     756:	46c0      	nop			; (mov r8, r8)
     758:	00001bc9 	.word	0x00001bc9
     75c:	00001bb9 	.word	0x00001bb9
     760:	000055b4 	.word	0x000055b4
     764:	200001b0 	.word	0x200001b0
     768:	42001400 	.word	0x42001400
     76c:	00001469 	.word	0x00001469

00000770 <check_eeprom>:

bool check_eeprom() {
     770:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     772:	4802      	ldr	r0, [pc, #8]	; (77c <check_eeprom+0xc>)
     774:	4b02      	ldr	r3, [pc, #8]	; (780 <check_eeprom+0x10>)
     776:	4798      	blx	r3
}
     778:	bd10      	pop	{r4, pc}
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	200001b0 	.word	0x200001b0
     780:	00001615 	.word	0x00001615

00000784 <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     784:	b530      	push	{r4, r5, lr}
     786:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     788:	4d06      	ldr	r5, [pc, #24]	; (7a4 <eeprom_read_request+0x20>)
     78a:	4c07      	ldr	r4, [pc, #28]	; (7a8 <eeprom_read_request+0x24>)
     78c:	9203      	str	r2, [sp, #12]
     78e:	9302      	str	r3, [sp, #8]
     790:	9101      	str	r1, [sp, #4]
     792:	2300      	movs	r3, #0
     794:	9300      	str	r3, [sp, #0]
     796:	002a      	movs	r2, r5
     798:	0001      	movs	r1, r0
     79a:	0020      	movs	r0, r4
     79c:	4c03      	ldr	r4, [pc, #12]	; (7ac <eeprom_read_request+0x28>)
     79e:	47a0      	blx	r4
}
     7a0:	b005      	add	sp, #20
     7a2:	bd30      	pop	{r4, r5, pc}
     7a4:	200001b0 	.word	0x200001b0
     7a8:	200002b4 	.word	0x200002b4
     7ac:	00003941 	.word	0x00003941

000007b0 <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     7b0:	b530      	push	{r4, r5, lr}
     7b2:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     7b4:	4d07      	ldr	r5, [pc, #28]	; (7d4 <eeprom_write_request+0x24>)
     7b6:	4c08      	ldr	r4, [pc, #32]	; (7d8 <eeprom_write_request+0x28>)
     7b8:	9203      	str	r2, [sp, #12]
     7ba:	9302      	str	r3, [sp, #8]
     7bc:	9101      	str	r1, [sp, #4]
     7be:	2301      	movs	r3, #1
     7c0:	9300      	str	r3, [sp, #0]
     7c2:	2300      	movs	r3, #0
     7c4:	002a      	movs	r2, r5
     7c6:	0001      	movs	r1, r0
     7c8:	0020      	movs	r0, r4
     7ca:	4c04      	ldr	r4, [pc, #16]	; (7dc <eeprom_write_request+0x2c>)
     7cc:	47a0      	blx	r4
     7ce:	b005      	add	sp, #20
     7d0:	bd30      	pop	{r4, r5, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	200001b0 	.word	0x200001b0
     7d8:	200002b4 	.word	0x200002b4
     7dc:	00003941 	.word	0x00003941

000007e0 <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e2:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     7e4:	2480      	movs	r4, #128	; 0x80
     7e6:	0524      	lsls	r4, r4, #20
     7e8:	0021      	movs	r1, r4
     7ea:	2000      	movs	r0, #0
     7ec:	4e15      	ldr	r6, [pc, #84]	; (844 <imu_init+0x64>)
     7ee:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     7f0:	0021      	movs	r1, r4
     7f2:	2000      	movs	r0, #0
     7f4:	4f14      	ldr	r7, [pc, #80]	; (848 <imu_init+0x68>)
     7f6:	47b8      	blx	r7
	IMU_OFF_BUS();
     7f8:	2580      	movs	r5, #128	; 0x80
     7fa:	03ad      	lsls	r5, r5, #14
     7fc:	0029      	movs	r1, r5
     7fe:	2000      	movs	r0, #0
     800:	4b12      	ldr	r3, [pc, #72]	; (84c <imu_init+0x6c>)
     802:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     804:	0029      	movs	r1, r5
     806:	2000      	movs	r0, #0
     808:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     80a:	0029      	movs	r1, r5
     80c:	2000      	movs	r0, #0
     80e:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     810:	9400      	str	r4, [sp, #0]
     812:	2300      	movs	r3, #0
     814:	466a      	mov	r2, sp
     816:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     818:	480d      	ldr	r0, [pc, #52]	; (850 <imu_init+0x70>)
     81a:	0022      	movs	r2, r4
     81c:	9b01      	ldr	r3, [sp, #4]
     81e:	490d      	ldr	r1, [pc, #52]	; (854 <imu_init+0x74>)
     820:	4c0d      	ldr	r4, [pc, #52]	; (858 <imu_init+0x78>)
     822:	47a0      	blx	r4
     824:	1e04      	subs	r4, r0, #0
     826:	d107      	bne.n	838 <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     828:	2180      	movs	r1, #128	; 0x80
     82a:	0389      	lsls	r1, r1, #14
     82c:	2000      	movs	r0, #0
     82e:	4b07      	ldr	r3, [pc, #28]	; (84c <imu_init+0x6c>)
     830:	4798      	blx	r3
    return ret;
}
     832:	0020      	movs	r0, r4
     834:	b003      	add	sp, #12
     836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     838:	4805      	ldr	r0, [pc, #20]	; (850 <imu_init+0x70>)
     83a:	4b08      	ldr	r3, [pc, #32]	; (85c <imu_init+0x7c>)
     83c:	4798      	blx	r3
     83e:	0004      	movs	r4, r0
     840:	e7f2      	b.n	828 <imu_init+0x48>
     842:	46c0      	nop			; (mov r8, r8)
     844:	00001bc9 	.word	0x00001bc9
     848:	00001bb9 	.word	0x00001bb9
     84c:	00001bd9 	.word	0x00001bd9
     850:	200001bc 	.word	0x200001bc
     854:	42001400 	.word	0x42001400
     858:	000019e9 	.word	0x000019e9
     85c:	00001b2d 	.word	0x00001b2d

00000860 <check_imu>:

bool check_imu() {
     860:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     862:	2180      	movs	r1, #128	; 0x80
     864:	0389      	lsls	r1, r1, #14
     866:	2000      	movs	r0, #0
     868:	4b09      	ldr	r3, [pc, #36]	; (890 <check_imu+0x30>)
     86a:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     86c:	4809      	ldr	r0, [pc, #36]	; (894 <check_imu+0x34>)
     86e:	4b0a      	ldr	r3, [pc, #40]	; (898 <check_imu+0x38>)
     870:	4798      	blx	r3
     872:	1e04      	subs	r4, r0, #0
     874:	d106      	bne.n	884 <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     876:	2180      	movs	r1, #128	; 0x80
     878:	0389      	lsls	r1, r1, #14
     87a:	2000      	movs	r0, #0
     87c:	4b07      	ldr	r3, [pc, #28]	; (89c <check_imu+0x3c>)
     87e:	4798      	blx	r3
    return pass;
}
     880:	0020      	movs	r0, r4
     882:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     884:	4803      	ldr	r0, [pc, #12]	; (894 <check_imu+0x34>)
     886:	4b06      	ldr	r3, [pc, #24]	; (8a0 <check_imu+0x40>)
     888:	4798      	blx	r3
     88a:	0004      	movs	r4, r0
     88c:	e7f3      	b.n	876 <check_imu+0x16>
     88e:	46c0      	nop			; (mov r8, r8)
     890:	00001bc9 	.word	0x00001bc9
     894:	200001bc 	.word	0x200001bc
     898:	00001a59 	.word	0x00001a59
     89c:	00001bd9 	.word	0x00001bd9
     8a0:	00001b89 	.word	0x00001b89

000008a4 <request_imu_data>:

void request_imu_data() {
     8a4:	b510      	push	{r4, lr}
     8a6:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     8a8:	4a09      	ldr	r2, [pc, #36]	; (8d0 <request_imu_data+0x2c>)
     8aa:	0011      	movs	r1, r2
     8ac:	310c      	adds	r1, #12
     8ae:	4809      	ldr	r0, [pc, #36]	; (8d4 <request_imu_data+0x30>)
     8b0:	0013      	movs	r3, r2
     8b2:	3334      	adds	r3, #52	; 0x34
     8b4:	9304      	str	r3, [sp, #16]
     8b6:	230e      	movs	r3, #14
     8b8:	9303      	str	r3, [sp, #12]
     8ba:	331f      	adds	r3, #31
     8bc:	9302      	str	r3, [sp, #8]
     8be:	2300      	movs	r3, #0
     8c0:	9301      	str	r3, [sp, #4]
     8c2:	9300      	str	r3, [sp, #0]
     8c4:	3302      	adds	r3, #2
     8c6:	4c04      	ldr	r4, [pc, #16]	; (8d8 <request_imu_data+0x34>)
     8c8:	47a0      	blx	r4
}
     8ca:	b006      	add	sp, #24
     8cc:	bd10      	pop	{r4, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	200001bc 	.word	0x200001bc
     8d4:	200002b4 	.word	0x200002b4
     8d8:	00003be5 	.word	0x00003be5

000008dc <wait_for_imu_data>:

void wait_for_imu_data() {
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8de:	46c6      	mov	lr, r8
     8e0:	b500      	push	{lr}
     8e2:	b086      	sub	sp, #24
    imu_icm20948_wait_until_done(&data_request);
     8e4:	4c8c      	ldr	r4, [pc, #560]	; (b18 <wait_for_imu_data+0x23c>)
     8e6:	0020      	movs	r0, r4
     8e8:	300c      	adds	r0, #12
     8ea:	4b8c      	ldr	r3, [pc, #560]	; (b1c <wait_for_imu_data+0x240>)
     8ec:	4798      	blx	r3

    // float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
    int32_t accel_multiplier = (__G__ * ACCEL_MIN_RANGE_G) >> (15 - accel_fs_sel);
     8ee:	6c66      	ldr	r6, [r4, #68]	; 0x44
     8f0:	230f      	movs	r3, #15
     8f2:	469c      	mov	ip, r3
     8f4:	1b9b      	subs	r3, r3, r6
     8f6:	488a      	ldr	r0, [pc, #552]	; (b20 <wait_for_imu_data+0x244>)
     8f8:	4118      	asrs	r0, r3
    globals.AccelerationXRaw = SWAPI16(raw_data.accel_x) * accel_multiplier;
     8fa:	2234      	movs	r2, #52	; 0x34
     8fc:	5ea3      	ldrsh	r3, [r4, r2]
     8fe:	0219      	lsls	r1, r3, #8
     900:	b209      	sxth	r1, r1
     902:	b29b      	uxth	r3, r3
     904:	0a1b      	lsrs	r3, r3, #8
     906:	4319      	orrs	r1, r3
     908:	0003      	movs	r3, r0
     90a:	434b      	muls	r3, r1
     90c:	4f85      	ldr	r7, [pc, #532]	; (b24 <wait_for_imu_data+0x248>)
     90e:	603b      	str	r3, [r7, #0]
    globals.AccelerationYRaw = SWAPI16(raw_data.accel_y) * accel_multiplier;
     910:	2236      	movs	r2, #54	; 0x36
     912:	5ea3      	ldrsh	r3, [r4, r2]
     914:	021a      	lsls	r2, r3, #8
     916:	b212      	sxth	r2, r2
     918:	b29b      	uxth	r3, r3
     91a:	0a1b      	lsrs	r3, r3, #8
     91c:	431a      	orrs	r2, r3
     91e:	0003      	movs	r3, r0
     920:	4353      	muls	r3, r2
     922:	607b      	str	r3, [r7, #4]
    globals.AccelerationZRaw = SWAPI16(raw_data.accel_z) * accel_multiplier;
     924:	2338      	movs	r3, #56	; 0x38
     926:	5ee5      	ldrsh	r5, [r4, r3]
     928:	022b      	lsls	r3, r5, #8
     92a:	b21b      	sxth	r3, r3
     92c:	b2ad      	uxth	r5, r5
     92e:	0a2d      	lsrs	r5, r5, #8
     930:	432b      	orrs	r3, r5
     932:	4698      	mov	r8, r3
     934:	4358      	muls	r0, r3
     936:	60b8      	str	r0, [r7, #8]

    // float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
    int32_t gyro_multiplier = (GYRO_MIN_RANGE_MICRORADIANS) >> (15 - gyro_fs_sel);
     938:	6ca5      	ldr	r5, [r4, #72]	; 0x48
     93a:	4660      	mov	r0, ip
     93c:	1b45      	subs	r5, r0, r5
     93e:	487a      	ldr	r0, [pc, #488]	; (b28 <wait_for_imu_data+0x24c>)
     940:	4128      	asrs	r0, r5
    globals.AngularVelocityXRaw = SWAPI16(raw_data.gyro_x) * gyro_multiplier;
     942:	233a      	movs	r3, #58	; 0x3a
     944:	5ee5      	ldrsh	r5, [r4, r3]
     946:	46ac      	mov	ip, r5
     948:	022d      	lsls	r5, r5, #8
     94a:	b22d      	sxth	r5, r5
     94c:	4663      	mov	r3, ip
     94e:	b29b      	uxth	r3, r3
     950:	0a1b      	lsrs	r3, r3, #8
     952:	431d      	orrs	r5, r3
     954:	4345      	muls	r5, r0
     956:	60fd      	str	r5, [r7, #12]
    globals.AngularVelocityYRaw = SWAPI16(raw_data.gyro_y)* gyro_multiplier;
     958:	253c      	movs	r5, #60	; 0x3c
     95a:	5f63      	ldrsh	r3, [r4, r5]
     95c:	021d      	lsls	r5, r3, #8
     95e:	b22d      	sxth	r5, r5
     960:	b29b      	uxth	r3, r3
     962:	0a1b      	lsrs	r3, r3, #8
     964:	431d      	orrs	r5, r3
     966:	4345      	muls	r5, r0
     968:	613d      	str	r5, [r7, #16]
    globals.AngularVelocityZRaw = SWAPI16(raw_data.gyro_z) * gyro_multiplier;
     96a:	233e      	movs	r3, #62	; 0x3e
     96c:	5ee4      	ldrsh	r4, [r4, r3]
     96e:	0225      	lsls	r5, r4, #8
     970:	b22d      	sxth	r5, r5
     972:	b2a4      	uxth	r4, r4
     974:	0a24      	lsrs	r4, r4, #8
     976:	432c      	orrs	r4, r5
     978:	4360      	muls	r0, r4
     97a:	6178      	str	r0, [r7, #20]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     97c:	4643      	mov	r3, r8
     97e:	17d8      	asrs	r0, r3, #31
     980:	181b      	adds	r3, r3, r0
     982:	4043      	eors	r3, r0
     984:	b29b      	uxth	r3, r3
     986:	17d0      	asrs	r0, r2, #31
     988:	1812      	adds	r2, r2, r0
     98a:	4042      	eors	r2, r0
     98c:	b292      	uxth	r2, r2
     98e:	17c8      	asrs	r0, r1, #31
     990:	1809      	adds	r1, r1, r0
     992:	4041      	eors	r1, r0
     994:	b289      	uxth	r1, r1
     996:	1c10      	adds	r0, r2, #0
     998:	428a      	cmp	r2, r1
     99a:	d200      	bcs.n	99e <wait_for_imu_data+0xc2>
     99c:	1c08      	adds	r0, r1, #0
     99e:	1c1a      	adds	r2, r3, #0
     9a0:	b281      	uxth	r1, r0
     9a2:	428b      	cmp	r3, r1
     9a4:	d200      	bcs.n	9a8 <wait_for_imu_data+0xcc>
     9a6:	1c02      	adds	r2, r0, #0
     9a8:	b212      	sxth	r2, r2
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     9aa:	2e03      	cmp	r6, #3
     9ac:	d002      	beq.n	9b4 <wait_for_imu_data+0xd8>
     9ae:	4b5f      	ldr	r3, [pc, #380]	; (b2c <wait_for_imu_data+0x250>)
     9b0:	429a      	cmp	r2, r3
     9b2:	dc40      	bgt.n	a36 <wait_for_imu_data+0x15a>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     9b4:	2e00      	cmp	r6, #0
     9b6:	d002      	beq.n	9be <wait_for_imu_data+0xe2>
     9b8:	4b5d      	ldr	r3, [pc, #372]	; (b30 <wait_for_imu_data+0x254>)
     9ba:	429a      	cmp	r2, r3
     9bc:	dd55      	ble.n	a6a <wait_for_imu_data+0x18e>
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     9be:	4856      	ldr	r0, [pc, #344]	; (b18 <wait_for_imu_data+0x23c>)
     9c0:	233e      	movs	r3, #62	; 0x3e
     9c2:	5ec2      	ldrsh	r2, [r0, r3]
     9c4:	0213      	lsls	r3, r2, #8
     9c6:	b21b      	sxth	r3, r3
     9c8:	b292      	uxth	r2, r2
     9ca:	0a12      	lsrs	r2, r2, #8
     9cc:	4313      	orrs	r3, r2
     9ce:	17da      	asrs	r2, r3, #31
     9d0:	189b      	adds	r3, r3, r2
     9d2:	4053      	eors	r3, r2
     9d4:	b29b      	uxth	r3, r3
     9d6:	223c      	movs	r2, #60	; 0x3c
     9d8:	5e81      	ldrsh	r1, [r0, r2]
     9da:	020a      	lsls	r2, r1, #8
     9dc:	b212      	sxth	r2, r2
     9de:	b289      	uxth	r1, r1
     9e0:	0a09      	lsrs	r1, r1, #8
     9e2:	430a      	orrs	r2, r1
     9e4:	17d1      	asrs	r1, r2, #31
     9e6:	1852      	adds	r2, r2, r1
     9e8:	404a      	eors	r2, r1
     9ea:	b292      	uxth	r2, r2
     9ec:	213a      	movs	r1, #58	; 0x3a
     9ee:	5e40      	ldrsh	r0, [r0, r1]
     9f0:	0201      	lsls	r1, r0, #8
     9f2:	b209      	sxth	r1, r1
     9f4:	b280      	uxth	r0, r0
     9f6:	0a00      	lsrs	r0, r0, #8
     9f8:	4301      	orrs	r1, r0
     9fa:	17c8      	asrs	r0, r1, #31
     9fc:	1809      	adds	r1, r1, r0
     9fe:	4041      	eors	r1, r0
     a00:	b289      	uxth	r1, r1
     a02:	1c10      	adds	r0, r2, #0
     a04:	428a      	cmp	r2, r1
     a06:	d200      	bcs.n	a0a <wait_for_imu_data+0x12e>
     a08:	1c08      	adds	r0, r1, #0
     a0a:	1c1a      	adds	r2, r3, #0
     a0c:	b281      	uxth	r1, r0
     a0e:	428b      	cmp	r3, r1
     a10:	d200      	bcs.n	a14 <wait_for_imu_data+0x138>
     a12:	1c02      	adds	r2, r0, #0
     a14:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     a16:	4b40      	ldr	r3, [pc, #256]	; (b18 <wait_for_imu_data+0x23c>)
     a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     a1a:	2b03      	cmp	r3, #3
     a1c:	d002      	beq.n	a24 <wait_for_imu_data+0x148>
     a1e:	4943      	ldr	r1, [pc, #268]	; (b2c <wait_for_imu_data+0x250>)
     a20:	428a      	cmp	r2, r1
     a22:	dc3c      	bgt.n	a9e <wait_for_imu_data+0x1c2>
        ++gyro_fs_sel;
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     a24:	2b00      	cmp	r3, #0
     a26:	d002      	beq.n	a2e <wait_for_imu_data+0x152>
     a28:	4941      	ldr	r1, [pc, #260]	; (b30 <wait_for_imu_data+0x254>)
     a2a:	428a      	cmp	r2, r1
     a2c:	dd55      	ble.n	ada <wait_for_imu_data+0x1fe>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_off();
    }

     a2e:	b006      	add	sp, #24
     a30:	bc80      	pop	{r7}
     a32:	46b8      	mov	r8, r7
     a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     a36:	3601      	adds	r6, #1
     a38:	4a37      	ldr	r2, [pc, #220]	; (b18 <wait_for_imu_data+0x23c>)
     a3a:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     a3c:	b2f6      	uxtb	r6, r6
     a3e:	0076      	lsls	r6, r6, #1
     a40:	2306      	movs	r3, #6
     a42:	401e      	ands	r6, r3
     a44:	3346      	adds	r3, #70	; 0x46
     a46:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     a48:	0011      	movs	r1, r2
     a4a:	3150      	adds	r1, #80	; 0x50
     a4c:	4839      	ldr	r0, [pc, #228]	; (b34 <wait_for_imu_data+0x258>)
     a4e:	0013      	movs	r3, r2
     a50:	334c      	adds	r3, #76	; 0x4c
     a52:	9304      	str	r3, [sp, #16]
     a54:	2301      	movs	r3, #1
     a56:	9303      	str	r3, [sp, #12]
     a58:	2414      	movs	r4, #20
     a5a:	9402      	str	r4, [sp, #8]
     a5c:	3c12      	subs	r4, #18
     a5e:	9401      	str	r4, [sp, #4]
     a60:	9300      	str	r3, [sp, #0]
     a62:	3301      	adds	r3, #1
     a64:	4c34      	ldr	r4, [pc, #208]	; (b38 <wait_for_imu_data+0x25c>)
     a66:	47a0      	blx	r4
     a68:	e7a9      	b.n	9be <wait_for_imu_data+0xe2>
        --accel_fs_sel;
     a6a:	3e01      	subs	r6, #1
     a6c:	4a2a      	ldr	r2, [pc, #168]	; (b18 <wait_for_imu_data+0x23c>)
     a6e:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     a70:	b2f6      	uxtb	r6, r6
     a72:	0076      	lsls	r6, r6, #1
     a74:	2306      	movs	r3, #6
     a76:	401e      	ands	r6, r3
     a78:	3346      	adds	r3, #70	; 0x46
     a7a:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     a7c:	0011      	movs	r1, r2
     a7e:	3150      	adds	r1, #80	; 0x50
     a80:	482c      	ldr	r0, [pc, #176]	; (b34 <wait_for_imu_data+0x258>)
     a82:	0013      	movs	r3, r2
     a84:	334c      	adds	r3, #76	; 0x4c
     a86:	9304      	str	r3, [sp, #16]
     a88:	2301      	movs	r3, #1
     a8a:	9303      	str	r3, [sp, #12]
     a8c:	2414      	movs	r4, #20
     a8e:	9402      	str	r4, [sp, #8]
     a90:	3c12      	subs	r4, #18
     a92:	9401      	str	r4, [sp, #4]
     a94:	9300      	str	r3, [sp, #0]
     a96:	3301      	adds	r3, #1
     a98:	4c27      	ldr	r4, [pc, #156]	; (b38 <wait_for_imu_data+0x25c>)
     a9a:	47a0      	blx	r4
     a9c:	e78f      	b.n	9be <wait_for_imu_data+0xe2>
        ++gyro_fs_sel;
     a9e:	3301      	adds	r3, #1
     aa0:	4a1d      	ldr	r2, [pc, #116]	; (b18 <wait_for_imu_data+0x23c>)
     aa2:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     aa4:	b2db      	uxtb	r3, r3
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	2106      	movs	r1, #6
     aaa:	400b      	ands	r3, r1
     aac:	3172      	adds	r1, #114	; 0x72
     aae:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     ab0:	0011      	movs	r1, r2
     ab2:	317c      	adds	r1, #124	; 0x7c
     ab4:	481f      	ldr	r0, [pc, #124]	; (b34 <wait_for_imu_data+0x258>)
     ab6:	0013      	movs	r3, r2
     ab8:	3378      	adds	r3, #120	; 0x78
     aba:	9304      	str	r3, [sp, #16]
     abc:	2301      	movs	r3, #1
     abe:	9303      	str	r3, [sp, #12]
     ac0:	9302      	str	r3, [sp, #8]
     ac2:	2402      	movs	r4, #2
     ac4:	9401      	str	r4, [sp, #4]
     ac6:	9300      	str	r3, [sp, #0]
     ac8:	3301      	adds	r3, #1
     aca:	4c1b      	ldr	r4, [pc, #108]	; (b38 <wait_for_imu_data+0x25c>)
     acc:	47a0      	blx	r4
        led_on();
     ace:	2180      	movs	r1, #128	; 0x80
     ad0:	03c9      	lsls	r1, r1, #15
     ad2:	2001      	movs	r0, #1
     ad4:	4b19      	ldr	r3, [pc, #100]	; (b3c <wait_for_imu_data+0x260>)
     ad6:	4798      	blx	r3
     ad8:	e7a9      	b.n	a2e <wait_for_imu_data+0x152>
        --gyro_fs_sel;
     ada:	3b01      	subs	r3, #1
     adc:	4a0e      	ldr	r2, [pc, #56]	; (b18 <wait_for_imu_data+0x23c>)
     ade:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     ae0:	b2db      	uxtb	r3, r3
     ae2:	005b      	lsls	r3, r3, #1
     ae4:	2106      	movs	r1, #6
     ae6:	400b      	ands	r3, r1
     ae8:	3172      	adds	r1, #114	; 0x72
     aea:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     aec:	0011      	movs	r1, r2
     aee:	317c      	adds	r1, #124	; 0x7c
     af0:	4810      	ldr	r0, [pc, #64]	; (b34 <wait_for_imu_data+0x258>)
     af2:	0013      	movs	r3, r2
     af4:	3378      	adds	r3, #120	; 0x78
     af6:	9304      	str	r3, [sp, #16]
     af8:	2301      	movs	r3, #1
     afa:	9303      	str	r3, [sp, #12]
     afc:	9302      	str	r3, [sp, #8]
     afe:	2402      	movs	r4, #2
     b00:	9401      	str	r4, [sp, #4]
     b02:	9300      	str	r3, [sp, #0]
     b04:	3301      	adds	r3, #1
     b06:	4c0c      	ldr	r4, [pc, #48]	; (b38 <wait_for_imu_data+0x25c>)
     b08:	47a0      	blx	r4
        led_off();
     b0a:	2180      	movs	r1, #128	; 0x80
     b0c:	03c9      	lsls	r1, r1, #15
     b0e:	2001      	movs	r0, #1
     b10:	4b0b      	ldr	r3, [pc, #44]	; (b40 <wait_for_imu_data+0x264>)
     b12:	4798      	blx	r3
     b14:	e78b      	b.n	a2e <wait_for_imu_data+0x152>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	200001bc 	.word	0x200001bc
     b1c:	00003c21 	.word	0x00003c21
     b20:	012b4674 	.word	0x012b4674
     b24:	20000168 	.word	0x20000168
     b28:	0042943b 	.word	0x0042943b
     b2c:	00007333 	.word	0x00007333
     b30:	00003333 	.word	0x00003333
     b34:	200002b4 	.word	0x200002b4
     b38:	00003be5 	.word	0x00003be5
     b3c:	00001bc9 	.word	0x00001bc9
     b40:	00001bd9 	.word	0x00001bd9

00000b44 <serial_init>:
    .rxtrig = UART4_DMA_RX_TRIGGER,
    .priority = UART4_DMA_PRIORITY
};


bool serial_init() {
     b44:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

	// init uart
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     b46:	22c0      	movs	r2, #192	; 0xc0
     b48:	0092      	lsls	r2, r2, #2
     b4a:	2102      	movs	r1, #2
     b4c:	2000      	movs	r0, #0
     b4e:	4c18      	ldr	r4, [pc, #96]	; (bb0 <serial_init+0x6c>)
     b50:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     b52:	22c0      	movs	r2, #192	; 0xc0
     b54:	0312      	lsls	r2, r2, #12
     b56:	2102      	movs	r1, #2
     b58:	2000      	movs	r0, #0
     b5a:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     b5c:	22c0      	movs	r2, #192	; 0xc0
     b5e:	0212      	lsls	r2, r2, #8
     b60:	2102      	movs	r1, #2
     b62:	2001      	movs	r0, #1
     b64:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     b66:	22c0      	movs	r2, #192	; 0xc0
     b68:	0292      	lsls	r2, r2, #10
     b6a:	2102      	movs	r1, #2
     b6c:	2001      	movs	r0, #1
     b6e:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     b70:	2596      	movs	r5, #150	; 0x96
     b72:	01ad      	lsls	r5, r5, #6
     b74:	002b      	movs	r3, r5
     b76:	2200      	movs	r2, #0
     b78:	2101      	movs	r1, #1
     b7a:	480e      	ldr	r0, [pc, #56]	; (bb4 <serial_init+0x70>)
     b7c:	4c0e      	ldr	r4, [pc, #56]	; (bb8 <serial_init+0x74>)
     b7e:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     b80:	002b      	movs	r3, r5
     b82:	2201      	movs	r2, #1
     b84:	2103      	movs	r1, #3
     b86:	480d      	ldr	r0, [pc, #52]	; (bbc <serial_init+0x78>)
     b88:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     b8a:	002b      	movs	r3, r5
     b8c:	2201      	movs	r2, #1
     b8e:	2103      	movs	r1, #3
     b90:	480b      	ldr	r0, [pc, #44]	; (bc0 <serial_init+0x7c>)
     b92:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     b94:	002b      	movs	r3, r5
     b96:	2200      	movs	r2, #0
     b98:	2101      	movs	r1, #1
     b9a:	480a      	ldr	r0, [pc, #40]	; (bc4 <serial_init+0x80>)
     b9c:	47a0      	blx	r4
    
	// init usb
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     b9e:	2180      	movs	r1, #128	; 0x80
     ba0:	20e0      	movs	r0, #224	; 0xe0
     ba2:	0049      	lsls	r1, r1, #1
     ba4:	00c0      	lsls	r0, r0, #3
     ba6:	4b08      	ldr	r3, [pc, #32]	; (bc8 <serial_init+0x84>)
     ba8:	4798      	blx	r3
	usb_attach();
     baa:	4b08      	ldr	r3, [pc, #32]	; (bcc <serial_init+0x88>)
     bac:	4798      	blx	r3
}
     bae:	bd70      	pop	{r4, r5, r6, pc}
     bb0:	00001be9 	.word	0x00001be9
     bb4:	42000800 	.word	0x42000800
     bb8:	000022f1 	.word	0x000022f1
     bbc:	42000c00 	.word	0x42000c00
     bc0:	42001800 	.word	0x42001800
     bc4:	42001c00 	.word	0x42001c00
     bc8:	00003ed1 	.word	0x00003ed1
     bcc:	00002955 	.word	0x00002955

00000bd0 <serial_write_start>:
    // will kill usb process which would remain running
    rtos_usb_quit();
}


bool serial_write_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     bd0:	b570      	push	{r4, r5, r6, lr}
     bd2:	000e      	movs	r6, r1
     bd4:	0013      	movs	r3, r2
    switch (port) {
     bd6:	2804      	cmp	r0, #4
     bd8:	d825      	bhi.n	c26 <serial_write_start+0x56>
     bda:	0080      	lsls	r0, r0, #2
     bdc:	4d13      	ldr	r5, [pc, #76]	; (c2c <serial_write_start+0x5c>)
     bde:	582c      	ldr	r4, [r5, r0]
     be0:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_send_buffer(buffer, count);
     be2:	0011      	movs	r1, r2
     be4:	0030      	movs	r0, r6
     be6:	4b12      	ldr	r3, [pc, #72]	; (c30 <serial_write_start+0x60>)
     be8:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     bea:	2001      	movs	r0, #1
}
     bec:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_send_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     bee:	4911      	ldr	r1, [pc, #68]	; (c34 <serial_write_start+0x64>)
     bf0:	0032      	movs	r2, r6
     bf2:	4811      	ldr	r0, [pc, #68]	; (c38 <serial_write_start+0x68>)
     bf4:	4c11      	ldr	r4, [pc, #68]	; (c3c <serial_write_start+0x6c>)
     bf6:	47a0      	blx	r4
    return true;
     bf8:	2001      	movs	r0, #1
        break;
     bfa:	e7f7      	b.n	bec <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     bfc:	4910      	ldr	r1, [pc, #64]	; (c40 <serial_write_start+0x70>)
     bfe:	0032      	movs	r2, r6
     c00:	4810      	ldr	r0, [pc, #64]	; (c44 <serial_write_start+0x74>)
     c02:	4c0e      	ldr	r4, [pc, #56]	; (c3c <serial_write_start+0x6c>)
     c04:	47a0      	blx	r4
    return true;
     c06:	2001      	movs	r0, #1
        break;
     c08:	e7f0      	b.n	bec <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     c0a:	490f      	ldr	r1, [pc, #60]	; (c48 <serial_write_start+0x78>)
     c0c:	0032      	movs	r2, r6
     c0e:	480f      	ldr	r0, [pc, #60]	; (c4c <serial_write_start+0x7c>)
     c10:	4c0a      	ldr	r4, [pc, #40]	; (c3c <serial_write_start+0x6c>)
     c12:	47a0      	blx	r4
    return true;
     c14:	2001      	movs	r0, #1
        break;
     c16:	e7e9      	b.n	bec <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     c18:	490d      	ldr	r1, [pc, #52]	; (c50 <serial_write_start+0x80>)
     c1a:	0032      	movs	r2, r6
     c1c:	480d      	ldr	r0, [pc, #52]	; (c54 <serial_write_start+0x84>)
     c1e:	4c07      	ldr	r4, [pc, #28]	; (c3c <serial_write_start+0x6c>)
     c20:	47a0      	blx	r4
    return true;
     c22:	2001      	movs	r0, #1
        break;
     c24:	e7e2      	b.n	bec <serial_write_start+0x1c>
    switch (port) {
     c26:	2000      	movs	r0, #0
     c28:	e7e0      	b.n	bec <serial_write_start+0x1c>
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	000055bc 	.word	0x000055bc
     c30:	00003f79 	.word	0x00003f79
     c34:	00005620 	.word	0x00005620
     c38:	42000800 	.word	0x42000800
     c3c:	00003d1d 	.word	0x00003d1d
     c40:	00005628 	.word	0x00005628
     c44:	42000c00 	.word	0x42000c00
     c48:	00005630 	.word	0x00005630
     c4c:	42001800 	.word	0x42001800
     c50:	00005638 	.word	0x00005638
     c54:	42001c00 	.word	0x42001c00

00000c58 <serial_write_wait_until_complete>:

bool serial_write_wait_until_complete(Serial_Port_IDs port) {
     c58:	b510      	push	{r4, lr}
    switch (port) {
     c5a:	2804      	cmp	r0, #4
     c5c:	d81b      	bhi.n	c96 <serial_write_wait_until_complete+0x3e>
     c5e:	0080      	lsls	r0, r0, #2
     c60:	4b0e      	ldr	r3, [pc, #56]	; (c9c <serial_write_wait_until_complete+0x44>)
     c62:	581b      	ldr	r3, [r3, r0]
     c64:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_send_complete();
     c66:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <serial_write_wait_until_complete+0x48>)
     c68:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     c6a:	2001      	movs	r0, #1
}
     c6c:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_send_complete(&uart1_descriptor);
     c6e:	480d      	ldr	r0, [pc, #52]	; (ca4 <serial_write_wait_until_complete+0x4c>)
     c70:	4b0d      	ldr	r3, [pc, #52]	; (ca8 <serial_write_wait_until_complete+0x50>)
     c72:	4798      	blx	r3
    return true;
     c74:	2001      	movs	r0, #1
        break;
     c76:	e7f9      	b.n	c6c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart2_descriptor);
     c78:	480c      	ldr	r0, [pc, #48]	; (cac <serial_write_wait_until_complete+0x54>)
     c7a:	4b0b      	ldr	r3, [pc, #44]	; (ca8 <serial_write_wait_until_complete+0x50>)
     c7c:	4798      	blx	r3
    return true;
     c7e:	2001      	movs	r0, #1
        break;
     c80:	e7f4      	b.n	c6c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart3_descriptor);
     c82:	480b      	ldr	r0, [pc, #44]	; (cb0 <serial_write_wait_until_complete+0x58>)
     c84:	4b08      	ldr	r3, [pc, #32]	; (ca8 <serial_write_wait_until_complete+0x50>)
     c86:	4798      	blx	r3
    return true;
     c88:	2001      	movs	r0, #1
        break;
     c8a:	e7ef      	b.n	c6c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart4_descriptor);
     c8c:	4809      	ldr	r0, [pc, #36]	; (cb4 <serial_write_wait_until_complete+0x5c>)
     c8e:	4b06      	ldr	r3, [pc, #24]	; (ca8 <serial_write_wait_until_complete+0x50>)
     c90:	4798      	blx	r3
    return true;
     c92:	2001      	movs	r0, #1
        break;
     c94:	e7ea      	b.n	c6c <serial_write_wait_until_complete+0x14>
    switch (port) {
     c96:	2000      	movs	r0, #0
     c98:	e7e8      	b.n	c6c <serial_write_wait_until_complete+0x14>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	000055d0 	.word	0x000055d0
     ca0:	00003fc5 	.word	0x00003fc5
     ca4:	00005620 	.word	0x00005620
     ca8:	00003d8d 	.word	0x00003d8d
     cac:	00005628 	.word	0x00005628
     cb0:	00005630 	.word	0x00005630
     cb4:	00005638 	.word	0x00005638

00000cb8 <serial_read_start>:


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     cb8:	b570      	push	{r4, r5, r6, lr}
     cba:	000e      	movs	r6, r1
     cbc:	0013      	movs	r3, r2
    switch (port) {
     cbe:	2804      	cmp	r0, #4
     cc0:	d825      	bhi.n	d0e <serial_read_start+0x56>
     cc2:	0080      	lsls	r0, r0, #2
     cc4:	4d13      	ldr	r5, [pc, #76]	; (d14 <serial_read_start+0x5c>)
     cc6:	582c      	ldr	r4, [r5, r0]
     cc8:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_read_buffer(buffer, count);
     cca:	0011      	movs	r1, r2
     ccc:	0030      	movs	r0, r6
     cce:	4b12      	ldr	r3, [pc, #72]	; (d18 <serial_read_start+0x60>)
     cd0:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     cd2:	2001      	movs	r0, #1
}
     cd4:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     cd6:	4911      	ldr	r1, [pc, #68]	; (d1c <serial_read_start+0x64>)
     cd8:	0032      	movs	r2, r6
     cda:	4811      	ldr	r0, [pc, #68]	; (d20 <serial_read_start+0x68>)
     cdc:	4c11      	ldr	r4, [pc, #68]	; (d24 <serial_read_start+0x6c>)
     cde:	47a0      	blx	r4
    return true;
     ce0:	2001      	movs	r0, #1
        break;
     ce2:	e7f7      	b.n	cd4 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     ce4:	4910      	ldr	r1, [pc, #64]	; (d28 <serial_read_start+0x70>)
     ce6:	0032      	movs	r2, r6
     ce8:	4810      	ldr	r0, [pc, #64]	; (d2c <serial_read_start+0x74>)
     cea:	4c0e      	ldr	r4, [pc, #56]	; (d24 <serial_read_start+0x6c>)
     cec:	47a0      	blx	r4
    return true;
     cee:	2001      	movs	r0, #1
        break;
     cf0:	e7f0      	b.n	cd4 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     cf2:	490f      	ldr	r1, [pc, #60]	; (d30 <serial_read_start+0x78>)
     cf4:	0032      	movs	r2, r6
     cf6:	480f      	ldr	r0, [pc, #60]	; (d34 <serial_read_start+0x7c>)
     cf8:	4c0a      	ldr	r4, [pc, #40]	; (d24 <serial_read_start+0x6c>)
     cfa:	47a0      	blx	r4
    return true;
     cfc:	2001      	movs	r0, #1
        break;
     cfe:	e7e9      	b.n	cd4 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     d00:	490d      	ldr	r1, [pc, #52]	; (d38 <serial_read_start+0x80>)
     d02:	0032      	movs	r2, r6
     d04:	480d      	ldr	r0, [pc, #52]	; (d3c <serial_read_start+0x84>)
     d06:	4c07      	ldr	r4, [pc, #28]	; (d24 <serial_read_start+0x6c>)
     d08:	47a0      	blx	r4
    return true;
     d0a:	2001      	movs	r0, #1
        break;
     d0c:	e7e2      	b.n	cd4 <serial_read_start+0x1c>
    switch (port) {
     d0e:	2000      	movs	r0, #0
     d10:	e7e0      	b.n	cd4 <serial_read_start+0x1c>
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	000055e4 	.word	0x000055e4
     d18:	00003fe1 	.word	0x00003fe1
     d1c:	00005620 	.word	0x00005620
     d20:	42000800 	.word	0x42000800
     d24:	00003d9d 	.word	0x00003d9d
     d28:	00005628 	.word	0x00005628
     d2c:	42000c00 	.word	0x42000c00
     d30:	00005630 	.word	0x00005630
     d34:	42001800 	.word	0x42001800
     d38:	00005638 	.word	0x00005638
     d3c:	42001c00 	.word	0x42001c00

00000d40 <serial_read_wait_until_complete>:

bool serial_read_wait_until_complete(Serial_Port_IDs port) {
     d40:	b510      	push	{r4, lr}
    switch (port) {
     d42:	2804      	cmp	r0, #4
     d44:	d81b      	bhi.n	d7e <serial_read_wait_until_complete+0x3e>
     d46:	0080      	lsls	r0, r0, #2
     d48:	4b0e      	ldr	r3, [pc, #56]	; (d84 <serial_read_wait_until_complete+0x44>)
     d4a:	581b      	ldr	r3, [r3, r0]
     d4c:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete();
     d4e:	4b0e      	ldr	r3, [pc, #56]	; (d88 <serial_read_wait_until_complete+0x48>)
     d50:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     d52:	2001      	movs	r0, #1
}
     d54:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete(&uart1_descriptor);
     d56:	480d      	ldr	r0, [pc, #52]	; (d8c <serial_read_wait_until_complete+0x4c>)
     d58:	4b0d      	ldr	r3, [pc, #52]	; (d90 <serial_read_wait_until_complete+0x50>)
     d5a:	4798      	blx	r3
    return true;
     d5c:	2001      	movs	r0, #1
        break;
     d5e:	e7f9      	b.n	d54 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart2_descriptor);
     d60:	480c      	ldr	r0, [pc, #48]	; (d94 <serial_read_wait_until_complete+0x54>)
     d62:	4b0b      	ldr	r3, [pc, #44]	; (d90 <serial_read_wait_until_complete+0x50>)
     d64:	4798      	blx	r3
    return true;
     d66:	2001      	movs	r0, #1
        break;
     d68:	e7f4      	b.n	d54 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart3_descriptor);
     d6a:	480b      	ldr	r0, [pc, #44]	; (d98 <serial_read_wait_until_complete+0x58>)
     d6c:	4b08      	ldr	r3, [pc, #32]	; (d90 <serial_read_wait_until_complete+0x50>)
     d6e:	4798      	blx	r3
    return true;
     d70:	2001      	movs	r0, #1
        break;
     d72:	e7ef      	b.n	d54 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart4_descriptor);
     d74:	4809      	ldr	r0, [pc, #36]	; (d9c <serial_read_wait_until_complete+0x5c>)
     d76:	4b06      	ldr	r3, [pc, #24]	; (d90 <serial_read_wait_until_complete+0x50>)
     d78:	4798      	blx	r3
    return true;
     d7a:	2001      	movs	r0, #1
        break;
     d7c:	e7ea      	b.n	d54 <serial_read_wait_until_complete+0x14>
    switch (port) {
     d7e:	2000      	movs	r0, #0
     d80:	e7e8      	b.n	d54 <serial_read_wait_until_complete+0x14>
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	000055f8 	.word	0x000055f8
     d88:	00004019 	.word	0x00004019
     d8c:	00005620 	.word	0x00005620
     d90:	00003e0d 	.word	0x00003e0d
     d94:	00005628 	.word	0x00005628
     d98:	00005630 	.word	0x00005630
     d9c:	00005638 	.word	0x00005638

00000da0 <serial_flush>:

bool serial_flush(Serial_Port_IDs port) {
     da0:	b510      	push	{r4, lr}
    switch (port) {
     da2:	2804      	cmp	r0, #4
     da4:	d803      	bhi.n	dae <serial_flush+0xe>
     da6:	0080      	lsls	r0, r0, #2
     da8:	4b0d      	ldr	r3, [pc, #52]	; (de0 <serial_flush+0x40>)
     daa:	581b      	ldr	r3, [r3, r0]
     dac:	469f      	mov	pc, r3
     dae:	2000      	movs	r0, #0
     db0:	e014      	b.n	ddc <serial_flush+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_flush(UART1_SERCOM);
     db2:	480c      	ldr	r0, [pc, #48]	; (de4 <serial_flush+0x44>)
     db4:	4b0c      	ldr	r3, [pc, #48]	; (de8 <serial_flush+0x48>)
     db6:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     db8:	2001      	movs	r0, #1
        break;
     dba:	e00f      	b.n	ddc <serial_flush+0x3c>
        uart_flush(UART2_SERCOM);
     dbc:	480b      	ldr	r0, [pc, #44]	; (dec <serial_flush+0x4c>)
     dbe:	4b0a      	ldr	r3, [pc, #40]	; (de8 <serial_flush+0x48>)
     dc0:	4798      	blx	r3
    return true;
     dc2:	2001      	movs	r0, #1
        break;
     dc4:	e00a      	b.n	ddc <serial_flush+0x3c>
        uart_flush(UART3_SERCOM);
     dc6:	480a      	ldr	r0, [pc, #40]	; (df0 <serial_flush+0x50>)
     dc8:	4b07      	ldr	r3, [pc, #28]	; (de8 <serial_flush+0x48>)
     dca:	4798      	blx	r3
    return true;
     dcc:	2001      	movs	r0, #1
        break;
     dce:	e005      	b.n	ddc <serial_flush+0x3c>
        uart_flush(UART4_SERCOM);
     dd0:	4808      	ldr	r0, [pc, #32]	; (df4 <serial_flush+0x54>)
     dd2:	4b05      	ldr	r3, [pc, #20]	; (de8 <serial_flush+0x48>)
     dd4:	4798      	blx	r3
    return true;
     dd6:	2001      	movs	r0, #1
        break;
     dd8:	e000      	b.n	ddc <serial_flush+0x3c>
    return true;
     dda:	2001      	movs	r0, #1
     ddc:	bd10      	pop	{r4, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	0000560c 	.word	0x0000560c
     de4:	42000800 	.word	0x42000800
     de8:	0000234d 	.word	0x0000234d
     dec:	42000c00 	.word	0x42000c00
     df0:	42001800 	.word	0x42001800
     df4:	42001c00 	.word	0x42001c00

00000df8 <buzzer>:

void shutdown() {
	serial_quit();
}

void buzzer() {
     df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dfa:	46ce      	mov	lr, r9
     dfc:	4647      	mov	r7, r8
     dfe:	b580      	push	{r7, lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     e00:	2106      	movs	r1, #6
     e02:	482a      	ldr	r0, [pc, #168]	; (eac <buzzer+0xb4>)
     e04:	4b2a      	ldr	r3, [pc, #168]	; (eb0 <buzzer+0xb8>)
     e06:	4798      	blx	r3
     e08:	2800      	cmp	r0, #0
     e0a:	d019      	beq.n	e40 <buzzer+0x48>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     e0c:	4929      	ldr	r1, [pc, #164]	; (eb4 <buzzer+0xbc>)
     e0e:	4827      	ldr	r0, [pc, #156]	; (eac <buzzer+0xb4>)
     e10:	4b29      	ldr	r3, [pc, #164]	; (eb8 <buzzer+0xc0>)
     e12:	4798      	blx	r3
     e14:	2800      	cmp	r0, #0
     e16:	d016      	beq.n	e46 <buzzer+0x4e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     e18:	2200      	movs	r2, #0
     e1a:	2101      	movs	r1, #1
     e1c:	4823      	ldr	r0, [pc, #140]	; (eac <buzzer+0xb4>)
     e1e:	4b27      	ldr	r3, [pc, #156]	; (ebc <buzzer+0xc4>)
     e20:	4798      	blx	r3
     e22:	2800      	cmp	r0, #0
     e24:	d012      	beq.n	e4c <buzzer+0x54>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     e26:	4821      	ldr	r0, [pc, #132]	; (eac <buzzer+0xb4>)
     e28:	4b25      	ldr	r3, [pc, #148]	; (ec0 <buzzer+0xc8>)
     e2a:	4798      	blx	r3
     e2c:	2800      	cmp	r0, #0
     e2e:	d010      	beq.n	e52 <buzzer+0x5a>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
     e30:	2280      	movs	r2, #128	; 0x80
     e32:	0412      	lsls	r2, r2, #16
     e34:	2104      	movs	r1, #4
     e36:	2001      	movs	r0, #1
     e38:	4b22      	ldr	r3, [pc, #136]	; (ec4 <buzzer+0xcc>)
     e3a:	4798      	blx	r3
	
	for (int i = 0; i < 2; ++i) {
     e3c:	2500      	movs	r5, #0
     e3e:	e02e      	b.n	e9e <buzzer+0xa6>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     e40:	4b21      	ldr	r3, [pc, #132]	; (ec8 <buzzer+0xd0>)
     e42:	4798      	blx	r3
     e44:	e7e2      	b.n	e0c <buzzer+0x14>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     e46:	4b20      	ldr	r3, [pc, #128]	; (ec8 <buzzer+0xd0>)
     e48:	4798      	blx	r3
     e4a:	e7e5      	b.n	e18 <buzzer+0x20>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     e4c:	4b1e      	ldr	r3, [pc, #120]	; (ec8 <buzzer+0xd0>)
     e4e:	4798      	blx	r3
     e50:	e7e9      	b.n	e26 <buzzer+0x2e>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     e52:	4b1d      	ldr	r3, [pc, #116]	; (ec8 <buzzer+0xd0>)
     e54:	4798      	blx	r3
     e56:	e7eb      	b.n	e30 <buzzer+0x38>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
     e58:	4b14      	ldr	r3, [pc, #80]	; (eac <buzzer+0xb4>)
     e5a:	4698      	mov	r8, r3
     e5c:	22fc      	movs	r2, #252	; 0xfc
     e5e:	0592      	lsls	r2, r2, #22
     e60:	2101      	movs	r1, #1
     e62:	0018      	movs	r0, r3
     e64:	4f15      	ldr	r7, [pc, #84]	; (ebc <buzzer+0xc4>)
     e66:	47b8      	blx	r7
		led_on();
     e68:	2680      	movs	r6, #128	; 0x80
     e6a:	03f6      	lsls	r6, r6, #15
     e6c:	0031      	movs	r1, r6
     e6e:	2001      	movs	r0, #1
     e70:	4b16      	ldr	r3, [pc, #88]	; (ecc <buzzer+0xd4>)
     e72:	4798      	blx	r3
		rtos_delay_ms(75);
     e74:	4b16      	ldr	r3, [pc, #88]	; (ed0 <buzzer+0xd8>)
     e76:	681a      	ldr	r2, [r3, #0]
     e78:	0093      	lsls	r3, r2, #2
     e7a:	189b      	adds	r3, r3, r2
     e7c:	011c      	lsls	r4, r3, #4
     e7e:	1ae4      	subs	r4, r4, r3
     e80:	0020      	movs	r0, r4
     e82:	4b14      	ldr	r3, [pc, #80]	; (ed4 <buzzer+0xdc>)
     e84:	4699      	mov	r9, r3
     e86:	4798      	blx	r3
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
     e88:	2200      	movs	r2, #0
     e8a:	2101      	movs	r1, #1
     e8c:	4640      	mov	r0, r8
     e8e:	47b8      	blx	r7
		led_off();
     e90:	0031      	movs	r1, r6
     e92:	2001      	movs	r0, #1
     e94:	4b10      	ldr	r3, [pc, #64]	; (ed8 <buzzer+0xe0>)
     e96:	4798      	blx	r3
		rtos_delay_ms(75);
     e98:	0020      	movs	r0, r4
     e9a:	47c8      	blx	r9
	for (int i = 0; i < 2; ++i) {
     e9c:	3501      	adds	r5, #1
     e9e:	2d01      	cmp	r5, #1
     ea0:	ddda      	ble.n	e58 <buzzer+0x60>
	// 	led_on();
	// 	rtos_delay_ms(200);
	// 	led_off();
	// 	rtos_delay_ms(200);
	// }
     ea2:	bcc0      	pop	{r6, r7}
     ea4:	46b9      	mov	r9, r7
     ea6:	46b0      	mov	r8, r6
     ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	42003c00 	.word	0x42003c00
     eb0:	00001c35 	.word	0x00001c35
     eb4:	45309000 	.word	0x45309000
     eb8:	00001d99 	.word	0x00001d99
     ebc:	00001e25 	.word	0x00001e25
     ec0:	00001d09 	.word	0x00001d09
     ec4:	00001be9 	.word	0x00001be9
     ec8:	00002e11 	.word	0x00002e11
     ecc:	00001bc9 	.word	0x00001bc9
     ed0:	00005734 	.word	0x00005734
     ed4:	00003339 	.word	0x00003339
     ed8:	00001bd9 	.word	0x00001bd9

00000edc <selftest>:
bool selftest() {
     edc:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
     ede:	4b0a      	ldr	r3, [pc, #40]	; (f08 <selftest+0x2c>)
     ee0:	4798      	blx	r3
     ee2:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
     ee4:	4809      	ldr	r0, [pc, #36]	; (f0c <selftest+0x30>)
     ee6:	4b0a      	ldr	r3, [pc, #40]	; (f10 <selftest+0x34>)
     ee8:	4798      	blx	r3
     eea:	1e05      	subs	r5, r0, #0
     eec:	d000      	beq.n	ef0 <selftest+0x14>
     eee:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
     ef0:	4b08      	ldr	r3, [pc, #32]	; (f14 <selftest+0x38>)
     ef2:	4798      	blx	r3
     ef4:	1e04      	subs	r4, r0, #0
     ef6:	d000      	beq.n	efa <selftest+0x1e>
     ef8:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
     efa:	4807      	ldr	r0, [pc, #28]	; (f18 <selftest+0x3c>)
     efc:	4b07      	ldr	r3, [pc, #28]	; (f1c <selftest+0x40>)
     efe:	4798      	blx	r3
     f00:	2800      	cmp	r0, #0
     f02:	d000      	beq.n	f06 <selftest+0x2a>
     f04:	0020      	movs	r0, r4
}
     f06:	bd70      	pop	{r4, r5, r6, pc}
     f08:	00000861 	.word	0x00000861
     f0c:	20000310 	.word	0x20000310
     f10:	00001245 	.word	0x00001245
     f14:	00000771 	.word	0x00000771
     f18:	2000032c 	.word	0x2000032c
     f1c:	000016d9 	.word	0x000016d9

00000f20 <init>:
bool init() {
     f20:	b570      	push	{r4, r5, r6, lr}
     f22:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
     f24:	22c0      	movs	r2, #192	; 0xc0
     f26:	0412      	lsls	r2, r2, #16
     f28:	2102      	movs	r1, #2
     f2a:	2000      	movs	r0, #0
     f2c:	4c35      	ldr	r4, [pc, #212]	; (1004 <init+0xe4>)
     f2e:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
     f30:	2280      	movs	r2, #128	; 0x80
     f32:	0352      	lsls	r2, r2, #13
     f34:	2103      	movs	r1, #3
     f36:	2000      	movs	r0, #0
     f38:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
     f3a:	2480      	movs	r4, #128	; 0x80
     f3c:	0564      	lsls	r4, r4, #21
     f3e:	0021      	movs	r1, r4
     f40:	2000      	movs	r0, #0
     f42:	4e31      	ldr	r6, [pc, #196]	; (1008 <init+0xe8>)
     f44:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
     f46:	2580      	movs	r5, #128	; 0x80
     f48:	062d      	lsls	r5, r5, #24
     f4a:	0029      	movs	r1, r5
     f4c:	2001      	movs	r0, #1
     f4e:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
     f50:	0021      	movs	r1, r4
     f52:	2000      	movs	r0, #0
     f54:	4c2d      	ldr	r4, [pc, #180]	; (100c <init+0xec>)
     f56:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
     f58:	0029      	movs	r1, r5
     f5a:	2001      	movs	r0, #1
     f5c:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     f5e:	4b2c      	ldr	r3, [pc, #176]	; (1010 <init+0xf0>)
     f60:	9301      	str	r3, [sp, #4]
     f62:	2300      	movs	r3, #0
     f64:	9300      	str	r3, [sp, #0]
     f66:	3302      	adds	r3, #2
     f68:	2200      	movs	r2, #0
     f6a:	2100      	movs	r1, #0
     f6c:	4829      	ldr	r0, [pc, #164]	; (1014 <init+0xf4>)
     f6e:	4c2a      	ldr	r4, [pc, #168]	; (1018 <init+0xf8>)
     f70:	47a0      	blx	r4
     f72:	2800      	cmp	r0, #0
     f74:	d039      	beq.n	fea <init+0xca>
	dma_init();
     f76:	4b29      	ldr	r3, [pc, #164]	; (101c <init+0xfc>)
     f78:	4798      	blx	r3
	if (!serial_init()) SOS();
     f7a:	4b29      	ldr	r3, [pc, #164]	; (1020 <init+0x100>)
     f7c:	4798      	blx	r3
     f7e:	2800      	cmp	r0, #0
     f80:	d036      	beq.n	ff0 <init+0xd0>
	if (!imu_init()) SOS();
     f82:	4b28      	ldr	r3, [pc, #160]	; (1024 <init+0x104>)
     f84:	4798      	blx	r3
     f86:	2800      	cmp	r0, #0
     f88:	d035      	beq.n	ff6 <init+0xd6>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
     f8a:	ab02      	add	r3, sp, #8
     f8c:	2280      	movs	r2, #128	; 0x80
     f8e:	0552      	lsls	r2, r2, #21
     f90:	9202      	str	r2, [sp, #8]
     f92:	2100      	movs	r1, #0
     f94:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
     f96:	4824      	ldr	r0, [pc, #144]	; (1028 <init+0x108>)
     f98:	9b03      	ldr	r3, [sp, #12]
     f9a:	491e      	ldr	r1, [pc, #120]	; (1014 <init+0xf4>)
     f9c:	4c23      	ldr	r4, [pc, #140]	; (102c <init+0x10c>)
     f9e:	47a0      	blx	r4
     fa0:	2800      	cmp	r0, #0
     fa2:	d02b      	beq.n	ffc <init+0xdc>
	init_eeprom();
     fa4:	4b22      	ldr	r3, [pc, #136]	; (1030 <init+0x110>)
     fa6:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
     fa8:	ab02      	add	r3, sp, #8
     faa:	4c22      	ldr	r4, [pc, #136]	; (1034 <init+0x114>)
     fac:	6822      	ldr	r2, [r4, #0]
     fae:	9202      	str	r2, [sp, #8]
     fb0:	7921      	ldrb	r1, [r4, #4]
     fb2:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
     fb4:	4d17      	ldr	r5, [pc, #92]	; (1014 <init+0xf4>)
     fb6:	4820      	ldr	r0, [pc, #128]	; (1038 <init+0x118>)
     fb8:	2107      	movs	r1, #7
     fba:	9101      	str	r1, [sp, #4]
     fbc:	2180      	movs	r1, #128	; 0x80
     fbe:	03c9      	lsls	r1, r1, #15
     fc0:	9100      	str	r1, [sp, #0]
     fc2:	9b03      	ldr	r3, [sp, #12]
     fc4:	0029      	movs	r1, r5
     fc6:	4e1d      	ldr	r6, [pc, #116]	; (103c <init+0x11c>)
     fc8:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
     fca:	2280      	movs	r2, #128	; 0x80
     fcc:	2190      	movs	r1, #144	; 0x90
     fce:	481c      	ldr	r0, [pc, #112]	; (1040 <init+0x120>)
     fd0:	3408      	adds	r4, #8
     fd2:	9400      	str	r4, [sp, #0]
     fd4:	002b      	movs	r3, r5
     fd6:	0092      	lsls	r2, r2, #2
     fd8:	0109      	lsls	r1, r1, #4
     fda:	4c1a      	ldr	r4, [pc, #104]	; (1044 <init+0x124>)
     fdc:	47a0      	blx	r4
	init_globals();
     fde:	4b1a      	ldr	r3, [pc, #104]	; (1048 <init+0x128>)
     fe0:	4798      	blx	r3
	return selftest();
     fe2:	4b1a      	ldr	r3, [pc, #104]	; (104c <init+0x12c>)
     fe4:	4798      	blx	r3
}
     fe6:	b004      	add	sp, #16
     fe8:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     fea:	4b19      	ldr	r3, [pc, #100]	; (1050 <init+0x130>)
     fec:	4798      	blx	r3
     fee:	e7c2      	b.n	f76 <init+0x56>
	if (!serial_init()) SOS();
     ff0:	4b17      	ldr	r3, [pc, #92]	; (1050 <init+0x130>)
     ff2:	4798      	blx	r3
     ff4:	e7c5      	b.n	f82 <init+0x62>
	if (!imu_init()) SOS();
     ff6:	4b16      	ldr	r3, [pc, #88]	; (1050 <init+0x130>)
     ff8:	4798      	blx	r3
     ffa:	e7c6      	b.n	f8a <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
     ffc:	4b14      	ldr	r3, [pc, #80]	; (1050 <init+0x130>)
     ffe:	4798      	blx	r3
    1000:	e7d0      	b.n	fa4 <init+0x84>
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	00001be9 	.word	0x00001be9
    1008:	00001bc9 	.word	0x00001bc9
    100c:	00001bb9 	.word	0x00001bb9
    1010:	005b8d80 	.word	0x005b8d80
    1014:	42001400 	.word	0x42001400
    1018:	0000204d 	.word	0x0000204d
    101c:	00001335 	.word	0x00001335
    1020:	00000b45 	.word	0x00000b45
    1024:	000007e1 	.word	0x000007e1
    1028:	20000310 	.word	0x20000310
    102c:	000012c1 	.word	0x000012c1
    1030:	0000071d 	.word	0x0000071d
    1034:	00005640 	.word	0x00005640
    1038:	2000032c 	.word	0x2000032c
    103c:	00001651 	.word	0x00001651
    1040:	200002b4 	.word	0x200002b4
    1044:	000035dd 	.word	0x000035dd
    1048:	00000695 	.word	0x00000695
    104c:	00000edd 	.word	0x00000edd
    1050:	00002e11 	.word	0x00002e11

00001054 <main>:
int main(void) {
    1054:	b530      	push	{r4, r5, lr}
    1056:	b083      	sub	sp, #12
	if (!init()) SOS();
    1058:	4b12      	ldr	r3, [pc, #72]	; (10a4 <main+0x50>)
    105a:	4798      	blx	r3
    105c:	2800      	cmp	r0, #0
    105e:	d01e      	beq.n	109e <main+0x4a>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
    1060:	2380      	movs	r3, #128	; 0x80
    1062:	2280      	movs	r2, #128	; 0x80
    1064:	4910      	ldr	r1, [pc, #64]	; (10a8 <main+0x54>)
    1066:	4c11      	ldr	r4, [pc, #68]	; (10ac <main+0x58>)
    1068:	005b      	lsls	r3, r3, #1
    106a:	0112      	lsls	r2, r2, #4
    106c:	0020      	movs	r0, r4
    106e:	4d10      	ldr	r5, [pc, #64]	; (10b0 <main+0x5c>)
    1070:	47a8      	blx	r5
	dispatch_process(&bz);
    1072:	0020      	movs	r0, r4
    1074:	4b0f      	ldr	r3, [pc, #60]	; (10b4 <main+0x60>)
    1076:	4798      	blx	r3
	start_navigation();
    1078:	4b0f      	ldr	r3, [pc, #60]	; (10b8 <main+0x64>)
    107a:	4798      	blx	r3
	volatile fp32_t testvalue1 = FP32_FROM_MILLI(10);
    107c:	4b0f      	ldr	r3, [pc, #60]	; (10bc <main+0x68>)
    107e:	9301      	str	r3, [sp, #4]
	volatile fp32_t testvalue2 = FP32_FROM_INT(14);
    1080:	23e0      	movs	r3, #224	; 0xe0
    1082:	031b      	lsls	r3, r3, #12
    1084:	9300      	str	r3, [sp, #0]
	testvalue1 = fp_multiply(testvalue1, testvalue2);
    1086:	9801      	ldr	r0, [sp, #4]
    1088:	9900      	ldr	r1, [sp, #0]
    108a:	4b0d      	ldr	r3, [pc, #52]	; (10c0 <main+0x6c>)
    108c:	4798      	blx	r3
    108e:	9001      	str	r0, [sp, #4]
	comms_loop();
    1090:	4b0c      	ldr	r3, [pc, #48]	; (10c4 <main+0x70>)
    1092:	4798      	blx	r3
		rtos_delay_ms(1);
    1094:	4b0c      	ldr	r3, [pc, #48]	; (10c8 <main+0x74>)
    1096:	6818      	ldr	r0, [r3, #0]
    1098:	4b0c      	ldr	r3, [pc, #48]	; (10cc <main+0x78>)
    109a:	4798      	blx	r3
	while (1) {
    109c:	e7fa      	b.n	1094 <main+0x40>
	if (!init()) SOS();
    109e:	4b0c      	ldr	r3, [pc, #48]	; (10d0 <main+0x7c>)
    10a0:	4798      	blx	r3
    10a2:	e7dd      	b.n	1060 <main+0xc>
    10a4:	00000f21 	.word	0x00000f21
    10a8:	00000df9 	.word	0x00000df9
    10ac:	20000260 	.word	0x20000260
    10b0:	00002ed1 	.word	0x00002ed1
    10b4:	00002fb9 	.word	0x00002fb9
    10b8:	000010f9 	.word	0x000010f9
    10bc:	0000028f 	.word	0x0000028f
    10c0:	000041dd 	.word	0x000041dd
    10c4:	00000535 	.word	0x00000535
    10c8:	00005734 	.word	0x00005734
    10cc:	00003339 	.word	0x00003339
    10d0:	00002e11 	.word	0x00002e11

000010d4 <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
    10d4:	b510      	push	{r4, lr}
	while (1) {
        // led_on();
		request_imu_data();
    10d6:	4b04      	ldr	r3, [pc, #16]	; (10e8 <navigation+0x14>)
    10d8:	4798      	blx	r3
		wait_for_imu_data();
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <navigation+0x18>)
    10dc:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(1);
    10de:	4b04      	ldr	r3, [pc, #16]	; (10f0 <navigation+0x1c>)
    10e0:	6818      	ldr	r0, [r3, #0]
    10e2:	4b04      	ldr	r3, [pc, #16]	; (10f4 <navigation+0x20>)
    10e4:	4798      	blx	r3
	while (1) {
    10e6:	e7f6      	b.n	10d6 <navigation+0x2>
    10e8:	000008a5 	.word	0x000008a5
    10ec:	000008dd 	.word	0x000008dd
    10f0:	00005734 	.word	0x00005734
    10f4:	00003339 	.word	0x00003339

000010f8 <start_navigation>:
	}
}

void start_navigation() {
    10f8:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
    10fa:	23c0      	movs	r3, #192	; 0xc0
    10fc:	22b0      	movs	r2, #176	; 0xb0
    10fe:	4905      	ldr	r1, [pc, #20]	; (1114 <start_navigation+0x1c>)
    1100:	4c05      	ldr	r4, [pc, #20]	; (1118 <start_navigation+0x20>)
    1102:	009b      	lsls	r3, r3, #2
    1104:	0112      	lsls	r2, r2, #4
    1106:	0020      	movs	r0, r4
    1108:	4d04      	ldr	r5, [pc, #16]	; (111c <start_navigation+0x24>)
    110a:	47a8      	blx	r5
    dispatch_process(&navigation_process);
    110c:	0020      	movs	r0, r4
    110e:	4b04      	ldr	r3, [pc, #16]	; (1120 <start_navigation+0x28>)
    1110:	4798      	blx	r3
    1112:	bd70      	pop	{r4, r5, r6, pc}
    1114:	000010d5 	.word	0x000010d5
    1118:	20000288 	.word	0x20000288
    111c:	00002ed1 	.word	0x00002ed1
    1120:	00002fb9 	.word	0x00002fb9

00001124 <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
    1124:	b570      	push	{r4, r5, r6, lr}
    1126:	0004      	movs	r4, r0
    1128:	000e      	movs	r6, r1
    112a:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
    112c:	7d03      	ldrb	r3, [r0, #20]
    112e:	7d42      	ldrb	r2, [r0, #21]
    1130:	0212      	lsls	r2, r2, #8
    1132:	431a      	orrs	r2, r3
    1134:	7d83      	ldrb	r3, [r0, #22]
    1136:	041b      	lsls	r3, r3, #16
    1138:	4313      	orrs	r3, r2
    113a:	7dc1      	ldrb	r1, [r0, #23]
    113c:	0609      	lsls	r1, r1, #24
    113e:	4319      	orrs	r1, r3
    1140:	7e00      	ldrb	r0, [r0, #24]
    1142:	4b11      	ldr	r3, [pc, #68]	; (1188 <baro_send_command+0x64>)
    1144:	4798      	blx	r3
	spi_command(desc->sercom, command);
    1146:	7c23      	ldrb	r3, [r4, #16]
    1148:	7c62      	ldrb	r2, [r4, #17]
    114a:	0212      	lsls	r2, r2, #8
    114c:	431a      	orrs	r2, r3
    114e:	7ca3      	ldrb	r3, [r4, #18]
    1150:	041b      	lsls	r3, r3, #16
    1152:	4313      	orrs	r3, r2
    1154:	7ce0      	ldrb	r0, [r4, #19]
    1156:	0600      	lsls	r0, r0, #24
    1158:	4318      	orrs	r0, r3
    115a:	0031      	movs	r1, r6
    115c:	4b0b      	ldr	r3, [pc, #44]	; (118c <baro_send_command+0x68>)
    115e:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1160:	7d23      	ldrb	r3, [r4, #20]
    1162:	7d62      	ldrb	r2, [r4, #21]
    1164:	0212      	lsls	r2, r2, #8
    1166:	431a      	orrs	r2, r3
    1168:	7da3      	ldrb	r3, [r4, #22]
    116a:	041b      	lsls	r3, r3, #16
    116c:	4313      	orrs	r3, r2
    116e:	7de1      	ldrb	r1, [r4, #23]
    1170:	0609      	lsls	r1, r1, #24
    1172:	4319      	orrs	r1, r3
    1174:	7e20      	ldrb	r0, [r4, #24]
    1176:	4b06      	ldr	r3, [pc, #24]	; (1190 <baro_send_command+0x6c>)
    1178:	4798      	blx	r3
	delay_us(delay);
    117a:	0068      	lsls	r0, r5, #1
    117c:	1940      	adds	r0, r0, r5
    117e:	0040      	lsls	r0, r0, #1
    1180:	4b04      	ldr	r3, [pc, #16]	; (1194 <baro_send_command+0x70>)
    1182:	4798      	blx	r3
}
    1184:	bd70      	pop	{r4, r5, r6, pc}
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	00001bd9 	.word	0x00001bd9
    118c:	000020b5 	.word	0x000020b5
    1190:	00001bc9 	.word	0x00001bc9
    1194:	00002199 	.word	0x00002199

00001198 <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
    1198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    119a:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    119c:	26a0      	movs	r6, #160	; 0xa0
    119e:	e047      	b.n	1230 <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
    11a0:	7d23      	ldrb	r3, [r4, #20]
    11a2:	7d62      	ldrb	r2, [r4, #21]
    11a4:	0212      	lsls	r2, r2, #8
    11a6:	431a      	orrs	r2, r3
    11a8:	7da3      	ldrb	r3, [r4, #22]
    11aa:	041b      	lsls	r3, r3, #16
    11ac:	4313      	orrs	r3, r2
    11ae:	7de1      	ldrb	r1, [r4, #23]
    11b0:	0609      	lsls	r1, r1, #24
    11b2:	4319      	orrs	r1, r3
    11b4:	7e20      	ldrb	r0, [r4, #24]
    11b6:	4b20      	ldr	r3, [pc, #128]	; (1238 <baro_read_prom+0xa0>)
    11b8:	4798      	blx	r3
		spi_command(desc->sercom, addr);
    11ba:	7c23      	ldrb	r3, [r4, #16]
    11bc:	7c62      	ldrb	r2, [r4, #17]
    11be:	0212      	lsls	r2, r2, #8
    11c0:	431a      	orrs	r2, r3
    11c2:	7ca3      	ldrb	r3, [r4, #18]
    11c4:	041b      	lsls	r3, r3, #16
    11c6:	4313      	orrs	r3, r2
    11c8:	7ce0      	ldrb	r0, [r4, #19]
    11ca:	0600      	lsls	r0, r0, #24
    11cc:	4318      	orrs	r0, r3
    11ce:	0031      	movs	r1, r6
    11d0:	4f1a      	ldr	r7, [pc, #104]	; (123c <baro_read_prom+0xa4>)
    11d2:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
    11d4:	7c23      	ldrb	r3, [r4, #16]
    11d6:	7c62      	ldrb	r2, [r4, #17]
    11d8:	0212      	lsls	r2, r2, #8
    11da:	431a      	orrs	r2, r3
    11dc:	7ca3      	ldrb	r3, [r4, #18]
    11de:	041b      	lsls	r3, r3, #16
    11e0:	4313      	orrs	r3, r2
    11e2:	7ce0      	ldrb	r0, [r4, #19]
    11e4:	0600      	lsls	r0, r0, #24
    11e6:	4318      	orrs	r0, r3
    11e8:	2100      	movs	r1, #0
    11ea:	47b8      	blx	r7
    11ec:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
    11ee:	7c23      	ldrb	r3, [r4, #16]
    11f0:	7c62      	ldrb	r2, [r4, #17]
    11f2:	0212      	lsls	r2, r2, #8
    11f4:	431a      	orrs	r2, r3
    11f6:	7ca3      	ldrb	r3, [r4, #18]
    11f8:	041b      	lsls	r3, r3, #16
    11fa:	4313      	orrs	r3, r2
    11fc:	7ce0      	ldrb	r0, [r4, #19]
    11fe:	0600      	lsls	r0, r0, #24
    1200:	4318      	orrs	r0, r3
    1202:	2100      	movs	r1, #0
    1204:	47b8      	blx	r7
    1206:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
    1208:	7d23      	ldrb	r3, [r4, #20]
    120a:	7d62      	ldrb	r2, [r4, #21]
    120c:	0212      	lsls	r2, r2, #8
    120e:	431a      	orrs	r2, r3
    1210:	7da3      	ldrb	r3, [r4, #22]
    1212:	041b      	lsls	r3, r3, #16
    1214:	4313      	orrs	r3, r2
    1216:	7de1      	ldrb	r1, [r4, #23]
    1218:	0609      	lsls	r1, r1, #24
    121a:	4319      	orrs	r1, r3
    121c:	7e20      	ldrb	r0, [r4, #24]
    121e:	4b08      	ldr	r3, [pc, #32]	; (1240 <baro_read_prom+0xa8>)
    1220:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
    1222:	0033      	movs	r3, r6
    1224:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
    1226:	022d      	lsls	r5, r5, #8
    1228:	433d      	orrs	r5, r7
    122a:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    122c:	3602      	adds	r6, #2
    122e:	b2f6      	uxtb	r6, r6
    1230:	2eae      	cmp	r6, #174	; 0xae
    1232:	d9b5      	bls.n	11a0 <baro_read_prom+0x8>
}
    1234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	00001bd9 	.word	0x00001bd9
    123c:	000020b5 	.word	0x000020b5
    1240:	00001bc9 	.word	0x00001bc9

00001244 <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
    1244:	b530      	push	{r4, r5, lr}
    1246:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
    1248:	7b83      	ldrb	r3, [r0, #14]
    124a:	7bc5      	ldrb	r5, [r0, #15]
    124c:	022d      	lsls	r5, r5, #8
    124e:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
    1250:	23ff      	movs	r3, #255	; 0xff
    1252:	002a      	movs	r2, r5
    1254:	439a      	bics	r2, r3
    1256:	0013      	movs	r3, r2
    1258:	2200      	movs	r2, #0
    125a:	7382      	strb	r2, [r0, #14]
    125c:	0a1b      	lsrs	r3, r3, #8
    125e:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
    1260:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
    1262:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
    1264:	e014      	b.n	1290 <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1266:	1042      	asrs	r2, r0, #1
    1268:	0052      	lsls	r2, r2, #1
    126a:	5aa2      	ldrh	r2, [r4, r2]
    126c:	0a12      	lsrs	r2, r2, #8
    126e:	e018      	b.n	12a2 <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1270:	005b      	lsls	r3, r3, #1
    1272:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
    1274:	3201      	adds	r2, #1
    1276:	2a07      	cmp	r2, #7
    1278:	dc09      	bgt.n	128e <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    127a:	b219      	sxth	r1, r3
    127c:	2900      	cmp	r1, #0
    127e:	daf7      	bge.n	1270 <baro_check+0x2c>
    1280:	0059      	lsls	r1, r3, #1
    1282:	23c0      	movs	r3, #192	; 0xc0
    1284:	019b      	lsls	r3, r3, #6
    1286:	404b      	eors	r3, r1
    1288:	b21b      	sxth	r3, r3
    128a:	b29b      	uxth	r3, r3
    128c:	e7f2      	b.n	1274 <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
    128e:	3001      	adds	r0, #1
    1290:	280f      	cmp	r0, #15
    1292:	dc09      	bgt.n	12a8 <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1294:	07c2      	lsls	r2, r0, #31
    1296:	d5e6      	bpl.n	1266 <baro_check+0x22>
    1298:	1042      	asrs	r2, r0, #1
    129a:	0052      	lsls	r2, r2, #1
    129c:	5aa1      	ldrh	r1, [r4, r2]
    129e:	22ff      	movs	r2, #255	; 0xff
    12a0:	400a      	ands	r2, r1
		n_rem ^= byte;
    12a2:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
    12a4:	2200      	movs	r2, #0
    12a6:	e7e6      	b.n	1276 <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
    12a8:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
    12aa:	73a5      	strb	r5, [r4, #14]
    12ac:	0a2a      	lsrs	r2, r5, #8
    12ae:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
    12b0:	200f      	movs	r0, #15
    12b2:	4028      	ands	r0, r5
    12b4:	1ac0      	subs	r0, r0, r3
    12b6:	4243      	negs	r3, r0
    12b8:	4158      	adcs	r0, r3
    12ba:	b2c0      	uxtb	r0, r0
}
    12bc:	bd30      	pop	{r4, r5, pc}
	...

000012c0 <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    12c0:	b570      	push	{r4, r5, r6, lr}
    12c2:	b082      	sub	sp, #8
    12c4:	0005      	movs	r5, r0
    12c6:	000c      	movs	r4, r1
    12c8:	9200      	str	r2, [sp, #0]
    12ca:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    12cc:	0008      	movs	r0, r1
    12ce:	4b0e      	ldr	r3, [pc, #56]	; (1308 <baro_init+0x48>)
    12d0:	4798      	blx	r3
    12d2:	1e06      	subs	r6, r0, #0
    12d4:	d102      	bne.n	12dc <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
    12d6:	0030      	movs	r0, r6
    12d8:	b002      	add	sp, #8
    12da:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
    12dc:	742c      	strb	r4, [r5, #16]
    12de:	0a23      	lsrs	r3, r4, #8
    12e0:	746b      	strb	r3, [r5, #17]
    12e2:	0c23      	lsrs	r3, r4, #16
    12e4:	74ab      	strb	r3, [r5, #18]
    12e6:	0e24      	lsrs	r4, r4, #24
    12e8:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
    12ea:	0028      	movs	r0, r5
    12ec:	3014      	adds	r0, #20
    12ee:	2205      	movs	r2, #5
    12f0:	4669      	mov	r1, sp
    12f2:	4b06      	ldr	r3, [pc, #24]	; (130c <baro_init+0x4c>)
    12f4:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
    12f6:	4a06      	ldr	r2, [pc, #24]	; (1310 <baro_init+0x50>)
    12f8:	211e      	movs	r1, #30
    12fa:	0028      	movs	r0, r5
    12fc:	4b05      	ldr	r3, [pc, #20]	; (1314 <baro_init+0x54>)
    12fe:	4798      	blx	r3
	baro_read_prom(desc);
    1300:	0028      	movs	r0, r5
    1302:	4b05      	ldr	r3, [pc, #20]	; (1318 <baro_init+0x58>)
    1304:	4798      	blx	r3
	return true;
    1306:	e7e6      	b.n	12d6 <baro_init+0x16>
    1308:	00001ec5 	.word	0x00001ec5
    130c:	000051f5 	.word	0x000051f5
    1310:	00000bb8 	.word	0x00000bb8
    1314:	00001125 	.word	0x00001125
    1318:	00001199 	.word	0x00001199

0000131c <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
    131c:	280b      	cmp	r0, #11
    131e:	d804      	bhi.n	132a <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
    1320:	4a03      	ldr	r2, [pc, #12]	; (1330 <dma_set_channel+0x14>)
    1322:	233f      	movs	r3, #63	; 0x3f
    1324:	54d0      	strb	r0, [r2, r3]
		return true;
    1326:	2001      	movs	r0, #1
	}
	else return false;
}
    1328:	4770      	bx	lr
	else return false;
    132a:	2000      	movs	r0, #0
    132c:	e7fc      	b.n	1328 <dma_set_channel+0xc>
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	41004800 	.word	0x41004800

00001334 <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
    1334:	4b07      	ldr	r3, [pc, #28]	; (1354 <dma_init+0x20>)
    1336:	695a      	ldr	r2, [r3, #20]
    1338:	2120      	movs	r1, #32
    133a:	430a      	orrs	r2, r1
    133c:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
    133e:	69da      	ldr	r2, [r3, #28]
    1340:	430a      	orrs	r2, r1
    1342:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
    1344:	4a04      	ldr	r2, [pc, #16]	; (1358 <dma_init+0x24>)
    1346:	4b05      	ldr	r3, [pc, #20]	; (135c <dma_init+0x28>)
    1348:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
    134a:	4a05      	ldr	r2, [pc, #20]	; (1360 <dma_init+0x2c>)
    134c:	639a      	str	r2, [r3, #56]	; 0x38
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
    134e:	4a05      	ldr	r2, [pc, #20]	; (1364 <dma_init+0x30>)
    1350:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
    1352:	4770      	bx	lr
    1354:	40000400 	.word	0x40000400
    1358:	200003e0 	.word	0x200003e0
    135c:	41004800 	.word	0x41004800
    1360:	20000340 	.word	0x20000340
    1364:	00000f02 	.word	0x00000f02

00001368 <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
    1368:	b5f0      	push	{r4, r5, r6, r7, lr}
    136a:	ac05      	add	r4, sp, #20
    136c:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
    136e:	2b02      	cmp	r3, #2
    1370:	d82d      	bhi.n	13ce <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1372:	2900      	cmp	r1, #0
    1374:	d023      	beq.n	13be <dma_create_descriptor+0x56>
    1376:	2480      	movs	r4, #128	; 0x80
    1378:	00e4      	lsls	r4, r4, #3
    137a:	2a00      	cmp	r2, #0
    137c:	d021      	beq.n	13c2 <dma_create_descriptor+0x5a>
    137e:	2580      	movs	r5, #128	; 0x80
    1380:	012d      	lsls	r5, r5, #4
    1382:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
    1384:	021d      	lsls	r5, r3, #8
    1386:	27c0      	movs	r7, #192	; 0xc0
    1388:	00bf      	lsls	r7, r7, #2
    138a:	403d      	ands	r5, r7
    138c:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
    138e:	2501      	movs	r5, #1
    1390:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
    1392:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
    1394:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    1396:	2900      	cmp	r1, #0
    1398:	d015      	beq.n	13c6 <dma_create_descriptor+0x5e>
    139a:	1c59      	adds	r1, r3, #1
    139c:	4371      	muls	r1, r6
    139e:	9c06      	ldr	r4, [sp, #24]
    13a0:	46a4      	mov	ip, r4
    13a2:	4461      	add	r1, ip
    13a4:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    13a6:	2a00      	cmp	r2, #0
    13a8:	d00f      	beq.n	13ca <dma_create_descriptor+0x62>
    13aa:	3301      	adds	r3, #1
    13ac:	4373      	muls	r3, r6
    13ae:	9a07      	ldr	r2, [sp, #28]
    13b0:	4694      	mov	ip, r2
    13b2:	4463      	add	r3, ip
    13b4:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
    13b6:	9b08      	ldr	r3, [sp, #32]
    13b8:	60c3      	str	r3, [r0, #12]
	
	return true;
    13ba:	2001      	movs	r0, #1
}
    13bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    13be:	2400      	movs	r4, #0
    13c0:	e7db      	b.n	137a <dma_create_descriptor+0x12>
    13c2:	2500      	movs	r5, #0
    13c4:	e7dd      	b.n	1382 <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    13c6:	9906      	ldr	r1, [sp, #24]
    13c8:	e7ec      	b.n	13a4 <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    13ca:	9b07      	ldr	r3, [sp, #28]
    13cc:	e7f2      	b.n	13b4 <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
    13ce:	2000      	movs	r0, #0
    13d0:	e7f4      	b.n	13bc <dma_create_descriptor+0x54>
	...

000013d4 <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
    13d4:	b570      	push	{r4, r5, r6, lr}
    13d6:	000c      	movs	r4, r1
    13d8:	0015      	movs	r5, r2
    13da:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
    13dc:	4b0e      	ldr	r3, [pc, #56]	; (1418 <dma_init_channel+0x44>)
    13de:	4798      	blx	r3
    13e0:	2800      	cmp	r0, #0
    13e2:	d012      	beq.n	140a <dma_init_channel+0x36>
	if (priority > 3) return false;
    13e4:	2e03      	cmp	r6, #3
    13e6:	d811      	bhi.n	140c <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
    13e8:	2c03      	cmp	r4, #3
    13ea:	d811      	bhi.n	1410 <dma_init_channel+0x3c>
    13ec:	2c01      	cmp	r4, #1
    13ee:	d011      	beq.n	1414 <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    13f0:	05a4      	lsls	r4, r4, #22
    13f2:	23c0      	movs	r3, #192	; 0xc0
    13f4:	041b      	lsls	r3, r3, #16
    13f6:	401c      	ands	r4, r3
    13f8:	022d      	lsls	r5, r5, #8
    13fa:	23fc      	movs	r3, #252	; 0xfc
    13fc:	019b      	lsls	r3, r3, #6
    13fe:	401d      	ands	r5, r3
    1400:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
    1402:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1404:	4334      	orrs	r4, r6
    1406:	4a05      	ldr	r2, [pc, #20]	; (141c <dma_init_channel+0x48>)
    1408:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
    140a:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
    140c:	2000      	movs	r0, #0
    140e:	e7fc      	b.n	140a <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
    1410:	2000      	movs	r0, #0
    1412:	e7fa      	b.n	140a <dma_init_channel+0x36>
    1414:	2000      	movs	r0, #0
    1416:	e7f8      	b.n	140a <dma_init_channel+0x36>
    1418:	0000131d 	.word	0x0000131d
    141c:	41004800 	.word	0x41004800

00001420 <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
    1420:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    1422:	4b07      	ldr	r3, [pc, #28]	; (1440 <dma_enable_channel+0x20>)
    1424:	4798      	blx	r3
    1426:	2800      	cmp	r0, #0
    1428:	d009      	beq.n	143e <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
    142a:	4a06      	ldr	r2, [pc, #24]	; (1444 <dma_enable_channel+0x24>)
    142c:	234e      	movs	r3, #78	; 0x4e
    142e:	2102      	movs	r1, #2
    1430:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
    1432:	313e      	adds	r1, #62	; 0x3e
    1434:	5c53      	ldrb	r3, [r2, r1]
    1436:	2402      	movs	r4, #2
    1438:	4323      	orrs	r3, r4
    143a:	b2db      	uxtb	r3, r3
    143c:	5453      	strb	r3, [r2, r1]
	return true;
}
    143e:	bd10      	pop	{r4, pc}
    1440:	0000131d 	.word	0x0000131d
    1444:	41004800 	.word	0x41004800

00001448 <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
    1448:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    144a:	4b05      	ldr	r3, [pc, #20]	; (1460 <dma_disable_channel+0x18>)
    144c:	4798      	blx	r3
    144e:	2800      	cmp	r0, #0
    1450:	d005      	beq.n	145e <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
    1452:	4904      	ldr	r1, [pc, #16]	; (1464 <dma_disable_channel+0x1c>)
    1454:	2240      	movs	r2, #64	; 0x40
    1456:	5c8b      	ldrb	r3, [r1, r2]
    1458:	2402      	movs	r4, #2
    145a:	43a3      	bics	r3, r4
    145c:	548b      	strb	r3, [r1, r2]
	return true;
}
    145e:	bd10      	pop	{r4, pc}
    1460:	0000131d 	.word	0x0000131d
    1464:	41004800 	.word	0x41004800

00001468 <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
    1468:	b530      	push	{r4, r5, lr}
    146a:	b083      	sub	sp, #12
    146c:	0004      	movs	r4, r0
    146e:	9200      	str	r2, [sp, #0]
    1470:	9301      	str	r3, [sp, #4]
    1472:	ab06      	add	r3, sp, #24
    1474:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
    1476:	7001      	strb	r1, [r0, #0]
    1478:	0a0b      	lsrs	r3, r1, #8
    147a:	7043      	strb	r3, [r0, #1]
    147c:	0c0b      	lsrs	r3, r1, #16
    147e:	7083      	strb	r3, [r0, #2]
    1480:	0e09      	lsrs	r1, r1, #24
    1482:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1484:	3004      	adds	r0, #4
    1486:	2205      	movs	r2, #5
    1488:	4669      	mov	r1, sp
    148a:	4b10      	ldr	r3, [pc, #64]	; (14cc <eeprom_init+0x64>)
    148c:	4798      	blx	r3
	desc->size = size;
    148e:	7265      	strb	r5, [r4, #9]
    1490:	0a2d      	lsrs	r5, r5, #8
    1492:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1494:	7923      	ldrb	r3, [r4, #4]
    1496:	7962      	ldrb	r2, [r4, #5]
    1498:	0212      	lsls	r2, r2, #8
    149a:	431a      	orrs	r2, r3
    149c:	79a3      	ldrb	r3, [r4, #6]
    149e:	041b      	lsls	r3, r3, #16
    14a0:	4313      	orrs	r3, r2
    14a2:	79e1      	ldrb	r1, [r4, #7]
    14a4:	0609      	lsls	r1, r1, #24
    14a6:	4319      	orrs	r1, r3
    14a8:	7a20      	ldrb	r0, [r4, #8]
    14aa:	4b09      	ldr	r3, [pc, #36]	; (14d0 <eeprom_init+0x68>)
    14ac:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    14ae:	7923      	ldrb	r3, [r4, #4]
    14b0:	7962      	ldrb	r2, [r4, #5]
    14b2:	0212      	lsls	r2, r2, #8
    14b4:	431a      	orrs	r2, r3
    14b6:	79a3      	ldrb	r3, [r4, #6]
    14b8:	041b      	lsls	r3, r3, #16
    14ba:	4313      	orrs	r3, r2
    14bc:	79e1      	ldrb	r1, [r4, #7]
    14be:	0609      	lsls	r1, r1, #24
    14c0:	4319      	orrs	r1, r3
    14c2:	7a20      	ldrb	r0, [r4, #8]
    14c4:	4b03      	ldr	r3, [pc, #12]	; (14d4 <eeprom_init+0x6c>)
    14c6:	4798      	blx	r3
}
    14c8:	b003      	add	sp, #12
    14ca:	bd30      	pop	{r4, r5, pc}
    14cc:	000051f5 	.word	0x000051f5
    14d0:	00001bb9 	.word	0x00001bb9
    14d4:	00001bc9 	.word	0x00001bc9

000014d8 <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
    14d8:	b510      	push	{r4, lr}
    14da:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    14dc:	7903      	ldrb	r3, [r0, #4]
    14de:	7942      	ldrb	r2, [r0, #5]
    14e0:	0212      	lsls	r2, r2, #8
    14e2:	431a      	orrs	r2, r3
    14e4:	7983      	ldrb	r3, [r0, #6]
    14e6:	041b      	lsls	r3, r3, #16
    14e8:	4313      	orrs	r3, r2
    14ea:	79c1      	ldrb	r1, [r0, #7]
    14ec:	0609      	lsls	r1, r1, #24
    14ee:	4319      	orrs	r1, r3
    14f0:	7a00      	ldrb	r0, [r0, #8]
    14f2:	4b0e      	ldr	r3, [pc, #56]	; (152c <eeprom_write_enable+0x54>)
    14f4:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
    14f6:	7823      	ldrb	r3, [r4, #0]
    14f8:	7862      	ldrb	r2, [r4, #1]
    14fa:	0212      	lsls	r2, r2, #8
    14fc:	431a      	orrs	r2, r3
    14fe:	78a3      	ldrb	r3, [r4, #2]
    1500:	041b      	lsls	r3, r3, #16
    1502:	4313      	orrs	r3, r2
    1504:	78e0      	ldrb	r0, [r4, #3]
    1506:	0600      	lsls	r0, r0, #24
    1508:	4318      	orrs	r0, r3
    150a:	2106      	movs	r1, #6
    150c:	4b08      	ldr	r3, [pc, #32]	; (1530 <eeprom_write_enable+0x58>)
    150e:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1510:	7923      	ldrb	r3, [r4, #4]
    1512:	7962      	ldrb	r2, [r4, #5]
    1514:	0212      	lsls	r2, r2, #8
    1516:	431a      	orrs	r2, r3
    1518:	79a3      	ldrb	r3, [r4, #6]
    151a:	041b      	lsls	r3, r3, #16
    151c:	4313      	orrs	r3, r2
    151e:	79e1      	ldrb	r1, [r4, #7]
    1520:	0609      	lsls	r1, r1, #24
    1522:	4319      	orrs	r1, r3
    1524:	7a20      	ldrb	r0, [r4, #8]
    1526:	4b03      	ldr	r3, [pc, #12]	; (1534 <eeprom_write_enable+0x5c>)
    1528:	4798      	blx	r3
}
    152a:	bd10      	pop	{r4, pc}
    152c:	00001bd9 	.word	0x00001bd9
    1530:	000020b5 	.word	0x000020b5
    1534:	00001bc9 	.word	0x00001bc9

00001538 <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
    1538:	b510      	push	{r4, lr}
    153a:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    153c:	7903      	ldrb	r3, [r0, #4]
    153e:	7942      	ldrb	r2, [r0, #5]
    1540:	0212      	lsls	r2, r2, #8
    1542:	431a      	orrs	r2, r3
    1544:	7983      	ldrb	r3, [r0, #6]
    1546:	041b      	lsls	r3, r3, #16
    1548:	4313      	orrs	r3, r2
    154a:	79c1      	ldrb	r1, [r0, #7]
    154c:	0609      	lsls	r1, r1, #24
    154e:	4319      	orrs	r1, r3
    1550:	7a00      	ldrb	r0, [r0, #8]
    1552:	4b0e      	ldr	r3, [pc, #56]	; (158c <eeprom_write_disable+0x54>)
    1554:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
    1556:	7823      	ldrb	r3, [r4, #0]
    1558:	7862      	ldrb	r2, [r4, #1]
    155a:	0212      	lsls	r2, r2, #8
    155c:	431a      	orrs	r2, r3
    155e:	78a3      	ldrb	r3, [r4, #2]
    1560:	041b      	lsls	r3, r3, #16
    1562:	4313      	orrs	r3, r2
    1564:	78e0      	ldrb	r0, [r4, #3]
    1566:	0600      	lsls	r0, r0, #24
    1568:	4318      	orrs	r0, r3
    156a:	2104      	movs	r1, #4
    156c:	4b08      	ldr	r3, [pc, #32]	; (1590 <eeprom_write_disable+0x58>)
    156e:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1570:	7923      	ldrb	r3, [r4, #4]
    1572:	7962      	ldrb	r2, [r4, #5]
    1574:	0212      	lsls	r2, r2, #8
    1576:	431a      	orrs	r2, r3
    1578:	79a3      	ldrb	r3, [r4, #6]
    157a:	041b      	lsls	r3, r3, #16
    157c:	4313      	orrs	r3, r2
    157e:	79e1      	ldrb	r1, [r4, #7]
    1580:	0609      	lsls	r1, r1, #24
    1582:	4319      	orrs	r1, r3
    1584:	7a20      	ldrb	r0, [r4, #8]
    1586:	4b03      	ldr	r3, [pc, #12]	; (1594 <eeprom_write_disable+0x5c>)
    1588:	4798      	blx	r3
}
    158a:	bd10      	pop	{r4, pc}
    158c:	00001bd9 	.word	0x00001bd9
    1590:	000020b5 	.word	0x000020b5
    1594:	00001bc9 	.word	0x00001bc9

00001598 <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
    1598:	b570      	push	{r4, r5, r6, lr}
    159a:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    159c:	7903      	ldrb	r3, [r0, #4]
    159e:	7942      	ldrb	r2, [r0, #5]
    15a0:	0212      	lsls	r2, r2, #8
    15a2:	431a      	orrs	r2, r3
    15a4:	7983      	ldrb	r3, [r0, #6]
    15a6:	041b      	lsls	r3, r3, #16
    15a8:	4313      	orrs	r3, r2
    15aa:	79c1      	ldrb	r1, [r0, #7]
    15ac:	0609      	lsls	r1, r1, #24
    15ae:	4319      	orrs	r1, r3
    15b0:	7a00      	ldrb	r0, [r0, #8]
    15b2:	4b15      	ldr	r3, [pc, #84]	; (1608 <eeprom_read_status+0x70>)
    15b4:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
    15b6:	7823      	ldrb	r3, [r4, #0]
    15b8:	7862      	ldrb	r2, [r4, #1]
    15ba:	0212      	lsls	r2, r2, #8
    15bc:	431a      	orrs	r2, r3
    15be:	78a3      	ldrb	r3, [r4, #2]
    15c0:	041b      	lsls	r3, r3, #16
    15c2:	4313      	orrs	r3, r2
    15c4:	78e0      	ldrb	r0, [r4, #3]
    15c6:	0600      	lsls	r0, r0, #24
    15c8:	4318      	orrs	r0, r3
    15ca:	2105      	movs	r1, #5
    15cc:	4d0f      	ldr	r5, [pc, #60]	; (160c <eeprom_read_status+0x74>)
    15ce:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
    15d0:	7823      	ldrb	r3, [r4, #0]
    15d2:	7862      	ldrb	r2, [r4, #1]
    15d4:	0212      	lsls	r2, r2, #8
    15d6:	431a      	orrs	r2, r3
    15d8:	78a3      	ldrb	r3, [r4, #2]
    15da:	041b      	lsls	r3, r3, #16
    15dc:	4313      	orrs	r3, r2
    15de:	78e0      	ldrb	r0, [r4, #3]
    15e0:	0600      	lsls	r0, r0, #24
    15e2:	4318      	orrs	r0, r3
    15e4:	2100      	movs	r1, #0
    15e6:	47a8      	blx	r5
    15e8:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
    15ea:	7923      	ldrb	r3, [r4, #4]
    15ec:	7962      	ldrb	r2, [r4, #5]
    15ee:	0212      	lsls	r2, r2, #8
    15f0:	431a      	orrs	r2, r3
    15f2:	79a3      	ldrb	r3, [r4, #6]
    15f4:	041b      	lsls	r3, r3, #16
    15f6:	4313      	orrs	r3, r2
    15f8:	79e1      	ldrb	r1, [r4, #7]
    15fa:	0609      	lsls	r1, r1, #24
    15fc:	4319      	orrs	r1, r3
    15fe:	7a20      	ldrb	r0, [r4, #8]
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <eeprom_read_status+0x78>)
    1602:	4798      	blx	r3
}
    1604:	0028      	movs	r0, r5
    1606:	bd70      	pop	{r4, r5, r6, pc}
    1608:	00001bd9 	.word	0x00001bd9
    160c:	000020b5 	.word	0x000020b5
    1610:	00001bc9 	.word	0x00001bc9

00001614 <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
    1614:	b510      	push	{r4, lr}
    1616:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
    1618:	4b0a      	ldr	r3, [pc, #40]	; (1644 <eeprom_check+0x30>)
    161a:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
    161c:	0020      	movs	r0, r4
    161e:	4b0a      	ldr	r3, [pc, #40]	; (1648 <eeprom_check+0x34>)
    1620:	4798      	blx	r3
    1622:	0780      	lsls	r0, r0, #30
    1624:	d401      	bmi.n	162a <eeprom_check+0x16>
    1626:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
    1628:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
    162a:	0020      	movs	r0, r4
    162c:	4b07      	ldr	r3, [pc, #28]	; (164c <eeprom_check+0x38>)
    162e:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1630:	0020      	movs	r0, r4
    1632:	4b05      	ldr	r3, [pc, #20]	; (1648 <eeprom_check+0x34>)
    1634:	4798      	blx	r3
    1636:	0780      	lsls	r0, r0, #30
    1638:	d401      	bmi.n	163e <eeprom_check+0x2a>
	return true;
    163a:	2001      	movs	r0, #1
    163c:	e7f4      	b.n	1628 <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    163e:	2000      	movs	r0, #0
    1640:	e7f2      	b.n	1628 <eeprom_check+0x14>
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	000014d9 	.word	0x000014d9
    1648:	00001599 	.word	0x00001599
    164c:	00001539 	.word	0x00001539

00001650 <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
    1650:	b570      	push	{r4, r5, r6, lr}
    1652:	b082      	sub	sp, #8
    1654:	0004      	movs	r4, r0
    1656:	9200      	str	r2, [sp, #0]
    1658:	9301      	str	r3, [sp, #4]
    165a:	ab06      	add	r3, sp, #24
    165c:	cb20      	ldmia	r3!, {r5}
    165e:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
    1660:	7001      	strb	r1, [r0, #0]
    1662:	0a0b      	lsrs	r3, r1, #8
    1664:	7043      	strb	r3, [r0, #1]
    1666:	0c0b      	lsrs	r3, r1, #16
    1668:	7083      	strb	r3, [r0, #2]
    166a:	0e09      	lsrs	r1, r1, #24
    166c:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    166e:	3008      	adds	r0, #8
    1670:	2205      	movs	r2, #5
    1672:	4669      	mov	r1, sp
    1674:	4b15      	ldr	r3, [pc, #84]	; (16cc <flash_init+0x7c>)
    1676:	4798      	blx	r3
	desc->size = size;
    1678:	7125      	strb	r5, [r4, #4]
    167a:	0a2b      	lsrs	r3, r5, #8
    167c:	7163      	strb	r3, [r4, #5]
    167e:	0c2b      	lsrs	r3, r5, #16
    1680:	71a3      	strb	r3, [r4, #6]
    1682:	0e2d      	lsrs	r5, r5, #24
    1684:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
    1686:	221f      	movs	r2, #31
    1688:	4032      	ands	r2, r6
    168a:	7b63      	ldrb	r3, [r4, #13]
    168c:	211f      	movs	r1, #31
    168e:	438b      	bics	r3, r1
    1690:	4313      	orrs	r3, r2
    1692:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1694:	7a23      	ldrb	r3, [r4, #8]
    1696:	7a62      	ldrb	r2, [r4, #9]
    1698:	0212      	lsls	r2, r2, #8
    169a:	431a      	orrs	r2, r3
    169c:	7aa3      	ldrb	r3, [r4, #10]
    169e:	041b      	lsls	r3, r3, #16
    16a0:	4313      	orrs	r3, r2
    16a2:	7ae1      	ldrb	r1, [r4, #11]
    16a4:	0609      	lsls	r1, r1, #24
    16a6:	4319      	orrs	r1, r3
    16a8:	7b20      	ldrb	r0, [r4, #12]
    16aa:	4b09      	ldr	r3, [pc, #36]	; (16d0 <flash_init+0x80>)
    16ac:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    16ae:	7a23      	ldrb	r3, [r4, #8]
    16b0:	7a62      	ldrb	r2, [r4, #9]
    16b2:	0212      	lsls	r2, r2, #8
    16b4:	431a      	orrs	r2, r3
    16b6:	7aa3      	ldrb	r3, [r4, #10]
    16b8:	041b      	lsls	r3, r3, #16
    16ba:	4313      	orrs	r3, r2
    16bc:	7ae1      	ldrb	r1, [r4, #11]
    16be:	0609      	lsls	r1, r1, #24
    16c0:	4319      	orrs	r1, r3
    16c2:	7b20      	ldrb	r0, [r4, #12]
    16c4:	4b03      	ldr	r3, [pc, #12]	; (16d4 <flash_init+0x84>)
    16c6:	4798      	blx	r3
}
    16c8:	b002      	add	sp, #8
    16ca:	bd70      	pop	{r4, r5, r6, pc}
    16cc:	000051f5 	.word	0x000051f5
    16d0:	00001bb9 	.word	0x00001bb9
    16d4:	00001bc9 	.word	0x00001bc9

000016d8 <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
    16d8:	b530      	push	{r4, r5, lr}
    16da:	b083      	sub	sp, #12
    16dc:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    16de:	7a03      	ldrb	r3, [r0, #8]
    16e0:	7a42      	ldrb	r2, [r0, #9]
    16e2:	0212      	lsls	r2, r2, #8
    16e4:	431a      	orrs	r2, r3
    16e6:	7a83      	ldrb	r3, [r0, #10]
    16e8:	041b      	lsls	r3, r3, #16
    16ea:	4313      	orrs	r3, r2
    16ec:	7ac1      	ldrb	r1, [r0, #11]
    16ee:	0609      	lsls	r1, r1, #24
    16f0:	4319      	orrs	r1, r3
    16f2:	7b00      	ldrb	r0, [r0, #12]
    16f4:	4b24      	ldr	r3, [pc, #144]	; (1788 <flash_check+0xb0>)
    16f6:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    16f8:	7823      	ldrb	r3, [r4, #0]
    16fa:	7862      	ldrb	r2, [r4, #1]
    16fc:	0212      	lsls	r2, r2, #8
    16fe:	431a      	orrs	r2, r3
    1700:	78a3      	ldrb	r3, [r4, #2]
    1702:	041b      	lsls	r3, r3, #16
    1704:	4313      	orrs	r3, r2
    1706:	78e0      	ldrb	r0, [r4, #3]
    1708:	0600      	lsls	r0, r0, #24
    170a:	4318      	orrs	r0, r3
    170c:	219f      	movs	r1, #159	; 0x9f
    170e:	4b1f      	ldr	r3, [pc, #124]	; (178c <flash_check+0xb4>)
    1710:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    1712:	2500      	movs	r5, #0
    1714:	e00f      	b.n	1736 <flash_check+0x5e>
    1716:	7823      	ldrb	r3, [r4, #0]
    1718:	7862      	ldrb	r2, [r4, #1]
    171a:	0212      	lsls	r2, r2, #8
    171c:	431a      	orrs	r2, r3
    171e:	78a3      	ldrb	r3, [r4, #2]
    1720:	041b      	lsls	r3, r3, #16
    1722:	4313      	orrs	r3, r2
    1724:	78e0      	ldrb	r0, [r4, #3]
    1726:	0600      	lsls	r0, r0, #24
    1728:	4318      	orrs	r0, r3
    172a:	2100      	movs	r1, #0
    172c:	4b17      	ldr	r3, [pc, #92]	; (178c <flash_check+0xb4>)
    172e:	4798      	blx	r3
    1730:	ab01      	add	r3, sp, #4
    1732:	5558      	strb	r0, [r3, r5]
    1734:	3501      	adds	r5, #1
    1736:	2d02      	cmp	r5, #2
    1738:	dded      	ble.n	1716 <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    173a:	7a23      	ldrb	r3, [r4, #8]
    173c:	7a62      	ldrb	r2, [r4, #9]
    173e:	0212      	lsls	r2, r2, #8
    1740:	431a      	orrs	r2, r3
    1742:	7aa3      	ldrb	r3, [r4, #10]
    1744:	041b      	lsls	r3, r3, #16
    1746:	4313      	orrs	r3, r2
    1748:	7ae1      	ldrb	r1, [r4, #11]
    174a:	0609      	lsls	r1, r1, #24
    174c:	4319      	orrs	r1, r3
    174e:	7b20      	ldrb	r0, [r4, #12]
    1750:	4b0f      	ldr	r3, [pc, #60]	; (1790 <flash_check+0xb8>)
    1752:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1754:	ab01      	add	r3, sp, #4
    1756:	781b      	ldrb	r3, [r3, #0]
    1758:	2b1f      	cmp	r3, #31
    175a:	d10e      	bne.n	177a <flash_check+0xa2>
    175c:	ab01      	add	r3, sp, #4
    175e:	785a      	ldrb	r2, [r3, #1]
    1760:	7b63      	ldrb	r3, [r4, #13]
    1762:	06db      	lsls	r3, r3, #27
    1764:	0edb      	lsrs	r3, r3, #27
    1766:	2180      	movs	r1, #128	; 0x80
    1768:	430b      	orrs	r3, r1
    176a:	429a      	cmp	r2, r3
    176c:	d108      	bne.n	1780 <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    176e:	ab01      	add	r3, sp, #4
    1770:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1772:	2b01      	cmp	r3, #1
    1774:	d006      	beq.n	1784 <flash_check+0xac>
	else return false;
    1776:	2000      	movs	r0, #0
    1778:	e000      	b.n	177c <flash_check+0xa4>
    177a:	2000      	movs	r0, #0
}
    177c:	b003      	add	sp, #12
    177e:	bd30      	pop	{r4, r5, pc}
	else return false;
    1780:	2000      	movs	r0, #0
    1782:	e7fb      	b.n	177c <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    1784:	2001      	movs	r0, #1
    1786:	e7f9      	b.n	177c <flash_check+0xa4>
    1788:	00001bd9 	.word	0x00001bd9
    178c:	000020b5 	.word	0x000020b5
    1790:	00001bc9 	.word	0x00001bc9

00001794 <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1794:	b570      	push	{r4, r5, r6, lr}
    1796:	0004      	movs	r4, r0
    1798:	000e      	movs	r6, r1
    179a:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    179c:	7902      	ldrb	r2, [r0, #4]
    179e:	7943      	ldrb	r3, [r0, #5]
    17a0:	021b      	lsls	r3, r3, #8
    17a2:	4313      	orrs	r3, r2
    17a4:	7982      	ldrb	r2, [r0, #6]
    17a6:	0412      	lsls	r2, r2, #16
    17a8:	431a      	orrs	r2, r3
    17aa:	79c1      	ldrb	r1, [r0, #7]
    17ac:	0609      	lsls	r1, r1, #24
    17ae:	4311      	orrs	r1, r2
    17b0:	7a00      	ldrb	r0, [r0, #8]
    17b2:	4b15      	ldr	r3, [pc, #84]	; (1808 <imu_icm20948_write_byte+0x74>)
    17b4:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    17b6:	217f      	movs	r1, #127	; 0x7f
    17b8:	4031      	ands	r1, r6
    17ba:	7823      	ldrb	r3, [r4, #0]
    17bc:	7862      	ldrb	r2, [r4, #1]
    17be:	0212      	lsls	r2, r2, #8
    17c0:	431a      	orrs	r2, r3
    17c2:	78a3      	ldrb	r3, [r4, #2]
    17c4:	041b      	lsls	r3, r3, #16
    17c6:	4313      	orrs	r3, r2
    17c8:	78e0      	ldrb	r0, [r4, #3]
    17ca:	0600      	lsls	r0, r0, #24
    17cc:	4318      	orrs	r0, r3
    17ce:	4e0f      	ldr	r6, [pc, #60]	; (180c <imu_icm20948_write_byte+0x78>)
    17d0:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    17d2:	7823      	ldrb	r3, [r4, #0]
    17d4:	7862      	ldrb	r2, [r4, #1]
    17d6:	0212      	lsls	r2, r2, #8
    17d8:	431a      	orrs	r2, r3
    17da:	78a3      	ldrb	r3, [r4, #2]
    17dc:	041b      	lsls	r3, r3, #16
    17de:	4313      	orrs	r3, r2
    17e0:	78e0      	ldrb	r0, [r4, #3]
    17e2:	0600      	lsls	r0, r0, #24
    17e4:	4318      	orrs	r0, r3
    17e6:	0029      	movs	r1, r5
    17e8:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    17ea:	7923      	ldrb	r3, [r4, #4]
    17ec:	7962      	ldrb	r2, [r4, #5]
    17ee:	0212      	lsls	r2, r2, #8
    17f0:	431a      	orrs	r2, r3
    17f2:	79a3      	ldrb	r3, [r4, #6]
    17f4:	041b      	lsls	r3, r3, #16
    17f6:	4313      	orrs	r3, r2
    17f8:	79e1      	ldrb	r1, [r4, #7]
    17fa:	0609      	lsls	r1, r1, #24
    17fc:	4319      	orrs	r1, r3
    17fe:	7a20      	ldrb	r0, [r4, #8]
    1800:	4b03      	ldr	r3, [pc, #12]	; (1810 <imu_icm20948_write_byte+0x7c>)
    1802:	4798      	blx	r3
}
    1804:	bd70      	pop	{r4, r5, r6, pc}
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	00001bd9 	.word	0x00001bd9
    180c:	000020b5 	.word	0x000020b5
    1810:	00001bc9 	.word	0x00001bc9

00001814 <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    1814:	b570      	push	{r4, r5, r6, lr}
    1816:	0004      	movs	r4, r0
    1818:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    181a:	7903      	ldrb	r3, [r0, #4]
    181c:	7942      	ldrb	r2, [r0, #5]
    181e:	0212      	lsls	r2, r2, #8
    1820:	431a      	orrs	r2, r3
    1822:	7983      	ldrb	r3, [r0, #6]
    1824:	041b      	lsls	r3, r3, #16
    1826:	4313      	orrs	r3, r2
    1828:	79c1      	ldrb	r1, [r0, #7]
    182a:	0609      	lsls	r1, r1, #24
    182c:	4319      	orrs	r1, r3
    182e:	7a00      	ldrb	r0, [r0, #8]
    1830:	4b16      	ldr	r3, [pc, #88]	; (188c <imu_icm20948_read_byte+0x78>)
    1832:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1834:	2180      	movs	r1, #128	; 0x80
    1836:	4249      	negs	r1, r1
    1838:	4329      	orrs	r1, r5
    183a:	b2c9      	uxtb	r1, r1
    183c:	7823      	ldrb	r3, [r4, #0]
    183e:	7862      	ldrb	r2, [r4, #1]
    1840:	0212      	lsls	r2, r2, #8
    1842:	431a      	orrs	r2, r3
    1844:	78a3      	ldrb	r3, [r4, #2]
    1846:	041b      	lsls	r3, r3, #16
    1848:	4313      	orrs	r3, r2
    184a:	78e0      	ldrb	r0, [r4, #3]
    184c:	0600      	lsls	r0, r0, #24
    184e:	4318      	orrs	r0, r3
    1850:	4d0f      	ldr	r5, [pc, #60]	; (1890 <imu_icm20948_read_byte+0x7c>)
    1852:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    1854:	7823      	ldrb	r3, [r4, #0]
    1856:	7862      	ldrb	r2, [r4, #1]
    1858:	0212      	lsls	r2, r2, #8
    185a:	431a      	orrs	r2, r3
    185c:	78a3      	ldrb	r3, [r4, #2]
    185e:	041b      	lsls	r3, r3, #16
    1860:	4313      	orrs	r3, r2
    1862:	78e0      	ldrb	r0, [r4, #3]
    1864:	0600      	lsls	r0, r0, #24
    1866:	4318      	orrs	r0, r3
    1868:	2100      	movs	r1, #0
    186a:	47a8      	blx	r5
    186c:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    186e:	7923      	ldrb	r3, [r4, #4]
    1870:	7962      	ldrb	r2, [r4, #5]
    1872:	0212      	lsls	r2, r2, #8
    1874:	431a      	orrs	r2, r3
    1876:	79a3      	ldrb	r3, [r4, #6]
    1878:	041b      	lsls	r3, r3, #16
    187a:	4313      	orrs	r3, r2
    187c:	79e1      	ldrb	r1, [r4, #7]
    187e:	0609      	lsls	r1, r1, #24
    1880:	4319      	orrs	r1, r3
    1882:	7a20      	ldrb	r0, [r4, #8]
    1884:	4b03      	ldr	r3, [pc, #12]	; (1894 <imu_icm20948_read_byte+0x80>)
    1886:	4798      	blx	r3
	return out;
}
    1888:	0028      	movs	r0, r5
    188a:	bd70      	pop	{r4, r5, r6, pc}
    188c:	00001bd9 	.word	0x00001bd9
    1890:	000020b5 	.word	0x000020b5
    1894:	00001bc9 	.word	0x00001bc9

00001898 <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1898:	b5f0      	push	{r4, r5, r6, r7, lr}
    189a:	46c6      	mov	lr, r8
    189c:	b500      	push	{lr}
    189e:	0004      	movs	r4, r0
    18a0:	000d      	movs	r5, r1
    18a2:	0017      	movs	r7, r2
    18a4:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    18a6:	7902      	ldrb	r2, [r0, #4]
    18a8:	7943      	ldrb	r3, [r0, #5]
    18aa:	021b      	lsls	r3, r3, #8
    18ac:	4313      	orrs	r3, r2
    18ae:	7982      	ldrb	r2, [r0, #6]
    18b0:	0412      	lsls	r2, r2, #16
    18b2:	431a      	orrs	r2, r3
    18b4:	79c1      	ldrb	r1, [r0, #7]
    18b6:	0609      	lsls	r1, r1, #24
    18b8:	4311      	orrs	r1, r2
    18ba:	7a00      	ldrb	r0, [r0, #8]
    18bc:	4b19      	ldr	r3, [pc, #100]	; (1924 <imu_icm20948_write+0x8c>)
    18be:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    18c0:	217f      	movs	r1, #127	; 0x7f
    18c2:	4029      	ands	r1, r5
    18c4:	7823      	ldrb	r3, [r4, #0]
    18c6:	7862      	ldrb	r2, [r4, #1]
    18c8:	0212      	lsls	r2, r2, #8
    18ca:	431a      	orrs	r2, r3
    18cc:	78a3      	ldrb	r3, [r4, #2]
    18ce:	041b      	lsls	r3, r3, #16
    18d0:	4313      	orrs	r3, r2
    18d2:	78e0      	ldrb	r0, [r4, #3]
    18d4:	0600      	lsls	r0, r0, #24
    18d6:	4318      	orrs	r0, r3
    18d8:	4b13      	ldr	r3, [pc, #76]	; (1928 <imu_icm20948_write+0x90>)
    18da:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    18dc:	2600      	movs	r6, #0
    18de:	e00e      	b.n	18fe <imu_icm20948_write+0x66>
		spi_command(desc->sercom, data[i]);
    18e0:	4643      	mov	r3, r8
    18e2:	5d99      	ldrb	r1, [r3, r6]
    18e4:	7822      	ldrb	r2, [r4, #0]
    18e6:	7863      	ldrb	r3, [r4, #1]
    18e8:	021b      	lsls	r3, r3, #8
    18ea:	4313      	orrs	r3, r2
    18ec:	78a5      	ldrb	r5, [r4, #2]
    18ee:	042d      	lsls	r5, r5, #16
    18f0:	431d      	orrs	r5, r3
    18f2:	78e0      	ldrb	r0, [r4, #3]
    18f4:	0600      	lsls	r0, r0, #24
    18f6:	4328      	orrs	r0, r5
    18f8:	4b0b      	ldr	r3, [pc, #44]	; (1928 <imu_icm20948_write+0x90>)
    18fa:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    18fc:	3601      	adds	r6, #1
    18fe:	42be      	cmp	r6, r7
    1900:	dbee      	blt.n	18e0 <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1902:	7923      	ldrb	r3, [r4, #4]
    1904:	7962      	ldrb	r2, [r4, #5]
    1906:	0212      	lsls	r2, r2, #8
    1908:	431a      	orrs	r2, r3
    190a:	79a3      	ldrb	r3, [r4, #6]
    190c:	041b      	lsls	r3, r3, #16
    190e:	4313      	orrs	r3, r2
    1910:	79e1      	ldrb	r1, [r4, #7]
    1912:	0609      	lsls	r1, r1, #24
    1914:	4319      	orrs	r1, r3
    1916:	7a20      	ldrb	r0, [r4, #8]
    1918:	4b04      	ldr	r3, [pc, #16]	; (192c <imu_icm20948_write+0x94>)
    191a:	4798      	blx	r3
}
    191c:	bc80      	pop	{r7}
    191e:	46b8      	mov	r8, r7
    1920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	00001bd9 	.word	0x00001bd9
    1928:	000020b5 	.word	0x000020b5
    192c:	00001bc9 	.word	0x00001bc9

00001930 <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1930:	b5f0      	push	{r4, r5, r6, r7, lr}
    1932:	46c6      	mov	lr, r8
    1934:	b500      	push	{lr}
    1936:	0004      	movs	r4, r0
    1938:	000d      	movs	r5, r1
    193a:	0017      	movs	r7, r2
    193c:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    193e:	7903      	ldrb	r3, [r0, #4]
    1940:	7942      	ldrb	r2, [r0, #5]
    1942:	0212      	lsls	r2, r2, #8
    1944:	431a      	orrs	r2, r3
    1946:	7983      	ldrb	r3, [r0, #6]
    1948:	041b      	lsls	r3, r3, #16
    194a:	4313      	orrs	r3, r2
    194c:	79c1      	ldrb	r1, [r0, #7]
    194e:	0609      	lsls	r1, r1, #24
    1950:	4319      	orrs	r1, r3
    1952:	7a00      	ldrb	r0, [r0, #8]
    1954:	4b1b      	ldr	r3, [pc, #108]	; (19c4 <imu_icm20948_read+0x94>)
    1956:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1958:	2180      	movs	r1, #128	; 0x80
    195a:	4249      	negs	r1, r1
    195c:	4329      	orrs	r1, r5
    195e:	b2c9      	uxtb	r1, r1
    1960:	7823      	ldrb	r3, [r4, #0]
    1962:	7862      	ldrb	r2, [r4, #1]
    1964:	0212      	lsls	r2, r2, #8
    1966:	431a      	orrs	r2, r3
    1968:	78a3      	ldrb	r3, [r4, #2]
    196a:	041b      	lsls	r3, r3, #16
    196c:	4313      	orrs	r3, r2
    196e:	78e0      	ldrb	r0, [r4, #3]
    1970:	0600      	lsls	r0, r0, #24
    1972:	4318      	orrs	r0, r3
    1974:	4b14      	ldr	r3, [pc, #80]	; (19c8 <imu_icm20948_read+0x98>)
    1976:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1978:	2500      	movs	r5, #0
    197a:	e010      	b.n	199e <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    197c:	4643      	mov	r3, r8
    197e:	195e      	adds	r6, r3, r5
    1980:	7823      	ldrb	r3, [r4, #0]
    1982:	7862      	ldrb	r2, [r4, #1]
    1984:	0212      	lsls	r2, r2, #8
    1986:	431a      	orrs	r2, r3
    1988:	78a3      	ldrb	r3, [r4, #2]
    198a:	041b      	lsls	r3, r3, #16
    198c:	4313      	orrs	r3, r2
    198e:	78e0      	ldrb	r0, [r4, #3]
    1990:	0600      	lsls	r0, r0, #24
    1992:	4318      	orrs	r0, r3
    1994:	2100      	movs	r1, #0
    1996:	4b0c      	ldr	r3, [pc, #48]	; (19c8 <imu_icm20948_read+0x98>)
    1998:	4798      	blx	r3
    199a:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    199c:	3501      	adds	r5, #1
    199e:	42bd      	cmp	r5, r7
    19a0:	dbec      	blt.n	197c <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    19a2:	7923      	ldrb	r3, [r4, #4]
    19a4:	7962      	ldrb	r2, [r4, #5]
    19a6:	0212      	lsls	r2, r2, #8
    19a8:	431a      	orrs	r2, r3
    19aa:	79a3      	ldrb	r3, [r4, #6]
    19ac:	041b      	lsls	r3, r3, #16
    19ae:	4313      	orrs	r3, r2
    19b0:	79e1      	ldrb	r1, [r4, #7]
    19b2:	0609      	lsls	r1, r1, #24
    19b4:	4319      	orrs	r1, r3
    19b6:	7a20      	ldrb	r0, [r4, #8]
    19b8:	4b04      	ldr	r3, [pc, #16]	; (19cc <imu_icm20948_read+0x9c>)
    19ba:	4798      	blx	r3
}
    19bc:	bc80      	pop	{r7}
    19be:	46b8      	mov	r8, r7
    19c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	00001bd9 	.word	0x00001bd9
    19c8:	000020b5 	.word	0x000020b5
    19cc:	00001bc9 	.word	0x00001bc9

000019d0 <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    19d0:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    19d2:	2903      	cmp	r1, #3
    19d4:	d900      	bls.n	19d8 <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    19d6:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    19d8:	0109      	lsls	r1, r1, #4
    19da:	b2ca      	uxtb	r2, r1
    19dc:	217f      	movs	r1, #127	; 0x7f
    19de:	4b01      	ldr	r3, [pc, #4]	; (19e4 <imu_icm20948_user_bank+0x14>)
    19e0:	4798      	blx	r3
}
    19e2:	e7f8      	b.n	19d6 <imu_icm20948_user_bank+0x6>
    19e4:	00001795 	.word	0x00001795

000019e8 <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    19e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ea:	b083      	sub	sp, #12
    19ec:	0005      	movs	r5, r0
    19ee:	000c      	movs	r4, r1
    19f0:	9200      	str	r2, [sp, #0]
    19f2:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    19f4:	0008      	movs	r0, r1
    19f6:	4b13      	ldr	r3, [pc, #76]	; (1a44 <imu_icm20948_init+0x5c>)
    19f8:	4798      	blx	r3
    19fa:	1e06      	subs	r6, r0, #0
    19fc:	d102      	bne.n	1a04 <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    19fe:	0030      	movs	r0, r6
    1a00:	b003      	add	sp, #12
    1a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    1a04:	702c      	strb	r4, [r5, #0]
    1a06:	0a23      	lsrs	r3, r4, #8
    1a08:	706b      	strb	r3, [r5, #1]
    1a0a:	0c23      	lsrs	r3, r4, #16
    1a0c:	70ab      	strb	r3, [r5, #2]
    1a0e:	0e24      	lsrs	r4, r4, #24
    1a10:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    1a12:	1d28      	adds	r0, r5, #4
    1a14:	2205      	movs	r2, #5
    1a16:	4669      	mov	r1, sp
    1a18:	4b0b      	ldr	r3, [pc, #44]	; (1a48 <imu_icm20948_init+0x60>)
    1a1a:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    1a1c:	2280      	movs	r2, #128	; 0x80
    1a1e:	2106      	movs	r1, #6
    1a20:	0028      	movs	r0, r5
    1a22:	4c0a      	ldr	r4, [pc, #40]	; (1a4c <imu_icm20948_init+0x64>)
    1a24:	47a0      	blx	r4
	delay_ms(11);
    1a26:	480a      	ldr	r0, [pc, #40]	; (1a50 <imu_icm20948_init+0x68>)
    1a28:	4f0a      	ldr	r7, [pc, #40]	; (1a54 <imu_icm20948_init+0x6c>)
    1a2a:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    1a2c:	2210      	movs	r2, #16
    1a2e:	2103      	movs	r1, #3
    1a30:	0028      	movs	r0, r5
    1a32:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    1a34:	2201      	movs	r2, #1
    1a36:	2106      	movs	r1, #6
    1a38:	0028      	movs	r0, r5
    1a3a:	47a0      	blx	r4
	delay_us(80);
    1a3c:	20f0      	movs	r0, #240	; 0xf0
    1a3e:	0040      	lsls	r0, r0, #1
    1a40:	47b8      	blx	r7
	return true;
    1a42:	e7dc      	b.n	19fe <imu_icm20948_init+0x16>
    1a44:	00001ec5 	.word	0x00001ec5
    1a48:	000051f5 	.word	0x000051f5
    1a4c:	00001795 	.word	0x00001795
    1a50:	000101d0 	.word	0x000101d0
    1a54:	00002199 	.word	0x00002199

00001a58 <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1a58:	b510      	push	{r4, lr}
    1a5a:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    1a5c:	2100      	movs	r1, #0
    1a5e:	4b06      	ldr	r3, [pc, #24]	; (1a78 <imu_icm20948_check+0x20>)
    1a60:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    1a62:	2100      	movs	r1, #0
    1a64:	0020      	movs	r0, r4
    1a66:	4b05      	ldr	r3, [pc, #20]	; (1a7c <imu_icm20948_check+0x24>)
    1a68:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    1a6a:	28ea      	cmp	r0, #234	; 0xea
    1a6c:	d001      	beq.n	1a72 <imu_icm20948_check+0x1a>
	else return false;
    1a6e:	2000      	movs	r0, #0
}
    1a70:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    1a72:	38e9      	subs	r0, #233	; 0xe9
    1a74:	e7fc      	b.n	1a70 <imu_icm20948_check+0x18>
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	000019d1 	.word	0x000019d1
    1a7c:	00001815 	.word	0x00001815

00001a80 <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a82:	0004      	movs	r4, r0
    1a84:	000f      	movs	r7, r1
    1a86:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1a88:	2103      	movs	r1, #3
    1a8a:	4b0b      	ldr	r3, [pc, #44]	; (1ab8 <mag_icm20948_write_byte+0x38>)
    1a8c:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    1a8e:	220c      	movs	r2, #12
    1a90:	2103      	movs	r1, #3
    1a92:	0020      	movs	r0, r4
    1a94:	4d09      	ldr	r5, [pc, #36]	; (1abc <mag_icm20948_write_byte+0x3c>)
    1a96:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    1a98:	003a      	movs	r2, r7
    1a9a:	2104      	movs	r1, #4
    1a9c:	0020      	movs	r0, r4
    1a9e:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    1aa0:	0032      	movs	r2, r6
    1aa2:	2106      	movs	r1, #6
    1aa4:	0020      	movs	r0, r4
    1aa6:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    1aa8:	2281      	movs	r2, #129	; 0x81
    1aaa:	2105      	movs	r1, #5
    1aac:	0020      	movs	r0, r4
    1aae:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    1ab0:	4803      	ldr	r0, [pc, #12]	; (1ac0 <mag_icm20948_write_byte+0x40>)
    1ab2:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <mag_icm20948_write_byte+0x44>)
    1ab4:	4798      	blx	r3
}
    1ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ab8:	000019d1 	.word	0x000019d1
    1abc:	00001795 	.word	0x00001795
    1ac0:	0000ea60 	.word	0x0000ea60
    1ac4:	00002199 	.word	0x00002199

00001ac8 <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    1ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aca:	46c6      	mov	lr, r8
    1acc:	b500      	push	{lr}
    1ace:	b082      	sub	sp, #8
    1ad0:	0004      	movs	r4, r0
    1ad2:	000f      	movs	r7, r1
    1ad4:	0015      	movs	r5, r2
    1ad6:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1ad8:	2103      	movs	r1, #3
    1ada:	4e0f      	ldr	r6, [pc, #60]	; (1b18 <mag_icm20948_read+0x50>)
    1adc:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    1ade:	ab01      	add	r3, sp, #4
    1ae0:	228c      	movs	r2, #140	; 0x8c
    1ae2:	701a      	strb	r2, [r3, #0]
    1ae4:	705f      	strb	r7, [r3, #1]
    1ae6:	3a0d      	subs	r2, #13
    1ae8:	3aff      	subs	r2, #255	; 0xff
    1aea:	432a      	orrs	r2, r5
    1aec:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    1aee:	2203      	movs	r2, #3
    1af0:	2103      	movs	r1, #3
    1af2:	0020      	movs	r0, r4
    1af4:	4f09      	ldr	r7, [pc, #36]	; (1b1c <mag_icm20948_read+0x54>)
    1af6:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    1af8:	4809      	ldr	r0, [pc, #36]	; (1b20 <mag_icm20948_read+0x58>)
    1afa:	4b0a      	ldr	r3, [pc, #40]	; (1b24 <mag_icm20948_read+0x5c>)
    1afc:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1afe:	2100      	movs	r1, #0
    1b00:	0020      	movs	r0, r4
    1b02:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    1b04:	4643      	mov	r3, r8
    1b06:	002a      	movs	r2, r5
    1b08:	213b      	movs	r1, #59	; 0x3b
    1b0a:	0020      	movs	r0, r4
    1b0c:	4c06      	ldr	r4, [pc, #24]	; (1b28 <mag_icm20948_read+0x60>)
    1b0e:	47a0      	blx	r4
}
    1b10:	b002      	add	sp, #8
    1b12:	bc80      	pop	{r7}
    1b14:	46b8      	mov	r8, r7
    1b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b18:	000019d1 	.word	0x000019d1
    1b1c:	00001899 	.word	0x00001899
    1b20:	00001770 	.word	0x00001770
    1b24:	00002199 	.word	0x00002199
    1b28:	00001931 	.word	0x00001931

00001b2c <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    1b2c:	b570      	push	{r4, r5, r6, lr}
    1b2e:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1b30:	2100      	movs	r1, #0
    1b32:	4e10      	ldr	r6, [pc, #64]	; (1b74 <mag_icm20948_init+0x48>)
    1b34:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    1b36:	2220      	movs	r2, #32
    1b38:	2103      	movs	r1, #3
    1b3a:	0020      	movs	r0, r4
    1b3c:	4d0e      	ldr	r5, [pc, #56]	; (1b78 <mag_icm20948_init+0x4c>)
    1b3e:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1b40:	2103      	movs	r1, #3
    1b42:	0020      	movs	r0, r4
    1b44:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    1b46:	2207      	movs	r2, #7
    1b48:	2101      	movs	r1, #1
    1b4a:	0020      	movs	r0, r4
    1b4c:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    1b4e:	2201      	movs	r2, #1
    1b50:	2102      	movs	r1, #2
    1b52:	0020      	movs	r0, r4
    1b54:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    1b56:	4809      	ldr	r0, [pc, #36]	; (1b7c <mag_icm20948_init+0x50>)
    1b58:	4b09      	ldr	r3, [pc, #36]	; (1b80 <mag_icm20948_init+0x54>)
    1b5a:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    1b5c:	2201      	movs	r2, #1
    1b5e:	2132      	movs	r1, #50	; 0x32
    1b60:	0020      	movs	r0, r4
    1b62:	4d08      	ldr	r5, [pc, #32]	; (1b84 <mag_icm20948_init+0x58>)
    1b64:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    1b66:	2208      	movs	r2, #8
    1b68:	2131      	movs	r1, #49	; 0x31
    1b6a:	0020      	movs	r0, r4
    1b6c:	47a8      	blx	r5
	
	return true;
}
    1b6e:	2001      	movs	r0, #1
    1b70:	bd70      	pop	{r4, r5, r6, pc}
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	000019d1 	.word	0x000019d1
    1b78:	00001795 	.word	0x00001795
    1b7c:	00001770 	.word	0x00001770
    1b80:	00002199 	.word	0x00002199
    1b84:	00001a81 	.word	0x00001a81

00001b88 <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1b88:	b530      	push	{r4, r5, lr}
    1b8a:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    1b8c:	ac01      	add	r4, sp, #4
    1b8e:	0023      	movs	r3, r4
    1b90:	2202      	movs	r2, #2
    1b92:	2100      	movs	r1, #0
    1b94:	4d07      	ldr	r5, [pc, #28]	; (1bb4 <mag_icm20948_check+0x2c>)
    1b96:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1b98:	7823      	ldrb	r3, [r4, #0]
    1b9a:	2b48      	cmp	r3, #72	; 0x48
    1b9c:	d104      	bne.n	1ba8 <mag_icm20948_check+0x20>
    1b9e:	7863      	ldrb	r3, [r4, #1]
    1ba0:	2b09      	cmp	r3, #9
    1ba2:	d004      	beq.n	1bae <mag_icm20948_check+0x26>
	else return false;
    1ba4:	2000      	movs	r0, #0
    1ba6:	e000      	b.n	1baa <mag_icm20948_check+0x22>
    1ba8:	2000      	movs	r0, #0
    1baa:	b003      	add	sp, #12
    1bac:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1bae:	2001      	movs	r0, #1
    1bb0:	e7fb      	b.n	1baa <mag_icm20948_check+0x22>
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	00001ac9 	.word	0x00001ac9

00001bb8 <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    1bb8:	01c0      	lsls	r0, r0, #7
    1bba:	4b02      	ldr	r3, [pc, #8]	; (1bc4 <port_set_output+0xc>)
    1bbc:	469c      	mov	ip, r3
    1bbe:	4460      	add	r0, ip
    1bc0:	6081      	str	r1, [r0, #8]
}
    1bc2:	4770      	bx	lr
    1bc4:	41004400 	.word	0x41004400

00001bc8 <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    1bc8:	01c0      	lsls	r0, r0, #7
    1bca:	4b02      	ldr	r3, [pc, #8]	; (1bd4 <port_set+0xc>)
    1bcc:	469c      	mov	ip, r3
    1bce:	4460      	add	r0, ip
    1bd0:	6181      	str	r1, [r0, #24]
}
    1bd2:	4770      	bx	lr
    1bd4:	41004400 	.word	0x41004400

00001bd8 <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    1bd8:	01c0      	lsls	r0, r0, #7
    1bda:	4b02      	ldr	r3, [pc, #8]	; (1be4 <port_clear+0xc>)
    1bdc:	469c      	mov	ip, r3
    1bde:	4460      	add	r0, ip
    1be0:	6141      	str	r1, [r0, #20]
}
    1be2:	4770      	bx	lr
    1be4:	41004400 	.word	0x41004400

00001be8 <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    1be8:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    1bea:	060b      	lsls	r3, r1, #24
    1bec:	21f0      	movs	r1, #240	; 0xf0
    1bee:	0509      	lsls	r1, r1, #20
    1bf0:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    1bf2:	490e      	ldr	r1, [pc, #56]	; (1c2c <port_wrconfig+0x44>)
    1bf4:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    1bf6:	0413      	lsls	r3, r2, #16
    1bf8:	0c1c      	lsrs	r4, r3, #16
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d005      	beq.n	1c0a <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    1bfe:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1c00:	01c3      	lsls	r3, r0, #7
    1c02:	4c0b      	ldr	r4, [pc, #44]	; (1c30 <port_wrconfig+0x48>)
    1c04:	46a4      	mov	ip, r4
    1c06:	4463      	add	r3, ip
    1c08:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    1c0a:	2380      	movs	r3, #128	; 0x80
    1c0c:	025b      	lsls	r3, r3, #9
    1c0e:	429a      	cmp	r2, r3
    1c10:	d30b      	bcc.n	1c2a <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    1c12:	0c09      	lsrs	r1, r1, #16
    1c14:	0409      	lsls	r1, r1, #16
    1c16:	2380      	movs	r3, #128	; 0x80
    1c18:	061b      	lsls	r3, r3, #24
    1c1a:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    1c1c:	0c12      	lsrs	r2, r2, #16
    1c1e:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1c20:	01c0      	lsls	r0, r0, #7
    1c22:	4b03      	ldr	r3, [pc, #12]	; (1c30 <port_wrconfig+0x48>)
    1c24:	469c      	mov	ip, r3
    1c26:	4460      	add	r0, ip
    1c28:	6282      	str	r2, [r0, #40]	; 0x28
	}
    1c2a:	bd10      	pop	{r4, pc}
    1c2c:	50010000 	.word	0x50010000
    1c30:	41004400 	.word	0x41004400

00001c34 <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    1c34:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    1c36:	4c2a      	ldr	r4, [pc, #168]	; (1ce0 <pwm_init_tc+0xac>)
    1c38:	42a0      	cmp	r0, r4
    1c3a:	d03c      	beq.n	1cb6 <pwm_init_tc+0x82>
    1c3c:	d90f      	bls.n	1c5e <pwm_init_tc+0x2a>
    1c3e:	4c29      	ldr	r4, [pc, #164]	; (1ce4 <pwm_init_tc+0xb0>)
    1c40:	42a0      	cmp	r0, r4
    1c42:	d042      	beq.n	1cca <pwm_init_tc+0x96>
    1c44:	4c28      	ldr	r4, [pc, #160]	; (1ce8 <pwm_init_tc+0xb4>)
    1c46:	42a0      	cmp	r0, r4
    1c48:	d11b      	bne.n	1c82 <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    1c4a:	4a28      	ldr	r2, [pc, #160]	; (1cec <pwm_init_tc+0xb8>)
    1c4c:	6a14      	ldr	r4, [r2, #32]
    1c4e:	2380      	movs	r3, #128	; 0x80
    1c50:	021b      	lsls	r3, r3, #8
    1c52:	4323      	orrs	r3, r4
    1c54:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1c56:	4b26      	ldr	r3, [pc, #152]	; (1cf0 <pwm_init_tc+0xbc>)
    1c58:	4a26      	ldr	r2, [pc, #152]	; (1cf4 <pwm_init_tc+0xc0>)
    1c5a:	805a      	strh	r2, [r3, #2]
		break;
    1c5c:	e01c      	b.n	1c98 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1c5e:	4c26      	ldr	r4, [pc, #152]	; (1cf8 <pwm_init_tc+0xc4>)
    1c60:	42a0      	cmp	r0, r4
    1c62:	d010      	beq.n	1c86 <pwm_init_tc+0x52>
    1c64:	4c25      	ldr	r4, [pc, #148]	; (1cfc <pwm_init_tc+0xc8>)
    1c66:	42a0      	cmp	r0, r4
    1c68:	d109      	bne.n	1c7e <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    1c6a:	4a20      	ldr	r2, [pc, #128]	; (1cec <pwm_init_tc+0xb8>)
    1c6c:	6a14      	ldr	r4, [r2, #32]
    1c6e:	2380      	movs	r3, #128	; 0x80
    1c70:	015b      	lsls	r3, r3, #5
    1c72:	4323      	orrs	r3, r4
    1c74:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1c76:	4b1e      	ldr	r3, [pc, #120]	; (1cf0 <pwm_init_tc+0xbc>)
    1c78:	4a21      	ldr	r2, [pc, #132]	; (1d00 <pwm_init_tc+0xcc>)
    1c7a:	805a      	strh	r2, [r3, #2]
		break;
    1c7c:	e00c      	b.n	1c98 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1c7e:	2000      	movs	r0, #0
    1c80:	e018      	b.n	1cb4 <pwm_init_tc+0x80>
    1c82:	2000      	movs	r0, #0
    1c84:	e016      	b.n	1cb4 <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    1c86:	4a19      	ldr	r2, [pc, #100]	; (1cec <pwm_init_tc+0xb8>)
    1c88:	6a14      	ldr	r4, [r2, #32]
    1c8a:	2380      	movs	r3, #128	; 0x80
    1c8c:	011b      	lsls	r3, r3, #4
    1c8e:	4323      	orrs	r3, r4
    1c90:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    1c92:	4b17      	ldr	r3, [pc, #92]	; (1cf0 <pwm_init_tc+0xbc>)
    1c94:	4a1b      	ldr	r2, [pc, #108]	; (1d04 <pwm_init_tc+0xd0>)
    1c96:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1c98:	4b15      	ldr	r3, [pc, #84]	; (1cf0 <pwm_init_tc+0xbc>)
    1c9a:	785b      	ldrb	r3, [r3, #1]
    1c9c:	b25b      	sxtb	r3, r3
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	dbfa      	blt.n	1c98 <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    1ca2:	020b      	lsls	r3, r1, #8
    1ca4:	22e0      	movs	r2, #224	; 0xe0
    1ca6:	00d2      	lsls	r2, r2, #3
    1ca8:	4013      	ands	r3, r2
    1caa:	2244      	movs	r2, #68	; 0x44
    1cac:	4313      	orrs	r3, r2
    1cae:	b29b      	uxth	r3, r3
    1cb0:	8003      	strh	r3, [r0, #0]
	
	return true;
    1cb2:	2001      	movs	r0, #1
}
    1cb4:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    1cb6:	4a0d      	ldr	r2, [pc, #52]	; (1cec <pwm_init_tc+0xb8>)
    1cb8:	6a14      	ldr	r4, [r2, #32]
    1cba:	2380      	movs	r3, #128	; 0x80
    1cbc:	019b      	lsls	r3, r3, #6
    1cbe:	4323      	orrs	r3, r4
    1cc0:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1cc2:	4b0b      	ldr	r3, [pc, #44]	; (1cf0 <pwm_init_tc+0xbc>)
    1cc4:	4a0e      	ldr	r2, [pc, #56]	; (1d00 <pwm_init_tc+0xcc>)
    1cc6:	805a      	strh	r2, [r3, #2]
		break;
    1cc8:	e7e6      	b.n	1c98 <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    1cca:	4a08      	ldr	r2, [pc, #32]	; (1cec <pwm_init_tc+0xb8>)
    1ccc:	6a14      	ldr	r4, [r2, #32]
    1cce:	2380      	movs	r3, #128	; 0x80
    1cd0:	01db      	lsls	r3, r3, #7
    1cd2:	4323      	orrs	r3, r4
    1cd4:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1cd6:	4b06      	ldr	r3, [pc, #24]	; (1cf0 <pwm_init_tc+0xbc>)
    1cd8:	4a06      	ldr	r2, [pc, #24]	; (1cf4 <pwm_init_tc+0xc0>)
    1cda:	805a      	strh	r2, [r3, #2]
		break;
    1cdc:	e7dc      	b.n	1c98 <pwm_init_tc+0x64>
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	42003400 	.word	0x42003400
    1ce4:	42003800 	.word	0x42003800
    1ce8:	42003c00 	.word	0x42003c00
    1cec:	40000400 	.word	0x40000400
    1cf0:	40000c00 	.word	0x40000c00
    1cf4:	0000401d 	.word	0x0000401d
    1cf8:	42002c00 	.word	0x42002c00
    1cfc:	42003000 	.word	0x42003000
    1d00:	0000401c 	.word	0x0000401c
    1d04:	0000401b 	.word	0x0000401b

00001d08 <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    1d08:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <pwm_enable_tc+0x40>)
    1d0a:	4290      	cmp	r0, r2
    1d0c:	d010      	beq.n	1d30 <pwm_enable_tc+0x28>
    1d0e:	d807      	bhi.n	1d20 <pwm_enable_tc+0x18>
    1d10:	4a0e      	ldr	r2, [pc, #56]	; (1d4c <pwm_enable_tc+0x44>)
    1d12:	4290      	cmp	r0, r2
    1d14:	d00c      	beq.n	1d30 <pwm_enable_tc+0x28>
    1d16:	4a0e      	ldr	r2, [pc, #56]	; (1d50 <pwm_enable_tc+0x48>)
    1d18:	4290      	cmp	r0, r2
    1d1a:	d009      	beq.n	1d30 <pwm_enable_tc+0x28>
    1d1c:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    1d1e:	4770      	bx	lr
	switch ((uint32_t)tc) {
    1d20:	4a0c      	ldr	r2, [pc, #48]	; (1d54 <pwm_enable_tc+0x4c>)
    1d22:	4290      	cmp	r0, r2
    1d24:	d004      	beq.n	1d30 <pwm_enable_tc+0x28>
    1d26:	4a0c      	ldr	r2, [pc, #48]	; (1d58 <pwm_enable_tc+0x50>)
    1d28:	4290      	cmp	r0, r2
    1d2a:	d001      	beq.n	1d30 <pwm_enable_tc+0x28>
    1d2c:	2000      	movs	r0, #0
    1d2e:	e7f6      	b.n	1d1e <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    1d30:	8803      	ldrh	r3, [r0, #0]
    1d32:	2202      	movs	r2, #2
    1d34:	4313      	orrs	r3, r2
    1d36:	b29b      	uxth	r3, r3
    1d38:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1d3a:	7bc3      	ldrb	r3, [r0, #15]
    1d3c:	b25b      	sxtb	r3, r3
    1d3e:	2b00      	cmp	r3, #0
    1d40:	dbfb      	blt.n	1d3a <pwm_enable_tc+0x32>
	return true;
    1d42:	2001      	movs	r0, #1
    1d44:	e7eb      	b.n	1d1e <pwm_enable_tc+0x16>
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	42003400 	.word	0x42003400
    1d4c:	42002c00 	.word	0x42002c00
    1d50:	42003000 	.word	0x42003000
    1d54:	42003800 	.word	0x42003800
    1d58:	42003c00 	.word	0x42003c00

00001d5c <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    1d5c:	2307      	movs	r3, #7
    1d5e:	4018      	ands	r0, r3
	switch (prescaler) {
    1d60:	2807      	cmp	r0, #7
    1d62:	d813      	bhi.n	1d8c <pwm_get_div_val+0x30>
    1d64:	0080      	lsls	r0, r0, #2
    1d66:	4b0b      	ldr	r3, [pc, #44]	; (1d94 <pwm_get_div_val+0x38>)
    1d68:	581b      	ldr	r3, [r3, r0]
    1d6a:	469f      	mov	pc, r3
    1d6c:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    1d6e:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    1d70:	2004      	movs	r0, #4
    1d72:	e7fc      	b.n	1d6e <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    1d74:	2008      	movs	r0, #8
    1d76:	e7fa      	b.n	1d6e <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    1d78:	2010      	movs	r0, #16
    1d7a:	e7f8      	b.n	1d6e <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    1d7c:	2040      	movs	r0, #64	; 0x40
    1d7e:	e7f6      	b.n	1d6e <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    1d80:	2080      	movs	r0, #128	; 0x80
    1d82:	0040      	lsls	r0, r0, #1
    1d84:	e7f3      	b.n	1d6e <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    1d86:	2080      	movs	r0, #128	; 0x80
    1d88:	00c0      	lsls	r0, r0, #3
    1d8a:	e7f0      	b.n	1d6e <pwm_get_div_val+0x12>
	return 0;
    1d8c:	2000      	movs	r0, #0
    1d8e:	e7ee      	b.n	1d6e <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    1d90:	2002      	movs	r0, #2
    1d92:	e7ec      	b.n	1d6e <pwm_get_div_val+0x12>
    1d94:	00005650 	.word	0x00005650

00001d98 <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    1d98:	b570      	push	{r4, r5, r6, lr}
    1d9a:	0004      	movs	r4, r0
    1d9c:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    1d9e:	4a16      	ldr	r2, [pc, #88]	; (1df8 <pwm_set_frequency_tc+0x60>)
    1da0:	4290      	cmp	r0, r2
    1da2:	d010      	beq.n	1dc6 <pwm_set_frequency_tc+0x2e>
    1da4:	d807      	bhi.n	1db6 <pwm_set_frequency_tc+0x1e>
    1da6:	4a15      	ldr	r2, [pc, #84]	; (1dfc <pwm_set_frequency_tc+0x64>)
    1da8:	4290      	cmp	r0, r2
    1daa:	d00c      	beq.n	1dc6 <pwm_set_frequency_tc+0x2e>
    1dac:	4a14      	ldr	r2, [pc, #80]	; (1e00 <pwm_set_frequency_tc+0x68>)
    1dae:	4290      	cmp	r0, r2
    1db0:	d009      	beq.n	1dc6 <pwm_set_frequency_tc+0x2e>
    1db2:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    1db4:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    1db6:	4a13      	ldr	r2, [pc, #76]	; (1e04 <pwm_set_frequency_tc+0x6c>)
    1db8:	4290      	cmp	r0, r2
    1dba:	d004      	beq.n	1dc6 <pwm_set_frequency_tc+0x2e>
    1dbc:	4a12      	ldr	r2, [pc, #72]	; (1e08 <pwm_set_frequency_tc+0x70>)
    1dbe:	4290      	cmp	r0, r2
    1dc0:	d001      	beq.n	1dc6 <pwm_set_frequency_tc+0x2e>
    1dc2:	2000      	movs	r0, #0
    1dc4:	e7f6      	b.n	1db4 <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    1dc6:	8823      	ldrh	r3, [r4, #0]
    1dc8:	0a1b      	lsrs	r3, r3, #8
    1dca:	2007      	movs	r0, #7
    1dcc:	4018      	ands	r0, r3
    1dce:	4b0f      	ldr	r3, [pc, #60]	; (1e0c <pwm_set_frequency_tc+0x74>)
    1dd0:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    1dd2:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <pwm_set_frequency_tc+0x78>)
    1dd4:	4798      	blx	r3
    1dd6:	4b0f      	ldr	r3, [pc, #60]	; (1e14 <pwm_set_frequency_tc+0x7c>)
    1dd8:	1c29      	adds	r1, r5, #0
    1dda:	4798      	blx	r3
    1ddc:	1c01      	adds	r1, r0, #0
    1dde:	4b0e      	ldr	r3, [pc, #56]	; (1e18 <pwm_set_frequency_tc+0x80>)
    1de0:	480e      	ldr	r0, [pc, #56]	; (1e1c <pwm_set_frequency_tc+0x84>)
    1de2:	4798      	blx	r3
    1de4:	4b0e      	ldr	r3, [pc, #56]	; (1e20 <pwm_set_frequency_tc+0x88>)
    1de6:	4798      	blx	r3
	if (per > 0xFF) return false;
    1de8:	28ff      	cmp	r0, #255	; 0xff
    1dea:	d803      	bhi.n	1df4 <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    1dec:	b2c0      	uxtb	r0, r0
    1dee:	7520      	strb	r0, [r4, #20]
	return true;
    1df0:	2001      	movs	r0, #1
    1df2:	e7df      	b.n	1db4 <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    1df4:	2000      	movs	r0, #0
    1df6:	e7dd      	b.n	1db4 <pwm_set_frequency_tc+0x1c>
    1df8:	42003400 	.word	0x42003400
    1dfc:	42002c00 	.word	0x42002c00
    1e00:	42003000 	.word	0x42003000
    1e04:	42003800 	.word	0x42003800
    1e08:	42003c00 	.word	0x42003c00
    1e0c:	00001d5d 	.word	0x00001d5d
    1e10:	00004fa5 	.word	0x00004fa5
    1e14:	000049c5 	.word	0x000049c5
    1e18:	000045f9 	.word	0x000045f9
    1e1c:	4c371b00 	.word	0x4c371b00
    1e20:	000042c5 	.word	0x000042c5

00001e24 <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    1e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e26:	0004      	movs	r4, r0
    1e28:	000e      	movs	r6, r1
    1e2a:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    1e2c:	4a1b      	ldr	r2, [pc, #108]	; (1e9c <pwm_set_duty_tc+0x78>)
    1e2e:	4290      	cmp	r0, r2
    1e30:	d010      	beq.n	1e54 <pwm_set_duty_tc+0x30>
    1e32:	d807      	bhi.n	1e44 <pwm_set_duty_tc+0x20>
    1e34:	4a1a      	ldr	r2, [pc, #104]	; (1ea0 <pwm_set_duty_tc+0x7c>)
    1e36:	4290      	cmp	r0, r2
    1e38:	d00c      	beq.n	1e54 <pwm_set_duty_tc+0x30>
    1e3a:	4a1a      	ldr	r2, [pc, #104]	; (1ea4 <pwm_set_duty_tc+0x80>)
    1e3c:	4290      	cmp	r0, r2
    1e3e:	d009      	beq.n	1e54 <pwm_set_duty_tc+0x30>
    1e40:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    1e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    1e44:	4a18      	ldr	r2, [pc, #96]	; (1ea8 <pwm_set_duty_tc+0x84>)
    1e46:	4290      	cmp	r0, r2
    1e48:	d004      	beq.n	1e54 <pwm_set_duty_tc+0x30>
    1e4a:	4a18      	ldr	r2, [pc, #96]	; (1eac <pwm_set_duty_tc+0x88>)
    1e4c:	4290      	cmp	r0, r2
    1e4e:	d001      	beq.n	1e54 <pwm_set_duty_tc+0x30>
    1e50:	2000      	movs	r0, #0
    1e52:	e7f6      	b.n	1e42 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1e54:	4b16      	ldr	r3, [pc, #88]	; (1eb0 <pwm_set_duty_tc+0x8c>)
    1e56:	2100      	movs	r1, #0
    1e58:	1c28      	adds	r0, r5, #0
    1e5a:	4798      	blx	r3
    1e5c:	2800      	cmp	r0, #0
    1e5e:	d11b      	bne.n	1e98 <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    1e60:	4b14      	ldr	r3, [pc, #80]	; (1eb4 <pwm_set_duty_tc+0x90>)
    1e62:	21fe      	movs	r1, #254	; 0xfe
    1e64:	0589      	lsls	r1, r1, #22
    1e66:	1c28      	adds	r0, r5, #0
    1e68:	4798      	blx	r3
    1e6a:	2800      	cmp	r0, #0
    1e6c:	d001      	beq.n	1e72 <pwm_set_duty_tc+0x4e>
    1e6e:	25fe      	movs	r5, #254	; 0xfe
    1e70:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    1e72:	7d27      	ldrb	r7, [r4, #20]
    1e74:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    1e76:	4b10      	ldr	r3, [pc, #64]	; (1eb8 <pwm_set_duty_tc+0x94>)
    1e78:	0038      	movs	r0, r7
    1e7a:	4798      	blx	r3
    1e7c:	4b0f      	ldr	r3, [pc, #60]	; (1ebc <pwm_set_duty_tc+0x98>)
    1e7e:	1c29      	adds	r1, r5, #0
    1e80:	4798      	blx	r3
    1e82:	4b0f      	ldr	r3, [pc, #60]	; (1ec0 <pwm_set_duty_tc+0x9c>)
    1e84:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    1e86:	003b      	movs	r3, r7
    1e88:	4287      	cmp	r7, r0
    1e8a:	d300      	bcc.n	1e8e <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    1e8c:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    1e8e:	b2db      	uxtb	r3, r3
    1e90:	19a4      	adds	r4, r4, r6
    1e92:	7623      	strb	r3, [r4, #24]
	return true;
    1e94:	2001      	movs	r0, #1
    1e96:	e7d4      	b.n	1e42 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1e98:	2500      	movs	r5, #0
    1e9a:	e7e1      	b.n	1e60 <pwm_set_duty_tc+0x3c>
    1e9c:	42003400 	.word	0x42003400
    1ea0:	42002c00 	.word	0x42002c00
    1ea4:	42003000 	.word	0x42003000
    1ea8:	42003800 	.word	0x42003800
    1eac:	42003c00 	.word	0x42003c00
    1eb0:	00004219 	.word	0x00004219
    1eb4:	00004241 	.word	0x00004241
    1eb8:	00004fa5 	.word	0x00004fa5
    1ebc:	000049c5 	.word	0x000049c5
    1ec0:	000042c5 	.word	0x000042c5

00001ec4 <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    1ec4:	4b11      	ldr	r3, [pc, #68]	; (1f0c <sercom_check+0x48>)
    1ec6:	4298      	cmp	r0, r3
    1ec8:	d017      	beq.n	1efa <sercom_check+0x36>
    1eca:	d80c      	bhi.n	1ee6 <sercom_check+0x22>
    1ecc:	4b10      	ldr	r3, [pc, #64]	; (1f10 <sercom_check+0x4c>)
    1ece:	4298      	cmp	r0, r3
    1ed0:	d015      	beq.n	1efe <sercom_check+0x3a>
    1ed2:	4b10      	ldr	r3, [pc, #64]	; (1f14 <sercom_check+0x50>)
    1ed4:	4298      	cmp	r0, r3
    1ed6:	d014      	beq.n	1f02 <sercom_check+0x3e>
    1ed8:	4b0f      	ldr	r3, [pc, #60]	; (1f18 <sercom_check+0x54>)
    1eda:	4298      	cmp	r0, r3
    1edc:	d001      	beq.n	1ee2 <sercom_check+0x1e>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    1ede:	2000      	movs	r0, #0
		break;
	}
}
    1ee0:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    1ee2:	2001      	movs	r0, #1
    1ee4:	e7fc      	b.n	1ee0 <sercom_check+0x1c>
    1ee6:	4b0d      	ldr	r3, [pc, #52]	; (1f1c <sercom_check+0x58>)
    1ee8:	4298      	cmp	r0, r3
    1eea:	d00c      	beq.n	1f06 <sercom_check+0x42>
    1eec:	4b0c      	ldr	r3, [pc, #48]	; (1f20 <sercom_check+0x5c>)
    1eee:	4298      	cmp	r0, r3
    1ef0:	d001      	beq.n	1ef6 <sercom_check+0x32>
		return false;
    1ef2:	2000      	movs	r0, #0
    1ef4:	e7f4      	b.n	1ee0 <sercom_check+0x1c>
	switch ((uint32_t)sercom) {
    1ef6:	2001      	movs	r0, #1
    1ef8:	e7f2      	b.n	1ee0 <sercom_check+0x1c>
    1efa:	2001      	movs	r0, #1
    1efc:	e7f0      	b.n	1ee0 <sercom_check+0x1c>
    1efe:	2001      	movs	r0, #1
    1f00:	e7ee      	b.n	1ee0 <sercom_check+0x1c>
    1f02:	2001      	movs	r0, #1
    1f04:	e7ec      	b.n	1ee0 <sercom_check+0x1c>
    1f06:	2001      	movs	r0, #1
    1f08:	e7ea      	b.n	1ee0 <sercom_check+0x1c>
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	42001400 	.word	0x42001400
    1f10:	42000c00 	.word	0x42000c00
    1f14:	42001000 	.word	0x42001000
    1f18:	42000800 	.word	0x42000800
    1f1c:	42001800 	.word	0x42001800
    1f20:	42001c00 	.word	0x42001c00

00001f24 <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    1f24:	4b29      	ldr	r3, [pc, #164]	; (1fcc <sercom_init+0xa8>)
    1f26:	4298      	cmp	r0, r3
    1f28:	d03d      	beq.n	1fa6 <sercom_init+0x82>
    1f2a:	d822      	bhi.n	1f72 <sercom_init+0x4e>
    1f2c:	4b28      	ldr	r3, [pc, #160]	; (1fd0 <sercom_init+0xac>)
    1f2e:	4298      	cmp	r0, r3
    1f30:	d030      	beq.n	1f94 <sercom_init+0x70>
    1f32:	4b28      	ldr	r3, [pc, #160]	; (1fd4 <sercom_init+0xb0>)
    1f34:	4298      	cmp	r0, r3
    1f36:	d108      	bne.n	1f4a <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    1f38:	4a27      	ldr	r2, [pc, #156]	; (1fd8 <sercom_init+0xb4>)
    1f3a:	6a13      	ldr	r3, [r2, #32]
    1f3c:	2110      	movs	r1, #16
    1f3e:	430b      	orrs	r3, r1
    1f40:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    1f42:	4b26      	ldr	r3, [pc, #152]	; (1fdc <sercom_init+0xb8>)
    1f44:	4a26      	ldr	r2, [pc, #152]	; (1fe0 <sercom_init+0xbc>)
    1f46:	805a      	strh	r2, [r3, #2]
		break;
    1f48:	e00a      	b.n	1f60 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    1f4a:	4b26      	ldr	r3, [pc, #152]	; (1fe4 <sercom_init+0xc0>)
    1f4c:	4298      	cmp	r0, r3
    1f4e:	d10e      	bne.n	1f6e <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    1f50:	4a21      	ldr	r2, [pc, #132]	; (1fd8 <sercom_init+0xb4>)
    1f52:	6a13      	ldr	r3, [r2, #32]
    1f54:	2104      	movs	r1, #4
    1f56:	430b      	orrs	r3, r1
    1f58:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    1f5a:	4b20      	ldr	r3, [pc, #128]	; (1fdc <sercom_init+0xb8>)
    1f5c:	4a22      	ldr	r2, [pc, #136]	; (1fe8 <sercom_init+0xc4>)
    1f5e:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1f60:	4b1e      	ldr	r3, [pc, #120]	; (1fdc <sercom_init+0xb8>)
    1f62:	785b      	ldrb	r3, [r3, #1]
    1f64:	b25b      	sxtb	r3, r3
    1f66:	2b00      	cmp	r3, #0
    1f68:	dbfa      	blt.n	1f60 <sercom_init+0x3c>
	
	return true;
    1f6a:	2001      	movs	r0, #1
    1f6c:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    1f6e:	2000      	movs	r0, #0
    1f70:	e7fc      	b.n	1f6c <sercom_init+0x48>
    1f72:	4b1e      	ldr	r3, [pc, #120]	; (1fec <sercom_init+0xc8>)
    1f74:	4298      	cmp	r0, r3
    1f76:	d01f      	beq.n	1fb8 <sercom_init+0x94>
    1f78:	4b1d      	ldr	r3, [pc, #116]	; (1ff0 <sercom_init+0xcc>)
    1f7a:	4298      	cmp	r0, r3
    1f7c:	d108      	bne.n	1f90 <sercom_init+0x6c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    1f7e:	4a16      	ldr	r2, [pc, #88]	; (1fd8 <sercom_init+0xb4>)
    1f80:	6a13      	ldr	r3, [r2, #32]
    1f82:	2180      	movs	r1, #128	; 0x80
    1f84:	430b      	orrs	r3, r1
    1f86:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    1f88:	4b14      	ldr	r3, [pc, #80]	; (1fdc <sercom_init+0xb8>)
    1f8a:	4a1a      	ldr	r2, [pc, #104]	; (1ff4 <sercom_init+0xd0>)
    1f8c:	805a      	strh	r2, [r3, #2]
		break;
    1f8e:	e7e7      	b.n	1f60 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    1f90:	2000      	movs	r0, #0
    1f92:	e7eb      	b.n	1f6c <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    1f94:	4a10      	ldr	r2, [pc, #64]	; (1fd8 <sercom_init+0xb4>)
    1f96:	6a13      	ldr	r3, [r2, #32]
    1f98:	2108      	movs	r1, #8
    1f9a:	430b      	orrs	r3, r1
    1f9c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    1f9e:	4b0f      	ldr	r3, [pc, #60]	; (1fdc <sercom_init+0xb8>)
    1fa0:	4a15      	ldr	r2, [pc, #84]	; (1ff8 <sercom_init+0xd4>)
    1fa2:	805a      	strh	r2, [r3, #2]
		break;
    1fa4:	e7dc      	b.n	1f60 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    1fa6:	4a0c      	ldr	r2, [pc, #48]	; (1fd8 <sercom_init+0xb4>)
    1fa8:	6a13      	ldr	r3, [r2, #32]
    1faa:	2120      	movs	r1, #32
    1fac:	430b      	orrs	r3, r1
    1fae:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    1fb0:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <sercom_init+0xb8>)
    1fb2:	4a12      	ldr	r2, [pc, #72]	; (1ffc <sercom_init+0xd8>)
    1fb4:	805a      	strh	r2, [r3, #2]
		break;
    1fb6:	e7d3      	b.n	1f60 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    1fb8:	4a07      	ldr	r2, [pc, #28]	; (1fd8 <sercom_init+0xb4>)
    1fba:	6a13      	ldr	r3, [r2, #32]
    1fbc:	2140      	movs	r1, #64	; 0x40
    1fbe:	430b      	orrs	r3, r1
    1fc0:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    1fc2:	4b06      	ldr	r3, [pc, #24]	; (1fdc <sercom_init+0xb8>)
    1fc4:	4a0e      	ldr	r2, [pc, #56]	; (2000 <STACK_SIZE>)
    1fc6:	805a      	strh	r2, [r3, #2]
		break;
    1fc8:	e7ca      	b.n	1f60 <sercom_init+0x3c>
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	42001400 	.word	0x42001400
    1fd0:	42000c00 	.word	0x42000c00
    1fd4:	42001000 	.word	0x42001000
    1fd8:	40000400 	.word	0x40000400
    1fdc:	40000c00 	.word	0x40000c00
    1fe0:	00004016 	.word	0x00004016
    1fe4:	42000800 	.word	0x42000800
    1fe8:	00004014 	.word	0x00004014
    1fec:	42001800 	.word	0x42001800
    1ff0:	42001c00 	.word	0x42001c00
    1ff4:	00004019 	.word	0x00004019
    1ff8:	00004015 	.word	0x00004015
    1ffc:	00004017 	.word	0x00004017
    2000:	00004018 	.word	0x00004018

00002004 <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2004:	b570      	push	{r4, r5, r6, lr}
    2006:	0006      	movs	r6, r0
    2008:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    200a:	4b0a      	ldr	r3, [pc, #40]	; (2034 <spi_set_baud+0x30>)
    200c:	4798      	blx	r3
    200e:	1e04      	subs	r4, r0, #0
    2010:	d00e      	beq.n	2030 <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    2012:	0068      	lsls	r0, r5, #1
    2014:	4b08      	ldr	r3, [pc, #32]	; (2038 <spi_set_baud+0x34>)
    2016:	4798      	blx	r3
    2018:	1c01      	adds	r1, r0, #0
    201a:	4b08      	ldr	r3, [pc, #32]	; (203c <spi_set_baud+0x38>)
    201c:	4808      	ldr	r0, [pc, #32]	; (2040 <spi_set_baud+0x3c>)
    201e:	4798      	blx	r3
    2020:	4b08      	ldr	r3, [pc, #32]	; (2044 <spi_set_baud+0x40>)
    2022:	21fe      	movs	r1, #254	; 0xfe
    2024:	0589      	lsls	r1, r1, #22
    2026:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    2028:	4b07      	ldr	r3, [pc, #28]	; (2048 <spi_set_baud+0x44>)
    202a:	4798      	blx	r3
    202c:	b2c0      	uxtb	r0, r0
    202e:	7330      	strb	r0, [r6, #12]
	return true;
}
    2030:	0020      	movs	r0, r4
    2032:	bd70      	pop	{r4, r5, r6, pc}
    2034:	00001ec5 	.word	0x00001ec5
    2038:	0000503d 	.word	0x0000503d
    203c:	000045f9 	.word	0x000045f9
    2040:	4c371b00 	.word	0x4c371b00
    2044:	00004c41 	.word	0x00004c41
    2048:	000042c5 	.word	0x000042c5

0000204c <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204e:	46ce      	mov	lr, r9
    2050:	4647      	mov	r7, r8
    2052:	b580      	push	{r7, lr}
    2054:	0004      	movs	r4, r0
    2056:	000d      	movs	r5, r1
    2058:	0017      	movs	r7, r2
    205a:	001e      	movs	r6, r3
    205c:	ab08      	add	r3, sp, #32
    205e:	781b      	ldrb	r3, [r3, #0]
    2060:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    2062:	4b12      	ldr	r3, [pc, #72]	; (20ac <spi_init+0x60>)
    2064:	4798      	blx	r3
    2066:	4680      	mov	r8, r0
    2068:	2800      	cmp	r0, #0
    206a:	d104      	bne.n	2076 <spi_init+0x2a>
}
    206c:	4640      	mov	r0, r8
    206e:	bcc0      	pop	{r6, r7}
    2070:	46b9      	mov	r9, r7
    2072:	46b0      	mov	r8, r6
    2074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    2076:	076d      	lsls	r5, r5, #29
    2078:	073f      	lsls	r7, r7, #28
    207a:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    207c:	0536      	lsls	r6, r6, #20
    207e:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    2080:	464b      	mov	r3, r9
    2082:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2084:	431d      	orrs	r5, r3
    2086:	230c      	movs	r3, #12
    2088:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    208a:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    208c:	2380      	movs	r3, #128	; 0x80
    208e:	029b      	lsls	r3, r3, #10
    2090:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    2092:	9909      	ldr	r1, [sp, #36]	; 0x24
    2094:	0020      	movs	r0, r4
    2096:	4b06      	ldr	r3, [pc, #24]	; (20b0 <spi_init+0x64>)
    2098:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    209a:	6823      	ldr	r3, [r4, #0]
    209c:	2202      	movs	r2, #2
    209e:	4313      	orrs	r3, r2
    20a0:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    20a2:	69e3      	ldr	r3, [r4, #28]
    20a4:	079b      	lsls	r3, r3, #30
    20a6:	d4fc      	bmi.n	20a2 <spi_init+0x56>
    20a8:	e7e0      	b.n	206c <spi_init+0x20>
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	00001f25 	.word	0x00001f25
    20b0:	00002005 	.word	0x00002005

000020b4 <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    20b4:	7e03      	ldrb	r3, [r0, #24]
    20b6:	07db      	lsls	r3, r3, #31
    20b8:	d5fc      	bpl.n	20b4 <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    20ba:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    20bc:	7e03      	ldrb	r3, [r0, #24]
    20be:	079b      	lsls	r3, r3, #30
    20c0:	d5fc      	bpl.n	20bc <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    20c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    20c4:	b2c0      	uxtb	r0, r0
}
    20c6:	4770      	bx	lr

000020c8 <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    20c8:	e000      	b.n	20cc <spi_flush+0x4>
    20ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
    20cc:	7e03      	ldrb	r3, [r0, #24]
    20ce:	075b      	lsls	r3, r3, #29
    20d0:	d4fb      	bmi.n	20ca <spi_flush+0x2>
    20d2:	4770      	bx	lr

000020d4 <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    20d4:	4a27      	ldr	r2, [pc, #156]	; (2174 <set_clock_48m+0xa0>)
    20d6:	6853      	ldr	r3, [r2, #4]
    20d8:	2102      	movs	r1, #2
    20da:	430b      	orrs	r3, r1
    20dc:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    20de:	4a26      	ldr	r2, [pc, #152]	; (2178 <set_clock_48m+0xa4>)
    20e0:	4b26      	ldr	r3, [pc, #152]	; (217c <set_clock_48m+0xa8>)
    20e2:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    20e4:	8a93      	ldrh	r3, [r2, #20]
    20e6:	430b      	orrs	r3, r1
    20e8:	b29b      	uxth	r3, r3
    20ea:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    20ec:	4b22      	ldr	r3, [pc, #136]	; (2178 <set_clock_48m+0xa4>)
    20ee:	68db      	ldr	r3, [r3, #12]
    20f0:	079b      	lsls	r3, r3, #30
    20f2:	d5fb      	bpl.n	20ec <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    20f4:	4b22      	ldr	r3, [pc, #136]	; (2180 <set_clock_48m+0xac>)
    20f6:	2202      	movs	r2, #2
    20f8:	32ff      	adds	r2, #255	; 0xff
    20fa:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    20fc:	4a21      	ldr	r2, [pc, #132]	; (2184 <set_clock_48m+0xb0>)
    20fe:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2100:	4b1f      	ldr	r3, [pc, #124]	; (2180 <set_clock_48m+0xac>)
    2102:	785b      	ldrb	r3, [r3, #1]
    2104:	b25b      	sxtb	r3, r3
    2106:	2b00      	cmp	r3, #0
    2108:	dbfa      	blt.n	2100 <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    210a:	4b1d      	ldr	r3, [pc, #116]	; (2180 <set_clock_48m+0xac>)
    210c:	2282      	movs	r2, #130	; 0x82
    210e:	01d2      	lsls	r2, r2, #7
    2110:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2112:	4b19      	ldr	r3, [pc, #100]	; (2178 <set_clock_48m+0xa4>)
    2114:	68db      	ldr	r3, [r3, #12]
    2116:	06db      	lsls	r3, r3, #27
    2118:	d5fb      	bpl.n	2112 <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    211a:	4b17      	ldr	r3, [pc, #92]	; (2178 <set_clock_48m+0xa4>)
    211c:	2202      	movs	r2, #2
    211e:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2120:	4b15      	ldr	r3, [pc, #84]	; (2178 <set_clock_48m+0xa4>)
    2122:	68db      	ldr	r3, [r3, #12]
    2124:	06db      	lsls	r3, r3, #27
    2126:	d5fb      	bpl.n	2120 <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    2128:	4b13      	ldr	r3, [pc, #76]	; (2178 <set_clock_48m+0xa4>)
    212a:	4a17      	ldr	r2, [pc, #92]	; (2188 <set_clock_48m+0xb4>)
    212c:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    212e:	4b12      	ldr	r3, [pc, #72]	; (2178 <set_clock_48m+0xa4>)
    2130:	68db      	ldr	r3, [r3, #12]
    2132:	06db      	lsls	r3, r3, #27
    2134:	d5fb      	bpl.n	212e <set_clock_48m+0x5a>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2136:	4b15      	ldr	r3, [pc, #84]	; (218c <set_clock_48m+0xb8>)
    2138:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    213a:	4b0f      	ldr	r3, [pc, #60]	; (2178 <set_clock_48m+0xa4>)
    213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    213e:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2140:	4b0d      	ldr	r3, [pc, #52]	; (2178 <set_clock_48m+0xa4>)
    2142:	68db      	ldr	r3, [r3, #12]
    2144:	06db      	lsls	r3, r3, #27
    2146:	d5fb      	bpl.n	2140 <set_clock_48m+0x6c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    2148:	4a0b      	ldr	r2, [pc, #44]	; (2178 <set_clock_48m+0xa4>)
    214a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    214c:	4910      	ldr	r1, [pc, #64]	; (2190 <set_clock_48m+0xbc>)
    214e:	430b      	orrs	r3, r1
    2150:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    2152:	4b09      	ldr	r3, [pc, #36]	; (2178 <set_clock_48m+0xa4>)
    2154:	68db      	ldr	r3, [r3, #12]
    2156:	061b      	lsls	r3, r3, #24
    2158:	d5fb      	bpl.n	2152 <set_clock_48m+0x7e>
    215a:	4b07      	ldr	r3, [pc, #28]	; (2178 <set_clock_48m+0xa4>)
    215c:	68db      	ldr	r3, [r3, #12]
    215e:	065b      	lsls	r3, r3, #25
    2160:	d5f7      	bpl.n	2152 <set_clock_48m+0x7e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    2162:	4b07      	ldr	r3, [pc, #28]	; (2180 <set_clock_48m+0xac>)
    2164:	4a0b      	ldr	r2, [pc, #44]	; (2194 <set_clock_48m+0xc0>)
    2166:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2168:	4b05      	ldr	r3, [pc, #20]	; (2180 <set_clock_48m+0xac>)
    216a:	785b      	ldrb	r3, [r3, #1]
    216c:	b25b      	sxtb	r3, r3
    216e:	2b00      	cmp	r3, #0
    2170:	dbfa      	blt.n	2168 <set_clock_48m+0x94>
}
    2172:	4770      	bx	lr
    2174:	41004000 	.word	0x41004000
    2178:	40000800 	.word	0x40000800
    217c:	0000040c 	.word	0x0000040c
    2180:	40000c00 	.word	0x40000c00
    2184:	00030501 	.word	0x00030501
    2188:	7dff05b9 	.word	0x7dff05b9
    218c:	00806020 	.word	0x00806020
    2190:	00000806 	.word	0x00000806
    2194:	00030700 	.word	0x00030700

00002198 <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    2198:	3801      	subs	r0, #1
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	46c0      	nop			; (mov r8, r8)
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	46c0      	nop			; (mov r8, r8)
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	d1f8      	bne.n	2198 <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    21a6:	4770      	bx	lr

000021a8 <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    21a8:	4a14      	ldr	r2, [pc, #80]	; (21fc <init_timer+0x54>)
    21aa:	6a11      	ldr	r1, [r2, #32]
    21ac:	2380      	movs	r3, #128	; 0x80
    21ae:	015b      	lsls	r3, r3, #5
    21b0:	430b      	orrs	r3, r1
    21b2:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    21b4:	4b12      	ldr	r3, [pc, #72]	; (2200 <init_timer+0x58>)
    21b6:	4a13      	ldr	r2, [pc, #76]	; (2204 <init_timer+0x5c>)
    21b8:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    21ba:	4b11      	ldr	r3, [pc, #68]	; (2200 <init_timer+0x58>)
    21bc:	785b      	ldrb	r3, [r3, #1]
    21be:	b25b      	sxtb	r3, r3
    21c0:	2b00      	cmp	r3, #0
    21c2:	dbfa      	blt.n	21ba <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    21c4:	4b10      	ldr	r3, [pc, #64]	; (2208 <init_timer+0x60>)
    21c6:	2208      	movs	r2, #8
    21c8:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    21ca:	4b0f      	ldr	r3, [pc, #60]	; (2208 <init_timer+0x60>)
    21cc:	7bdb      	ldrb	r3, [r3, #15]
    21ce:	b25b      	sxtb	r3, r3
    21d0:	2b00      	cmp	r3, #0
    21d2:	dbfa      	blt.n	21ca <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    21d4:	4a0c      	ldr	r2, [pc, #48]	; (2208 <init_timer+0x60>)
    21d6:	8813      	ldrh	r3, [r2, #0]
    21d8:	2102      	movs	r1, #2
    21da:	430b      	orrs	r3, r1
    21dc:	b29b      	uxth	r3, r3
    21de:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    21e0:	4b09      	ldr	r3, [pc, #36]	; (2208 <init_timer+0x60>)
    21e2:	7bdb      	ldrb	r3, [r3, #15]
    21e4:	b25b      	sxtb	r3, r3
    21e6:	2b00      	cmp	r3, #0
    21e8:	dbfa      	blt.n	21e0 <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    21ea:	4b07      	ldr	r3, [pc, #28]	; (2208 <init_timer+0x60>)
    21ec:	4a07      	ldr	r2, [pc, #28]	; (220c <init_timer+0x64>)
    21ee:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    21f0:	4b05      	ldr	r3, [pc, #20]	; (2208 <init_timer+0x60>)
    21f2:	7bdb      	ldrb	r3, [r3, #15]
    21f4:	b25b      	sxtb	r3, r3
    21f6:	2b00      	cmp	r3, #0
    21f8:	dbfa      	blt.n	21f0 <init_timer+0x48>
}
    21fa:	4770      	bx	lr
    21fc:	40000400 	.word	0x40000400
    2200:	40000c00 	.word	0x40000c00
    2204:	0000401c 	.word	0x0000401c
    2208:	42003000 	.word	0x42003000
    220c:	00004010 	.word	0x00004010

00002210 <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    2210:	4b01      	ldr	r3, [pc, #4]	; (2218 <read_timer_20ns+0x8>)
    2212:	6918      	ldr	r0, [r3, #16]
}
    2214:	4770      	bx	lr
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	42003000 	.word	0x42003000

0000221c <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    221c:	4b04      	ldr	r3, [pc, #16]	; (2230 <init_timer_interrupt+0x14>)
    221e:	2210      	movs	r2, #16
    2220:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2222:	4b03      	ldr	r3, [pc, #12]	; (2230 <init_timer_interrupt+0x14>)
    2224:	7bdb      	ldrb	r3, [r3, #15]
    2226:	b25b      	sxtb	r3, r3
    2228:	2b00      	cmp	r3, #0
    222a:	dbfa      	blt.n	2222 <init_timer_interrupt+0x6>
}
    222c:	4770      	bx	lr
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	42003000 	.word	0x42003000

00002234 <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2234:	4b02      	ldr	r3, [pc, #8]	; (2240 <timer_enable_interrupt+0xc>)
    2236:	2280      	movs	r2, #128	; 0x80
    2238:	0312      	lsls	r2, r2, #12
    223a:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    223c:	4770      	bx	lr
    223e:	46c0      	nop			; (mov r8, r8)
    2240:	e000e100 	.word	0xe000e100

00002244 <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2244:	4a04      	ldr	r2, [pc, #16]	; (2258 <timer_disable_interrupt+0x14>)
    2246:	2380      	movs	r3, #128	; 0x80
    2248:	2180      	movs	r1, #128	; 0x80
    224a:	0309      	lsls	r1, r1, #12
    224c:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    224e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2252:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    2256:	4770      	bx	lr
    2258:	e000e100 	.word	0xe000e100

0000225c <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    225c:	4b04      	ldr	r3, [pc, #16]	; (2270 <timer_clear_interrupt+0x14>)
    225e:	2210      	movs	r2, #16
    2260:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2262:	4a04      	ldr	r2, [pc, #16]	; (2274 <timer_clear_interrupt+0x18>)
    2264:	23c0      	movs	r3, #192	; 0xc0
    2266:	005b      	lsls	r3, r3, #1
    2268:	2180      	movs	r1, #128	; 0x80
    226a:	0309      	lsls	r1, r1, #12
    226c:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    226e:	4770      	bx	lr
    2270:	42003000 	.word	0x42003000
    2274:	e000e100 	.word	0xe000e100

00002278 <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    2278:	4a02      	ldr	r2, [pc, #8]	; (2284 <timer_set_interrupt_time+0xc>)
    227a:	6993      	ldr	r3, [r2, #24]
    227c:	4303      	orrs	r3, r0
    227e:	6193      	str	r3, [r2, #24]
    2280:	4770      	bx	lr
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	42003000 	.word	0x42003000

00002288 <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2288:	b570      	push	{r4, r5, r6, lr}
    228a:	0006      	movs	r6, r0
    228c:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    228e:	4b10      	ldr	r3, [pc, #64]	; (22d0 <uart_set_baud+0x48>)
    2290:	4798      	blx	r3
    2292:	1e04      	subs	r4, r0, #0
    2294:	d018      	beq.n	22c8 <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    2296:	4b0f      	ldr	r3, [pc, #60]	; (22d4 <uart_set_baud+0x4c>)
    2298:	429d      	cmp	r5, r3
    229a:	d817      	bhi.n	22cc <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    229c:	4b0e      	ldr	r3, [pc, #56]	; (22d8 <uart_set_baud+0x50>)
    229e:	0028      	movs	r0, r5
    22a0:	4798      	blx	r3
    22a2:	4b0e      	ldr	r3, [pc, #56]	; (22dc <uart_set_baud+0x54>)
    22a4:	490e      	ldr	r1, [pc, #56]	; (22e0 <uart_set_baud+0x58>)
    22a6:	4798      	blx	r3
    22a8:	4d0e      	ldr	r5, [pc, #56]	; (22e4 <uart_set_baud+0x5c>)
    22aa:	2183      	movs	r1, #131	; 0x83
    22ac:	05c9      	lsls	r1, r1, #23
    22ae:	47a8      	blx	r5
    22b0:	1c01      	adds	r1, r0, #0
    22b2:	4b0d      	ldr	r3, [pc, #52]	; (22e8 <uart_set_baud+0x60>)
    22b4:	20fe      	movs	r0, #254	; 0xfe
    22b6:	0580      	lsls	r0, r0, #22
    22b8:	4798      	blx	r3
    22ba:	218f      	movs	r1, #143	; 0x8f
    22bc:	05c9      	lsls	r1, r1, #23
    22be:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    22c0:	4b0a      	ldr	r3, [pc, #40]	; (22ec <uart_set_baud+0x64>)
    22c2:	4798      	blx	r3
    22c4:	b280      	uxth	r0, r0
    22c6:	81b0      	strh	r0, [r6, #12]
    return true;
}
    22c8:	0020      	movs	r0, r4
    22ca:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    22cc:	2400      	movs	r4, #0
    22ce:	e7fb      	b.n	22c8 <uart_set_baud+0x40>
    22d0:	00001ec5 	.word	0x00001ec5
    22d4:	002dc6c0 	.word	0x002dc6c0
    22d8:	0000503d 	.word	0x0000503d
    22dc:	000045f9 	.word	0x000045f9
    22e0:	4c371b00 	.word	0x4c371b00
    22e4:	000049c5 	.word	0x000049c5
    22e8:	00004c41 	.word	0x00004c41
    22ec:	000042c5 	.word	0x000042c5

000022f0 <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    22f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22f2:	0004      	movs	r4, r0
    22f4:	000e      	movs	r6, r1
    22f6:	0017      	movs	r7, r2
    22f8:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    22fa:	4b11      	ldr	r3, [pc, #68]	; (2340 <uart_init+0x50>)
    22fc:	4798      	blx	r3
    22fe:	2800      	cmp	r0, #0
    2300:	d01c      	beq.n	233c <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2302:	0536      	lsls	r6, r6, #20
    2304:	23c0      	movs	r3, #192	; 0xc0
    2306:	039b      	lsls	r3, r3, #14
    2308:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    230a:	043f      	lsls	r7, r7, #16
    230c:	22c0      	movs	r2, #192	; 0xc0
    230e:	0292      	lsls	r2, r2, #10
    2310:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2312:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    2314:	4b0b      	ldr	r3, [pc, #44]	; (2344 <uart_init+0x54>)
    2316:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    2318:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    231a:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    231c:	69e2      	ldr	r2, [r4, #28]
    231e:	0752      	lsls	r2, r2, #29
    2320:	d4fc      	bmi.n	231c <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    2322:	0029      	movs	r1, r5
    2324:	0020      	movs	r0, r4
    2326:	4b08      	ldr	r3, [pc, #32]	; (2348 <uart_init+0x58>)
    2328:	4798      	blx	r3
    232a:	2800      	cmp	r0, #0
    232c:	d006      	beq.n	233c <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    232e:	6823      	ldr	r3, [r4, #0]
    2330:	2202      	movs	r2, #2
    2332:	4313      	orrs	r3, r2
    2334:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    2336:	69e3      	ldr	r3, [r4, #28]
    2338:	079b      	lsls	r3, r3, #30
    233a:	d4fc      	bmi.n	2336 <uart_init+0x46>
}
    233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	00001f25 	.word	0x00001f25
    2344:	40000004 	.word	0x40000004
    2348:	00002289 	.word	0x00002289

0000234c <uart_flush>:

void uart_flush(sercom_registers_t* sercom) {
    while (sercom->USART_INT.SERCOM_INTFLAG & SERCOM_USART_INT_INTFLAG_RXC_Msk) sercom->USART_INT.SERCOM_DATA;
    234c:	e000      	b.n	2350 <uart_flush+0x4>
    234e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2350:	7e03      	ldrb	r3, [r0, #24]
    2352:	075b      	lsls	r3, r3, #29
    2354:	d4fb      	bmi.n	234e <uart_flush+0x2>
}
    2356:	4770      	bx	lr

00002358 <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    2358:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    235a:	4b10      	ldr	r3, [pc, #64]	; (239c <usb_ep0_in_multi+0x44>)
    235c:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    235e:	2c40      	cmp	r4, #64	; 0x40
    2360:	d900      	bls.n	2364 <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    2362:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    2364:	0026      	movs	r6, r4
    2366:	4b0d      	ldr	r3, [pc, #52]	; (239c <usb_ep0_in_multi+0x44>)
    2368:	1d1d      	adds	r5, r3, #4
    236a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    236c:	0022      	movs	r2, r4
    236e:	0028      	movs	r0, r5
    2370:	4b0b      	ldr	r3, [pc, #44]	; (23a0 <usb_ep0_in_multi+0x48>)
    2372:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    2374:	2300      	movs	r3, #0
    2376:	0022      	movs	r2, r4
    2378:	0029      	movs	r1, r5
    237a:	2080      	movs	r0, #128	; 0x80
    237c:	4d09      	ldr	r5, [pc, #36]	; (23a4 <usb_ep0_in_multi+0x4c>)
    237e:	47a8      	blx	r5

	if (tsize == 0) {
    2380:	2c00      	cmp	r4, #0
    2382:	d007      	beq.n	2394 <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    2384:	4b05      	ldr	r3, [pc, #20]	; (239c <usb_ep0_in_multi+0x44>)
    2386:	881a      	ldrh	r2, [r3, #0]
    2388:	1b12      	subs	r2, r2, r4
    238a:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    238c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    238e:	1992      	adds	r2, r2, r6
    2390:	645a      	str	r2, [r3, #68]	; 0x44
}
    2392:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    2394:	4b04      	ldr	r3, [pc, #16]	; (23a8 <usb_ep0_in_multi+0x50>)
    2396:	4798      	blx	r3
    2398:	e7f4      	b.n	2384 <usb_ep0_in_multi+0x2c>
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	20000480 	.word	0x20000480
    23a0:	000051f5 	.word	0x000051f5
    23a4:	00002869 	.word	0x00002869
    23a8:	00002971 	.word	0x00002971

000023ac <usb_handle_setup>:

void usb_handle_setup(void){
    23ac:	b510      	push	{r4, lr}
    23ae:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    23b0:	4b40      	ldr	r3, [pc, #256]	; (24b4 <usb_handle_setup+0x108>)
    23b2:	2248      	movs	r2, #72	; 0x48
    23b4:	5c9b      	ldrb	r3, [r3, r2]
    23b6:	3218      	adds	r2, #24
    23b8:	421a      	tst	r2, r3
    23ba:	d177      	bne.n	24ac <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    23bc:	4b3e      	ldr	r3, [pc, #248]	; (24b8 <usb_handle_setup+0x10c>)
    23be:	785b      	ldrb	r3, [r3, #1]
    23c0:	2b0b      	cmp	r3, #11
    23c2:	d870      	bhi.n	24a6 <usb_handle_setup+0xfa>
    23c4:	009b      	lsls	r3, r3, #2
    23c6:	4a3d      	ldr	r2, [pc, #244]	; (24bc <usb_handle_setup+0x110>)
    23c8:	58d3      	ldr	r3, [r2, r3]
    23ca:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    23cc:	4b39      	ldr	r3, [pc, #228]	; (24b4 <usb_handle_setup+0x108>)
    23ce:	2200      	movs	r2, #0
    23d0:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    23d2:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    23d4:	2002      	movs	r0, #2
    23d6:	4b3a      	ldr	r3, [pc, #232]	; (24c0 <usb_handle_setup+0x114>)
    23d8:	4798      	blx	r3
				return usb_ep0_out();
    23da:	4b3a      	ldr	r3, [pc, #232]	; (24c4 <usb_handle_setup+0x118>)
    23dc:	4798      	blx	r3
    23de:	e067      	b.n	24b0 <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    23e0:	2000      	movs	r0, #0
    23e2:	4b37      	ldr	r3, [pc, #220]	; (24c0 <usb_handle_setup+0x114>)
    23e4:	4798      	blx	r3
				return usb_ep0_out();
    23e6:	4b37      	ldr	r3, [pc, #220]	; (24c4 <usb_handle_setup+0x118>)
    23e8:	4798      	blx	r3
    23ea:	e061      	b.n	24b0 <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    23ec:	2000      	movs	r0, #0
    23ee:	4b34      	ldr	r3, [pc, #208]	; (24c0 <usb_handle_setup+0x114>)
    23f0:	4798      	blx	r3
				return usb_ep0_out();
    23f2:	4b34      	ldr	r3, [pc, #208]	; (24c4 <usb_handle_setup+0x118>)
    23f4:	4798      	blx	r3
    23f6:	e05b      	b.n	24b0 <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    23f8:	4b2f      	ldr	r3, [pc, #188]	; (24b8 <usb_handle_setup+0x10c>)
    23fa:	8859      	ldrh	r1, [r3, #2]
    23fc:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    23fe:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    2400:	2300      	movs	r3, #0
    2402:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2404:	aa01      	add	r2, sp, #4
    2406:	4b30      	ldr	r3, [pc, #192]	; (24c8 <usb_handle_setup+0x11c>)
    2408:	4798      	blx	r3

				if (size && descriptor){
    240a:	2800      	cmp	r0, #0
    240c:	d019      	beq.n	2442 <usb_handle_setup+0x96>
    240e:	9901      	ldr	r1, [sp, #4]
    2410:	2900      	cmp	r1, #0
    2412:	d016      	beq.n	2442 <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    2414:	4a28      	ldr	r2, [pc, #160]	; (24b8 <usb_handle_setup+0x10c>)
    2416:	88d2      	ldrh	r2, [r2, #6]
    2418:	4282      	cmp	r2, r0
    241a:	d300      	bcc.n	241e <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    241c:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    241e:	4b2b      	ldr	r3, [pc, #172]	; (24cc <usb_handle_setup+0x120>)
    2420:	4299      	cmp	r1, r3
    2422:	d005      	beq.n	2430 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    2424:	4b23      	ldr	r3, [pc, #140]	; (24b4 <usb_handle_setup+0x108>)
    2426:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    2428:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    242a:	4b29      	ldr	r3, [pc, #164]	; (24d0 <usb_handle_setup+0x124>)
    242c:	4798      	blx	r3
					}

					return;
    242e:	e03f      	b.n	24b0 <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    2430:	4920      	ldr	r1, [pc, #128]	; (24b4 <usb_handle_setup+0x108>)
    2432:	2300      	movs	r3, #0
    2434:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2436:	3104      	adds	r1, #4
    2438:	3301      	adds	r3, #1
    243a:	2080      	movs	r0, #128	; 0x80
    243c:	4c25      	ldr	r4, [pc, #148]	; (24d4 <usb_handle_setup+0x128>)
    243e:	47a0      	blx	r4
    2440:	e036      	b.n	24b0 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2442:	4b25      	ldr	r3, [pc, #148]	; (24d8 <usb_handle_setup+0x12c>)
    2444:	4798      	blx	r3
    2446:	e033      	b.n	24b0 <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    2448:	4b1a      	ldr	r3, [pc, #104]	; (24b4 <usb_handle_setup+0x108>)
    244a:	2250      	movs	r2, #80	; 0x50
    244c:	5c9a      	ldrb	r2, [r3, r2]
    244e:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    2450:	2001      	movs	r0, #1
    2452:	4b1b      	ldr	r3, [pc, #108]	; (24c0 <usb_handle_setup+0x114>)
    2454:	4798      	blx	r3
				return usb_ep0_out();
    2456:	4b1b      	ldr	r3, [pc, #108]	; (24c4 <usb_handle_setup+0x118>)
    2458:	4798      	blx	r3
    245a:	e029      	b.n	24b0 <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    245c:	4b16      	ldr	r3, [pc, #88]	; (24b8 <usb_handle_setup+0x10c>)
    245e:	7898      	ldrb	r0, [r3, #2]
    2460:	4b1e      	ldr	r3, [pc, #120]	; (24dc <usb_handle_setup+0x130>)
    2462:	4798      	blx	r3
    2464:	2800      	cmp	r0, #0
    2466:	d00b      	beq.n	2480 <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    2468:	2000      	movs	r0, #0
    246a:	4b15      	ldr	r3, [pc, #84]	; (24c0 <usb_handle_setup+0x114>)
    246c:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    246e:	4b11      	ldr	r3, [pc, #68]	; (24b4 <usb_handle_setup+0x108>)
    2470:	001a      	movs	r2, r3
    2472:	3248      	adds	r2, #72	; 0x48
    2474:	7891      	ldrb	r1, [r2, #2]
    2476:	2250      	movs	r2, #80	; 0x50
    2478:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    247a:	4b12      	ldr	r3, [pc, #72]	; (24c4 <usb_handle_setup+0x118>)
    247c:	4798      	blx	r3
    247e:	e017      	b.n	24b0 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2480:	4b15      	ldr	r3, [pc, #84]	; (24d8 <usb_handle_setup+0x12c>)
    2482:	4798      	blx	r3
    2484:	e014      	b.n	24b0 <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    2486:	4b0c      	ldr	r3, [pc, #48]	; (24b8 <usb_handle_setup+0x10c>)
    2488:	8859      	ldrh	r1, [r3, #2]
    248a:	8898      	ldrh	r0, [r3, #4]
    248c:	4b14      	ldr	r3, [pc, #80]	; (24e0 <usb_handle_setup+0x134>)
    248e:	4798      	blx	r3
    2490:	2800      	cmp	r0, #0
    2492:	d005      	beq.n	24a0 <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    2494:	2000      	movs	r0, #0
    2496:	4b0a      	ldr	r3, [pc, #40]	; (24c0 <usb_handle_setup+0x114>)
    2498:	4798      	blx	r3
					return usb_ep0_out();
    249a:	4b0a      	ldr	r3, [pc, #40]	; (24c4 <usb_handle_setup+0x118>)
    249c:	4798      	blx	r3
    249e:	e007      	b.n	24b0 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    24a0:	4b0d      	ldr	r3, [pc, #52]	; (24d8 <usb_handle_setup+0x12c>)
    24a2:	4798      	blx	r3
    24a4:	e004      	b.n	24b0 <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    24a6:	4b0c      	ldr	r3, [pc, #48]	; (24d8 <usb_handle_setup+0x12c>)
    24a8:	4798      	blx	r3
    24aa:	e001      	b.n	24b0 <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    24ac:	4b0d      	ldr	r3, [pc, #52]	; (24e4 <usb_handle_setup+0x138>)
    24ae:	4798      	blx	r3
}
    24b0:	b002      	add	sp, #8
    24b2:	bd10      	pop	{r4, pc}
    24b4:	20000480 	.word	0x20000480
    24b8:	200004c8 	.word	0x200004c8
    24bc:	00005670 	.word	0x00005670
    24c0:	00002989 	.word	0x00002989
    24c4:	00002971 	.word	0x00002971
    24c8:	00002d09 	.word	0x00002d09
    24cc:	20000484 	.word	0x20000484
    24d0:	00002359 	.word	0x00002359
    24d4:	00002869 	.word	0x00002869
    24d8:	000029a1 	.word	0x000029a1
    24dc:	00002ccd 	.word	0x00002ccd
    24e0:	00002ce5 	.word	0x00002ce5
    24e4:	00002bbd 	.word	0x00002bbd

000024e8 <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    24e8:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    24ea:	4b05      	ldr	r3, [pc, #20]	; (2500 <usb_handle_control_out_complete+0x18>)
    24ec:	2248      	movs	r2, #72	; 0x48
    24ee:	5c9b      	ldrb	r3, [r3, r2]
    24f0:	3218      	adds	r2, #24
    24f2:	421a      	tst	r2, r3
    24f4:	d100      	bne.n	24f8 <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    24f6:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    24f8:	4b02      	ldr	r3, [pc, #8]	; (2504 <usb_handle_control_out_complete+0x1c>)
    24fa:	4798      	blx	r3
}
    24fc:	e7fb      	b.n	24f6 <usb_handle_control_out_complete+0xe>
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	20000480 	.word	0x20000480
    2504:	00002ccb 	.word	0x00002ccb

00002508 <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    2508:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    250a:	4b0d      	ldr	r3, [pc, #52]	; (2540 <usb_handle_control_in_complete+0x38>)
    250c:	2248      	movs	r2, #72	; 0x48
    250e:	5c9b      	ldrb	r3, [r3, r2]
    2510:	3218      	adds	r2, #24
    2512:	421a      	tst	r2, r3
    2514:	d110      	bne.n	2538 <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    2516:	4b0b      	ldr	r3, [pc, #44]	; (2544 <usb_handle_control_in_complete+0x3c>)
    2518:	785b      	ldrb	r3, [r3, #1]
    251a:	2b05      	cmp	r3, #5
    251c:	d002      	beq.n	2524 <usb_handle_control_in_complete+0x1c>
    251e:	2b06      	cmp	r3, #6
    2520:	d007      	beq.n	2532 <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    2522:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    2524:	4b07      	ldr	r3, [pc, #28]	; (2544 <usb_handle_control_in_complete+0x3c>)
    2526:	789b      	ldrb	r3, [r3, #2]
    2528:	207f      	movs	r0, #127	; 0x7f
    252a:	4018      	ands	r0, r3
    252c:	4b06      	ldr	r3, [pc, #24]	; (2548 <usb_handle_control_in_complete+0x40>)
    252e:	4798      	blx	r3
				return;
    2530:	e7f7      	b.n	2522 <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    2532:	4b06      	ldr	r3, [pc, #24]	; (254c <usb_handle_control_in_complete+0x44>)
    2534:	4798      	blx	r3
				return;
    2536:	e7f4      	b.n	2522 <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    2538:	4b05      	ldr	r3, [pc, #20]	; (2550 <usb_handle_control_in_complete+0x48>)
    253a:	4798      	blx	r3
    253c:	e7f1      	b.n	2522 <usb_handle_control_in_complete+0x1a>
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	20000480 	.word	0x20000480
    2544:	200004c8 	.word	0x200004c8
    2548:	000026b5 	.word	0x000026b5
    254c:	00002359 	.word	0x00002359
    2550:	00002cc9 	.word	0x00002cc9

00002554 <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    2554:	b570      	push	{r4, r5, r6, lr}
    2556:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    2558:	4b0b      	ldr	r3, [pc, #44]	; (2588 <usb_string_to_descriptor+0x34>)
    255a:	4798      	blx	r3
    255c:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    255e:	281f      	cmp	r0, #31
    2560:	d900      	bls.n	2564 <usb_string_to_descriptor+0x10>
    2562:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    2564:	1c43      	adds	r3, r0, #1
    2566:	005b      	lsls	r3, r3, #1
    2568:	4a08      	ldr	r2, [pc, #32]	; (258c <usb_string_to_descriptor+0x38>)
    256a:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    256c:	2303      	movs	r3, #3
    256e:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    2570:	2200      	movs	r2, #0
    2572:	e005      	b.n	2580 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    2574:	5cb1      	ldrb	r1, [r6, r2]
    2576:	4b05      	ldr	r3, [pc, #20]	; (258c <usb_string_to_descriptor+0x38>)
    2578:	0054      	lsls	r4, r2, #1
    257a:	191b      	adds	r3, r3, r4
    257c:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    257e:	3201      	adds	r2, #1
    2580:	4290      	cmp	r0, r2
    2582:	dcf7      	bgt.n	2574 <usb_string_to_descriptor+0x20>
	}
	return desc;
    2584:	4802      	ldr	r0, [pc, #8]	; (2590 <usb_string_to_descriptor+0x3c>)
}
    2586:	bd70      	pop	{r4, r5, r6, pc}
    2588:	00005285 	.word	0x00005285
    258c:	20000480 	.word	0x20000480
    2590:	20000484 	.word	0x20000484

00002594 <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    2594:	4a12      	ldr	r2, [pc, #72]	; (25e0 <usb_reset+0x4c>)
    2596:	4b13      	ldr	r3, [pc, #76]	; (25e4 <usb_reset+0x50>)
    2598:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    259a:	685a      	ldr	r2, [r3, #4]
    259c:	4812      	ldr	r0, [pc, #72]	; (25e8 <usb_reset+0x54>)
    259e:	4002      	ands	r2, r0
    25a0:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    25a2:	6859      	ldr	r1, [r3, #4]
    25a4:	22c0      	movs	r2, #192	; 0xc0
    25a6:	0592      	lsls	r2, r2, #22
    25a8:	4311      	orrs	r1, r2
    25aa:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    25ac:	490f      	ldr	r1, [pc, #60]	; (25ec <usb_reset+0x58>)
    25ae:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    25b0:	6959      	ldr	r1, [r3, #20]
    25b2:	4001      	ands	r1, r0
    25b4:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    25b6:	6959      	ldr	r1, [r3, #20]
    25b8:	430a      	orrs	r2, r1
    25ba:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    25bc:	695a      	ldr	r2, [r3, #20]
    25be:	0052      	lsls	r2, r2, #1
    25c0:	0852      	lsrs	r2, r2, #1
    25c2:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    25c4:	6959      	ldr	r1, [r3, #20]
    25c6:	2280      	movs	r2, #128	; 0x80
    25c8:	0612      	lsls	r2, r2, #24
    25ca:	430a      	orrs	r2, r1
    25cc:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    25ce:	4b08      	ldr	r3, [pc, #32]	; (25f0 <usb_reset+0x5c>)
    25d0:	220a      	movs	r2, #10
    25d2:	32ff      	adds	r2, #255	; 0xff
    25d4:	2110      	movs	r1, #16
    25d6:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    25d8:	3a09      	subs	r2, #9
    25da:	3101      	adds	r1, #1
    25dc:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    25de:	4770      	bx	lr
    25e0:	200004d4 	.word	0x200004d4
    25e4:	20000560 	.word	0x20000560
    25e8:	8fffffff 	.word	0x8fffffff
    25ec:	20000484 	.word	0x20000484
    25f0:	41005000 	.word	0x41005000

000025f4 <usb_init>:
void usb_init(){
    25f4:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    25f6:	4a26      	ldr	r2, [pc, #152]	; (2690 <usb_init+0x9c>)
    25f8:	69d3      	ldr	r3, [r2, #28]
    25fa:	2120      	movs	r1, #32
    25fc:	430b      	orrs	r3, r1
    25fe:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    2600:	4b24      	ldr	r3, [pc, #144]	; (2694 <usb_init+0xa0>)
    2602:	4a25      	ldr	r2, [pc, #148]	; (2698 <usb_init+0xa4>)
    2604:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    2606:	4b25      	ldr	r3, [pc, #148]	; (269c <usb_init+0xa8>)
    2608:	2201      	movs	r2, #1
    260a:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    260c:	4b23      	ldr	r3, [pc, #140]	; (269c <usb_init+0xa8>)
    260e:	789b      	ldrb	r3, [r3, #2]
    2610:	07db      	lsls	r3, r3, #31
    2612:	d4fb      	bmi.n	260c <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    2614:	4b21      	ldr	r3, [pc, #132]	; (269c <usb_init+0xa8>)
    2616:	2202      	movs	r2, #2
    2618:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    261a:	4b20      	ldr	r3, [pc, #128]	; (269c <usb_init+0xa8>)
    261c:	789b      	ldrb	r3, [r3, #2]
    261e:	079b      	lsls	r3, r3, #30
    2620:	d4fb      	bmi.n	261a <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2622:	4b1f      	ldr	r3, [pc, #124]	; (26a0 <usb_init+0xac>)
    2624:	685b      	ldr	r3, [r3, #4]
    2626:	035b      	lsls	r3, r3, #13
    2628:	22f8      	movs	r2, #248	; 0xf8
    262a:	0292      	lsls	r2, r2, #10
    262c:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    262e:	2b1f      	cmp	r3, #31
    2630:	d028      	beq.n	2684 <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2632:	4a1b      	ldr	r2, [pc, #108]	; (26a0 <usb_init+0xac>)
    2634:	6851      	ldr	r1, [r2, #4]
    2636:	0489      	lsls	r1, r1, #18
    2638:	22f8      	movs	r2, #248	; 0xf8
    263a:	03d2      	lsls	r2, r2, #15
    263c:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    263e:	291f      	cmp	r1, #31
    2640:	d022      	beq.n	2688 <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2642:	4a17      	ldr	r2, [pc, #92]	; (26a0 <usb_init+0xac>)
    2644:	6852      	ldr	r2, [r2, #4]
    2646:	05d2      	lsls	r2, r2, #23
    2648:	20e0      	movs	r0, #224	; 0xe0
    264a:	0480      	lsls	r0, r0, #18
    264c:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    264e:	2a07      	cmp	r2, #7
    2650:	d01c      	beq.n	268c <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2652:	019b      	lsls	r3, r3, #6
    2654:	20f8      	movs	r0, #248	; 0xf8
    2656:	00c0      	lsls	r0, r0, #3
    2658:	4003      	ands	r3, r0
    265a:	201f      	movs	r0, #31
    265c:	4001      	ands	r1, r0
    265e:	430b      	orrs	r3, r1
    2660:	0312      	lsls	r2, r2, #12
    2662:	4313      	orrs	r3, r2
    2664:	4d0d      	ldr	r5, [pc, #52]	; (269c <usb_init+0xa8>)
    2666:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    2668:	4b0e      	ldr	r3, [pc, #56]	; (26a4 <usb_init+0xb0>)
    266a:	781a      	ldrb	r2, [r3, #0]
    266c:	0112      	lsls	r2, r2, #4
    266e:	4c0e      	ldr	r4, [pc, #56]	; (26a8 <usb_init+0xb4>)
    2670:	2100      	movs	r1, #0
    2672:	0020      	movs	r0, r4
    2674:	4b0d      	ldr	r3, [pc, #52]	; (26ac <usb_init+0xb8>)
    2676:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    2678:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    267a:	2308      	movs	r3, #8
    267c:	832b      	strh	r3, [r5, #24]
	usb_reset();
    267e:	4b0c      	ldr	r3, [pc, #48]	; (26b0 <usb_init+0xbc>)
    2680:	4798      	blx	r3
}
    2682:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    2684:	3b1a      	subs	r3, #26
    2686:	e7d4      	b.n	2632 <usb_init+0x3e>
		pad_transp = 29;
    2688:	3902      	subs	r1, #2
    268a:	e7da      	b.n	2642 <usb_init+0x4e>
		pad_trim = 3;
    268c:	3a04      	subs	r2, #4
    268e:	e7e0      	b.n	2652 <usb_init+0x5e>
    2690:	40000400 	.word	0x40000400
    2694:	40000c00 	.word	0x40000c00
    2698:	00004006 	.word	0x00004006
    269c:	41005000 	.word	0x41005000
    26a0:	00806020 	.word	0x00806020
    26a4:	000056f2 	.word	0x000056f2
    26a8:	20000560 	.word	0x20000560
    26ac:	000050fd 	.word	0x000050fd
    26b0:	00002595 	.word	0x00002595

000026b4 <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    26b4:	2380      	movs	r3, #128	; 0x80
    26b6:	425b      	negs	r3, r3
    26b8:	4318      	orrs	r0, r3
    26ba:	b2c0      	uxtb	r0, r0
    26bc:	4b01      	ldr	r3, [pc, #4]	; (26c4 <usb_set_address+0x10>)
    26be:	7298      	strb	r0, [r3, #10]
}
    26c0:	4770      	bx	lr
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	41005000 	.word	0x41005000

000026c8 <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    26c8:	b530      	push	{r4, r5, lr}
    26ca:	0003      	movs	r3, r0
	if (ep & 0x80) {
    26cc:	b240      	sxtb	r0, r0
    26ce:	2800      	cmp	r0, #0
    26d0:	db24      	blt.n	271c <usb_enable_ep+0x54>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    26d2:	203f      	movs	r0, #63	; 0x3f
    26d4:	4018      	ands	r0, r3
    26d6:	4b49      	ldr	r3, [pc, #292]	; (27fc <usb_enable_ep+0x134>)
    26d8:	0144      	lsls	r4, r0, #5
    26da:	191b      	adds	r3, r3, r4
    26dc:	685c      	ldr	r4, [r3, #4]
    26de:	4d48      	ldr	r5, [pc, #288]	; (2800 <usb_enable_ep+0x138>)
    26e0:	402c      	ands	r4, r5
    26e2:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    26e4:	685b      	ldr	r3, [r3, #4]
    26e6:	2a08      	cmp	r2, #8
    26e8:	d95f      	bls.n	27aa <usb_enable_ep+0xe2>
    26ea:	2a10      	cmp	r2, #16
    26ec:	d800      	bhi.n	26f0 <usb_enable_ep+0x28>
    26ee:	e072      	b.n	27d6 <usb_enable_ep+0x10e>
    26f0:	2a20      	cmp	r2, #32
    26f2:	d800      	bhi.n	26f6 <usb_enable_ep+0x2e>
    26f4:	e072      	b.n	27dc <usb_enable_ep+0x114>
    26f6:	2a40      	cmp	r2, #64	; 0x40
    26f8:	d800      	bhi.n	26fc <usb_enable_ep+0x34>
    26fa:	e072      	b.n	27e2 <usb_enable_ep+0x11a>
    26fc:	2a80      	cmp	r2, #128	; 0x80
    26fe:	d800      	bhi.n	2702 <usb_enable_ep+0x3a>
    2700:	e072      	b.n	27e8 <usb_enable_ep+0x120>
    2702:	2480      	movs	r4, #128	; 0x80
    2704:	0064      	lsls	r4, r4, #1
    2706:	42a2      	cmp	r2, r4
    2708:	d800      	bhi.n	270c <usb_enable_ep+0x44>
    270a:	e070      	b.n	27ee <usb_enable_ep+0x126>
    270c:	3401      	adds	r4, #1
    270e:	34ff      	adds	r4, #255	; 0xff
    2710:	42a2      	cmp	r2, r4
    2712:	d900      	bls.n	2716 <usb_enable_ep+0x4e>
    2714:	e06e      	b.n	27f4 <usb_enable_ep+0x12c>
    2716:	22c0      	movs	r2, #192	; 0xc0
    2718:	05d2      	lsls	r2, r2, #23
    271a:	e047      	b.n	27ac <usb_enable_ep+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    271c:	203f      	movs	r0, #63	; 0x3f
    271e:	4003      	ands	r3, r0
    2720:	4836      	ldr	r0, [pc, #216]	; (27fc <usb_enable_ep+0x134>)
    2722:	015c      	lsls	r4, r3, #5
    2724:	1900      	adds	r0, r0, r4
    2726:	6944      	ldr	r4, [r0, #20]
    2728:	4d35      	ldr	r5, [pc, #212]	; (2800 <usb_enable_ep+0x138>)
    272a:	402c      	ands	r4, r5
    272c:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    272e:	6940      	ldr	r0, [r0, #20]
    2730:	2a08      	cmp	r2, #8
    2732:	d912      	bls.n	275a <usb_enable_ep+0x92>
    2734:	2a10      	cmp	r2, #16
    2736:	d926      	bls.n	2786 <usb_enable_ep+0xbe>
    2738:	2a20      	cmp	r2, #32
    273a:	d927      	bls.n	278c <usb_enable_ep+0xc4>
    273c:	2a40      	cmp	r2, #64	; 0x40
    273e:	d928      	bls.n	2792 <usb_enable_ep+0xca>
    2740:	2a80      	cmp	r2, #128	; 0x80
    2742:	d929      	bls.n	2798 <usb_enable_ep+0xd0>
    2744:	2480      	movs	r4, #128	; 0x80
    2746:	0064      	lsls	r4, r4, #1
    2748:	42a2      	cmp	r2, r4
    274a:	d928      	bls.n	279e <usb_enable_ep+0xd6>
    274c:	3401      	adds	r4, #1
    274e:	34ff      	adds	r4, #255	; 0xff
    2750:	42a2      	cmp	r2, r4
    2752:	d827      	bhi.n	27a4 <usb_enable_ep+0xdc>
    2754:	22c0      	movs	r2, #192	; 0xc0
    2756:	05d2      	lsls	r2, r2, #23
    2758:	e000      	b.n	275c <usb_enable_ep+0x94>
    275a:	2200      	movs	r2, #0
    275c:	4310      	orrs	r0, r2
    275e:	4a27      	ldr	r2, [pc, #156]	; (27fc <usb_enable_ep+0x134>)
    2760:	015c      	lsls	r4, r3, #5
    2762:	1912      	adds	r2, r2, r4
    2764:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    2766:	4c27      	ldr	r4, [pc, #156]	; (2804 <usb_enable_ep+0x13c>)
    2768:	3308      	adds	r3, #8
    276a:	015b      	lsls	r3, r3, #5
    276c:	5d1a      	ldrb	r2, [r3, r4]
    276e:	3101      	adds	r1, #1
    2770:	b2c9      	uxtb	r1, r1
    2772:	0109      	lsls	r1, r1, #4
    2774:	2070      	movs	r0, #112	; 0x70
    2776:	4001      	ands	r1, r0
    2778:	430a      	orrs	r2, r1
    277a:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    277c:	46a4      	mov	ip, r4
    277e:	4463      	add	r3, ip
    2780:	22a2      	movs	r2, #162	; 0xa2
    2782:	711a      	strb	r2, [r3, #4]
    2784:	e026      	b.n	27d4 <usb_enable_ep+0x10c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2786:	2280      	movs	r2, #128	; 0x80
    2788:	0552      	lsls	r2, r2, #21
    278a:	e7e7      	b.n	275c <usb_enable_ep+0x94>
    278c:	2280      	movs	r2, #128	; 0x80
    278e:	0592      	lsls	r2, r2, #22
    2790:	e7e4      	b.n	275c <usb_enable_ep+0x94>
    2792:	22c0      	movs	r2, #192	; 0xc0
    2794:	0592      	lsls	r2, r2, #22
    2796:	e7e1      	b.n	275c <usb_enable_ep+0x94>
    2798:	2280      	movs	r2, #128	; 0x80
    279a:	05d2      	lsls	r2, r2, #23
    279c:	e7de      	b.n	275c <usb_enable_ep+0x94>
    279e:	22a0      	movs	r2, #160	; 0xa0
    27a0:	05d2      	lsls	r2, r2, #23
    27a2:	e7db      	b.n	275c <usb_enable_ep+0x94>
    27a4:	22e0      	movs	r2, #224	; 0xe0
    27a6:	05d2      	lsls	r2, r2, #23
    27a8:	e7d8      	b.n	275c <usb_enable_ep+0x94>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    27aa:	2200      	movs	r2, #0
    27ac:	431a      	orrs	r2, r3
    27ae:	4b13      	ldr	r3, [pc, #76]	; (27fc <usb_enable_ep+0x134>)
    27b0:	0144      	lsls	r4, r0, #5
    27b2:	191b      	adds	r3, r3, r4
    27b4:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    27b6:	4a13      	ldr	r2, [pc, #76]	; (2804 <usb_enable_ep+0x13c>)
    27b8:	3008      	adds	r0, #8
    27ba:	0140      	lsls	r0, r0, #5
    27bc:	5c83      	ldrb	r3, [r0, r2]
    27be:	3101      	adds	r1, #1
    27c0:	2407      	movs	r4, #7
    27c2:	4021      	ands	r1, r4
    27c4:	430b      	orrs	r3, r1
    27c6:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    27c8:	4694      	mov	ip, r2
    27ca:	4460      	add	r0, ip
    27cc:	2340      	movs	r3, #64	; 0x40
    27ce:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    27d0:	3b2f      	subs	r3, #47	; 0x2f
    27d2:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    27d4:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    27d6:	2280      	movs	r2, #128	; 0x80
    27d8:	0552      	lsls	r2, r2, #21
    27da:	e7e7      	b.n	27ac <usb_enable_ep+0xe4>
    27dc:	2280      	movs	r2, #128	; 0x80
    27de:	0592      	lsls	r2, r2, #22
    27e0:	e7e4      	b.n	27ac <usb_enable_ep+0xe4>
    27e2:	22c0      	movs	r2, #192	; 0xc0
    27e4:	0592      	lsls	r2, r2, #22
    27e6:	e7e1      	b.n	27ac <usb_enable_ep+0xe4>
    27e8:	2280      	movs	r2, #128	; 0x80
    27ea:	05d2      	lsls	r2, r2, #23
    27ec:	e7de      	b.n	27ac <usb_enable_ep+0xe4>
    27ee:	22a0      	movs	r2, #160	; 0xa0
    27f0:	05d2      	lsls	r2, r2, #23
    27f2:	e7db      	b.n	27ac <usb_enable_ep+0xe4>
    27f4:	22e0      	movs	r2, #224	; 0xe0
    27f6:	05d2      	lsls	r2, r2, #23
    27f8:	e7d8      	b.n	27ac <usb_enable_ep+0xe4>
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	20000560 	.word	0x20000560
    2800:	8fffffff 	.word	0x8fffffff
    2804:	41005000 	.word	0x41005000

00002808 <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    2808:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    280a:	4d12      	ldr	r5, [pc, #72]	; (2854 <usb_ep_start_out+0x4c>)
    280c:	0144      	lsls	r4, r0, #5
    280e:	192b      	adds	r3, r5, r4
    2810:	685e      	ldr	r6, [r3, #4]
    2812:	4f11      	ldr	r7, [pc, #68]	; (2858 <usb_ep_start_out+0x50>)
    2814:	403e      	ands	r6, r7
    2816:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    2818:	685e      	ldr	r6, [r3, #4]
    281a:	0392      	lsls	r2, r2, #14
    281c:	4f0f      	ldr	r7, [pc, #60]	; (285c <usb_ep_start_out+0x54>)
    281e:	403a      	ands	r2, r7
    2820:	4316      	orrs	r6, r2
    2822:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2824:	685a      	ldr	r2, [r3, #4]
    2826:	0b92      	lsrs	r2, r2, #14
    2828:	0392      	lsls	r2, r2, #14
    282a:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    282c:	685a      	ldr	r2, [r3, #4]
    282e:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    2830:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    2832:	3008      	adds	r0, #8
    2834:	0140      	lsls	r0, r0, #5
    2836:	4b0a      	ldr	r3, [pc, #40]	; (2860 <usb_ep_start_out+0x58>)
    2838:	469c      	mov	ip, r3
    283a:	4460      	add	r0, ip
    283c:	2305      	movs	r3, #5
    283e:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    2840:	4b08      	ldr	r3, [pc, #32]	; (2864 <usb_ep_start_out+0x5c>)
    2842:	469c      	mov	ip, r3
    2844:	4464      	add	r4, ip
    2846:	2301      	movs	r3, #1
    2848:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    284a:	333f      	adds	r3, #63	; 0x3f
    284c:	7103      	strb	r3, [r0, #4]
	return 0;
}
    284e:	2000      	movs	r0, #0
    2850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	20000560 	.word	0x20000560
    2858:	f0003fff 	.word	0xf0003fff
    285c:	0fffc000 	.word	0x0fffc000
    2860:	41005000 	.word	0x41005000
    2864:	41005109 	.word	0x41005109

00002868 <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    2868:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    286a:	243f      	movs	r4, #63	; 0x3f
    286c:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    286e:	4c15      	ldr	r4, [pc, #84]	; (28c4 <usb_ep_start_in+0x5c>)
    2870:	0146      	lsls	r6, r0, #5
    2872:	19a4      	adds	r4, r4, r6
    2874:	6965      	ldr	r5, [r4, #20]
    2876:	006d      	lsls	r5, r5, #1
    2878:	086d      	lsrs	r5, r5, #1
    287a:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    287c:	6965      	ldr	r5, [r4, #20]
    287e:	07db      	lsls	r3, r3, #31
    2880:	431d      	orrs	r5, r3
    2882:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    2884:	6963      	ldr	r3, [r4, #20]
    2886:	4d10      	ldr	r5, [pc, #64]	; (28c8 <usb_ep_start_in+0x60>)
    2888:	402b      	ands	r3, r5
    288a:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    288c:	6963      	ldr	r3, [r4, #20]
    288e:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2890:	6963      	ldr	r3, [r4, #20]
    2892:	0b9b      	lsrs	r3, r3, #14
    2894:	039b      	lsls	r3, r3, #14
    2896:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    2898:	6963      	ldr	r3, [r4, #20]
    289a:	0492      	lsls	r2, r2, #18
    289c:	0c92      	lsrs	r2, r2, #18
    289e:	4313      	orrs	r3, r2
    28a0:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    28a2:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    28a4:	3008      	adds	r0, #8
    28a6:	0140      	lsls	r0, r0, #5
    28a8:	4b08      	ldr	r3, [pc, #32]	; (28cc <usb_ep_start_in+0x64>)
    28aa:	469c      	mov	ip, r3
    28ac:	4460      	add	r0, ip
    28ae:	230a      	movs	r3, #10
    28b0:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    28b2:	4b07      	ldr	r3, [pc, #28]	; (28d0 <usb_ep_start_in+0x68>)
    28b4:	469c      	mov	ip, r3
    28b6:	4466      	add	r6, ip
    28b8:	2302      	movs	r3, #2
    28ba:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    28bc:	337e      	adds	r3, #126	; 0x7e
    28be:	7143      	strb	r3, [r0, #5]
	return 0;
}
    28c0:	2000      	movs	r0, #0
    28c2:	bd70      	pop	{r4, r5, r6, pc}
    28c4:	20000560 	.word	0x20000560
    28c8:	f0003fff 	.word	0xf0003fff
    28cc:	41005000 	.word	0x41005000
    28d0:	41005109 	.word	0x41005109

000028d4 <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    28d4:	b243      	sxtb	r3, r0
    28d6:	2b00      	cmp	r3, #0
    28d8:	db0a      	blt.n	28f0 <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    28da:	233f      	movs	r3, #63	; 0x3f
    28dc:	4003      	ands	r3, r0
    28de:	3308      	adds	r3, #8
    28e0:	015b      	lsls	r3, r3, #5
    28e2:	4a09      	ldr	r2, [pc, #36]	; (2908 <usb_ep_pending+0x34>)
    28e4:	4694      	mov	ip, r2
    28e6:	4463      	add	r3, ip
    28e8:	79d8      	ldrb	r0, [r3, #7]
    28ea:	2301      	movs	r3, #1
    28ec:	4018      	ands	r0, r3
	}
}
    28ee:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    28f0:	233f      	movs	r3, #63	; 0x3f
    28f2:	4003      	ands	r3, r0
    28f4:	3308      	adds	r3, #8
    28f6:	015b      	lsls	r3, r3, #5
    28f8:	4a03      	ldr	r2, [pc, #12]	; (2908 <usb_ep_pending+0x34>)
    28fa:	4694      	mov	ip, r2
    28fc:	4463      	add	r3, ip
    28fe:	79db      	ldrb	r3, [r3, #7]
    2900:	085b      	lsrs	r3, r3, #1
    2902:	2001      	movs	r0, #1
    2904:	4018      	ands	r0, r3
    2906:	e7f2      	b.n	28ee <usb_ep_pending+0x1a>
    2908:	41005000 	.word	0x41005000

0000290c <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    290c:	b243      	sxtb	r3, r0
    290e:	2b00      	cmp	r3, #0
    2910:	db09      	blt.n	2926 <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    2912:	233f      	movs	r3, #63	; 0x3f
    2914:	4003      	ands	r3, r0
    2916:	3308      	adds	r3, #8
    2918:	015b      	lsls	r3, r3, #5
    291a:	4a08      	ldr	r2, [pc, #32]	; (293c <usb_ep_handled+0x30>)
    291c:	4694      	mov	ip, r2
    291e:	4463      	add	r3, ip
    2920:	2201      	movs	r2, #1
    2922:	71da      	strb	r2, [r3, #7]
	}
}
    2924:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    2926:	233f      	movs	r3, #63	; 0x3f
    2928:	4003      	ands	r3, r0
    292a:	3308      	adds	r3, #8
    292c:	015b      	lsls	r3, r3, #5
    292e:	4a03      	ldr	r2, [pc, #12]	; (293c <usb_ep_handled+0x30>)
    2930:	4694      	mov	ip, r2
    2932:	4463      	add	r3, ip
    2934:	2202      	movs	r2, #2
    2936:	71da      	strb	r2, [r3, #7]
    2938:	e7f4      	b.n	2924 <usb_ep_handled+0x18>
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	41005000 	.word	0x41005000

00002940 <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    2940:	4b03      	ldr	r3, [pc, #12]	; (2950 <usb_ep_out_length+0x10>)
    2942:	0140      	lsls	r0, r0, #5
    2944:	181b      	adds	r3, r3, r0
    2946:	6858      	ldr	r0, [r3, #4]
    2948:	0480      	lsls	r0, r0, #18
    294a:	0c80      	lsrs	r0, r0, #18
}
    294c:	4770      	bx	lr
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	20000560 	.word	0x20000560

00002954 <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2954:	4b04      	ldr	r3, [pc, #16]	; (2968 <usb_attach+0x14>)
    2956:	2280      	movs	r2, #128	; 0x80
    2958:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    295a:	4a04      	ldr	r2, [pc, #16]	; (296c <usb_attach+0x18>)
    295c:	8913      	ldrh	r3, [r2, #8]
    295e:	2101      	movs	r1, #1
    2960:	438b      	bics	r3, r1
    2962:	8113      	strh	r3, [r2, #8]
}
    2964:	4770      	bx	lr
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	e000e100 	.word	0xe000e100
    296c:	41005000 	.word	0x41005000

00002970 <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    2970:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    2972:	4903      	ldr	r1, [pc, #12]	; (2980 <usb_ep0_out+0x10>)
    2974:	2240      	movs	r2, #64	; 0x40
    2976:	2000      	movs	r0, #0
    2978:	4b02      	ldr	r3, [pc, #8]	; (2984 <usb_ep0_out+0x14>)
    297a:	4798      	blx	r3
}
    297c:	bd10      	pop	{r4, pc}
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	200004d4 	.word	0x200004d4
    2984:	00002809 	.word	0x00002809

00002988 <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    2988:	b510      	push	{r4, lr}
    298a:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    298c:	4902      	ldr	r1, [pc, #8]	; (2998 <usb_ep0_in+0x10>)
    298e:	2301      	movs	r3, #1
    2990:	2080      	movs	r0, #128	; 0x80
    2992:	4c02      	ldr	r4, [pc, #8]	; (299c <usb_ep0_in+0x14>)
    2994:	47a0      	blx	r4
}
    2996:	bd10      	pop	{r4, pc}
    2998:	20000484 	.word	0x20000484
    299c:	00002869 	.word	0x00002869

000029a0 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    29a0:	4a02      	ldr	r2, [pc, #8]	; (29ac <usb_ep0_stall+0xc>)
    29a2:	2306      	movs	r3, #6
    29a4:	33ff      	adds	r3, #255	; 0xff
    29a6:	2130      	movs	r1, #48	; 0x30
    29a8:	54d1      	strb	r1, [r2, r3]
}
    29aa:	4770      	bx	lr
    29ac:	41005000 	.word	0x41005000

000029b0 <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    29b0:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    29b2:	4b25      	ldr	r3, [pc, #148]	; (2a48 <usb_handle_function+0x98>)
    29b4:	8c1c      	ldrh	r4, [r3, #32]
    29b6:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    29b8:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    29ba:	071b      	lsls	r3, r3, #28
    29bc:	d410      	bmi.n	29e0 <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    29be:	07e3      	lsls	r3, r4, #31
    29c0:	d50c      	bpl.n	29dc <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    29c2:	4921      	ldr	r1, [pc, #132]	; (2a48 <usb_handle_function+0x98>)
    29c4:	2208      	movs	r2, #8
    29c6:	32ff      	adds	r2, #255	; 0xff
    29c8:	5c8b      	ldrb	r3, [r1, r2]
    29ca:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    29cc:	2013      	movs	r0, #19
    29ce:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    29d0:	06db      	lsls	r3, r3, #27
    29d2:	d40d      	bmi.n	29f0 <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    29d4:	07eb      	lsls	r3, r5, #31
    29d6:	d413      	bmi.n	2a00 <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    29d8:	07ad      	lsls	r5, r5, #30
    29da:	d414      	bmi.n	2a06 <usb_handle_function+0x56>
void usb_handle_function() {
    29dc:	2301      	movs	r3, #1
    29de:	e016      	b.n	2a0e <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    29e0:	4b19      	ldr	r3, [pc, #100]	; (2a48 <usb_handle_function+0x98>)
    29e2:	2208      	movs	r2, #8
    29e4:	839a      	strh	r2, [r3, #28]
		usb_reset();
    29e6:	4b19      	ldr	r3, [pc, #100]	; (2a4c <usb_handle_function+0x9c>)
    29e8:	4798      	blx	r3
		usb_cb_reset();
    29ea:	4b19      	ldr	r3, [pc, #100]	; (2a50 <usb_handle_function+0xa0>)
    29ec:	4798      	blx	r3
		goto usb_handle_function_end;
    29ee:	e026      	b.n	2a3e <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    29f0:	4818      	ldr	r0, [pc, #96]	; (2a54 <usb_handle_function+0xa4>)
    29f2:	4919      	ldr	r1, [pc, #100]	; (2a58 <usb_handle_function+0xa8>)
    29f4:	3aff      	subs	r2, #255	; 0xff
    29f6:	4b19      	ldr	r3, [pc, #100]	; (2a5c <usb_handle_function+0xac>)
    29f8:	4798      	blx	r3
			usb_handle_setup();
    29fa:	4b19      	ldr	r3, [pc, #100]	; (2a60 <usb_handle_function+0xb0>)
    29fc:	4798      	blx	r3
    29fe:	e7e9      	b.n	29d4 <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    2a00:	4b18      	ldr	r3, [pc, #96]	; (2a64 <usb_handle_function+0xb4>)
    2a02:	4798      	blx	r3
    2a04:	e7e8      	b.n	29d8 <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    2a06:	4b18      	ldr	r3, [pc, #96]	; (2a68 <usb_handle_function+0xb8>)
    2a08:	4798      	blx	r3
    2a0a:	e7e7      	b.n	29dc <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    2a0c:	3301      	adds	r3, #1
    2a0e:	4a17      	ldr	r2, [pc, #92]	; (2a6c <usb_handle_function+0xbc>)
    2a10:	7812      	ldrb	r2, [r2, #0]
    2a12:	429a      	cmp	r2, r3
    2a14:	dd11      	ble.n	2a3a <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    2a16:	2201      	movs	r2, #1
    2a18:	409a      	lsls	r2, r3
    2a1a:	4214      	tst	r4, r2
    2a1c:	d0f6      	beq.n	2a0c <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    2a1e:	001a      	movs	r2, r3
    2a20:	3208      	adds	r2, #8
    2a22:	0152      	lsls	r2, r2, #5
    2a24:	4908      	ldr	r1, [pc, #32]	; (2a48 <usb_handle_function+0x98>)
    2a26:	468c      	mov	ip, r1
    2a28:	4462      	add	r2, ip
    2a2a:	79d1      	ldrb	r1, [r2, #7]
    2a2c:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    2a2e:	015a      	lsls	r2, r3, #5
    2a30:	480f      	ldr	r0, [pc, #60]	; (2a70 <usb_handle_function+0xc0>)
    2a32:	4684      	mov	ip, r0
    2a34:	4462      	add	r2, ip
    2a36:	7011      	strb	r1, [r2, #0]
    2a38:	e7e8      	b.n	2a0c <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    2a3a:	4b0e      	ldr	r3, [pc, #56]	; (2a74 <usb_handle_function+0xc4>)
    2a3c:	4798      	blx	r3
    2a3e:	4b0e      	ldr	r3, [pc, #56]	; (2a78 <usb_handle_function+0xc8>)
    2a40:	2280      	movs	r2, #128	; 0x80
    2a42:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    2a44:	bd70      	pop	{r4, r5, r6, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	41005000 	.word	0x41005000
    2a4c:	00002595 	.word	0x00002595
    2a50:	00002bb9 	.word	0x00002bb9
    2a54:	200004c8 	.word	0x200004c8
    2a58:	200004d4 	.word	0x200004d4
    2a5c:	000051f5 	.word	0x000051f5
    2a60:	000023ad 	.word	0x000023ad
    2a64:	000024e9 	.word	0x000024e9
    2a68:	00002509 	.word	0x00002509
    2a6c:	000056f2 	.word	0x000056f2
    2a70:	41005108 	.word	0x41005108
    2a74:	00002c89 	.word	0x00002c89
    2a78:	e000e100 	.word	0xe000e100

00002a7c <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    2a7c:	b510      	push	{r4, lr}
    2a7e:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    2a80:	2000      	movs	r0, #0
    2a82:	e01c      	b.n	2abe <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    2a84:	0082      	lsls	r2, r0, #2
    2a86:	1812      	adds	r2, r2, r0
    2a88:	17d4      	asrs	r4, r2, #31
    2a8a:	2307      	movs	r3, #7
    2a8c:	0019      	movs	r1, r3
    2a8e:	4021      	ands	r1, r4
    2a90:	1889      	adds	r1, r1, r2
    2a92:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    2a94:	0f64      	lsrs	r4, r4, #29
    2a96:	1912      	adds	r2, r2, r4
    2a98:	4013      	ands	r3, r2
    2a9a:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    2a9c:	4a0c      	ldr	r2, [pc, #48]	; (2ad0 <samd_serial_number_string_descriptor+0x54>)
    2a9e:	5c8a      	ldrb	r2, [r1, r2]
    2aa0:	411a      	asrs	r2, r3
    2aa2:	4c0c      	ldr	r4, [pc, #48]	; (2ad4 <samd_serial_number_string_descriptor+0x58>)
    2aa4:	5d09      	ldrb	r1, [r1, r4]
    2aa6:	2408      	movs	r4, #8
    2aa8:	1ae3      	subs	r3, r4, r3
    2aaa:	4099      	lsls	r1, r3
    2aac:	000b      	movs	r3, r1
    2aae:	4313      	orrs	r3, r2
    2ab0:	221f      	movs	r2, #31
    2ab2:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    2ab4:	4a08      	ldr	r2, [pc, #32]	; (2ad8 <samd_serial_number_string_descriptor+0x5c>)
    2ab6:	5cd2      	ldrb	r2, [r2, r3]
    2ab8:	ab01      	add	r3, sp, #4
    2aba:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    2abc:	3001      	adds	r0, #1
    2abe:	2819      	cmp	r0, #25
    2ac0:	dde0      	ble.n	2a84 <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    2ac2:	a801      	add	r0, sp, #4
    2ac4:	2300      	movs	r3, #0
    2ac6:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    2ac8:	4b04      	ldr	r3, [pc, #16]	; (2adc <samd_serial_number_string_descriptor+0x60>)
    2aca:	4798      	blx	r3
}
    2acc:	b008      	add	sp, #32
    2ace:	bd10      	pop	{r4, pc}
    2ad0:	0080a00c 	.word	0x0080a00c
    2ad4:	0080a00d 	.word	0x0080a00d
    2ad8:	000056a0 	.word	0x000056a0
    2adc:	00002555 	.word	0x00002555

00002ae0 <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    2ae0:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    2ae2:	2208      	movs	r2, #8
    2ae4:	2103      	movs	r1, #3
    2ae6:	2081      	movs	r0, #129	; 0x81
    2ae8:	4c09      	ldr	r4, [pc, #36]	; (2b10 <usb_serial_init+0x30>)
    2aea:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2aec:	2220      	movs	r2, #32
    2aee:	2102      	movs	r1, #2
    2af0:	2002      	movs	r0, #2
    2af2:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2af4:	2220      	movs	r2, #32
    2af6:	2102      	movs	r1, #2
    2af8:	2082      	movs	r0, #130	; 0x82
    2afa:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2afc:	4c05      	ldr	r4, [pc, #20]	; (2b14 <usb_serial_init+0x34>)
    2afe:	2220      	movs	r2, #32
    2b00:	0021      	movs	r1, r4
    2b02:	2002      	movs	r0, #2
    2b04:	4b04      	ldr	r3, [pc, #16]	; (2b18 <usb_serial_init+0x38>)
    2b06:	4798      	blx	r3
	
	usb_tx_busy = false;
    2b08:	2320      	movs	r3, #32
    2b0a:	2200      	movs	r2, #0
    2b0c:	54e2      	strb	r2, [r4, r3]
}
    2b0e:	bd10      	pop	{r4, pc}
    2b10:	000026c9 	.word	0x000026c9
    2b14:	20000514 	.word	0x20000514
    2b18:	00002809 	.word	0x00002809

00002b1c <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    2b1c:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    2b1e:	2002      	movs	r0, #2
    2b20:	4b02      	ldr	r3, [pc, #8]	; (2b2c <usb_serial_out_completion+0x10>)
    2b22:	4798      	blx	r3
    2b24:	4b02      	ldr	r3, [pc, #8]	; (2b30 <usb_serial_out_completion+0x14>)
    2b26:	6258      	str	r0, [r3, #36]	; 0x24
}
    2b28:	bd10      	pop	{r4, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	00002941 	.word	0x00002941
    2b30:	20000514 	.word	0x20000514

00002b34 <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    2b34:	4b02      	ldr	r3, [pc, #8]	; (2b40 <usb_serial_in_completion+0xc>)
    2b36:	2220      	movs	r2, #32
    2b38:	2100      	movs	r1, #0
    2b3a:	5499      	strb	r1, [r3, r2]
}
    2b3c:	4770      	bx	lr
    2b3e:	46c0      	nop			; (mov r8, r8)
    2b40:	20000514 	.word	0x20000514

00002b44 <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    2b44:	b570      	push	{r4, r5, r6, lr}
    2b46:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    2b48:	2920      	cmp	r1, #32
    2b4a:	dd00      	ble.n	2b4e <usb_serial_send_buffer+0xa>
    2b4c:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    2b4e:	4d09      	ldr	r5, [pc, #36]	; (2b74 <usb_serial_send_buffer+0x30>)
    2b50:	002e      	movs	r6, r5
    2b52:	3628      	adds	r6, #40	; 0x28
    2b54:	0022      	movs	r2, r4
    2b56:	0001      	movs	r1, r0
    2b58:	0030      	movs	r0, r6
    2b5a:	4b07      	ldr	r3, [pc, #28]	; (2b78 <usb_serial_send_buffer+0x34>)
    2b5c:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    2b5e:	2300      	movs	r3, #0
    2b60:	0022      	movs	r2, r4
    2b62:	0031      	movs	r1, r6
    2b64:	2082      	movs	r0, #130	; 0x82
    2b66:	4e05      	ldr	r6, [pc, #20]	; (2b7c <usb_serial_send_buffer+0x38>)
    2b68:	47b0      	blx	r6
	usb_tx_busy = true;
    2b6a:	2320      	movs	r3, #32
    2b6c:	2201      	movs	r2, #1
    2b6e:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    2b70:	0020      	movs	r0, r4
    2b72:	bd70      	pop	{r4, r5, r6, pc}
    2b74:	20000514 	.word	0x20000514
    2b78:	000051f5 	.word	0x000051f5
    2b7c:	00002869 	.word	0x00002869

00002b80 <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    2b80:	b570      	push	{r4, r5, r6, lr}
    2b82:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    2b84:	4b09      	ldr	r3, [pc, #36]	; (2bac <usb_serial_read_buffer+0x2c>)
    2b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b88:	4299      	cmp	r1, r3
    2b8a:	d901      	bls.n	2b90 <usb_serial_read_buffer+0x10>
    2b8c:	4b07      	ldr	r3, [pc, #28]	; (2bac <usb_serial_read_buffer+0x2c>)
    2b8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    2b90:	4d06      	ldr	r5, [pc, #24]	; (2bac <usb_serial_read_buffer+0x2c>)
    2b92:	0022      	movs	r2, r4
    2b94:	0029      	movs	r1, r5
    2b96:	4b06      	ldr	r3, [pc, #24]	; (2bb0 <usb_serial_read_buffer+0x30>)
    2b98:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2b9a:	2220      	movs	r2, #32
    2b9c:	0029      	movs	r1, r5
    2b9e:	2002      	movs	r0, #2
    2ba0:	4b04      	ldr	r3, [pc, #16]	; (2bb4 <usb_serial_read_buffer+0x34>)
    2ba2:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    2ba4:	2300      	movs	r3, #0
    2ba6:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    2ba8:	0020      	movs	r0, r4
    2baa:	bd70      	pop	{r4, r5, r6, pc}
    2bac:	20000514 	.word	0x20000514
    2bb0:	000051f5 	.word	0x000051f5
    2bb4:	00002809 	.word	0x00002809

00002bb8 <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    2bb8:	4770      	bx	lr
	...

00002bbc <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    2bbc:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    2bbe:	4b2a      	ldr	r3, [pc, #168]	; (2c68 <usb_cb_control_setup+0xac>)
    2bc0:	781a      	ldrb	r2, [r3, #0]
    2bc2:	2360      	movs	r3, #96	; 0x60
    2bc4:	4013      	ands	r3, r2
    2bc6:	2b20      	cmp	r3, #32
    2bc8:	d000      	beq.n	2bcc <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    2bca:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    2bcc:	4b26      	ldr	r3, [pc, #152]	; (2c68 <usb_cb_control_setup+0xac>)
    2bce:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    2bd0:	231f      	movs	r3, #31
    2bd2:	4013      	ands	r3, r2
    2bd4:	2b01      	cmp	r3, #1
    2bd6:	d144      	bne.n	2c62 <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    2bd8:	2900      	cmp	r1, #0
    2bda:	d1f6      	bne.n	2bca <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    2bdc:	4b22      	ldr	r3, [pc, #136]	; (2c68 <usb_cb_control_setup+0xac>)
    2bde:	785b      	ldrb	r3, [r3, #1]
    2be0:	2b22      	cmp	r3, #34	; 0x22
    2be2:	d031      	beq.n	2c48 <usb_cb_control_setup+0x8c>
    2be4:	d80c      	bhi.n	2c00 <usb_cb_control_setup+0x44>
    2be6:	2b20      	cmp	r3, #32
    2be8:	d026      	beq.n	2c38 <usb_cb_control_setup+0x7c>
    2bea:	2b21      	cmp	r3, #33	; 0x21
    2bec:	d136      	bne.n	2c5c <usb_cb_control_setup+0xa0>
    2bee:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2bf0:	2b06      	cmp	r3, #6
    2bf2:	d823      	bhi.n	2c3c <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    2bf4:	4a1d      	ldr	r2, [pc, #116]	; (2c6c <usb_cb_control_setup+0xb0>)
    2bf6:	5cd1      	ldrb	r1, [r2, r3]
    2bf8:	4a1d      	ldr	r2, [pc, #116]	; (2c70 <usb_cb_control_setup+0xb4>)
    2bfa:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2bfc:	3301      	adds	r3, #1
    2bfe:	e7f7      	b.n	2bf0 <usb_cb_control_setup+0x34>
    2c00:	2b23      	cmp	r3, #35	; 0x23
    2c02:	d12b      	bne.n	2c5c <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    2c04:	2000      	movs	r0, #0
    2c06:	4b1b      	ldr	r3, [pc, #108]	; (2c74 <usb_cb_control_setup+0xb8>)
    2c08:	4798      	blx	r3
					usb_ep0_out();
    2c0a:	4b1b      	ldr	r3, [pc, #108]	; (2c78 <usb_cb_control_setup+0xbc>)
    2c0c:	4798      	blx	r3
					break;
    2c0e:	e7dc      	b.n	2bca <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    2c10:	4b16      	ldr	r3, [pc, #88]	; (2c6c <usb_cb_control_setup+0xb0>)
    2c12:	491a      	ldr	r1, [pc, #104]	; (2c7c <usb_cb_control_setup+0xc0>)
    2c14:	5c89      	ldrb	r1, [r1, r2]
    2c16:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    2c18:	3201      	adds	r2, #1
    2c1a:	4b13      	ldr	r3, [pc, #76]	; (2c68 <usb_cb_control_setup+0xac>)
    2c1c:	7999      	ldrb	r1, [r3, #6]
    2c1e:	79db      	ldrb	r3, [r3, #7]
    2c20:	021b      	lsls	r3, r3, #8
    2c22:	430b      	orrs	r3, r1
    2c24:	4293      	cmp	r3, r2
    2c26:	dd01      	ble.n	2c2c <usb_cb_control_setup+0x70>
    2c28:	2a06      	cmp	r2, #6
    2c2a:	d9f1      	bls.n	2c10 <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    2c2c:	2000      	movs	r0, #0
    2c2e:	4b11      	ldr	r3, [pc, #68]	; (2c74 <usb_cb_control_setup+0xb8>)
    2c30:	4798      	blx	r3
					usb_ep0_out();
    2c32:	4b11      	ldr	r3, [pc, #68]	; (2c78 <usb_cb_control_setup+0xbc>)
    2c34:	4798      	blx	r3
					break;
    2c36:	e7c8      	b.n	2bca <usb_cb_control_setup+0xe>
    2c38:	2200      	movs	r2, #0
    2c3a:	e7ee      	b.n	2c1a <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    2c3c:	2007      	movs	r0, #7
    2c3e:	4b0d      	ldr	r3, [pc, #52]	; (2c74 <usb_cb_control_setup+0xb8>)
    2c40:	4798      	blx	r3
					usb_ep0_out();
    2c42:	4b0d      	ldr	r3, [pc, #52]	; (2c78 <usb_cb_control_setup+0xbc>)
    2c44:	4798      	blx	r3
					break;
    2c46:	e7c0      	b.n	2bca <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    2c48:	4b07      	ldr	r3, [pc, #28]	; (2c68 <usb_cb_control_setup+0xac>)
    2c4a:	789a      	ldrb	r2, [r3, #2]
    2c4c:	4b0c      	ldr	r3, [pc, #48]	; (2c80 <usb_cb_control_setup+0xc4>)
    2c4e:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    2c50:	2000      	movs	r0, #0
    2c52:	4b08      	ldr	r3, [pc, #32]	; (2c74 <usb_cb_control_setup+0xb8>)
    2c54:	4798      	blx	r3
					usb_ep0_out();
    2c56:	4b08      	ldr	r3, [pc, #32]	; (2c78 <usb_cb_control_setup+0xbc>)
    2c58:	4798      	blx	r3
					break;
    2c5a:	e7b6      	b.n	2bca <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    2c5c:	4b09      	ldr	r3, [pc, #36]	; (2c84 <usb_cb_control_setup+0xc8>)
    2c5e:	4798      	blx	r3
					break;
    2c60:	e7b3      	b.n	2bca <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    2c62:	4b08      	ldr	r3, [pc, #32]	; (2c84 <usb_cb_control_setup+0xc8>)
    2c64:	4798      	blx	r3
}
    2c66:	e7b0      	b.n	2bca <usb_cb_control_setup+0xe>
    2c68:	200004c8 	.word	0x200004c8
    2c6c:	20000048 	.word	0x20000048
    2c70:	20000484 	.word	0x20000484
    2c74:	00002989 	.word	0x00002989
    2c78:	00002971 	.word	0x00002971
    2c7c:	200004d4 	.word	0x200004d4
    2c80:	2000055c 	.word	0x2000055c
    2c84:	000029a1 	.word	0x000029a1

00002c88 <usb_cb_completion>:

void usb_cb_completion(void) {
    2c88:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    2c8a:	2002      	movs	r0, #2
    2c8c:	4b0a      	ldr	r3, [pc, #40]	; (2cb8 <usb_cb_completion+0x30>)
    2c8e:	4798      	blx	r3
    2c90:	2800      	cmp	r0, #0
    2c92:	d105      	bne.n	2ca0 <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    2c94:	2082      	movs	r0, #130	; 0x82
    2c96:	4b08      	ldr	r3, [pc, #32]	; (2cb8 <usb_cb_completion+0x30>)
    2c98:	4798      	blx	r3
    2c9a:	2800      	cmp	r0, #0
    2c9c:	d106      	bne.n	2cac <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    2c9e:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    2ca0:	2002      	movs	r0, #2
    2ca2:	4b06      	ldr	r3, [pc, #24]	; (2cbc <usb_cb_completion+0x34>)
    2ca4:	4798      	blx	r3
		usb_serial_out_completion();
    2ca6:	4b06      	ldr	r3, [pc, #24]	; (2cc0 <usb_cb_completion+0x38>)
    2ca8:	4798      	blx	r3
    2caa:	e7f3      	b.n	2c94 <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    2cac:	2082      	movs	r0, #130	; 0x82
    2cae:	4b03      	ldr	r3, [pc, #12]	; (2cbc <usb_cb_completion+0x34>)
    2cb0:	4798      	blx	r3
		usb_serial_in_completion();
    2cb2:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <usb_cb_completion+0x3c>)
    2cb4:	4798      	blx	r3
}
    2cb6:	e7f2      	b.n	2c9e <usb_cb_completion+0x16>
    2cb8:	000028d5 	.word	0x000028d5
    2cbc:	0000290d 	.word	0x0000290d
    2cc0:	00002b1d 	.word	0x00002b1d
    2cc4:	00002b35 	.word	0x00002b35

00002cc8 <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    2cc8:	4770      	bx	lr

00002cca <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    2cca:	4770      	bx	lr

00002ccc <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    2ccc:	b510      	push	{r4, lr}
	if (config <= 1) {
    2cce:	2801      	cmp	r0, #1
    2cd0:	d901      	bls.n	2cd6 <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    2cd2:	2000      	movs	r0, #0
}
    2cd4:	bd10      	pop	{r4, pc}
		usb_serial_init();
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <usb_cb_set_configuration+0x14>)
    2cd8:	4798      	blx	r3
		return true;
    2cda:	2001      	movs	r0, #1
    2cdc:	e7fa      	b.n	2cd4 <usb_cb_set_configuration+0x8>
    2cde:	46c0      	nop			; (mov r8, r8)
    2ce0:	00002ae1 	.word	0x00002ae1

00002ce4 <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    2ce4:	2800      	cmp	r0, #0
    2ce6:	d003      	beq.n	2cf0 <usb_cb_set_interface+0xc>
    2ce8:	2801      	cmp	r0, #1
    2cea:	d005      	beq.n	2cf8 <usb_cb_set_interface+0x14>
    2cec:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    2cee:	4770      	bx	lr
		if (altsetting == 0) return true;
    2cf0:	2900      	cmp	r1, #0
    2cf2:	d005      	beq.n	2d00 <usb_cb_set_interface+0x1c>
	return false;
    2cf4:	2000      	movs	r0, #0
    2cf6:	e7fa      	b.n	2cee <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2cf8:	2900      	cmp	r1, #0
    2cfa:	d003      	beq.n	2d04 <usb_cb_set_interface+0x20>
	return false;
    2cfc:	2000      	movs	r0, #0
    2cfe:	e7f6      	b.n	2cee <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2d00:	2001      	movs	r0, #1
    2d02:	e7f4      	b.n	2cee <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2d04:	2001      	movs	r0, #1
    2d06:	e7f2      	b.n	2cee <usb_cb_set_interface+0xa>

00002d08 <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    2d08:	b510      	push	{r4, lr}
    2d0a:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    2d0c:	2802      	cmp	r0, #2
    2d0e:	d028      	beq.n	2d62 <usb_cb_get_descriptor+0x5a>
    2d10:	2803      	cmp	r0, #3
    2d12:	d008      	beq.n	2d26 <usb_cb_get_descriptor+0x1e>
    2d14:	2801      	cmp	r0, #1
    2d16:	d003      	beq.n	2d20 <usb_cb_get_descriptor+0x18>
    2d18:	2000      	movs	r0, #0
    2d1a:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    2d1c:	6023      	str	r3, [r4, #0]
	return size;
    2d1e:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    2d20:	3011      	adds	r0, #17
		address = &device_descriptor;
    2d22:	4b11      	ldr	r3, [pc, #68]	; (2d68 <usb_cb_get_descriptor+0x60>)
    2d24:	e7fa      	b.n	2d1c <usb_cb_get_descriptor+0x14>
		switch (index) {
    2d26:	2902      	cmp	r1, #2
    2d28:	d00f      	beq.n	2d4a <usb_cb_get_descriptor+0x42>
    2d2a:	d808      	bhi.n	2d3e <usb_cb_get_descriptor+0x36>
    2d2c:	2900      	cmp	r1, #0
    2d2e:	d015      	beq.n	2d5c <usb_cb_get_descriptor+0x54>
    2d30:	2901      	cmp	r1, #1
    2d32:	d10f      	bne.n	2d54 <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    2d34:	480d      	ldr	r0, [pc, #52]	; (2d6c <usb_cb_get_descriptor+0x64>)
    2d36:	4b0e      	ldr	r3, [pc, #56]	; (2d70 <usb_cb_get_descriptor+0x68>)
    2d38:	4798      	blx	r3
    2d3a:	0003      	movs	r3, r0
			break;
    2d3c:	e00f      	b.n	2d5e <usb_cb_get_descriptor+0x56>
    2d3e:	2903      	cmp	r1, #3
    2d40:	d108      	bne.n	2d54 <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    2d42:	4b0c      	ldr	r3, [pc, #48]	; (2d74 <usb_cb_get_descriptor+0x6c>)
    2d44:	4798      	blx	r3
    2d46:	0003      	movs	r3, r0
			break;
    2d48:	e009      	b.n	2d5e <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    2d4a:	480b      	ldr	r0, [pc, #44]	; (2d78 <usb_cb_get_descriptor+0x70>)
    2d4c:	4b08      	ldr	r3, [pc, #32]	; (2d70 <usb_cb_get_descriptor+0x68>)
    2d4e:	4798      	blx	r3
    2d50:	0003      	movs	r3, r0
			break;
    2d52:	e004      	b.n	2d5e <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    2d54:	2300      	movs	r3, #0
    2d56:	6023      	str	r3, [r4, #0]
			return 0;
    2d58:	2000      	movs	r0, #0
    2d5a:	e7e0      	b.n	2d1e <usb_cb_get_descriptor+0x16>
    2d5c:	4b07      	ldr	r3, [pc, #28]	; (2d7c <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    2d5e:	7818      	ldrb	r0, [r3, #0]
		break;
    2d60:	e7dc      	b.n	2d1c <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    2d62:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    2d64:	4b06      	ldr	r3, [pc, #24]	; (2d80 <usb_cb_get_descriptor+0x78>)
    2d66:	e7d9      	b.n	2d1c <usb_cb_get_descriptor+0x14>
    2d68:	000056e0 	.word	0x000056e0
    2d6c:	000056c4 	.word	0x000056c4
    2d70:	00002555 	.word	0x00002555
    2d74:	00002a7d 	.word	0x00002a7d
    2d78:	000056d4 	.word	0x000056d4
    2d7c:	000056dc 	.word	0x000056dc
    2d80:	20000050 	.word	0x20000050

00002d84 <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    2d84:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    2d86:	4b07      	ldr	r3, [pc, #28]	; (2da4 <rtos_init+0x20>)
    2d88:	4798      	blx	r3
	#endif
	
	time_init();
    2d8a:	4b07      	ldr	r3, [pc, #28]	; (2da8 <rtos_init+0x24>)
    2d8c:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    2d8e:	2180      	movs	r1, #128	; 0x80
    2d90:	03c9      	lsls	r1, r1, #15
    2d92:	2001      	movs	r0, #1
    2d94:	4b05      	ldr	r3, [pc, #20]	; (2dac <rtos_init+0x28>)
    2d96:	4798      	blx	r3
	#endif
	
	init_process_queue();
    2d98:	4b05      	ldr	r3, [pc, #20]	; (2db0 <rtos_init+0x2c>)
    2d9a:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    2d9c:	4b05      	ldr	r3, [pc, #20]	; (2db4 <rtos_init+0x30>)
    2d9e:	4798      	blx	r3
	#endif
	
	return true;
}
    2da0:	2001      	movs	r0, #1
    2da2:	bd10      	pop	{r4, pc}
    2da4:	000020d5 	.word	0x000020d5
    2da8:	000021a9 	.word	0x000021a9
    2dac:	00001bb9 	.word	0x00001bb9
    2db0:	00002fa5 	.word	0x00002fa5
    2db4:	0000221d 	.word	0x0000221d

00002db8 <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    2db8:	b570      	push	{r4, r5, r6, lr}
    2dba:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    2dbc:	e011      	b.n	2de2 <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    2dbe:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    2dc0:	2680      	movs	r6, #128	; 0x80
    2dc2:	03f6      	lsls	r6, r6, #15
    2dc4:	0031      	movs	r1, r6
    2dc6:	2001      	movs	r0, #1
    2dc8:	4b0c      	ldr	r3, [pc, #48]	; (2dfc <morse+0x44>)
    2dca:	4798      	blx	r3
		delay_ms(delay);
    2dcc:	480c      	ldr	r0, [pc, #48]	; (2e00 <morse+0x48>)
    2dce:	4368      	muls	r0, r5
    2dd0:	4d0c      	ldr	r5, [pc, #48]	; (2e04 <morse+0x4c>)
    2dd2:	47a8      	blx	r5
		led_off();
    2dd4:	0031      	movs	r1, r6
    2dd6:	2001      	movs	r0, #1
    2dd8:	4b0b      	ldr	r3, [pc, #44]	; (2e08 <morse+0x50>)
    2dda:	4798      	blx	r3
		delay_ms(100);
    2ddc:	480b      	ldr	r0, [pc, #44]	; (2e0c <morse+0x54>)
    2dde:	47a8      	blx	r5
		++c;
    2de0:	3401      	adds	r4, #1
	while (*c != '\0') {
    2de2:	7823      	ldrb	r3, [r4, #0]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d007      	beq.n	2df8 <morse+0x40>
		if (*c == '.') delay = 100;
    2de8:	2b2e      	cmp	r3, #46	; 0x2e
    2dea:	d0e8      	beq.n	2dbe <morse+0x6>
		else if (*c == '-') delay = 200;
    2dec:	2b2d      	cmp	r3, #45	; 0x2d
    2dee:	d001      	beq.n	2df4 <morse+0x3c>
		int delay = 0;
    2df0:	2500      	movs	r5, #0
    2df2:	e7e5      	b.n	2dc0 <morse+0x8>
		else if (*c == '-') delay = 200;
    2df4:	25c8      	movs	r5, #200	; 0xc8
    2df6:	e7e3      	b.n	2dc0 <morse+0x8>
	}
}
    2df8:	bd70      	pop	{r4, r5, r6, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	00001bc9 	.word	0x00001bc9
    2e00:	00001770 	.word	0x00001770
    2e04:	00002199 	.word	0x00002199
    2e08:	00001bd9 	.word	0x00001bd9
    2e0c:	000927c0 	.word	0x000927c0

00002e10 <SOS>:

void SOS() {
    2e10:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2e12:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    2e14:	4803      	ldr	r0, [pc, #12]	; (2e24 <SOS+0x14>)
    2e16:	4b04      	ldr	r3, [pc, #16]	; (2e28 <SOS+0x18>)
    2e18:	4798      	blx	r3
		delay_ms(600);
    2e1a:	4804      	ldr	r0, [pc, #16]	; (2e2c <SOS+0x1c>)
    2e1c:	4b04      	ldr	r3, [pc, #16]	; (2e30 <SOS+0x20>)
    2e1e:	4798      	blx	r3
	while(1) {
    2e20:	e7f8      	b.n	2e14 <SOS+0x4>
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	000056f4 	.word	0x000056f4
    2e28:	00002db9 	.word	0x00002db9
    2e2c:	0036ee80 	.word	0x0036ee80
    2e30:	00002199 	.word	0x00002199

00002e34 <rtos_main>:
int rtos_main(void) {
    2e34:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    2e36:	4b13      	ldr	r3, [pc, #76]	; (2e84 <rtos_main+0x50>)
    2e38:	4798      	blx	r3
	mainproc = &_mainproc;
    2e3a:	4c13      	ldr	r4, [pc, #76]	; (2e88 <rtos_main+0x54>)
    2e3c:	1d20      	adds	r0, r4, #4
    2e3e:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    2e40:	2380      	movs	r3, #128	; 0x80
    2e42:	22c0      	movs	r2, #192	; 0xc0
    2e44:	4911      	ldr	r1, [pc, #68]	; (2e8c <rtos_main+0x58>)
    2e46:	00db      	lsls	r3, r3, #3
    2e48:	0092      	lsls	r2, r2, #2
    2e4a:	4d11      	ldr	r5, [pc, #68]	; (2e90 <rtos_main+0x5c>)
    2e4c:	47a8      	blx	r5
	dispatch_process(mainproc);
    2e4e:	6820      	ldr	r0, [r4, #0]
    2e50:	4b10      	ldr	r3, [pc, #64]	; (2e94 <rtos_main+0x60>)
    2e52:	4798      	blx	r3
	while (process_count) {
    2e54:	e001      	b.n	2e5a <rtos_main+0x26>
		dispatch_process(lastproc);
    2e56:	4b0f      	ldr	r3, [pc, #60]	; (2e94 <rtos_main+0x60>)
    2e58:	4798      	blx	r3
	while (process_count) {
    2e5a:	4b0f      	ldr	r3, [pc, #60]	; (2e98 <rtos_main+0x64>)
    2e5c:	681b      	ldr	r3, [r3, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d003      	beq.n	2e6a <rtos_main+0x36>
		if (!(lastproc = next_process())) break;
    2e62:	4b0e      	ldr	r3, [pc, #56]	; (2e9c <rtos_main+0x68>)
    2e64:	4798      	blx	r3
    2e66:	2800      	cmp	r0, #0
    2e68:	d1f5      	bne.n	2e56 <rtos_main+0x22>
	if (process_count) SOS();
    2e6a:	4b0b      	ldr	r3, [pc, #44]	; (2e98 <rtos_main+0x64>)
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d106      	bne.n	2e80 <rtos_main+0x4c>
	led_on();
    2e72:	2180      	movs	r1, #128	; 0x80
    2e74:	03c9      	lsls	r1, r1, #15
    2e76:	2001      	movs	r0, #1
    2e78:	4b09      	ldr	r3, [pc, #36]	; (2ea0 <rtos_main+0x6c>)
    2e7a:	4798      	blx	r3
}
    2e7c:	2000      	movs	r0, #0
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    2e80:	4b08      	ldr	r3, [pc, #32]	; (2ea4 <rtos_main+0x70>)
    2e82:	4798      	blx	r3
    2e84:	00002d85 	.word	0x00002d85
    2e88:	200005e0 	.word	0x200005e0
    2e8c:	00001055 	.word	0x00001055
    2e90:	00002ed1 	.word	0x00002ed1
    2e94:	00002fb9 	.word	0x00002fb9
    2e98:	20000618 	.word	0x20000618
    2e9c:	0000306d 	.word	0x0000306d
    2ea0:	00001bc9 	.word	0x00001bc9
    2ea4:	00002e11 	.word	0x00002e11

00002ea8 <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    2ea8:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    2eaa:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <TC4_Handler+0x18>)
    2eac:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    2eae:	4b05      	ldr	r3, [pc, #20]	; (2ec4 <TC4_Handler+0x1c>)
    2eb0:	681c      	ldr	r4, [r3, #0]
    2eb2:	4b05      	ldr	r3, [pc, #20]	; (2ec8 <TC4_Handler+0x20>)
    2eb4:	4798      	blx	r3
    2eb6:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    2eb8:	2001      	movs	r0, #1
    2eba:	4b04      	ldr	r3, [pc, #16]	; (2ecc <TC4_Handler+0x24>)
    2ebc:	4798      	blx	r3
}
    2ebe:	bd10      	pop	{r4, pc}
    2ec0:	0000225d 	.word	0x0000225d
    2ec4:	2000060c 	.word	0x2000060c
    2ec8:	00002211 	.word	0x00002211
    2ecc:	000031dd 	.word	0x000031dd

00002ed0 <init_process>:
Process* current_process;

//uint32_t process_pc;


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    2ed0:	b510      	push	{r4, lr}
    2ed2:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    2ed4:	4807      	ldr	r0, [pc, #28]	; (2ef4 <init_process+0x24>)
    2ed6:	1a82      	subs	r2, r0, r2
    2ed8:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    2eda:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    2edc:	1e4b      	subs	r3, r1, #1
    2ede:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    2ee0:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    2ee2:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    2ee4:	4b04      	ldr	r3, [pc, #16]	; (2ef8 <init_process+0x28>)
    2ee6:	4798      	blx	r3
    2ee8:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    2eea:	2300      	movs	r3, #0
    2eec:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    2eee:	2224      	movs	r2, #36	; 0x24
    2ef0:	54a3      	strb	r3, [r4, r2]
	#endif
}
    2ef2:	bd10      	pop	{r4, pc}
    2ef4:	20002860 	.word	0x20002860
    2ef8:	00002211 	.word	0x00002211

00002efc <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    2efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2efe:	465f      	mov	r7, fp
    2f00:	4656      	mov	r6, sl
    2f02:	464d      	mov	r5, r9
    2f04:	4644      	mov	r4, r8
    2f06:	b4f0      	push	{r4, r5, r6, r7}
    2f08:	b083      	sub	sp, #12
    2f0a:	9001      	str	r0, [sp, #4]
    2f0c:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    2f0e:	2324      	movs	r3, #36	; 0x24
    2f10:	5cc3      	ldrb	r3, [r0, r3]
    2f12:	2b00      	cmp	r3, #0
    2f14:	d124      	bne.n	2f60 <switch_process+0x64>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    2f16:	4b1c      	ldr	r3, [pc, #112]	; (2f88 <switch_process+0x8c>)
    2f18:	9a01      	ldr	r2, [sp, #4]
    2f1a:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    2f1c:	2303      	movs	r3, #3
    2f1e:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    2f20:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2f22:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2f26:	2302      	movs	r3, #2
    2f28:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2f2c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f30:	b662      	cpsie	i
	USE_PSP();
	
	__enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    2f32:	9201      	str	r2, [sp, #4]
    2f34:	6813      	ldr	r3, [r2, #0]
    2f36:	3301      	adds	r3, #1
    2f38:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2f3a:	b672      	cpsid	i
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2f3c:	2300      	movs	r3, #0
    2f3e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2f42:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    2f46:	3324      	adds	r3, #36	; 0x24
    2f48:	9a01      	ldr	r2, [sp, #4]
    2f4a:	5cd3      	ldrb	r3, [r2, r3]
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d118      	bne.n	2f82 <switch_process+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
    2f50:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    2f52:	b003      	add	sp, #12
    2f54:	bcf0      	pop	{r4, r5, r6, r7}
    2f56:	46bb      	mov	fp, r7
    2f58:	46b2      	mov	sl, r6
    2f5a:	46a9      	mov	r9, r5
    2f5c:	46a0      	mov	r8, r4
    2f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    2f60:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <switch_process+0x90>)
    2f62:	4798      	blx	r3
    2f64:	4b0a      	ldr	r3, [pc, #40]	; (2f90 <switch_process+0x94>)
    2f66:	681a      	ldr	r2, [r3, #0]
    2f68:	0153      	lsls	r3, r2, #5
    2f6a:	1a9b      	subs	r3, r3, r2
    2f6c:	009b      	lsls	r3, r3, #2
    2f6e:	189b      	adds	r3, r3, r2
    2f70:	00db      	lsls	r3, r3, #3
    2f72:	18c0      	adds	r0, r0, r3
    2f74:	4b07      	ldr	r3, [pc, #28]	; (2f94 <switch_process+0x98>)
    2f76:	4798      	blx	r3
		preempt_clear_interrupts();
    2f78:	4b07      	ldr	r3, [pc, #28]	; (2f98 <switch_process+0x9c>)
    2f7a:	4798      	blx	r3
		preempt_enable_interrupts();
    2f7c:	4b07      	ldr	r3, [pc, #28]	; (2f9c <switch_process+0xa0>)
    2f7e:	4798      	blx	r3
    2f80:	e7c9      	b.n	2f16 <switch_process+0x1a>
		preempt_disable_interrupts();
    2f82:	4b07      	ldr	r3, [pc, #28]	; (2fa0 <switch_process+0xa4>)
    2f84:	4798      	blx	r3
    2f86:	e7e3      	b.n	2f50 <switch_process+0x54>
    2f88:	2000060c 	.word	0x2000060c
    2f8c:	00002211 	.word	0x00002211
    2f90:	00005730 	.word	0x00005730
    2f94:	00002279 	.word	0x00002279
    2f98:	0000225d 	.word	0x0000225d
    2f9c:	00002235 	.word	0x00002235
    2fa0:	00002245 	.word	0x00002245

00002fa4 <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    2fa4:	4b03      	ldr	r3, [pc, #12]	; (2fb4 <init_process_queue+0x10>)
    2fa6:	2200      	movs	r2, #0
    2fa8:	605a      	str	r2, [r3, #4]
    2faa:	609a      	str	r2, [r3, #8]
	current_process = 0;
    2fac:	601a      	str	r2, [r3, #0]
	process_count = 0;
    2fae:	60da      	str	r2, [r3, #12]
}
    2fb0:	4770      	bx	lr
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	2000060c 	.word	0x2000060c

00002fb8 <dispatch_process>:

bool dispatch_process(Process* process) {
    2fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fba:	464f      	mov	r7, r9
    2fbc:	4646      	mov	r6, r8
    2fbe:	b4c0      	push	{r6, r7}
    2fc0:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    2fc2:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    2fc4:	6983      	ldr	r3, [r0, #24]
    2fc6:	2b03      	cmp	r3, #3
    2fc8:	d049      	beq.n	305e <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    2fca:	4b26      	ldr	r3, [pc, #152]	; (3064 <dispatch_process+0xac>)
    2fcc:	68db      	ldr	r3, [r3, #12]
    2fce:	2b0f      	cmp	r3, #15
    2fd0:	dd04      	ble.n	2fdc <dispatch_process+0x24>
    2fd2:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    2fd4:	bcc0      	pop	{r6, r7}
    2fd6:	46b9      	mov	r9, r7
    2fd8:	46b0      	mov	r8, r6
    2fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    2fdc:	4b22      	ldr	r3, [pc, #136]	; (3068 <dispatch_process+0xb0>)
    2fde:	4798      	blx	r3
    2fe0:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    2fe2:	464b      	mov	r3, r9
    2fe4:	699b      	ldr	r3, [r3, #24]
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d007      	beq.n	2ffa <dispatch_process+0x42>
    2fea:	464b      	mov	r3, r9
    2fec:	695f      	ldr	r7, [r3, #20]
    2fee:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    2ff0:	4b1c      	ldr	r3, [pc, #112]	; (3064 <dispatch_process+0xac>)
    2ff2:	685b      	ldr	r3, [r3, #4]
    2ff4:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    2ff6:	2500      	movs	r5, #0
    2ff8:	e00c      	b.n	3014 <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    2ffa:	2700      	movs	r7, #0
    2ffc:	e7f8      	b.n	2ff0 <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    2ffe:	3110      	adds	r1, #16
    3000:	e00e      	b.n	3020 <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    3002:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    3004:	42ba      	cmp	r2, r7
    3006:	dd16      	ble.n	3036 <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    3008:	4a16      	ldr	r2, [pc, #88]	; (3064 <dispatch_process+0xac>)
    300a:	009e      	lsls	r6, r3, #2
    300c:	1993      	adds	r3, r2, r6
    300e:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    3010:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    3012:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    3014:	4a13      	ldr	r2, [pc, #76]	; (3064 <dispatch_process+0xac>)
    3016:	68d6      	ldr	r6, [r2, #12]
    3018:	42ae      	cmp	r6, r5
    301a:	dd0c      	ble.n	3036 <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    301c:	1e59      	subs	r1, r3, #1
    301e:	d4ee      	bmi.n	2ffe <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    3020:	4a10      	ldr	r2, [pc, #64]	; (3064 <dispatch_process+0xac>)
    3022:	0088      	lsls	r0, r1, #2
    3024:	1812      	adds	r2, r2, r0
    3026:	6910      	ldr	r0, [r2, #16]
    3028:	6982      	ldr	r2, [r0, #24]
    302a:	2a00      	cmp	r2, #0
    302c:	d0e9      	beq.n	3002 <dispatch_process+0x4a>
    302e:	6942      	ldr	r2, [r0, #20]
    3030:	4644      	mov	r4, r8
    3032:	1b12      	subs	r2, r2, r4
    3034:	e7e6      	b.n	3004 <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    3036:	4a0b      	ldr	r2, [pc, #44]	; (3064 <dispatch_process+0xac>)
    3038:	009b      	lsls	r3, r3, #2
    303a:	18d3      	adds	r3, r2, r3
    303c:	4649      	mov	r1, r9
    303e:	6119      	str	r1, [r3, #16]
	++process_count;
    3040:	1c73      	adds	r3, r6, #1
    3042:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    3044:	4666      	mov	r6, ip
    3046:	3601      	adds	r6, #1
    3048:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    304a:	17f1      	asrs	r1, r6, #31
    304c:	0f09      	lsrs	r1, r1, #28
    304e:	1876      	adds	r6, r6, r1
    3050:	230f      	movs	r3, #15
    3052:	4033      	ands	r3, r6
    3054:	1a5b      	subs	r3, r3, r1
    3056:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    3058:	b662      	cpsie	i
	return true;
    305a:	2001      	movs	r0, #1
    305c:	e7ba      	b.n	2fd4 <dispatch_process+0x1c>
		return false;
    305e:	2000      	movs	r0, #0
    3060:	e7b8      	b.n	2fd4 <dispatch_process+0x1c>
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	2000060c 	.word	0x2000060c
    3068:	00002211 	.word	0x00002211

0000306c <next_process>:

Process* next_process() {
    306c:	b5f0      	push	{r4, r5, r6, r7, lr}
    306e:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    3070:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    3072:	4b57      	ldr	r3, [pc, #348]	; (31d0 <next_process+0x164>)
    3074:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    3076:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    3078:	e015      	b.n	30a6 <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    307a:	6823      	ldr	r3, [r4, #0]
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	e03d      	b.n	30fc <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    3080:	6823      	ldr	r3, [r4, #0]
    3082:	881b      	ldrh	r3, [r3, #0]
    3084:	e03a      	b.n	30fc <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    3086:	6863      	ldr	r3, [r4, #4]
    3088:	42bb      	cmp	r3, r7
    308a:	d041      	beq.n	3110 <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    308c:	466b      	mov	r3, sp
    308e:	3307      	adds	r3, #7
    3090:	781b      	ldrb	r3, [r3, #0]
    3092:	2b00      	cmp	r3, #0
    3094:	d163      	bne.n	315e <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    3096:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    3098:	17f3      	asrs	r3, r6, #31
    309a:	0f1b      	lsrs	r3, r3, #28
    309c:	18f6      	adds	r6, r6, r3
    309e:	220f      	movs	r2, #15
    30a0:	4016      	ands	r6, r2
    30a2:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    30a4:	3501      	adds	r5, #1
    30a6:	4b4a      	ldr	r3, [pc, #296]	; (31d0 <next_process+0x164>)
    30a8:	68db      	ldr	r3, [r3, #12]
    30aa:	42ab      	cmp	r3, r5
    30ac:	dd59      	ble.n	3162 <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    30ae:	4b48      	ldr	r3, [pc, #288]	; (31d0 <next_process+0x164>)
    30b0:	00b2      	lsls	r2, r6, #2
    30b2:	189a      	adds	r2, r3, r2
    30b4:	6912      	ldr	r2, [r2, #16]
    30b6:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    30b8:	6993      	ldr	r3, [r2, #24]
    30ba:	2b02      	cmp	r3, #2
    30bc:	d151      	bne.n	3162 <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    30be:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    30c0:	466b      	mov	r3, sp
    30c2:	2200      	movs	r2, #0
    30c4:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    30c6:	68e3      	ldr	r3, [r4, #12]
    30c8:	2b00      	cmp	r3, #0
    30ca:	d001      	beq.n	30d0 <next_process+0x64>
    30cc:	68e3      	ldr	r3, [r4, #12]
    30ce:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    30d0:	4b3f      	ldr	r3, [pc, #252]	; (31d0 <next_process+0x164>)
    30d2:	681a      	ldr	r2, [r3, #0]
    30d4:	6993      	ldr	r3, [r2, #24]
    30d6:	2b01      	cmp	r3, #1
    30d8:	d043      	beq.n	3162 <next_process+0xf6>
			if (data->mask) {
    30da:	68a3      	ldr	r3, [r4, #8]
    30dc:	2b00      	cmp	r3, #0
    30de:	d00f      	beq.n	3100 <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    30e0:	68a1      	ldr	r1, [r4, #8]
    30e2:	23ff      	movs	r3, #255	; 0xff
    30e4:	400b      	ands	r3, r1
    30e6:	68a1      	ldr	r1, [r4, #8]
    30e8:	428b      	cmp	r3, r1
    30ea:	d0c6      	beq.n	307a <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    30ec:	68a3      	ldr	r3, [r4, #8]
    30ee:	041b      	lsls	r3, r3, #16
    30f0:	0c1b      	lsrs	r3, r3, #16
    30f2:	68a1      	ldr	r1, [r4, #8]
    30f4:	428b      	cmp	r3, r1
    30f6:	d0c3      	beq.n	3080 <next_process+0x14>
				else variable = *(data->variable);
    30f8:	6823      	ldr	r3, [r4, #0]
    30fa:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    30fc:	68a7      	ldr	r7, [r4, #8]
    30fe:	401f      	ands	r7, r3
			switch (data->condition) {
    3100:	7c23      	ldrb	r3, [r4, #16]
    3102:	b2db      	uxtb	r3, r3
    3104:	2b06      	cmp	r3, #6
    3106:	d861      	bhi.n	31cc <next_process+0x160>
    3108:	009b      	lsls	r3, r3, #2
    310a:	4932      	ldr	r1, [pc, #200]	; (31d4 <next_process+0x168>)
    310c:	58cb      	ldr	r3, [r1, r3]
    310e:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    3110:	466b      	mov	r3, sp
    3112:	2101      	movs	r1, #1
    3114:	71d9      	strb	r1, [r3, #7]
    3116:	e7b9      	b.n	308c <next_process+0x20>
				if (variable != data->value) unblocked = true;
    3118:	6863      	ldr	r3, [r4, #4]
    311a:	42bb      	cmp	r3, r7
    311c:	d0b6      	beq.n	308c <next_process+0x20>
    311e:	466b      	mov	r3, sp
    3120:	2101      	movs	r1, #1
    3122:	71d9      	strb	r1, [r3, #7]
    3124:	e7b2      	b.n	308c <next_process+0x20>
				if (variable > data->value) unblocked = true;
    3126:	6863      	ldr	r3, [r4, #4]
    3128:	42bb      	cmp	r3, r7
    312a:	d2af      	bcs.n	308c <next_process+0x20>
    312c:	466b      	mov	r3, sp
    312e:	2101      	movs	r1, #1
    3130:	71d9      	strb	r1, [r3, #7]
    3132:	e7ab      	b.n	308c <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    3134:	6863      	ldr	r3, [r4, #4]
    3136:	42bb      	cmp	r3, r7
    3138:	d8a8      	bhi.n	308c <next_process+0x20>
    313a:	466b      	mov	r3, sp
    313c:	2101      	movs	r1, #1
    313e:	71d9      	strb	r1, [r3, #7]
    3140:	e7a4      	b.n	308c <next_process+0x20>
				if (variable < data->value) unblocked = true;
    3142:	6863      	ldr	r3, [r4, #4]
    3144:	42bb      	cmp	r3, r7
    3146:	d9a1      	bls.n	308c <next_process+0x20>
    3148:	466b      	mov	r3, sp
    314a:	2101      	movs	r1, #1
    314c:	71d9      	strb	r1, [r3, #7]
    314e:	e79d      	b.n	308c <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    3150:	6863      	ldr	r3, [r4, #4]
    3152:	42bb      	cmp	r3, r7
    3154:	d39a      	bcc.n	308c <next_process+0x20>
    3156:	466b      	mov	r3, sp
    3158:	2101      	movs	r1, #1
    315a:	71d9      	strb	r1, [r3, #7]
    315c:	e796      	b.n	308c <next_process+0x20>
				current_process->status = Process_State_Running;
    315e:	2301      	movs	r3, #1
    3160:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    3162:	4b1b      	ldr	r3, [pc, #108]	; (31d0 <next_process+0x164>)
    3164:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    3166:	0028      	movs	r0, r5
    3168:	e015      	b.n	3196 <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    316a:	4919      	ldr	r1, [pc, #100]	; (31d0 <next_process+0x164>)
    316c:	688e      	ldr	r6, [r1, #8]
    316e:	1986      	adds	r6, r0, r6
    3170:	1e73      	subs	r3, r6, #1
    3172:	17df      	asrs	r7, r3, #31
    3174:	0f3f      	lsrs	r7, r7, #28
    3176:	19db      	adds	r3, r3, r7
    3178:	220f      	movs	r2, #15
    317a:	4013      	ands	r3, r2
    317c:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    317e:	17f7      	asrs	r7, r6, #31
    3180:	0f3f      	lsrs	r7, r7, #28
    3182:	19f6      	adds	r6, r6, r7
    3184:	4032      	ands	r2, r6
    3186:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    3188:	009b      	lsls	r3, r3, #2
    318a:	18cb      	adds	r3, r1, r3
    318c:	691b      	ldr	r3, [r3, #16]
    318e:	0092      	lsls	r2, r2, #2
    3190:	1889      	adds	r1, r1, r2
    3192:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    3194:	3801      	subs	r0, #1
    3196:	2800      	cmp	r0, #0
    3198:	dce7      	bgt.n	316a <next_process+0xfe>
	}

	--process_count;
    319a:	490d      	ldr	r1, [pc, #52]	; (31d0 <next_process+0x164>)
    319c:	1e63      	subs	r3, r4, #1
    319e:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    31a0:	688b      	ldr	r3, [r1, #8]
    31a2:	3301      	adds	r3, #1
    31a4:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    31a6:	17d8      	asrs	r0, r3, #31
    31a8:	0f00      	lsrs	r0, r0, #28
    31aa:	181b      	adds	r3, r3, r0
    31ac:	220f      	movs	r2, #15
    31ae:	4013      	ands	r3, r2
    31b0:	1a1b      	subs	r3, r3, r0
    31b2:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    31b4:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    31b6:	42ac      	cmp	r4, r5
    31b8:	d103      	bne.n	31c2 <next_process+0x156>
	
	return current_process;
    31ba:	4b05      	ldr	r3, [pc, #20]	; (31d0 <next_process+0x164>)
    31bc:	6818      	ldr	r0, [r3, #0]
}
    31be:	b003      	add	sp, #12
    31c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    31c2:	4b03      	ldr	r3, [pc, #12]	; (31d0 <next_process+0x164>)
    31c4:	6818      	ldr	r0, [r3, #0]
    31c6:	4b04      	ldr	r3, [pc, #16]	; (31d8 <next_process+0x16c>)
    31c8:	4798      	blx	r3
    31ca:	e7f6      	b.n	31ba <next_process+0x14e>
			switch (data->condition) {
    31cc:	2000      	movs	r0, #0
    31ce:	e7f6      	b.n	31be <next_process+0x152>
    31d0:	2000060c 	.word	0x2000060c
    31d4:	00005700 	.word	0x00005700
    31d8:	00002efd 	.word	0x00002efd

000031dc <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    31dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31de:	465f      	mov	r7, fp
    31e0:	4656      	mov	r6, sl
    31e2:	464d      	mov	r5, r9
    31e4:	4644      	mov	r4, r8
    31e6:	b4f0      	push	{r4, r5, r6, r7}
    31e8:	b083      	sub	sp, #12
    31ea:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    31ec:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    31f0:	2b00      	cmp	r3, #0
    31f2:	d01c      	beq.n	322e <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    31f4:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    31f6:	4b0f      	ldr	r3, [pc, #60]	; (3234 <yield_process+0x58>)
    31f8:	9301      	str	r3, [sp, #4]
    31fa:	681b      	ldr	r3, [r3, #0]
    31fc:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    31fe:	2208      	movs	r2, #8
    3200:	4252      	negs	r2, r2
    3202:	446a      	add	r2, sp
    3204:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    3206:	685a      	ldr	r2, [r3, #4]
    3208:	3a04      	subs	r2, #4
    320a:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    320c:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    320e:	3204      	adds	r2, #4
    3210:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    3212:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    3214:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    3216:	9b01      	ldr	r3, [sp, #4]
    3218:	681b      	ldr	r3, [r3, #0]
    321a:	2203      	movs	r2, #3
    321c:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    321e:	b662      	cpsie	i
	
	__enable_irq();
}
    3220:	b003      	add	sp, #12
    3222:	bcf0      	pop	{r4, r5, r6, r7}
    3224:	46bb      	mov	fp, r7
    3226:	46b2      	mov	sl, r6
    3228:	46a9      	mov	r9, r5
    322a:	46a0      	mov	r8, r4
    322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    322e:	4b02      	ldr	r3, [pc, #8]	; (3238 <yield_process+0x5c>)
    3230:	4798      	blx	r3
    3232:	e7df      	b.n	31f4 <yield_process+0x18>
    3234:	2000060c 	.word	0x2000060c
    3238:	00002e11 	.word	0x00002e11

0000323c <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    323c:	b5f0      	push	{r4, r5, r6, r7, lr}
    323e:	464f      	mov	r7, r9
    3240:	4646      	mov	r6, r8
    3242:	b4c0      	push	{r6, r7}
    3244:	b08b      	sub	sp, #44	; 0x2c
    3246:	4681      	mov	r9, r0
    3248:	000f      	movs	r7, r1
    324a:	4690      	mov	r8, r2
    324c:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    324e:	4e0f      	ldr	r6, [pc, #60]	; (328c <wait_until+0x50>)
    3250:	6834      	ldr	r4, [r6, #0]
    3252:	4b0f      	ldr	r3, [pc, #60]	; (3290 <wait_until+0x54>)
    3254:	4798      	blx	r3
    3256:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3258:	ac05      	add	r4, sp, #20
    325a:	464b      	mov	r3, r9
    325c:	9305      	str	r3, [sp, #20]
    325e:	9706      	str	r7, [sp, #24]
    3260:	4643      	mov	r3, r8
    3262:	9307      	str	r3, [sp, #28]
    3264:	2300      	movs	r3, #0
    3266:	9308      	str	r3, [sp, #32]
    3268:	7425      	strb	r5, [r4, #16]
    326a:	466b      	mov	r3, sp
    326c:	001a      	movs	r2, r3
    326e:	cc23      	ldmia	r4!, {r0, r1, r5}
    3270:	c223      	stmia	r2!, {r0, r1, r5}
    3272:	cc03      	ldmia	r4!, {r0, r1}
    3274:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3276:	6832      	ldr	r2, [r6, #0]
    3278:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    327a:	2002      	movs	r0, #2
    327c:	4b05      	ldr	r3, [pc, #20]	; (3294 <wait_until+0x58>)
    327e:	4798      	blx	r3
}
    3280:	b00b      	add	sp, #44	; 0x2c
    3282:	bcc0      	pop	{r6, r7}
    3284:	46b9      	mov	r9, r7
    3286:	46b0      	mov	r8, r6
    3288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	2000060c 	.word	0x2000060c
    3290:	00002211 	.word	0x00002211
    3294:	000031dd 	.word	0x000031dd

00003298 <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    3298:	b5f0      	push	{r4, r5, r6, r7, lr}
    329a:	464f      	mov	r7, r9
    329c:	4646      	mov	r6, r8
    329e:	b4c0      	push	{r6, r7}
    32a0:	b08b      	sub	sp, #44	; 0x2c
    32a2:	4681      	mov	r9, r0
    32a4:	000f      	movs	r7, r1
    32a6:	4690      	mov	r8, r2
    32a8:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    32aa:	4e0f      	ldr	r6, [pc, #60]	; (32e8 <wait_until_callback+0x50>)
    32ac:	6834      	ldr	r4, [r6, #0]
    32ae:	4b0f      	ldr	r3, [pc, #60]	; (32ec <wait_until_callback+0x54>)
    32b0:	4798      	blx	r3
    32b2:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    32b4:	ac05      	add	r4, sp, #20
    32b6:	464b      	mov	r3, r9
    32b8:	9305      	str	r3, [sp, #20]
    32ba:	9706      	str	r7, [sp, #24]
    32bc:	4643      	mov	r3, r8
    32be:	9307      	str	r3, [sp, #28]
    32c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    32c2:	9308      	str	r3, [sp, #32]
    32c4:	7425      	strb	r5, [r4, #16]
    32c6:	466b      	mov	r3, sp
    32c8:	001a      	movs	r2, r3
    32ca:	cc23      	ldmia	r4!, {r0, r1, r5}
    32cc:	c223      	stmia	r2!, {r0, r1, r5}
    32ce:	cc03      	ldmia	r4!, {r0, r1}
    32d0:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    32d2:	6832      	ldr	r2, [r6, #0]
    32d4:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    32d6:	2002      	movs	r0, #2
    32d8:	4b05      	ldr	r3, [pc, #20]	; (32f0 <wait_until_callback+0x58>)
    32da:	4798      	blx	r3
    32dc:	b00b      	add	sp, #44	; 0x2c
    32de:	bcc0      	pop	{r6, r7}
    32e0:	46b9      	mov	r9, r7
    32e2:	46b0      	mov	r8, r6
    32e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	2000060c 	.word	0x2000060c
    32ec:	00002211 	.word	0x00002211
    32f0:	000031dd 	.word	0x000031dd

000032f4 <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    32f4:	b500      	push	{lr}
    32f6:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    32f8:	4b0c      	ldr	r3, [pc, #48]	; (332c <rtos_delay_callback+0x38>)
    32fa:	4798      	blx	r3
    32fc:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    32fe:	4b0c      	ldr	r3, [pc, #48]	; (3330 <rtos_delay_callback+0x3c>)
    3300:	681a      	ldr	r2, [r3, #0]
    3302:	6953      	ldr	r3, [r2, #20]
    3304:	9901      	ldr	r1, [sp, #4]
    3306:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    3308:	490a      	ldr	r1, [pc, #40]	; (3334 <rtos_delay_callback+0x40>)
    330a:	6809      	ldr	r1, [r1, #0]
    330c:	4299      	cmp	r1, r3
    330e:	dc07      	bgt.n	3320 <rtos_delay_callback+0x2c>
    3310:	4908      	ldr	r1, [pc, #32]	; (3334 <rtos_delay_callback+0x40>)
    3312:	6808      	ldr	r0, [r1, #0]
    3314:	4907      	ldr	r1, [pc, #28]	; (3334 <rtos_delay_callback+0x40>)
    3316:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    3318:	2b00      	cmp	r3, #0
    331a:	dd03      	ble.n	3324 <rtos_delay_callback+0x30>
}
    331c:	b003      	add	sp, #12
    331e:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    3320:	0018      	movs	r0, r3
    3322:	e7f7      	b.n	3314 <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    3324:	2301      	movs	r3, #1
    3326:	6193      	str	r3, [r2, #24]
}
    3328:	e7f8      	b.n	331c <rtos_delay_callback+0x28>
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	00002211 	.word	0x00002211
    3330:	2000060c 	.word	0x2000060c
    3334:	20000098 	.word	0x20000098

00003338 <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    3338:	b570      	push	{r4, r5, r6, lr}
    333a:	b086      	sub	sp, #24
    333c:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    333e:	4b09      	ldr	r3, [pc, #36]	; (3364 <rtos_delay_ctick+0x2c>)
    3340:	4798      	blx	r3
    3342:	4b09      	ldr	r3, [pc, #36]	; (3368 <rtos_delay_ctick+0x30>)
    3344:	681d      	ldr	r5, [r3, #0]
    3346:	1900      	adds	r0, r0, r4
    3348:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    334a:	aa01      	add	r2, sp, #4
    334c:	4b07      	ldr	r3, [pc, #28]	; (336c <rtos_delay_ctick+0x34>)
    334e:	0011      	movs	r1, r2
    3350:	cb51      	ldmia	r3!, {r0, r4, r6}
    3352:	c151      	stmia	r1!, {r0, r4, r6}
    3354:	cb11      	ldmia	r3!, {r0, r4}
    3356:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3358:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    335a:	2002      	movs	r0, #2
    335c:	4b04      	ldr	r3, [pc, #16]	; (3370 <rtos_delay_ctick+0x38>)
    335e:	4798      	blx	r3
    3360:	b006      	add	sp, #24
    3362:	bd70      	pop	{r4, r5, r6, pc}
    3364:	00002211 	.word	0x00002211
    3368:	2000060c 	.word	0x2000060c
    336c:	0000571c 	.word	0x0000571c
    3370:	000031dd 	.word	0x000031dd

00003374 <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    3374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3376:	4b16      	ldr	r3, [pc, #88]	; (33d0 <busmanager_process_wait_callback+0x5c>)
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    337c:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    337e:	2500      	movs	r5, #0
    3380:	e00b      	b.n	339a <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    3382:	4b13      	ldr	r3, [pc, #76]	; (33d0 <busmanager_process_wait_callback+0x5c>)
    3384:	681b      	ldr	r3, [r3, #0]
    3386:	2201      	movs	r2, #1
    3388:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    338a:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    338c:	17e3      	asrs	r3, r4, #31
    338e:	0f5b      	lsrs	r3, r3, #29
    3390:	18e4      	adds	r4, r4, r3
    3392:	2207      	movs	r2, #7
    3394:	4014      	ands	r4, r2
    3396:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    3398:	3501      	adds	r5, #1
    339a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    339c:	42ab      	cmp	r3, r5
    339e:	dd15      	ble.n	33cc <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    33a0:	1ca3      	adds	r3, r4, #2
    33a2:	009b      	lsls	r3, r3, #2
    33a4:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    33a6:	7d1a      	ldrb	r2, [r3, #20]
    33a8:	2a00      	cmp	r2, #0
    33aa:	d0ee      	beq.n	338a <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    33ac:	7c1a      	ldrb	r2, [r3, #16]
    33ae:	7c59      	ldrb	r1, [r3, #17]
    33b0:	0209      	lsls	r1, r1, #8
    33b2:	4311      	orrs	r1, r2
    33b4:	7c9a      	ldrb	r2, [r3, #18]
    33b6:	0412      	lsls	r2, r2, #16
    33b8:	430a      	orrs	r2, r1
    33ba:	7cdf      	ldrb	r7, [r3, #19]
    33bc:	063f      	lsls	r7, r7, #24
    33be:	4317      	orrs	r7, r2
    33c0:	4b04      	ldr	r3, [pc, #16]	; (33d4 <busmanager_process_wait_callback+0x60>)
    33c2:	4798      	blx	r3
    33c4:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    33c6:	2f00      	cmp	r7, #0
    33c8:	dcdf      	bgt.n	338a <busmanager_process_wait_callback+0x16>
    33ca:	e7da      	b.n	3382 <busmanager_process_wait_callback+0xe>
	}
}
    33cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	2000060c 	.word	0x2000060c
    33d4:	00002211 	.word	0x00002211

000033d8 <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    33d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    33da:	780c      	ldrb	r4, [r1, #0]
    33dc:	784d      	ldrb	r5, [r1, #1]
    33de:	022d      	lsls	r5, r5, #8
    33e0:	4325      	orrs	r5, r4
    33e2:	788c      	ldrb	r4, [r1, #2]
    33e4:	0424      	lsls	r4, r4, #16
    33e6:	432c      	orrs	r4, r5
    33e8:	78cf      	ldrb	r7, [r1, #3]
    33ea:	063f      	lsls	r7, r7, #24
    33ec:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    33ee:	2601      	movs	r6, #1
    33f0:	e000      	b.n	33f4 <set_matching_id_status+0x1c>
    33f2:	3601      	adds	r6, #1
    33f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
    33f6:	42b1      	cmp	r1, r6
    33f8:	dd17      	ble.n	342a <set_matching_id_status+0x52>
		++queue_pointer;
    33fa:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    33fc:	17d1      	asrs	r1, r2, #31
    33fe:	0f49      	lsrs	r1, r1, #29
    3400:	1852      	adds	r2, r2, r1
    3402:	2407      	movs	r4, #7
    3404:	4022      	ands	r2, r4
    3406:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    3408:	1c91      	adds	r1, r2, #2
    340a:	0089      	lsls	r1, r1, #2
    340c:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    340e:	782c      	ldrb	r4, [r5, #0]
    3410:	7869      	ldrb	r1, [r5, #1]
    3412:	0209      	lsls	r1, r1, #8
    3414:	4321      	orrs	r1, r4
    3416:	78ac      	ldrb	r4, [r5, #2]
    3418:	0424      	lsls	r4, r4, #16
    341a:	430c      	orrs	r4, r1
    341c:	78e9      	ldrb	r1, [r5, #3]
    341e:	0609      	lsls	r1, r1, #24
    3420:	4321      	orrs	r1, r4
    3422:	42b9      	cmp	r1, r7
    3424:	d1e5      	bne.n	33f2 <set_matching_id_status+0x1a>
    3426:	756b      	strb	r3, [r5, #21]
    3428:	e7e3      	b.n	33f2 <set_matching_id_status+0x1a>
}
    342a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000342c <busmanager_process_function>:

void busmanager_process_function() {
    342c:	b5f0      	push	{r4, r5, r6, r7, lr}
    342e:	46ce      	mov	lr, r9
    3430:	4647      	mov	r7, r8
    3432:	b580      	push	{r7, lr}
    3434:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3436:	4b62      	ldr	r3, [pc, #392]	; (35c0 <busmanager_process_function+0x194>)
    3438:	681b      	ldr	r3, [r3, #0]
    343a:	6a1f      	ldr	r7, [r3, #32]
    343c:	e05d      	b.n	34fa <busmanager_process_function+0xce>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    343e:	0038      	movs	r0, r7
    3440:	3030      	adds	r0, #48	; 0x30
    3442:	2201      	movs	r2, #1
    3444:	3302      	adds	r3, #2
    3446:	4252      	negs	r2, r2
    3448:	2100      	movs	r1, #0
    344a:	4c5e      	ldr	r4, [pc, #376]	; (35c4 <busmanager_process_function+0x198>)
    344c:	47a0      	blx	r4
    344e:	e057      	b.n	3500 <busmanager_process_function+0xd4>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    3450:	7d2b      	ldrb	r3, [r5, #20]
    3452:	2b00      	cmp	r3, #0
    3454:	d158      	bne.n	3508 <busmanager_process_function+0xdc>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    3456:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3458:	17e3      	asrs	r3, r4, #31
    345a:	0f5b      	lsrs	r3, r3, #29
    345c:	18e4      	adds	r4, r4, r3
    345e:	2207      	movs	r2, #7
    3460:	4014      	ands	r4, r2
    3462:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3464:	2301      	movs	r3, #1
    3466:	469c      	mov	ip, r3
    3468:	44e1      	add	r9, ip
    346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    346c:	454b      	cmp	r3, r9
    346e:	dd09      	ble.n	3484 <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    3470:	1ca3      	adds	r3, r4, #2
    3472:	009b      	lsls	r3, r3, #2
    3474:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    3476:	2315      	movs	r3, #21
    3478:	56eb      	ldrsb	r3, [r5, r3]
    347a:	2b00      	cmp	r3, #0
    347c:	d1e8      	bne.n	3450 <busmanager_process_function+0x24>
    347e:	7d2b      	ldrb	r3, [r5, #20]
    3480:	2b00      	cmp	r3, #0
    3482:	d1e5      	bne.n	3450 <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    3484:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3486:	4549      	cmp	r1, r9
    3488:	d05e      	beq.n	3548 <busmanager_process_function+0x11c>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    348a:	2315      	movs	r3, #21
    348c:	56eb      	ldrsb	r3, [r5, r3]
    348e:	2b02      	cmp	r3, #2
    3490:	d02f      	beq.n	34f2 <busmanager_process_function+0xc6>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    3492:	7b2a      	ldrb	r2, [r5, #12]
    3494:	7b6b      	ldrb	r3, [r5, #13]
    3496:	021b      	lsls	r3, r3, #8
    3498:	4313      	orrs	r3, r2
    349a:	7baa      	ldrb	r2, [r5, #14]
    349c:	0412      	lsls	r2, r2, #16
    349e:	431a      	orrs	r2, r3
    34a0:	7beb      	ldrb	r3, [r5, #15]
    34a2:	061b      	lsls	r3, r3, #24
    34a4:	4313      	orrs	r3, r2
    34a6:	d059      	beq.n	355c <busmanager_process_function+0x130>
				SOS();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    34a8:	7b2b      	ldrb	r3, [r5, #12]
    34aa:	7b6a      	ldrb	r2, [r5, #13]
    34ac:	0212      	lsls	r2, r2, #8
    34ae:	431a      	orrs	r2, r3
    34b0:	7bab      	ldrb	r3, [r5, #14]
    34b2:	041b      	lsls	r3, r3, #16
    34b4:	4313      	orrs	r3, r2
    34b6:	7bec      	ldrb	r4, [r5, #15]
    34b8:	0624      	lsls	r4, r4, #24
    34ba:	431c      	orrs	r4, r3
    34bc:	7a2b      	ldrb	r3, [r5, #8]
    34be:	7a6a      	ldrb	r2, [r5, #9]
    34c0:	0212      	lsls	r2, r2, #8
    34c2:	431a      	orrs	r2, r3
    34c4:	7aab      	ldrb	r3, [r5, #10]
    34c6:	041b      	lsls	r3, r3, #16
    34c8:	4313      	orrs	r3, r2
    34ca:	7aea      	ldrb	r2, [r5, #11]
    34cc:	0612      	lsls	r2, r2, #24
    34ce:	431a      	orrs	r2, r3
    34d0:	6879      	ldr	r1, [r7, #4]
    34d2:	792b      	ldrb	r3, [r5, #4]
    34d4:	7968      	ldrb	r0, [r5, #5]
    34d6:	0200      	lsls	r0, r0, #8
    34d8:	4318      	orrs	r0, r3
    34da:	79ab      	ldrb	r3, [r5, #6]
    34dc:	041b      	lsls	r3, r3, #16
    34de:	4303      	orrs	r3, r0
    34e0:	79e8      	ldrb	r0, [r5, #7]
    34e2:	0600      	lsls	r0, r0, #24
    34e4:	4318      	orrs	r0, r3
    34e6:	002b      	movs	r3, r5
    34e8:	47a0      	blx	r4
    34ea:	2800      	cmp	r0, #0
    34ec:	d001      	beq.n	34f2 <busmanager_process_function+0xc6>
				current_request->status = BusManager_Request_Complete;
    34ee:	2302      	movs	r3, #2
    34f0:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    34f2:	2315      	movs	r3, #21
    34f4:	56eb      	ldrsb	r3, [r5, r3]
    34f6:	2b02      	cmp	r3, #2
    34f8:	d033      	beq.n	3562 <busmanager_process_function+0x136>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    34fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34fc:	2b00      	cmp	r3, #0
    34fe:	d09e      	beq.n	343e <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    3500:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    3502:	2300      	movs	r3, #0
    3504:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3506:	e7b0      	b.n	346a <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    3508:	7c2a      	ldrb	r2, [r5, #16]
    350a:	7c6b      	ldrb	r3, [r5, #17]
    350c:	021b      	lsls	r3, r3, #8
    350e:	4313      	orrs	r3, r2
    3510:	7caa      	ldrb	r2, [r5, #18]
    3512:	0412      	lsls	r2, r2, #16
    3514:	431a      	orrs	r2, r3
    3516:	7ceb      	ldrb	r3, [r5, #19]
    3518:	061b      	lsls	r3, r3, #24
    351a:	4313      	orrs	r3, r2
    351c:	4698      	mov	r8, r3
    351e:	4b2a      	ldr	r3, [pc, #168]	; (35c8 <busmanager_process_function+0x19c>)
    3520:	4798      	blx	r3
    3522:	4643      	mov	r3, r8
    3524:	1a18      	subs	r0, r3, r0
    3526:	2800      	cmp	r0, #0
    3528:	dd06      	ble.n	3538 <busmanager_process_function+0x10c>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    352a:	2301      	movs	r3, #1
    352c:	0022      	movs	r2, r4
    352e:	0029      	movs	r1, r5
    3530:	0038      	movs	r0, r7
    3532:	4e26      	ldr	r6, [pc, #152]	; (35cc <busmanager_process_function+0x1a0>)
    3534:	47b0      	blx	r6
			if (unblocked) break;
    3536:	e78e      	b.n	3456 <busmanager_process_function+0x2a>
					current_request->busy = false;
    3538:	2300      	movs	r3, #0
    353a:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    353c:	0022      	movs	r2, r4
    353e:	0029      	movs	r1, r5
    3540:	0038      	movs	r0, r7
    3542:	4c22      	ldr	r4, [pc, #136]	; (35cc <busmanager_process_function+0x1a0>)
    3544:	47a0      	blx	r4
			if (unblocked) break;
    3546:	e79d      	b.n	3484 <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    3548:	0038      	movs	r0, r7
    354a:	3030      	adds	r0, #48	; 0x30
    354c:	2201      	movs	r2, #1
    354e:	4b20      	ldr	r3, [pc, #128]	; (35d0 <busmanager_process_function+0x1a4>)
    3550:	9300      	str	r3, [sp, #0]
    3552:	2301      	movs	r3, #1
    3554:	4252      	negs	r2, r2
    3556:	4c1f      	ldr	r4, [pc, #124]	; (35d4 <busmanager_process_function+0x1a8>)
    3558:	47a0      	blx	r4
			continue;
    355a:	e7ce      	b.n	34fa <busmanager_process_function+0xce>
				SOS();
    355c:	4b1e      	ldr	r3, [pc, #120]	; (35d8 <busmanager_process_function+0x1ac>)
    355e:	4798      	blx	r3
    3560:	e7a2      	b.n	34a8 <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    3562:	7d2b      	ldrb	r3, [r5, #20]
    3564:	2b00      	cmp	r3, #0
    3566:	d1c8      	bne.n	34fa <busmanager_process_function+0xce>
			current_request->status = BusManager_Request_CompleteNotBusy;
    3568:	3303      	adds	r3, #3
    356a:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    356c:	e017      	b.n	359e <busmanager_process_function+0x172>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    356e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3570:	4449      	add	r1, r9
    3572:	1e4b      	subs	r3, r1, #1
    3574:	17d8      	asrs	r0, r3, #31
    3576:	0f40      	lsrs	r0, r0, #29
    3578:	181b      	adds	r3, r3, r0
    357a:	2207      	movs	r2, #7
    357c:	4013      	ands	r3, r2
    357e:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3580:	17c8      	asrs	r0, r1, #31
    3582:	0f40      	lsrs	r0, r0, #29
    3584:	1809      	adds	r1, r1, r0
    3586:	400a      	ands	r2, r1
    3588:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    358a:	3302      	adds	r3, #2
    358c:	009b      	lsls	r3, r3, #2
    358e:	59d9      	ldr	r1, [r3, r7]
    3590:	3202      	adds	r2, #2
    3592:	0093      	lsls	r3, r2, #2
    3594:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    3596:	2301      	movs	r3, #1
    3598:	425b      	negs	r3, r3
    359a:	469c      	mov	ip, r3
    359c:	44e1      	add	r9, ip
    359e:	464b      	mov	r3, r9
    35a0:	2b00      	cmp	r3, #0
    35a2:	dce4      	bgt.n	356e <busmanager_process_function+0x142>
			}

			--(data->request_count);
    35a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    35a6:	3b01      	subs	r3, #1
    35a8:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    35aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35ac:	3301      	adds	r3, #1
    35ae:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    35b0:	17d9      	asrs	r1, r3, #31
    35b2:	0f49      	lsrs	r1, r1, #29
    35b4:	185b      	adds	r3, r3, r1
    35b6:	2207      	movs	r2, #7
    35b8:	4013      	ands	r3, r2
    35ba:	1a5b      	subs	r3, r3, r1
    35bc:	62bb      	str	r3, [r7, #40]	; 0x28
    35be:	e79c      	b.n	34fa <busmanager_process_function+0xce>
    35c0:	2000060c 	.word	0x2000060c
    35c4:	0000323d 	.word	0x0000323d
    35c8:	00002211 	.word	0x00002211
    35cc:	000033d9 	.word	0x000033d9
    35d0:	00003375 	.word	0x00003375
    35d4:	00003299 	.word	0x00003299
    35d8:	00002e11 	.word	0x00002e11

000035dc <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    35dc:	b570      	push	{r4, r5, r6, lr}
    35de:	0004      	movs	r4, r0
    35e0:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    35e2:	480a      	ldr	r0, [pc, #40]	; (360c <busmanager_new_process+0x30>)
    35e4:	0013      	movs	r3, r2
    35e6:	000a      	movs	r2, r1
    35e8:	0001      	movs	r1, r0
    35ea:	0020      	movs	r0, r4
    35ec:	4e08      	ldr	r6, [pc, #32]	; (3610 <busmanager_new_process+0x34>)
    35ee:	47b0      	blx	r6
	proc->data.sercom = sercom;
    35f0:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    35f2:	9b04      	ldr	r3, [sp, #16]
    35f4:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    35f6:	2300      	movs	r3, #0
    35f8:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    35fa:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    35fc:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    35fe:	0023      	movs	r3, r4
    3600:	3328      	adds	r3, #40	; 0x28
    3602:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    3604:	0020      	movs	r0, r4
    3606:	4b03      	ldr	r3, [pc, #12]	; (3614 <busmanager_new_process+0x38>)
    3608:	4798      	blx	r3
}
    360a:	bd70      	pop	{r4, r5, r6, pc}
    360c:	0000342d 	.word	0x0000342d
    3610:	00002ed1 	.word	0x00002ed1
    3614:	00002fb9 	.word	0x00002fb9

00003618 <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    3618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    361a:	0004      	movs	r4, r0
    361c:	000d      	movs	r5, r1
    361e:	9806      	ldr	r0, [sp, #24]
    3620:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    3622:	2600      	movs	r6, #0
    3624:	702a      	strb	r2, [r5, #0]
    3626:	0a17      	lsrs	r7, r2, #8
    3628:	706f      	strb	r7, [r5, #1]
    362a:	0c17      	lsrs	r7, r2, #16
    362c:	70af      	strb	r7, [r5, #2]
    362e:	0e12      	lsrs	r2, r2, #24
    3630:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    3632:	712b      	strb	r3, [r5, #4]
    3634:	0a1a      	lsrs	r2, r3, #8
    3636:	716a      	strb	r2, [r5, #5]
    3638:	0c1a      	lsrs	r2, r3, #16
    363a:	71aa      	strb	r2, [r5, #6]
    363c:	0e1b      	lsrs	r3, r3, #24
    363e:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    3640:	7228      	strb	r0, [r5, #8]
    3642:	0a03      	lsrs	r3, r0, #8
    3644:	726b      	strb	r3, [r5, #9]
    3646:	0c03      	lsrs	r3, r0, #16
    3648:	72ab      	strb	r3, [r5, #10]
    364a:	0e00      	lsrs	r0, r0, #24
    364c:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    364e:	7329      	strb	r1, [r5, #12]
    3650:	0a0b      	lsrs	r3, r1, #8
    3652:	736b      	strb	r3, [r5, #13]
    3654:	0c0b      	lsrs	r3, r1, #16
    3656:	73ab      	strb	r3, [r5, #14]
    3658:	0e09      	lsrs	r1, r1, #24
    365a:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    365c:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    365e:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3660:	e007      	b.n	3672 <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    3662:	0020      	movs	r0, r4
    3664:	3058      	adds	r0, #88	; 0x58
    3666:	2201      	movs	r2, #1
    3668:	2301      	movs	r3, #1
    366a:	4252      	negs	r2, r2
    366c:	2108      	movs	r1, #8
    366e:	4e0b      	ldr	r6, [pc, #44]	; (369c <busmanager_request_transaction+0x84>)
    3670:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3672:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3674:	2b08      	cmp	r3, #8
    3676:	d0f4      	beq.n	3662 <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    3678:	6d62      	ldr	r2, [r4, #84]	; 0x54
    367a:	0011      	movs	r1, r2
    367c:	310c      	adds	r1, #12
    367e:	0089      	lsls	r1, r1, #2
    3680:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    3682:	3301      	adds	r3, #1
    3684:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    3686:	3201      	adds	r2, #1
    3688:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    368a:	17d1      	asrs	r1, r2, #31
    368c:	0f49      	lsrs	r1, r1, #29
    368e:	1853      	adds	r3, r2, r1
    3690:	2207      	movs	r2, #7
    3692:	4013      	ands	r3, r2
    3694:	1a5b      	subs	r3, r3, r1
    3696:	6563      	str	r3, [r4, #84]	; 0x54
    3698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    369a:	46c0      	nop			; (mov r8, r8)
    369c:	0000323d 	.word	0x0000323d

000036a0 <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    36a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36a2:	46de      	mov	lr, fp
    36a4:	4657      	mov	r7, sl
    36a6:	464e      	mov	r6, r9
    36a8:	4645      	mov	r5, r8
    36aa:	b5e0      	push	{r5, r6, r7, lr}
    36ac:	b089      	sub	sp, #36	; 0x24
    36ae:	0004      	movs	r4, r0
    36b0:	000e      	movs	r6, r1
    36b2:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    36b4:	ab07      	add	r3, sp, #28
    36b6:	2003      	movs	r0, #3
    36b8:	4682      	mov	sl, r0
    36ba:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    36bc:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    36be:	2115      	movs	r1, #21
    36c0:	a802      	add	r0, sp, #8
    36c2:	4684      	mov	ip, r0
    36c4:	4461      	add	r1, ip
    36c6:	0a10      	lsrs	r0, r2, #8
    36c8:	7008      	strb	r0, [r1, #0]
    36ca:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    36cc:	7822      	ldrb	r2, [r4, #0]
    36ce:	7861      	ldrb	r1, [r4, #1]
    36d0:	0209      	lsls	r1, r1, #8
    36d2:	4311      	orrs	r1, r2
    36d4:	78a2      	ldrb	r2, [r4, #2]
    36d6:	0412      	lsls	r2, r2, #16
    36d8:	430a      	orrs	r2, r1
    36da:	78e5      	ldrb	r5, [r4, #3]
    36dc:	062d      	lsls	r5, r5, #24
    36de:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    36e0:	9604      	str	r6, [sp, #16]
    36e2:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    36e4:	2128      	movs	r1, #40	; 0x28
    36e6:	4689      	mov	r9, r1
    36e8:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    36ea:	0100      	lsls	r0, r0, #4
    36ec:	4e24      	ldr	r6, [pc, #144]	; (3780 <dma_eeprom_read+0xe0>)
    36ee:	1980      	adds	r0, r0, r6
    36f0:	4924      	ldr	r1, [pc, #144]	; (3784 <dma_eeprom_read+0xe4>)
    36f2:	468b      	mov	fp, r1
    36f4:	9103      	str	r1, [sp, #12]
    36f6:	4649      	mov	r1, r9
    36f8:	9102      	str	r1, [sp, #8]
    36fa:	9301      	str	r3, [sp, #4]
    36fc:	4651      	mov	r1, sl
    36fe:	9100      	str	r1, [sp, #0]
    3700:	2300      	movs	r3, #0
    3702:	2200      	movs	r2, #0
    3704:	3902      	subs	r1, #2
    3706:	4f20      	ldr	r7, [pc, #128]	; (3788 <dma_eeprom_read+0xe8>)
    3708:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    370a:	466b      	mov	r3, sp
    370c:	8a9b      	ldrh	r3, [r3, #20]
    370e:	4698      	mov	r8, r3
    3710:	2300      	movs	r3, #0
    3712:	9303      	str	r3, [sp, #12]
    3714:	4649      	mov	r1, r9
    3716:	9102      	str	r1, [sp, #8]
    3718:	4b1c      	ldr	r3, [pc, #112]	; (378c <dma_eeprom_read+0xec>)
    371a:	9301      	str	r3, [sp, #4]
    371c:	4641      	mov	r1, r8
    371e:	9100      	str	r1, [sp, #0]
    3720:	2300      	movs	r3, #0
    3722:	2200      	movs	r2, #0
    3724:	2100      	movs	r1, #0
    3726:	4658      	mov	r0, fp
    3728:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    372a:	9a04      	ldr	r2, [sp, #16]
    372c:	7850      	ldrb	r0, [r2, #1]
    372e:	0100      	lsls	r0, r0, #4
    3730:	1980      	adds	r0, r0, r6
    3732:	4917      	ldr	r1, [pc, #92]	; (3790 <dma_eeprom_read+0xf0>)
    3734:	468b      	mov	fp, r1
    3736:	9103      	str	r1, [sp, #12]
    3738:	4b16      	ldr	r3, [pc, #88]	; (3794 <dma_eeprom_read+0xf4>)
    373a:	9302      	str	r3, [sp, #8]
    373c:	4649      	mov	r1, r9
    373e:	9101      	str	r1, [sp, #4]
    3740:	4651      	mov	r1, sl
    3742:	9100      	str	r1, [sp, #0]
    3744:	2300      	movs	r3, #0
    3746:	2200      	movs	r2, #0
    3748:	2100      	movs	r1, #0
    374a:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    374c:	2300      	movs	r3, #0
    374e:	9303      	str	r3, [sp, #12]
    3750:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3752:	9302      	str	r3, [sp, #8]
    3754:	464b      	mov	r3, r9
    3756:	9301      	str	r3, [sp, #4]
    3758:	4643      	mov	r3, r8
    375a:	9300      	str	r3, [sp, #0]
    375c:	2300      	movs	r3, #0
    375e:	2201      	movs	r2, #1
    3760:	2100      	movs	r1, #0
    3762:	4658      	mov	r0, fp
    3764:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3766:	1d21      	adds	r1, r4, #4
    3768:	9a04      	ldr	r2, [sp, #16]
    376a:	0028      	movs	r0, r5
    376c:	4b0a      	ldr	r3, [pc, #40]	; (3798 <dma_eeprom_read+0xf8>)
    376e:	4798      	blx	r3
}
    3770:	b009      	add	sp, #36	; 0x24
    3772:	bcf0      	pop	{r4, r5, r6, r7}
    3774:	46bb      	mov	fp, r7
    3776:	46b2      	mov	sl, r6
    3778:	46a9      	mov	r9, r5
    377a:	46a0      	mov	r8, r4
    377c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	200003e0 	.word	0x200003e0
    3784:	20000670 	.word	0x20000670
    3788:	00001369 	.word	0x00001369
    378c:	0000564d 	.word	0x0000564d
    3790:	20000660 	.word	0x20000660
    3794:	200002b0 	.word	0x200002b0
    3798:	00003c35 	.word	0x00003c35

0000379c <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    379c:	b5f0      	push	{r4, r5, r6, r7, lr}
    379e:	46de      	mov	lr, fp
    37a0:	4657      	mov	r7, sl
    37a2:	464e      	mov	r6, r9
    37a4:	4645      	mov	r5, r8
    37a6:	b5e0      	push	{r5, r6, r7, lr}
    37a8:	b089      	sub	sp, #36	; 0x24
    37aa:	0004      	movs	r4, r0
    37ac:	000e      	movs	r6, r1
    37ae:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    37b0:	ab07      	add	r3, sp, #28
    37b2:	2102      	movs	r1, #2
    37b4:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    37b6:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    37b8:	3113      	adds	r1, #19
    37ba:	a802      	add	r0, sp, #8
    37bc:	4684      	mov	ip, r0
    37be:	4461      	add	r1, ip
    37c0:	0a10      	lsrs	r0, r2, #8
    37c2:	7008      	strb	r0, [r1, #0]
    37c4:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    37c6:	7822      	ldrb	r2, [r4, #0]
    37c8:	7861      	ldrb	r1, [r4, #1]
    37ca:	0209      	lsls	r1, r1, #8
    37cc:	4311      	orrs	r1, r2
    37ce:	78a2      	ldrb	r2, [r4, #2]
    37d0:	0412      	lsls	r2, r2, #16
    37d2:	430a      	orrs	r2, r1
    37d4:	78e5      	ldrb	r5, [r4, #3]
    37d6:	062d      	lsls	r5, r5, #24
    37d8:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    37da:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    37dc:	2228      	movs	r2, #40	; 0x28
    37de:	4690      	mov	r8, r2
    37e0:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    37e2:	0100      	lsls	r0, r0, #4
    37e4:	4a25      	ldr	r2, [pc, #148]	; (387c <dma_eeprom_write+0xe0>)
    37e6:	4691      	mov	r9, r2
    37e8:	4448      	add	r0, r9
    37ea:	4a25      	ldr	r2, [pc, #148]	; (3880 <dma_eeprom_write+0xe4>)
    37ec:	4693      	mov	fp, r2
    37ee:	9203      	str	r2, [sp, #12]
    37f0:	4642      	mov	r2, r8
    37f2:	9202      	str	r2, [sp, #8]
    37f4:	9301      	str	r3, [sp, #4]
    37f6:	2203      	movs	r2, #3
    37f8:	9200      	str	r2, [sp, #0]
    37fa:	2300      	movs	r3, #0
    37fc:	2200      	movs	r2, #0
    37fe:	2101      	movs	r1, #1
    3800:	4f20      	ldr	r7, [pc, #128]	; (3884 <dma_eeprom_write+0xe8>)
    3802:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3804:	466b      	mov	r3, sp
    3806:	8a9b      	ldrh	r3, [r3, #20]
    3808:	469a      	mov	sl, r3
    380a:	2300      	movs	r3, #0
    380c:	9303      	str	r3, [sp, #12]
    380e:	4641      	mov	r1, r8
    3810:	9102      	str	r1, [sp, #8]
    3812:	9912      	ldr	r1, [sp, #72]	; 0x48
    3814:	9101      	str	r1, [sp, #4]
    3816:	4651      	mov	r1, sl
    3818:	9100      	str	r1, [sp, #0]
    381a:	2200      	movs	r2, #0
    381c:	2101      	movs	r1, #1
    381e:	4658      	mov	r0, fp
    3820:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3822:	7870      	ldrb	r0, [r6, #1]
    3824:	0100      	lsls	r0, r0, #4
    3826:	4448      	add	r0, r9
    3828:	4917      	ldr	r1, [pc, #92]	; (3888 <dma_eeprom_write+0xec>)
    382a:	4689      	mov	r9, r1
    382c:	9103      	str	r1, [sp, #12]
    382e:	4917      	ldr	r1, [pc, #92]	; (388c <dma_eeprom_write+0xf0>)
    3830:	468b      	mov	fp, r1
    3832:	9102      	str	r1, [sp, #8]
    3834:	4641      	mov	r1, r8
    3836:	9101      	str	r1, [sp, #4]
    3838:	2203      	movs	r2, #3
    383a:	9200      	str	r2, [sp, #0]
    383c:	2300      	movs	r3, #0
    383e:	2200      	movs	r2, #0
    3840:	2100      	movs	r1, #0
    3842:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3844:	2300      	movs	r3, #0
    3846:	9303      	str	r3, [sp, #12]
    3848:	465b      	mov	r3, fp
    384a:	9302      	str	r3, [sp, #8]
    384c:	4643      	mov	r3, r8
    384e:	9301      	str	r3, [sp, #4]
    3850:	4653      	mov	r3, sl
    3852:	9300      	str	r3, [sp, #0]
    3854:	2300      	movs	r3, #0
    3856:	2200      	movs	r2, #0
    3858:	2100      	movs	r1, #0
    385a:	4648      	mov	r0, r9
    385c:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    385e:	0020      	movs	r0, r4
    3860:	4b0b      	ldr	r3, [pc, #44]	; (3890 <dma_eeprom_write+0xf4>)
    3862:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3864:	1d21      	adds	r1, r4, #4
    3866:	0032      	movs	r2, r6
    3868:	0028      	movs	r0, r5
    386a:	4b0a      	ldr	r3, [pc, #40]	; (3894 <dma_eeprom_write+0xf8>)
    386c:	4798      	blx	r3
}
    386e:	b009      	add	sp, #36	; 0x24
    3870:	bcf0      	pop	{r4, r5, r6, r7}
    3872:	46bb      	mov	fp, r7
    3874:	46b2      	mov	sl, r6
    3876:	46a9      	mov	r9, r5
    3878:	46a0      	mov	r8, r4
    387a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    387c:	200003e0 	.word	0x200003e0
    3880:	20000670 	.word	0x20000670
    3884:	00001369 	.word	0x00001369
    3888:	20000660 	.word	0x20000660
    388c:	200002b0 	.word	0x200002b0
    3890:	000014d9 	.word	0x000014d9
    3894:	00003c35 	.word	0x00003c35

00003898 <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    3898:	b5f0      	push	{r4, r5, r6, r7, lr}
    389a:	b083      	sub	sp, #12
    389c:	0014      	movs	r4, r2
    389e:	001d      	movs	r5, r3
	switch (request->type) {
    38a0:	2324      	movs	r3, #36	; 0x24
    38a2:	5cd3      	ldrb	r3, [r2, r3]
    38a4:	2b00      	cmp	r3, #0
    38a6:	d004      	beq.n	38b2 <dma_eeprom_process_request+0x1a>
    38a8:	2b01      	cmp	r3, #1
    38aa:	d00a      	beq.n	38c2 <dma_eeprom_process_request+0x2a>
    38ac:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    38ae:	b003      	add	sp, #12
    38b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    38b2:	69d3      	ldr	r3, [r2, #28]
    38b4:	6992      	ldr	r2, [r2, #24]
    38b6:	6a24      	ldr	r4, [r4, #32]
    38b8:	9400      	str	r4, [sp, #0]
    38ba:	4c1a      	ldr	r4, [pc, #104]	; (3924 <dma_eeprom_process_request+0x8c>)
    38bc:	47a0      	blx	r4
	return true;
    38be:	2001      	movs	r0, #1
		break;
    38c0:	e7f5      	b.n	38ae <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    38c2:	6992      	ldr	r2, [r2, #24]
    38c4:	69e6      	ldr	r6, [r4, #28]
    38c6:	1993      	adds	r3, r2, r6
    38c8:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    38ca:	233f      	movs	r3, #63	; 0x3f
    38cc:	0017      	movs	r7, r2
    38ce:	439f      	bics	r7, r3
    38d0:	003b      	movs	r3, r7
    38d2:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    38d4:	459c      	cmp	ip, r3
    38d6:	d300      	bcc.n	38da <dma_eeprom_process_request+0x42>
    38d8:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    38da:	6a23      	ldr	r3, [r4, #32]
    38dc:	9300      	str	r3, [sp, #0]
    38de:	0033      	movs	r3, r6
    38e0:	4f11      	ldr	r7, [pc, #68]	; (3928 <dma_eeprom_process_request+0x90>)
    38e2:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    38e4:	4b11      	ldr	r3, [pc, #68]	; (392c <dma_eeprom_process_request+0x94>)
    38e6:	4798      	blx	r3
    38e8:	4b11      	ldr	r3, [pc, #68]	; (3930 <dma_eeprom_process_request+0x98>)
    38ea:	4798      	blx	r3
    38ec:	4b11      	ldr	r3, [pc, #68]	; (3934 <dma_eeprom_process_request+0x9c>)
    38ee:	4912      	ldr	r1, [pc, #72]	; (3938 <dma_eeprom_process_request+0xa0>)
    38f0:	4798      	blx	r3
    38f2:	4b12      	ldr	r3, [pc, #72]	; (393c <dma_eeprom_process_request+0xa4>)
    38f4:	4798      	blx	r3
    38f6:	7428      	strb	r0, [r5, #16]
    38f8:	0a03      	lsrs	r3, r0, #8
    38fa:	746b      	strb	r3, [r5, #17]
    38fc:	0c03      	lsrs	r3, r0, #16
    38fe:	74ab      	strb	r3, [r5, #18]
    3900:	0e00      	lsrs	r0, r0, #24
    3902:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    3904:	2301      	movs	r3, #1
    3906:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    3908:	69e3      	ldr	r3, [r4, #28]
    390a:	1b9b      	subs	r3, r3, r6
    390c:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    390e:	d101      	bne.n	3914 <dma_eeprom_process_request+0x7c>
	return true;
    3910:	2001      	movs	r0, #1
    3912:	e7cc      	b.n	38ae <dma_eeprom_process_request+0x16>
				request->address += count;
    3914:	69a3      	ldr	r3, [r4, #24]
    3916:	199b      	adds	r3, r3, r6
    3918:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    391a:	6a23      	ldr	r3, [r4, #32]
    391c:	199b      	adds	r3, r3, r6
    391e:	6223      	str	r3, [r4, #32]
				return false;
    3920:	2000      	movs	r0, #0
    3922:	e7c4      	b.n	38ae <dma_eeprom_process_request+0x16>
    3924:	000036a1 	.word	0x000036a1
    3928:	0000379d 	.word	0x0000379d
    392c:	00002211 	.word	0x00002211
    3930:	0000503d 	.word	0x0000503d
    3934:	000042f5 	.word	0x000042f5
    3938:	486a6000 	.word	0x486a6000
    393c:	000042c5 	.word	0x000042c5

00003940 <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    3940:	b530      	push	{r4, r5, lr}
    3942:	b083      	sub	sp, #12
    3944:	0014      	movs	r4, r2
    3946:	001a      	movs	r2, r3
    3948:	ab06      	add	r3, sp, #24
    394a:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    394c:	2324      	movs	r3, #36	; 0x24
    394e:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    3950:	9b07      	ldr	r3, [sp, #28]
    3952:	618b      	str	r3, [r1, #24]
	request->count = count;
    3954:	9b08      	ldr	r3, [sp, #32]
    3956:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3958:	9b09      	ldr	r3, [sp, #36]	; 0x24
    395a:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    395c:	4b03      	ldr	r3, [pc, #12]	; (396c <eeprom_request+0x2c>)
    395e:	9301      	str	r3, [sp, #4]
    3960:	9100      	str	r1, [sp, #0]
    3962:	0023      	movs	r3, r4
    3964:	4c02      	ldr	r4, [pc, #8]	; (3970 <eeprom_request+0x30>)
    3966:	47a0      	blx	r4
}
    3968:	b003      	add	sp, #12
    396a:	bd30      	pop	{r4, r5, pc}
    396c:	00003899 	.word	0x00003899
    3970:	00003619 	.word	0x00003619

00003974 <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    3974:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3976:	3015      	adds	r0, #21
    3978:	2300      	movs	r3, #0
    397a:	22ff      	movs	r2, #255	; 0xff
    397c:	2103      	movs	r1, #3
    397e:	4c01      	ldr	r4, [pc, #4]	; (3984 <eeprom_wait_until_done+0x10>)
    3980:	47a0      	blx	r4
    3982:	bd10      	pop	{r4, pc}
    3984:	0000323d 	.word	0x0000323d

00003988 <dma_imu_icm20948_read>:
void dma_imu_icm20948_read(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* writeback) {
    3988:	b5f0      	push	{r4, r5, r6, r7, lr}
    398a:	46de      	mov	lr, fp
    398c:	4657      	mov	r7, sl
    398e:	464e      	mov	r6, r9
    3990:	4645      	mov	r5, r8
    3992:	b5e0      	push	{r5, r6, r7, lr}
    3994:	b087      	sub	sp, #28
    3996:	0004      	movs	r4, r0
    3998:	000e      	movs	r6, r1
    399a:	9304      	str	r3, [sp, #16]
    399c:	2317      	movs	r3, #23
    399e:	446b      	add	r3, sp
    39a0:	701a      	strb	r2, [r3, #0]
	address |= IMU_READ_MASK;
    39a2:	b2d1      	uxtb	r1, r2
    39a4:	2280      	movs	r2, #128	; 0x80
    39a6:	4252      	negs	r2, r2
    39a8:	430a      	orrs	r2, r1
    39aa:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    39ac:	7802      	ldrb	r2, [r0, #0]
    39ae:	7841      	ldrb	r1, [r0, #1]
    39b0:	0209      	lsls	r1, r1, #8
    39b2:	4311      	orrs	r1, r2
    39b4:	7882      	ldrb	r2, [r0, #2]
    39b6:	0412      	lsls	r2, r2, #16
    39b8:	430a      	orrs	r2, r1
    39ba:	78c5      	ldrb	r5, [r0, #3]
    39bc:	062d      	lsls	r5, r5, #24
    39be:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    39c0:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    39c2:	2228      	movs	r2, #40	; 0x28
    39c4:	4691      	mov	r9, r2
    39c6:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    39c8:	0100      	lsls	r0, r0, #4
    39ca:	4a24      	ldr	r2, [pc, #144]	; (3a5c <dma_imu_icm20948_read+0xd4>)
    39cc:	4692      	mov	sl, r2
    39ce:	4450      	add	r0, sl
    39d0:	4a23      	ldr	r2, [pc, #140]	; (3a60 <dma_imu_icm20948_read+0xd8>)
    39d2:	4693      	mov	fp, r2
    39d4:	9203      	str	r2, [sp, #12]
    39d6:	464a      	mov	r2, r9
    39d8:	9202      	str	r2, [sp, #8]
    39da:	9301      	str	r3, [sp, #4]
    39dc:	2201      	movs	r2, #1
    39de:	9200      	str	r2, [sp, #0]
    39e0:	2300      	movs	r3, #0
    39e2:	2200      	movs	r2, #0
    39e4:	2100      	movs	r1, #0
    39e6:	4f1f      	ldr	r7, [pc, #124]	; (3a64 <dma_imu_icm20948_read+0xdc>)
    39e8:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    39ea:	466b      	mov	r3, sp
    39ec:	8a1b      	ldrh	r3, [r3, #16]
    39ee:	4698      	mov	r8, r3
    39f0:	2300      	movs	r3, #0
    39f2:	9303      	str	r3, [sp, #12]
    39f4:	4649      	mov	r1, r9
    39f6:	9102      	str	r1, [sp, #8]
    39f8:	4b1b      	ldr	r3, [pc, #108]	; (3a68 <dma_imu_icm20948_read+0xe0>)
    39fa:	9301      	str	r3, [sp, #4]
    39fc:	4641      	mov	r1, r8
    39fe:	9100      	str	r1, [sp, #0]
    3a00:	2300      	movs	r3, #0
    3a02:	2200      	movs	r2, #0
    3a04:	2100      	movs	r1, #0
    3a06:	4658      	mov	r0, fp
    3a08:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3a0a:	7870      	ldrb	r0, [r6, #1]
    3a0c:	0100      	lsls	r0, r0, #4
    3a0e:	4450      	add	r0, sl
    3a10:	4916      	ldr	r1, [pc, #88]	; (3a6c <dma_imu_icm20948_read+0xe4>)
    3a12:	468b      	mov	fp, r1
    3a14:	9103      	str	r1, [sp, #12]
    3a16:	4b16      	ldr	r3, [pc, #88]	; (3a70 <dma_imu_icm20948_read+0xe8>)
    3a18:	9302      	str	r3, [sp, #8]
    3a1a:	4649      	mov	r1, r9
    3a1c:	9101      	str	r1, [sp, #4]
    3a1e:	2201      	movs	r2, #1
    3a20:	9200      	str	r2, [sp, #0]
    3a22:	2300      	movs	r3, #0
    3a24:	2200      	movs	r2, #0
    3a26:	2100      	movs	r1, #0
    3a28:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3a2a:	2300      	movs	r3, #0
    3a2c:	9303      	str	r3, [sp, #12]
    3a2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3a30:	9302      	str	r3, [sp, #8]
    3a32:	464b      	mov	r3, r9
    3a34:	9301      	str	r3, [sp, #4]
    3a36:	4643      	mov	r3, r8
    3a38:	9300      	str	r3, [sp, #0]
    3a3a:	2300      	movs	r3, #0
    3a3c:	2201      	movs	r2, #1
    3a3e:	2100      	movs	r1, #0
    3a40:	4658      	mov	r0, fp
    3a42:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3a44:	1d21      	adds	r1, r4, #4
    3a46:	0032      	movs	r2, r6
    3a48:	0028      	movs	r0, r5
    3a4a:	4b0a      	ldr	r3, [pc, #40]	; (3a74 <dma_imu_icm20948_read+0xec>)
    3a4c:	4798      	blx	r3
}
    3a4e:	b007      	add	sp, #28
    3a50:	bcf0      	pop	{r4, r5, r6, r7}
    3a52:	46bb      	mov	fp, r7
    3a54:	46b2      	mov	sl, r6
    3a56:	46a9      	mov	r9, r5
    3a58:	46a0      	mov	r8, r4
    3a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a5c:	200003e0 	.word	0x200003e0
    3a60:	20000670 	.word	0x20000670
    3a64:	00001369 	.word	0x00001369
    3a68:	0000564d 	.word	0x0000564d
    3a6c:	20000660 	.word	0x20000660
    3a70:	200002b0 	.word	0x200002b0
    3a74:	00003c35 	.word	0x00003c35

00003a78 <dma_imu_icm20948_write>:
void dma_imu_icm20948_write(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* data) {
    3a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a7a:	46de      	mov	lr, fp
    3a7c:	4657      	mov	r7, sl
    3a7e:	464e      	mov	r6, r9
    3a80:	4645      	mov	r5, r8
    3a82:	b5e0      	push	{r5, r6, r7, lr}
    3a84:	b087      	sub	sp, #28
    3a86:	0004      	movs	r4, r0
    3a88:	000e      	movs	r6, r1
    3a8a:	9304      	str	r3, [sp, #16]
    3a8c:	2317      	movs	r3, #23
    3a8e:	446b      	add	r3, sp
    3a90:	701a      	strb	r2, [r3, #0]
	address &= IMU_WRITE_MASK;
    3a92:	b2d1      	uxtb	r1, r2
    3a94:	227f      	movs	r2, #127	; 0x7f
    3a96:	400a      	ands	r2, r1
    3a98:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3a9a:	7802      	ldrb	r2, [r0, #0]
    3a9c:	7841      	ldrb	r1, [r0, #1]
    3a9e:	0209      	lsls	r1, r1, #8
    3aa0:	4311      	orrs	r1, r2
    3aa2:	7882      	ldrb	r2, [r0, #2]
    3aa4:	0412      	lsls	r2, r2, #16
    3aa6:	430a      	orrs	r2, r1
    3aa8:	78c5      	ldrb	r5, [r0, #3]
    3aaa:	062d      	lsls	r5, r5, #24
    3aac:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3aae:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3ab0:	2228      	movs	r2, #40	; 0x28
    3ab2:	4690      	mov	r8, r2
    3ab4:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3ab6:	0100      	lsls	r0, r0, #4
    3ab8:	4a24      	ldr	r2, [pc, #144]	; (3b4c <dma_imu_icm20948_write+0xd4>)
    3aba:	4691      	mov	r9, r2
    3abc:	4448      	add	r0, r9
    3abe:	4a24      	ldr	r2, [pc, #144]	; (3b50 <dma_imu_icm20948_write+0xd8>)
    3ac0:	4693      	mov	fp, r2
    3ac2:	9203      	str	r2, [sp, #12]
    3ac4:	4642      	mov	r2, r8
    3ac6:	9202      	str	r2, [sp, #8]
    3ac8:	9301      	str	r3, [sp, #4]
    3aca:	2201      	movs	r2, #1
    3acc:	9200      	str	r2, [sp, #0]
    3ace:	2300      	movs	r3, #0
    3ad0:	2200      	movs	r2, #0
    3ad2:	2100      	movs	r1, #0
    3ad4:	4f1f      	ldr	r7, [pc, #124]	; (3b54 <dma_imu_icm20948_write+0xdc>)
    3ad6:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3ad8:	466b      	mov	r3, sp
    3ada:	8a1b      	ldrh	r3, [r3, #16]
    3adc:	469a      	mov	sl, r3
    3ade:	2300      	movs	r3, #0
    3ae0:	9303      	str	r3, [sp, #12]
    3ae2:	4641      	mov	r1, r8
    3ae4:	9102      	str	r1, [sp, #8]
    3ae6:	9910      	ldr	r1, [sp, #64]	; 0x40
    3ae8:	9101      	str	r1, [sp, #4]
    3aea:	4651      	mov	r1, sl
    3aec:	9100      	str	r1, [sp, #0]
    3aee:	2200      	movs	r2, #0
    3af0:	2101      	movs	r1, #1
    3af2:	4658      	mov	r0, fp
    3af4:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3af6:	7870      	ldrb	r0, [r6, #1]
    3af8:	0100      	lsls	r0, r0, #4
    3afa:	4448      	add	r0, r9
    3afc:	4916      	ldr	r1, [pc, #88]	; (3b58 <dma_imu_icm20948_write+0xe0>)
    3afe:	4689      	mov	r9, r1
    3b00:	9103      	str	r1, [sp, #12]
    3b02:	4916      	ldr	r1, [pc, #88]	; (3b5c <dma_imu_icm20948_write+0xe4>)
    3b04:	468b      	mov	fp, r1
    3b06:	9102      	str	r1, [sp, #8]
    3b08:	4641      	mov	r1, r8
    3b0a:	9101      	str	r1, [sp, #4]
    3b0c:	2201      	movs	r2, #1
    3b0e:	9200      	str	r2, [sp, #0]
    3b10:	2300      	movs	r3, #0
    3b12:	2200      	movs	r2, #0
    3b14:	2100      	movs	r1, #0
    3b16:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3b18:	2300      	movs	r3, #0
    3b1a:	9303      	str	r3, [sp, #12]
    3b1c:	465b      	mov	r3, fp
    3b1e:	9302      	str	r3, [sp, #8]
    3b20:	4643      	mov	r3, r8
    3b22:	9301      	str	r3, [sp, #4]
    3b24:	4653      	mov	r3, sl
    3b26:	9300      	str	r3, [sp, #0]
    3b28:	2300      	movs	r3, #0
    3b2a:	2200      	movs	r2, #0
    3b2c:	2100      	movs	r1, #0
    3b2e:	4648      	mov	r0, r9
    3b30:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3b32:	1d21      	adds	r1, r4, #4
    3b34:	0032      	movs	r2, r6
    3b36:	0028      	movs	r0, r5
    3b38:	4b09      	ldr	r3, [pc, #36]	; (3b60 <dma_imu_icm20948_write+0xe8>)
    3b3a:	4798      	blx	r3
}
    3b3c:	b007      	add	sp, #28
    3b3e:	bcf0      	pop	{r4, r5, r6, r7}
    3b40:	46bb      	mov	fp, r7
    3b42:	46b2      	mov	sl, r6
    3b44:	46a9      	mov	r9, r5
    3b46:	46a0      	mov	r8, r4
    3b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	200003e0 	.word	0x200003e0
    3b50:	20000670 	.word	0x20000670
    3b54:	00001369 	.word	0x00001369
    3b58:	20000660 	.word	0x20000660
    3b5c:	200002b0 	.word	0x200002b0
    3b60:	00003c35 	.word	0x00003c35

00003b64 <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    3b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b66:	b085      	sub	sp, #20
    3b68:	0005      	movs	r5, r0
    3b6a:	000e      	movs	r6, r1
    3b6c:	0014      	movs	r4, r2
	IMU_ON_BUS();
    3b6e:	2180      	movs	r1, #128	; 0x80
    3b70:	0389      	lsls	r1, r1, #14
    3b72:	2000      	movs	r0, #0
    3b74:	4b17      	ldr	r3, [pc, #92]	; (3bd4 <dma_imu_icm20948_process_request+0x70>)
    3b76:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    3b78:	2325      	movs	r3, #37	; 0x25
    3b7a:	5ce3      	ldrb	r3, [r4, r3]
    3b7c:	011b      	lsls	r3, r3, #4
    3b7e:	220f      	movs	r2, #15
    3b80:	446a      	add	r2, sp
    3b82:	7013      	strb	r3, [r2, #0]
	dma_imu_icm20948_write(imudesc, dmadesc, REG_BANK_SEL, 1, &bank);
    3b84:	9200      	str	r2, [sp, #0]
    3b86:	2301      	movs	r3, #1
    3b88:	227f      	movs	r2, #127	; 0x7f
    3b8a:	0031      	movs	r1, r6
    3b8c:	0028      	movs	r0, r5
    3b8e:	4f12      	ldr	r7, [pc, #72]	; (3bd8 <dma_imu_icm20948_process_request+0x74>)
    3b90:	47b8      	blx	r7
	switch (request->type) {
    3b92:	2324      	movs	r3, #36	; 0x24
    3b94:	5ce3      	ldrb	r3, [r4, r3]
    3b96:	2b00      	cmp	r3, #0
    3b98:	d009      	beq.n	3bae <dma_imu_icm20948_process_request+0x4a>
    3b9a:	2b01      	cmp	r3, #1
    3b9c:	d010      	beq.n	3bc0 <dma_imu_icm20948_process_request+0x5c>
	IMU_OFF_BUS();
    3b9e:	2180      	movs	r1, #128	; 0x80
    3ba0:	0389      	lsls	r1, r1, #14
    3ba2:	2000      	movs	r0, #0
    3ba4:	4b0d      	ldr	r3, [pc, #52]	; (3bdc <dma_imu_icm20948_process_request+0x78>)
    3ba6:	4798      	blx	r3
}
    3ba8:	2001      	movs	r0, #1
    3baa:	b005      	add	sp, #20
    3bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dma_imu_icm20948_read(imudesc, dmadesc, request->address, request->count, request->data);
    3bae:	69e3      	ldr	r3, [r4, #28]
    3bb0:	7e22      	ldrb	r2, [r4, #24]
    3bb2:	6a21      	ldr	r1, [r4, #32]
    3bb4:	9100      	str	r1, [sp, #0]
    3bb6:	0031      	movs	r1, r6
    3bb8:	0028      	movs	r0, r5
    3bba:	4c09      	ldr	r4, [pc, #36]	; (3be0 <dma_imu_icm20948_process_request+0x7c>)
    3bbc:	47a0      	blx	r4
		break;
    3bbe:	e7ee      	b.n	3b9e <dma_imu_icm20948_process_request+0x3a>
		dma_imu_icm20948_write(imudesc, dmadesc, request->address, request->count, request->data);
    3bc0:	69e3      	ldr	r3, [r4, #28]
    3bc2:	7e22      	ldrb	r2, [r4, #24]
    3bc4:	6a21      	ldr	r1, [r4, #32]
    3bc6:	9100      	str	r1, [sp, #0]
    3bc8:	0031      	movs	r1, r6
    3bca:	0028      	movs	r0, r5
    3bcc:	4c02      	ldr	r4, [pc, #8]	; (3bd8 <dma_imu_icm20948_process_request+0x74>)
    3bce:	47a0      	blx	r4
		break;
    3bd0:	e7e5      	b.n	3b9e <dma_imu_icm20948_process_request+0x3a>
    3bd2:	46c0      	nop			; (mov r8, r8)
    3bd4:	00001bc9 	.word	0x00001bc9
    3bd8:	00003a79 	.word	0x00003a79
    3bdc:	00001bd9 	.word	0x00001bd9
    3be0:	00003989 	.word	0x00003989

00003be4 <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    3be4:	b570      	push	{r4, r5, r6, lr}
    3be6:	b082      	sub	sp, #8
    3be8:	0014      	movs	r4, r2
    3bea:	001a      	movs	r2, r3
    3bec:	ab06      	add	r3, sp, #24
    3bee:	781e      	ldrb	r6, [r3, #0]
    3bf0:	ab07      	add	r3, sp, #28
    3bf2:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3bf4:	2324      	movs	r3, #36	; 0x24
    3bf6:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    3bf8:	9b08      	ldr	r3, [sp, #32]
    3bfa:	618b      	str	r3, [r1, #24]
	request->count = count;
    3bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3bfe:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c02:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    3c04:	2325      	movs	r3, #37	; 0x25
    3c06:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    3c08:	4b03      	ldr	r3, [pc, #12]	; (3c18 <imu_icm20948_request+0x34>)
    3c0a:	9301      	str	r3, [sp, #4]
    3c0c:	9100      	str	r1, [sp, #0]
    3c0e:	0023      	movs	r3, r4
    3c10:	4c02      	ldr	r4, [pc, #8]	; (3c1c <imu_icm20948_request+0x38>)
    3c12:	47a0      	blx	r4
}
    3c14:	b002      	add	sp, #8
    3c16:	bd70      	pop	{r4, r5, r6, pc}
    3c18:	00003b65 	.word	0x00003b65
    3c1c:	00003619 	.word	0x00003619

00003c20 <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    3c20:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3c22:	3015      	adds	r0, #21
    3c24:	2300      	movs	r3, #0
    3c26:	22ff      	movs	r2, #255	; 0xff
    3c28:	2103      	movs	r1, #3
    3c2a:	4c01      	ldr	r4, [pc, #4]	; (3c30 <imu_icm20948_wait_until_done+0x10>)
    3c2c:	47a0      	blx	r4
}
    3c2e:	bd10      	pop	{r4, pc}
    3c30:	0000323d 	.word	0x0000323d

00003c34 <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    3c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c36:	0007      	movs	r7, r0
    3c38:	000d      	movs	r5, r1
    3c3a:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    3c3c:	7810      	ldrb	r0, [r2, #0]
    3c3e:	4e1c      	ldr	r6, [pc, #112]	; (3cb0 <dma_spi_transaction+0x7c>)
    3c40:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3c42:	7860      	ldrb	r0, [r4, #1]
    3c44:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    3c46:	0038      	movs	r0, r7
    3c48:	4b1a      	ldr	r3, [pc, #104]	; (3cb4 <dma_spi_transaction+0x80>)
    3c4a:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    3c4c:	7923      	ldrb	r3, [r4, #4]
    3c4e:	78e2      	ldrb	r2, [r4, #3]
    3c50:	7820      	ldrb	r0, [r4, #0]
    3c52:	2102      	movs	r1, #2
    3c54:	4f18      	ldr	r7, [pc, #96]	; (3cb8 <dma_spi_transaction+0x84>)
    3c56:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    3c58:	7923      	ldrb	r3, [r4, #4]
    3c5a:	78a2      	ldrb	r2, [r4, #2]
    3c5c:	7860      	ldrb	r0, [r4, #1]
    3c5e:	2102      	movs	r1, #2
    3c60:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    3c62:	782b      	ldrb	r3, [r5, #0]
    3c64:	786a      	ldrb	r2, [r5, #1]
    3c66:	0212      	lsls	r2, r2, #8
    3c68:	431a      	orrs	r2, r3
    3c6a:	78ab      	ldrb	r3, [r5, #2]
    3c6c:	041b      	lsls	r3, r3, #16
    3c6e:	4313      	orrs	r3, r2
    3c70:	78e9      	ldrb	r1, [r5, #3]
    3c72:	0609      	lsls	r1, r1, #24
    3c74:	4319      	orrs	r1, r3
    3c76:	7928      	ldrb	r0, [r5, #4]
    3c78:	4b10      	ldr	r3, [pc, #64]	; (3cbc <dma_spi_transaction+0x88>)
    3c7a:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    3c7c:	7820      	ldrb	r0, [r4, #0]
    3c7e:	4f10      	ldr	r7, [pc, #64]	; (3cc0 <dma_spi_transaction+0x8c>)
    3c80:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    3c82:	7860      	ldrb	r0, [r4, #1]
    3c84:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    3c86:	7860      	ldrb	r0, [r4, #1]
    3c88:	4b0e      	ldr	r3, [pc, #56]	; (3cc4 <dma_spi_transaction+0x90>)
    3c8a:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    3c8c:	7820      	ldrb	r0, [r4, #0]
    3c8e:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3c90:	7860      	ldrb	r0, [r4, #1]
    3c92:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    3c94:	782b      	ldrb	r3, [r5, #0]
    3c96:	786a      	ldrb	r2, [r5, #1]
    3c98:	0212      	lsls	r2, r2, #8
    3c9a:	431a      	orrs	r2, r3
    3c9c:	78ab      	ldrb	r3, [r5, #2]
    3c9e:	041b      	lsls	r3, r3, #16
    3ca0:	4313      	orrs	r3, r2
    3ca2:	78e9      	ldrb	r1, [r5, #3]
    3ca4:	0609      	lsls	r1, r1, #24
    3ca6:	4319      	orrs	r1, r3
    3ca8:	7928      	ldrb	r0, [r5, #4]
    3caa:	4b07      	ldr	r3, [pc, #28]	; (3cc8 <dma_spi_transaction+0x94>)
    3cac:	4798      	blx	r3
    3cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cb0:	00001449 	.word	0x00001449
    3cb4:	000020c9 	.word	0x000020c9
    3cb8:	000013d5 	.word	0x000013d5
    3cbc:	00001bd9 	.word	0x00001bd9
    3cc0:	00001421 	.word	0x00001421
    3cc4:	00003ce5 	.word	0x00003ce5
    3cc8:	00001bc9 	.word	0x00001bc9

00003ccc <rtos_dma_wait_until_end_callback>:
#include "rtos_dma.h"
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3ccc:	4b03      	ldr	r3, [pc, #12]	; (3cdc <rtos_dma_wait_until_end_callback+0x10>)
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	6a1b      	ldr	r3, [r3, #32]
    3cd2:	7819      	ldrb	r1, [r3, #0]
    3cd4:	4a02      	ldr	r2, [pc, #8]	; (3ce0 <rtos_dma_wait_until_end_callback+0x14>)
    3cd6:	233f      	movs	r3, #63	; 0x3f
    3cd8:	54d1      	strb	r1, [r2, r3]
}
    3cda:	4770      	bx	lr
    3cdc:	2000060c 	.word	0x2000060c
    3ce0:	41004800 	.word	0x41004800

00003ce4 <rtos_dma_wait_until_end>:

void rtos_dma_wait_until_end(int channel) {
    3ce4:	b570      	push	{r4, r5, r6, lr}
    3ce6:	b084      	sub	sp, #16
    3ce8:	9003      	str	r0, [sp, #12]
	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    3cea:	4c08      	ldr	r4, [pc, #32]	; (3d0c <rtos_dma_wait_until_end+0x28>)
    3cec:	6823      	ldr	r3, [r4, #0]
    3cee:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    3cf0:	aa03      	add	r2, sp, #12
    3cf2:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    3cf4:	4b06      	ldr	r3, [pc, #24]	; (3d10 <rtos_dma_wait_until_end+0x2c>)
    3cf6:	9300      	str	r3, [sp, #0]
    3cf8:	2300      	movs	r3, #0
    3cfa:	2202      	movs	r2, #2
    3cfc:	2102      	movs	r1, #2
    3cfe:	4805      	ldr	r0, [pc, #20]	; (3d14 <rtos_dma_wait_until_end+0x30>)
    3d00:	4e05      	ldr	r6, [pc, #20]	; (3d18 <rtos_dma_wait_until_end+0x34>)
    3d02:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_callback);
	current_process->data = data;
    3d04:	6823      	ldr	r3, [r4, #0]
    3d06:	621d      	str	r5, [r3, #32]
    3d08:	b004      	add	sp, #16
    3d0a:	bd70      	pop	{r4, r5, r6, pc}
    3d0c:	2000060c 	.word	0x2000060c
    3d10:	00003ccd 	.word	0x00003ccd
    3d14:	4100484e 	.word	0x4100484e
    3d18:	00003299 	.word	0x00003299

00003d1c <rtos_uart_start_send_buffer>:
#include "rtos_uart.h"
#include "Drivers/sercom.h"
#include "rtos_dma.h"

bool rtos_uart_start_send_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d1e:	b087      	sub	sp, #28
    3d20:	0005      	movs	r5, r0
    3d22:	000c      	movs	r4, r1
    3d24:	0016      	movs	r6, r2
    3d26:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3d28:	4b12      	ldr	r3, [pc, #72]	; (3d74 <rtos_uart_start_send_buffer+0x58>)
    3d2a:	4798      	blx	r3
    3d2c:	1e07      	subs	r7, r0, #0
    3d2e:	d102      	bne.n	3d36 <rtos_uart_start_send_buffer+0x1a>
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->txchannel);

    return true;
}
    3d30:	0038      	movs	r0, r7
    3d32:	b007      	add	sp, #28
    3d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3d36:	7820      	ldrb	r0, [r4, #0]
    buffer, &(sercom->USART_INT.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
    3d38:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3d3a:	0100      	lsls	r0, r0, #4
    3d3c:	4b0e      	ldr	r3, [pc, #56]	; (3d78 <rtos_uart_start_send_buffer+0x5c>)
    3d3e:	18c0      	adds	r0, r0, r3
    3d40:	2300      	movs	r3, #0
    3d42:	9303      	str	r3, [sp, #12]
    3d44:	9502      	str	r5, [sp, #8]
    3d46:	9601      	str	r6, [sp, #4]
    3d48:	466b      	mov	r3, sp
    3d4a:	8a9e      	ldrh	r6, [r3, #20]
    3d4c:	9600      	str	r6, [sp, #0]
    3d4e:	2300      	movs	r3, #0
    3d50:	2200      	movs	r2, #0
    3d52:	2101      	movs	r1, #1
    3d54:	4d09      	ldr	r5, [pc, #36]	; (3d7c <rtos_uart_start_send_buffer+0x60>)
    3d56:	47a8      	blx	r5
	dma_disable_channel(dmadesc->txchannel);
    3d58:	7820      	ldrb	r0, [r4, #0]
    3d5a:	4b09      	ldr	r3, [pc, #36]	; (3d80 <rtos_uart_start_send_buffer+0x64>)
    3d5c:	4798      	blx	r3
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    3d5e:	7923      	ldrb	r3, [r4, #4]
    3d60:	78e2      	ldrb	r2, [r4, #3]
    3d62:	7820      	ldrb	r0, [r4, #0]
    3d64:	2102      	movs	r1, #2
    3d66:	4d07      	ldr	r5, [pc, #28]	; (3d84 <rtos_uart_start_send_buffer+0x68>)
    3d68:	47a8      	blx	r5
	dma_enable_channel(dmadesc->txchannel);
    3d6a:	7820      	ldrb	r0, [r4, #0]
    3d6c:	4b06      	ldr	r3, [pc, #24]	; (3d88 <rtos_uart_start_send_buffer+0x6c>)
    3d6e:	4798      	blx	r3
    return true;
    3d70:	e7de      	b.n	3d30 <rtos_uart_start_send_buffer+0x14>
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	00001ec5 	.word	0x00001ec5
    3d78:	200003e0 	.word	0x200003e0
    3d7c:	00001369 	.word	0x00001369
    3d80:	00001449 	.word	0x00001449
    3d84:	000013d5 	.word	0x000013d5
    3d88:	00001421 	.word	0x00001421

00003d8c <rtos_uart_wait_until_send_complete>:

void rtos_uart_wait_until_send_complete(DMA_Descriptor* dmadesc) {
    3d8c:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->txchannel);
    3d8e:	7800      	ldrb	r0, [r0, #0]
    3d90:	4b01      	ldr	r3, [pc, #4]	; (3d98 <rtos_uart_wait_until_send_complete+0xc>)
    3d92:	4798      	blx	r3
}
    3d94:	bd10      	pop	{r4, pc}
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	00003ce5 	.word	0x00003ce5

00003d9c <rtos_uart_start_read_buffer>:


bool rtos_uart_start_read_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d9e:	b087      	sub	sp, #28
    3da0:	0005      	movs	r5, r0
    3da2:	000c      	movs	r4, r1
    3da4:	0016      	movs	r6, r2
    3da6:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3da8:	4b12      	ldr	r3, [pc, #72]	; (3df4 <rtos_uart_start_read_buffer+0x58>)
    3daa:	4798      	blx	r3
    3dac:	1e07      	subs	r7, r0, #0
    3dae:	d102      	bne.n	3db6 <rtos_uart_start_read_buffer+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
}
    3db0:	0038      	movs	r0, r7
    3db2:	b007      	add	sp, #28
    3db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3db6:	7860      	ldrb	r0, [r4, #1]
    &(sercom->USART_INT.SERCOM_DATA), buffer, DMA_NEXTDESCRIPTOR_NONE);
    3db8:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3dba:	0100      	lsls	r0, r0, #4
    3dbc:	4b0e      	ldr	r3, [pc, #56]	; (3df8 <rtos_uart_start_read_buffer+0x5c>)
    3dbe:	18c0      	adds	r0, r0, r3
    3dc0:	2300      	movs	r3, #0
    3dc2:	9303      	str	r3, [sp, #12]
    3dc4:	9602      	str	r6, [sp, #8]
    3dc6:	9501      	str	r5, [sp, #4]
    3dc8:	466b      	mov	r3, sp
    3dca:	8a9e      	ldrh	r6, [r3, #20]
    3dcc:	9600      	str	r6, [sp, #0]
    3dce:	2300      	movs	r3, #0
    3dd0:	2201      	movs	r2, #1
    3dd2:	2100      	movs	r1, #0
    3dd4:	4d09      	ldr	r5, [pc, #36]	; (3dfc <rtos_uart_start_read_buffer+0x60>)
    3dd6:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    3dd8:	7860      	ldrb	r0, [r4, #1]
    3dda:	4b09      	ldr	r3, [pc, #36]	; (3e00 <rtos_uart_start_read_buffer+0x64>)
    3ddc:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    3dde:	7923      	ldrb	r3, [r4, #4]
    3de0:	78a2      	ldrb	r2, [r4, #2]
    3de2:	7860      	ldrb	r0, [r4, #1]
    3de4:	2102      	movs	r1, #2
    3de6:	4d07      	ldr	r5, [pc, #28]	; (3e04 <rtos_uart_start_read_buffer+0x68>)
    3de8:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    3dea:	7860      	ldrb	r0, [r4, #1]
    3dec:	4b06      	ldr	r3, [pc, #24]	; (3e08 <rtos_uart_start_read_buffer+0x6c>)
    3dee:	4798      	blx	r3
    return true;
    3df0:	e7de      	b.n	3db0 <rtos_uart_start_read_buffer+0x14>
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	00001ec5 	.word	0x00001ec5
    3df8:	200003e0 	.word	0x200003e0
    3dfc:	00001369 	.word	0x00001369
    3e00:	00001449 	.word	0x00001449
    3e04:	000013d5 	.word	0x000013d5
    3e08:	00001421 	.word	0x00001421

00003e0c <rtos_uart_wait_until_read_complete>:

void rtos_uart_wait_until_read_complete(DMA_Descriptor* dmadesc) {
    3e0c:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->rxchannel);
    3e0e:	7840      	ldrb	r0, [r0, #1]
    3e10:	4b01      	ldr	r3, [pc, #4]	; (3e18 <rtos_uart_wait_until_read_complete+0xc>)
    3e12:	4798      	blx	r3
    3e14:	bd10      	pop	{r4, pc}
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	00003ce5 	.word	0x00003ce5

00003e1c <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    3e1c:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    3e1e:	4b25      	ldr	r3, [pc, #148]	; (3eb4 <usb_proc_loop+0x98>)
    3e20:	2200      	movs	r2, #0
    3e22:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    3e24:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    3e26:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    3e28:	70da      	strb	r2, [r3, #3]
    3e2a:	e00f      	b.n	3e4c <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    3e2c:	4c21      	ldr	r4, [pc, #132]	; (3eb4 <usb_proc_loop+0x98>)
    3e2e:	68e0      	ldr	r0, [r4, #12]
    3e30:	18c0      	adds	r0, r0, r3
    3e32:	4b21      	ldr	r3, [pc, #132]	; (3eb8 <usb_proc_loop+0x9c>)
    3e34:	4798      	blx	r3
    3e36:	68a3      	ldr	r3, [r4, #8]
    3e38:	181b      	adds	r3, r3, r0
    3e3a:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    3e3c:	4b1d      	ldr	r3, [pc, #116]	; (3eb4 <usb_proc_loop+0x98>)
    3e3e:	78db      	ldrb	r3, [r3, #3]
    3e40:	2b00      	cmp	r3, #0
    3e42:	d003      	beq.n	3e4c <usb_proc_loop+0x30>
    3e44:	4b1d      	ldr	r3, [pc, #116]	; (3ebc <usb_proc_loop+0xa0>)
    3e46:	681b      	ldr	r3, [r3, #0]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d11f      	bne.n	3e8c <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    3e4c:	4c19      	ldr	r4, [pc, #100]	; (3eb4 <usb_proc_loop+0x98>)
    3e4e:	2301      	movs	r3, #1
    3e50:	22ff      	movs	r2, #255	; 0xff
    3e52:	2100      	movs	r1, #0
    3e54:	0020      	movs	r0, r4
    3e56:	4d1a      	ldr	r5, [pc, #104]	; (3ec0 <usb_proc_loop+0xa4>)
    3e58:	47a8      	blx	r5
		usb_interrupt = false;
    3e5a:	2300      	movs	r3, #0
    3e5c:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    3e5e:	7863      	ldrb	r3, [r4, #1]
    3e60:	2b00      	cmp	r3, #0
    3e62:	d125      	bne.n	3eb0 <usb_proc_loop+0x94>
		usb_handle_function();
    3e64:	4b17      	ldr	r3, [pc, #92]	; (3ec4 <usb_proc_loop+0xa8>)
    3e66:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    3e68:	4b12      	ldr	r3, [pc, #72]	; (3eb4 <usb_proc_loop+0x98>)
    3e6a:	789b      	ldrb	r3, [r3, #2]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d0e5      	beq.n	3e3c <usb_proc_loop+0x20>
    3e70:	4b15      	ldr	r3, [pc, #84]	; (3ec8 <usb_proc_loop+0xac>)
    3e72:	781b      	ldrb	r3, [r3, #0]
    3e74:	2b00      	cmp	r3, #0
    3e76:	d1e1      	bne.n	3e3c <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    3e78:	4b0e      	ldr	r3, [pc, #56]	; (3eb4 <usb_proc_loop+0x98>)
    3e7a:	685a      	ldr	r2, [r3, #4]
    3e7c:	689b      	ldr	r3, [r3, #8]
    3e7e:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    3e80:	429a      	cmp	r2, r3
    3e82:	d1d3      	bne.n	3e2c <usb_proc_loop+0x10>
    3e84:	4b0b      	ldr	r3, [pc, #44]	; (3eb4 <usb_proc_loop+0x98>)
    3e86:	2200      	movs	r2, #0
    3e88:	709a      	strb	r2, [r3, #2]
    3e8a:	e7d7      	b.n	3e3c <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    3e8c:	4b0b      	ldr	r3, [pc, #44]	; (3ebc <usb_proc_loop+0xa0>)
    3e8e:	6819      	ldr	r1, [r3, #0]
    3e90:	4c08      	ldr	r4, [pc, #32]	; (3eb4 <usb_proc_loop+0x98>)
    3e92:	6920      	ldr	r0, [r4, #16]
    3e94:	6963      	ldr	r3, [r4, #20]
    3e96:	18c0      	adds	r0, r0, r3
    3e98:	4b0c      	ldr	r3, [pc, #48]	; (3ecc <usb_proc_loop+0xb0>)
    3e9a:	4798      	blx	r3
    3e9c:	6963      	ldr	r3, [r4, #20]
    3e9e:	18c0      	adds	r0, r0, r3
    3ea0:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    3ea2:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    3ea4:	4298      	cmp	r0, r3
    3ea6:	d1d1      	bne.n	3e4c <usb_proc_loop+0x30>
    3ea8:	4b02      	ldr	r3, [pc, #8]	; (3eb4 <usb_proc_loop+0x98>)
    3eaa:	2200      	movs	r2, #0
    3eac:	70da      	strb	r2, [r3, #3]
    3eae:	e7cd      	b.n	3e4c <usb_proc_loop+0x30>
		}
	}
}
    3eb0:	bd70      	pop	{r4, r5, r6, pc}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	20000680 	.word	0x20000680
    3eb8:	00002b45 	.word	0x00002b45
    3ebc:	20000538 	.word	0x20000538
    3ec0:	0000323d 	.word	0x0000323d
    3ec4:	000029b1 	.word	0x000029b1
    3ec8:	20000534 	.word	0x20000534
    3ecc:	00002b81 	.word	0x00002b81

00003ed0 <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    3ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ed2:	46ce      	mov	lr, r9
    3ed4:	4647      	mov	r7, r8
    3ed6:	b580      	push	{r7, lr}
    3ed8:	0006      	movs	r6, r0
    3eda:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3edc:	4f15      	ldr	r7, [pc, #84]	; (3f34 <rtos_usb_init+0x64>)
    3ede:	2580      	movs	r5, #128	; 0x80
    3ee0:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    3ee2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ee6:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    3eea:	22c0      	movs	r2, #192	; 0xc0
    3eec:	0492      	lsls	r2, r2, #18
    3eee:	2106      	movs	r1, #6
    3ef0:	2000      	movs	r0, #0
    3ef2:	4b11      	ldr	r3, [pc, #68]	; (3f38 <rtos_usb_init+0x68>)
    3ef4:	4798      	blx	r3
	usb_init();
    3ef6:	4b11      	ldr	r3, [pc, #68]	; (3f3c <rtos_usb_init+0x6c>)
    3ef8:	4798      	blx	r3
	usb_attach();
    3efa:	4b11      	ldr	r3, [pc, #68]	; (3f40 <rtos_usb_init+0x70>)
    3efc:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    3efe:	4911      	ldr	r1, [pc, #68]	; (3f44 <rtos_usb_init+0x74>)
    3f00:	4c11      	ldr	r4, [pc, #68]	; (3f48 <rtos_usb_init+0x78>)
    3f02:	231c      	movs	r3, #28
    3f04:	4699      	mov	r9, r3
    3f06:	44a1      	add	r9, r4
    3f08:	4643      	mov	r3, r8
    3f0a:	0032      	movs	r2, r6
    3f0c:	4648      	mov	r0, r9
    3f0e:	4e0f      	ldr	r6, [pc, #60]	; (3f4c <rtos_usb_init+0x7c>)
    3f10:	47b0      	blx	r6
	dispatch_process(&usbproc);
    3f12:	4648      	mov	r0, r9
    3f14:	4b0e      	ldr	r3, [pc, #56]	; (3f50 <rtos_usb_init+0x80>)
    3f16:	4798      	blx	r3
	wait_until_started(&usbproc);
    3f18:	2201      	movs	r2, #1
    3f1a:	0020      	movs	r0, r4
    3f1c:	3034      	adds	r0, #52	; 0x34
    3f1e:	2301      	movs	r3, #1
    3f20:	4252      	negs	r2, r2
    3f22:	2100      	movs	r1, #0
    3f24:	4c0b      	ldr	r4, [pc, #44]	; (3f54 <rtos_usb_init+0x84>)
    3f26:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f28:	603d      	str	r5, [r7, #0]
}
    3f2a:	bcc0      	pop	{r6, r7}
    3f2c:	46b9      	mov	r9, r7
    3f2e:	46b0      	mov	r8, r6
    3f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	e000e100 	.word	0xe000e100
    3f38:	00001be9 	.word	0x00001be9
    3f3c:	000025f5 	.word	0x000025f5
    3f40:	00002955 	.word	0x00002955
    3f44:	00003e1d 	.word	0x00003e1d
    3f48:	20000680 	.word	0x20000680
    3f4c:	00002ed1 	.word	0x00002ed1
    3f50:	00002fb9 	.word	0x00002fb9
    3f54:	0000323d 	.word	0x0000323d

00003f58 <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f58:	2380      	movs	r3, #128	; 0x80
    3f5a:	4a05      	ldr	r2, [pc, #20]	; (3f70 <USB_Handler+0x18>)
    3f5c:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f62:	f3bf 8f6f 	isb	sy

void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);
	
	usb_interrupt = true;
    3f66:	4b03      	ldr	r3, [pc, #12]	; (3f74 <USB_Handler+0x1c>)
    3f68:	2201      	movs	r2, #1
    3f6a:	701a      	strb	r2, [r3, #0]
}
    3f6c:	4770      	bx	lr
    3f6e:	46c0      	nop			; (mov r8, r8)
    3f70:	e000e100 	.word	0xe000e100
    3f74:	20000680 	.word	0x20000680

00003f78 <rtos_usb_start_send_buffer>:
	usb_quit = true;
	join_process(&usbproc);
}


void rtos_usb_start_send_buffer(uint8_t* buffer, int count) {
    3f78:	b570      	push	{r4, r5, r6, lr}
    3f7a:	0005      	movs	r5, r0
    3f7c:	000e      	movs	r6, r1
	// if send operation is currently in progress wait until it finishes
	if (usb_send_status) wait_until_false(&usb_send_status);
    3f7e:	4b0d      	ldr	r3, [pc, #52]	; (3fb4 <rtos_usb_start_send_buffer+0x3c>)
    3f80:	789b      	ldrb	r3, [r3, #2]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d10e      	bne.n	3fa4 <rtos_usb_start_send_buffer+0x2c>
	usb_send_buffer = buffer;
    3f86:	4c0b      	ldr	r4, [pc, #44]	; (3fb4 <rtos_usb_start_send_buffer+0x3c>)
    3f88:	60e5      	str	r5, [r4, #12]
	usb_send_buffer_count = count;
    3f8a:	6066      	str	r6, [r4, #4]
	usb_send_bytes_sent = 0;
    3f8c:	2300      	movs	r3, #0
    3f8e:	60a3      	str	r3, [r4, #8]
	usb_send_status = true;
    3f90:	3301      	adds	r3, #1
    3f92:	70a3      	strb	r3, [r4, #2]
	// start send
	usb_send_bytes_sent += usb_serial_send_buffer(buffer, count);
    3f94:	0031      	movs	r1, r6
    3f96:	0028      	movs	r0, r5
    3f98:	4b07      	ldr	r3, [pc, #28]	; (3fb8 <rtos_usb_start_send_buffer+0x40>)
    3f9a:	4798      	blx	r3
    3f9c:	68a3      	ldr	r3, [r4, #8]
    3f9e:	181b      	adds	r3, r3, r0
    3fa0:	60a3      	str	r3, [r4, #8]
}
    3fa2:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_send_status) wait_until_false(&usb_send_status);
    3fa4:	4805      	ldr	r0, [pc, #20]	; (3fbc <rtos_usb_start_send_buffer+0x44>)
    3fa6:	2300      	movs	r3, #0
    3fa8:	22ff      	movs	r2, #255	; 0xff
    3faa:	2100      	movs	r1, #0
    3fac:	4c04      	ldr	r4, [pc, #16]	; (3fc0 <rtos_usb_start_send_buffer+0x48>)
    3fae:	47a0      	blx	r4
    3fb0:	e7e9      	b.n	3f86 <rtos_usb_start_send_buffer+0xe>
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	20000680 	.word	0x20000680
    3fb8:	00002b45 	.word	0x00002b45
    3fbc:	20000682 	.word	0x20000682
    3fc0:	0000323d 	.word	0x0000323d

00003fc4 <rtos_usb_wait_until_send_complete>:

int rtos_usb_wait_until_send_complete() {
    3fc4:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_send_status);
    3fc6:	4c04      	ldr	r4, [pc, #16]	; (3fd8 <rtos_usb_wait_until_send_complete+0x14>)
    3fc8:	1ca0      	adds	r0, r4, #2
    3fca:	2300      	movs	r3, #0
    3fcc:	22ff      	movs	r2, #255	; 0xff
    3fce:	2100      	movs	r1, #0
    3fd0:	4d02      	ldr	r5, [pc, #8]	; (3fdc <rtos_usb_wait_until_send_complete+0x18>)
    3fd2:	47a8      	blx	r5
	return usb_send_bytes_sent;
    3fd4:	68a0      	ldr	r0, [r4, #8]
}
    3fd6:	bd70      	pop	{r4, r5, r6, pc}
    3fd8:	20000680 	.word	0x20000680
    3fdc:	0000323d 	.word	0x0000323d

00003fe0 <rtos_usb_start_read_buffer>:


void rtos_usb_start_read_buffer(uint8_t* buffer, int count) {
    3fe0:	b570      	push	{r4, r5, r6, lr}
    3fe2:	0005      	movs	r5, r0
    3fe4:	000c      	movs	r4, r1
	// if read operation is currently in progress wait until it finishes
	if (usb_read_status) wait_until_false(&usb_read_status);
    3fe6:	4b09      	ldr	r3, [pc, #36]	; (400c <rtos_usb_start_read_buffer+0x2c>)
    3fe8:	78db      	ldrb	r3, [r3, #3]
    3fea:	2b00      	cmp	r3, #0
    3fec:	d107      	bne.n	3ffe <rtos_usb_start_read_buffer+0x1e>
	usb_read_buffer = buffer;
    3fee:	4b07      	ldr	r3, [pc, #28]	; (400c <rtos_usb_start_read_buffer+0x2c>)
    3ff0:	611d      	str	r5, [r3, #16]
	usb_read_buffer_count = count;
    3ff2:	619c      	str	r4, [r3, #24]
	usb_read_bytes_read = 0;
    3ff4:	2200      	movs	r2, #0
    3ff6:	615a      	str	r2, [r3, #20]
	usb_read_status = true;
    3ff8:	3201      	adds	r2, #1
    3ffa:	70da      	strb	r2, [r3, #3]
}
    3ffc:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_read_status) wait_until_false(&usb_read_status);
    3ffe:	4804      	ldr	r0, [pc, #16]	; (4010 <rtos_usb_start_read_buffer+0x30>)
    4000:	2300      	movs	r3, #0
    4002:	22ff      	movs	r2, #255	; 0xff
    4004:	2100      	movs	r1, #0
    4006:	4e03      	ldr	r6, [pc, #12]	; (4014 <rtos_usb_start_read_buffer+0x34>)
    4008:	47b0      	blx	r6
    400a:	e7f0      	b.n	3fee <rtos_usb_start_read_buffer+0xe>
    400c:	20000680 	.word	0x20000680
    4010:	20000683 	.word	0x20000683
    4014:	0000323d 	.word	0x0000323d

00004018 <rtos_usb_wait_until_read_complete>:

int rtos_usb_wait_until_read_complete() {
    4018:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_read_status);
    401a:	4c04      	ldr	r4, [pc, #16]	; (402c <rtos_usb_wait_until_read_complete+0x14>)
    401c:	1ce0      	adds	r0, r4, #3
    401e:	2300      	movs	r3, #0
    4020:	22ff      	movs	r2, #255	; 0xff
    4022:	2100      	movs	r1, #0
    4024:	4d02      	ldr	r5, [pc, #8]	; (4030 <rtos_usb_wait_until_read_complete+0x18>)
    4026:	47a8      	blx	r5
	return usb_read_bytes_read;
    4028:	6960      	ldr	r0, [r4, #20]
    402a:	bd70      	pop	{r4, r5, r6, pc}
    402c:	20000680 	.word	0x20000680
    4030:	0000323d 	.word	0x0000323d

00004034 <CRC8>:
#include "gnclink.h"

const uint8_t CRC8_LUT_L[] = { 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D };
const uint8_t CRC8_LUT_H[] = { 0x00, 0x70, 0xE0, 0x90, 0xC7, 0xB7, 0x27, 0x57, 0x89, 0xF9, 0x69, 0x19, 0x4E, 0x3E, 0xAE, 0xDE };

uint8_t CRC8(uint8_t* data, int length) {
    4034:	b570      	push	{r4, r5, r6, lr}
    4036:	0006      	movs	r6, r0
	uint8_t crc = 0;
	for (int index = 0; index < length; ++index) {
    4038:	2400      	movs	r4, #0
	uint8_t crc = 0;
    403a:	2000      	movs	r0, #0
	for (int index = 0; index < length; ++index) {
    403c:	e00a      	b.n	4054 <CRC8+0x20>
		crc ^= data[index];
    403e:	5d33      	ldrb	r3, [r6, r4]
    4040:	4043      	eors	r3, r0
		crc = CRC8_LUT_L[crc & 0xF] ^ CRC8_LUT_H[crc >> 4];
    4042:	250f      	movs	r5, #15
    4044:	401d      	ands	r5, r3
    4046:	4a05      	ldr	r2, [pc, #20]	; (405c <CRC8+0x28>)
    4048:	5d50      	ldrb	r0, [r2, r5]
    404a:	091b      	lsrs	r3, r3, #4
    404c:	18d2      	adds	r2, r2, r3
    404e:	7c13      	ldrb	r3, [r2, #16]
    4050:	4058      	eors	r0, r3
	for (int index = 0; index < length; ++index) {
    4052:	3401      	adds	r4, #1
    4054:	428c      	cmp	r4, r1
    4056:	dbf2      	blt.n	403e <CRC8+0xa>
	}
	return crc;
}
    4058:	bd70      	pop	{r4, r5, r6, pc}
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	0000573c 	.word	0x0000573c

00004060 <GNClink_Get_Packet_Payload_Pointer>:

uint8_t* GNClink_Get_Packet_Payload_Pointer(uint8_t* packetPointer) {
	return packetPointer + GNCLINK_PACKET_HEADER_LENGTH;
    4060:	3004      	adds	r0, #4
}
    4062:	4770      	bx	lr

00004064 <GNClink_Construct_Packet>:

bool GNClink_Construct_Packet(uint8_t* packetPointer, GNClink_PacketType packetType, GNClink_PacketFlags packetFlags, int payloadSize) {
    4064:	b570      	push	{r4, r5, r6, lr}
    4066:	000c      	movs	r4, r1
	// validate inputs
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    4068:	2b3b      	cmp	r3, #59	; 0x3b
    406a:	d80c      	bhi.n	4086 <GNClink_Construct_Packet+0x22>

	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;
	// get pointer to footer
	GNClink_PacketFooter* footer = (GNClink_PacketFooter*)(packetPointer + GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    406c:	1d19      	adds	r1, r3, #4
    406e:	1845      	adds	r5, r0, r1

	// populate header
	header->magic = GNCLINK_PACKET_MAGIC;
    4070:	26ac      	movs	r6, #172	; 0xac
    4072:	7006      	strb	r6, [r0, #0]
	header->packetType = packetType;
    4074:	7044      	strb	r4, [r0, #1]
	header->packetFlags = packetFlags;
    4076:	7082      	strb	r2, [r0, #2]
	header->packetLength = payloadSize + GNCLINK_PACKET_HEADER_LENGTH + GNCLINK_PACKET_FOOTER_LENGTH;
    4078:	3305      	adds	r3, #5
    407a:	70c3      	strb	r3, [r0, #3]

	// populate footer
	footer->crc = CRC8(packetPointer, GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    407c:	4b03      	ldr	r3, [pc, #12]	; (408c <GNClink_Construct_Packet+0x28>)
    407e:	4798      	blx	r3
    4080:	7028      	strb	r0, [r5, #0]

	return true;
    4082:	2001      	movs	r0, #1
}
    4084:	bd70      	pop	{r4, r5, r6, pc}
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    4086:	2000      	movs	r0, #0
    4088:	e7fc      	b.n	4084 <GNClink_Construct_Packet+0x20>
    408a:	46c0      	nop			; (mov r8, r8)
    408c:	00004035 	.word	0x00004035

00004090 <GNClink_Check_Packet>:

bool GNClink_Check_Packet(uint8_t* packetPointer) {
    4090:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	// check magic
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    4092:	7803      	ldrb	r3, [r0, #0]
    4094:	2bac      	cmp	r3, #172	; 0xac
    4096:	d10a      	bne.n	40ae <GNClink_Check_Packet+0x1e>

	// check packet length
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4098:	78c1      	ldrb	r1, [r0, #3]
    409a:	1f4b      	subs	r3, r1, #5
    409c:	b2db      	uxtb	r3, r3
    409e:	2b3b      	cmp	r3, #59	; 0x3b
    40a0:	d807      	bhi.n	40b2 <GNClink_Check_Packet+0x22>

	// check CRC
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    40a2:	4b06      	ldr	r3, [pc, #24]	; (40bc <GNClink_Check_Packet+0x2c>)
    40a4:	4798      	blx	r3
    40a6:	2800      	cmp	r0, #0
    40a8:	d105      	bne.n	40b6 <GNClink_Check_Packet+0x26>

	// all checks passed, return true
	return true;
    40aa:	3001      	adds	r0, #1
    40ac:	e000      	b.n	40b0 <GNClink_Check_Packet+0x20>
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    40ae:	2000      	movs	r0, #0
}
    40b0:	bd10      	pop	{r4, pc}
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    40b2:	2000      	movs	r0, #0
    40b4:	e7fc      	b.n	40b0 <GNClink_Check_Packet+0x20>
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    40b6:	2000      	movs	r0, #0
    40b8:	e7fa      	b.n	40b0 <GNClink_Check_Packet+0x20>
    40ba:	46c0      	nop			; (mov r8, r8)
    40bc:	00004035 	.word	0x00004035

000040c0 <GNClink_Get_Packet_Type>:

GNClink_PacketType GNClink_Get_Packet_Type(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetType;
    40c0:	7840      	ldrb	r0, [r0, #1]
}
    40c2:	4770      	bx	lr

000040c4 <GNClink_Get_Packet_Flags>:

GNClink_PacketFlags GNClink_Get_Packet_Flags(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetFlags;
    40c4:	7880      	ldrb	r0, [r0, #2]
}
    40c6:	4770      	bx	lr

000040c8 <GNClink_Get_Frame_Payload_Pointer>:


uint8_t* GNClink_Get_Frame_Payload_Pointer(uint8_t* framePointer) {
	return framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    40c8:	3003      	adds	r0, #3
}
    40ca:	4770      	bx	lr

000040cc <GNClink_Get_Frame>:

bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    40cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ce:	000e      	movs	r6, r1
	// get pointer to packet header
	GNClink_PacketHeader* packetHeader = (GNClink_PacketHeader*)packetPointer;

	// check packet length
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    40d0:	78c1      	ldrb	r1, [r0, #3]
    40d2:	1f4c      	subs	r4, r1, #5
    40d4:	b2e4      	uxtb	r4, r4
    40d6:	2c3b      	cmp	r4, #59	; 0x3b
    40d8:	d832      	bhi.n	4140 <GNClink_Get_Frame+0x74>

	// calculate number of frames for packet
	int frameCount = (packetHeader->packetLength + GNCLINK_FRAME_PAYLOAD_LENGTH - 1) / GNCLINK_FRAME_PAYLOAD_LENGTH;
    40da:	310f      	adds	r1, #15
    40dc:	1109      	asrs	r1, r1, #4
	*moreFrames = frameIndex < frameCount - 1;
    40de:	1e4d      	subs	r5, r1, #1
    40e0:	2401      	movs	r4, #1
    40e2:	429d      	cmp	r5, r3
    40e4:	dc00      	bgt.n	40e8 <GNClink_Get_Frame+0x1c>
    40e6:	2400      	movs	r4, #0
    40e8:	9d06      	ldr	r5, [sp, #24]
    40ea:	702c      	strb	r4, [r5, #0]

	// check index is valid
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    40ec:	2b00      	cmp	r3, #0
    40ee:	db29      	blt.n	4144 <GNClink_Get_Frame+0x78>
    40f0:	4299      	cmp	r1, r3
    40f2:	dd29      	ble.n	4148 <GNClink_Get_Frame+0x7c>
	// get pointer to frame header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    40f4:	1cf7      	adds	r7, r6, #3

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    40f6:	24ae      	movs	r4, #174	; 0xae
    40f8:	7034      	strb	r4, [r6, #0]
	header->index = frameIndex;
    40fa:	7073      	strb	r3, [r6, #1]
	header->flags = flags;
    40fc:	70b2      	strb	r2, [r6, #2]
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    40fe:	1c5c      	adds	r4, r3, #1
    4100:	428c      	cmp	r4, r1
    4102:	d00c      	beq.n	411e <GNClink_Get_Frame+0x52>
bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    4104:	2200      	movs	r2, #0

	// populate payload
	int i = 0;
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4106:	2a0f      	cmp	r2, #15
    4108:	dc11      	bgt.n	412e <GNClink_Get_Frame+0x62>
    410a:	78c5      	ldrb	r5, [r0, #3]
    410c:	011c      	lsls	r4, r3, #4
    410e:	1b2d      	subs	r5, r5, r4
    4110:	4295      	cmp	r5, r2
    4112:	dd0c      	ble.n	412e <GNClink_Get_Frame+0x62>
		payload[i] = packetPointer[i + GNCLINK_FRAME_PAYLOAD_LENGTH * frameIndex];
    4114:	18a4      	adds	r4, r4, r2
    4116:	5d01      	ldrb	r1, [r0, r4]
    4118:	54b9      	strb	r1, [r7, r2]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    411a:	3201      	adds	r2, #1
    411c:	e7f3      	b.n	4106 <GNClink_Get_Frame+0x3a>
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    411e:	2102      	movs	r1, #2
    4120:	430a      	orrs	r2, r1
    4122:	70b2      	strb	r2, [r6, #2]
    4124:	e7ee      	b.n	4104 <GNClink_Get_Frame+0x38>
	}
	// populate the rest with zeros
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
		payload[i] = 0;
    4126:	18bb      	adds	r3, r7, r2
    4128:	2100      	movs	r1, #0
    412a:	7019      	strb	r1, [r3, #0]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    412c:	3201      	adds	r2, #1
    412e:	2a0f      	cmp	r2, #15
    4130:	ddf9      	ble.n	4126 <GNClink_Get_Frame+0x5a>
	}

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    4132:	2113      	movs	r1, #19
    4134:	0030      	movs	r0, r6
    4136:	4b05      	ldr	r3, [pc, #20]	; (414c <GNClink_Get_Frame+0x80>)
    4138:	4798      	blx	r3
    413a:	74f0      	strb	r0, [r6, #19]

	return true;
    413c:	2001      	movs	r0, #1
    413e:	e000      	b.n	4142 <GNClink_Get_Frame+0x76>
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4140:	2000      	movs	r0, #0
}
    4142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    4144:	2000      	movs	r0, #0
    4146:	e7fc      	b.n	4142 <GNClink_Get_Frame+0x76>
    4148:	2000      	movs	r0, #0
    414a:	e7fa      	b.n	4142 <GNClink_Get_Frame+0x76>
    414c:	00004035 	.word	0x00004035

00004150 <GNClink_Check_Frame>:

bool GNClink_Check_Frame(uint8_t* framePointer) {
    4150:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	// check magic
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4152:	7803      	ldrb	r3, [r0, #0]
    4154:	2bae      	cmp	r3, #174	; 0xae
    4156:	d109      	bne.n	416c <GNClink_Check_Frame+0x1c>

	// check index
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4158:	7843      	ldrb	r3, [r0, #1]
    415a:	2b03      	cmp	r3, #3
    415c:	d808      	bhi.n	4170 <GNClink_Check_Frame+0x20>

	// check CRC
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    415e:	2114      	movs	r1, #20
    4160:	4b05      	ldr	r3, [pc, #20]	; (4178 <GNClink_Check_Frame+0x28>)
    4162:	4798      	blx	r3
    4164:	2800      	cmp	r0, #0
    4166:	d105      	bne.n	4174 <GNClink_Check_Frame+0x24>

	// all checks passed, return true
	return true;
    4168:	3001      	adds	r0, #1
    416a:	e000      	b.n	416e <GNClink_Check_Frame+0x1e>
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    416c:	2000      	movs	r0, #0
}
    416e:	bd10      	pop	{r4, pc}
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4170:	2000      	movs	r0, #0
    4172:	e7fc      	b.n	416e <GNClink_Check_Frame+0x1e>
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4174:	2000      	movs	r0, #0
    4176:	e7fa      	b.n	416e <GNClink_Check_Frame+0x1e>
    4178:	00004035 	.word	0x00004035

0000417c <GNClink_Frame_RequestResend>:

bool GNClink_Frame_RequestResend(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (header->flags & GNClink_FrameFlags_RequestResend) != 0;
    417c:	7883      	ldrb	r3, [r0, #2]
    417e:	089b      	lsrs	r3, r3, #2
    4180:	2001      	movs	r0, #1
    4182:	4018      	ands	r0, r3
}
    4184:	4770      	bx	lr

00004186 <GNClink_Get_Frame_Index>:

int GNClink_Get_Frame_Index(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (int)header->index;
    4186:	7840      	ldrb	r0, [r0, #1]
}
    4188:	4770      	bx	lr
	...

0000418c <GNClink_Construct_RequestResendFrame>:

void GNClink_Construct_RequestResendFrame(uint8_t* framePointer) {
    418c:	b510      	push	{r4, lr}
    418e:	0004      	movs	r4, r0
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    4190:	23ae      	movs	r3, #174	; 0xae
    4192:	7003      	strb	r3, [r0, #0]
	header->index = 0;
    4194:	2300      	movs	r3, #0
    4196:	7043      	strb	r3, [r0, #1]
	header->flags = GNClink_FrameFlags_RequestResend;
    4198:	3304      	adds	r3, #4
    419a:	7083      	strb	r3, [r0, #2]

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    419c:	2113      	movs	r1, #19
    419e:	4b02      	ldr	r3, [pc, #8]	; (41a8 <GNClink_Construct_RequestResendFrame+0x1c>)
    41a0:	4798      	blx	r3
    41a2:	74e0      	strb	r0, [r4, #19]
}
    41a4:	bd10      	pop	{r4, pc}
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	00004035 	.word	0x00004035

000041ac <GNClink_Reconstruct_Packet_From_Frames>:


bool GNClink_Reconstruct_Packet_From_Frames(uint8_t* framePointer, uint8_t* packetPointer, bool* moreFrames) {
    41ac:	b530      	push	{r4, r5, lr}
	// get pointer to frame footer
	//GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    41ae:	2400      	movs	r4, #0
    41b0:	2c0f      	cmp	r4, #15
    41b2:	dc09      	bgt.n	41c8 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
    41b4:	7843      	ldrb	r3, [r0, #1]
    41b6:	011b      	lsls	r3, r3, #4
    41b8:	191b      	adds	r3, r3, r4
    41ba:	2b3f      	cmp	r3, #63	; 0x3f
    41bc:	dc04      	bgt.n	41c8 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
		packetPointer[i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH] = payload[i];
    41be:	1905      	adds	r5, r0, r4
    41c0:	78ed      	ldrb	r5, [r5, #3]
    41c2:	54cd      	strb	r5, [r1, r3]
	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    41c4:	3401      	adds	r4, #1
    41c6:	e7f3      	b.n	41b0 <GNClink_Reconstruct_Packet_From_Frames+0x4>
	}

	*moreFrames = (header->flags & GNClink_FrameFlags_TransactionEnd) == 0;
    41c8:	7883      	ldrb	r3, [r0, #2]
    41ca:	085b      	lsrs	r3, r3, #1
    41cc:	2101      	movs	r1, #1
    41ce:	404b      	eors	r3, r1
    41d0:	2101      	movs	r1, #1
    41d2:	400b      	ands	r3, r1
    41d4:	7013      	strb	r3, [r2, #0]

	return true;
    41d6:	2001      	movs	r0, #1
    41d8:	bd30      	pop	{r4, r5, pc}
	...

000041dc <fp_multiply>:
#include <fixedpoint_defs.h>

fp32_t fp_multiply(fp32_t a, fp32_t b) {
    41dc:	b510      	push	{r4, lr}
    41de:	000a      	movs	r2, r1
    fp_long c = (fp_long)a * b;
    41e0:	17c1      	asrs	r1, r0, #31
    41e2:	17d3      	asrs	r3, r2, #31
    41e4:	4c02      	ldr	r4, [pc, #8]	; (41f0 <fp_multiply+0x14>)
    41e6:	47a0      	blx	r4
    return c >> 16;
    41e8:	0409      	lsls	r1, r1, #16
    41ea:	0c00      	lsrs	r0, r0, #16
    41ec:	4308      	orrs	r0, r1
    41ee:	bd10      	pop	{r4, pc}
    41f0:	00004269 	.word	0x00004269

000041f4 <__aeabi_cfrcmple>:
    41f4:	4684      	mov	ip, r0
    41f6:	0008      	movs	r0, r1
    41f8:	4661      	mov	r1, ip
    41fa:	e7ff      	b.n	41fc <__aeabi_cfcmpeq>

000041fc <__aeabi_cfcmpeq>:
    41fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    41fe:	f000 fb93 	bl	4928 <__lesf2>
    4202:	2800      	cmp	r0, #0
    4204:	d401      	bmi.n	420a <__aeabi_cfcmpeq+0xe>
    4206:	2100      	movs	r1, #0
    4208:	42c8      	cmn	r0, r1
    420a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000420c <__aeabi_fcmpeq>:
    420c:	b510      	push	{r4, lr}
    420e:	f000 fb13 	bl	4838 <__eqsf2>
    4212:	4240      	negs	r0, r0
    4214:	3001      	adds	r0, #1
    4216:	bd10      	pop	{r4, pc}

00004218 <__aeabi_fcmplt>:
    4218:	b510      	push	{r4, lr}
    421a:	f000 fb85 	bl	4928 <__lesf2>
    421e:	2800      	cmp	r0, #0
    4220:	db01      	blt.n	4226 <__aeabi_fcmplt+0xe>
    4222:	2000      	movs	r0, #0
    4224:	bd10      	pop	{r4, pc}
    4226:	2001      	movs	r0, #1
    4228:	bd10      	pop	{r4, pc}
    422a:	46c0      	nop			; (mov r8, r8)

0000422c <__aeabi_fcmple>:
    422c:	b510      	push	{r4, lr}
    422e:	f000 fb7b 	bl	4928 <__lesf2>
    4232:	2800      	cmp	r0, #0
    4234:	dd01      	ble.n	423a <__aeabi_fcmple+0xe>
    4236:	2000      	movs	r0, #0
    4238:	bd10      	pop	{r4, pc}
    423a:	2001      	movs	r0, #1
    423c:	bd10      	pop	{r4, pc}
    423e:	46c0      	nop			; (mov r8, r8)

00004240 <__aeabi_fcmpgt>:
    4240:	b510      	push	{r4, lr}
    4242:	f000 fb21 	bl	4888 <__gesf2>
    4246:	2800      	cmp	r0, #0
    4248:	dc01      	bgt.n	424e <__aeabi_fcmpgt+0xe>
    424a:	2000      	movs	r0, #0
    424c:	bd10      	pop	{r4, pc}
    424e:	2001      	movs	r0, #1
    4250:	bd10      	pop	{r4, pc}
    4252:	46c0      	nop			; (mov r8, r8)

00004254 <__aeabi_fcmpge>:
    4254:	b510      	push	{r4, lr}
    4256:	f000 fb17 	bl	4888 <__gesf2>
    425a:	2800      	cmp	r0, #0
    425c:	da01      	bge.n	4262 <__aeabi_fcmpge+0xe>
    425e:	2000      	movs	r0, #0
    4260:	bd10      	pop	{r4, pc}
    4262:	2001      	movs	r0, #1
    4264:	bd10      	pop	{r4, pc}
    4266:	46c0      	nop			; (mov r8, r8)

00004268 <__aeabi_lmul>:
    4268:	b5f0      	push	{r4, r5, r6, r7, lr}
    426a:	46ce      	mov	lr, r9
    426c:	4699      	mov	r9, r3
    426e:	0c03      	lsrs	r3, r0, #16
    4270:	469c      	mov	ip, r3
    4272:	0413      	lsls	r3, r2, #16
    4274:	4647      	mov	r7, r8
    4276:	0c1b      	lsrs	r3, r3, #16
    4278:	001d      	movs	r5, r3
    427a:	000e      	movs	r6, r1
    427c:	4661      	mov	r1, ip
    427e:	0404      	lsls	r4, r0, #16
    4280:	0c24      	lsrs	r4, r4, #16
    4282:	b580      	push	{r7, lr}
    4284:	0007      	movs	r7, r0
    4286:	0c10      	lsrs	r0, r2, #16
    4288:	434b      	muls	r3, r1
    428a:	4365      	muls	r5, r4
    428c:	4341      	muls	r1, r0
    428e:	4360      	muls	r0, r4
    4290:	0c2c      	lsrs	r4, r5, #16
    4292:	18c0      	adds	r0, r0, r3
    4294:	1824      	adds	r4, r4, r0
    4296:	468c      	mov	ip, r1
    4298:	42a3      	cmp	r3, r4
    429a:	d903      	bls.n	42a4 <__aeabi_lmul+0x3c>
    429c:	2380      	movs	r3, #128	; 0x80
    429e:	025b      	lsls	r3, r3, #9
    42a0:	4698      	mov	r8, r3
    42a2:	44c4      	add	ip, r8
    42a4:	4649      	mov	r1, r9
    42a6:	4379      	muls	r1, r7
    42a8:	4356      	muls	r6, r2
    42aa:	0c23      	lsrs	r3, r4, #16
    42ac:	042d      	lsls	r5, r5, #16
    42ae:	0c2d      	lsrs	r5, r5, #16
    42b0:	1989      	adds	r1, r1, r6
    42b2:	4463      	add	r3, ip
    42b4:	0424      	lsls	r4, r4, #16
    42b6:	1960      	adds	r0, r4, r5
    42b8:	18c9      	adds	r1, r1, r3
    42ba:	bcc0      	pop	{r6, r7}
    42bc:	46b9      	mov	r9, r7
    42be:	46b0      	mov	r8, r6
    42c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42c2:	46c0      	nop			; (mov r8, r8)

000042c4 <__aeabi_f2uiz>:
    42c4:	219e      	movs	r1, #158	; 0x9e
    42c6:	b510      	push	{r4, lr}
    42c8:	05c9      	lsls	r1, r1, #23
    42ca:	1c04      	adds	r4, r0, #0
    42cc:	f7ff ffc2 	bl	4254 <__aeabi_fcmpge>
    42d0:	2800      	cmp	r0, #0
    42d2:	d103      	bne.n	42dc <__aeabi_f2uiz+0x18>
    42d4:	1c20      	adds	r0, r4, #0
    42d6:	f000 fe45 	bl	4f64 <__aeabi_f2iz>
    42da:	bd10      	pop	{r4, pc}
    42dc:	219e      	movs	r1, #158	; 0x9e
    42de:	1c20      	adds	r0, r4, #0
    42e0:	05c9      	lsls	r1, r1, #23
    42e2:	f000 fcad 	bl	4c40 <__aeabi_fsub>
    42e6:	f000 fe3d 	bl	4f64 <__aeabi_f2iz>
    42ea:	2380      	movs	r3, #128	; 0x80
    42ec:	061b      	lsls	r3, r3, #24
    42ee:	469c      	mov	ip, r3
    42f0:	4460      	add	r0, ip
    42f2:	e7f2      	b.n	42da <__aeabi_f2uiz+0x16>

000042f4 <__aeabi_fadd>:
    42f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42f6:	0243      	lsls	r3, r0, #9
    42f8:	0045      	lsls	r5, r0, #1
    42fa:	0fc4      	lsrs	r4, r0, #31
    42fc:	0248      	lsls	r0, r1, #9
    42fe:	0a42      	lsrs	r2, r0, #9
    4300:	4694      	mov	ip, r2
    4302:	004a      	lsls	r2, r1, #1
    4304:	0a5f      	lsrs	r7, r3, #9
    4306:	0e2d      	lsrs	r5, r5, #24
    4308:	099b      	lsrs	r3, r3, #6
    430a:	0e12      	lsrs	r2, r2, #24
    430c:	0fc9      	lsrs	r1, r1, #31
    430e:	0980      	lsrs	r0, r0, #6
    4310:	428c      	cmp	r4, r1
    4312:	d022      	beq.n	435a <__aeabi_fadd+0x66>
    4314:	1aae      	subs	r6, r5, r2
    4316:	2e00      	cmp	r6, #0
    4318:	dd0d      	ble.n	4336 <__aeabi_fadd+0x42>
    431a:	2a00      	cmp	r2, #0
    431c:	d12d      	bne.n	437a <__aeabi_fadd+0x86>
    431e:	2800      	cmp	r0, #0
    4320:	d100      	bne.n	4324 <__aeabi_fadd+0x30>
    4322:	e083      	b.n	442c <__aeabi_fadd+0x138>
    4324:	1e72      	subs	r2, r6, #1
    4326:	2e01      	cmp	r6, #1
    4328:	d100      	bne.n	432c <__aeabi_fadd+0x38>
    432a:	e11b      	b.n	4564 <__aeabi_fadd+0x270>
    432c:	2eff      	cmp	r6, #255	; 0xff
    432e:	d100      	bne.n	4332 <__aeabi_fadd+0x3e>
    4330:	e0a2      	b.n	4478 <__aeabi_fadd+0x184>
    4332:	0016      	movs	r6, r2
    4334:	e027      	b.n	4386 <__aeabi_fadd+0x92>
    4336:	2e00      	cmp	r6, #0
    4338:	d048      	beq.n	43cc <__aeabi_fadd+0xd8>
    433a:	1b56      	subs	r6, r2, r5
    433c:	2d00      	cmp	r5, #0
    433e:	d000      	beq.n	4342 <__aeabi_fadd+0x4e>
    4340:	e0c1      	b.n	44c6 <__aeabi_fadd+0x1d2>
    4342:	2b00      	cmp	r3, #0
    4344:	d100      	bne.n	4348 <__aeabi_fadd+0x54>
    4346:	e0f7      	b.n	4538 <__aeabi_fadd+0x244>
    4348:	1e74      	subs	r4, r6, #1
    434a:	2e01      	cmp	r6, #1
    434c:	d100      	bne.n	4350 <__aeabi_fadd+0x5c>
    434e:	e12d      	b.n	45ac <__aeabi_fadd+0x2b8>
    4350:	2eff      	cmp	r6, #255	; 0xff
    4352:	d100      	bne.n	4356 <__aeabi_fadd+0x62>
    4354:	e08e      	b.n	4474 <__aeabi_fadd+0x180>
    4356:	0026      	movs	r6, r4
    4358:	e0ba      	b.n	44d0 <__aeabi_fadd+0x1dc>
    435a:	1aa9      	subs	r1, r5, r2
    435c:	2900      	cmp	r1, #0
    435e:	dc00      	bgt.n	4362 <__aeabi_fadd+0x6e>
    4360:	e08c      	b.n	447c <__aeabi_fadd+0x188>
    4362:	2a00      	cmp	r2, #0
    4364:	d046      	beq.n	43f4 <__aeabi_fadd+0x100>
    4366:	2dff      	cmp	r5, #255	; 0xff
    4368:	d100      	bne.n	436c <__aeabi_fadd+0x78>
    436a:	e085      	b.n	4478 <__aeabi_fadd+0x184>
    436c:	2280      	movs	r2, #128	; 0x80
    436e:	04d2      	lsls	r2, r2, #19
    4370:	4310      	orrs	r0, r2
    4372:	291b      	cmp	r1, #27
    4374:	dd49      	ble.n	440a <__aeabi_fadd+0x116>
    4376:	3301      	adds	r3, #1
    4378:	e016      	b.n	43a8 <__aeabi_fadd+0xb4>
    437a:	2dff      	cmp	r5, #255	; 0xff
    437c:	d100      	bne.n	4380 <__aeabi_fadd+0x8c>
    437e:	e07b      	b.n	4478 <__aeabi_fadd+0x184>
    4380:	2280      	movs	r2, #128	; 0x80
    4382:	04d2      	lsls	r2, r2, #19
    4384:	4310      	orrs	r0, r2
    4386:	2201      	movs	r2, #1
    4388:	2e1b      	cmp	r6, #27
    438a:	dc07      	bgt.n	439c <__aeabi_fadd+0xa8>
    438c:	2120      	movs	r1, #32
    438e:	1b89      	subs	r1, r1, r6
    4390:	0002      	movs	r2, r0
    4392:	4088      	lsls	r0, r1
    4394:	40f2      	lsrs	r2, r6
    4396:	1e41      	subs	r1, r0, #1
    4398:	4188      	sbcs	r0, r1
    439a:	4302      	orrs	r2, r0
    439c:	1a9b      	subs	r3, r3, r2
    439e:	015a      	lsls	r2, r3, #5
    43a0:	d451      	bmi.n	4446 <__aeabi_fadd+0x152>
    43a2:	2207      	movs	r2, #7
    43a4:	401a      	ands	r2, r3
    43a6:	d042      	beq.n	442e <__aeabi_fadd+0x13a>
    43a8:	220f      	movs	r2, #15
    43aa:	401a      	ands	r2, r3
    43ac:	2a04      	cmp	r2, #4
    43ae:	d000      	beq.n	43b2 <__aeabi_fadd+0xbe>
    43b0:	3304      	adds	r3, #4
    43b2:	015a      	lsls	r2, r3, #5
    43b4:	d53b      	bpl.n	442e <__aeabi_fadd+0x13a>
    43b6:	1c68      	adds	r0, r5, #1
    43b8:	2dfe      	cmp	r5, #254	; 0xfe
    43ba:	d034      	beq.n	4426 <__aeabi_fadd+0x132>
    43bc:	019b      	lsls	r3, r3, #6
    43be:	0a5b      	lsrs	r3, r3, #9
    43c0:	b2c0      	uxtb	r0, r0
    43c2:	05c0      	lsls	r0, r0, #23
    43c4:	4318      	orrs	r0, r3
    43c6:	07e4      	lsls	r4, r4, #31
    43c8:	4320      	orrs	r0, r4
    43ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43cc:	26fe      	movs	r6, #254	; 0xfe
    43ce:	1c6a      	adds	r2, r5, #1
    43d0:	4216      	tst	r6, r2
    43d2:	d000      	beq.n	43d6 <__aeabi_fadd+0xe2>
    43d4:	e08b      	b.n	44ee <__aeabi_fadd+0x1fa>
    43d6:	2d00      	cmp	r5, #0
    43d8:	d000      	beq.n	43dc <__aeabi_fadd+0xe8>
    43da:	e0b1      	b.n	4540 <__aeabi_fadd+0x24c>
    43dc:	2b00      	cmp	r3, #0
    43de:	d100      	bne.n	43e2 <__aeabi_fadd+0xee>
    43e0:	e0df      	b.n	45a2 <__aeabi_fadd+0x2ae>
    43e2:	2800      	cmp	r0, #0
    43e4:	d069      	beq.n	44ba <__aeabi_fadd+0x1c6>
    43e6:	1a1a      	subs	r2, r3, r0
    43e8:	0156      	lsls	r6, r2, #5
    43ea:	d400      	bmi.n	43ee <__aeabi_fadd+0xfa>
    43ec:	e0fb      	b.n	45e6 <__aeabi_fadd+0x2f2>
    43ee:	000c      	movs	r4, r1
    43f0:	1ac3      	subs	r3, r0, r3
    43f2:	e03c      	b.n	446e <__aeabi_fadd+0x17a>
    43f4:	2800      	cmp	r0, #0
    43f6:	d100      	bne.n	43fa <__aeabi_fadd+0x106>
    43f8:	e0b7      	b.n	456a <__aeabi_fadd+0x276>
    43fa:	1e4a      	subs	r2, r1, #1
    43fc:	2901      	cmp	r1, #1
    43fe:	d100      	bne.n	4402 <__aeabi_fadd+0x10e>
    4400:	e0aa      	b.n	4558 <__aeabi_fadd+0x264>
    4402:	29ff      	cmp	r1, #255	; 0xff
    4404:	d038      	beq.n	4478 <__aeabi_fadd+0x184>
    4406:	0011      	movs	r1, r2
    4408:	e7b3      	b.n	4372 <__aeabi_fadd+0x7e>
    440a:	0002      	movs	r2, r0
    440c:	2620      	movs	r6, #32
    440e:	40ca      	lsrs	r2, r1
    4410:	1a71      	subs	r1, r6, r1
    4412:	4088      	lsls	r0, r1
    4414:	1e41      	subs	r1, r0, #1
    4416:	4188      	sbcs	r0, r1
    4418:	4310      	orrs	r0, r2
    441a:	181b      	adds	r3, r3, r0
    441c:	015a      	lsls	r2, r3, #5
    441e:	d5c0      	bpl.n	43a2 <__aeabi_fadd+0xae>
    4420:	3501      	adds	r5, #1
    4422:	2dff      	cmp	r5, #255	; 0xff
    4424:	d16c      	bne.n	4500 <__aeabi_fadd+0x20c>
    4426:	20ff      	movs	r0, #255	; 0xff
    4428:	2300      	movs	r3, #0
    442a:	e7ca      	b.n	43c2 <__aeabi_fadd+0xce>
    442c:	0035      	movs	r5, r6
    442e:	08db      	lsrs	r3, r3, #3
    4430:	2dff      	cmp	r5, #255	; 0xff
    4432:	d144      	bne.n	44be <__aeabi_fadd+0x1ca>
    4434:	2b00      	cmp	r3, #0
    4436:	d0f6      	beq.n	4426 <__aeabi_fadd+0x132>
    4438:	2280      	movs	r2, #128	; 0x80
    443a:	03d2      	lsls	r2, r2, #15
    443c:	4313      	orrs	r3, r2
    443e:	025b      	lsls	r3, r3, #9
    4440:	20ff      	movs	r0, #255	; 0xff
    4442:	0a5b      	lsrs	r3, r3, #9
    4444:	e7bd      	b.n	43c2 <__aeabi_fadd+0xce>
    4446:	019e      	lsls	r6, r3, #6
    4448:	09b6      	lsrs	r6, r6, #6
    444a:	0030      	movs	r0, r6
    444c:	f000 fe38 	bl	50c0 <__clzsi2>
    4450:	3805      	subs	r0, #5
    4452:	4086      	lsls	r6, r0
    4454:	4285      	cmp	r5, r0
    4456:	dc20      	bgt.n	449a <__aeabi_fadd+0x1a6>
    4458:	2220      	movs	r2, #32
    445a:	1b40      	subs	r0, r0, r5
    445c:	3001      	adds	r0, #1
    445e:	1a12      	subs	r2, r2, r0
    4460:	0033      	movs	r3, r6
    4462:	4096      	lsls	r6, r2
    4464:	40c3      	lsrs	r3, r0
    4466:	1e72      	subs	r2, r6, #1
    4468:	4196      	sbcs	r6, r2
    446a:	2500      	movs	r5, #0
    446c:	4333      	orrs	r3, r6
    446e:	075a      	lsls	r2, r3, #29
    4470:	d19a      	bne.n	43a8 <__aeabi_fadd+0xb4>
    4472:	e79e      	b.n	43b2 <__aeabi_fadd+0xbe>
    4474:	000c      	movs	r4, r1
    4476:	0003      	movs	r3, r0
    4478:	08db      	lsrs	r3, r3, #3
    447a:	e7db      	b.n	4434 <__aeabi_fadd+0x140>
    447c:	2900      	cmp	r1, #0
    447e:	d010      	beq.n	44a2 <__aeabi_fadd+0x1ae>
    4480:	1b51      	subs	r1, r2, r5
    4482:	2d00      	cmp	r5, #0
    4484:	d143      	bne.n	450e <__aeabi_fadd+0x21a>
    4486:	2b00      	cmp	r3, #0
    4488:	d100      	bne.n	448c <__aeabi_fadd+0x198>
    448a:	e093      	b.n	45b4 <__aeabi_fadd+0x2c0>
    448c:	1e4d      	subs	r5, r1, #1
    448e:	2901      	cmp	r1, #1
    4490:	d062      	beq.n	4558 <__aeabi_fadd+0x264>
    4492:	29ff      	cmp	r1, #255	; 0xff
    4494:	d0ef      	beq.n	4476 <__aeabi_fadd+0x182>
    4496:	0029      	movs	r1, r5
    4498:	e03e      	b.n	4518 <__aeabi_fadd+0x224>
    449a:	4b55      	ldr	r3, [pc, #340]	; (45f0 <__aeabi_fadd+0x2fc>)
    449c:	1a2d      	subs	r5, r5, r0
    449e:	4033      	ands	r3, r6
    44a0:	e7e5      	b.n	446e <__aeabi_fadd+0x17a>
    44a2:	21fe      	movs	r1, #254	; 0xfe
    44a4:	1c6a      	adds	r2, r5, #1
    44a6:	4211      	tst	r1, r2
    44a8:	d13b      	bne.n	4522 <__aeabi_fadd+0x22e>
    44aa:	2d00      	cmp	r5, #0
    44ac:	d16a      	bne.n	4584 <__aeabi_fadd+0x290>
    44ae:	2b00      	cmp	r3, #0
    44b0:	d100      	bne.n	44b4 <__aeabi_fadd+0x1c0>
    44b2:	e08e      	b.n	45d2 <__aeabi_fadd+0x2de>
    44b4:	2800      	cmp	r0, #0
    44b6:	d000      	beq.n	44ba <__aeabi_fadd+0x1c6>
    44b8:	e08d      	b.n	45d6 <__aeabi_fadd+0x2e2>
    44ba:	2500      	movs	r5, #0
    44bc:	08db      	lsrs	r3, r3, #3
    44be:	025b      	lsls	r3, r3, #9
    44c0:	0a5b      	lsrs	r3, r3, #9
    44c2:	b2e8      	uxtb	r0, r5
    44c4:	e77d      	b.n	43c2 <__aeabi_fadd+0xce>
    44c6:	2aff      	cmp	r2, #255	; 0xff
    44c8:	d0d4      	beq.n	4474 <__aeabi_fadd+0x180>
    44ca:	2480      	movs	r4, #128	; 0x80
    44cc:	04e4      	lsls	r4, r4, #19
    44ce:	4323      	orrs	r3, r4
    44d0:	2401      	movs	r4, #1
    44d2:	2e1b      	cmp	r6, #27
    44d4:	dc07      	bgt.n	44e6 <__aeabi_fadd+0x1f2>
    44d6:	2520      	movs	r5, #32
    44d8:	1bad      	subs	r5, r5, r6
    44da:	001c      	movs	r4, r3
    44dc:	40ab      	lsls	r3, r5
    44de:	40f4      	lsrs	r4, r6
    44e0:	1e5d      	subs	r5, r3, #1
    44e2:	41ab      	sbcs	r3, r5
    44e4:	431c      	orrs	r4, r3
    44e6:	1b03      	subs	r3, r0, r4
    44e8:	0015      	movs	r5, r2
    44ea:	000c      	movs	r4, r1
    44ec:	e757      	b.n	439e <__aeabi_fadd+0xaa>
    44ee:	1a1e      	subs	r6, r3, r0
    44f0:	0172      	lsls	r2, r6, #5
    44f2:	d42e      	bmi.n	4552 <__aeabi_fadd+0x25e>
    44f4:	2e00      	cmp	r6, #0
    44f6:	d1a8      	bne.n	444a <__aeabi_fadd+0x156>
    44f8:	2400      	movs	r4, #0
    44fa:	2000      	movs	r0, #0
    44fc:	2300      	movs	r3, #0
    44fe:	e760      	b.n	43c2 <__aeabi_fadd+0xce>
    4500:	2201      	movs	r2, #1
    4502:	493c      	ldr	r1, [pc, #240]	; (45f4 <__aeabi_fadd+0x300>)
    4504:	401a      	ands	r2, r3
    4506:	085b      	lsrs	r3, r3, #1
    4508:	400b      	ands	r3, r1
    450a:	4313      	orrs	r3, r2
    450c:	e7af      	b.n	446e <__aeabi_fadd+0x17a>
    450e:	2aff      	cmp	r2, #255	; 0xff
    4510:	d0b1      	beq.n	4476 <__aeabi_fadd+0x182>
    4512:	2580      	movs	r5, #128	; 0x80
    4514:	04ed      	lsls	r5, r5, #19
    4516:	432b      	orrs	r3, r5
    4518:	291b      	cmp	r1, #27
    451a:	dd28      	ble.n	456e <__aeabi_fadd+0x27a>
    451c:	0015      	movs	r5, r2
    451e:	1c43      	adds	r3, r0, #1
    4520:	e742      	b.n	43a8 <__aeabi_fadd+0xb4>
    4522:	2aff      	cmp	r2, #255	; 0xff
    4524:	d100      	bne.n	4528 <__aeabi_fadd+0x234>
    4526:	e77e      	b.n	4426 <__aeabi_fadd+0x132>
    4528:	181b      	adds	r3, r3, r0
    452a:	085b      	lsrs	r3, r3, #1
    452c:	0015      	movs	r5, r2
    452e:	075a      	lsls	r2, r3, #29
    4530:	d000      	beq.n	4534 <__aeabi_fadd+0x240>
    4532:	e739      	b.n	43a8 <__aeabi_fadd+0xb4>
    4534:	08db      	lsrs	r3, r3, #3
    4536:	e7c2      	b.n	44be <__aeabi_fadd+0x1ca>
    4538:	000c      	movs	r4, r1
    453a:	0035      	movs	r5, r6
    453c:	0003      	movs	r3, r0
    453e:	e776      	b.n	442e <__aeabi_fadd+0x13a>
    4540:	2b00      	cmp	r3, #0
    4542:	d13a      	bne.n	45ba <__aeabi_fadd+0x2c6>
    4544:	2800      	cmp	r0, #0
    4546:	d195      	bne.n	4474 <__aeabi_fadd+0x180>
    4548:	2380      	movs	r3, #128	; 0x80
    454a:	2400      	movs	r4, #0
    454c:	20ff      	movs	r0, #255	; 0xff
    454e:	03db      	lsls	r3, r3, #15
    4550:	e737      	b.n	43c2 <__aeabi_fadd+0xce>
    4552:	000c      	movs	r4, r1
    4554:	1ac6      	subs	r6, r0, r3
    4556:	e778      	b.n	444a <__aeabi_fadd+0x156>
    4558:	181b      	adds	r3, r3, r0
    455a:	2502      	movs	r5, #2
    455c:	015a      	lsls	r2, r3, #5
    455e:	d4cf      	bmi.n	4500 <__aeabi_fadd+0x20c>
    4560:	3d01      	subs	r5, #1
    4562:	e71e      	b.n	43a2 <__aeabi_fadd+0xae>
    4564:	2501      	movs	r5, #1
    4566:	1a1b      	subs	r3, r3, r0
    4568:	e719      	b.n	439e <__aeabi_fadd+0xaa>
    456a:	000d      	movs	r5, r1
    456c:	e75f      	b.n	442e <__aeabi_fadd+0x13a>
    456e:	001d      	movs	r5, r3
    4570:	2620      	movs	r6, #32
    4572:	40cd      	lsrs	r5, r1
    4574:	1a71      	subs	r1, r6, r1
    4576:	408b      	lsls	r3, r1
    4578:	1e59      	subs	r1, r3, #1
    457a:	418b      	sbcs	r3, r1
    457c:	432b      	orrs	r3, r5
    457e:	181b      	adds	r3, r3, r0
    4580:	0015      	movs	r5, r2
    4582:	e74b      	b.n	441c <__aeabi_fadd+0x128>
    4584:	2b00      	cmp	r3, #0
    4586:	d100      	bne.n	458a <__aeabi_fadd+0x296>
    4588:	e775      	b.n	4476 <__aeabi_fadd+0x182>
    458a:	2800      	cmp	r0, #0
    458c:	d100      	bne.n	4590 <__aeabi_fadd+0x29c>
    458e:	e773      	b.n	4478 <__aeabi_fadd+0x184>
    4590:	2280      	movs	r2, #128	; 0x80
    4592:	03d2      	lsls	r2, r2, #15
    4594:	4297      	cmp	r7, r2
    4596:	d302      	bcc.n	459e <__aeabi_fadd+0x2aa>
    4598:	4594      	cmp	ip, r2
    459a:	d200      	bcs.n	459e <__aeabi_fadd+0x2aa>
    459c:	0003      	movs	r3, r0
    459e:	08db      	lsrs	r3, r3, #3
    45a0:	e74a      	b.n	4438 <__aeabi_fadd+0x144>
    45a2:	2800      	cmp	r0, #0
    45a4:	d0a8      	beq.n	44f8 <__aeabi_fadd+0x204>
    45a6:	000c      	movs	r4, r1
    45a8:	0003      	movs	r3, r0
    45aa:	e786      	b.n	44ba <__aeabi_fadd+0x1c6>
    45ac:	000c      	movs	r4, r1
    45ae:	1ac3      	subs	r3, r0, r3
    45b0:	3501      	adds	r5, #1
    45b2:	e6f4      	b.n	439e <__aeabi_fadd+0xaa>
    45b4:	000d      	movs	r5, r1
    45b6:	0003      	movs	r3, r0
    45b8:	e739      	b.n	442e <__aeabi_fadd+0x13a>
    45ba:	2800      	cmp	r0, #0
    45bc:	d100      	bne.n	45c0 <__aeabi_fadd+0x2cc>
    45be:	e75b      	b.n	4478 <__aeabi_fadd+0x184>
    45c0:	2280      	movs	r2, #128	; 0x80
    45c2:	03d2      	lsls	r2, r2, #15
    45c4:	4297      	cmp	r7, r2
    45c6:	d3ea      	bcc.n	459e <__aeabi_fadd+0x2aa>
    45c8:	4594      	cmp	ip, r2
    45ca:	d2e8      	bcs.n	459e <__aeabi_fadd+0x2aa>
    45cc:	000c      	movs	r4, r1
    45ce:	0003      	movs	r3, r0
    45d0:	e7e5      	b.n	459e <__aeabi_fadd+0x2aa>
    45d2:	0003      	movs	r3, r0
    45d4:	e771      	b.n	44ba <__aeabi_fadd+0x1c6>
    45d6:	181b      	adds	r3, r3, r0
    45d8:	015a      	lsls	r2, r3, #5
    45da:	d5ab      	bpl.n	4534 <__aeabi_fadd+0x240>
    45dc:	4a04      	ldr	r2, [pc, #16]	; (45f0 <__aeabi_fadd+0x2fc>)
    45de:	3501      	adds	r5, #1
    45e0:	4013      	ands	r3, r2
    45e2:	08db      	lsrs	r3, r3, #3
    45e4:	e76b      	b.n	44be <__aeabi_fadd+0x1ca>
    45e6:	1e13      	subs	r3, r2, #0
    45e8:	d086      	beq.n	44f8 <__aeabi_fadd+0x204>
    45ea:	08db      	lsrs	r3, r3, #3
    45ec:	e767      	b.n	44be <__aeabi_fadd+0x1ca>
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	fbffffff 	.word	0xfbffffff
    45f4:	7dffffff 	.word	0x7dffffff

000045f8 <__aeabi_fdiv>:
    45f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45fa:	464f      	mov	r7, r9
    45fc:	4646      	mov	r6, r8
    45fe:	46d6      	mov	lr, sl
    4600:	0244      	lsls	r4, r0, #9
    4602:	b5c0      	push	{r6, r7, lr}
    4604:	0047      	lsls	r7, r0, #1
    4606:	1c0e      	adds	r6, r1, #0
    4608:	0a64      	lsrs	r4, r4, #9
    460a:	0e3f      	lsrs	r7, r7, #24
    460c:	0fc5      	lsrs	r5, r0, #31
    460e:	2f00      	cmp	r7, #0
    4610:	d03c      	beq.n	468c <__aeabi_fdiv+0x94>
    4612:	2fff      	cmp	r7, #255	; 0xff
    4614:	d042      	beq.n	469c <__aeabi_fdiv+0xa4>
    4616:	2300      	movs	r3, #0
    4618:	2280      	movs	r2, #128	; 0x80
    461a:	4699      	mov	r9, r3
    461c:	469a      	mov	sl, r3
    461e:	00e4      	lsls	r4, r4, #3
    4620:	04d2      	lsls	r2, r2, #19
    4622:	4314      	orrs	r4, r2
    4624:	3f7f      	subs	r7, #127	; 0x7f
    4626:	0273      	lsls	r3, r6, #9
    4628:	0a5b      	lsrs	r3, r3, #9
    462a:	4698      	mov	r8, r3
    462c:	0073      	lsls	r3, r6, #1
    462e:	0e1b      	lsrs	r3, r3, #24
    4630:	0ff6      	lsrs	r6, r6, #31
    4632:	2b00      	cmp	r3, #0
    4634:	d01b      	beq.n	466e <__aeabi_fdiv+0x76>
    4636:	2bff      	cmp	r3, #255	; 0xff
    4638:	d013      	beq.n	4662 <__aeabi_fdiv+0x6a>
    463a:	4642      	mov	r2, r8
    463c:	2180      	movs	r1, #128	; 0x80
    463e:	00d2      	lsls	r2, r2, #3
    4640:	04c9      	lsls	r1, r1, #19
    4642:	4311      	orrs	r1, r2
    4644:	4688      	mov	r8, r1
    4646:	2000      	movs	r0, #0
    4648:	3b7f      	subs	r3, #127	; 0x7f
    464a:	0029      	movs	r1, r5
    464c:	1aff      	subs	r7, r7, r3
    464e:	464b      	mov	r3, r9
    4650:	4071      	eors	r1, r6
    4652:	b2c9      	uxtb	r1, r1
    4654:	2b0f      	cmp	r3, #15
    4656:	d900      	bls.n	465a <__aeabi_fdiv+0x62>
    4658:	e0b5      	b.n	47c6 <__aeabi_fdiv+0x1ce>
    465a:	4a74      	ldr	r2, [pc, #464]	; (482c <__aeabi_fdiv+0x234>)
    465c:	009b      	lsls	r3, r3, #2
    465e:	58d3      	ldr	r3, [r2, r3]
    4660:	469f      	mov	pc, r3
    4662:	4643      	mov	r3, r8
    4664:	2b00      	cmp	r3, #0
    4666:	d13f      	bne.n	46e8 <__aeabi_fdiv+0xf0>
    4668:	3fff      	subs	r7, #255	; 0xff
    466a:	3302      	adds	r3, #2
    466c:	e003      	b.n	4676 <__aeabi_fdiv+0x7e>
    466e:	4643      	mov	r3, r8
    4670:	2b00      	cmp	r3, #0
    4672:	d12d      	bne.n	46d0 <__aeabi_fdiv+0xd8>
    4674:	2301      	movs	r3, #1
    4676:	0029      	movs	r1, r5
    4678:	464a      	mov	r2, r9
    467a:	4071      	eors	r1, r6
    467c:	b2c9      	uxtb	r1, r1
    467e:	431a      	orrs	r2, r3
    4680:	2a0e      	cmp	r2, #14
    4682:	d838      	bhi.n	46f6 <__aeabi_fdiv+0xfe>
    4684:	486a      	ldr	r0, [pc, #424]	; (4830 <__aeabi_fdiv+0x238>)
    4686:	0092      	lsls	r2, r2, #2
    4688:	5882      	ldr	r2, [r0, r2]
    468a:	4697      	mov	pc, r2
    468c:	2c00      	cmp	r4, #0
    468e:	d113      	bne.n	46b8 <__aeabi_fdiv+0xc0>
    4690:	2304      	movs	r3, #4
    4692:	4699      	mov	r9, r3
    4694:	3b03      	subs	r3, #3
    4696:	2700      	movs	r7, #0
    4698:	469a      	mov	sl, r3
    469a:	e7c4      	b.n	4626 <__aeabi_fdiv+0x2e>
    469c:	2c00      	cmp	r4, #0
    469e:	d105      	bne.n	46ac <__aeabi_fdiv+0xb4>
    46a0:	2308      	movs	r3, #8
    46a2:	4699      	mov	r9, r3
    46a4:	3b06      	subs	r3, #6
    46a6:	27ff      	movs	r7, #255	; 0xff
    46a8:	469a      	mov	sl, r3
    46aa:	e7bc      	b.n	4626 <__aeabi_fdiv+0x2e>
    46ac:	230c      	movs	r3, #12
    46ae:	4699      	mov	r9, r3
    46b0:	3b09      	subs	r3, #9
    46b2:	27ff      	movs	r7, #255	; 0xff
    46b4:	469a      	mov	sl, r3
    46b6:	e7b6      	b.n	4626 <__aeabi_fdiv+0x2e>
    46b8:	0020      	movs	r0, r4
    46ba:	f000 fd01 	bl	50c0 <__clzsi2>
    46be:	2776      	movs	r7, #118	; 0x76
    46c0:	1f43      	subs	r3, r0, #5
    46c2:	409c      	lsls	r4, r3
    46c4:	2300      	movs	r3, #0
    46c6:	427f      	negs	r7, r7
    46c8:	4699      	mov	r9, r3
    46ca:	469a      	mov	sl, r3
    46cc:	1a3f      	subs	r7, r7, r0
    46ce:	e7aa      	b.n	4626 <__aeabi_fdiv+0x2e>
    46d0:	4640      	mov	r0, r8
    46d2:	f000 fcf5 	bl	50c0 <__clzsi2>
    46d6:	4642      	mov	r2, r8
    46d8:	1f43      	subs	r3, r0, #5
    46da:	409a      	lsls	r2, r3
    46dc:	2376      	movs	r3, #118	; 0x76
    46de:	425b      	negs	r3, r3
    46e0:	1a1b      	subs	r3, r3, r0
    46e2:	4690      	mov	r8, r2
    46e4:	2000      	movs	r0, #0
    46e6:	e7b0      	b.n	464a <__aeabi_fdiv+0x52>
    46e8:	2303      	movs	r3, #3
    46ea:	464a      	mov	r2, r9
    46ec:	431a      	orrs	r2, r3
    46ee:	4691      	mov	r9, r2
    46f0:	2003      	movs	r0, #3
    46f2:	33fc      	adds	r3, #252	; 0xfc
    46f4:	e7a9      	b.n	464a <__aeabi_fdiv+0x52>
    46f6:	000d      	movs	r5, r1
    46f8:	20ff      	movs	r0, #255	; 0xff
    46fa:	2200      	movs	r2, #0
    46fc:	05c0      	lsls	r0, r0, #23
    46fe:	07ed      	lsls	r5, r5, #31
    4700:	4310      	orrs	r0, r2
    4702:	4328      	orrs	r0, r5
    4704:	bce0      	pop	{r5, r6, r7}
    4706:	46ba      	mov	sl, r7
    4708:	46b1      	mov	r9, r6
    470a:	46a8      	mov	r8, r5
    470c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    470e:	000d      	movs	r5, r1
    4710:	2000      	movs	r0, #0
    4712:	2200      	movs	r2, #0
    4714:	e7f2      	b.n	46fc <__aeabi_fdiv+0x104>
    4716:	4653      	mov	r3, sl
    4718:	2b02      	cmp	r3, #2
    471a:	d0ed      	beq.n	46f8 <__aeabi_fdiv+0x100>
    471c:	2b03      	cmp	r3, #3
    471e:	d033      	beq.n	4788 <__aeabi_fdiv+0x190>
    4720:	46a0      	mov	r8, r4
    4722:	2b01      	cmp	r3, #1
    4724:	d105      	bne.n	4732 <__aeabi_fdiv+0x13a>
    4726:	2000      	movs	r0, #0
    4728:	2200      	movs	r2, #0
    472a:	e7e7      	b.n	46fc <__aeabi_fdiv+0x104>
    472c:	0035      	movs	r5, r6
    472e:	2803      	cmp	r0, #3
    4730:	d07a      	beq.n	4828 <__aeabi_fdiv+0x230>
    4732:	003b      	movs	r3, r7
    4734:	337f      	adds	r3, #127	; 0x7f
    4736:	2b00      	cmp	r3, #0
    4738:	dd2d      	ble.n	4796 <__aeabi_fdiv+0x19e>
    473a:	4642      	mov	r2, r8
    473c:	0752      	lsls	r2, r2, #29
    473e:	d007      	beq.n	4750 <__aeabi_fdiv+0x158>
    4740:	220f      	movs	r2, #15
    4742:	4641      	mov	r1, r8
    4744:	400a      	ands	r2, r1
    4746:	2a04      	cmp	r2, #4
    4748:	d002      	beq.n	4750 <__aeabi_fdiv+0x158>
    474a:	2204      	movs	r2, #4
    474c:	4694      	mov	ip, r2
    474e:	44e0      	add	r8, ip
    4750:	4642      	mov	r2, r8
    4752:	0112      	lsls	r2, r2, #4
    4754:	d505      	bpl.n	4762 <__aeabi_fdiv+0x16a>
    4756:	4642      	mov	r2, r8
    4758:	4b36      	ldr	r3, [pc, #216]	; (4834 <__aeabi_fdiv+0x23c>)
    475a:	401a      	ands	r2, r3
    475c:	003b      	movs	r3, r7
    475e:	4690      	mov	r8, r2
    4760:	3380      	adds	r3, #128	; 0x80
    4762:	2bfe      	cmp	r3, #254	; 0xfe
    4764:	dcc8      	bgt.n	46f8 <__aeabi_fdiv+0x100>
    4766:	4642      	mov	r2, r8
    4768:	0192      	lsls	r2, r2, #6
    476a:	0a52      	lsrs	r2, r2, #9
    476c:	b2d8      	uxtb	r0, r3
    476e:	e7c5      	b.n	46fc <__aeabi_fdiv+0x104>
    4770:	2280      	movs	r2, #128	; 0x80
    4772:	2500      	movs	r5, #0
    4774:	20ff      	movs	r0, #255	; 0xff
    4776:	03d2      	lsls	r2, r2, #15
    4778:	e7c0      	b.n	46fc <__aeabi_fdiv+0x104>
    477a:	2280      	movs	r2, #128	; 0x80
    477c:	03d2      	lsls	r2, r2, #15
    477e:	4214      	tst	r4, r2
    4780:	d002      	beq.n	4788 <__aeabi_fdiv+0x190>
    4782:	4643      	mov	r3, r8
    4784:	4213      	tst	r3, r2
    4786:	d049      	beq.n	481c <__aeabi_fdiv+0x224>
    4788:	2280      	movs	r2, #128	; 0x80
    478a:	03d2      	lsls	r2, r2, #15
    478c:	4322      	orrs	r2, r4
    478e:	0252      	lsls	r2, r2, #9
    4790:	20ff      	movs	r0, #255	; 0xff
    4792:	0a52      	lsrs	r2, r2, #9
    4794:	e7b2      	b.n	46fc <__aeabi_fdiv+0x104>
    4796:	2201      	movs	r2, #1
    4798:	1ad3      	subs	r3, r2, r3
    479a:	2b1b      	cmp	r3, #27
    479c:	dcc3      	bgt.n	4726 <__aeabi_fdiv+0x12e>
    479e:	4642      	mov	r2, r8
    47a0:	40da      	lsrs	r2, r3
    47a2:	4643      	mov	r3, r8
    47a4:	379e      	adds	r7, #158	; 0x9e
    47a6:	40bb      	lsls	r3, r7
    47a8:	1e59      	subs	r1, r3, #1
    47aa:	418b      	sbcs	r3, r1
    47ac:	431a      	orrs	r2, r3
    47ae:	0753      	lsls	r3, r2, #29
    47b0:	d004      	beq.n	47bc <__aeabi_fdiv+0x1c4>
    47b2:	230f      	movs	r3, #15
    47b4:	4013      	ands	r3, r2
    47b6:	2b04      	cmp	r3, #4
    47b8:	d000      	beq.n	47bc <__aeabi_fdiv+0x1c4>
    47ba:	3204      	adds	r2, #4
    47bc:	0153      	lsls	r3, r2, #5
    47be:	d529      	bpl.n	4814 <__aeabi_fdiv+0x21c>
    47c0:	2001      	movs	r0, #1
    47c2:	2200      	movs	r2, #0
    47c4:	e79a      	b.n	46fc <__aeabi_fdiv+0x104>
    47c6:	4642      	mov	r2, r8
    47c8:	0163      	lsls	r3, r4, #5
    47ca:	0155      	lsls	r5, r2, #5
    47cc:	42ab      	cmp	r3, r5
    47ce:	d215      	bcs.n	47fc <__aeabi_fdiv+0x204>
    47d0:	201b      	movs	r0, #27
    47d2:	2200      	movs	r2, #0
    47d4:	3f01      	subs	r7, #1
    47d6:	2601      	movs	r6, #1
    47d8:	001c      	movs	r4, r3
    47da:	0052      	lsls	r2, r2, #1
    47dc:	005b      	lsls	r3, r3, #1
    47de:	2c00      	cmp	r4, #0
    47e0:	db01      	blt.n	47e6 <__aeabi_fdiv+0x1ee>
    47e2:	429d      	cmp	r5, r3
    47e4:	d801      	bhi.n	47ea <__aeabi_fdiv+0x1f2>
    47e6:	1b5b      	subs	r3, r3, r5
    47e8:	4332      	orrs	r2, r6
    47ea:	3801      	subs	r0, #1
    47ec:	2800      	cmp	r0, #0
    47ee:	d1f3      	bne.n	47d8 <__aeabi_fdiv+0x1e0>
    47f0:	1e58      	subs	r0, r3, #1
    47f2:	4183      	sbcs	r3, r0
    47f4:	4313      	orrs	r3, r2
    47f6:	4698      	mov	r8, r3
    47f8:	000d      	movs	r5, r1
    47fa:	e79a      	b.n	4732 <__aeabi_fdiv+0x13a>
    47fc:	201a      	movs	r0, #26
    47fe:	2201      	movs	r2, #1
    4800:	1b5b      	subs	r3, r3, r5
    4802:	e7e8      	b.n	47d6 <__aeabi_fdiv+0x1de>
    4804:	3b02      	subs	r3, #2
    4806:	425a      	negs	r2, r3
    4808:	4153      	adcs	r3, r2
    480a:	425b      	negs	r3, r3
    480c:	0035      	movs	r5, r6
    480e:	2200      	movs	r2, #0
    4810:	b2d8      	uxtb	r0, r3
    4812:	e773      	b.n	46fc <__aeabi_fdiv+0x104>
    4814:	0192      	lsls	r2, r2, #6
    4816:	2000      	movs	r0, #0
    4818:	0a52      	lsrs	r2, r2, #9
    481a:	e76f      	b.n	46fc <__aeabi_fdiv+0x104>
    481c:	431a      	orrs	r2, r3
    481e:	0252      	lsls	r2, r2, #9
    4820:	0035      	movs	r5, r6
    4822:	20ff      	movs	r0, #255	; 0xff
    4824:	0a52      	lsrs	r2, r2, #9
    4826:	e769      	b.n	46fc <__aeabi_fdiv+0x104>
    4828:	4644      	mov	r4, r8
    482a:	e7ad      	b.n	4788 <__aeabi_fdiv+0x190>
    482c:	0000575c 	.word	0x0000575c
    4830:	0000579c 	.word	0x0000579c
    4834:	f7ffffff 	.word	0xf7ffffff

00004838 <__eqsf2>:
    4838:	b570      	push	{r4, r5, r6, lr}
    483a:	0042      	lsls	r2, r0, #1
    483c:	024e      	lsls	r6, r1, #9
    483e:	004c      	lsls	r4, r1, #1
    4840:	0245      	lsls	r5, r0, #9
    4842:	0a6d      	lsrs	r5, r5, #9
    4844:	0e12      	lsrs	r2, r2, #24
    4846:	0fc3      	lsrs	r3, r0, #31
    4848:	0a76      	lsrs	r6, r6, #9
    484a:	0e24      	lsrs	r4, r4, #24
    484c:	0fc9      	lsrs	r1, r1, #31
    484e:	2aff      	cmp	r2, #255	; 0xff
    4850:	d010      	beq.n	4874 <__eqsf2+0x3c>
    4852:	2cff      	cmp	r4, #255	; 0xff
    4854:	d00c      	beq.n	4870 <__eqsf2+0x38>
    4856:	2001      	movs	r0, #1
    4858:	42a2      	cmp	r2, r4
    485a:	d10a      	bne.n	4872 <__eqsf2+0x3a>
    485c:	42b5      	cmp	r5, r6
    485e:	d108      	bne.n	4872 <__eqsf2+0x3a>
    4860:	428b      	cmp	r3, r1
    4862:	d00f      	beq.n	4884 <__eqsf2+0x4c>
    4864:	2a00      	cmp	r2, #0
    4866:	d104      	bne.n	4872 <__eqsf2+0x3a>
    4868:	0028      	movs	r0, r5
    486a:	1e43      	subs	r3, r0, #1
    486c:	4198      	sbcs	r0, r3
    486e:	e000      	b.n	4872 <__eqsf2+0x3a>
    4870:	2001      	movs	r0, #1
    4872:	bd70      	pop	{r4, r5, r6, pc}
    4874:	2001      	movs	r0, #1
    4876:	2cff      	cmp	r4, #255	; 0xff
    4878:	d1fb      	bne.n	4872 <__eqsf2+0x3a>
    487a:	4335      	orrs	r5, r6
    487c:	d1f9      	bne.n	4872 <__eqsf2+0x3a>
    487e:	404b      	eors	r3, r1
    4880:	0018      	movs	r0, r3
    4882:	e7f6      	b.n	4872 <__eqsf2+0x3a>
    4884:	2000      	movs	r0, #0
    4886:	e7f4      	b.n	4872 <__eqsf2+0x3a>

00004888 <__gesf2>:
    4888:	b530      	push	{r4, r5, lr}
    488a:	0042      	lsls	r2, r0, #1
    488c:	0244      	lsls	r4, r0, #9
    488e:	024d      	lsls	r5, r1, #9
    4890:	0fc3      	lsrs	r3, r0, #31
    4892:	0048      	lsls	r0, r1, #1
    4894:	0a64      	lsrs	r4, r4, #9
    4896:	0e12      	lsrs	r2, r2, #24
    4898:	0a6d      	lsrs	r5, r5, #9
    489a:	0e00      	lsrs	r0, r0, #24
    489c:	0fc9      	lsrs	r1, r1, #31
    489e:	2aff      	cmp	r2, #255	; 0xff
    48a0:	d019      	beq.n	48d6 <__gesf2+0x4e>
    48a2:	28ff      	cmp	r0, #255	; 0xff
    48a4:	d00b      	beq.n	48be <__gesf2+0x36>
    48a6:	2a00      	cmp	r2, #0
    48a8:	d11e      	bne.n	48e8 <__gesf2+0x60>
    48aa:	2800      	cmp	r0, #0
    48ac:	d10b      	bne.n	48c6 <__gesf2+0x3e>
    48ae:	2d00      	cmp	r5, #0
    48b0:	d027      	beq.n	4902 <__gesf2+0x7a>
    48b2:	2c00      	cmp	r4, #0
    48b4:	d134      	bne.n	4920 <__gesf2+0x98>
    48b6:	2900      	cmp	r1, #0
    48b8:	d02f      	beq.n	491a <__gesf2+0x92>
    48ba:	0008      	movs	r0, r1
    48bc:	bd30      	pop	{r4, r5, pc}
    48be:	2d00      	cmp	r5, #0
    48c0:	d128      	bne.n	4914 <__gesf2+0x8c>
    48c2:	2a00      	cmp	r2, #0
    48c4:	d101      	bne.n	48ca <__gesf2+0x42>
    48c6:	2c00      	cmp	r4, #0
    48c8:	d0f5      	beq.n	48b6 <__gesf2+0x2e>
    48ca:	428b      	cmp	r3, r1
    48cc:	d107      	bne.n	48de <__gesf2+0x56>
    48ce:	2b00      	cmp	r3, #0
    48d0:	d023      	beq.n	491a <__gesf2+0x92>
    48d2:	0018      	movs	r0, r3
    48d4:	e7f2      	b.n	48bc <__gesf2+0x34>
    48d6:	2c00      	cmp	r4, #0
    48d8:	d11c      	bne.n	4914 <__gesf2+0x8c>
    48da:	28ff      	cmp	r0, #255	; 0xff
    48dc:	d014      	beq.n	4908 <__gesf2+0x80>
    48de:	1e58      	subs	r0, r3, #1
    48e0:	2302      	movs	r3, #2
    48e2:	4018      	ands	r0, r3
    48e4:	3801      	subs	r0, #1
    48e6:	e7e9      	b.n	48bc <__gesf2+0x34>
    48e8:	2800      	cmp	r0, #0
    48ea:	d0f8      	beq.n	48de <__gesf2+0x56>
    48ec:	428b      	cmp	r3, r1
    48ee:	d1f6      	bne.n	48de <__gesf2+0x56>
    48f0:	4282      	cmp	r2, r0
    48f2:	dcf4      	bgt.n	48de <__gesf2+0x56>
    48f4:	dbeb      	blt.n	48ce <__gesf2+0x46>
    48f6:	42ac      	cmp	r4, r5
    48f8:	d8f1      	bhi.n	48de <__gesf2+0x56>
    48fa:	2000      	movs	r0, #0
    48fc:	42ac      	cmp	r4, r5
    48fe:	d2dd      	bcs.n	48bc <__gesf2+0x34>
    4900:	e7e5      	b.n	48ce <__gesf2+0x46>
    4902:	2c00      	cmp	r4, #0
    4904:	d0da      	beq.n	48bc <__gesf2+0x34>
    4906:	e7ea      	b.n	48de <__gesf2+0x56>
    4908:	2d00      	cmp	r5, #0
    490a:	d103      	bne.n	4914 <__gesf2+0x8c>
    490c:	428b      	cmp	r3, r1
    490e:	d1e6      	bne.n	48de <__gesf2+0x56>
    4910:	2000      	movs	r0, #0
    4912:	e7d3      	b.n	48bc <__gesf2+0x34>
    4914:	2002      	movs	r0, #2
    4916:	4240      	negs	r0, r0
    4918:	e7d0      	b.n	48bc <__gesf2+0x34>
    491a:	2001      	movs	r0, #1
    491c:	4240      	negs	r0, r0
    491e:	e7cd      	b.n	48bc <__gesf2+0x34>
    4920:	428b      	cmp	r3, r1
    4922:	d0e8      	beq.n	48f6 <__gesf2+0x6e>
    4924:	e7db      	b.n	48de <__gesf2+0x56>
    4926:	46c0      	nop			; (mov r8, r8)

00004928 <__lesf2>:
    4928:	b530      	push	{r4, r5, lr}
    492a:	0042      	lsls	r2, r0, #1
    492c:	0244      	lsls	r4, r0, #9
    492e:	024d      	lsls	r5, r1, #9
    4930:	0fc3      	lsrs	r3, r0, #31
    4932:	0048      	lsls	r0, r1, #1
    4934:	0a64      	lsrs	r4, r4, #9
    4936:	0e12      	lsrs	r2, r2, #24
    4938:	0a6d      	lsrs	r5, r5, #9
    493a:	0e00      	lsrs	r0, r0, #24
    493c:	0fc9      	lsrs	r1, r1, #31
    493e:	2aff      	cmp	r2, #255	; 0xff
    4940:	d01a      	beq.n	4978 <__lesf2+0x50>
    4942:	28ff      	cmp	r0, #255	; 0xff
    4944:	d00e      	beq.n	4964 <__lesf2+0x3c>
    4946:	2a00      	cmp	r2, #0
    4948:	d11e      	bne.n	4988 <__lesf2+0x60>
    494a:	2800      	cmp	r0, #0
    494c:	d10e      	bne.n	496c <__lesf2+0x44>
    494e:	2d00      	cmp	r5, #0
    4950:	d02a      	beq.n	49a8 <__lesf2+0x80>
    4952:	2c00      	cmp	r4, #0
    4954:	d00c      	beq.n	4970 <__lesf2+0x48>
    4956:	428b      	cmp	r3, r1
    4958:	d01d      	beq.n	4996 <__lesf2+0x6e>
    495a:	1e58      	subs	r0, r3, #1
    495c:	2302      	movs	r3, #2
    495e:	4018      	ands	r0, r3
    4960:	3801      	subs	r0, #1
    4962:	e010      	b.n	4986 <__lesf2+0x5e>
    4964:	2d00      	cmp	r5, #0
    4966:	d10d      	bne.n	4984 <__lesf2+0x5c>
    4968:	2a00      	cmp	r2, #0
    496a:	d120      	bne.n	49ae <__lesf2+0x86>
    496c:	2c00      	cmp	r4, #0
    496e:	d11e      	bne.n	49ae <__lesf2+0x86>
    4970:	2900      	cmp	r1, #0
    4972:	d023      	beq.n	49bc <__lesf2+0x94>
    4974:	0008      	movs	r0, r1
    4976:	e006      	b.n	4986 <__lesf2+0x5e>
    4978:	2c00      	cmp	r4, #0
    497a:	d103      	bne.n	4984 <__lesf2+0x5c>
    497c:	28ff      	cmp	r0, #255	; 0xff
    497e:	d1ec      	bne.n	495a <__lesf2+0x32>
    4980:	2d00      	cmp	r5, #0
    4982:	d017      	beq.n	49b4 <__lesf2+0x8c>
    4984:	2002      	movs	r0, #2
    4986:	bd30      	pop	{r4, r5, pc}
    4988:	2800      	cmp	r0, #0
    498a:	d0e6      	beq.n	495a <__lesf2+0x32>
    498c:	428b      	cmp	r3, r1
    498e:	d1e4      	bne.n	495a <__lesf2+0x32>
    4990:	4282      	cmp	r2, r0
    4992:	dce2      	bgt.n	495a <__lesf2+0x32>
    4994:	db04      	blt.n	49a0 <__lesf2+0x78>
    4996:	42ac      	cmp	r4, r5
    4998:	d8df      	bhi.n	495a <__lesf2+0x32>
    499a:	2000      	movs	r0, #0
    499c:	42ac      	cmp	r4, r5
    499e:	d2f2      	bcs.n	4986 <__lesf2+0x5e>
    49a0:	2b00      	cmp	r3, #0
    49a2:	d00b      	beq.n	49bc <__lesf2+0x94>
    49a4:	0018      	movs	r0, r3
    49a6:	e7ee      	b.n	4986 <__lesf2+0x5e>
    49a8:	2c00      	cmp	r4, #0
    49aa:	d0ec      	beq.n	4986 <__lesf2+0x5e>
    49ac:	e7d5      	b.n	495a <__lesf2+0x32>
    49ae:	428b      	cmp	r3, r1
    49b0:	d1d3      	bne.n	495a <__lesf2+0x32>
    49b2:	e7f5      	b.n	49a0 <__lesf2+0x78>
    49b4:	2000      	movs	r0, #0
    49b6:	428b      	cmp	r3, r1
    49b8:	d0e5      	beq.n	4986 <__lesf2+0x5e>
    49ba:	e7ce      	b.n	495a <__lesf2+0x32>
    49bc:	2001      	movs	r0, #1
    49be:	4240      	negs	r0, r0
    49c0:	e7e1      	b.n	4986 <__lesf2+0x5e>
    49c2:	46c0      	nop			; (mov r8, r8)

000049c4 <__aeabi_fmul>:
    49c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49c6:	464f      	mov	r7, r9
    49c8:	4646      	mov	r6, r8
    49ca:	46d6      	mov	lr, sl
    49cc:	0243      	lsls	r3, r0, #9
    49ce:	0a5b      	lsrs	r3, r3, #9
    49d0:	4699      	mov	r9, r3
    49d2:	0043      	lsls	r3, r0, #1
    49d4:	b5c0      	push	{r6, r7, lr}
    49d6:	0e1b      	lsrs	r3, r3, #24
    49d8:	1c0e      	adds	r6, r1, #0
    49da:	0fc5      	lsrs	r5, r0, #31
    49dc:	2b00      	cmp	r3, #0
    49de:	d100      	bne.n	49e2 <__aeabi_fmul+0x1e>
    49e0:	e085      	b.n	4aee <__aeabi_fmul+0x12a>
    49e2:	2bff      	cmp	r3, #255	; 0xff
    49e4:	d100      	bne.n	49e8 <__aeabi_fmul+0x24>
    49e6:	e08b      	b.n	4b00 <__aeabi_fmul+0x13c>
    49e8:	464a      	mov	r2, r9
    49ea:	2180      	movs	r1, #128	; 0x80
    49ec:	00d2      	lsls	r2, r2, #3
    49ee:	04c9      	lsls	r1, r1, #19
    49f0:	4311      	orrs	r1, r2
    49f2:	227f      	movs	r2, #127	; 0x7f
    49f4:	4252      	negs	r2, r2
    49f6:	4690      	mov	r8, r2
    49f8:	4498      	add	r8, r3
    49fa:	2300      	movs	r3, #0
    49fc:	4689      	mov	r9, r1
    49fe:	2700      	movs	r7, #0
    4a00:	469a      	mov	sl, r3
    4a02:	0274      	lsls	r4, r6, #9
    4a04:	0073      	lsls	r3, r6, #1
    4a06:	0a64      	lsrs	r4, r4, #9
    4a08:	0e1b      	lsrs	r3, r3, #24
    4a0a:	0ff6      	lsrs	r6, r6, #31
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d064      	beq.n	4ada <__aeabi_fmul+0x116>
    4a10:	2bff      	cmp	r3, #255	; 0xff
    4a12:	d01f      	beq.n	4a54 <__aeabi_fmul+0x90>
    4a14:	2280      	movs	r2, #128	; 0x80
    4a16:	3b7f      	subs	r3, #127	; 0x7f
    4a18:	00e4      	lsls	r4, r4, #3
    4a1a:	04d2      	lsls	r2, r2, #19
    4a1c:	4443      	add	r3, r8
    4a1e:	2000      	movs	r0, #0
    4a20:	4314      	orrs	r4, r2
    4a22:	1c59      	adds	r1, r3, #1
    4a24:	2f0a      	cmp	r7, #10
    4a26:	dc2b      	bgt.n	4a80 <__aeabi_fmul+0xbc>
    4a28:	4075      	eors	r5, r6
    4a2a:	2f02      	cmp	r7, #2
    4a2c:	dc22      	bgt.n	4a74 <__aeabi_fmul+0xb0>
    4a2e:	3f01      	subs	r7, #1
    4a30:	2f01      	cmp	r7, #1
    4a32:	d900      	bls.n	4a36 <__aeabi_fmul+0x72>
    4a34:	e0bb      	b.n	4bae <__aeabi_fmul+0x1ea>
    4a36:	2802      	cmp	r0, #2
    4a38:	d06b      	beq.n	4b12 <__aeabi_fmul+0x14e>
    4a3a:	2801      	cmp	r0, #1
    4a3c:	d12a      	bne.n	4a94 <__aeabi_fmul+0xd0>
    4a3e:	2000      	movs	r0, #0
    4a40:	2200      	movs	r2, #0
    4a42:	05c0      	lsls	r0, r0, #23
    4a44:	07ed      	lsls	r5, r5, #31
    4a46:	4310      	orrs	r0, r2
    4a48:	4328      	orrs	r0, r5
    4a4a:	bce0      	pop	{r5, r6, r7}
    4a4c:	46ba      	mov	sl, r7
    4a4e:	46b1      	mov	r9, r6
    4a50:	46a8      	mov	r8, r5
    4a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a54:	2c00      	cmp	r4, #0
    4a56:	d064      	beq.n	4b22 <__aeabi_fmul+0x15e>
    4a58:	2203      	movs	r2, #3
    4a5a:	4641      	mov	r1, r8
    4a5c:	4643      	mov	r3, r8
    4a5e:	4317      	orrs	r7, r2
    4a60:	002a      	movs	r2, r5
    4a62:	3101      	adds	r1, #1
    4a64:	33ff      	adds	r3, #255	; 0xff
    4a66:	4072      	eors	r2, r6
    4a68:	31ff      	adds	r1, #255	; 0xff
    4a6a:	2f0a      	cmp	r7, #10
    4a6c:	dd00      	ble.n	4a70 <__aeabi_fmul+0xac>
    4a6e:	e0d7      	b.n	4c20 <__aeabi_fmul+0x25c>
    4a70:	0015      	movs	r5, r2
    4a72:	2003      	movs	r0, #3
    4a74:	2201      	movs	r2, #1
    4a76:	40ba      	lsls	r2, r7
    4a78:	27a6      	movs	r7, #166	; 0xa6
    4a7a:	00ff      	lsls	r7, r7, #3
    4a7c:	423a      	tst	r2, r7
    4a7e:	d020      	beq.n	4ac2 <__aeabi_fmul+0xfe>
    4a80:	4653      	mov	r3, sl
    4a82:	2b02      	cmp	r3, #2
    4a84:	d045      	beq.n	4b12 <__aeabi_fmul+0x14e>
    4a86:	2b03      	cmp	r3, #3
    4a88:	d100      	bne.n	4a8c <__aeabi_fmul+0xc8>
    4a8a:	e0bb      	b.n	4c04 <__aeabi_fmul+0x240>
    4a8c:	4650      	mov	r0, sl
    4a8e:	464c      	mov	r4, r9
    4a90:	2801      	cmp	r0, #1
    4a92:	d0d4      	beq.n	4a3e <__aeabi_fmul+0x7a>
    4a94:	000b      	movs	r3, r1
    4a96:	337f      	adds	r3, #127	; 0x7f
    4a98:	2b00      	cmp	r3, #0
    4a9a:	dd70      	ble.n	4b7e <__aeabi_fmul+0x1ba>
    4a9c:	0762      	lsls	r2, r4, #29
    4a9e:	d004      	beq.n	4aaa <__aeabi_fmul+0xe6>
    4aa0:	220f      	movs	r2, #15
    4aa2:	4022      	ands	r2, r4
    4aa4:	2a04      	cmp	r2, #4
    4aa6:	d000      	beq.n	4aaa <__aeabi_fmul+0xe6>
    4aa8:	3404      	adds	r4, #4
    4aaa:	0122      	lsls	r2, r4, #4
    4aac:	d503      	bpl.n	4ab6 <__aeabi_fmul+0xf2>
    4aae:	4b63      	ldr	r3, [pc, #396]	; (4c3c <__aeabi_fmul+0x278>)
    4ab0:	401c      	ands	r4, r3
    4ab2:	000b      	movs	r3, r1
    4ab4:	3380      	adds	r3, #128	; 0x80
    4ab6:	2bfe      	cmp	r3, #254	; 0xfe
    4ab8:	dc2b      	bgt.n	4b12 <__aeabi_fmul+0x14e>
    4aba:	01a2      	lsls	r2, r4, #6
    4abc:	0a52      	lsrs	r2, r2, #9
    4abe:	b2d8      	uxtb	r0, r3
    4ac0:	e7bf      	b.n	4a42 <__aeabi_fmul+0x7e>
    4ac2:	2790      	movs	r7, #144	; 0x90
    4ac4:	00bf      	lsls	r7, r7, #2
    4ac6:	423a      	tst	r2, r7
    4ac8:	d126      	bne.n	4b18 <__aeabi_fmul+0x154>
    4aca:	3fb9      	subs	r7, #185	; 0xb9
    4acc:	3fff      	subs	r7, #255	; 0xff
    4ace:	4217      	tst	r7, r2
    4ad0:	d06d      	beq.n	4bae <__aeabi_fmul+0x1ea>
    4ad2:	0035      	movs	r5, r6
    4ad4:	46a1      	mov	r9, r4
    4ad6:	4682      	mov	sl, r0
    4ad8:	e7d2      	b.n	4a80 <__aeabi_fmul+0xbc>
    4ada:	2c00      	cmp	r4, #0
    4adc:	d141      	bne.n	4b62 <__aeabi_fmul+0x19e>
    4ade:	2301      	movs	r3, #1
    4ae0:	431f      	orrs	r7, r3
    4ae2:	4643      	mov	r3, r8
    4ae4:	2001      	movs	r0, #1
    4ae6:	1c59      	adds	r1, r3, #1
    4ae8:	2f0a      	cmp	r7, #10
    4aea:	dd9d      	ble.n	4a28 <__aeabi_fmul+0x64>
    4aec:	e7c8      	b.n	4a80 <__aeabi_fmul+0xbc>
    4aee:	464b      	mov	r3, r9
    4af0:	2b00      	cmp	r3, #0
    4af2:	d127      	bne.n	4b44 <__aeabi_fmul+0x180>
    4af4:	2300      	movs	r3, #0
    4af6:	4698      	mov	r8, r3
    4af8:	3301      	adds	r3, #1
    4afa:	2704      	movs	r7, #4
    4afc:	469a      	mov	sl, r3
    4afe:	e780      	b.n	4a02 <__aeabi_fmul+0x3e>
    4b00:	464b      	mov	r3, r9
    4b02:	2b00      	cmp	r3, #0
    4b04:	d118      	bne.n	4b38 <__aeabi_fmul+0x174>
    4b06:	23ff      	movs	r3, #255	; 0xff
    4b08:	4698      	mov	r8, r3
    4b0a:	3bfd      	subs	r3, #253	; 0xfd
    4b0c:	2708      	movs	r7, #8
    4b0e:	469a      	mov	sl, r3
    4b10:	e777      	b.n	4a02 <__aeabi_fmul+0x3e>
    4b12:	20ff      	movs	r0, #255	; 0xff
    4b14:	2200      	movs	r2, #0
    4b16:	e794      	b.n	4a42 <__aeabi_fmul+0x7e>
    4b18:	2280      	movs	r2, #128	; 0x80
    4b1a:	2500      	movs	r5, #0
    4b1c:	20ff      	movs	r0, #255	; 0xff
    4b1e:	03d2      	lsls	r2, r2, #15
    4b20:	e78f      	b.n	4a42 <__aeabi_fmul+0x7e>
    4b22:	2302      	movs	r3, #2
    4b24:	431f      	orrs	r7, r3
    4b26:	4643      	mov	r3, r8
    4b28:	1c59      	adds	r1, r3, #1
    4b2a:	31ff      	adds	r1, #255	; 0xff
    4b2c:	2f0a      	cmp	r7, #10
    4b2e:	dca7      	bgt.n	4a80 <__aeabi_fmul+0xbc>
    4b30:	2002      	movs	r0, #2
    4b32:	33ff      	adds	r3, #255	; 0xff
    4b34:	4075      	eors	r5, r6
    4b36:	e778      	b.n	4a2a <__aeabi_fmul+0x66>
    4b38:	23ff      	movs	r3, #255	; 0xff
    4b3a:	4698      	mov	r8, r3
    4b3c:	3bfc      	subs	r3, #252	; 0xfc
    4b3e:	270c      	movs	r7, #12
    4b40:	469a      	mov	sl, r3
    4b42:	e75e      	b.n	4a02 <__aeabi_fmul+0x3e>
    4b44:	4648      	mov	r0, r9
    4b46:	f000 fabb 	bl	50c0 <__clzsi2>
    4b4a:	464a      	mov	r2, r9
    4b4c:	1f43      	subs	r3, r0, #5
    4b4e:	409a      	lsls	r2, r3
    4b50:	2376      	movs	r3, #118	; 0x76
    4b52:	425b      	negs	r3, r3
    4b54:	1a1b      	subs	r3, r3, r0
    4b56:	4698      	mov	r8, r3
    4b58:	2300      	movs	r3, #0
    4b5a:	4691      	mov	r9, r2
    4b5c:	2700      	movs	r7, #0
    4b5e:	469a      	mov	sl, r3
    4b60:	e74f      	b.n	4a02 <__aeabi_fmul+0x3e>
    4b62:	0020      	movs	r0, r4
    4b64:	f000 faac 	bl	50c0 <__clzsi2>
    4b68:	1f43      	subs	r3, r0, #5
    4b6a:	409c      	lsls	r4, r3
    4b6c:	4643      	mov	r3, r8
    4b6e:	1a1b      	subs	r3, r3, r0
    4b70:	3b76      	subs	r3, #118	; 0x76
    4b72:	2000      	movs	r0, #0
    4b74:	1c59      	adds	r1, r3, #1
    4b76:	2f0a      	cmp	r7, #10
    4b78:	dc00      	bgt.n	4b7c <__aeabi_fmul+0x1b8>
    4b7a:	e755      	b.n	4a28 <__aeabi_fmul+0x64>
    4b7c:	e780      	b.n	4a80 <__aeabi_fmul+0xbc>
    4b7e:	2201      	movs	r2, #1
    4b80:	1ad3      	subs	r3, r2, r3
    4b82:	2b1b      	cmp	r3, #27
    4b84:	dd00      	ble.n	4b88 <__aeabi_fmul+0x1c4>
    4b86:	e75a      	b.n	4a3e <__aeabi_fmul+0x7a>
    4b88:	319e      	adds	r1, #158	; 0x9e
    4b8a:	0022      	movs	r2, r4
    4b8c:	408c      	lsls	r4, r1
    4b8e:	40da      	lsrs	r2, r3
    4b90:	1e63      	subs	r3, r4, #1
    4b92:	419c      	sbcs	r4, r3
    4b94:	4322      	orrs	r2, r4
    4b96:	0753      	lsls	r3, r2, #29
    4b98:	d004      	beq.n	4ba4 <__aeabi_fmul+0x1e0>
    4b9a:	230f      	movs	r3, #15
    4b9c:	4013      	ands	r3, r2
    4b9e:	2b04      	cmp	r3, #4
    4ba0:	d000      	beq.n	4ba4 <__aeabi_fmul+0x1e0>
    4ba2:	3204      	adds	r2, #4
    4ba4:	0153      	lsls	r3, r2, #5
    4ba6:	d537      	bpl.n	4c18 <__aeabi_fmul+0x254>
    4ba8:	2001      	movs	r0, #1
    4baa:	2200      	movs	r2, #0
    4bac:	e749      	b.n	4a42 <__aeabi_fmul+0x7e>
    4bae:	0c20      	lsrs	r0, r4, #16
    4bb0:	464a      	mov	r2, r9
    4bb2:	0424      	lsls	r4, r4, #16
    4bb4:	0c24      	lsrs	r4, r4, #16
    4bb6:	0027      	movs	r7, r4
    4bb8:	0c16      	lsrs	r6, r2, #16
    4bba:	0412      	lsls	r2, r2, #16
    4bbc:	0c12      	lsrs	r2, r2, #16
    4bbe:	4374      	muls	r4, r6
    4bc0:	4357      	muls	r7, r2
    4bc2:	4346      	muls	r6, r0
    4bc4:	4350      	muls	r0, r2
    4bc6:	0c3a      	lsrs	r2, r7, #16
    4bc8:	1900      	adds	r0, r0, r4
    4bca:	1812      	adds	r2, r2, r0
    4bcc:	4294      	cmp	r4, r2
    4bce:	d903      	bls.n	4bd8 <__aeabi_fmul+0x214>
    4bd0:	2080      	movs	r0, #128	; 0x80
    4bd2:	0240      	lsls	r0, r0, #9
    4bd4:	4684      	mov	ip, r0
    4bd6:	4466      	add	r6, ip
    4bd8:	043f      	lsls	r7, r7, #16
    4bda:	0410      	lsls	r0, r2, #16
    4bdc:	0c3f      	lsrs	r7, r7, #16
    4bde:	19c0      	adds	r0, r0, r7
    4be0:	0184      	lsls	r4, r0, #6
    4be2:	1e67      	subs	r7, r4, #1
    4be4:	41bc      	sbcs	r4, r7
    4be6:	0c12      	lsrs	r2, r2, #16
    4be8:	0e80      	lsrs	r0, r0, #26
    4bea:	1992      	adds	r2, r2, r6
    4bec:	4304      	orrs	r4, r0
    4bee:	0192      	lsls	r2, r2, #6
    4bf0:	4314      	orrs	r4, r2
    4bf2:	0112      	lsls	r2, r2, #4
    4bf4:	d50e      	bpl.n	4c14 <__aeabi_fmul+0x250>
    4bf6:	2301      	movs	r3, #1
    4bf8:	0862      	lsrs	r2, r4, #1
    4bfa:	401c      	ands	r4, r3
    4bfc:	4314      	orrs	r4, r2
    4bfe:	e749      	b.n	4a94 <__aeabi_fmul+0xd0>
    4c00:	0035      	movs	r5, r6
    4c02:	46a1      	mov	r9, r4
    4c04:	2280      	movs	r2, #128	; 0x80
    4c06:	464b      	mov	r3, r9
    4c08:	03d2      	lsls	r2, r2, #15
    4c0a:	431a      	orrs	r2, r3
    4c0c:	0252      	lsls	r2, r2, #9
    4c0e:	20ff      	movs	r0, #255	; 0xff
    4c10:	0a52      	lsrs	r2, r2, #9
    4c12:	e716      	b.n	4a42 <__aeabi_fmul+0x7e>
    4c14:	0019      	movs	r1, r3
    4c16:	e73d      	b.n	4a94 <__aeabi_fmul+0xd0>
    4c18:	0192      	lsls	r2, r2, #6
    4c1a:	2000      	movs	r0, #0
    4c1c:	0a52      	lsrs	r2, r2, #9
    4c1e:	e710      	b.n	4a42 <__aeabi_fmul+0x7e>
    4c20:	2f0f      	cmp	r7, #15
    4c22:	d1ed      	bne.n	4c00 <__aeabi_fmul+0x23c>
    4c24:	2280      	movs	r2, #128	; 0x80
    4c26:	464b      	mov	r3, r9
    4c28:	03d2      	lsls	r2, r2, #15
    4c2a:	4213      	tst	r3, r2
    4c2c:	d0ea      	beq.n	4c04 <__aeabi_fmul+0x240>
    4c2e:	4214      	tst	r4, r2
    4c30:	d1e8      	bne.n	4c04 <__aeabi_fmul+0x240>
    4c32:	0035      	movs	r5, r6
    4c34:	20ff      	movs	r0, #255	; 0xff
    4c36:	4322      	orrs	r2, r4
    4c38:	e703      	b.n	4a42 <__aeabi_fmul+0x7e>
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	f7ffffff 	.word	0xf7ffffff

00004c40 <__aeabi_fsub>:
    4c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c42:	0243      	lsls	r3, r0, #9
    4c44:	0045      	lsls	r5, r0, #1
    4c46:	0fc4      	lsrs	r4, r0, #31
    4c48:	0248      	lsls	r0, r1, #9
    4c4a:	0a42      	lsrs	r2, r0, #9
    4c4c:	4694      	mov	ip, r2
    4c4e:	004a      	lsls	r2, r1, #1
    4c50:	0a5e      	lsrs	r6, r3, #9
    4c52:	0e2d      	lsrs	r5, r5, #24
    4c54:	099b      	lsrs	r3, r3, #6
    4c56:	0e12      	lsrs	r2, r2, #24
    4c58:	0fc9      	lsrs	r1, r1, #31
    4c5a:	0980      	lsrs	r0, r0, #6
    4c5c:	2aff      	cmp	r2, #255	; 0xff
    4c5e:	d023      	beq.n	4ca8 <__aeabi_fsub+0x68>
    4c60:	2701      	movs	r7, #1
    4c62:	4079      	eors	r1, r7
    4c64:	1aaf      	subs	r7, r5, r2
    4c66:	428c      	cmp	r4, r1
    4c68:	d00f      	beq.n	4c8a <__aeabi_fsub+0x4a>
    4c6a:	2f00      	cmp	r7, #0
    4c6c:	dc00      	bgt.n	4c70 <__aeabi_fsub+0x30>
    4c6e:	e15d      	b.n	4f2c <__aeabi_fsub+0x2ec>
    4c70:	2a00      	cmp	r2, #0
    4c72:	d12f      	bne.n	4cd4 <__aeabi_fsub+0x94>
    4c74:	2800      	cmp	r0, #0
    4c76:	d100      	bne.n	4c7a <__aeabi_fsub+0x3a>
    4c78:	e090      	b.n	4d9c <__aeabi_fsub+0x15c>
    4c7a:	1e7a      	subs	r2, r7, #1
    4c7c:	2f01      	cmp	r7, #1
    4c7e:	d100      	bne.n	4c82 <__aeabi_fsub+0x42>
    4c80:	e11a      	b.n	4eb8 <__aeabi_fsub+0x278>
    4c82:	2fff      	cmp	r7, #255	; 0xff
    4c84:	d01c      	beq.n	4cc0 <__aeabi_fsub+0x80>
    4c86:	0017      	movs	r7, r2
    4c88:	e029      	b.n	4cde <__aeabi_fsub+0x9e>
    4c8a:	2f00      	cmp	r7, #0
    4c8c:	dc00      	bgt.n	4c90 <__aeabi_fsub+0x50>
    4c8e:	e159      	b.n	4f44 <__aeabi_fsub+0x304>
    4c90:	2a00      	cmp	r2, #0
    4c92:	d052      	beq.n	4d3a <__aeabi_fsub+0xfa>
    4c94:	2dff      	cmp	r5, #255	; 0xff
    4c96:	d013      	beq.n	4cc0 <__aeabi_fsub+0x80>
    4c98:	2280      	movs	r2, #128	; 0x80
    4c9a:	04d2      	lsls	r2, r2, #19
    4c9c:	4310      	orrs	r0, r2
    4c9e:	2f1b      	cmp	r7, #27
    4ca0:	dc00      	bgt.n	4ca4 <__aeabi_fsub+0x64>
    4ca2:	e06a      	b.n	4d7a <__aeabi_fsub+0x13a>
    4ca4:	3301      	adds	r3, #1
    4ca6:	e02b      	b.n	4d00 <__aeabi_fsub+0xc0>
    4ca8:	2800      	cmp	r0, #0
    4caa:	d03b      	beq.n	4d24 <__aeabi_fsub+0xe4>
    4cac:	428c      	cmp	r4, r1
    4cae:	d04d      	beq.n	4d4c <__aeabi_fsub+0x10c>
    4cb0:	2dff      	cmp	r5, #255	; 0xff
    4cb2:	d100      	bne.n	4cb6 <__aeabi_fsub+0x76>
    4cb4:	e08f      	b.n	4dd6 <__aeabi_fsub+0x196>
    4cb6:	2d00      	cmp	r5, #0
    4cb8:	d100      	bne.n	4cbc <__aeabi_fsub+0x7c>
    4cba:	e0ab      	b.n	4e14 <__aeabi_fsub+0x1d4>
    4cbc:	000c      	movs	r4, r1
    4cbe:	0003      	movs	r3, r0
    4cc0:	08db      	lsrs	r3, r3, #3
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d067      	beq.n	4d96 <__aeabi_fsub+0x156>
    4cc6:	2280      	movs	r2, #128	; 0x80
    4cc8:	03d2      	lsls	r2, r2, #15
    4cca:	4313      	orrs	r3, r2
    4ccc:	025b      	lsls	r3, r3, #9
    4cce:	20ff      	movs	r0, #255	; 0xff
    4cd0:	0a5b      	lsrs	r3, r3, #9
    4cd2:	e022      	b.n	4d1a <__aeabi_fsub+0xda>
    4cd4:	2dff      	cmp	r5, #255	; 0xff
    4cd6:	d0f3      	beq.n	4cc0 <__aeabi_fsub+0x80>
    4cd8:	2280      	movs	r2, #128	; 0x80
    4cda:	04d2      	lsls	r2, r2, #19
    4cdc:	4310      	orrs	r0, r2
    4cde:	2201      	movs	r2, #1
    4ce0:	2f1b      	cmp	r7, #27
    4ce2:	dc07      	bgt.n	4cf4 <__aeabi_fsub+0xb4>
    4ce4:	2120      	movs	r1, #32
    4ce6:	1bc9      	subs	r1, r1, r7
    4ce8:	0002      	movs	r2, r0
    4cea:	4088      	lsls	r0, r1
    4cec:	40fa      	lsrs	r2, r7
    4cee:	1e41      	subs	r1, r0, #1
    4cf0:	4188      	sbcs	r0, r1
    4cf2:	4302      	orrs	r2, r0
    4cf4:	1a9b      	subs	r3, r3, r2
    4cf6:	015a      	lsls	r2, r3, #5
    4cf8:	d456      	bmi.n	4da8 <__aeabi_fsub+0x168>
    4cfa:	2207      	movs	r2, #7
    4cfc:	401a      	ands	r2, r3
    4cfe:	d04e      	beq.n	4d9e <__aeabi_fsub+0x15e>
    4d00:	220f      	movs	r2, #15
    4d02:	401a      	ands	r2, r3
    4d04:	2a04      	cmp	r2, #4
    4d06:	d000      	beq.n	4d0a <__aeabi_fsub+0xca>
    4d08:	3304      	adds	r3, #4
    4d0a:	015a      	lsls	r2, r3, #5
    4d0c:	d547      	bpl.n	4d9e <__aeabi_fsub+0x15e>
    4d0e:	1c68      	adds	r0, r5, #1
    4d10:	2dfe      	cmp	r5, #254	; 0xfe
    4d12:	d040      	beq.n	4d96 <__aeabi_fsub+0x156>
    4d14:	019b      	lsls	r3, r3, #6
    4d16:	0a5b      	lsrs	r3, r3, #9
    4d18:	b2c0      	uxtb	r0, r0
    4d1a:	05c0      	lsls	r0, r0, #23
    4d1c:	4318      	orrs	r0, r3
    4d1e:	07e4      	lsls	r4, r4, #31
    4d20:	4320      	orrs	r0, r4
    4d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d24:	2701      	movs	r7, #1
    4d26:	4079      	eors	r1, r7
    4d28:	428c      	cmp	r4, r1
    4d2a:	d1c1      	bne.n	4cb0 <__aeabi_fsub+0x70>
    4d2c:	2dff      	cmp	r5, #255	; 0xff
    4d2e:	d010      	beq.n	4d52 <__aeabi_fsub+0x112>
    4d30:	2d00      	cmp	r5, #0
    4d32:	d100      	bne.n	4d36 <__aeabi_fsub+0xf6>
    4d34:	e0e7      	b.n	4f06 <__aeabi_fsub+0x2c6>
    4d36:	2300      	movs	r3, #0
    4d38:	e7c2      	b.n	4cc0 <__aeabi_fsub+0x80>
    4d3a:	2800      	cmp	r0, #0
    4d3c:	d02e      	beq.n	4d9c <__aeabi_fsub+0x15c>
    4d3e:	1e7a      	subs	r2, r7, #1
    4d40:	2f01      	cmp	r7, #1
    4d42:	d07f      	beq.n	4e44 <__aeabi_fsub+0x204>
    4d44:	2fff      	cmp	r7, #255	; 0xff
    4d46:	d0bb      	beq.n	4cc0 <__aeabi_fsub+0x80>
    4d48:	0017      	movs	r7, r2
    4d4a:	e7a8      	b.n	4c9e <__aeabi_fsub+0x5e>
    4d4c:	2dff      	cmp	r5, #255	; 0xff
    4d4e:	d000      	beq.n	4d52 <__aeabi_fsub+0x112>
    4d50:	e083      	b.n	4e5a <__aeabi_fsub+0x21a>
    4d52:	27fe      	movs	r7, #254	; 0xfe
    4d54:	1c6a      	adds	r2, r5, #1
    4d56:	4217      	tst	r7, r2
    4d58:	d000      	beq.n	4d5c <__aeabi_fsub+0x11c>
    4d5a:	e08d      	b.n	4e78 <__aeabi_fsub+0x238>
    4d5c:	2d00      	cmp	r5, #0
    4d5e:	d000      	beq.n	4d62 <__aeabi_fsub+0x122>
    4d60:	e0ad      	b.n	4ebe <__aeabi_fsub+0x27e>
    4d62:	2b00      	cmp	r3, #0
    4d64:	d100      	bne.n	4d68 <__aeabi_fsub+0x128>
    4d66:	e0d2      	b.n	4f0e <__aeabi_fsub+0x2ce>
    4d68:	2800      	cmp	r0, #0
    4d6a:	d000      	beq.n	4d6e <__aeabi_fsub+0x12e>
    4d6c:	e0d1      	b.n	4f12 <__aeabi_fsub+0x2d2>
    4d6e:	2500      	movs	r5, #0
    4d70:	08db      	lsrs	r3, r3, #3
    4d72:	025b      	lsls	r3, r3, #9
    4d74:	0a5b      	lsrs	r3, r3, #9
    4d76:	b2e8      	uxtb	r0, r5
    4d78:	e7cf      	b.n	4d1a <__aeabi_fsub+0xda>
    4d7a:	2120      	movs	r1, #32
    4d7c:	1bc9      	subs	r1, r1, r7
    4d7e:	0002      	movs	r2, r0
    4d80:	4088      	lsls	r0, r1
    4d82:	40fa      	lsrs	r2, r7
    4d84:	1e41      	subs	r1, r0, #1
    4d86:	4188      	sbcs	r0, r1
    4d88:	4310      	orrs	r0, r2
    4d8a:	181b      	adds	r3, r3, r0
    4d8c:	015a      	lsls	r2, r3, #5
    4d8e:	d5b4      	bpl.n	4cfa <__aeabi_fsub+0xba>
    4d90:	3501      	adds	r5, #1
    4d92:	2dff      	cmp	r5, #255	; 0xff
    4d94:	d15a      	bne.n	4e4c <__aeabi_fsub+0x20c>
    4d96:	20ff      	movs	r0, #255	; 0xff
    4d98:	2300      	movs	r3, #0
    4d9a:	e7be      	b.n	4d1a <__aeabi_fsub+0xda>
    4d9c:	003d      	movs	r5, r7
    4d9e:	08db      	lsrs	r3, r3, #3
    4da0:	2dff      	cmp	r5, #255	; 0xff
    4da2:	d100      	bne.n	4da6 <__aeabi_fsub+0x166>
    4da4:	e78d      	b.n	4cc2 <__aeabi_fsub+0x82>
    4da6:	e7e4      	b.n	4d72 <__aeabi_fsub+0x132>
    4da8:	019e      	lsls	r6, r3, #6
    4daa:	09b6      	lsrs	r6, r6, #6
    4dac:	0030      	movs	r0, r6
    4dae:	f000 f987 	bl	50c0 <__clzsi2>
    4db2:	3805      	subs	r0, #5
    4db4:	4086      	lsls	r6, r0
    4db6:	4285      	cmp	r5, r0
    4db8:	dc1f      	bgt.n	4dfa <__aeabi_fsub+0x1ba>
    4dba:	2220      	movs	r2, #32
    4dbc:	1b40      	subs	r0, r0, r5
    4dbe:	3001      	adds	r0, #1
    4dc0:	1a12      	subs	r2, r2, r0
    4dc2:	0033      	movs	r3, r6
    4dc4:	4096      	lsls	r6, r2
    4dc6:	40c3      	lsrs	r3, r0
    4dc8:	1e72      	subs	r2, r6, #1
    4dca:	4196      	sbcs	r6, r2
    4dcc:	2500      	movs	r5, #0
    4dce:	4333      	orrs	r3, r6
    4dd0:	075a      	lsls	r2, r3, #29
    4dd2:	d195      	bne.n	4d00 <__aeabi_fsub+0xc0>
    4dd4:	e799      	b.n	4d0a <__aeabi_fsub+0xca>
    4dd6:	27fe      	movs	r7, #254	; 0xfe
    4dd8:	1c6a      	adds	r2, r5, #1
    4dda:	4217      	tst	r7, r2
    4ddc:	d111      	bne.n	4e02 <__aeabi_fsub+0x1c2>
    4dde:	2d00      	cmp	r5, #0
    4de0:	d15a      	bne.n	4e98 <__aeabi_fsub+0x258>
    4de2:	2b00      	cmp	r3, #0
    4de4:	d100      	bne.n	4de8 <__aeabi_fsub+0x1a8>
    4de6:	e089      	b.n	4efc <__aeabi_fsub+0x2bc>
    4de8:	2800      	cmp	r0, #0
    4dea:	d0c0      	beq.n	4d6e <__aeabi_fsub+0x12e>
    4dec:	1a1a      	subs	r2, r3, r0
    4dee:	0156      	lsls	r6, r2, #5
    4df0:	d400      	bmi.n	4df4 <__aeabi_fsub+0x1b4>
    4df2:	e096      	b.n	4f22 <__aeabi_fsub+0x2e2>
    4df4:	000c      	movs	r4, r1
    4df6:	1ac3      	subs	r3, r0, r3
    4df8:	e7ea      	b.n	4dd0 <__aeabi_fsub+0x190>
    4dfa:	4b58      	ldr	r3, [pc, #352]	; (4f5c <__aeabi_fsub+0x31c>)
    4dfc:	1a2d      	subs	r5, r5, r0
    4dfe:	4033      	ands	r3, r6
    4e00:	e7e6      	b.n	4dd0 <__aeabi_fsub+0x190>
    4e02:	1a1e      	subs	r6, r3, r0
    4e04:	0172      	lsls	r2, r6, #5
    4e06:	d444      	bmi.n	4e92 <__aeabi_fsub+0x252>
    4e08:	2e00      	cmp	r6, #0
    4e0a:	d1cf      	bne.n	4dac <__aeabi_fsub+0x16c>
    4e0c:	2400      	movs	r4, #0
    4e0e:	2000      	movs	r0, #0
    4e10:	2300      	movs	r3, #0
    4e12:	e782      	b.n	4d1a <__aeabi_fsub+0xda>
    4e14:	25ff      	movs	r5, #255	; 0xff
    4e16:	2b00      	cmp	r3, #0
    4e18:	d038      	beq.n	4e8c <__aeabi_fsub+0x24c>
    4e1a:	1e6e      	subs	r6, r5, #1
    4e1c:	2d01      	cmp	r5, #1
    4e1e:	d06a      	beq.n	4ef6 <__aeabi_fsub+0x2b6>
    4e20:	2dff      	cmp	r5, #255	; 0xff
    4e22:	d100      	bne.n	4e26 <__aeabi_fsub+0x1e6>
    4e24:	e74a      	b.n	4cbc <__aeabi_fsub+0x7c>
    4e26:	2401      	movs	r4, #1
    4e28:	2e1b      	cmp	r6, #27
    4e2a:	dc07      	bgt.n	4e3c <__aeabi_fsub+0x1fc>
    4e2c:	2520      	movs	r5, #32
    4e2e:	1bad      	subs	r5, r5, r6
    4e30:	001c      	movs	r4, r3
    4e32:	40ab      	lsls	r3, r5
    4e34:	40f4      	lsrs	r4, r6
    4e36:	1e5d      	subs	r5, r3, #1
    4e38:	41ab      	sbcs	r3, r5
    4e3a:	431c      	orrs	r4, r3
    4e3c:	1b03      	subs	r3, r0, r4
    4e3e:	0015      	movs	r5, r2
    4e40:	000c      	movs	r4, r1
    4e42:	e758      	b.n	4cf6 <__aeabi_fsub+0xb6>
    4e44:	181b      	adds	r3, r3, r0
    4e46:	2502      	movs	r5, #2
    4e48:	015a      	lsls	r2, r3, #5
    4e4a:	d533      	bpl.n	4eb4 <__aeabi_fsub+0x274>
    4e4c:	2201      	movs	r2, #1
    4e4e:	4944      	ldr	r1, [pc, #272]	; (4f60 <__aeabi_fsub+0x320>)
    4e50:	401a      	ands	r2, r3
    4e52:	085b      	lsrs	r3, r3, #1
    4e54:	400b      	ands	r3, r1
    4e56:	4313      	orrs	r3, r2
    4e58:	e7ba      	b.n	4dd0 <__aeabi_fsub+0x190>
    4e5a:	2d00      	cmp	r5, #0
    4e5c:	d131      	bne.n	4ec2 <__aeabi_fsub+0x282>
    4e5e:	35ff      	adds	r5, #255	; 0xff
    4e60:	2b00      	cmp	r3, #0
    4e62:	d052      	beq.n	4f0a <__aeabi_fsub+0x2ca>
    4e64:	1e69      	subs	r1, r5, #1
    4e66:	2d01      	cmp	r5, #1
    4e68:	d020      	beq.n	4eac <__aeabi_fsub+0x26c>
    4e6a:	2dff      	cmp	r5, #255	; 0xff
    4e6c:	d029      	beq.n	4ec2 <__aeabi_fsub+0x282>
    4e6e:	291b      	cmp	r1, #27
    4e70:	dd36      	ble.n	4ee0 <__aeabi_fsub+0x2a0>
    4e72:	0015      	movs	r5, r2
    4e74:	1c43      	adds	r3, r0, #1
    4e76:	e743      	b.n	4d00 <__aeabi_fsub+0xc0>
    4e78:	2aff      	cmp	r2, #255	; 0xff
    4e7a:	d08c      	beq.n	4d96 <__aeabi_fsub+0x156>
    4e7c:	181b      	adds	r3, r3, r0
    4e7e:	085b      	lsrs	r3, r3, #1
    4e80:	0015      	movs	r5, r2
    4e82:	075a      	lsls	r2, r3, #29
    4e84:	d000      	beq.n	4e88 <__aeabi_fsub+0x248>
    4e86:	e73b      	b.n	4d00 <__aeabi_fsub+0xc0>
    4e88:	08db      	lsrs	r3, r3, #3
    4e8a:	e772      	b.n	4d72 <__aeabi_fsub+0x132>
    4e8c:	000c      	movs	r4, r1
    4e8e:	0003      	movs	r3, r0
    4e90:	e785      	b.n	4d9e <__aeabi_fsub+0x15e>
    4e92:	000c      	movs	r4, r1
    4e94:	1ac6      	subs	r6, r0, r3
    4e96:	e789      	b.n	4dac <__aeabi_fsub+0x16c>
    4e98:	2b00      	cmp	r3, #0
    4e9a:	d114      	bne.n	4ec6 <__aeabi_fsub+0x286>
    4e9c:	2800      	cmp	r0, #0
    4e9e:	d000      	beq.n	4ea2 <__aeabi_fsub+0x262>
    4ea0:	e70c      	b.n	4cbc <__aeabi_fsub+0x7c>
    4ea2:	2380      	movs	r3, #128	; 0x80
    4ea4:	2400      	movs	r4, #0
    4ea6:	20ff      	movs	r0, #255	; 0xff
    4ea8:	03db      	lsls	r3, r3, #15
    4eaa:	e736      	b.n	4d1a <__aeabi_fsub+0xda>
    4eac:	181b      	adds	r3, r3, r0
    4eae:	3501      	adds	r5, #1
    4eb0:	015a      	lsls	r2, r3, #5
    4eb2:	d4cb      	bmi.n	4e4c <__aeabi_fsub+0x20c>
    4eb4:	3d01      	subs	r5, #1
    4eb6:	e720      	b.n	4cfa <__aeabi_fsub+0xba>
    4eb8:	2501      	movs	r5, #1
    4eba:	1a1b      	subs	r3, r3, r0
    4ebc:	e71b      	b.n	4cf6 <__aeabi_fsub+0xb6>
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d101      	bne.n	4ec6 <__aeabi_fsub+0x286>
    4ec2:	0003      	movs	r3, r0
    4ec4:	e6fc      	b.n	4cc0 <__aeabi_fsub+0x80>
    4ec6:	2800      	cmp	r0, #0
    4ec8:	d100      	bne.n	4ecc <__aeabi_fsub+0x28c>
    4eca:	e6f9      	b.n	4cc0 <__aeabi_fsub+0x80>
    4ecc:	2280      	movs	r2, #128	; 0x80
    4ece:	03d2      	lsls	r2, r2, #15
    4ed0:	4296      	cmp	r6, r2
    4ed2:	d303      	bcc.n	4edc <__aeabi_fsub+0x29c>
    4ed4:	4594      	cmp	ip, r2
    4ed6:	d201      	bcs.n	4edc <__aeabi_fsub+0x29c>
    4ed8:	000c      	movs	r4, r1
    4eda:	0003      	movs	r3, r0
    4edc:	08db      	lsrs	r3, r3, #3
    4ede:	e6f2      	b.n	4cc6 <__aeabi_fsub+0x86>
    4ee0:	001d      	movs	r5, r3
    4ee2:	2620      	movs	r6, #32
    4ee4:	40cd      	lsrs	r5, r1
    4ee6:	1a71      	subs	r1, r6, r1
    4ee8:	408b      	lsls	r3, r1
    4eea:	1e59      	subs	r1, r3, #1
    4eec:	418b      	sbcs	r3, r1
    4eee:	432b      	orrs	r3, r5
    4ef0:	181b      	adds	r3, r3, r0
    4ef2:	0015      	movs	r5, r2
    4ef4:	e74a      	b.n	4d8c <__aeabi_fsub+0x14c>
    4ef6:	000c      	movs	r4, r1
    4ef8:	1ac3      	subs	r3, r0, r3
    4efa:	e6fc      	b.n	4cf6 <__aeabi_fsub+0xb6>
    4efc:	2800      	cmp	r0, #0
    4efe:	d085      	beq.n	4e0c <__aeabi_fsub+0x1cc>
    4f00:	000c      	movs	r4, r1
    4f02:	0003      	movs	r3, r0
    4f04:	e733      	b.n	4d6e <__aeabi_fsub+0x12e>
    4f06:	25ff      	movs	r5, #255	; 0xff
    4f08:	e7aa      	b.n	4e60 <__aeabi_fsub+0x220>
    4f0a:	0003      	movs	r3, r0
    4f0c:	e747      	b.n	4d9e <__aeabi_fsub+0x15e>
    4f0e:	0003      	movs	r3, r0
    4f10:	e72d      	b.n	4d6e <__aeabi_fsub+0x12e>
    4f12:	181b      	adds	r3, r3, r0
    4f14:	015a      	lsls	r2, r3, #5
    4f16:	d5b7      	bpl.n	4e88 <__aeabi_fsub+0x248>
    4f18:	4a10      	ldr	r2, [pc, #64]	; (4f5c <__aeabi_fsub+0x31c>)
    4f1a:	3501      	adds	r5, #1
    4f1c:	4013      	ands	r3, r2
    4f1e:	08db      	lsrs	r3, r3, #3
    4f20:	e727      	b.n	4d72 <__aeabi_fsub+0x132>
    4f22:	1e13      	subs	r3, r2, #0
    4f24:	d100      	bne.n	4f28 <__aeabi_fsub+0x2e8>
    4f26:	e771      	b.n	4e0c <__aeabi_fsub+0x1cc>
    4f28:	08db      	lsrs	r3, r3, #3
    4f2a:	e722      	b.n	4d72 <__aeabi_fsub+0x132>
    4f2c:	2f00      	cmp	r7, #0
    4f2e:	d100      	bne.n	4f32 <__aeabi_fsub+0x2f2>
    4f30:	e751      	b.n	4dd6 <__aeabi_fsub+0x196>
    4f32:	1b56      	subs	r6, r2, r5
    4f34:	2d00      	cmp	r5, #0
    4f36:	d101      	bne.n	4f3c <__aeabi_fsub+0x2fc>
    4f38:	0035      	movs	r5, r6
    4f3a:	e76c      	b.n	4e16 <__aeabi_fsub+0x1d6>
    4f3c:	2480      	movs	r4, #128	; 0x80
    4f3e:	04e4      	lsls	r4, r4, #19
    4f40:	4323      	orrs	r3, r4
    4f42:	e770      	b.n	4e26 <__aeabi_fsub+0x1e6>
    4f44:	2f00      	cmp	r7, #0
    4f46:	d100      	bne.n	4f4a <__aeabi_fsub+0x30a>
    4f48:	e703      	b.n	4d52 <__aeabi_fsub+0x112>
    4f4a:	1b51      	subs	r1, r2, r5
    4f4c:	2d00      	cmp	r5, #0
    4f4e:	d101      	bne.n	4f54 <__aeabi_fsub+0x314>
    4f50:	000d      	movs	r5, r1
    4f52:	e785      	b.n	4e60 <__aeabi_fsub+0x220>
    4f54:	2580      	movs	r5, #128	; 0x80
    4f56:	04ed      	lsls	r5, r5, #19
    4f58:	432b      	orrs	r3, r5
    4f5a:	e788      	b.n	4e6e <__aeabi_fsub+0x22e>
    4f5c:	fbffffff 	.word	0xfbffffff
    4f60:	7dffffff 	.word	0x7dffffff

00004f64 <__aeabi_f2iz>:
    4f64:	0241      	lsls	r1, r0, #9
    4f66:	0042      	lsls	r2, r0, #1
    4f68:	0fc3      	lsrs	r3, r0, #31
    4f6a:	0a49      	lsrs	r1, r1, #9
    4f6c:	2000      	movs	r0, #0
    4f6e:	0e12      	lsrs	r2, r2, #24
    4f70:	2a7e      	cmp	r2, #126	; 0x7e
    4f72:	dd03      	ble.n	4f7c <__aeabi_f2iz+0x18>
    4f74:	2a9d      	cmp	r2, #157	; 0x9d
    4f76:	dd02      	ble.n	4f7e <__aeabi_f2iz+0x1a>
    4f78:	4a09      	ldr	r2, [pc, #36]	; (4fa0 <__aeabi_f2iz+0x3c>)
    4f7a:	1898      	adds	r0, r3, r2
    4f7c:	4770      	bx	lr
    4f7e:	2080      	movs	r0, #128	; 0x80
    4f80:	0400      	lsls	r0, r0, #16
    4f82:	4301      	orrs	r1, r0
    4f84:	2a95      	cmp	r2, #149	; 0x95
    4f86:	dc07      	bgt.n	4f98 <__aeabi_f2iz+0x34>
    4f88:	2096      	movs	r0, #150	; 0x96
    4f8a:	1a82      	subs	r2, r0, r2
    4f8c:	40d1      	lsrs	r1, r2
    4f8e:	4248      	negs	r0, r1
    4f90:	2b00      	cmp	r3, #0
    4f92:	d1f3      	bne.n	4f7c <__aeabi_f2iz+0x18>
    4f94:	0008      	movs	r0, r1
    4f96:	e7f1      	b.n	4f7c <__aeabi_f2iz+0x18>
    4f98:	3a96      	subs	r2, #150	; 0x96
    4f9a:	4091      	lsls	r1, r2
    4f9c:	e7f7      	b.n	4f8e <__aeabi_f2iz+0x2a>
    4f9e:	46c0      	nop			; (mov r8, r8)
    4fa0:	7fffffff 	.word	0x7fffffff

00004fa4 <__aeabi_i2f>:
    4fa4:	b570      	push	{r4, r5, r6, lr}
    4fa6:	2800      	cmp	r0, #0
    4fa8:	d013      	beq.n	4fd2 <__aeabi_i2f+0x2e>
    4faa:	17c3      	asrs	r3, r0, #31
    4fac:	18c5      	adds	r5, r0, r3
    4fae:	405d      	eors	r5, r3
    4fb0:	0fc4      	lsrs	r4, r0, #31
    4fb2:	0028      	movs	r0, r5
    4fb4:	f000 f884 	bl	50c0 <__clzsi2>
    4fb8:	239e      	movs	r3, #158	; 0x9e
    4fba:	0001      	movs	r1, r0
    4fbc:	1a1b      	subs	r3, r3, r0
    4fbe:	2b96      	cmp	r3, #150	; 0x96
    4fc0:	dc0f      	bgt.n	4fe2 <__aeabi_i2f+0x3e>
    4fc2:	2808      	cmp	r0, #8
    4fc4:	d034      	beq.n	5030 <__aeabi_i2f+0x8c>
    4fc6:	3908      	subs	r1, #8
    4fc8:	408d      	lsls	r5, r1
    4fca:	026d      	lsls	r5, r5, #9
    4fcc:	0a6d      	lsrs	r5, r5, #9
    4fce:	b2d8      	uxtb	r0, r3
    4fd0:	e002      	b.n	4fd8 <__aeabi_i2f+0x34>
    4fd2:	2400      	movs	r4, #0
    4fd4:	2000      	movs	r0, #0
    4fd6:	2500      	movs	r5, #0
    4fd8:	05c0      	lsls	r0, r0, #23
    4fda:	4328      	orrs	r0, r5
    4fdc:	07e4      	lsls	r4, r4, #31
    4fde:	4320      	orrs	r0, r4
    4fe0:	bd70      	pop	{r4, r5, r6, pc}
    4fe2:	2b99      	cmp	r3, #153	; 0x99
    4fe4:	dc16      	bgt.n	5014 <__aeabi_i2f+0x70>
    4fe6:	1f42      	subs	r2, r0, #5
    4fe8:	2805      	cmp	r0, #5
    4fea:	d000      	beq.n	4fee <__aeabi_i2f+0x4a>
    4fec:	4095      	lsls	r5, r2
    4fee:	002a      	movs	r2, r5
    4ff0:	4811      	ldr	r0, [pc, #68]	; (5038 <__aeabi_i2f+0x94>)
    4ff2:	4002      	ands	r2, r0
    4ff4:	076e      	lsls	r6, r5, #29
    4ff6:	d009      	beq.n	500c <__aeabi_i2f+0x68>
    4ff8:	260f      	movs	r6, #15
    4ffa:	4035      	ands	r5, r6
    4ffc:	2d04      	cmp	r5, #4
    4ffe:	d005      	beq.n	500c <__aeabi_i2f+0x68>
    5000:	3204      	adds	r2, #4
    5002:	0155      	lsls	r5, r2, #5
    5004:	d502      	bpl.n	500c <__aeabi_i2f+0x68>
    5006:	239f      	movs	r3, #159	; 0x9f
    5008:	4002      	ands	r2, r0
    500a:	1a5b      	subs	r3, r3, r1
    500c:	0192      	lsls	r2, r2, #6
    500e:	0a55      	lsrs	r5, r2, #9
    5010:	b2d8      	uxtb	r0, r3
    5012:	e7e1      	b.n	4fd8 <__aeabi_i2f+0x34>
    5014:	2205      	movs	r2, #5
    5016:	1a12      	subs	r2, r2, r0
    5018:	0028      	movs	r0, r5
    501a:	40d0      	lsrs	r0, r2
    501c:	0002      	movs	r2, r0
    501e:	0008      	movs	r0, r1
    5020:	301b      	adds	r0, #27
    5022:	4085      	lsls	r5, r0
    5024:	0028      	movs	r0, r5
    5026:	1e45      	subs	r5, r0, #1
    5028:	41a8      	sbcs	r0, r5
    502a:	4302      	orrs	r2, r0
    502c:	0015      	movs	r5, r2
    502e:	e7de      	b.n	4fee <__aeabi_i2f+0x4a>
    5030:	026d      	lsls	r5, r5, #9
    5032:	2096      	movs	r0, #150	; 0x96
    5034:	0a6d      	lsrs	r5, r5, #9
    5036:	e7cf      	b.n	4fd8 <__aeabi_i2f+0x34>
    5038:	fbffffff 	.word	0xfbffffff

0000503c <__aeabi_ui2f>:
    503c:	b570      	push	{r4, r5, r6, lr}
    503e:	1e04      	subs	r4, r0, #0
    5040:	d00e      	beq.n	5060 <__aeabi_ui2f+0x24>
    5042:	f000 f83d 	bl	50c0 <__clzsi2>
    5046:	239e      	movs	r3, #158	; 0x9e
    5048:	0001      	movs	r1, r0
    504a:	1a1b      	subs	r3, r3, r0
    504c:	2b96      	cmp	r3, #150	; 0x96
    504e:	dc0c      	bgt.n	506a <__aeabi_ui2f+0x2e>
    5050:	2808      	cmp	r0, #8
    5052:	d02f      	beq.n	50b4 <__aeabi_ui2f+0x78>
    5054:	3908      	subs	r1, #8
    5056:	408c      	lsls	r4, r1
    5058:	0264      	lsls	r4, r4, #9
    505a:	0a64      	lsrs	r4, r4, #9
    505c:	b2d8      	uxtb	r0, r3
    505e:	e001      	b.n	5064 <__aeabi_ui2f+0x28>
    5060:	2000      	movs	r0, #0
    5062:	2400      	movs	r4, #0
    5064:	05c0      	lsls	r0, r0, #23
    5066:	4320      	orrs	r0, r4
    5068:	bd70      	pop	{r4, r5, r6, pc}
    506a:	2b99      	cmp	r3, #153	; 0x99
    506c:	dc16      	bgt.n	509c <__aeabi_ui2f+0x60>
    506e:	1f42      	subs	r2, r0, #5
    5070:	2805      	cmp	r0, #5
    5072:	d000      	beq.n	5076 <__aeabi_ui2f+0x3a>
    5074:	4094      	lsls	r4, r2
    5076:	0022      	movs	r2, r4
    5078:	4810      	ldr	r0, [pc, #64]	; (50bc <__aeabi_ui2f+0x80>)
    507a:	4002      	ands	r2, r0
    507c:	0765      	lsls	r5, r4, #29
    507e:	d009      	beq.n	5094 <__aeabi_ui2f+0x58>
    5080:	250f      	movs	r5, #15
    5082:	402c      	ands	r4, r5
    5084:	2c04      	cmp	r4, #4
    5086:	d005      	beq.n	5094 <__aeabi_ui2f+0x58>
    5088:	3204      	adds	r2, #4
    508a:	0154      	lsls	r4, r2, #5
    508c:	d502      	bpl.n	5094 <__aeabi_ui2f+0x58>
    508e:	239f      	movs	r3, #159	; 0x9f
    5090:	4002      	ands	r2, r0
    5092:	1a5b      	subs	r3, r3, r1
    5094:	0192      	lsls	r2, r2, #6
    5096:	0a54      	lsrs	r4, r2, #9
    5098:	b2d8      	uxtb	r0, r3
    509a:	e7e3      	b.n	5064 <__aeabi_ui2f+0x28>
    509c:	0002      	movs	r2, r0
    509e:	0020      	movs	r0, r4
    50a0:	321b      	adds	r2, #27
    50a2:	4090      	lsls	r0, r2
    50a4:	0002      	movs	r2, r0
    50a6:	1e50      	subs	r0, r2, #1
    50a8:	4182      	sbcs	r2, r0
    50aa:	2005      	movs	r0, #5
    50ac:	1a40      	subs	r0, r0, r1
    50ae:	40c4      	lsrs	r4, r0
    50b0:	4314      	orrs	r4, r2
    50b2:	e7e0      	b.n	5076 <__aeabi_ui2f+0x3a>
    50b4:	0264      	lsls	r4, r4, #9
    50b6:	2096      	movs	r0, #150	; 0x96
    50b8:	0a64      	lsrs	r4, r4, #9
    50ba:	e7d3      	b.n	5064 <__aeabi_ui2f+0x28>
    50bc:	fbffffff 	.word	0xfbffffff

000050c0 <__clzsi2>:
    50c0:	211c      	movs	r1, #28
    50c2:	2301      	movs	r3, #1
    50c4:	041b      	lsls	r3, r3, #16
    50c6:	4298      	cmp	r0, r3
    50c8:	d301      	bcc.n	50ce <__clzsi2+0xe>
    50ca:	0c00      	lsrs	r0, r0, #16
    50cc:	3910      	subs	r1, #16
    50ce:	0a1b      	lsrs	r3, r3, #8
    50d0:	4298      	cmp	r0, r3
    50d2:	d301      	bcc.n	50d8 <__clzsi2+0x18>
    50d4:	0a00      	lsrs	r0, r0, #8
    50d6:	3908      	subs	r1, #8
    50d8:	091b      	lsrs	r3, r3, #4
    50da:	4298      	cmp	r0, r3
    50dc:	d301      	bcc.n	50e2 <__clzsi2+0x22>
    50de:	0900      	lsrs	r0, r0, #4
    50e0:	3904      	subs	r1, #4
    50e2:	a202      	add	r2, pc, #8	; (adr r2, 50ec <__clzsi2+0x2c>)
    50e4:	5c10      	ldrb	r0, [r2, r0]
    50e6:	1840      	adds	r0, r0, r1
    50e8:	4770      	bx	lr
    50ea:	46c0      	nop			; (mov r8, r8)
    50ec:	02020304 	.word	0x02020304
    50f0:	01010101 	.word	0x01010101
	...

000050fc <memset>:
    50fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    50fe:	0005      	movs	r5, r0
    5100:	0783      	lsls	r3, r0, #30
    5102:	d049      	beq.n	5198 <memset+0x9c>
    5104:	1e54      	subs	r4, r2, #1
    5106:	2a00      	cmp	r2, #0
    5108:	d045      	beq.n	5196 <memset+0x9a>
    510a:	0003      	movs	r3, r0
    510c:	2603      	movs	r6, #3
    510e:	b2ca      	uxtb	r2, r1
    5110:	e002      	b.n	5118 <memset+0x1c>
    5112:	3501      	adds	r5, #1
    5114:	3c01      	subs	r4, #1
    5116:	d33e      	bcc.n	5196 <memset+0x9a>
    5118:	3301      	adds	r3, #1
    511a:	702a      	strb	r2, [r5, #0]
    511c:	4233      	tst	r3, r6
    511e:	d1f8      	bne.n	5112 <memset+0x16>
    5120:	2c03      	cmp	r4, #3
    5122:	d930      	bls.n	5186 <memset+0x8a>
    5124:	22ff      	movs	r2, #255	; 0xff
    5126:	400a      	ands	r2, r1
    5128:	0215      	lsls	r5, r2, #8
    512a:	18ad      	adds	r5, r5, r2
    512c:	042a      	lsls	r2, r5, #16
    512e:	18ad      	adds	r5, r5, r2
    5130:	2c0f      	cmp	r4, #15
    5132:	d934      	bls.n	519e <memset+0xa2>
    5134:	0027      	movs	r7, r4
    5136:	3f10      	subs	r7, #16
    5138:	093f      	lsrs	r7, r7, #4
    513a:	013e      	lsls	r6, r7, #4
    513c:	46b4      	mov	ip, r6
    513e:	001e      	movs	r6, r3
    5140:	001a      	movs	r2, r3
    5142:	3610      	adds	r6, #16
    5144:	4466      	add	r6, ip
    5146:	6015      	str	r5, [r2, #0]
    5148:	6055      	str	r5, [r2, #4]
    514a:	6095      	str	r5, [r2, #8]
    514c:	60d5      	str	r5, [r2, #12]
    514e:	3210      	adds	r2, #16
    5150:	4296      	cmp	r6, r2
    5152:	d1f8      	bne.n	5146 <memset+0x4a>
    5154:	3701      	adds	r7, #1
    5156:	013f      	lsls	r7, r7, #4
    5158:	19db      	adds	r3, r3, r7
    515a:	270f      	movs	r7, #15
    515c:	220c      	movs	r2, #12
    515e:	4027      	ands	r7, r4
    5160:	4022      	ands	r2, r4
    5162:	003c      	movs	r4, r7
    5164:	2a00      	cmp	r2, #0
    5166:	d00e      	beq.n	5186 <memset+0x8a>
    5168:	1f3e      	subs	r6, r7, #4
    516a:	08b6      	lsrs	r6, r6, #2
    516c:	00b4      	lsls	r4, r6, #2
    516e:	46a4      	mov	ip, r4
    5170:	001a      	movs	r2, r3
    5172:	1d1c      	adds	r4, r3, #4
    5174:	4464      	add	r4, ip
    5176:	c220      	stmia	r2!, {r5}
    5178:	42a2      	cmp	r2, r4
    517a:	d1fc      	bne.n	5176 <memset+0x7a>
    517c:	2403      	movs	r4, #3
    517e:	3601      	adds	r6, #1
    5180:	00b6      	lsls	r6, r6, #2
    5182:	199b      	adds	r3, r3, r6
    5184:	403c      	ands	r4, r7
    5186:	2c00      	cmp	r4, #0
    5188:	d005      	beq.n	5196 <memset+0x9a>
    518a:	b2c9      	uxtb	r1, r1
    518c:	191c      	adds	r4, r3, r4
    518e:	7019      	strb	r1, [r3, #0]
    5190:	3301      	adds	r3, #1
    5192:	429c      	cmp	r4, r3
    5194:	d1fb      	bne.n	518e <memset+0x92>
    5196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5198:	0003      	movs	r3, r0
    519a:	0014      	movs	r4, r2
    519c:	e7c0      	b.n	5120 <memset+0x24>
    519e:	0027      	movs	r7, r4
    51a0:	e7e2      	b.n	5168 <memset+0x6c>
    51a2:	46c0      	nop			; (mov r8, r8)

000051a4 <__libc_init_array>:
    51a4:	b570      	push	{r4, r5, r6, lr}
    51a6:	4b0d      	ldr	r3, [pc, #52]	; (51dc <__libc_init_array+0x38>)
    51a8:	4d0d      	ldr	r5, [pc, #52]	; (51e0 <__libc_init_array+0x3c>)
    51aa:	1b5e      	subs	r6, r3, r5
    51ac:	10b6      	asrs	r6, r6, #2
    51ae:	42ab      	cmp	r3, r5
    51b0:	d005      	beq.n	51be <__libc_init_array+0x1a>
    51b2:	2400      	movs	r4, #0
    51b4:	cd08      	ldmia	r5!, {r3}
    51b6:	3401      	adds	r4, #1
    51b8:	4798      	blx	r3
    51ba:	42a6      	cmp	r6, r4
    51bc:	d8fa      	bhi.n	51b4 <__libc_init_array+0x10>
    51be:	f000 fb0b 	bl	57d8 <_init>
    51c2:	4b08      	ldr	r3, [pc, #32]	; (51e4 <__libc_init_array+0x40>)
    51c4:	4d08      	ldr	r5, [pc, #32]	; (51e8 <__libc_init_array+0x44>)
    51c6:	1b5e      	subs	r6, r3, r5
    51c8:	10b6      	asrs	r6, r6, #2
    51ca:	42ab      	cmp	r3, r5
    51cc:	d005      	beq.n	51da <__libc_init_array+0x36>
    51ce:	2400      	movs	r4, #0
    51d0:	cd08      	ldmia	r5!, {r3}
    51d2:	3401      	adds	r4, #1
    51d4:	4798      	blx	r3
    51d6:	42a6      	cmp	r6, r4
    51d8:	d8fa      	bhi.n	51d0 <__libc_init_array+0x2c>
    51da:	bd70      	pop	{r4, r5, r6, pc}
    51dc:	000057e4 	.word	0x000057e4
    51e0:	000057e4 	.word	0x000057e4
    51e4:	000057ec 	.word	0x000057ec
    51e8:	000057e4 	.word	0x000057e4

000051ec <__retarget_lock_acquire_recursive>:
    51ec:	4770      	bx	lr
    51ee:	46c0      	nop			; (mov r8, r8)

000051f0 <__retarget_lock_release_recursive>:
    51f0:	4770      	bx	lr
    51f2:	46c0      	nop			; (mov r8, r8)

000051f4 <memcpy>:
    51f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51f6:	0005      	movs	r5, r0
    51f8:	2a0f      	cmp	r2, #15
    51fa:	d933      	bls.n	5264 <memcpy+0x70>
    51fc:	2403      	movs	r4, #3
    51fe:	0003      	movs	r3, r0
    5200:	0026      	movs	r6, r4
    5202:	430b      	orrs	r3, r1
    5204:	401e      	ands	r6, r3
    5206:	421c      	tst	r4, r3
    5208:	d137      	bne.n	527a <memcpy+0x86>
    520a:	0015      	movs	r5, r2
    520c:	3d10      	subs	r5, #16
    520e:	092d      	lsrs	r5, r5, #4
    5210:	0003      	movs	r3, r0
    5212:	000c      	movs	r4, r1
    5214:	46ac      	mov	ip, r5
    5216:	012f      	lsls	r7, r5, #4
    5218:	183f      	adds	r7, r7, r0
    521a:	6865      	ldr	r5, [r4, #4]
    521c:	605d      	str	r5, [r3, #4]
    521e:	68a5      	ldr	r5, [r4, #8]
    5220:	609d      	str	r5, [r3, #8]
    5222:	68e5      	ldr	r5, [r4, #12]
    5224:	60dd      	str	r5, [r3, #12]
    5226:	6825      	ldr	r5, [r4, #0]
    5228:	3410      	adds	r4, #16
    522a:	601d      	str	r5, [r3, #0]
    522c:	001d      	movs	r5, r3
    522e:	3310      	adds	r3, #16
    5230:	42bd      	cmp	r5, r7
    5232:	d1f2      	bne.n	521a <memcpy+0x26>
    5234:	4665      	mov	r5, ip
    5236:	230f      	movs	r3, #15
    5238:	240c      	movs	r4, #12
    523a:	3501      	adds	r5, #1
    523c:	012d      	lsls	r5, r5, #4
    523e:	1949      	adds	r1, r1, r5
    5240:	4013      	ands	r3, r2
    5242:	1945      	adds	r5, r0, r5
    5244:	4214      	tst	r4, r2
    5246:	d01a      	beq.n	527e <memcpy+0x8a>
    5248:	598c      	ldr	r4, [r1, r6]
    524a:	51ac      	str	r4, [r5, r6]
    524c:	3604      	adds	r6, #4
    524e:	1b9c      	subs	r4, r3, r6
    5250:	2c03      	cmp	r4, #3
    5252:	d8f9      	bhi.n	5248 <memcpy+0x54>
    5254:	3b04      	subs	r3, #4
    5256:	089b      	lsrs	r3, r3, #2
    5258:	3301      	adds	r3, #1
    525a:	009b      	lsls	r3, r3, #2
    525c:	18ed      	adds	r5, r5, r3
    525e:	18c9      	adds	r1, r1, r3
    5260:	2303      	movs	r3, #3
    5262:	401a      	ands	r2, r3
    5264:	1e56      	subs	r6, r2, #1
    5266:	2a00      	cmp	r2, #0
    5268:	d006      	beq.n	5278 <memcpy+0x84>
    526a:	2300      	movs	r3, #0
    526c:	5ccc      	ldrb	r4, [r1, r3]
    526e:	001a      	movs	r2, r3
    5270:	54ec      	strb	r4, [r5, r3]
    5272:	3301      	adds	r3, #1
    5274:	4296      	cmp	r6, r2
    5276:	d1f9      	bne.n	526c <memcpy+0x78>
    5278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    527a:	1e56      	subs	r6, r2, #1
    527c:	e7f5      	b.n	526a <memcpy+0x76>
    527e:	001a      	movs	r2, r3
    5280:	e7f0      	b.n	5264 <memcpy+0x70>
    5282:	46c0      	nop			; (mov r8, r8)

00005284 <strlen>:
    5284:	b510      	push	{r4, lr}
    5286:	0783      	lsls	r3, r0, #30
    5288:	d00a      	beq.n	52a0 <strlen+0x1c>
    528a:	0003      	movs	r3, r0
    528c:	2103      	movs	r1, #3
    528e:	e002      	b.n	5296 <strlen+0x12>
    5290:	3301      	adds	r3, #1
    5292:	420b      	tst	r3, r1
    5294:	d005      	beq.n	52a2 <strlen+0x1e>
    5296:	781a      	ldrb	r2, [r3, #0]
    5298:	2a00      	cmp	r2, #0
    529a:	d1f9      	bne.n	5290 <strlen+0xc>
    529c:	1a18      	subs	r0, r3, r0
    529e:	bd10      	pop	{r4, pc}
    52a0:	0003      	movs	r3, r0
    52a2:	6819      	ldr	r1, [r3, #0]
    52a4:	4a0c      	ldr	r2, [pc, #48]	; (52d8 <strlen+0x54>)
    52a6:	4c0d      	ldr	r4, [pc, #52]	; (52dc <strlen+0x58>)
    52a8:	188a      	adds	r2, r1, r2
    52aa:	438a      	bics	r2, r1
    52ac:	4222      	tst	r2, r4
    52ae:	d10f      	bne.n	52d0 <strlen+0x4c>
    52b0:	6859      	ldr	r1, [r3, #4]
    52b2:	4a09      	ldr	r2, [pc, #36]	; (52d8 <strlen+0x54>)
    52b4:	3304      	adds	r3, #4
    52b6:	188a      	adds	r2, r1, r2
    52b8:	438a      	bics	r2, r1
    52ba:	4222      	tst	r2, r4
    52bc:	d108      	bne.n	52d0 <strlen+0x4c>
    52be:	6859      	ldr	r1, [r3, #4]
    52c0:	4a05      	ldr	r2, [pc, #20]	; (52d8 <strlen+0x54>)
    52c2:	3304      	adds	r3, #4
    52c4:	188a      	adds	r2, r1, r2
    52c6:	438a      	bics	r2, r1
    52c8:	4222      	tst	r2, r4
    52ca:	d0f1      	beq.n	52b0 <strlen+0x2c>
    52cc:	e000      	b.n	52d0 <strlen+0x4c>
    52ce:	3301      	adds	r3, #1
    52d0:	781a      	ldrb	r2, [r3, #0]
    52d2:	2a00      	cmp	r2, #0
    52d4:	d1fb      	bne.n	52ce <strlen+0x4a>
    52d6:	e7e1      	b.n	529c <strlen+0x18>
    52d8:	fefefeff 	.word	0xfefefeff
    52dc:	80808080 	.word	0x80808080

000052e0 <register_fini>:
    52e0:	4b03      	ldr	r3, [pc, #12]	; (52f0 <register_fini+0x10>)
    52e2:	b510      	push	{r4, lr}
    52e4:	2b00      	cmp	r3, #0
    52e6:	d002      	beq.n	52ee <register_fini+0xe>
    52e8:	4802      	ldr	r0, [pc, #8]	; (52f4 <register_fini+0x14>)
    52ea:	f000 f805 	bl	52f8 <atexit>
    52ee:	bd10      	pop	{r4, pc}
    52f0:	00000000 	.word	0x00000000
    52f4:	00005309 	.word	0x00005309

000052f8 <atexit>:
    52f8:	b510      	push	{r4, lr}
    52fa:	0001      	movs	r1, r0
    52fc:	2300      	movs	r3, #0
    52fe:	2200      	movs	r2, #0
    5300:	2000      	movs	r0, #0
    5302:	f000 f815 	bl	5330 <__register_exitproc>
    5306:	bd10      	pop	{r4, pc}

00005308 <__libc_fini_array>:
    5308:	b570      	push	{r4, r5, r6, lr}
    530a:	4c07      	ldr	r4, [pc, #28]	; (5328 <__libc_fini_array+0x20>)
    530c:	4d07      	ldr	r5, [pc, #28]	; (532c <__libc_fini_array+0x24>)
    530e:	1b64      	subs	r4, r4, r5
    5310:	10a4      	asrs	r4, r4, #2
    5312:	d005      	beq.n	5320 <__libc_fini_array+0x18>
    5314:	3c01      	subs	r4, #1
    5316:	00a3      	lsls	r3, r4, #2
    5318:	58eb      	ldr	r3, [r5, r3]
    531a:	4798      	blx	r3
    531c:	2c00      	cmp	r4, #0
    531e:	d1f9      	bne.n	5314 <__libc_fini_array+0xc>
    5320:	f000 fa64 	bl	57ec <_fini>
    5324:	bd70      	pop	{r4, r5, r6, pc}
    5326:	46c0      	nop			; (mov r8, r8)
    5328:	000057fc 	.word	0x000057fc
    532c:	000057f8 	.word	0x000057f8

00005330 <__register_exitproc>:
    5330:	b5f0      	push	{r4, r5, r6, r7, lr}
    5332:	46d6      	mov	lr, sl
    5334:	464f      	mov	r7, r9
    5336:	4646      	mov	r6, r8
    5338:	4698      	mov	r8, r3
    533a:	4b22      	ldr	r3, [pc, #136]	; (53c4 <__register_exitproc+0x94>)
    533c:	b5c0      	push	{r6, r7, lr}
    533e:	0006      	movs	r6, r0
    5340:	6818      	ldr	r0, [r3, #0]
    5342:	4699      	mov	r9, r3
    5344:	000f      	movs	r7, r1
    5346:	4692      	mov	sl, r2
    5348:	f7ff ff50 	bl	51ec <__retarget_lock_acquire_recursive>
    534c:	4b1e      	ldr	r3, [pc, #120]	; (53c8 <__register_exitproc+0x98>)
    534e:	681d      	ldr	r5, [r3, #0]
    5350:	2d00      	cmp	r5, #0
    5352:	d02d      	beq.n	53b0 <__register_exitproc+0x80>
    5354:	686c      	ldr	r4, [r5, #4]
    5356:	2c1f      	cmp	r4, #31
    5358:	dc2d      	bgt.n	53b6 <__register_exitproc+0x86>
    535a:	2e00      	cmp	r6, #0
    535c:	d10e      	bne.n	537c <__register_exitproc+0x4c>
    535e:	1c63      	adds	r3, r4, #1
    5360:	606b      	str	r3, [r5, #4]
    5362:	464b      	mov	r3, r9
    5364:	3402      	adds	r4, #2
    5366:	00a4      	lsls	r4, r4, #2
    5368:	6818      	ldr	r0, [r3, #0]
    536a:	5167      	str	r7, [r4, r5]
    536c:	f7ff ff40 	bl	51f0 <__retarget_lock_release_recursive>
    5370:	2000      	movs	r0, #0
    5372:	bce0      	pop	{r5, r6, r7}
    5374:	46ba      	mov	sl, r7
    5376:	46b1      	mov	r9, r6
    5378:	46a8      	mov	r8, r5
    537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    537c:	2288      	movs	r2, #136	; 0x88
    537e:	4651      	mov	r1, sl
    5380:	0028      	movs	r0, r5
    5382:	00a3      	lsls	r3, r4, #2
    5384:	18eb      	adds	r3, r5, r3
    5386:	5099      	str	r1, [r3, r2]
    5388:	3a87      	subs	r2, #135	; 0x87
    538a:	40a2      	lsls	r2, r4
    538c:	3089      	adds	r0, #137	; 0x89
    538e:	30ff      	adds	r0, #255	; 0xff
    5390:	6801      	ldr	r1, [r0, #0]
    5392:	4311      	orrs	r1, r2
    5394:	6001      	str	r1, [r0, #0]
    5396:	2184      	movs	r1, #132	; 0x84
    5398:	4640      	mov	r0, r8
    539a:	0049      	lsls	r1, r1, #1
    539c:	5058      	str	r0, [r3, r1]
    539e:	2e02      	cmp	r6, #2
    53a0:	d1dd      	bne.n	535e <__register_exitproc+0x2e>
    53a2:	0029      	movs	r1, r5
    53a4:	318d      	adds	r1, #141	; 0x8d
    53a6:	31ff      	adds	r1, #255	; 0xff
    53a8:	680b      	ldr	r3, [r1, #0]
    53aa:	4313      	orrs	r3, r2
    53ac:	600b      	str	r3, [r1, #0]
    53ae:	e7d6      	b.n	535e <__register_exitproc+0x2e>
    53b0:	4d06      	ldr	r5, [pc, #24]	; (53cc <__register_exitproc+0x9c>)
    53b2:	601d      	str	r5, [r3, #0]
    53b4:	e7ce      	b.n	5354 <__register_exitproc+0x24>
    53b6:	464b      	mov	r3, r9
    53b8:	6818      	ldr	r0, [r3, #0]
    53ba:	f7ff ff19 	bl	51f0 <__retarget_lock_release_recursive>
    53be:	2001      	movs	r0, #1
    53c0:	4240      	negs	r0, r0
    53c2:	e7d6      	b.n	5372 <__register_exitproc+0x42>
    53c4:	2000009c 	.word	0x2000009c
    53c8:	200006c8 	.word	0x200006c8
    53cc:	200006cc 	.word	0x200006cc
    53d0:	41564e49 	.word	0x41564e49
    53d4:	0044494c 	.word	0x0044494c
    53d8:	20776152 	.word	0x20776152
    53dc:	69442058 	.word	0x69442058
    53e0:	74636572 	.word	0x74636572
    53e4:	206e6f69 	.word	0x206e6f69
    53e8:	65636341 	.word	0x65636341
    53ec:	6172656c 	.word	0x6172656c
    53f0:	6e6f6974 	.word	0x6e6f6974
    53f4:	00000000 	.word	0x00000000
    53f8:	20776152 	.word	0x20776152
    53fc:	69442059 	.word	0x69442059
    5400:	74636572 	.word	0x74636572
    5404:	206e6f69 	.word	0x206e6f69
    5408:	65636341 	.word	0x65636341
    540c:	6172656c 	.word	0x6172656c
    5410:	6e6f6974 	.word	0x6e6f6974
    5414:	00000000 	.word	0x00000000
    5418:	20776152 	.word	0x20776152
    541c:	6944205a 	.word	0x6944205a
    5420:	74636572 	.word	0x74636572
    5424:	206e6f69 	.word	0x206e6f69
    5428:	65636341 	.word	0x65636341
    542c:	6172656c 	.word	0x6172656c
    5430:	6e6f6974 	.word	0x6e6f6974
    5434:	00000000 	.word	0x00000000
    5438:	20776152 	.word	0x20776152
    543c:	78412058 	.word	0x78412058
    5440:	41207369 	.word	0x41207369
    5444:	6c75676e 	.word	0x6c75676e
    5448:	56207261 	.word	0x56207261
    544c:	636f6c65 	.word	0x636f6c65
    5450:	00797469 	.word	0x00797469
    5454:	20776152 	.word	0x20776152
    5458:	78412059 	.word	0x78412059
    545c:	41207369 	.word	0x41207369
    5460:	6c75676e 	.word	0x6c75676e
    5464:	56207261 	.word	0x56207261
    5468:	636f6c65 	.word	0x636f6c65
    546c:	00797469 	.word	0x00797469
    5470:	20776152 	.word	0x20776152
    5474:	7841205a 	.word	0x7841205a
    5478:	41207369 	.word	0x41207369
    547c:	6c75676e 	.word	0x6c75676e
    5480:	56207261 	.word	0x56207261
    5484:	636f6c65 	.word	0x636f6c65
    5488:	00797469 	.word	0x00797469
    548c:	696c6143 	.word	0x696c6143
    5490:	74617262 	.word	0x74617262
    5494:	58206465 	.word	0x58206465
    5498:	72694420 	.word	0x72694420
    549c:	69746365 	.word	0x69746365
    54a0:	41206e6f 	.word	0x41206e6f
    54a4:	6c656363 	.word	0x6c656363
    54a8:	74617265 	.word	0x74617265
    54ac:	006e6f69 	.word	0x006e6f69
    54b0:	696c6143 	.word	0x696c6143
    54b4:	74617262 	.word	0x74617262
    54b8:	59206465 	.word	0x59206465
    54bc:	72694420 	.word	0x72694420
    54c0:	69746365 	.word	0x69746365
    54c4:	41206e6f 	.word	0x41206e6f
    54c8:	6c656363 	.word	0x6c656363
    54cc:	74617265 	.word	0x74617265
    54d0:	006e6f69 	.word	0x006e6f69
    54d4:	696c6143 	.word	0x696c6143
    54d8:	74617262 	.word	0x74617262
    54dc:	5a206465 	.word	0x5a206465
    54e0:	72694420 	.word	0x72694420
    54e4:	69746365 	.word	0x69746365
    54e8:	41206e6f 	.word	0x41206e6f
    54ec:	6c656363 	.word	0x6c656363
    54f0:	74617265 	.word	0x74617265
    54f4:	006e6f69 	.word	0x006e6f69
    54f8:	696c6143 	.word	0x696c6143
    54fc:	74617262 	.word	0x74617262
    5500:	58206465 	.word	0x58206465
    5504:	69784120 	.word	0x69784120
    5508:	6e412073 	.word	0x6e412073
    550c:	616c7567 	.word	0x616c7567
    5510:	65562072 	.word	0x65562072
    5514:	69636f6c 	.word	0x69636f6c
    5518:	00007974 	.word	0x00007974
    551c:	696c6143 	.word	0x696c6143
    5520:	74617262 	.word	0x74617262
    5524:	59206465 	.word	0x59206465
    5528:	69784120 	.word	0x69784120
    552c:	6e412073 	.word	0x6e412073
    5530:	616c7567 	.word	0x616c7567
    5534:	65562072 	.word	0x65562072
    5538:	69636f6c 	.word	0x69636f6c
    553c:	00007974 	.word	0x00007974
    5540:	696c6143 	.word	0x696c6143
    5544:	74617262 	.word	0x74617262
    5548:	5a206465 	.word	0x5a206465
    554c:	69784120 	.word	0x69784120
    5550:	6e412073 	.word	0x6e412073
    5554:	616c7567 	.word	0x616c7567
    5558:	65562072 	.word	0x65562072
    555c:	69636f6c 	.word	0x69636f6c
    5560:	00007974 	.word	0x00007974
    5564:	52504545 	.word	0x52504545
    5568:	4c204d4f 	.word	0x4c204d4f
    556c:	756f7961 	.word	0x756f7961
    5570:	61482074 	.word	0x61482074
    5574:	00006873 	.word	0x00006873
    5578:	65776f50 	.word	0x65776f50
    557c:	79432072 	.word	0x79432072
    5580:	73656c63 	.word	0x73656c63
    5584:	00000000 	.word	0x00000000
    5588:	61736944 	.word	0x61736944
    558c:	20656c62 	.word	0x20656c62
    5590:	7a7a7542 	.word	0x7a7a7542
    5594:	00007265 	.word	0x00007265
    5598:	61736944 	.word	0x61736944
    559c:	20656c62 	.word	0x20656c62
    55a0:	0044454c 	.word	0x0044454c
    55a4:	61656c43 	.word	0x61656c43
    55a8:	6853206e 	.word	0x6853206e
    55ac:	6f647475 	.word	0x6f647475
    55b0:	00006e77 	.word	0x00006e77
    55b4:	40000000 	.word	0x40000000
    55b8:	00000001 	.word	0x00000001
    55bc:	00000be2 	.word	0x00000be2
    55c0:	00000bee 	.word	0x00000bee
    55c4:	00000bfc 	.word	0x00000bfc
    55c8:	00000c0a 	.word	0x00000c0a
    55cc:	00000c18 	.word	0x00000c18
    55d0:	00000c66 	.word	0x00000c66
    55d4:	00000c6e 	.word	0x00000c6e
    55d8:	00000c78 	.word	0x00000c78
    55dc:	00000c82 	.word	0x00000c82
    55e0:	00000c8c 	.word	0x00000c8c
    55e4:	00000cca 	.word	0x00000cca
    55e8:	00000cd6 	.word	0x00000cd6
    55ec:	00000ce4 	.word	0x00000ce4
    55f0:	00000cf2 	.word	0x00000cf2
    55f4:	00000d00 	.word	0x00000d00
    55f8:	00000d4e 	.word	0x00000d4e
    55fc:	00000d56 	.word	0x00000d56
    5600:	00000d60 	.word	0x00000d60
    5604:	00000d6a 	.word	0x00000d6a
    5608:	00000d74 	.word	0x00000d74
    560c:	00000dda 	.word	0x00000dda
    5610:	00000db2 	.word	0x00000db2
    5614:	00000dbc 	.word	0x00000dbc
    5618:	00000dc6 	.word	0x00000dc6
    561c:	00000dd0 	.word	0x00000dd0

00005620 <uart1_descriptor>:
    5620:	02010302 00000002                       ........

00005628 <uart2_descriptor>:
    5628:	04030504 00000002                       ........

00005630 <uart3_descriptor>:
    5630:	0a090706 00000002                       ........

00005638 <uart4_descriptor>:
    5638:	0c0b0908 00000002 80000000 00000001     ................

00005648 <dma_spi_desc>:
    5648:	08070100                                 .....

0000564d <zero>:
    564d:	6c000000 9000001d 7000001d 7400001d     ...l.......p...t
    565d:	7800001d 7c00001d 8000001d 8600001d     ...x...|........
    566d:	cc00001d e0000023 a6000023 e0000024     ....#...#...$...
    567d:	a6000023 ec000024 f8000023 a6000023     #...$...#...#...
    568d:	48000024 5c000024 a6000024 86000024     $..H$..\$...$...
    569d:	30000024 34333231 38373635 43424139     $..0123456789ABC
    56ad:	48474644 4d4c4b4a 5251504e 57565453     DFGHJKLMNPQRSTVW
    56bd:	005a5958 46000000 656c6e69 6c422079     XYZ....Finley Bl
    56cd:	656e6961 47000000 0032434e               aine...GNC2....

000056dc <language_string>:
    56dc:	04090304                                ....

000056e0 <device_descriptor>:
    56e0:	02000112 400102ef 000e1209 02010200     .......@........
    56f0:	                                         ..

000056f2 <usb_num_endpoints>:
    56f2:	2e2e0003 2d2d2d2e 002e2e2e 30860000     .....---.......0
    5702:	31180000 31260000 31340000 31420000     ...1..&1..41..B1
    5712:	31500000 308c0000 00000000 00000000     ..P1...0........
    5722:	00000000 32f50000 00060000               .......2......

00005730 <time_ticks_us_mult>:
    5730:	00000030                                0...

00005734 <time_ticks_ms_mult>:
    5734:	0000bb80                                ....

00005738 <time_ticks_s_mult>:
    5738:	02dc6c00                                .l..

0000573c <CRC8_LUT_L>:
    573c:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

0000574c <CRC8_LUT_H>:
    574c:	90e07000 5727b7c7 1969f989 deae3e4e     .p....'W..i.N>..
    575c:	000047c6 000046f6 0000470e 0000472c     .G...F...G..,G..
    576c:	0000470e 00004770 0000470e 0000472c     .G..pG...G..,G..
    577c:	000046f6 000046f6 00004770 0000472c     .F...F..pG..,G..
    578c:	00004716 00004716 00004716 0000477a     .G...G...G..zG..
    579c:	000046f6 000046f6 0000470e 00004804     .F...F...G...H..
    57ac:	0000470e 00004770 0000470e 00004804     .G..pG...G...H..
    57bc:	000046f6 000046f6 00004770 00004804     .F...F..pG...H..
    57cc:	00004716 00004716 00004716              .G...G...G..

000057d8 <_init>:
    57d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57da:	46c0      	nop			; (mov r8, r8)
    57dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57de:	bc08      	pop	{r3}
    57e0:	469e      	mov	lr, r3
    57e2:	4770      	bx	lr

000057e4 <__init_array_start>:
    57e4:	000052e1 	.word	0x000052e1

000057e8 <__frame_dummy_init_array_entry>:
    57e8:	0000012d                                -...

000057ec <_fini>:
    57ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57ee:	46c0      	nop			; (mov r8, r8)
    57f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57f2:	bc08      	pop	{r3}
    57f4:	469e      	mov	lr, r3
    57f6:	4770      	bx	lr

000057f8 <__do_global_dtors_aux_fini_array_entry>:
    57f8:	0101 0000                                   ....
