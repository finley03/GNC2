
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000547c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000058  20000000  0000547c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007bc  20000060  000054e0  00020060  2**4
                  ALLOC
  3 .stack        00002004  2000081c  00005c9c  00020060  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b56f  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000626f  00000000  00000000  0003b63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 00006dfd  00000000  00000000  000418aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000d90  00000000  00000000  000486a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 00000fb9  00000000  00000000  00049438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00009e23  00000000  00000000  0004a3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00019299  00000000  00000000  00054214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b5319  00000000  00000000  0006d4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001d24  00000000  00000000  001227c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  001244ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
    eeprom_read_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}

bool save_global(Global_Variable_IDs id) {
       0:	20 28 00 20 55 01 00 00 51 01 00 00 51 01 00 00      (. U...Q...Q...
	...
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_type_from_id(id, &type)) return false;
    if (!get_address_from_id(type, id, &address, &size)) return false;
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...
    EEPROM_Request request;
    eeprom_write_request(&request, eeprom_address, address, size);
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
    eeprom_wait_until_done(&request);
    return true;
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      5c:	35 3e 00 00 51 01 00 00 51 01 00 00 51 01 00 00     5>..Q...Q...Q...
	// send adc read command
	spi_command(desc->sercom, BARO_ADC_READ);
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
	uint8_t data1 = spi_command(desc->sercom, 0);
	uint8_t data2 = spi_command(desc->sercom, 0);
      6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      8c:	85 2d 00 00 51 01 00 00 51 01 00 00 51 01 00 00     .-..Q...Q...Q...
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	0000547c 	.word	0x0000547c
      d0:	0000547c 	.word	0x0000547c
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	0000547c 	.word	0x0000547c
      f8:	0000547c 	.word	0x0000547c
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	20000060 	.word	0x20000060
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	0000547c 	.word	0x0000547c

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	20000064 	.word	0x20000064
     14c:	0000547c 	.word	0x0000547c

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	0000547c 	.word	0x0000547c
     1a4:	20000000 	.word	0x20000000
     1a8:	20000058 	.word	0x20000058
     1ac:	20000060 	.word	0x20000060
     1b0:	2000081c 	.word	0x2000081c
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	00005009 	.word	0x00005009
     1c4:	00000000 	.word	0x00000000
     1c8:	00002d11 	.word	0x00002d11

000001cc <getGlobalHash>:

extern void SOS();
extern Process bz;
extern int bz_count;

bool getGlobalHash() {
     1cc:	b510      	push	{r4, lr}
    uint32_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     1ce:	4c06      	ldr	r4, [pc, #24]	; (1e8 <getGlobalHash+0x1c>)
     1d0:	0020      	movs	r0, r4
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <getGlobalHash+0x20>)
     1d4:	4798      	blx	r3
    *payload = __GLOBAL_HASH;
     1d6:	4b06      	ldr	r3, [pc, #24]	; (1f0 <getGlobalHash+0x24>)
     1d8:	6003      	str	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetGlobalHashResponse, GNClink_PacketFlags_None, 4)) return false;
     1da:	2304      	movs	r3, #4
     1dc:	2200      	movs	r2, #0
     1de:	2102      	movs	r1, #2
     1e0:	0020      	movs	r0, r4
     1e2:	4c04      	ldr	r4, [pc, #16]	; (1f4 <getGlobalHash+0x28>)
     1e4:	47a0      	blx	r4
    return true;
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	2000007c 	.word	0x2000007c
     1ec:	00003f3d 	.word	0x00003f3d
     1f0:	b7177d51 	.word	0xb7177d51
     1f4:	00003f41 	.word	0x00003f41

000001f8 <getValueList>:

bool getValueList() {
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46c6      	mov	lr, r8
     1fc:	b500      	push	{lr}
     1fe:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     200:	4d1a      	ldr	r5, [pc, #104]	; (26c <getValueList+0x74>)
     202:	0028      	movs	r0, r5
     204:	3040      	adds	r0, #64	; 0x40
     206:	4c1a      	ldr	r4, [pc, #104]	; (270 <getValueList+0x78>)
     208:	47a0      	blx	r4
     20a:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     20c:	0028      	movs	r0, r5
     20e:	47a0      	blx	r4
     210:	4680      	mov	r8, r0
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     212:	783e      	ldrb	r6, [r7, #0]
     214:	b2f6      	uxtb	r6, r6
    if (IDCount > (GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1) / 2) {
     216:	2e1d      	cmp	r6, #29
     218:	d825      	bhi.n	266 <getValueList+0x6e>
        // too many IDs, do something...
        return false;
    }

    int payloadIndex = 0;
    for (int index = 0; index < IDCount; ++index) {
     21a:	2400      	movs	r4, #0
    int payloadIndex = 0;
     21c:	2500      	movs	r5, #0
     21e:	e007      	b.n	230 <getValueList+0x38>
            // no more space, do something...
            return false;
        }

        // copy value to payload
        memcpy(&txpayload[payloadIndex], address, size);
     220:	4643      	mov	r3, r8
     222:	1958      	adds	r0, r3, r5
     224:	9900      	ldr	r1, [sp, #0]
     226:	4b13      	ldr	r3, [pc, #76]	; (274 <getValueList+0x7c>)
     228:	4798      	blx	r3
        payloadIndex += size;
     22a:	9b01      	ldr	r3, [sp, #4]
     22c:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     22e:	3401      	adds	r4, #1
     230:	42b4      	cmp	r4, r6
     232:	da11      	bge.n	258 <getValueList+0x60>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     234:	0063      	lsls	r3, r4, #1
     236:	18fb      	adds	r3, r7, r3
     238:	7858      	ldrb	r0, [r3, #1]
        if (!get_global_address_size(ID, &address, &size)) {
     23a:	aa01      	add	r2, sp, #4
     23c:	4669      	mov	r1, sp
     23e:	4b0e      	ldr	r3, [pc, #56]	; (278 <getValueList+0x80>)
     240:	4798      	blx	r3
     242:	2800      	cmp	r0, #0
     244:	d003      	beq.n	24e <getValueList+0x56>
        if (payloadIndex + size > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     246:	9a01      	ldr	r2, [sp, #4]
     248:	1953      	adds	r3, r2, r5
     24a:	2b3b      	cmp	r3, #59	; 0x3b
     24c:	d9e8      	bls.n	220 <getValueList+0x28>
            return false;
     24e:	2000      	movs	r0, #0
    }

    // construct packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueListResponse, GNClink_PacketFlags_None, payloadIndex)) return false;
    return true;
}
     250:	b002      	add	sp, #8
     252:	bc80      	pop	{r7}
     254:	46b8      	mov	r8, r7
     256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueListResponse, GNClink_PacketFlags_None, payloadIndex)) return false;
     258:	4804      	ldr	r0, [pc, #16]	; (26c <getValueList+0x74>)
     25a:	002b      	movs	r3, r5
     25c:	2200      	movs	r2, #0
     25e:	2104      	movs	r1, #4
     260:	4c06      	ldr	r4, [pc, #24]	; (27c <getValueList+0x84>)
     262:	47a0      	blx	r4
     264:	e7f4      	b.n	250 <getValueList+0x58>
        return false;
     266:	2000      	movs	r0, #0
     268:	e7f2      	b.n	250 <getValueList+0x58>
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	2000007c 	.word	0x2000007c
     270:	00003f3d 	.word	0x00003f3d
     274:	00005059 	.word	0x00005059
     278:	000004f5 	.word	0x000004f5
     27c:	00003f41 	.word	0x00003f41

00000280 <evaluatePacket>:

bool evaluatePacket() {
     280:	b510      	push	{r4, lr}
    // check packet
    if (!GNClink_Check_Packet(rxpacket)) {
     282:	480b      	ldr	r0, [pc, #44]	; (2b0 <evaluatePacket+0x30>)
     284:	4b0b      	ldr	r3, [pc, #44]	; (2b4 <evaluatePacket+0x34>)
     286:	4798      	blx	r3
     288:	2800      	cmp	r0, #0
     28a:	d008      	beq.n	29e <evaluatePacket+0x1e>
    // join_process(&bz);
    // reset_process(&bz);
    // bz_count = (int)(*GNClink_Get_Packet_Payload_Pointer(rxpacket));
    // dispatch_process(&bz);

    switch (GNClink_Get_Packet_Type(rxpacket)) {
     28c:	4808      	ldr	r0, [pc, #32]	; (2b0 <evaluatePacket+0x30>)
     28e:	4b0a      	ldr	r3, [pc, #40]	; (2b8 <evaluatePacket+0x38>)
     290:	4798      	blx	r3
     292:	2801      	cmp	r0, #1
     294:	d006      	beq.n	2a4 <evaluatePacket+0x24>
     296:	2803      	cmp	r0, #3
     298:	d007      	beq.n	2aa <evaluatePacket+0x2a>
     29a:	2000      	movs	r0, #0
        default:
        return false;
    }

    return false;
}
     29c:	bd10      	pop	{r4, pc}
        SOS();
     29e:	4b07      	ldr	r3, [pc, #28]	; (2bc <evaluatePacket+0x3c>)
     2a0:	4798      	blx	r3
     2a2:	e7f3      	b.n	28c <evaluatePacket+0xc>
        return getGlobalHash();
     2a4:	4b06      	ldr	r3, [pc, #24]	; (2c0 <evaluatePacket+0x40>)
     2a6:	4798      	blx	r3
     2a8:	e7f8      	b.n	29c <evaluatePacket+0x1c>
        return getValueList();
     2aa:	4b06      	ldr	r3, [pc, #24]	; (2c4 <evaluatePacket+0x44>)
     2ac:	4798      	blx	r3
     2ae:	e7f5      	b.n	29c <evaluatePacket+0x1c>
     2b0:	200000bc 	.word	0x200000bc
     2b4:	00003f6d 	.word	0x00003f6d
     2b8:	00003f9d 	.word	0x00003f9d
     2bc:	00002ced 	.word	0x00002ced
     2c0:	000001cd 	.word	0x000001cd
     2c4:	000001f9 	.word	0x000001f9

000002c8 <get_packet>:

// returns false if resend is being requested
bool get_packet() {
     2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ca:	b083      	sub	sp, #12
    bool receivedFrames[GNCLINK_MAX_FRAMES_PER_PACKET];
    for (int i = 0; i < GNCLINK_MAX_FRAMES_PER_PACKET; ++i) receivedFrames[i] = false;
     2cc:	2300      	movs	r3, #0
     2ce:	e003      	b.n	2d8 <get_packet+0x10>
     2d0:	aa01      	add	r2, sp, #4
     2d2:	2100      	movs	r1, #0
     2d4:	54d1      	strb	r1, [r2, r3]
     2d6:	3301      	adds	r3, #1
     2d8:	2b03      	cmp	r3, #3
     2da:	ddf9      	ble.n	2d0 <get_packet+0x8>
     2dc:	e020      	b.n	320 <get_packet+0x58>
            continue;
        }

        // check if frame is requesting resend
        if (GNClink_Frame_RequestResend(rxframe)) {
            return false;
     2de:	2500      	movs	r5, #0
            // packet fully received
            else break;
        }
    }
    return true;
}
     2e0:	0028      	movs	r0, r5
     2e2:	b003      	add	sp, #12
     2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     2e6:	3401      	adds	r4, #1
     2e8:	4823      	ldr	r0, [pc, #140]	; (378 <get_packet+0xb0>)
     2ea:	4b24      	ldr	r3, [pc, #144]	; (37c <get_packet+0xb4>)
     2ec:	4798      	blx	r3
     2ee:	42a0      	cmp	r0, r4
     2f0:	dd07      	ble.n	302 <get_packet+0x3a>
                if (!receivedFrames[i]) payload->resendIndexes[resendCount++] = (uint8_t)i;
     2f2:	ab01      	add	r3, sp, #4
     2f4:	5d1b      	ldrb	r3, [r3, r4]
     2f6:	2b00      	cmp	r3, #0
     2f8:	d1f5      	bne.n	2e6 <get_packet+0x1e>
     2fa:	19bb      	adds	r3, r7, r6
     2fc:	705c      	strb	r4, [r3, #1]
     2fe:	3601      	adds	r6, #1
     300:	e7f1      	b.n	2e6 <get_packet+0x1e>
            if (resendCount) {
     302:	2e00      	cmp	r6, #0
     304:	d0ec      	beq.n	2e0 <get_packet+0x18>
                payload->resendCount = (uint8_t)resendCount;
     306:	703e      	strb	r6, [r7, #0]
                GNClink_Construct_RequestResendFrame(txframe);
     308:	4c1d      	ldr	r4, [pc, #116]	; (380 <get_packet+0xb8>)
     30a:	0020      	movs	r0, r4
     30c:	4b1d      	ldr	r3, [pc, #116]	; (384 <get_packet+0xbc>)
     30e:	4798      	blx	r3
                serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     310:	2214      	movs	r2, #20
     312:	0021      	movs	r1, r4
     314:	2000      	movs	r0, #0
     316:	4b1c      	ldr	r3, [pc, #112]	; (388 <get_packet+0xc0>)
     318:	4798      	blx	r3
                serial_write_wait_until_complete(PORT0);
     31a:	2000      	movs	r0, #0
     31c:	4b1b      	ldr	r3, [pc, #108]	; (38c <get_packet+0xc4>)
     31e:	4798      	blx	r3
        serial_read_start(PORT0, rxframe, GNCLINK_FRAME_TOTAL_LENGTH);
     320:	4c15      	ldr	r4, [pc, #84]	; (378 <get_packet+0xb0>)
     322:	2214      	movs	r2, #20
     324:	0021      	movs	r1, r4
     326:	2000      	movs	r0, #0
     328:	4b19      	ldr	r3, [pc, #100]	; (390 <get_packet+0xc8>)
     32a:	4798      	blx	r3
        serial_read_wait_until_complete(PORT0);
     32c:	2000      	movs	r0, #0
     32e:	4b19      	ldr	r3, [pc, #100]	; (394 <get_packet+0xcc>)
     330:	4798      	blx	r3
        if (!GNClink_Check_Frame(rxframe)) {
     332:	0020      	movs	r0, r4
     334:	4b18      	ldr	r3, [pc, #96]	; (398 <get_packet+0xd0>)
     336:	4798      	blx	r3
     338:	1e05      	subs	r5, r0, #0
     33a:	d0f1      	beq.n	320 <get_packet+0x58>
        if (GNClink_Frame_RequestResend(rxframe)) {
     33c:	480e      	ldr	r0, [pc, #56]	; (378 <get_packet+0xb0>)
     33e:	4b17      	ldr	r3, [pc, #92]	; (39c <get_packet+0xd4>)
     340:	4798      	blx	r3
     342:	2800      	cmp	r0, #0
     344:	d1cb      	bne.n	2de <get_packet+0x16>
        receivedFrames[GNClink_Get_Frame_Index(rxframe)] = true;
     346:	4c0c      	ldr	r4, [pc, #48]	; (378 <get_packet+0xb0>)
     348:	0020      	movs	r0, r4
     34a:	4b0c      	ldr	r3, [pc, #48]	; (37c <get_packet+0xb4>)
     34c:	4798      	blx	r3
     34e:	2301      	movs	r3, #1
     350:	aa01      	add	r2, sp, #4
     352:	5413      	strb	r3, [r2, r0]
        bool moreFrames = true;
     354:	466a      	mov	r2, sp
     356:	70d3      	strb	r3, [r2, #3]
        GNClink_Reconstruct_Packet_From_Frames(rxframe, rxpacket, &moreFrames);
     358:	4911      	ldr	r1, [pc, #68]	; (3a0 <get_packet+0xd8>)
     35a:	3203      	adds	r2, #3
     35c:	0020      	movs	r0, r4
     35e:	4b11      	ldr	r3, [pc, #68]	; (3a4 <get_packet+0xdc>)
     360:	4798      	blx	r3
        if (!moreFrames) {
     362:	466b      	mov	r3, sp
     364:	78db      	ldrb	r3, [r3, #3]
     366:	2b00      	cmp	r3, #0
     368:	d1da      	bne.n	320 <get_packet+0x58>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(txframe);
     36a:	4805      	ldr	r0, [pc, #20]	; (380 <get_packet+0xb8>)
     36c:	4b0e      	ldr	r3, [pc, #56]	; (3a8 <get_packet+0xe0>)
     36e:	4798      	blx	r3
     370:	0007      	movs	r7, r0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     372:	2400      	movs	r4, #0
            int resendCount = 0;
     374:	2600      	movs	r6, #0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     376:	e7b7      	b.n	2e8 <get_packet+0x20>
     378:	200000fc 	.word	0x200000fc
     37c:	0000405f 	.word	0x0000405f
     380:	20000110 	.word	0x20000110
     384:	00004065 	.word	0x00004065
     388:	00000abd 	.word	0x00000abd
     38c:	00000b45 	.word	0x00000b45
     390:	00000ba5 	.word	0x00000ba5
     394:	00000c2d 	.word	0x00000c2d
     398:	00004029 	.word	0x00004029
     39c:	00004055 	.word	0x00004055
     3a0:	200000bc 	.word	0x200000bc
     3a4:	00004085 	.word	0x00004085
     3a8:	00003fa1 	.word	0x00003fa1

000003ac <send_packet>:

bool send_packet(bool resendFrames) {
     3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ae:	b085      	sub	sp, #20
     3b0:	0006      	movs	r6, r0
    int count = 0;
    bool moreFrames = true;
     3b2:	230f      	movs	r3, #15
     3b4:	446b      	add	r3, sp
     3b6:	2201      	movs	r2, #1
     3b8:	701a      	strb	r2, [r3, #0]
    int count = 0;
     3ba:	2500      	movs	r5, #0
    while (moreFrames) {
     3bc:	e014      	b.n	3e8 <send_packet+0x3c>
        // check if frames are being resent
        if (resendFrames) {
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
            // break if all have been sent
            if (count == payload->resendCount) break;
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     3be:	2202      	movs	r2, #2
     3c0:	e023      	b.n	40a <send_packet+0x5e>
        int frameIndex = count;
     3c2:	002b      	movs	r3, r5
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     3c4:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
        }

        // send frames
        GNClink_Get_Frame(txpacket, txframe, frameFlags, frameIndex, &moreFrames);
     3c6:	4c14      	ldr	r4, [pc, #80]	; (418 <send_packet+0x6c>)
     3c8:	4814      	ldr	r0, [pc, #80]	; (41c <send_packet+0x70>)
     3ca:	210f      	movs	r1, #15
     3cc:	4469      	add	r1, sp
     3ce:	9100      	str	r1, [sp, #0]
     3d0:	0021      	movs	r1, r4
     3d2:	4f13      	ldr	r7, [pc, #76]	; (420 <send_packet+0x74>)
     3d4:	47b8      	blx	r7

        // send frame
        serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     3d6:	2214      	movs	r2, #20
     3d8:	0021      	movs	r1, r4
     3da:	2000      	movs	r0, #0
     3dc:	4b11      	ldr	r3, [pc, #68]	; (424 <send_packet+0x78>)
     3de:	4798      	blx	r3
        serial_write_wait_until_complete(PORT0);
     3e0:	2000      	movs	r0, #0
     3e2:	4b11      	ldr	r3, [pc, #68]	; (428 <send_packet+0x7c>)
     3e4:	4798      	blx	r3

        ++count;
     3e6:	3501      	adds	r5, #1
    while (moreFrames) {
     3e8:	230f      	movs	r3, #15
     3ea:	446b      	add	r3, sp
     3ec:	781b      	ldrb	r3, [r3, #0]
     3ee:	2b00      	cmp	r3, #0
     3f0:	d00e      	beq.n	410 <send_packet+0x64>
        if (resendFrames) {
     3f2:	2e00      	cmp	r6, #0
     3f4:	d0e5      	beq.n	3c2 <send_packet+0x16>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
     3f6:	480d      	ldr	r0, [pc, #52]	; (42c <send_packet+0x80>)
     3f8:	4b0d      	ldr	r3, [pc, #52]	; (430 <send_packet+0x84>)
     3fa:	4798      	blx	r3
            if (count == payload->resendCount) break;
     3fc:	7803      	ldrb	r3, [r0, #0]
     3fe:	42ab      	cmp	r3, r5
     400:	d006      	beq.n	410 <send_packet+0x64>
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     402:	3b01      	subs	r3, #1
     404:	42ab      	cmp	r3, r5
     406:	d0da      	beq.n	3be <send_packet+0x12>
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     408:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
     40a:	1940      	adds	r0, r0, r5
     40c:	7843      	ldrb	r3, [r0, #1]
     40e:	e7da      	b.n	3c6 <send_packet+0x1a>
    }
    return true;
}
     410:	2001      	movs	r0, #1
     412:	b005      	add	sp, #20
     414:	bdf0      	pop	{r4, r5, r6, r7, pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	20000110 	.word	0x20000110
     41c:	2000007c 	.word	0x2000007c
     420:	00003fa5 	.word	0x00003fa5
     424:	00000abd 	.word	0x00000abd
     428:	00000b45 	.word	0x00000b45
     42c:	200000fc 	.word	0x200000fc
     430:	00003fa1 	.word	0x00003fa1

00000434 <comms_loop>:

bool comms_loop() {
     434:	b510      	push	{r4, lr}
    bool run = true;
    while (run) {
     436:	e002      	b.n	43e <comms_loop+0xa>
        // get packet, resend if required
        while (!get_packet()) {
            send_packet(true);
     438:	2001      	movs	r0, #1
     43a:	4b07      	ldr	r3, [pc, #28]	; (458 <comms_loop+0x24>)
     43c:	4798      	blx	r3
        while (!get_packet()) {
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <comms_loop+0x28>)
     440:	4798      	blx	r3
     442:	2800      	cmp	r0, #0
     444:	d0f8      	beq.n	438 <comms_loop+0x4>
        }

        if (evaluatePacket()) {
     446:	4b06      	ldr	r3, [pc, #24]	; (460 <comms_loop+0x2c>)
     448:	4798      	blx	r3
     44a:	2800      	cmp	r0, #0
     44c:	d0f7      	beq.n	43e <comms_loop+0xa>
            send_packet(false);
     44e:	2000      	movs	r0, #0
     450:	4b01      	ldr	r3, [pc, #4]	; (458 <comms_loop+0x24>)
     452:	4798      	blx	r3
     454:	e7f3      	b.n	43e <comms_loop+0xa>
     456:	46c0      	nop			; (mov r8, r8)
     458:	000003ad 	.word	0x000003ad
     45c:	000002c9 	.word	0x000002c9
     460:	00000281 	.word	0x00000281

00000464 <get_address_from_id>:
    switch (type) {
     464:	2805      	cmp	r0, #5
     466:	d011      	beq.n	48c <get_address_from_id+0x28>
     468:	280a      	cmp	r0, #10
     46a:	d01b      	beq.n	4a4 <get_address_from_id+0x40>
     46c:	2804      	cmp	r0, #4
     46e:	d001      	beq.n	474 <get_address_from_id+0x10>
}
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr
        if (id < __GLOBAL_U32_ID_START || id >= __GLOBAL_U32_ID_END) return false;
     474:	1e48      	subs	r0, r1, #1
     476:	b2c0      	uxtb	r0, r0
     478:	2801      	cmp	r0, #1
     47a:	d8f9      	bhi.n	470 <get_address_from_id+0xc>
        *size = 4;
     47c:	2004      	movs	r0, #4
     47e:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U32_ID_START;
     480:	3901      	subs	r1, #1
        *address = &(globals.__GLOBAL_U32_START_VARIABLE) + index;
     482:	4b0e      	ldr	r3, [pc, #56]	; (4bc <get_address_from_id+0x58>)
     484:	0089      	lsls	r1, r1, #2
     486:	185b      	adds	r3, r3, r1
     488:	6013      	str	r3, [r2, #0]
        break;
     48a:	e7f2      	b.n	472 <get_address_from_id+0xe>
        if (id < __GLOBAL_F32_ID_START || id >= __GLOBAL_F32_ID_END) return false;
     48c:	1ec8      	subs	r0, r1, #3
     48e:	b2c0      	uxtb	r0, r0
     490:	280b      	cmp	r0, #11
     492:	d8ed      	bhi.n	470 <get_address_from_id+0xc>
        *size = 4;
     494:	2004      	movs	r0, #4
     496:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_F32_ID_START;
     498:	3903      	subs	r1, #3
        *address = &(globals.__GLOBAL_F32_START_VARIABLE) + index;
     49a:	4b09      	ldr	r3, [pc, #36]	; (4c0 <get_address_from_id+0x5c>)
     49c:	0089      	lsls	r1, r1, #2
     49e:	185b      	adds	r3, r3, r1
     4a0:	6013      	str	r3, [r2, #0]
        break;
     4a2:	e7e6      	b.n	472 <get_address_from_id+0xe>
        if (id < __GLOBAL_BOOL_ID_START || id >= __GLOBAL_BOOL_ID_END) return false;
     4a4:	0008      	movs	r0, r1
     4a6:	380f      	subs	r0, #15
     4a8:	b2c0      	uxtb	r0, r0
     4aa:	2801      	cmp	r0, #1
     4ac:	d8e0      	bhi.n	470 <get_address_from_id+0xc>
        *size = 1;
     4ae:	2001      	movs	r0, #1
     4b0:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_BOOL_ID_START;
     4b2:	390f      	subs	r1, #15
        *address = &(globals.__GLOBAL_BOOL_START_VARIABLE) + index;
     4b4:	4b03      	ldr	r3, [pc, #12]	; (4c4 <get_address_from_id+0x60>)
     4b6:	185b      	adds	r3, r3, r1
     4b8:	6013      	str	r3, [r2, #0]
}
     4ba:	e7da      	b.n	472 <get_address_from_id+0xe>
     4bc:	20000128 	.word	0x20000128
     4c0:	20000130 	.word	0x20000130
     4c4:	20000160 	.word	0x20000160

000004c8 <get_type_from_id>:
    if (id - __GLOBAL_ID_START < 0) return false;
     4c8:	2800      	cmp	r0, #0
     4ca:	d011      	beq.n	4f0 <get_type_from_id+0x28>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     4cc:	2802      	cmp	r0, #2
     4ce:	d907      	bls.n	4e0 <get_type_from_id+0x18>
    if (id - __GLOBAL_F32_ID_END < 0) {*type = __F32; return true;}
     4d0:	280e      	cmp	r0, #14
     4d2:	d909      	bls.n	4e8 <get_type_from_id+0x20>
    if (id - __GLOBAL_BOOL_ID_END < 0) {*type = __BOOL; return true;}
     4d4:	2810      	cmp	r0, #16
     4d6:	d80c      	bhi.n	4f2 <get_type_from_id+0x2a>
     4d8:	230a      	movs	r3, #10
     4da:	700b      	strb	r3, [r1, #0]
     4dc:	2001      	movs	r0, #1
     4de:	e008      	b.n	4f2 <get_type_from_id+0x2a>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     4e0:	2304      	movs	r3, #4
     4e2:	700b      	strb	r3, [r1, #0]
     4e4:	2001      	movs	r0, #1
     4e6:	e004      	b.n	4f2 <get_type_from_id+0x2a>
    if (id - __GLOBAL_F32_ID_END < 0) {*type = __F32; return true;}
     4e8:	2305      	movs	r3, #5
     4ea:	700b      	strb	r3, [r1, #0]
     4ec:	2001      	movs	r0, #1
     4ee:	e000      	b.n	4f2 <get_type_from_id+0x2a>
    if (id - __GLOBAL_ID_START < 0) return false;
     4f0:	2000      	movs	r0, #0
}
     4f2:	4770      	bx	lr

000004f4 <get_global_address_size>:
bool get_global_address_size(Global_Variable_IDs id, void** address, int* size) {
     4f4:	b570      	push	{r4, r5, r6, lr}
     4f6:	b082      	sub	sp, #8
     4f8:	0004      	movs	r4, r0
     4fa:	000d      	movs	r5, r1
     4fc:	0016      	movs	r6, r2
    if (!get_type_from_id(id, &type)) return false;
     4fe:	466b      	mov	r3, sp
     500:	1dd9      	adds	r1, r3, #7
     502:	4b08      	ldr	r3, [pc, #32]	; (524 <get_global_address_size+0x30>)
     504:	4798      	blx	r3
     506:	2800      	cmp	r0, #0
     508:	d102      	bne.n	510 <get_global_address_size+0x1c>
}
     50a:	2000      	movs	r0, #0
     50c:	b002      	add	sp, #8
     50e:	bd70      	pop	{r4, r5, r6, pc}
    if (!get_address_from_id(type, id, address, size)) return false;
     510:	466b      	mov	r3, sp
     512:	79d8      	ldrb	r0, [r3, #7]
     514:	0033      	movs	r3, r6
     516:	002a      	movs	r2, r5
     518:	0021      	movs	r1, r4
     51a:	4c03      	ldr	r4, [pc, #12]	; (528 <get_global_address_size+0x34>)
     51c:	47a0      	blx	r4
     51e:	2800      	cmp	r0, #0
     520:	d1f4      	bne.n	50c <get_global_address_size+0x18>
     522:	e7f2      	b.n	50a <get_global_address_size+0x16>
     524:	000004c9 	.word	0x000004c9
     528:	00000465 	.word	0x00000465

0000052c <init_globals>:
}

bool init_globals() {
     52c:	b570      	push	{r4, r5, r6, lr}
     52e:	b08a      	sub	sp, #40	; 0x28
    // load header
    EEPROM_Request request;
    eeprom_read_request(&request, 0, &__eeprom_header, sizeof(__eeprom_header));
     530:	4c1b      	ldr	r4, [pc, #108]	; (5a0 <init_globals+0x74>)
     532:	0022      	movs	r2, r4
     534:	3240      	adds	r2, #64	; 0x40
     536:	2308      	movs	r3, #8
     538:	2100      	movs	r1, #0
     53a:	4668      	mov	r0, sp
     53c:	4d19      	ldr	r5, [pc, #100]	; (5a4 <init_globals+0x78>)
     53e:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     540:	4668      	mov	r0, sp
     542:	4b19      	ldr	r3, [pc, #100]	; (5a8 <init_globals+0x7c>)
     544:	4798      	blx	r3
    
    // check and modify header values
    if (__eeprom_header.GlobalHash != __GLOBAL_HASH) {
     546:	6c22      	ldr	r2, [r4, #64]	; 0x40
     548:	4b18      	ldr	r3, [pc, #96]	; (5ac <init_globals+0x80>)
     54a:	429a      	cmp	r2, r3
     54c:	d11c      	bne.n	588 <init_globals+0x5c>
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
        eeprom_wait_until_done(&request);
    }
    
    ++__eeprom_header.StartupCount;
     54e:	4c14      	ldr	r4, [pc, #80]	; (5a0 <init_globals+0x74>)
     550:	6c63      	ldr	r3, [r4, #68]	; 0x44
     552:	3301      	adds	r3, #1
     554:	6463      	str	r3, [r4, #68]	; 0x44
    eeprom_write_request(&request, 4, &(__eeprom_header.StartupCount), 4);
     556:	0022      	movs	r2, r4
     558:	3244      	adds	r2, #68	; 0x44
     55a:	2304      	movs	r3, #4
     55c:	2104      	movs	r1, #4
     55e:	4668      	mov	r0, sp
     560:	4d13      	ldr	r5, [pc, #76]	; (5b0 <init_globals+0x84>)
     562:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     564:	4668      	mov	r0, sp
     566:	4d10      	ldr	r5, [pc, #64]	; (5a8 <init_globals+0x7c>)
     568:	47a8      	blx	r5

    // load globals
    eeprom_read_request(&request, __EEPROM_GLOBAL_VARIABLES_START_ADDRESS, &globals, sizeof(globals));
     56a:	2340      	movs	r3, #64	; 0x40
     56c:	0022      	movs	r2, r4
     56e:	2120      	movs	r1, #32
     570:	4668      	mov	r0, sp
     572:	4e0c      	ldr	r6, [pc, #48]	; (5a4 <init_globals+0x78>)
     574:	47b0      	blx	r6
    eeprom_wait_until_done(&request);
     576:	4668      	mov	r0, sp
     578:	47a8      	blx	r5

    globals.GlobalHash = __eeprom_header.GlobalHash;
     57a:	6c23      	ldr	r3, [r4, #64]	; 0x40
     57c:	6023      	str	r3, [r4, #0]
    globals.StartupCount = __eeprom_header.StartupCount;
     57e:	6c63      	ldr	r3, [r4, #68]	; 0x44
     580:	6063      	str	r3, [r4, #4]

    return true;
     582:	2001      	movs	r0, #1
     584:	b00a      	add	sp, #40	; 0x28
     586:	bd70      	pop	{r4, r5, r6, pc}
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
     588:	4a05      	ldr	r2, [pc, #20]	; (5a0 <init_globals+0x74>)
     58a:	6413      	str	r3, [r2, #64]	; 0x40
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
     58c:	3240      	adds	r2, #64	; 0x40
     58e:	2304      	movs	r3, #4
     590:	2100      	movs	r1, #0
     592:	4668      	mov	r0, sp
     594:	4c06      	ldr	r4, [pc, #24]	; (5b0 <init_globals+0x84>)
     596:	47a0      	blx	r4
        eeprom_wait_until_done(&request);
     598:	4668      	mov	r0, sp
     59a:	4b03      	ldr	r3, [pc, #12]	; (5a8 <init_globals+0x7c>)
     59c:	4798      	blx	r3
     59e:	e7d6      	b.n	54e <init_globals+0x22>
     5a0:	20000128 	.word	0x20000128
     5a4:	0000061d 	.word	0x0000061d
     5a8:	00003851 	.word	0x00003851
     5ac:	b7177d51 	.word	0xb7177d51
     5b0:	00000649 	.word	0x00000649

000005b4 <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     5b4:	b510      	push	{r4, lr}
     5b6:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     5b8:	2480      	movs	r4, #128	; 0x80
     5ba:	05e4      	lsls	r4, r4, #23
     5bc:	0021      	movs	r1, r4
     5be:	2001      	movs	r0, #1
     5c0:	4b0b      	ldr	r3, [pc, #44]	; (5f0 <init_eeprom+0x3c>)
     5c2:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     5c4:	0021      	movs	r1, r4
     5c6:	2001      	movs	r0, #1
     5c8:	4b0a      	ldr	r3, [pc, #40]	; (5f4 <init_eeprom+0x40>)
     5ca:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     5cc:	ab02      	add	r3, sp, #8
     5ce:	490a      	ldr	r1, [pc, #40]	; (5f8 <init_eeprom+0x44>)
     5d0:	680a      	ldr	r2, [r1, #0]
     5d2:	9202      	str	r2, [sp, #8]
     5d4:	7909      	ldrb	r1, [r1, #4]
     5d6:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     5d8:	4808      	ldr	r0, [pc, #32]	; (5fc <init_eeprom+0x48>)
     5da:	2180      	movs	r1, #128	; 0x80
     5dc:	0209      	lsls	r1, r1, #8
     5de:	9100      	str	r1, [sp, #0]
     5e0:	9b03      	ldr	r3, [sp, #12]
     5e2:	4907      	ldr	r1, [pc, #28]	; (600 <init_eeprom+0x4c>)
     5e4:	4c07      	ldr	r4, [pc, #28]	; (604 <init_eeprom+0x50>)
     5e6:	47a0      	blx	r4

    return true;
}
     5e8:	2001      	movs	r0, #1
     5ea:	b004      	add	sp, #16
     5ec:	bd10      	pop	{r4, pc}
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	00001aa5 	.word	0x00001aa5
     5f4:	00001a95 	.word	0x00001a95
     5f8:	00005234 	.word	0x00005234
     5fc:	20000170 	.word	0x20000170
     600:	42001400 	.word	0x42001400
     604:	00001345 	.word	0x00001345

00000608 <check_eeprom>:

bool check_eeprom() {
     608:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     60a:	4802      	ldr	r0, [pc, #8]	; (614 <check_eeprom+0xc>)
     60c:	4b02      	ldr	r3, [pc, #8]	; (618 <check_eeprom+0x10>)
     60e:	4798      	blx	r3
}
     610:	bd10      	pop	{r4, pc}
     612:	46c0      	nop			; (mov r8, r8)
     614:	20000170 	.word	0x20000170
     618:	000014f1 	.word	0x000014f1

0000061c <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     61c:	b530      	push	{r4, r5, lr}
     61e:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     620:	4d06      	ldr	r5, [pc, #24]	; (63c <eeprom_read_request+0x20>)
     622:	4c07      	ldr	r4, [pc, #28]	; (640 <eeprom_read_request+0x24>)
     624:	9203      	str	r2, [sp, #12]
     626:	9302      	str	r3, [sp, #8]
     628:	9101      	str	r1, [sp, #4]
     62a:	2300      	movs	r3, #0
     62c:	9300      	str	r3, [sp, #0]
     62e:	002a      	movs	r2, r5
     630:	0001      	movs	r1, r0
     632:	0020      	movs	r0, r4
     634:	4c03      	ldr	r4, [pc, #12]	; (644 <eeprom_read_request+0x28>)
     636:	47a0      	blx	r4
}
     638:	b005      	add	sp, #20
     63a:	bd30      	pop	{r4, r5, pc}
     63c:	20000170 	.word	0x20000170
     640:	20000278 	.word	0x20000278
     644:	0000381d 	.word	0x0000381d

00000648 <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     648:	b530      	push	{r4, r5, lr}
     64a:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     64c:	4d07      	ldr	r5, [pc, #28]	; (66c <eeprom_write_request+0x24>)
     64e:	4c08      	ldr	r4, [pc, #32]	; (670 <eeprom_write_request+0x28>)
     650:	9203      	str	r2, [sp, #12]
     652:	9302      	str	r3, [sp, #8]
     654:	9101      	str	r1, [sp, #4]
     656:	2301      	movs	r3, #1
     658:	9300      	str	r3, [sp, #0]
     65a:	2300      	movs	r3, #0
     65c:	002a      	movs	r2, r5
     65e:	0001      	movs	r1, r0
     660:	0020      	movs	r0, r4
     662:	4c04      	ldr	r4, [pc, #16]	; (674 <eeprom_write_request+0x2c>)
     664:	47a0      	blx	r4
     666:	b005      	add	sp, #20
     668:	bd30      	pop	{r4, r5, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	20000170 	.word	0x20000170
     670:	20000278 	.word	0x20000278
     674:	0000381d 	.word	0x0000381d

00000678 <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     678:	b5f0      	push	{r4, r5, r6, r7, lr}
     67a:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     67c:	2480      	movs	r4, #128	; 0x80
     67e:	0524      	lsls	r4, r4, #20
     680:	0021      	movs	r1, r4
     682:	2000      	movs	r0, #0
     684:	4e15      	ldr	r6, [pc, #84]	; (6dc <imu_init+0x64>)
     686:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     688:	0021      	movs	r1, r4
     68a:	2000      	movs	r0, #0
     68c:	4f14      	ldr	r7, [pc, #80]	; (6e0 <imu_init+0x68>)
     68e:	47b8      	blx	r7
	IMU_OFF_BUS();
     690:	2580      	movs	r5, #128	; 0x80
     692:	03ad      	lsls	r5, r5, #14
     694:	0029      	movs	r1, r5
     696:	2000      	movs	r0, #0
     698:	4b12      	ldr	r3, [pc, #72]	; (6e4 <imu_init+0x6c>)
     69a:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     69c:	0029      	movs	r1, r5
     69e:	2000      	movs	r0, #0
     6a0:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     6a2:	0029      	movs	r1, r5
     6a4:	2000      	movs	r0, #0
     6a6:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     6a8:	9400      	str	r4, [sp, #0]
     6aa:	2300      	movs	r3, #0
     6ac:	466a      	mov	r2, sp
     6ae:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     6b0:	480d      	ldr	r0, [pc, #52]	; (6e8 <imu_init+0x70>)
     6b2:	0022      	movs	r2, r4
     6b4:	9b01      	ldr	r3, [sp, #4]
     6b6:	490d      	ldr	r1, [pc, #52]	; (6ec <imu_init+0x74>)
     6b8:	4c0d      	ldr	r4, [pc, #52]	; (6f0 <imu_init+0x78>)
     6ba:	47a0      	blx	r4
     6bc:	1e04      	subs	r4, r0, #0
     6be:	d107      	bne.n	6d0 <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     6c0:	2180      	movs	r1, #128	; 0x80
     6c2:	0389      	lsls	r1, r1, #14
     6c4:	2000      	movs	r0, #0
     6c6:	4b07      	ldr	r3, [pc, #28]	; (6e4 <imu_init+0x6c>)
     6c8:	4798      	blx	r3
    return ret;
}
     6ca:	0020      	movs	r0, r4
     6cc:	b003      	add	sp, #12
     6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     6d0:	4805      	ldr	r0, [pc, #20]	; (6e8 <imu_init+0x70>)
     6d2:	4b08      	ldr	r3, [pc, #32]	; (6f4 <imu_init+0x7c>)
     6d4:	4798      	blx	r3
     6d6:	0004      	movs	r4, r0
     6d8:	e7f2      	b.n	6c0 <imu_init+0x48>
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	00001aa5 	.word	0x00001aa5
     6e0:	00001a95 	.word	0x00001a95
     6e4:	00001ab5 	.word	0x00001ab5
     6e8:	2000017c 	.word	0x2000017c
     6ec:	42001400 	.word	0x42001400
     6f0:	000018c5 	.word	0x000018c5
     6f4:	00001a09 	.word	0x00001a09

000006f8 <check_imu>:

bool check_imu() {
     6f8:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     6fa:	2180      	movs	r1, #128	; 0x80
     6fc:	0389      	lsls	r1, r1, #14
     6fe:	2000      	movs	r0, #0
     700:	4b09      	ldr	r3, [pc, #36]	; (728 <check_imu+0x30>)
     702:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     704:	4809      	ldr	r0, [pc, #36]	; (72c <check_imu+0x34>)
     706:	4b0a      	ldr	r3, [pc, #40]	; (730 <check_imu+0x38>)
     708:	4798      	blx	r3
     70a:	1e04      	subs	r4, r0, #0
     70c:	d106      	bne.n	71c <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     70e:	2180      	movs	r1, #128	; 0x80
     710:	0389      	lsls	r1, r1, #14
     712:	2000      	movs	r0, #0
     714:	4b07      	ldr	r3, [pc, #28]	; (734 <check_imu+0x3c>)
     716:	4798      	blx	r3
    return pass;
}
     718:	0020      	movs	r0, r4
     71a:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     71c:	4803      	ldr	r0, [pc, #12]	; (72c <check_imu+0x34>)
     71e:	4b06      	ldr	r3, [pc, #24]	; (738 <check_imu+0x40>)
     720:	4798      	blx	r3
     722:	0004      	movs	r4, r0
     724:	e7f3      	b.n	70e <check_imu+0x16>
     726:	46c0      	nop			; (mov r8, r8)
     728:	00001aa5 	.word	0x00001aa5
     72c:	2000017c 	.word	0x2000017c
     730:	00001935 	.word	0x00001935
     734:	00001ab5 	.word	0x00001ab5
     738:	00001a65 	.word	0x00001a65

0000073c <request_imu_data>:

void request_imu_data() {
     73c:	b510      	push	{r4, lr}
     73e:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     740:	4a09      	ldr	r2, [pc, #36]	; (768 <request_imu_data+0x2c>)
     742:	0011      	movs	r1, r2
     744:	310c      	adds	r1, #12
     746:	4809      	ldr	r0, [pc, #36]	; (76c <request_imu_data+0x30>)
     748:	0013      	movs	r3, r2
     74a:	3334      	adds	r3, #52	; 0x34
     74c:	9304      	str	r3, [sp, #16]
     74e:	230e      	movs	r3, #14
     750:	9303      	str	r3, [sp, #12]
     752:	331f      	adds	r3, #31
     754:	9302      	str	r3, [sp, #8]
     756:	2300      	movs	r3, #0
     758:	9301      	str	r3, [sp, #4]
     75a:	9300      	str	r3, [sp, #0]
     75c:	3302      	adds	r3, #2
     75e:	4c04      	ldr	r4, [pc, #16]	; (770 <request_imu_data+0x34>)
     760:	47a0      	blx	r4
}
     762:	b006      	add	sp, #24
     764:	bd10      	pop	{r4, pc}
     766:	46c0      	nop			; (mov r8, r8)
     768:	2000017c 	.word	0x2000017c
     76c:	20000278 	.word	0x20000278
     770:	00003ac1 	.word	0x00003ac1

00000774 <wait_for_imu_data>:

void wait_for_imu_data() {
     774:	b5f0      	push	{r4, r5, r6, r7, lr}
     776:	46de      	mov	lr, fp
     778:	4657      	mov	r7, sl
     77a:	464e      	mov	r6, r9
     77c:	4645      	mov	r5, r8
     77e:	b5e0      	push	{r5, r6, r7, lr}
     780:	b089      	sub	sp, #36	; 0x24
    imu_icm20948_wait_until_done(&data_request);
     782:	4b9f      	ldr	r3, [pc, #636]	; (a00 <wait_for_imu_data+0x28c>)
     784:	4699      	mov	r9, r3
     786:	0018      	movs	r0, r3
     788:	300c      	adds	r0, #12
     78a:	4b9e      	ldr	r3, [pc, #632]	; (a04 <wait_for_imu_data+0x290>)
     78c:	4798      	blx	r3

    float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
     78e:	464b      	mov	r3, r9
     790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     792:	469a      	mov	sl, r3
     794:	2002      	movs	r0, #2
     796:	4098      	lsls	r0, r3
     798:	4b9b      	ldr	r3, [pc, #620]	; (a08 <wait_for_imu_data+0x294>)
     79a:	4698      	mov	r8, r3
     79c:	4798      	blx	r3
     79e:	4e9b      	ldr	r6, [pc, #620]	; (a0c <wait_for_imu_data+0x298>)
     7a0:	499b      	ldr	r1, [pc, #620]	; (a10 <wait_for_imu_data+0x29c>)
     7a2:	47b0      	blx	r6
     7a4:	21e0      	movs	r1, #224	; 0xe0
     7a6:	0589      	lsls	r1, r1, #22
     7a8:	47b0      	blx	r6
     7aa:	4683      	mov	fp, r0
    globals.AccelerationXRaw = (float)(SWAPI16(raw_data.accel_x)) * accel_multiplier;
     7ac:	464b      	mov	r3, r9
     7ae:	2234      	movs	r2, #52	; 0x34
     7b0:	5e9b      	ldrsh	r3, [r3, r2]
     7b2:	021f      	lsls	r7, r3, #8
     7b4:	b23f      	sxth	r7, r7
     7b6:	b29b      	uxth	r3, r3
     7b8:	0a1b      	lsrs	r3, r3, #8
     7ba:	431f      	orrs	r7, r3
     7bc:	9707      	str	r7, [sp, #28]
     7be:	0038      	movs	r0, r7
     7c0:	47c0      	blx	r8
     7c2:	4659      	mov	r1, fp
     7c4:	47b0      	blx	r6
     7c6:	4f93      	ldr	r7, [pc, #588]	; (a14 <wait_for_imu_data+0x2a0>)
     7c8:	60b8      	str	r0, [r7, #8]
    globals.AccelerationYRaw = (float)(SWAPI16(raw_data.accel_y)) * accel_multiplier;
     7ca:	464b      	mov	r3, r9
     7cc:	2236      	movs	r2, #54	; 0x36
     7ce:	5e9b      	ldrsh	r3, [r3, r2]
     7d0:	021d      	lsls	r5, r3, #8
     7d2:	b22d      	sxth	r5, r5
     7d4:	b29b      	uxth	r3, r3
     7d6:	0a1b      	lsrs	r3, r3, #8
     7d8:	431d      	orrs	r5, r3
     7da:	0028      	movs	r0, r5
     7dc:	47c0      	blx	r8
     7de:	4659      	mov	r1, fp
     7e0:	47b0      	blx	r6
     7e2:	60f8      	str	r0, [r7, #12]
    globals.AccelerationZRaw = (float)(SWAPI16(raw_data.accel_z)) * accel_multiplier;
     7e4:	464b      	mov	r3, r9
     7e6:	2238      	movs	r2, #56	; 0x38
     7e8:	5e9b      	ldrsh	r3, [r3, r2]
     7ea:	021c      	lsls	r4, r3, #8
     7ec:	b224      	sxth	r4, r4
     7ee:	b29b      	uxth	r3, r3
     7f0:	0a1b      	lsrs	r3, r3, #8
     7f2:	431c      	orrs	r4, r3
     7f4:	0020      	movs	r0, r4
     7f6:	47c0      	blx	r8
     7f8:	4659      	mov	r1, fp
     7fa:	47b0      	blx	r6
     7fc:	6138      	str	r0, [r7, #16]

    float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
     7fe:	464b      	mov	r3, r9
     800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     802:	20fa      	movs	r0, #250	; 0xfa
     804:	4098      	lsls	r0, r3
     806:	47c0      	blx	r8
     808:	21e0      	movs	r1, #224	; 0xe0
     80a:	0589      	lsls	r1, r1, #22
     80c:	47b0      	blx	r6
     80e:	4683      	mov	fp, r0
    globals.AngularVelocityXRaw = (float)(SWAPI16(raw_data.gyro_x)) * gyro_multiplier;
     810:	464b      	mov	r3, r9
     812:	223a      	movs	r2, #58	; 0x3a
     814:	5e9b      	ldrsh	r3, [r3, r2]
     816:	0218      	lsls	r0, r3, #8
     818:	b200      	sxth	r0, r0
     81a:	b29b      	uxth	r3, r3
     81c:	0a1b      	lsrs	r3, r3, #8
     81e:	4318      	orrs	r0, r3
     820:	47c0      	blx	r8
     822:	4659      	mov	r1, fp
     824:	47b0      	blx	r6
     826:	6178      	str	r0, [r7, #20]
    globals.AngularVelocityYRaw = (float)(SWAPI16(raw_data.gyro_y)) * gyro_multiplier;
     828:	464b      	mov	r3, r9
     82a:	223c      	movs	r2, #60	; 0x3c
     82c:	5e9b      	ldrsh	r3, [r3, r2]
     82e:	0218      	lsls	r0, r3, #8
     830:	b200      	sxth	r0, r0
     832:	b29b      	uxth	r3, r3
     834:	0a1b      	lsrs	r3, r3, #8
     836:	4318      	orrs	r0, r3
     838:	47c0      	blx	r8
     83a:	4659      	mov	r1, fp
     83c:	47b0      	blx	r6
     83e:	61b8      	str	r0, [r7, #24]
    globals.AngularVelocityZRaw = (float)(SWAPI16(raw_data.gyro_z)) * gyro_multiplier;
     840:	464b      	mov	r3, r9
     842:	223e      	movs	r2, #62	; 0x3e
     844:	5e9b      	ldrsh	r3, [r3, r2]
     846:	0218      	lsls	r0, r3, #8
     848:	b200      	sxth	r0, r0
     84a:	b29b      	uxth	r3, r3
     84c:	0a1b      	lsrs	r3, r3, #8
     84e:	4318      	orrs	r0, r3
     850:	47c0      	blx	r8
     852:	4659      	mov	r1, fp
     854:	47b0      	blx	r6
     856:	61f8      	str	r0, [r7, #28]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     858:	17e3      	asrs	r3, r4, #31
     85a:	18e4      	adds	r4, r4, r3
     85c:	405c      	eors	r4, r3
     85e:	b2a4      	uxth	r4, r4
     860:	17eb      	asrs	r3, r5, #31
     862:	18ed      	adds	r5, r5, r3
     864:	405d      	eors	r5, r3
     866:	b2ad      	uxth	r5, r5
     868:	9f07      	ldr	r7, [sp, #28]
     86a:	17fb      	asrs	r3, r7, #31
     86c:	18ff      	adds	r7, r7, r3
     86e:	405f      	eors	r7, r3
     870:	b2bf      	uxth	r7, r7
     872:	1c2a      	adds	r2, r5, #0
     874:	42bd      	cmp	r5, r7
     876:	d200      	bcs.n	87a <wait_for_imu_data+0x106>
     878:	1c3a      	adds	r2, r7, #0
     87a:	1c23      	adds	r3, r4, #0
     87c:	b291      	uxth	r1, r2
     87e:	428c      	cmp	r4, r1
     880:	d200      	bcs.n	884 <wait_for_imu_data+0x110>
     882:	1c13      	adds	r3, r2, #0
     884:	b21b      	sxth	r3, r3
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     886:	4652      	mov	r2, sl
     888:	2a03      	cmp	r2, #3
     88a:	d002      	beq.n	892 <wait_for_imu_data+0x11e>
     88c:	4a62      	ldr	r2, [pc, #392]	; (a18 <wait_for_imu_data+0x2a4>)
     88e:	4293      	cmp	r3, r2
     890:	dc44      	bgt.n	91c <wait_for_imu_data+0x1a8>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     892:	4652      	mov	r2, sl
     894:	2a00      	cmp	r2, #0
     896:	d002      	beq.n	89e <wait_for_imu_data+0x12a>
     898:	4a60      	ldr	r2, [pc, #384]	; (a1c <wait_for_imu_data+0x2a8>)
     89a:	4293      	cmp	r3, r2
     89c:	dd59      	ble.n	952 <wait_for_imu_data+0x1de>
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     89e:	4858      	ldr	r0, [pc, #352]	; (a00 <wait_for_imu_data+0x28c>)
     8a0:	233e      	movs	r3, #62	; 0x3e
     8a2:	5ec2      	ldrsh	r2, [r0, r3]
     8a4:	0213      	lsls	r3, r2, #8
     8a6:	b21b      	sxth	r3, r3
     8a8:	b292      	uxth	r2, r2
     8aa:	0a12      	lsrs	r2, r2, #8
     8ac:	4313      	orrs	r3, r2
     8ae:	17da      	asrs	r2, r3, #31
     8b0:	189b      	adds	r3, r3, r2
     8b2:	4053      	eors	r3, r2
     8b4:	b29b      	uxth	r3, r3
     8b6:	223c      	movs	r2, #60	; 0x3c
     8b8:	5e81      	ldrsh	r1, [r0, r2]
     8ba:	020a      	lsls	r2, r1, #8
     8bc:	b212      	sxth	r2, r2
     8be:	b289      	uxth	r1, r1
     8c0:	0a09      	lsrs	r1, r1, #8
     8c2:	430a      	orrs	r2, r1
     8c4:	17d1      	asrs	r1, r2, #31
     8c6:	1852      	adds	r2, r2, r1
     8c8:	404a      	eors	r2, r1
     8ca:	b292      	uxth	r2, r2
     8cc:	213a      	movs	r1, #58	; 0x3a
     8ce:	5e40      	ldrsh	r0, [r0, r1]
     8d0:	0201      	lsls	r1, r0, #8
     8d2:	b209      	sxth	r1, r1
     8d4:	b280      	uxth	r0, r0
     8d6:	0a00      	lsrs	r0, r0, #8
     8d8:	4301      	orrs	r1, r0
     8da:	17c8      	asrs	r0, r1, #31
     8dc:	1809      	adds	r1, r1, r0
     8de:	4041      	eors	r1, r0
     8e0:	b289      	uxth	r1, r1
     8e2:	1c10      	adds	r0, r2, #0
     8e4:	428a      	cmp	r2, r1
     8e6:	d200      	bcs.n	8ea <wait_for_imu_data+0x176>
     8e8:	1c08      	adds	r0, r1, #0
     8ea:	1c1a      	adds	r2, r3, #0
     8ec:	b281      	uxth	r1, r0
     8ee:	428b      	cmp	r3, r1
     8f0:	d200      	bcs.n	8f4 <wait_for_imu_data+0x180>
     8f2:	1c02      	adds	r2, r0, #0
     8f4:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     8f6:	4b42      	ldr	r3, [pc, #264]	; (a00 <wait_for_imu_data+0x28c>)
     8f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     8fa:	2b03      	cmp	r3, #3
     8fc:	d002      	beq.n	904 <wait_for_imu_data+0x190>
     8fe:	4946      	ldr	r1, [pc, #280]	; (a18 <wait_for_imu_data+0x2a4>)
     900:	428a      	cmp	r2, r1
     902:	dc41      	bgt.n	988 <wait_for_imu_data+0x214>
        ++gyro_fs_sel;
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     904:	2b00      	cmp	r3, #0
     906:	d002      	beq.n	90e <wait_for_imu_data+0x19a>
     908:	4944      	ldr	r1, [pc, #272]	; (a1c <wait_for_imu_data+0x2a8>)
     90a:	428a      	cmp	r2, r1
     90c:	dd5a      	ble.n	9c4 <wait_for_imu_data+0x250>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_off();
    }

     90e:	b009      	add	sp, #36	; 0x24
     910:	bcf0      	pop	{r4, r5, r6, r7}
     912:	46bb      	mov	fp, r7
     914:	46b2      	mov	sl, r6
     916:	46a9      	mov	r9, r5
     918:	46a0      	mov	r8, r4
     91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     91c:	4653      	mov	r3, sl
     91e:	3301      	adds	r3, #1
     920:	4a37      	ldr	r2, [pc, #220]	; (a00 <wait_for_imu_data+0x28c>)
     922:	6453      	str	r3, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     924:	b2db      	uxtb	r3, r3
     926:	005b      	lsls	r3, r3, #1
     928:	2106      	movs	r1, #6
     92a:	400b      	ands	r3, r1
     92c:	3146      	adds	r1, #70	; 0x46
     92e:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     930:	0011      	movs	r1, r2
     932:	3150      	adds	r1, #80	; 0x50
     934:	483a      	ldr	r0, [pc, #232]	; (a20 <wait_for_imu_data+0x2ac>)
     936:	0013      	movs	r3, r2
     938:	334c      	adds	r3, #76	; 0x4c
     93a:	9304      	str	r3, [sp, #16]
     93c:	2301      	movs	r3, #1
     93e:	9303      	str	r3, [sp, #12]
     940:	2414      	movs	r4, #20
     942:	9402      	str	r4, [sp, #8]
     944:	3c12      	subs	r4, #18
     946:	9401      	str	r4, [sp, #4]
     948:	9300      	str	r3, [sp, #0]
     94a:	3301      	adds	r3, #1
     94c:	4c35      	ldr	r4, [pc, #212]	; (a24 <wait_for_imu_data+0x2b0>)
     94e:	47a0      	blx	r4
     950:	e7a5      	b.n	89e <wait_for_imu_data+0x12a>
        --accel_fs_sel;
     952:	4653      	mov	r3, sl
     954:	3b01      	subs	r3, #1
     956:	4a2a      	ldr	r2, [pc, #168]	; (a00 <wait_for_imu_data+0x28c>)
     958:	6453      	str	r3, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     95a:	b2db      	uxtb	r3, r3
     95c:	005b      	lsls	r3, r3, #1
     95e:	2106      	movs	r1, #6
     960:	400b      	ands	r3, r1
     962:	3146      	adds	r1, #70	; 0x46
     964:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     966:	0011      	movs	r1, r2
     968:	3150      	adds	r1, #80	; 0x50
     96a:	482d      	ldr	r0, [pc, #180]	; (a20 <wait_for_imu_data+0x2ac>)
     96c:	0013      	movs	r3, r2
     96e:	334c      	adds	r3, #76	; 0x4c
     970:	9304      	str	r3, [sp, #16]
     972:	2301      	movs	r3, #1
     974:	9303      	str	r3, [sp, #12]
     976:	2414      	movs	r4, #20
     978:	9402      	str	r4, [sp, #8]
     97a:	3c12      	subs	r4, #18
     97c:	9401      	str	r4, [sp, #4]
     97e:	9300      	str	r3, [sp, #0]
     980:	3301      	adds	r3, #1
     982:	4c28      	ldr	r4, [pc, #160]	; (a24 <wait_for_imu_data+0x2b0>)
     984:	47a0      	blx	r4
     986:	e78a      	b.n	89e <wait_for_imu_data+0x12a>
        ++gyro_fs_sel;
     988:	3301      	adds	r3, #1
     98a:	4a1d      	ldr	r2, [pc, #116]	; (a00 <wait_for_imu_data+0x28c>)
     98c:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     98e:	b2db      	uxtb	r3, r3
     990:	005b      	lsls	r3, r3, #1
     992:	2106      	movs	r1, #6
     994:	400b      	ands	r3, r1
     996:	3172      	adds	r1, #114	; 0x72
     998:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     99a:	0011      	movs	r1, r2
     99c:	317c      	adds	r1, #124	; 0x7c
     99e:	4820      	ldr	r0, [pc, #128]	; (a20 <wait_for_imu_data+0x2ac>)
     9a0:	0013      	movs	r3, r2
     9a2:	3378      	adds	r3, #120	; 0x78
     9a4:	9304      	str	r3, [sp, #16]
     9a6:	2301      	movs	r3, #1
     9a8:	9303      	str	r3, [sp, #12]
     9aa:	9302      	str	r3, [sp, #8]
     9ac:	2402      	movs	r4, #2
     9ae:	9401      	str	r4, [sp, #4]
     9b0:	9300      	str	r3, [sp, #0]
     9b2:	3301      	adds	r3, #1
     9b4:	4c1b      	ldr	r4, [pc, #108]	; (a24 <wait_for_imu_data+0x2b0>)
     9b6:	47a0      	blx	r4
        led_on();
     9b8:	2180      	movs	r1, #128	; 0x80
     9ba:	03c9      	lsls	r1, r1, #15
     9bc:	2001      	movs	r0, #1
     9be:	4b1a      	ldr	r3, [pc, #104]	; (a28 <wait_for_imu_data+0x2b4>)
     9c0:	4798      	blx	r3
     9c2:	e7a4      	b.n	90e <wait_for_imu_data+0x19a>
        --gyro_fs_sel;
     9c4:	3b01      	subs	r3, #1
     9c6:	4a0e      	ldr	r2, [pc, #56]	; (a00 <wait_for_imu_data+0x28c>)
     9c8:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     9ca:	b2db      	uxtb	r3, r3
     9cc:	005b      	lsls	r3, r3, #1
     9ce:	2106      	movs	r1, #6
     9d0:	400b      	ands	r3, r1
     9d2:	3172      	adds	r1, #114	; 0x72
     9d4:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     9d6:	0011      	movs	r1, r2
     9d8:	317c      	adds	r1, #124	; 0x7c
     9da:	4811      	ldr	r0, [pc, #68]	; (a20 <wait_for_imu_data+0x2ac>)
     9dc:	0013      	movs	r3, r2
     9de:	3378      	adds	r3, #120	; 0x78
     9e0:	9304      	str	r3, [sp, #16]
     9e2:	2301      	movs	r3, #1
     9e4:	9303      	str	r3, [sp, #12]
     9e6:	9302      	str	r3, [sp, #8]
     9e8:	2402      	movs	r4, #2
     9ea:	9401      	str	r4, [sp, #4]
     9ec:	9300      	str	r3, [sp, #0]
     9ee:	3301      	adds	r3, #1
     9f0:	4c0c      	ldr	r4, [pc, #48]	; (a24 <wait_for_imu_data+0x2b0>)
     9f2:	47a0      	blx	r4
        led_off();
     9f4:	2180      	movs	r1, #128	; 0x80
     9f6:	03c9      	lsls	r1, r1, #15
     9f8:	2001      	movs	r0, #1
     9fa:	4b0c      	ldr	r3, [pc, #48]	; (a2c <wait_for_imu_data+0x2b8>)
     9fc:	4798      	blx	r3
     9fe:	e786      	b.n	90e <wait_for_imu_data+0x19a>
     a00:	2000017c 	.word	0x2000017c
     a04:	00003afd 	.word	0x00003afd
     a08:	00004e09 	.word	0x00004e09
     a0c:	00004829 	.word	0x00004829
     a10:	411ce80a 	.word	0x411ce80a
     a14:	20000128 	.word	0x20000128
     a18:	00007333 	.word	0x00007333
     a1c:	00003333 	.word	0x00003333
     a20:	20000278 	.word	0x20000278
     a24:	00003ac1 	.word	0x00003ac1
     a28:	00001aa5 	.word	0x00001aa5
     a2c:	00001ab5 	.word	0x00001ab5

00000a30 <serial_init>:
    .rxtrig = UART4_DMA_RX_TRIGGER,
    .priority = UART4_DMA_PRIORITY
};


bool serial_init() {
     a30:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

	// init uart
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     a32:	22c0      	movs	r2, #192	; 0xc0
     a34:	0092      	lsls	r2, r2, #2
     a36:	2102      	movs	r1, #2
     a38:	2000      	movs	r0, #0
     a3a:	4c18      	ldr	r4, [pc, #96]	; (a9c <serial_init+0x6c>)
     a3c:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     a3e:	22c0      	movs	r2, #192	; 0xc0
     a40:	0312      	lsls	r2, r2, #12
     a42:	2102      	movs	r1, #2
     a44:	2000      	movs	r0, #0
     a46:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     a48:	22c0      	movs	r2, #192	; 0xc0
     a4a:	0212      	lsls	r2, r2, #8
     a4c:	2102      	movs	r1, #2
     a4e:	2001      	movs	r0, #1
     a50:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     a52:	22c0      	movs	r2, #192	; 0xc0
     a54:	0292      	lsls	r2, r2, #10
     a56:	2102      	movs	r1, #2
     a58:	2001      	movs	r0, #1
     a5a:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     a5c:	2596      	movs	r5, #150	; 0x96
     a5e:	01ad      	lsls	r5, r5, #6
     a60:	002b      	movs	r3, r5
     a62:	2200      	movs	r2, #0
     a64:	2101      	movs	r1, #1
     a66:	480e      	ldr	r0, [pc, #56]	; (aa0 <serial_init+0x70>)
     a68:	4c0e      	ldr	r4, [pc, #56]	; (aa4 <serial_init+0x74>)
     a6a:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     a6c:	002b      	movs	r3, r5
     a6e:	2201      	movs	r2, #1
     a70:	2103      	movs	r1, #3
     a72:	480d      	ldr	r0, [pc, #52]	; (aa8 <serial_init+0x78>)
     a74:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     a76:	002b      	movs	r3, r5
     a78:	2201      	movs	r2, #1
     a7a:	2103      	movs	r1, #3
     a7c:	480b      	ldr	r0, [pc, #44]	; (aac <serial_init+0x7c>)
     a7e:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     a80:	002b      	movs	r3, r5
     a82:	2200      	movs	r2, #0
     a84:	2101      	movs	r1, #1
     a86:	480a      	ldr	r0, [pc, #40]	; (ab0 <serial_init+0x80>)
     a88:	47a0      	blx	r4
    
	// init usb
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     a8a:	2180      	movs	r1, #128	; 0x80
     a8c:	20e0      	movs	r0, #224	; 0xe0
     a8e:	0049      	lsls	r1, r1, #1
     a90:	00c0      	lsls	r0, r0, #3
     a92:	4b08      	ldr	r3, [pc, #32]	; (ab4 <serial_init+0x84>)
     a94:	4798      	blx	r3
	usb_attach();
     a96:	4b08      	ldr	r3, [pc, #32]	; (ab8 <serial_init+0x88>)
     a98:	4798      	blx	r3
}
     a9a:	bd70      	pop	{r4, r5, r6, pc}
     a9c:	00001ac5 	.word	0x00001ac5
     aa0:	42000800 	.word	0x42000800
     aa4:	000021cd 	.word	0x000021cd
     aa8:	42000c00 	.word	0x42000c00
     aac:	42001800 	.word	0x42001800
     ab0:	42001c00 	.word	0x42001c00
     ab4:	00003dad 	.word	0x00003dad
     ab8:	00002831 	.word	0x00002831

00000abc <serial_write_start>:
    // will kill usb process which would remain running
    rtos_usb_quit();
}


bool serial_write_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     abc:	b570      	push	{r4, r5, r6, lr}
     abe:	000e      	movs	r6, r1
     ac0:	0013      	movs	r3, r2
    switch (port) {
     ac2:	2804      	cmp	r0, #4
     ac4:	d825      	bhi.n	b12 <serial_write_start+0x56>
     ac6:	0080      	lsls	r0, r0, #2
     ac8:	4d13      	ldr	r5, [pc, #76]	; (b18 <serial_write_start+0x5c>)
     aca:	582c      	ldr	r4, [r5, r0]
     acc:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_send_buffer(buffer, count);
     ace:	0011      	movs	r1, r2
     ad0:	0030      	movs	r0, r6
     ad2:	4b12      	ldr	r3, [pc, #72]	; (b1c <serial_write_start+0x60>)
     ad4:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     ad6:	2001      	movs	r0, #1
}
     ad8:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_send_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     ada:	4911      	ldr	r1, [pc, #68]	; (b20 <serial_write_start+0x64>)
     adc:	0032      	movs	r2, r6
     ade:	4811      	ldr	r0, [pc, #68]	; (b24 <serial_write_start+0x68>)
     ae0:	4c11      	ldr	r4, [pc, #68]	; (b28 <serial_write_start+0x6c>)
     ae2:	47a0      	blx	r4
    return true;
     ae4:	2001      	movs	r0, #1
        break;
     ae6:	e7f7      	b.n	ad8 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     ae8:	4910      	ldr	r1, [pc, #64]	; (b2c <serial_write_start+0x70>)
     aea:	0032      	movs	r2, r6
     aec:	4810      	ldr	r0, [pc, #64]	; (b30 <serial_write_start+0x74>)
     aee:	4c0e      	ldr	r4, [pc, #56]	; (b28 <serial_write_start+0x6c>)
     af0:	47a0      	blx	r4
    return true;
     af2:	2001      	movs	r0, #1
        break;
     af4:	e7f0      	b.n	ad8 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     af6:	490f      	ldr	r1, [pc, #60]	; (b34 <serial_write_start+0x78>)
     af8:	0032      	movs	r2, r6
     afa:	480f      	ldr	r0, [pc, #60]	; (b38 <serial_write_start+0x7c>)
     afc:	4c0a      	ldr	r4, [pc, #40]	; (b28 <serial_write_start+0x6c>)
     afe:	47a0      	blx	r4
    return true;
     b00:	2001      	movs	r0, #1
        break;
     b02:	e7e9      	b.n	ad8 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     b04:	490d      	ldr	r1, [pc, #52]	; (b3c <serial_write_start+0x80>)
     b06:	0032      	movs	r2, r6
     b08:	480d      	ldr	r0, [pc, #52]	; (b40 <serial_write_start+0x84>)
     b0a:	4c07      	ldr	r4, [pc, #28]	; (b28 <serial_write_start+0x6c>)
     b0c:	47a0      	blx	r4
    return true;
     b0e:	2001      	movs	r0, #1
        break;
     b10:	e7e2      	b.n	ad8 <serial_write_start+0x1c>
    switch (port) {
     b12:	2000      	movs	r0, #0
     b14:	e7e0      	b.n	ad8 <serial_write_start+0x1c>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	0000523c 	.word	0x0000523c
     b1c:	00003e55 	.word	0x00003e55
     b20:	000052a0 	.word	0x000052a0
     b24:	42000800 	.word	0x42000800
     b28:	00003bf9 	.word	0x00003bf9
     b2c:	000052a8 	.word	0x000052a8
     b30:	42000c00 	.word	0x42000c00
     b34:	000052b0 	.word	0x000052b0
     b38:	42001800 	.word	0x42001800
     b3c:	000052b8 	.word	0x000052b8
     b40:	42001c00 	.word	0x42001c00

00000b44 <serial_write_wait_until_complete>:

bool serial_write_wait_until_complete(Serial_Port_IDs port) {
     b44:	b510      	push	{r4, lr}
    switch (port) {
     b46:	2804      	cmp	r0, #4
     b48:	d81b      	bhi.n	b82 <serial_write_wait_until_complete+0x3e>
     b4a:	0080      	lsls	r0, r0, #2
     b4c:	4b0e      	ldr	r3, [pc, #56]	; (b88 <serial_write_wait_until_complete+0x44>)
     b4e:	581b      	ldr	r3, [r3, r0]
     b50:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_send_complete();
     b52:	4b0e      	ldr	r3, [pc, #56]	; (b8c <serial_write_wait_until_complete+0x48>)
     b54:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     b56:	2001      	movs	r0, #1
}
     b58:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_send_complete(&uart1_descriptor);
     b5a:	480d      	ldr	r0, [pc, #52]	; (b90 <serial_write_wait_until_complete+0x4c>)
     b5c:	4b0d      	ldr	r3, [pc, #52]	; (b94 <serial_write_wait_until_complete+0x50>)
     b5e:	4798      	blx	r3
    return true;
     b60:	2001      	movs	r0, #1
        break;
     b62:	e7f9      	b.n	b58 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart2_descriptor);
     b64:	480c      	ldr	r0, [pc, #48]	; (b98 <serial_write_wait_until_complete+0x54>)
     b66:	4b0b      	ldr	r3, [pc, #44]	; (b94 <serial_write_wait_until_complete+0x50>)
     b68:	4798      	blx	r3
    return true;
     b6a:	2001      	movs	r0, #1
        break;
     b6c:	e7f4      	b.n	b58 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart3_descriptor);
     b6e:	480b      	ldr	r0, [pc, #44]	; (b9c <serial_write_wait_until_complete+0x58>)
     b70:	4b08      	ldr	r3, [pc, #32]	; (b94 <serial_write_wait_until_complete+0x50>)
     b72:	4798      	blx	r3
    return true;
     b74:	2001      	movs	r0, #1
        break;
     b76:	e7ef      	b.n	b58 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart4_descriptor);
     b78:	4809      	ldr	r0, [pc, #36]	; (ba0 <serial_write_wait_until_complete+0x5c>)
     b7a:	4b06      	ldr	r3, [pc, #24]	; (b94 <serial_write_wait_until_complete+0x50>)
     b7c:	4798      	blx	r3
    return true;
     b7e:	2001      	movs	r0, #1
        break;
     b80:	e7ea      	b.n	b58 <serial_write_wait_until_complete+0x14>
    switch (port) {
     b82:	2000      	movs	r0, #0
     b84:	e7e8      	b.n	b58 <serial_write_wait_until_complete+0x14>
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	00005250 	.word	0x00005250
     b8c:	00003ea1 	.word	0x00003ea1
     b90:	000052a0 	.word	0x000052a0
     b94:	00003c69 	.word	0x00003c69
     b98:	000052a8 	.word	0x000052a8
     b9c:	000052b0 	.word	0x000052b0
     ba0:	000052b8 	.word	0x000052b8

00000ba4 <serial_read_start>:


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     ba4:	b570      	push	{r4, r5, r6, lr}
     ba6:	000e      	movs	r6, r1
     ba8:	0013      	movs	r3, r2
    switch (port) {
     baa:	2804      	cmp	r0, #4
     bac:	d825      	bhi.n	bfa <serial_read_start+0x56>
     bae:	0080      	lsls	r0, r0, #2
     bb0:	4d13      	ldr	r5, [pc, #76]	; (c00 <serial_read_start+0x5c>)
     bb2:	582c      	ldr	r4, [r5, r0]
     bb4:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_read_buffer(buffer, count);
     bb6:	0011      	movs	r1, r2
     bb8:	0030      	movs	r0, r6
     bba:	4b12      	ldr	r3, [pc, #72]	; (c04 <serial_read_start+0x60>)
     bbc:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     bbe:	2001      	movs	r0, #1
}
     bc0:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     bc2:	4911      	ldr	r1, [pc, #68]	; (c08 <serial_read_start+0x64>)
     bc4:	0032      	movs	r2, r6
     bc6:	4811      	ldr	r0, [pc, #68]	; (c0c <serial_read_start+0x68>)
     bc8:	4c11      	ldr	r4, [pc, #68]	; (c10 <serial_read_start+0x6c>)
     bca:	47a0      	blx	r4
    return true;
     bcc:	2001      	movs	r0, #1
        break;
     bce:	e7f7      	b.n	bc0 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     bd0:	4910      	ldr	r1, [pc, #64]	; (c14 <serial_read_start+0x70>)
     bd2:	0032      	movs	r2, r6
     bd4:	4810      	ldr	r0, [pc, #64]	; (c18 <serial_read_start+0x74>)
     bd6:	4c0e      	ldr	r4, [pc, #56]	; (c10 <serial_read_start+0x6c>)
     bd8:	47a0      	blx	r4
    return true;
     bda:	2001      	movs	r0, #1
        break;
     bdc:	e7f0      	b.n	bc0 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     bde:	490f      	ldr	r1, [pc, #60]	; (c1c <serial_read_start+0x78>)
     be0:	0032      	movs	r2, r6
     be2:	480f      	ldr	r0, [pc, #60]	; (c20 <serial_read_start+0x7c>)
     be4:	4c0a      	ldr	r4, [pc, #40]	; (c10 <serial_read_start+0x6c>)
     be6:	47a0      	blx	r4
    return true;
     be8:	2001      	movs	r0, #1
        break;
     bea:	e7e9      	b.n	bc0 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     bec:	490d      	ldr	r1, [pc, #52]	; (c24 <serial_read_start+0x80>)
     bee:	0032      	movs	r2, r6
     bf0:	480d      	ldr	r0, [pc, #52]	; (c28 <serial_read_start+0x84>)
     bf2:	4c07      	ldr	r4, [pc, #28]	; (c10 <serial_read_start+0x6c>)
     bf4:	47a0      	blx	r4
    return true;
     bf6:	2001      	movs	r0, #1
        break;
     bf8:	e7e2      	b.n	bc0 <serial_read_start+0x1c>
    switch (port) {
     bfa:	2000      	movs	r0, #0
     bfc:	e7e0      	b.n	bc0 <serial_read_start+0x1c>
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	00005264 	.word	0x00005264
     c04:	00003ebd 	.word	0x00003ebd
     c08:	000052a0 	.word	0x000052a0
     c0c:	42000800 	.word	0x42000800
     c10:	00003c79 	.word	0x00003c79
     c14:	000052a8 	.word	0x000052a8
     c18:	42000c00 	.word	0x42000c00
     c1c:	000052b0 	.word	0x000052b0
     c20:	42001800 	.word	0x42001800
     c24:	000052b8 	.word	0x000052b8
     c28:	42001c00 	.word	0x42001c00

00000c2c <serial_read_wait_until_complete>:

bool serial_read_wait_until_complete(Serial_Port_IDs port) {
     c2c:	b510      	push	{r4, lr}
    switch (port) {
     c2e:	2804      	cmp	r0, #4
     c30:	d81b      	bhi.n	c6a <serial_read_wait_until_complete+0x3e>
     c32:	0080      	lsls	r0, r0, #2
     c34:	4b0e      	ldr	r3, [pc, #56]	; (c70 <serial_read_wait_until_complete+0x44>)
     c36:	581b      	ldr	r3, [r3, r0]
     c38:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete();
     c3a:	4b0e      	ldr	r3, [pc, #56]	; (c74 <serial_read_wait_until_complete+0x48>)
     c3c:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     c3e:	2001      	movs	r0, #1
}
     c40:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete(&uart1_descriptor);
     c42:	480d      	ldr	r0, [pc, #52]	; (c78 <serial_read_wait_until_complete+0x4c>)
     c44:	4b0d      	ldr	r3, [pc, #52]	; (c7c <serial_read_wait_until_complete+0x50>)
     c46:	4798      	blx	r3
    return true;
     c48:	2001      	movs	r0, #1
        break;
     c4a:	e7f9      	b.n	c40 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart2_descriptor);
     c4c:	480c      	ldr	r0, [pc, #48]	; (c80 <serial_read_wait_until_complete+0x54>)
     c4e:	4b0b      	ldr	r3, [pc, #44]	; (c7c <serial_read_wait_until_complete+0x50>)
     c50:	4798      	blx	r3
    return true;
     c52:	2001      	movs	r0, #1
        break;
     c54:	e7f4      	b.n	c40 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart3_descriptor);
     c56:	480b      	ldr	r0, [pc, #44]	; (c84 <serial_read_wait_until_complete+0x58>)
     c58:	4b08      	ldr	r3, [pc, #32]	; (c7c <serial_read_wait_until_complete+0x50>)
     c5a:	4798      	blx	r3
    return true;
     c5c:	2001      	movs	r0, #1
        break;
     c5e:	e7ef      	b.n	c40 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart4_descriptor);
     c60:	4809      	ldr	r0, [pc, #36]	; (c88 <serial_read_wait_until_complete+0x5c>)
     c62:	4b06      	ldr	r3, [pc, #24]	; (c7c <serial_read_wait_until_complete+0x50>)
     c64:	4798      	blx	r3
    return true;
     c66:	2001      	movs	r0, #1
        break;
     c68:	e7ea      	b.n	c40 <serial_read_wait_until_complete+0x14>
    switch (port) {
     c6a:	2000      	movs	r0, #0
     c6c:	e7e8      	b.n	c40 <serial_read_wait_until_complete+0x14>
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	00005278 	.word	0x00005278
     c74:	00003ef5 	.word	0x00003ef5
     c78:	000052a0 	.word	0x000052a0
     c7c:	00003ce9 	.word	0x00003ce9
     c80:	000052a8 	.word	0x000052a8
     c84:	000052b0 	.word	0x000052b0
     c88:	000052b8 	.word	0x000052b8

00000c8c <serial_flush>:

bool serial_flush(Serial_Port_IDs port) {
     c8c:	b510      	push	{r4, lr}
    switch (port) {
     c8e:	2804      	cmp	r0, #4
     c90:	d803      	bhi.n	c9a <serial_flush+0xe>
     c92:	0080      	lsls	r0, r0, #2
     c94:	4b0d      	ldr	r3, [pc, #52]	; (ccc <serial_flush+0x40>)
     c96:	581b      	ldr	r3, [r3, r0]
     c98:	469f      	mov	pc, r3
     c9a:	2000      	movs	r0, #0
     c9c:	e014      	b.n	cc8 <serial_flush+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_flush(UART1_SERCOM);
     c9e:	480c      	ldr	r0, [pc, #48]	; (cd0 <serial_flush+0x44>)
     ca0:	4b0c      	ldr	r3, [pc, #48]	; (cd4 <serial_flush+0x48>)
     ca2:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     ca4:	2001      	movs	r0, #1
        break;
     ca6:	e00f      	b.n	cc8 <serial_flush+0x3c>
        uart_flush(UART2_SERCOM);
     ca8:	480b      	ldr	r0, [pc, #44]	; (cd8 <serial_flush+0x4c>)
     caa:	4b0a      	ldr	r3, [pc, #40]	; (cd4 <serial_flush+0x48>)
     cac:	4798      	blx	r3
    return true;
     cae:	2001      	movs	r0, #1
        break;
     cb0:	e00a      	b.n	cc8 <serial_flush+0x3c>
        uart_flush(UART3_SERCOM);
     cb2:	480a      	ldr	r0, [pc, #40]	; (cdc <serial_flush+0x50>)
     cb4:	4b07      	ldr	r3, [pc, #28]	; (cd4 <serial_flush+0x48>)
     cb6:	4798      	blx	r3
    return true;
     cb8:	2001      	movs	r0, #1
        break;
     cba:	e005      	b.n	cc8 <serial_flush+0x3c>
        uart_flush(UART4_SERCOM);
     cbc:	4808      	ldr	r0, [pc, #32]	; (ce0 <serial_flush+0x54>)
     cbe:	4b05      	ldr	r3, [pc, #20]	; (cd4 <serial_flush+0x48>)
     cc0:	4798      	blx	r3
    return true;
     cc2:	2001      	movs	r0, #1
        break;
     cc4:	e000      	b.n	cc8 <serial_flush+0x3c>
    return true;
     cc6:	2001      	movs	r0, #1
     cc8:	bd10      	pop	{r4, pc}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	0000528c 	.word	0x0000528c
     cd0:	42000800 	.word	0x42000800
     cd4:	00002229 	.word	0x00002229
     cd8:	42000c00 	.word	0x42000c00
     cdc:	42001800 	.word	0x42001800
     ce0:	42001c00 	.word	0x42001c00

00000ce4 <buzzer>:

void shutdown() {
	serial_quit();
}

void buzzer() {
     ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ce6:	46ce      	mov	lr, r9
     ce8:	4647      	mov	r7, r8
     cea:	b580      	push	{r7, lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     cec:	2106      	movs	r1, #6
     cee:	482b      	ldr	r0, [pc, #172]	; (d9c <buzzer+0xb8>)
     cf0:	4b2b      	ldr	r3, [pc, #172]	; (da0 <buzzer+0xbc>)
     cf2:	4798      	blx	r3
     cf4:	2800      	cmp	r0, #0
     cf6:	d019      	beq.n	d2c <buzzer+0x48>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     cf8:	492a      	ldr	r1, [pc, #168]	; (da4 <buzzer+0xc0>)
     cfa:	4828      	ldr	r0, [pc, #160]	; (d9c <buzzer+0xb8>)
     cfc:	4b2a      	ldr	r3, [pc, #168]	; (da8 <buzzer+0xc4>)
     cfe:	4798      	blx	r3
     d00:	2800      	cmp	r0, #0
     d02:	d016      	beq.n	d32 <buzzer+0x4e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     d04:	2200      	movs	r2, #0
     d06:	2101      	movs	r1, #1
     d08:	4824      	ldr	r0, [pc, #144]	; (d9c <buzzer+0xb8>)
     d0a:	4b28      	ldr	r3, [pc, #160]	; (dac <buzzer+0xc8>)
     d0c:	4798      	blx	r3
     d0e:	2800      	cmp	r0, #0
     d10:	d012      	beq.n	d38 <buzzer+0x54>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     d12:	4822      	ldr	r0, [pc, #136]	; (d9c <buzzer+0xb8>)
     d14:	4b26      	ldr	r3, [pc, #152]	; (db0 <buzzer+0xcc>)
     d16:	4798      	blx	r3
     d18:	2800      	cmp	r0, #0
     d1a:	d010      	beq.n	d3e <buzzer+0x5a>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
     d1c:	2280      	movs	r2, #128	; 0x80
     d1e:	0412      	lsls	r2, r2, #16
     d20:	2104      	movs	r1, #4
     d22:	2001      	movs	r0, #1
     d24:	4b23      	ldr	r3, [pc, #140]	; (db4 <buzzer+0xd0>)
     d26:	4798      	blx	r3
	
	for (int i = 0; i < bz_count; ++i) {
     d28:	2500      	movs	r5, #0
     d2a:	e02e      	b.n	d8a <buzzer+0xa6>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     d2c:	4b22      	ldr	r3, [pc, #136]	; (db8 <buzzer+0xd4>)
     d2e:	4798      	blx	r3
     d30:	e7e2      	b.n	cf8 <buzzer+0x14>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     d32:	4b21      	ldr	r3, [pc, #132]	; (db8 <buzzer+0xd4>)
     d34:	4798      	blx	r3
     d36:	e7e5      	b.n	d04 <buzzer+0x20>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     d38:	4b1f      	ldr	r3, [pc, #124]	; (db8 <buzzer+0xd4>)
     d3a:	4798      	blx	r3
     d3c:	e7e9      	b.n	d12 <buzzer+0x2e>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     d3e:	4b1e      	ldr	r3, [pc, #120]	; (db8 <buzzer+0xd4>)
     d40:	4798      	blx	r3
     d42:	e7eb      	b.n	d1c <buzzer+0x38>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
     d44:	4b15      	ldr	r3, [pc, #84]	; (d9c <buzzer+0xb8>)
     d46:	4698      	mov	r8, r3
     d48:	22fc      	movs	r2, #252	; 0xfc
     d4a:	0592      	lsls	r2, r2, #22
     d4c:	2101      	movs	r1, #1
     d4e:	0018      	movs	r0, r3
     d50:	4f16      	ldr	r7, [pc, #88]	; (dac <buzzer+0xc8>)
     d52:	47b8      	blx	r7
		led_on();
     d54:	2680      	movs	r6, #128	; 0x80
     d56:	03f6      	lsls	r6, r6, #15
     d58:	0031      	movs	r1, r6
     d5a:	2001      	movs	r0, #1
     d5c:	4b17      	ldr	r3, [pc, #92]	; (dbc <buzzer+0xd8>)
     d5e:	4798      	blx	r3
		rtos_delay_ms(75);
     d60:	4b17      	ldr	r3, [pc, #92]	; (dc0 <buzzer+0xdc>)
     d62:	681a      	ldr	r2, [r3, #0]
     d64:	0093      	lsls	r3, r2, #2
     d66:	189b      	adds	r3, r3, r2
     d68:	011c      	lsls	r4, r3, #4
     d6a:	1ae4      	subs	r4, r4, r3
     d6c:	0020      	movs	r0, r4
     d6e:	4b15      	ldr	r3, [pc, #84]	; (dc4 <buzzer+0xe0>)
     d70:	4699      	mov	r9, r3
     d72:	4798      	blx	r3
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
     d74:	2200      	movs	r2, #0
     d76:	2101      	movs	r1, #1
     d78:	4640      	mov	r0, r8
     d7a:	47b8      	blx	r7
		led_off();
     d7c:	0031      	movs	r1, r6
     d7e:	2001      	movs	r0, #1
     d80:	4b11      	ldr	r3, [pc, #68]	; (dc8 <buzzer+0xe4>)
     d82:	4798      	blx	r3
		rtos_delay_ms(75);
     d84:	0020      	movs	r0, r4
     d86:	47c8      	blx	r9
	for (int i = 0; i < bz_count; ++i) {
     d88:	3501      	adds	r5, #1
     d8a:	4b10      	ldr	r3, [pc, #64]	; (dcc <buzzer+0xe8>)
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	42ab      	cmp	r3, r5
     d90:	dcd8      	bgt.n	d44 <buzzer+0x60>
	}
     d92:	bcc0      	pop	{r6, r7}
     d94:	46b9      	mov	r9, r7
     d96:	46b0      	mov	r8, r6
     d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	42003c00 	.word	0x42003c00
     da0:	00001b11 	.word	0x00001b11
     da4:	45309000 	.word	0x45309000
     da8:	00001c75 	.word	0x00001c75
     dac:	00001d01 	.word	0x00001d01
     db0:	00001be5 	.word	0x00001be5
     db4:	00001ac5 	.word	0x00001ac5
     db8:	00002ced 	.word	0x00002ced
     dbc:	00001aa5 	.word	0x00001aa5
     dc0:	000053b4 	.word	0x000053b4
     dc4:	00003215 	.word	0x00003215
     dc8:	00001ab5 	.word	0x00001ab5
     dcc:	20000220 	.word	0x20000220

00000dd0 <selftest>:
bool selftest() {
     dd0:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
     dd2:	4b0a      	ldr	r3, [pc, #40]	; (dfc <selftest+0x2c>)
     dd4:	4798      	blx	r3
     dd6:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
     dd8:	4809      	ldr	r0, [pc, #36]	; (e00 <selftest+0x30>)
     dda:	4b0a      	ldr	r3, [pc, #40]	; (e04 <selftest+0x34>)
     ddc:	4798      	blx	r3
     dde:	1e05      	subs	r5, r0, #0
     de0:	d000      	beq.n	de4 <selftest+0x14>
     de2:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
     de4:	4b08      	ldr	r3, [pc, #32]	; (e08 <selftest+0x38>)
     de6:	4798      	blx	r3
     de8:	1e04      	subs	r4, r0, #0
     dea:	d000      	beq.n	dee <selftest+0x1e>
     dec:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
     dee:	4807      	ldr	r0, [pc, #28]	; (e0c <selftest+0x3c>)
     df0:	4b07      	ldr	r3, [pc, #28]	; (e10 <selftest+0x40>)
     df2:	4798      	blx	r3
     df4:	2800      	cmp	r0, #0
     df6:	d000      	beq.n	dfa <selftest+0x2a>
     df8:	0020      	movs	r0, r4
}
     dfa:	bd70      	pop	{r4, r5, r6, pc}
     dfc:	000006f9 	.word	0x000006f9
     e00:	200002d4 	.word	0x200002d4
     e04:	00001121 	.word	0x00001121
     e08:	00000609 	.word	0x00000609
     e0c:	200002f0 	.word	0x200002f0
     e10:	000015b5 	.word	0x000015b5

00000e14 <init>:
bool init() {
     e14:	b570      	push	{r4, r5, r6, lr}
     e16:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
     e18:	22c0      	movs	r2, #192	; 0xc0
     e1a:	0412      	lsls	r2, r2, #16
     e1c:	2102      	movs	r1, #2
     e1e:	2000      	movs	r0, #0
     e20:	4c35      	ldr	r4, [pc, #212]	; (ef8 <init+0xe4>)
     e22:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
     e24:	2280      	movs	r2, #128	; 0x80
     e26:	0352      	lsls	r2, r2, #13
     e28:	2103      	movs	r1, #3
     e2a:	2000      	movs	r0, #0
     e2c:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
     e2e:	2480      	movs	r4, #128	; 0x80
     e30:	0564      	lsls	r4, r4, #21
     e32:	0021      	movs	r1, r4
     e34:	2000      	movs	r0, #0
     e36:	4e31      	ldr	r6, [pc, #196]	; (efc <init+0xe8>)
     e38:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
     e3a:	2580      	movs	r5, #128	; 0x80
     e3c:	062d      	lsls	r5, r5, #24
     e3e:	0029      	movs	r1, r5
     e40:	2001      	movs	r0, #1
     e42:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
     e44:	0021      	movs	r1, r4
     e46:	2000      	movs	r0, #0
     e48:	4c2d      	ldr	r4, [pc, #180]	; (f00 <init+0xec>)
     e4a:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
     e4c:	0029      	movs	r1, r5
     e4e:	2001      	movs	r0, #1
     e50:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     e52:	4b2c      	ldr	r3, [pc, #176]	; (f04 <init+0xf0>)
     e54:	9301      	str	r3, [sp, #4]
     e56:	2300      	movs	r3, #0
     e58:	9300      	str	r3, [sp, #0]
     e5a:	3302      	adds	r3, #2
     e5c:	2200      	movs	r2, #0
     e5e:	2100      	movs	r1, #0
     e60:	4829      	ldr	r0, [pc, #164]	; (f08 <init+0xf4>)
     e62:	4c2a      	ldr	r4, [pc, #168]	; (f0c <init+0xf8>)
     e64:	47a0      	blx	r4
     e66:	2800      	cmp	r0, #0
     e68:	d039      	beq.n	ede <init+0xca>
	dma_init();
     e6a:	4b29      	ldr	r3, [pc, #164]	; (f10 <init+0xfc>)
     e6c:	4798      	blx	r3
	if (!serial_init()) SOS();
     e6e:	4b29      	ldr	r3, [pc, #164]	; (f14 <init+0x100>)
     e70:	4798      	blx	r3
     e72:	2800      	cmp	r0, #0
     e74:	d036      	beq.n	ee4 <init+0xd0>
	if (!imu_init()) SOS();
     e76:	4b28      	ldr	r3, [pc, #160]	; (f18 <init+0x104>)
     e78:	4798      	blx	r3
     e7a:	2800      	cmp	r0, #0
     e7c:	d035      	beq.n	eea <init+0xd6>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
     e7e:	ab02      	add	r3, sp, #8
     e80:	2280      	movs	r2, #128	; 0x80
     e82:	0552      	lsls	r2, r2, #21
     e84:	9202      	str	r2, [sp, #8]
     e86:	2100      	movs	r1, #0
     e88:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
     e8a:	4824      	ldr	r0, [pc, #144]	; (f1c <init+0x108>)
     e8c:	9b03      	ldr	r3, [sp, #12]
     e8e:	491e      	ldr	r1, [pc, #120]	; (f08 <init+0xf4>)
     e90:	4c23      	ldr	r4, [pc, #140]	; (f20 <init+0x10c>)
     e92:	47a0      	blx	r4
     e94:	2800      	cmp	r0, #0
     e96:	d02b      	beq.n	ef0 <init+0xdc>
	init_eeprom();
     e98:	4b22      	ldr	r3, [pc, #136]	; (f24 <init+0x110>)
     e9a:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
     e9c:	ab02      	add	r3, sp, #8
     e9e:	4c22      	ldr	r4, [pc, #136]	; (f28 <init+0x114>)
     ea0:	6822      	ldr	r2, [r4, #0]
     ea2:	9202      	str	r2, [sp, #8]
     ea4:	7921      	ldrb	r1, [r4, #4]
     ea6:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
     ea8:	4d17      	ldr	r5, [pc, #92]	; (f08 <init+0xf4>)
     eaa:	4820      	ldr	r0, [pc, #128]	; (f2c <init+0x118>)
     eac:	2107      	movs	r1, #7
     eae:	9101      	str	r1, [sp, #4]
     eb0:	2180      	movs	r1, #128	; 0x80
     eb2:	03c9      	lsls	r1, r1, #15
     eb4:	9100      	str	r1, [sp, #0]
     eb6:	9b03      	ldr	r3, [sp, #12]
     eb8:	0029      	movs	r1, r5
     eba:	4e1d      	ldr	r6, [pc, #116]	; (f30 <init+0x11c>)
     ebc:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
     ebe:	2280      	movs	r2, #128	; 0x80
     ec0:	2190      	movs	r1, #144	; 0x90
     ec2:	481c      	ldr	r0, [pc, #112]	; (f34 <init+0x120>)
     ec4:	3408      	adds	r4, #8
     ec6:	9400      	str	r4, [sp, #0]
     ec8:	002b      	movs	r3, r5
     eca:	0092      	lsls	r2, r2, #2
     ecc:	0109      	lsls	r1, r1, #4
     ece:	4c1a      	ldr	r4, [pc, #104]	; (f38 <init+0x124>)
     ed0:	47a0      	blx	r4
	init_globals();
     ed2:	4b1a      	ldr	r3, [pc, #104]	; (f3c <init+0x128>)
     ed4:	4798      	blx	r3
	return selftest();
     ed6:	4b1a      	ldr	r3, [pc, #104]	; (f40 <init+0x12c>)
     ed8:	4798      	blx	r3
}
     eda:	b004      	add	sp, #16
     edc:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     ede:	4b19      	ldr	r3, [pc, #100]	; (f44 <init+0x130>)
     ee0:	4798      	blx	r3
     ee2:	e7c2      	b.n	e6a <init+0x56>
	if (!serial_init()) SOS();
     ee4:	4b17      	ldr	r3, [pc, #92]	; (f44 <init+0x130>)
     ee6:	4798      	blx	r3
     ee8:	e7c5      	b.n	e76 <init+0x62>
	if (!imu_init()) SOS();
     eea:	4b16      	ldr	r3, [pc, #88]	; (f44 <init+0x130>)
     eec:	4798      	blx	r3
     eee:	e7c6      	b.n	e7e <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
     ef0:	4b14      	ldr	r3, [pc, #80]	; (f44 <init+0x130>)
     ef2:	4798      	blx	r3
     ef4:	e7d0      	b.n	e98 <init+0x84>
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00001ac5 	.word	0x00001ac5
     efc:	00001aa5 	.word	0x00001aa5
     f00:	00001a95 	.word	0x00001a95
     f04:	005b8d80 	.word	0x005b8d80
     f08:	42001400 	.word	0x42001400
     f0c:	00001f29 	.word	0x00001f29
     f10:	00001211 	.word	0x00001211
     f14:	00000a31 	.word	0x00000a31
     f18:	00000679 	.word	0x00000679
     f1c:	200002d4 	.word	0x200002d4
     f20:	0000119d 	.word	0x0000119d
     f24:	000005b5 	.word	0x000005b5
     f28:	000052c0 	.word	0x000052c0
     f2c:	200002f0 	.word	0x200002f0
     f30:	0000152d 	.word	0x0000152d
     f34:	20000278 	.word	0x20000278
     f38:	000034b9 	.word	0x000034b9
     f3c:	0000052d 	.word	0x0000052d
     f40:	00000dd1 	.word	0x00000dd1
     f44:	00002ced 	.word	0x00002ced

00000f48 <main>:
int main(void) {
     f48:	b570      	push	{r4, r5, r6, lr}
	if (!init()) SOS();
     f4a:	4b0f      	ldr	r3, [pc, #60]	; (f88 <main+0x40>)
     f4c:	4798      	blx	r3
     f4e:	2800      	cmp	r0, #0
     f50:	d017      	beq.n	f82 <main+0x3a>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
     f52:	2380      	movs	r3, #128	; 0x80
     f54:	2280      	movs	r2, #128	; 0x80
     f56:	490d      	ldr	r1, [pc, #52]	; (f8c <main+0x44>)
     f58:	4d0d      	ldr	r5, [pc, #52]	; (f90 <main+0x48>)
     f5a:	1d2c      	adds	r4, r5, #4
     f5c:	005b      	lsls	r3, r3, #1
     f5e:	0112      	lsls	r2, r2, #4
     f60:	0020      	movs	r0, r4
     f62:	4e0c      	ldr	r6, [pc, #48]	; (f94 <main+0x4c>)
     f64:	47b0      	blx	r6
	bz_count = 2;
     f66:	2302      	movs	r3, #2
     f68:	602b      	str	r3, [r5, #0]
	dispatch_process(&bz);
     f6a:	0020      	movs	r0, r4
     f6c:	4b0a      	ldr	r3, [pc, #40]	; (f98 <main+0x50>)
     f6e:	4798      	blx	r3
	start_navigation();
     f70:	4b0a      	ldr	r3, [pc, #40]	; (f9c <main+0x54>)
     f72:	4798      	blx	r3
	comms_loop();
     f74:	4b0a      	ldr	r3, [pc, #40]	; (fa0 <main+0x58>)
     f76:	4798      	blx	r3
		rtos_delay_ms(1);
     f78:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <main+0x5c>)
     f7a:	6818      	ldr	r0, [r3, #0]
     f7c:	4b0a      	ldr	r3, [pc, #40]	; (fa8 <main+0x60>)
     f7e:	4798      	blx	r3
	while (1) {
     f80:	e7fa      	b.n	f78 <main+0x30>
	if (!init()) SOS();
     f82:	4b0a      	ldr	r3, [pc, #40]	; (fac <main+0x64>)
     f84:	4798      	blx	r3
     f86:	e7e4      	b.n	f52 <main+0xa>
     f88:	00000e15 	.word	0x00000e15
     f8c:	00000ce5 	.word	0x00000ce5
     f90:	20000220 	.word	0x20000220
     f94:	00002dad 	.word	0x00002dad
     f98:	00002e95 	.word	0x00002e95
     f9c:	00000fd5 	.word	0x00000fd5
     fa0:	00000435 	.word	0x00000435
     fa4:	000053b4 	.word	0x000053b4
     fa8:	00003215 	.word	0x00003215
     fac:	00002ced 	.word	0x00002ced

00000fb0 <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
     fb0:	b510      	push	{r4, lr}
	while (1) {
        // led_on();
		request_imu_data();
     fb2:	4b04      	ldr	r3, [pc, #16]	; (fc4 <navigation+0x14>)
     fb4:	4798      	blx	r3
		wait_for_imu_data();
     fb6:	4b04      	ldr	r3, [pc, #16]	; (fc8 <navigation+0x18>)
     fb8:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(1);
     fba:	4b04      	ldr	r3, [pc, #16]	; (fcc <navigation+0x1c>)
     fbc:	6818      	ldr	r0, [r3, #0]
     fbe:	4b04      	ldr	r3, [pc, #16]	; (fd0 <navigation+0x20>)
     fc0:	4798      	blx	r3
	while (1) {
     fc2:	e7f6      	b.n	fb2 <navigation+0x2>
     fc4:	0000073d 	.word	0x0000073d
     fc8:	00000775 	.word	0x00000775
     fcc:	000053b4 	.word	0x000053b4
     fd0:	00003215 	.word	0x00003215

00000fd4 <start_navigation>:
	}
}

void start_navigation() {
     fd4:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
     fd6:	23c0      	movs	r3, #192	; 0xc0
     fd8:	22b0      	movs	r2, #176	; 0xb0
     fda:	4905      	ldr	r1, [pc, #20]	; (ff0 <start_navigation+0x1c>)
     fdc:	4c05      	ldr	r4, [pc, #20]	; (ff4 <start_navigation+0x20>)
     fde:	009b      	lsls	r3, r3, #2
     fe0:	0112      	lsls	r2, r2, #4
     fe2:	0020      	movs	r0, r4
     fe4:	4d04      	ldr	r5, [pc, #16]	; (ff8 <start_navigation+0x24>)
     fe6:	47a8      	blx	r5
    dispatch_process(&navigation_process);
     fe8:	0020      	movs	r0, r4
     fea:	4b04      	ldr	r3, [pc, #16]	; (ffc <start_navigation+0x28>)
     fec:	4798      	blx	r3
     fee:	bd70      	pop	{r4, r5, r6, pc}
     ff0:	00000fb1 	.word	0x00000fb1
     ff4:	2000024c 	.word	0x2000024c
     ff8:	00002dad 	.word	0x00002dad
     ffc:	00002e95 	.word	0x00002e95

00001000 <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
    1000:	b570      	push	{r4, r5, r6, lr}
    1002:	0004      	movs	r4, r0
    1004:	000e      	movs	r6, r1
    1006:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
    1008:	7d03      	ldrb	r3, [r0, #20]
    100a:	7d42      	ldrb	r2, [r0, #21]
    100c:	0212      	lsls	r2, r2, #8
    100e:	431a      	orrs	r2, r3
    1010:	7d83      	ldrb	r3, [r0, #22]
    1012:	041b      	lsls	r3, r3, #16
    1014:	4313      	orrs	r3, r2
    1016:	7dc1      	ldrb	r1, [r0, #23]
    1018:	0609      	lsls	r1, r1, #24
    101a:	4319      	orrs	r1, r3
    101c:	7e00      	ldrb	r0, [r0, #24]
    101e:	4b11      	ldr	r3, [pc, #68]	; (1064 <baro_send_command+0x64>)
    1020:	4798      	blx	r3
	spi_command(desc->sercom, command);
    1022:	7c23      	ldrb	r3, [r4, #16]
    1024:	7c62      	ldrb	r2, [r4, #17]
    1026:	0212      	lsls	r2, r2, #8
    1028:	431a      	orrs	r2, r3
    102a:	7ca3      	ldrb	r3, [r4, #18]
    102c:	041b      	lsls	r3, r3, #16
    102e:	4313      	orrs	r3, r2
    1030:	7ce0      	ldrb	r0, [r4, #19]
    1032:	0600      	lsls	r0, r0, #24
    1034:	4318      	orrs	r0, r3
    1036:	0031      	movs	r1, r6
    1038:	4b0b      	ldr	r3, [pc, #44]	; (1068 <baro_send_command+0x68>)
    103a:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    103c:	7d23      	ldrb	r3, [r4, #20]
    103e:	7d62      	ldrb	r2, [r4, #21]
    1040:	0212      	lsls	r2, r2, #8
    1042:	431a      	orrs	r2, r3
    1044:	7da3      	ldrb	r3, [r4, #22]
    1046:	041b      	lsls	r3, r3, #16
    1048:	4313      	orrs	r3, r2
    104a:	7de1      	ldrb	r1, [r4, #23]
    104c:	0609      	lsls	r1, r1, #24
    104e:	4319      	orrs	r1, r3
    1050:	7e20      	ldrb	r0, [r4, #24]
    1052:	4b06      	ldr	r3, [pc, #24]	; (106c <baro_send_command+0x6c>)
    1054:	4798      	blx	r3
	delay_us(delay);
    1056:	0068      	lsls	r0, r5, #1
    1058:	1940      	adds	r0, r0, r5
    105a:	0040      	lsls	r0, r0, #1
    105c:	4b04      	ldr	r3, [pc, #16]	; (1070 <baro_send_command+0x70>)
    105e:	4798      	blx	r3
}
    1060:	bd70      	pop	{r4, r5, r6, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	00001ab5 	.word	0x00001ab5
    1068:	00001f91 	.word	0x00001f91
    106c:	00001aa5 	.word	0x00001aa5
    1070:	00002075 	.word	0x00002075

00001074 <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
    1074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1076:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    1078:	26a0      	movs	r6, #160	; 0xa0
    107a:	e047      	b.n	110c <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
    107c:	7d23      	ldrb	r3, [r4, #20]
    107e:	7d62      	ldrb	r2, [r4, #21]
    1080:	0212      	lsls	r2, r2, #8
    1082:	431a      	orrs	r2, r3
    1084:	7da3      	ldrb	r3, [r4, #22]
    1086:	041b      	lsls	r3, r3, #16
    1088:	4313      	orrs	r3, r2
    108a:	7de1      	ldrb	r1, [r4, #23]
    108c:	0609      	lsls	r1, r1, #24
    108e:	4319      	orrs	r1, r3
    1090:	7e20      	ldrb	r0, [r4, #24]
    1092:	4b20      	ldr	r3, [pc, #128]	; (1114 <baro_read_prom+0xa0>)
    1094:	4798      	blx	r3
		spi_command(desc->sercom, addr);
    1096:	7c23      	ldrb	r3, [r4, #16]
    1098:	7c62      	ldrb	r2, [r4, #17]
    109a:	0212      	lsls	r2, r2, #8
    109c:	431a      	orrs	r2, r3
    109e:	7ca3      	ldrb	r3, [r4, #18]
    10a0:	041b      	lsls	r3, r3, #16
    10a2:	4313      	orrs	r3, r2
    10a4:	7ce0      	ldrb	r0, [r4, #19]
    10a6:	0600      	lsls	r0, r0, #24
    10a8:	4318      	orrs	r0, r3
    10aa:	0031      	movs	r1, r6
    10ac:	4f1a      	ldr	r7, [pc, #104]	; (1118 <baro_read_prom+0xa4>)
    10ae:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
    10b0:	7c23      	ldrb	r3, [r4, #16]
    10b2:	7c62      	ldrb	r2, [r4, #17]
    10b4:	0212      	lsls	r2, r2, #8
    10b6:	431a      	orrs	r2, r3
    10b8:	7ca3      	ldrb	r3, [r4, #18]
    10ba:	041b      	lsls	r3, r3, #16
    10bc:	4313      	orrs	r3, r2
    10be:	7ce0      	ldrb	r0, [r4, #19]
    10c0:	0600      	lsls	r0, r0, #24
    10c2:	4318      	orrs	r0, r3
    10c4:	2100      	movs	r1, #0
    10c6:	47b8      	blx	r7
    10c8:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
    10ca:	7c23      	ldrb	r3, [r4, #16]
    10cc:	7c62      	ldrb	r2, [r4, #17]
    10ce:	0212      	lsls	r2, r2, #8
    10d0:	431a      	orrs	r2, r3
    10d2:	7ca3      	ldrb	r3, [r4, #18]
    10d4:	041b      	lsls	r3, r3, #16
    10d6:	4313      	orrs	r3, r2
    10d8:	7ce0      	ldrb	r0, [r4, #19]
    10da:	0600      	lsls	r0, r0, #24
    10dc:	4318      	orrs	r0, r3
    10de:	2100      	movs	r1, #0
    10e0:	47b8      	blx	r7
    10e2:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
    10e4:	7d23      	ldrb	r3, [r4, #20]
    10e6:	7d62      	ldrb	r2, [r4, #21]
    10e8:	0212      	lsls	r2, r2, #8
    10ea:	431a      	orrs	r2, r3
    10ec:	7da3      	ldrb	r3, [r4, #22]
    10ee:	041b      	lsls	r3, r3, #16
    10f0:	4313      	orrs	r3, r2
    10f2:	7de1      	ldrb	r1, [r4, #23]
    10f4:	0609      	lsls	r1, r1, #24
    10f6:	4319      	orrs	r1, r3
    10f8:	7e20      	ldrb	r0, [r4, #24]
    10fa:	4b08      	ldr	r3, [pc, #32]	; (111c <baro_read_prom+0xa8>)
    10fc:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
    10fe:	0033      	movs	r3, r6
    1100:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
    1102:	022d      	lsls	r5, r5, #8
    1104:	433d      	orrs	r5, r7
    1106:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    1108:	3602      	adds	r6, #2
    110a:	b2f6      	uxtb	r6, r6
    110c:	2eae      	cmp	r6, #174	; 0xae
    110e:	d9b5      	bls.n	107c <baro_read_prom+0x8>
}
    1110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	00001ab5 	.word	0x00001ab5
    1118:	00001f91 	.word	0x00001f91
    111c:	00001aa5 	.word	0x00001aa5

00001120 <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
    1120:	b530      	push	{r4, r5, lr}
    1122:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
    1124:	7b83      	ldrb	r3, [r0, #14]
    1126:	7bc5      	ldrb	r5, [r0, #15]
    1128:	022d      	lsls	r5, r5, #8
    112a:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
    112c:	23ff      	movs	r3, #255	; 0xff
    112e:	002a      	movs	r2, r5
    1130:	439a      	bics	r2, r3
    1132:	0013      	movs	r3, r2
    1134:	2200      	movs	r2, #0
    1136:	7382      	strb	r2, [r0, #14]
    1138:	0a1b      	lsrs	r3, r3, #8
    113a:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
    113c:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
    113e:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
    1140:	e014      	b.n	116c <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1142:	1042      	asrs	r2, r0, #1
    1144:	0052      	lsls	r2, r2, #1
    1146:	5aa2      	ldrh	r2, [r4, r2]
    1148:	0a12      	lsrs	r2, r2, #8
    114a:	e018      	b.n	117e <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    114c:	005b      	lsls	r3, r3, #1
    114e:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
    1150:	3201      	adds	r2, #1
    1152:	2a07      	cmp	r2, #7
    1154:	dc09      	bgt.n	116a <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1156:	b219      	sxth	r1, r3
    1158:	2900      	cmp	r1, #0
    115a:	daf7      	bge.n	114c <baro_check+0x2c>
    115c:	0059      	lsls	r1, r3, #1
    115e:	23c0      	movs	r3, #192	; 0xc0
    1160:	019b      	lsls	r3, r3, #6
    1162:	404b      	eors	r3, r1
    1164:	b21b      	sxth	r3, r3
    1166:	b29b      	uxth	r3, r3
    1168:	e7f2      	b.n	1150 <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
    116a:	3001      	adds	r0, #1
    116c:	280f      	cmp	r0, #15
    116e:	dc09      	bgt.n	1184 <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1170:	07c2      	lsls	r2, r0, #31
    1172:	d5e6      	bpl.n	1142 <baro_check+0x22>
    1174:	1042      	asrs	r2, r0, #1
    1176:	0052      	lsls	r2, r2, #1
    1178:	5aa1      	ldrh	r1, [r4, r2]
    117a:	22ff      	movs	r2, #255	; 0xff
    117c:	400a      	ands	r2, r1
		n_rem ^= byte;
    117e:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
    1180:	2200      	movs	r2, #0
    1182:	e7e6      	b.n	1152 <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
    1184:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
    1186:	73a5      	strb	r5, [r4, #14]
    1188:	0a2a      	lsrs	r2, r5, #8
    118a:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
    118c:	200f      	movs	r0, #15
    118e:	4028      	ands	r0, r5
    1190:	1ac0      	subs	r0, r0, r3
    1192:	4243      	negs	r3, r0
    1194:	4158      	adcs	r0, r3
    1196:	b2c0      	uxtb	r0, r0
}
    1198:	bd30      	pop	{r4, r5, pc}
	...

0000119c <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    119c:	b570      	push	{r4, r5, r6, lr}
    119e:	b082      	sub	sp, #8
    11a0:	0005      	movs	r5, r0
    11a2:	000c      	movs	r4, r1
    11a4:	9200      	str	r2, [sp, #0]
    11a6:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    11a8:	0008      	movs	r0, r1
    11aa:	4b0e      	ldr	r3, [pc, #56]	; (11e4 <baro_init+0x48>)
    11ac:	4798      	blx	r3
    11ae:	1e06      	subs	r6, r0, #0
    11b0:	d102      	bne.n	11b8 <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
    11b2:	0030      	movs	r0, r6
    11b4:	b002      	add	sp, #8
    11b6:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
    11b8:	742c      	strb	r4, [r5, #16]
    11ba:	0a23      	lsrs	r3, r4, #8
    11bc:	746b      	strb	r3, [r5, #17]
    11be:	0c23      	lsrs	r3, r4, #16
    11c0:	74ab      	strb	r3, [r5, #18]
    11c2:	0e24      	lsrs	r4, r4, #24
    11c4:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
    11c6:	0028      	movs	r0, r5
    11c8:	3014      	adds	r0, #20
    11ca:	2205      	movs	r2, #5
    11cc:	4669      	mov	r1, sp
    11ce:	4b06      	ldr	r3, [pc, #24]	; (11e8 <baro_init+0x4c>)
    11d0:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
    11d2:	4a06      	ldr	r2, [pc, #24]	; (11ec <baro_init+0x50>)
    11d4:	211e      	movs	r1, #30
    11d6:	0028      	movs	r0, r5
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <baro_init+0x54>)
    11da:	4798      	blx	r3
	baro_read_prom(desc);
    11dc:	0028      	movs	r0, r5
    11de:	4b05      	ldr	r3, [pc, #20]	; (11f4 <baro_init+0x58>)
    11e0:	4798      	blx	r3
	return true;
    11e2:	e7e6      	b.n	11b2 <baro_init+0x16>
    11e4:	00001da1 	.word	0x00001da1
    11e8:	00005059 	.word	0x00005059
    11ec:	00000bb8 	.word	0x00000bb8
    11f0:	00001001 	.word	0x00001001
    11f4:	00001075 	.word	0x00001075

000011f8 <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
    11f8:	280b      	cmp	r0, #11
    11fa:	d804      	bhi.n	1206 <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
    11fc:	4a03      	ldr	r2, [pc, #12]	; (120c <dma_set_channel+0x14>)
    11fe:	233f      	movs	r3, #63	; 0x3f
    1200:	54d0      	strb	r0, [r2, r3]
		return true;
    1202:	2001      	movs	r0, #1
	}
	else return false;
}
    1204:	4770      	bx	lr
	else return false;
    1206:	2000      	movs	r0, #0
    1208:	e7fc      	b.n	1204 <dma_set_channel+0xc>
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	41004800 	.word	0x41004800

00001210 <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <dma_init+0x20>)
    1212:	695a      	ldr	r2, [r3, #20]
    1214:	2120      	movs	r1, #32
    1216:	430a      	orrs	r2, r1
    1218:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
    121a:	69da      	ldr	r2, [r3, #28]
    121c:	430a      	orrs	r2, r1
    121e:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
    1220:	4a04      	ldr	r2, [pc, #16]	; (1234 <dma_init+0x24>)
    1222:	4b05      	ldr	r3, [pc, #20]	; (1238 <dma_init+0x28>)
    1224:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
    1226:	4a05      	ldr	r2, [pc, #20]	; (123c <dma_init+0x2c>)
    1228:	639a      	str	r2, [r3, #56]	; 0x38
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
    122a:	4a05      	ldr	r2, [pc, #20]	; (1240 <dma_init+0x30>)
    122c:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
    122e:	4770      	bx	lr
    1230:	40000400 	.word	0x40000400
    1234:	200003a0 	.word	0x200003a0
    1238:	41004800 	.word	0x41004800
    123c:	20000300 	.word	0x20000300
    1240:	00000f02 	.word	0x00000f02

00001244 <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
    1244:	b5f0      	push	{r4, r5, r6, r7, lr}
    1246:	ac05      	add	r4, sp, #20
    1248:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
    124a:	2b02      	cmp	r3, #2
    124c:	d82d      	bhi.n	12aa <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    124e:	2900      	cmp	r1, #0
    1250:	d023      	beq.n	129a <dma_create_descriptor+0x56>
    1252:	2480      	movs	r4, #128	; 0x80
    1254:	00e4      	lsls	r4, r4, #3
    1256:	2a00      	cmp	r2, #0
    1258:	d021      	beq.n	129e <dma_create_descriptor+0x5a>
    125a:	2580      	movs	r5, #128	; 0x80
    125c:	012d      	lsls	r5, r5, #4
    125e:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
    1260:	021d      	lsls	r5, r3, #8
    1262:	27c0      	movs	r7, #192	; 0xc0
    1264:	00bf      	lsls	r7, r7, #2
    1266:	403d      	ands	r5, r7
    1268:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
    126a:	2501      	movs	r5, #1
    126c:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
    126e:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
    1270:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    1272:	2900      	cmp	r1, #0
    1274:	d015      	beq.n	12a2 <dma_create_descriptor+0x5e>
    1276:	1c59      	adds	r1, r3, #1
    1278:	4371      	muls	r1, r6
    127a:	9c06      	ldr	r4, [sp, #24]
    127c:	46a4      	mov	ip, r4
    127e:	4461      	add	r1, ip
    1280:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    1282:	2a00      	cmp	r2, #0
    1284:	d00f      	beq.n	12a6 <dma_create_descriptor+0x62>
    1286:	3301      	adds	r3, #1
    1288:	4373      	muls	r3, r6
    128a:	9a07      	ldr	r2, [sp, #28]
    128c:	4694      	mov	ip, r2
    128e:	4463      	add	r3, ip
    1290:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
    1292:	9b08      	ldr	r3, [sp, #32]
    1294:	60c3      	str	r3, [r0, #12]
	
	return true;
    1296:	2001      	movs	r0, #1
}
    1298:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    129a:	2400      	movs	r4, #0
    129c:	e7db      	b.n	1256 <dma_create_descriptor+0x12>
    129e:	2500      	movs	r5, #0
    12a0:	e7dd      	b.n	125e <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    12a2:	9906      	ldr	r1, [sp, #24]
    12a4:	e7ec      	b.n	1280 <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    12a6:	9b07      	ldr	r3, [sp, #28]
    12a8:	e7f2      	b.n	1290 <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
    12aa:	2000      	movs	r0, #0
    12ac:	e7f4      	b.n	1298 <dma_create_descriptor+0x54>
	...

000012b0 <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
    12b0:	b570      	push	{r4, r5, r6, lr}
    12b2:	000c      	movs	r4, r1
    12b4:	0015      	movs	r5, r2
    12b6:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
    12b8:	4b0e      	ldr	r3, [pc, #56]	; (12f4 <dma_init_channel+0x44>)
    12ba:	4798      	blx	r3
    12bc:	2800      	cmp	r0, #0
    12be:	d012      	beq.n	12e6 <dma_init_channel+0x36>
	if (priority > 3) return false;
    12c0:	2e03      	cmp	r6, #3
    12c2:	d811      	bhi.n	12e8 <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
    12c4:	2c03      	cmp	r4, #3
    12c6:	d811      	bhi.n	12ec <dma_init_channel+0x3c>
    12c8:	2c01      	cmp	r4, #1
    12ca:	d011      	beq.n	12f0 <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    12cc:	05a4      	lsls	r4, r4, #22
    12ce:	23c0      	movs	r3, #192	; 0xc0
    12d0:	041b      	lsls	r3, r3, #16
    12d2:	401c      	ands	r4, r3
    12d4:	022d      	lsls	r5, r5, #8
    12d6:	23fc      	movs	r3, #252	; 0xfc
    12d8:	019b      	lsls	r3, r3, #6
    12da:	401d      	ands	r5, r3
    12dc:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
    12de:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    12e0:	4334      	orrs	r4, r6
    12e2:	4a05      	ldr	r2, [pc, #20]	; (12f8 <dma_init_channel+0x48>)
    12e4:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
    12e6:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
    12e8:	2000      	movs	r0, #0
    12ea:	e7fc      	b.n	12e6 <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
    12ec:	2000      	movs	r0, #0
    12ee:	e7fa      	b.n	12e6 <dma_init_channel+0x36>
    12f0:	2000      	movs	r0, #0
    12f2:	e7f8      	b.n	12e6 <dma_init_channel+0x36>
    12f4:	000011f9 	.word	0x000011f9
    12f8:	41004800 	.word	0x41004800

000012fc <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
    12fc:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    12fe:	4b07      	ldr	r3, [pc, #28]	; (131c <dma_enable_channel+0x20>)
    1300:	4798      	blx	r3
    1302:	2800      	cmp	r0, #0
    1304:	d009      	beq.n	131a <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
    1306:	4a06      	ldr	r2, [pc, #24]	; (1320 <dma_enable_channel+0x24>)
    1308:	234e      	movs	r3, #78	; 0x4e
    130a:	2102      	movs	r1, #2
    130c:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
    130e:	313e      	adds	r1, #62	; 0x3e
    1310:	5c53      	ldrb	r3, [r2, r1]
    1312:	2402      	movs	r4, #2
    1314:	4323      	orrs	r3, r4
    1316:	b2db      	uxtb	r3, r3
    1318:	5453      	strb	r3, [r2, r1]
	return true;
}
    131a:	bd10      	pop	{r4, pc}
    131c:	000011f9 	.word	0x000011f9
    1320:	41004800 	.word	0x41004800

00001324 <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
    1324:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <dma_disable_channel+0x18>)
    1328:	4798      	blx	r3
    132a:	2800      	cmp	r0, #0
    132c:	d005      	beq.n	133a <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
    132e:	4904      	ldr	r1, [pc, #16]	; (1340 <dma_disable_channel+0x1c>)
    1330:	2240      	movs	r2, #64	; 0x40
    1332:	5c8b      	ldrb	r3, [r1, r2]
    1334:	2402      	movs	r4, #2
    1336:	43a3      	bics	r3, r4
    1338:	548b      	strb	r3, [r1, r2]
	return true;
}
    133a:	bd10      	pop	{r4, pc}
    133c:	000011f9 	.word	0x000011f9
    1340:	41004800 	.word	0x41004800

00001344 <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
    1344:	b530      	push	{r4, r5, lr}
    1346:	b083      	sub	sp, #12
    1348:	0004      	movs	r4, r0
    134a:	9200      	str	r2, [sp, #0]
    134c:	9301      	str	r3, [sp, #4]
    134e:	ab06      	add	r3, sp, #24
    1350:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
    1352:	7001      	strb	r1, [r0, #0]
    1354:	0a0b      	lsrs	r3, r1, #8
    1356:	7043      	strb	r3, [r0, #1]
    1358:	0c0b      	lsrs	r3, r1, #16
    135a:	7083      	strb	r3, [r0, #2]
    135c:	0e09      	lsrs	r1, r1, #24
    135e:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1360:	3004      	adds	r0, #4
    1362:	2205      	movs	r2, #5
    1364:	4669      	mov	r1, sp
    1366:	4b10      	ldr	r3, [pc, #64]	; (13a8 <eeprom_init+0x64>)
    1368:	4798      	blx	r3
	desc->size = size;
    136a:	7265      	strb	r5, [r4, #9]
    136c:	0a2d      	lsrs	r5, r5, #8
    136e:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1370:	7923      	ldrb	r3, [r4, #4]
    1372:	7962      	ldrb	r2, [r4, #5]
    1374:	0212      	lsls	r2, r2, #8
    1376:	431a      	orrs	r2, r3
    1378:	79a3      	ldrb	r3, [r4, #6]
    137a:	041b      	lsls	r3, r3, #16
    137c:	4313      	orrs	r3, r2
    137e:	79e1      	ldrb	r1, [r4, #7]
    1380:	0609      	lsls	r1, r1, #24
    1382:	4319      	orrs	r1, r3
    1384:	7a20      	ldrb	r0, [r4, #8]
    1386:	4b09      	ldr	r3, [pc, #36]	; (13ac <eeprom_init+0x68>)
    1388:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    138a:	7923      	ldrb	r3, [r4, #4]
    138c:	7962      	ldrb	r2, [r4, #5]
    138e:	0212      	lsls	r2, r2, #8
    1390:	431a      	orrs	r2, r3
    1392:	79a3      	ldrb	r3, [r4, #6]
    1394:	041b      	lsls	r3, r3, #16
    1396:	4313      	orrs	r3, r2
    1398:	79e1      	ldrb	r1, [r4, #7]
    139a:	0609      	lsls	r1, r1, #24
    139c:	4319      	orrs	r1, r3
    139e:	7a20      	ldrb	r0, [r4, #8]
    13a0:	4b03      	ldr	r3, [pc, #12]	; (13b0 <eeprom_init+0x6c>)
    13a2:	4798      	blx	r3
}
    13a4:	b003      	add	sp, #12
    13a6:	bd30      	pop	{r4, r5, pc}
    13a8:	00005059 	.word	0x00005059
    13ac:	00001a95 	.word	0x00001a95
    13b0:	00001aa5 	.word	0x00001aa5

000013b4 <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
    13b4:	b510      	push	{r4, lr}
    13b6:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    13b8:	7903      	ldrb	r3, [r0, #4]
    13ba:	7942      	ldrb	r2, [r0, #5]
    13bc:	0212      	lsls	r2, r2, #8
    13be:	431a      	orrs	r2, r3
    13c0:	7983      	ldrb	r3, [r0, #6]
    13c2:	041b      	lsls	r3, r3, #16
    13c4:	4313      	orrs	r3, r2
    13c6:	79c1      	ldrb	r1, [r0, #7]
    13c8:	0609      	lsls	r1, r1, #24
    13ca:	4319      	orrs	r1, r3
    13cc:	7a00      	ldrb	r0, [r0, #8]
    13ce:	4b0e      	ldr	r3, [pc, #56]	; (1408 <eeprom_write_enable+0x54>)
    13d0:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
    13d2:	7823      	ldrb	r3, [r4, #0]
    13d4:	7862      	ldrb	r2, [r4, #1]
    13d6:	0212      	lsls	r2, r2, #8
    13d8:	431a      	orrs	r2, r3
    13da:	78a3      	ldrb	r3, [r4, #2]
    13dc:	041b      	lsls	r3, r3, #16
    13de:	4313      	orrs	r3, r2
    13e0:	78e0      	ldrb	r0, [r4, #3]
    13e2:	0600      	lsls	r0, r0, #24
    13e4:	4318      	orrs	r0, r3
    13e6:	2106      	movs	r1, #6
    13e8:	4b08      	ldr	r3, [pc, #32]	; (140c <eeprom_write_enable+0x58>)
    13ea:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    13ec:	7923      	ldrb	r3, [r4, #4]
    13ee:	7962      	ldrb	r2, [r4, #5]
    13f0:	0212      	lsls	r2, r2, #8
    13f2:	431a      	orrs	r2, r3
    13f4:	79a3      	ldrb	r3, [r4, #6]
    13f6:	041b      	lsls	r3, r3, #16
    13f8:	4313      	orrs	r3, r2
    13fa:	79e1      	ldrb	r1, [r4, #7]
    13fc:	0609      	lsls	r1, r1, #24
    13fe:	4319      	orrs	r1, r3
    1400:	7a20      	ldrb	r0, [r4, #8]
    1402:	4b03      	ldr	r3, [pc, #12]	; (1410 <eeprom_write_enable+0x5c>)
    1404:	4798      	blx	r3
}
    1406:	bd10      	pop	{r4, pc}
    1408:	00001ab5 	.word	0x00001ab5
    140c:	00001f91 	.word	0x00001f91
    1410:	00001aa5 	.word	0x00001aa5

00001414 <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
    1414:	b510      	push	{r4, lr}
    1416:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1418:	7903      	ldrb	r3, [r0, #4]
    141a:	7942      	ldrb	r2, [r0, #5]
    141c:	0212      	lsls	r2, r2, #8
    141e:	431a      	orrs	r2, r3
    1420:	7983      	ldrb	r3, [r0, #6]
    1422:	041b      	lsls	r3, r3, #16
    1424:	4313      	orrs	r3, r2
    1426:	79c1      	ldrb	r1, [r0, #7]
    1428:	0609      	lsls	r1, r1, #24
    142a:	4319      	orrs	r1, r3
    142c:	7a00      	ldrb	r0, [r0, #8]
    142e:	4b0e      	ldr	r3, [pc, #56]	; (1468 <eeprom_write_disable+0x54>)
    1430:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
    1432:	7823      	ldrb	r3, [r4, #0]
    1434:	7862      	ldrb	r2, [r4, #1]
    1436:	0212      	lsls	r2, r2, #8
    1438:	431a      	orrs	r2, r3
    143a:	78a3      	ldrb	r3, [r4, #2]
    143c:	041b      	lsls	r3, r3, #16
    143e:	4313      	orrs	r3, r2
    1440:	78e0      	ldrb	r0, [r4, #3]
    1442:	0600      	lsls	r0, r0, #24
    1444:	4318      	orrs	r0, r3
    1446:	2104      	movs	r1, #4
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <eeprom_write_disable+0x58>)
    144a:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    144c:	7923      	ldrb	r3, [r4, #4]
    144e:	7962      	ldrb	r2, [r4, #5]
    1450:	0212      	lsls	r2, r2, #8
    1452:	431a      	orrs	r2, r3
    1454:	79a3      	ldrb	r3, [r4, #6]
    1456:	041b      	lsls	r3, r3, #16
    1458:	4313      	orrs	r3, r2
    145a:	79e1      	ldrb	r1, [r4, #7]
    145c:	0609      	lsls	r1, r1, #24
    145e:	4319      	orrs	r1, r3
    1460:	7a20      	ldrb	r0, [r4, #8]
    1462:	4b03      	ldr	r3, [pc, #12]	; (1470 <eeprom_write_disable+0x5c>)
    1464:	4798      	blx	r3
}
    1466:	bd10      	pop	{r4, pc}
    1468:	00001ab5 	.word	0x00001ab5
    146c:	00001f91 	.word	0x00001f91
    1470:	00001aa5 	.word	0x00001aa5

00001474 <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
    1474:	b570      	push	{r4, r5, r6, lr}
    1476:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1478:	7903      	ldrb	r3, [r0, #4]
    147a:	7942      	ldrb	r2, [r0, #5]
    147c:	0212      	lsls	r2, r2, #8
    147e:	431a      	orrs	r2, r3
    1480:	7983      	ldrb	r3, [r0, #6]
    1482:	041b      	lsls	r3, r3, #16
    1484:	4313      	orrs	r3, r2
    1486:	79c1      	ldrb	r1, [r0, #7]
    1488:	0609      	lsls	r1, r1, #24
    148a:	4319      	orrs	r1, r3
    148c:	7a00      	ldrb	r0, [r0, #8]
    148e:	4b15      	ldr	r3, [pc, #84]	; (14e4 <eeprom_read_status+0x70>)
    1490:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
    1492:	7823      	ldrb	r3, [r4, #0]
    1494:	7862      	ldrb	r2, [r4, #1]
    1496:	0212      	lsls	r2, r2, #8
    1498:	431a      	orrs	r2, r3
    149a:	78a3      	ldrb	r3, [r4, #2]
    149c:	041b      	lsls	r3, r3, #16
    149e:	4313      	orrs	r3, r2
    14a0:	78e0      	ldrb	r0, [r4, #3]
    14a2:	0600      	lsls	r0, r0, #24
    14a4:	4318      	orrs	r0, r3
    14a6:	2105      	movs	r1, #5
    14a8:	4d0f      	ldr	r5, [pc, #60]	; (14e8 <eeprom_read_status+0x74>)
    14aa:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
    14ac:	7823      	ldrb	r3, [r4, #0]
    14ae:	7862      	ldrb	r2, [r4, #1]
    14b0:	0212      	lsls	r2, r2, #8
    14b2:	431a      	orrs	r2, r3
    14b4:	78a3      	ldrb	r3, [r4, #2]
    14b6:	041b      	lsls	r3, r3, #16
    14b8:	4313      	orrs	r3, r2
    14ba:	78e0      	ldrb	r0, [r4, #3]
    14bc:	0600      	lsls	r0, r0, #24
    14be:	4318      	orrs	r0, r3
    14c0:	2100      	movs	r1, #0
    14c2:	47a8      	blx	r5
    14c4:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
    14c6:	7923      	ldrb	r3, [r4, #4]
    14c8:	7962      	ldrb	r2, [r4, #5]
    14ca:	0212      	lsls	r2, r2, #8
    14cc:	431a      	orrs	r2, r3
    14ce:	79a3      	ldrb	r3, [r4, #6]
    14d0:	041b      	lsls	r3, r3, #16
    14d2:	4313      	orrs	r3, r2
    14d4:	79e1      	ldrb	r1, [r4, #7]
    14d6:	0609      	lsls	r1, r1, #24
    14d8:	4319      	orrs	r1, r3
    14da:	7a20      	ldrb	r0, [r4, #8]
    14dc:	4b03      	ldr	r3, [pc, #12]	; (14ec <eeprom_read_status+0x78>)
    14de:	4798      	blx	r3
}
    14e0:	0028      	movs	r0, r5
    14e2:	bd70      	pop	{r4, r5, r6, pc}
    14e4:	00001ab5 	.word	0x00001ab5
    14e8:	00001f91 	.word	0x00001f91
    14ec:	00001aa5 	.word	0x00001aa5

000014f0 <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
    14f0:	b510      	push	{r4, lr}
    14f2:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
    14f4:	4b0a      	ldr	r3, [pc, #40]	; (1520 <eeprom_check+0x30>)
    14f6:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
    14f8:	0020      	movs	r0, r4
    14fa:	4b0a      	ldr	r3, [pc, #40]	; (1524 <eeprom_check+0x34>)
    14fc:	4798      	blx	r3
    14fe:	0780      	lsls	r0, r0, #30
    1500:	d401      	bmi.n	1506 <eeprom_check+0x16>
    1502:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
    1504:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
    1506:	0020      	movs	r0, r4
    1508:	4b07      	ldr	r3, [pc, #28]	; (1528 <eeprom_check+0x38>)
    150a:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    150c:	0020      	movs	r0, r4
    150e:	4b05      	ldr	r3, [pc, #20]	; (1524 <eeprom_check+0x34>)
    1510:	4798      	blx	r3
    1512:	0780      	lsls	r0, r0, #30
    1514:	d401      	bmi.n	151a <eeprom_check+0x2a>
	return true;
    1516:	2001      	movs	r0, #1
    1518:	e7f4      	b.n	1504 <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    151a:	2000      	movs	r0, #0
    151c:	e7f2      	b.n	1504 <eeprom_check+0x14>
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	000013b5 	.word	0x000013b5
    1524:	00001475 	.word	0x00001475
    1528:	00001415 	.word	0x00001415

0000152c <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	b082      	sub	sp, #8
    1530:	0004      	movs	r4, r0
    1532:	9200      	str	r2, [sp, #0]
    1534:	9301      	str	r3, [sp, #4]
    1536:	ab06      	add	r3, sp, #24
    1538:	cb20      	ldmia	r3!, {r5}
    153a:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
    153c:	7001      	strb	r1, [r0, #0]
    153e:	0a0b      	lsrs	r3, r1, #8
    1540:	7043      	strb	r3, [r0, #1]
    1542:	0c0b      	lsrs	r3, r1, #16
    1544:	7083      	strb	r3, [r0, #2]
    1546:	0e09      	lsrs	r1, r1, #24
    1548:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    154a:	3008      	adds	r0, #8
    154c:	2205      	movs	r2, #5
    154e:	4669      	mov	r1, sp
    1550:	4b15      	ldr	r3, [pc, #84]	; (15a8 <flash_init+0x7c>)
    1552:	4798      	blx	r3
	desc->size = size;
    1554:	7125      	strb	r5, [r4, #4]
    1556:	0a2b      	lsrs	r3, r5, #8
    1558:	7163      	strb	r3, [r4, #5]
    155a:	0c2b      	lsrs	r3, r5, #16
    155c:	71a3      	strb	r3, [r4, #6]
    155e:	0e2d      	lsrs	r5, r5, #24
    1560:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
    1562:	221f      	movs	r2, #31
    1564:	4032      	ands	r2, r6
    1566:	7b63      	ldrb	r3, [r4, #13]
    1568:	211f      	movs	r1, #31
    156a:	438b      	bics	r3, r1
    156c:	4313      	orrs	r3, r2
    156e:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1570:	7a23      	ldrb	r3, [r4, #8]
    1572:	7a62      	ldrb	r2, [r4, #9]
    1574:	0212      	lsls	r2, r2, #8
    1576:	431a      	orrs	r2, r3
    1578:	7aa3      	ldrb	r3, [r4, #10]
    157a:	041b      	lsls	r3, r3, #16
    157c:	4313      	orrs	r3, r2
    157e:	7ae1      	ldrb	r1, [r4, #11]
    1580:	0609      	lsls	r1, r1, #24
    1582:	4319      	orrs	r1, r3
    1584:	7b20      	ldrb	r0, [r4, #12]
    1586:	4b09      	ldr	r3, [pc, #36]	; (15ac <flash_init+0x80>)
    1588:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    158a:	7a23      	ldrb	r3, [r4, #8]
    158c:	7a62      	ldrb	r2, [r4, #9]
    158e:	0212      	lsls	r2, r2, #8
    1590:	431a      	orrs	r2, r3
    1592:	7aa3      	ldrb	r3, [r4, #10]
    1594:	041b      	lsls	r3, r3, #16
    1596:	4313      	orrs	r3, r2
    1598:	7ae1      	ldrb	r1, [r4, #11]
    159a:	0609      	lsls	r1, r1, #24
    159c:	4319      	orrs	r1, r3
    159e:	7b20      	ldrb	r0, [r4, #12]
    15a0:	4b03      	ldr	r3, [pc, #12]	; (15b0 <flash_init+0x84>)
    15a2:	4798      	blx	r3
}
    15a4:	b002      	add	sp, #8
    15a6:	bd70      	pop	{r4, r5, r6, pc}
    15a8:	00005059 	.word	0x00005059
    15ac:	00001a95 	.word	0x00001a95
    15b0:	00001aa5 	.word	0x00001aa5

000015b4 <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
    15b4:	b530      	push	{r4, r5, lr}
    15b6:	b083      	sub	sp, #12
    15b8:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    15ba:	7a03      	ldrb	r3, [r0, #8]
    15bc:	7a42      	ldrb	r2, [r0, #9]
    15be:	0212      	lsls	r2, r2, #8
    15c0:	431a      	orrs	r2, r3
    15c2:	7a83      	ldrb	r3, [r0, #10]
    15c4:	041b      	lsls	r3, r3, #16
    15c6:	4313      	orrs	r3, r2
    15c8:	7ac1      	ldrb	r1, [r0, #11]
    15ca:	0609      	lsls	r1, r1, #24
    15cc:	4319      	orrs	r1, r3
    15ce:	7b00      	ldrb	r0, [r0, #12]
    15d0:	4b24      	ldr	r3, [pc, #144]	; (1664 <flash_check+0xb0>)
    15d2:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    15d4:	7823      	ldrb	r3, [r4, #0]
    15d6:	7862      	ldrb	r2, [r4, #1]
    15d8:	0212      	lsls	r2, r2, #8
    15da:	431a      	orrs	r2, r3
    15dc:	78a3      	ldrb	r3, [r4, #2]
    15de:	041b      	lsls	r3, r3, #16
    15e0:	4313      	orrs	r3, r2
    15e2:	78e0      	ldrb	r0, [r4, #3]
    15e4:	0600      	lsls	r0, r0, #24
    15e6:	4318      	orrs	r0, r3
    15e8:	219f      	movs	r1, #159	; 0x9f
    15ea:	4b1f      	ldr	r3, [pc, #124]	; (1668 <flash_check+0xb4>)
    15ec:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    15ee:	2500      	movs	r5, #0
    15f0:	e00f      	b.n	1612 <flash_check+0x5e>
    15f2:	7823      	ldrb	r3, [r4, #0]
    15f4:	7862      	ldrb	r2, [r4, #1]
    15f6:	0212      	lsls	r2, r2, #8
    15f8:	431a      	orrs	r2, r3
    15fa:	78a3      	ldrb	r3, [r4, #2]
    15fc:	041b      	lsls	r3, r3, #16
    15fe:	4313      	orrs	r3, r2
    1600:	78e0      	ldrb	r0, [r4, #3]
    1602:	0600      	lsls	r0, r0, #24
    1604:	4318      	orrs	r0, r3
    1606:	2100      	movs	r1, #0
    1608:	4b17      	ldr	r3, [pc, #92]	; (1668 <flash_check+0xb4>)
    160a:	4798      	blx	r3
    160c:	ab01      	add	r3, sp, #4
    160e:	5558      	strb	r0, [r3, r5]
    1610:	3501      	adds	r5, #1
    1612:	2d02      	cmp	r5, #2
    1614:	dded      	ble.n	15f2 <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    1616:	7a23      	ldrb	r3, [r4, #8]
    1618:	7a62      	ldrb	r2, [r4, #9]
    161a:	0212      	lsls	r2, r2, #8
    161c:	431a      	orrs	r2, r3
    161e:	7aa3      	ldrb	r3, [r4, #10]
    1620:	041b      	lsls	r3, r3, #16
    1622:	4313      	orrs	r3, r2
    1624:	7ae1      	ldrb	r1, [r4, #11]
    1626:	0609      	lsls	r1, r1, #24
    1628:	4319      	orrs	r1, r3
    162a:	7b20      	ldrb	r0, [r4, #12]
    162c:	4b0f      	ldr	r3, [pc, #60]	; (166c <flash_check+0xb8>)
    162e:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1630:	ab01      	add	r3, sp, #4
    1632:	781b      	ldrb	r3, [r3, #0]
    1634:	2b1f      	cmp	r3, #31
    1636:	d10e      	bne.n	1656 <flash_check+0xa2>
    1638:	ab01      	add	r3, sp, #4
    163a:	785a      	ldrb	r2, [r3, #1]
    163c:	7b63      	ldrb	r3, [r4, #13]
    163e:	06db      	lsls	r3, r3, #27
    1640:	0edb      	lsrs	r3, r3, #27
    1642:	2180      	movs	r1, #128	; 0x80
    1644:	430b      	orrs	r3, r1
    1646:	429a      	cmp	r2, r3
    1648:	d108      	bne.n	165c <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    164a:	ab01      	add	r3, sp, #4
    164c:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    164e:	2b01      	cmp	r3, #1
    1650:	d006      	beq.n	1660 <flash_check+0xac>
	else return false;
    1652:	2000      	movs	r0, #0
    1654:	e000      	b.n	1658 <flash_check+0xa4>
    1656:	2000      	movs	r0, #0
}
    1658:	b003      	add	sp, #12
    165a:	bd30      	pop	{r4, r5, pc}
	else return false;
    165c:	2000      	movs	r0, #0
    165e:	e7fb      	b.n	1658 <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    1660:	2001      	movs	r0, #1
    1662:	e7f9      	b.n	1658 <flash_check+0xa4>
    1664:	00001ab5 	.word	0x00001ab5
    1668:	00001f91 	.word	0x00001f91
    166c:	00001aa5 	.word	0x00001aa5

00001670 <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1670:	b570      	push	{r4, r5, r6, lr}
    1672:	0004      	movs	r4, r0
    1674:	000e      	movs	r6, r1
    1676:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1678:	7902      	ldrb	r2, [r0, #4]
    167a:	7943      	ldrb	r3, [r0, #5]
    167c:	021b      	lsls	r3, r3, #8
    167e:	4313      	orrs	r3, r2
    1680:	7982      	ldrb	r2, [r0, #6]
    1682:	0412      	lsls	r2, r2, #16
    1684:	431a      	orrs	r2, r3
    1686:	79c1      	ldrb	r1, [r0, #7]
    1688:	0609      	lsls	r1, r1, #24
    168a:	4311      	orrs	r1, r2
    168c:	7a00      	ldrb	r0, [r0, #8]
    168e:	4b15      	ldr	r3, [pc, #84]	; (16e4 <imu_icm20948_write_byte+0x74>)
    1690:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    1692:	217f      	movs	r1, #127	; 0x7f
    1694:	4031      	ands	r1, r6
    1696:	7823      	ldrb	r3, [r4, #0]
    1698:	7862      	ldrb	r2, [r4, #1]
    169a:	0212      	lsls	r2, r2, #8
    169c:	431a      	orrs	r2, r3
    169e:	78a3      	ldrb	r3, [r4, #2]
    16a0:	041b      	lsls	r3, r3, #16
    16a2:	4313      	orrs	r3, r2
    16a4:	78e0      	ldrb	r0, [r4, #3]
    16a6:	0600      	lsls	r0, r0, #24
    16a8:	4318      	orrs	r0, r3
    16aa:	4e0f      	ldr	r6, [pc, #60]	; (16e8 <imu_icm20948_write_byte+0x78>)
    16ac:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    16ae:	7823      	ldrb	r3, [r4, #0]
    16b0:	7862      	ldrb	r2, [r4, #1]
    16b2:	0212      	lsls	r2, r2, #8
    16b4:	431a      	orrs	r2, r3
    16b6:	78a3      	ldrb	r3, [r4, #2]
    16b8:	041b      	lsls	r3, r3, #16
    16ba:	4313      	orrs	r3, r2
    16bc:	78e0      	ldrb	r0, [r4, #3]
    16be:	0600      	lsls	r0, r0, #24
    16c0:	4318      	orrs	r0, r3
    16c2:	0029      	movs	r1, r5
    16c4:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    16c6:	7923      	ldrb	r3, [r4, #4]
    16c8:	7962      	ldrb	r2, [r4, #5]
    16ca:	0212      	lsls	r2, r2, #8
    16cc:	431a      	orrs	r2, r3
    16ce:	79a3      	ldrb	r3, [r4, #6]
    16d0:	041b      	lsls	r3, r3, #16
    16d2:	4313      	orrs	r3, r2
    16d4:	79e1      	ldrb	r1, [r4, #7]
    16d6:	0609      	lsls	r1, r1, #24
    16d8:	4319      	orrs	r1, r3
    16da:	7a20      	ldrb	r0, [r4, #8]
    16dc:	4b03      	ldr	r3, [pc, #12]	; (16ec <imu_icm20948_write_byte+0x7c>)
    16de:	4798      	blx	r3
}
    16e0:	bd70      	pop	{r4, r5, r6, pc}
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	00001ab5 	.word	0x00001ab5
    16e8:	00001f91 	.word	0x00001f91
    16ec:	00001aa5 	.word	0x00001aa5

000016f0 <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    16f0:	b570      	push	{r4, r5, r6, lr}
    16f2:	0004      	movs	r4, r0
    16f4:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    16f6:	7903      	ldrb	r3, [r0, #4]
    16f8:	7942      	ldrb	r2, [r0, #5]
    16fa:	0212      	lsls	r2, r2, #8
    16fc:	431a      	orrs	r2, r3
    16fe:	7983      	ldrb	r3, [r0, #6]
    1700:	041b      	lsls	r3, r3, #16
    1702:	4313      	orrs	r3, r2
    1704:	79c1      	ldrb	r1, [r0, #7]
    1706:	0609      	lsls	r1, r1, #24
    1708:	4319      	orrs	r1, r3
    170a:	7a00      	ldrb	r0, [r0, #8]
    170c:	4b16      	ldr	r3, [pc, #88]	; (1768 <imu_icm20948_read_byte+0x78>)
    170e:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1710:	2180      	movs	r1, #128	; 0x80
    1712:	4249      	negs	r1, r1
    1714:	4329      	orrs	r1, r5
    1716:	b2c9      	uxtb	r1, r1
    1718:	7823      	ldrb	r3, [r4, #0]
    171a:	7862      	ldrb	r2, [r4, #1]
    171c:	0212      	lsls	r2, r2, #8
    171e:	431a      	orrs	r2, r3
    1720:	78a3      	ldrb	r3, [r4, #2]
    1722:	041b      	lsls	r3, r3, #16
    1724:	4313      	orrs	r3, r2
    1726:	78e0      	ldrb	r0, [r4, #3]
    1728:	0600      	lsls	r0, r0, #24
    172a:	4318      	orrs	r0, r3
    172c:	4d0f      	ldr	r5, [pc, #60]	; (176c <imu_icm20948_read_byte+0x7c>)
    172e:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    1730:	7823      	ldrb	r3, [r4, #0]
    1732:	7862      	ldrb	r2, [r4, #1]
    1734:	0212      	lsls	r2, r2, #8
    1736:	431a      	orrs	r2, r3
    1738:	78a3      	ldrb	r3, [r4, #2]
    173a:	041b      	lsls	r3, r3, #16
    173c:	4313      	orrs	r3, r2
    173e:	78e0      	ldrb	r0, [r4, #3]
    1740:	0600      	lsls	r0, r0, #24
    1742:	4318      	orrs	r0, r3
    1744:	2100      	movs	r1, #0
    1746:	47a8      	blx	r5
    1748:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    174a:	7923      	ldrb	r3, [r4, #4]
    174c:	7962      	ldrb	r2, [r4, #5]
    174e:	0212      	lsls	r2, r2, #8
    1750:	431a      	orrs	r2, r3
    1752:	79a3      	ldrb	r3, [r4, #6]
    1754:	041b      	lsls	r3, r3, #16
    1756:	4313      	orrs	r3, r2
    1758:	79e1      	ldrb	r1, [r4, #7]
    175a:	0609      	lsls	r1, r1, #24
    175c:	4319      	orrs	r1, r3
    175e:	7a20      	ldrb	r0, [r4, #8]
    1760:	4b03      	ldr	r3, [pc, #12]	; (1770 <imu_icm20948_read_byte+0x80>)
    1762:	4798      	blx	r3
	return out;
}
    1764:	0028      	movs	r0, r5
    1766:	bd70      	pop	{r4, r5, r6, pc}
    1768:	00001ab5 	.word	0x00001ab5
    176c:	00001f91 	.word	0x00001f91
    1770:	00001aa5 	.word	0x00001aa5

00001774 <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1774:	b5f0      	push	{r4, r5, r6, r7, lr}
    1776:	46c6      	mov	lr, r8
    1778:	b500      	push	{lr}
    177a:	0004      	movs	r4, r0
    177c:	000d      	movs	r5, r1
    177e:	0017      	movs	r7, r2
    1780:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1782:	7902      	ldrb	r2, [r0, #4]
    1784:	7943      	ldrb	r3, [r0, #5]
    1786:	021b      	lsls	r3, r3, #8
    1788:	4313      	orrs	r3, r2
    178a:	7982      	ldrb	r2, [r0, #6]
    178c:	0412      	lsls	r2, r2, #16
    178e:	431a      	orrs	r2, r3
    1790:	79c1      	ldrb	r1, [r0, #7]
    1792:	0609      	lsls	r1, r1, #24
    1794:	4311      	orrs	r1, r2
    1796:	7a00      	ldrb	r0, [r0, #8]
    1798:	4b19      	ldr	r3, [pc, #100]	; (1800 <imu_icm20948_write+0x8c>)
    179a:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    179c:	217f      	movs	r1, #127	; 0x7f
    179e:	4029      	ands	r1, r5
    17a0:	7823      	ldrb	r3, [r4, #0]
    17a2:	7862      	ldrb	r2, [r4, #1]
    17a4:	0212      	lsls	r2, r2, #8
    17a6:	431a      	orrs	r2, r3
    17a8:	78a3      	ldrb	r3, [r4, #2]
    17aa:	041b      	lsls	r3, r3, #16
    17ac:	4313      	orrs	r3, r2
    17ae:	78e0      	ldrb	r0, [r4, #3]
    17b0:	0600      	lsls	r0, r0, #24
    17b2:	4318      	orrs	r0, r3
    17b4:	4b13      	ldr	r3, [pc, #76]	; (1804 <imu_icm20948_write+0x90>)
    17b6:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    17b8:	2600      	movs	r6, #0
    17ba:	e00e      	b.n	17da <imu_icm20948_write+0x66>
		spi_command(desc->sercom, data[i]);
    17bc:	4643      	mov	r3, r8
    17be:	5d99      	ldrb	r1, [r3, r6]
    17c0:	7822      	ldrb	r2, [r4, #0]
    17c2:	7863      	ldrb	r3, [r4, #1]
    17c4:	021b      	lsls	r3, r3, #8
    17c6:	4313      	orrs	r3, r2
    17c8:	78a5      	ldrb	r5, [r4, #2]
    17ca:	042d      	lsls	r5, r5, #16
    17cc:	431d      	orrs	r5, r3
    17ce:	78e0      	ldrb	r0, [r4, #3]
    17d0:	0600      	lsls	r0, r0, #24
    17d2:	4328      	orrs	r0, r5
    17d4:	4b0b      	ldr	r3, [pc, #44]	; (1804 <imu_icm20948_write+0x90>)
    17d6:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    17d8:	3601      	adds	r6, #1
    17da:	42be      	cmp	r6, r7
    17dc:	dbee      	blt.n	17bc <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    17de:	7923      	ldrb	r3, [r4, #4]
    17e0:	7962      	ldrb	r2, [r4, #5]
    17e2:	0212      	lsls	r2, r2, #8
    17e4:	431a      	orrs	r2, r3
    17e6:	79a3      	ldrb	r3, [r4, #6]
    17e8:	041b      	lsls	r3, r3, #16
    17ea:	4313      	orrs	r3, r2
    17ec:	79e1      	ldrb	r1, [r4, #7]
    17ee:	0609      	lsls	r1, r1, #24
    17f0:	4319      	orrs	r1, r3
    17f2:	7a20      	ldrb	r0, [r4, #8]
    17f4:	4b04      	ldr	r3, [pc, #16]	; (1808 <imu_icm20948_write+0x94>)
    17f6:	4798      	blx	r3
}
    17f8:	bc80      	pop	{r7}
    17fa:	46b8      	mov	r8, r7
    17fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	00001ab5 	.word	0x00001ab5
    1804:	00001f91 	.word	0x00001f91
    1808:	00001aa5 	.word	0x00001aa5

0000180c <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    180c:	b5f0      	push	{r4, r5, r6, r7, lr}
    180e:	46c6      	mov	lr, r8
    1810:	b500      	push	{lr}
    1812:	0004      	movs	r4, r0
    1814:	000d      	movs	r5, r1
    1816:	0017      	movs	r7, r2
    1818:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    181a:	7903      	ldrb	r3, [r0, #4]
    181c:	7942      	ldrb	r2, [r0, #5]
    181e:	0212      	lsls	r2, r2, #8
    1820:	431a      	orrs	r2, r3
    1822:	7983      	ldrb	r3, [r0, #6]
    1824:	041b      	lsls	r3, r3, #16
    1826:	4313      	orrs	r3, r2
    1828:	79c1      	ldrb	r1, [r0, #7]
    182a:	0609      	lsls	r1, r1, #24
    182c:	4319      	orrs	r1, r3
    182e:	7a00      	ldrb	r0, [r0, #8]
    1830:	4b1b      	ldr	r3, [pc, #108]	; (18a0 <imu_icm20948_read+0x94>)
    1832:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1834:	2180      	movs	r1, #128	; 0x80
    1836:	4249      	negs	r1, r1
    1838:	4329      	orrs	r1, r5
    183a:	b2c9      	uxtb	r1, r1
    183c:	7823      	ldrb	r3, [r4, #0]
    183e:	7862      	ldrb	r2, [r4, #1]
    1840:	0212      	lsls	r2, r2, #8
    1842:	431a      	orrs	r2, r3
    1844:	78a3      	ldrb	r3, [r4, #2]
    1846:	041b      	lsls	r3, r3, #16
    1848:	4313      	orrs	r3, r2
    184a:	78e0      	ldrb	r0, [r4, #3]
    184c:	0600      	lsls	r0, r0, #24
    184e:	4318      	orrs	r0, r3
    1850:	4b14      	ldr	r3, [pc, #80]	; (18a4 <imu_icm20948_read+0x98>)
    1852:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1854:	2500      	movs	r5, #0
    1856:	e010      	b.n	187a <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    1858:	4643      	mov	r3, r8
    185a:	195e      	adds	r6, r3, r5
    185c:	7823      	ldrb	r3, [r4, #0]
    185e:	7862      	ldrb	r2, [r4, #1]
    1860:	0212      	lsls	r2, r2, #8
    1862:	431a      	orrs	r2, r3
    1864:	78a3      	ldrb	r3, [r4, #2]
    1866:	041b      	lsls	r3, r3, #16
    1868:	4313      	orrs	r3, r2
    186a:	78e0      	ldrb	r0, [r4, #3]
    186c:	0600      	lsls	r0, r0, #24
    186e:	4318      	orrs	r0, r3
    1870:	2100      	movs	r1, #0
    1872:	4b0c      	ldr	r3, [pc, #48]	; (18a4 <imu_icm20948_read+0x98>)
    1874:	4798      	blx	r3
    1876:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    1878:	3501      	adds	r5, #1
    187a:	42bd      	cmp	r5, r7
    187c:	dbec      	blt.n	1858 <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    187e:	7923      	ldrb	r3, [r4, #4]
    1880:	7962      	ldrb	r2, [r4, #5]
    1882:	0212      	lsls	r2, r2, #8
    1884:	431a      	orrs	r2, r3
    1886:	79a3      	ldrb	r3, [r4, #6]
    1888:	041b      	lsls	r3, r3, #16
    188a:	4313      	orrs	r3, r2
    188c:	79e1      	ldrb	r1, [r4, #7]
    188e:	0609      	lsls	r1, r1, #24
    1890:	4319      	orrs	r1, r3
    1892:	7a20      	ldrb	r0, [r4, #8]
    1894:	4b04      	ldr	r3, [pc, #16]	; (18a8 <imu_icm20948_read+0x9c>)
    1896:	4798      	blx	r3
}
    1898:	bc80      	pop	{r7}
    189a:	46b8      	mov	r8, r7
    189c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	00001ab5 	.word	0x00001ab5
    18a4:	00001f91 	.word	0x00001f91
    18a8:	00001aa5 	.word	0x00001aa5

000018ac <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    18ac:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    18ae:	2903      	cmp	r1, #3
    18b0:	d900      	bls.n	18b4 <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    18b2:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    18b4:	0109      	lsls	r1, r1, #4
    18b6:	b2ca      	uxtb	r2, r1
    18b8:	217f      	movs	r1, #127	; 0x7f
    18ba:	4b01      	ldr	r3, [pc, #4]	; (18c0 <imu_icm20948_user_bank+0x14>)
    18bc:	4798      	blx	r3
}
    18be:	e7f8      	b.n	18b2 <imu_icm20948_user_bank+0x6>
    18c0:	00001671 	.word	0x00001671

000018c4 <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    18c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18c6:	b083      	sub	sp, #12
    18c8:	0005      	movs	r5, r0
    18ca:	000c      	movs	r4, r1
    18cc:	9200      	str	r2, [sp, #0]
    18ce:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    18d0:	0008      	movs	r0, r1
    18d2:	4b13      	ldr	r3, [pc, #76]	; (1920 <imu_icm20948_init+0x5c>)
    18d4:	4798      	blx	r3
    18d6:	1e06      	subs	r6, r0, #0
    18d8:	d102      	bne.n	18e0 <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    18da:	0030      	movs	r0, r6
    18dc:	b003      	add	sp, #12
    18de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    18e0:	702c      	strb	r4, [r5, #0]
    18e2:	0a23      	lsrs	r3, r4, #8
    18e4:	706b      	strb	r3, [r5, #1]
    18e6:	0c23      	lsrs	r3, r4, #16
    18e8:	70ab      	strb	r3, [r5, #2]
    18ea:	0e24      	lsrs	r4, r4, #24
    18ec:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    18ee:	1d28      	adds	r0, r5, #4
    18f0:	2205      	movs	r2, #5
    18f2:	4669      	mov	r1, sp
    18f4:	4b0b      	ldr	r3, [pc, #44]	; (1924 <imu_icm20948_init+0x60>)
    18f6:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    18f8:	2280      	movs	r2, #128	; 0x80
    18fa:	2106      	movs	r1, #6
    18fc:	0028      	movs	r0, r5
    18fe:	4c0a      	ldr	r4, [pc, #40]	; (1928 <imu_icm20948_init+0x64>)
    1900:	47a0      	blx	r4
	delay_ms(11);
    1902:	480a      	ldr	r0, [pc, #40]	; (192c <imu_icm20948_init+0x68>)
    1904:	4f0a      	ldr	r7, [pc, #40]	; (1930 <imu_icm20948_init+0x6c>)
    1906:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    1908:	2210      	movs	r2, #16
    190a:	2103      	movs	r1, #3
    190c:	0028      	movs	r0, r5
    190e:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    1910:	2201      	movs	r2, #1
    1912:	2106      	movs	r1, #6
    1914:	0028      	movs	r0, r5
    1916:	47a0      	blx	r4
	delay_us(80);
    1918:	20f0      	movs	r0, #240	; 0xf0
    191a:	0040      	lsls	r0, r0, #1
    191c:	47b8      	blx	r7
	return true;
    191e:	e7dc      	b.n	18da <imu_icm20948_init+0x16>
    1920:	00001da1 	.word	0x00001da1
    1924:	00005059 	.word	0x00005059
    1928:	00001671 	.word	0x00001671
    192c:	000101d0 	.word	0x000101d0
    1930:	00002075 	.word	0x00002075

00001934 <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1934:	b510      	push	{r4, lr}
    1936:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    1938:	2100      	movs	r1, #0
    193a:	4b06      	ldr	r3, [pc, #24]	; (1954 <imu_icm20948_check+0x20>)
    193c:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    193e:	2100      	movs	r1, #0
    1940:	0020      	movs	r0, r4
    1942:	4b05      	ldr	r3, [pc, #20]	; (1958 <imu_icm20948_check+0x24>)
    1944:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    1946:	28ea      	cmp	r0, #234	; 0xea
    1948:	d001      	beq.n	194e <imu_icm20948_check+0x1a>
	else return false;
    194a:	2000      	movs	r0, #0
}
    194c:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    194e:	38e9      	subs	r0, #233	; 0xe9
    1950:	e7fc      	b.n	194c <imu_icm20948_check+0x18>
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	000018ad 	.word	0x000018ad
    1958:	000016f1 	.word	0x000016f1

0000195c <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    195e:	0004      	movs	r4, r0
    1960:	000f      	movs	r7, r1
    1962:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1964:	2103      	movs	r1, #3
    1966:	4b0b      	ldr	r3, [pc, #44]	; (1994 <mag_icm20948_write_byte+0x38>)
    1968:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    196a:	220c      	movs	r2, #12
    196c:	2103      	movs	r1, #3
    196e:	0020      	movs	r0, r4
    1970:	4d09      	ldr	r5, [pc, #36]	; (1998 <mag_icm20948_write_byte+0x3c>)
    1972:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    1974:	003a      	movs	r2, r7
    1976:	2104      	movs	r1, #4
    1978:	0020      	movs	r0, r4
    197a:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    197c:	0032      	movs	r2, r6
    197e:	2106      	movs	r1, #6
    1980:	0020      	movs	r0, r4
    1982:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    1984:	2281      	movs	r2, #129	; 0x81
    1986:	2105      	movs	r1, #5
    1988:	0020      	movs	r0, r4
    198a:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    198c:	4803      	ldr	r0, [pc, #12]	; (199c <mag_icm20948_write_byte+0x40>)
    198e:	4b04      	ldr	r3, [pc, #16]	; (19a0 <mag_icm20948_write_byte+0x44>)
    1990:	4798      	blx	r3
}
    1992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1994:	000018ad 	.word	0x000018ad
    1998:	00001671 	.word	0x00001671
    199c:	0000ea60 	.word	0x0000ea60
    19a0:	00002075 	.word	0x00002075

000019a4 <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    19a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a6:	46c6      	mov	lr, r8
    19a8:	b500      	push	{lr}
    19aa:	b082      	sub	sp, #8
    19ac:	0004      	movs	r4, r0
    19ae:	000f      	movs	r7, r1
    19b0:	0015      	movs	r5, r2
    19b2:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    19b4:	2103      	movs	r1, #3
    19b6:	4e0f      	ldr	r6, [pc, #60]	; (19f4 <mag_icm20948_read+0x50>)
    19b8:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    19ba:	ab01      	add	r3, sp, #4
    19bc:	228c      	movs	r2, #140	; 0x8c
    19be:	701a      	strb	r2, [r3, #0]
    19c0:	705f      	strb	r7, [r3, #1]
    19c2:	3a0d      	subs	r2, #13
    19c4:	3aff      	subs	r2, #255	; 0xff
    19c6:	432a      	orrs	r2, r5
    19c8:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    19ca:	2203      	movs	r2, #3
    19cc:	2103      	movs	r1, #3
    19ce:	0020      	movs	r0, r4
    19d0:	4f09      	ldr	r7, [pc, #36]	; (19f8 <mag_icm20948_read+0x54>)
    19d2:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    19d4:	4809      	ldr	r0, [pc, #36]	; (19fc <mag_icm20948_read+0x58>)
    19d6:	4b0a      	ldr	r3, [pc, #40]	; (1a00 <mag_icm20948_read+0x5c>)
    19d8:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    19da:	2100      	movs	r1, #0
    19dc:	0020      	movs	r0, r4
    19de:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    19e0:	4643      	mov	r3, r8
    19e2:	002a      	movs	r2, r5
    19e4:	213b      	movs	r1, #59	; 0x3b
    19e6:	0020      	movs	r0, r4
    19e8:	4c06      	ldr	r4, [pc, #24]	; (1a04 <mag_icm20948_read+0x60>)
    19ea:	47a0      	blx	r4
}
    19ec:	b002      	add	sp, #8
    19ee:	bc80      	pop	{r7}
    19f0:	46b8      	mov	r8, r7
    19f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19f4:	000018ad 	.word	0x000018ad
    19f8:	00001775 	.word	0x00001775
    19fc:	00001770 	.word	0x00001770
    1a00:	00002075 	.word	0x00002075
    1a04:	0000180d 	.word	0x0000180d

00001a08 <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    1a08:	b570      	push	{r4, r5, r6, lr}
    1a0a:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1a0c:	2100      	movs	r1, #0
    1a0e:	4e10      	ldr	r6, [pc, #64]	; (1a50 <mag_icm20948_init+0x48>)
    1a10:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    1a12:	2220      	movs	r2, #32
    1a14:	2103      	movs	r1, #3
    1a16:	0020      	movs	r0, r4
    1a18:	4d0e      	ldr	r5, [pc, #56]	; (1a54 <mag_icm20948_init+0x4c>)
    1a1a:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1a1c:	2103      	movs	r1, #3
    1a1e:	0020      	movs	r0, r4
    1a20:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    1a22:	2207      	movs	r2, #7
    1a24:	2101      	movs	r1, #1
    1a26:	0020      	movs	r0, r4
    1a28:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    1a2a:	2201      	movs	r2, #1
    1a2c:	2102      	movs	r1, #2
    1a2e:	0020      	movs	r0, r4
    1a30:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    1a32:	4809      	ldr	r0, [pc, #36]	; (1a58 <mag_icm20948_init+0x50>)
    1a34:	4b09      	ldr	r3, [pc, #36]	; (1a5c <mag_icm20948_init+0x54>)
    1a36:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    1a38:	2201      	movs	r2, #1
    1a3a:	2132      	movs	r1, #50	; 0x32
    1a3c:	0020      	movs	r0, r4
    1a3e:	4d08      	ldr	r5, [pc, #32]	; (1a60 <mag_icm20948_init+0x58>)
    1a40:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    1a42:	2208      	movs	r2, #8
    1a44:	2131      	movs	r1, #49	; 0x31
    1a46:	0020      	movs	r0, r4
    1a48:	47a8      	blx	r5
	
	return true;
}
    1a4a:	2001      	movs	r0, #1
    1a4c:	bd70      	pop	{r4, r5, r6, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	000018ad 	.word	0x000018ad
    1a54:	00001671 	.word	0x00001671
    1a58:	00001770 	.word	0x00001770
    1a5c:	00002075 	.word	0x00002075
    1a60:	0000195d 	.word	0x0000195d

00001a64 <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1a64:	b530      	push	{r4, r5, lr}
    1a66:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    1a68:	ac01      	add	r4, sp, #4
    1a6a:	0023      	movs	r3, r4
    1a6c:	2202      	movs	r2, #2
    1a6e:	2100      	movs	r1, #0
    1a70:	4d07      	ldr	r5, [pc, #28]	; (1a90 <mag_icm20948_check+0x2c>)
    1a72:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1a74:	7823      	ldrb	r3, [r4, #0]
    1a76:	2b48      	cmp	r3, #72	; 0x48
    1a78:	d104      	bne.n	1a84 <mag_icm20948_check+0x20>
    1a7a:	7863      	ldrb	r3, [r4, #1]
    1a7c:	2b09      	cmp	r3, #9
    1a7e:	d004      	beq.n	1a8a <mag_icm20948_check+0x26>
	else return false;
    1a80:	2000      	movs	r0, #0
    1a82:	e000      	b.n	1a86 <mag_icm20948_check+0x22>
    1a84:	2000      	movs	r0, #0
    1a86:	b003      	add	sp, #12
    1a88:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1a8a:	2001      	movs	r0, #1
    1a8c:	e7fb      	b.n	1a86 <mag_icm20948_check+0x22>
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	000019a5 	.word	0x000019a5

00001a94 <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    1a94:	01c0      	lsls	r0, r0, #7
    1a96:	4b02      	ldr	r3, [pc, #8]	; (1aa0 <port_set_output+0xc>)
    1a98:	469c      	mov	ip, r3
    1a9a:	4460      	add	r0, ip
    1a9c:	6081      	str	r1, [r0, #8]
}
    1a9e:	4770      	bx	lr
    1aa0:	41004400 	.word	0x41004400

00001aa4 <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    1aa4:	01c0      	lsls	r0, r0, #7
    1aa6:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <port_set+0xc>)
    1aa8:	469c      	mov	ip, r3
    1aaa:	4460      	add	r0, ip
    1aac:	6181      	str	r1, [r0, #24]
}
    1aae:	4770      	bx	lr
    1ab0:	41004400 	.word	0x41004400

00001ab4 <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    1ab4:	01c0      	lsls	r0, r0, #7
    1ab6:	4b02      	ldr	r3, [pc, #8]	; (1ac0 <port_clear+0xc>)
    1ab8:	469c      	mov	ip, r3
    1aba:	4460      	add	r0, ip
    1abc:	6141      	str	r1, [r0, #20]
}
    1abe:	4770      	bx	lr
    1ac0:	41004400 	.word	0x41004400

00001ac4 <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    1ac4:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    1ac6:	060b      	lsls	r3, r1, #24
    1ac8:	21f0      	movs	r1, #240	; 0xf0
    1aca:	0509      	lsls	r1, r1, #20
    1acc:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    1ace:	490e      	ldr	r1, [pc, #56]	; (1b08 <port_wrconfig+0x44>)
    1ad0:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    1ad2:	0413      	lsls	r3, r2, #16
    1ad4:	0c1c      	lsrs	r4, r3, #16
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d005      	beq.n	1ae6 <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    1ada:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1adc:	01c3      	lsls	r3, r0, #7
    1ade:	4c0b      	ldr	r4, [pc, #44]	; (1b0c <port_wrconfig+0x48>)
    1ae0:	46a4      	mov	ip, r4
    1ae2:	4463      	add	r3, ip
    1ae4:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    1ae6:	2380      	movs	r3, #128	; 0x80
    1ae8:	025b      	lsls	r3, r3, #9
    1aea:	429a      	cmp	r2, r3
    1aec:	d30b      	bcc.n	1b06 <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    1aee:	0c09      	lsrs	r1, r1, #16
    1af0:	0409      	lsls	r1, r1, #16
    1af2:	2380      	movs	r3, #128	; 0x80
    1af4:	061b      	lsls	r3, r3, #24
    1af6:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    1af8:	0c12      	lsrs	r2, r2, #16
    1afa:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1afc:	01c0      	lsls	r0, r0, #7
    1afe:	4b03      	ldr	r3, [pc, #12]	; (1b0c <port_wrconfig+0x48>)
    1b00:	469c      	mov	ip, r3
    1b02:	4460      	add	r0, ip
    1b04:	6282      	str	r2, [r0, #40]	; 0x28
	}
    1b06:	bd10      	pop	{r4, pc}
    1b08:	50010000 	.word	0x50010000
    1b0c:	41004400 	.word	0x41004400

00001b10 <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    1b10:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    1b12:	4c2a      	ldr	r4, [pc, #168]	; (1bbc <pwm_init_tc+0xac>)
    1b14:	42a0      	cmp	r0, r4
    1b16:	d03c      	beq.n	1b92 <pwm_init_tc+0x82>
    1b18:	d90f      	bls.n	1b3a <pwm_init_tc+0x2a>
    1b1a:	4c29      	ldr	r4, [pc, #164]	; (1bc0 <pwm_init_tc+0xb0>)
    1b1c:	42a0      	cmp	r0, r4
    1b1e:	d042      	beq.n	1ba6 <pwm_init_tc+0x96>
    1b20:	4c28      	ldr	r4, [pc, #160]	; (1bc4 <pwm_init_tc+0xb4>)
    1b22:	42a0      	cmp	r0, r4
    1b24:	d11b      	bne.n	1b5e <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    1b26:	4a28      	ldr	r2, [pc, #160]	; (1bc8 <pwm_init_tc+0xb8>)
    1b28:	6a14      	ldr	r4, [r2, #32]
    1b2a:	2380      	movs	r3, #128	; 0x80
    1b2c:	021b      	lsls	r3, r3, #8
    1b2e:	4323      	orrs	r3, r4
    1b30:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1b32:	4b26      	ldr	r3, [pc, #152]	; (1bcc <pwm_init_tc+0xbc>)
    1b34:	4a26      	ldr	r2, [pc, #152]	; (1bd0 <pwm_init_tc+0xc0>)
    1b36:	805a      	strh	r2, [r3, #2]
		break;
    1b38:	e01c      	b.n	1b74 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1b3a:	4c26      	ldr	r4, [pc, #152]	; (1bd4 <pwm_init_tc+0xc4>)
    1b3c:	42a0      	cmp	r0, r4
    1b3e:	d010      	beq.n	1b62 <pwm_init_tc+0x52>
    1b40:	4c25      	ldr	r4, [pc, #148]	; (1bd8 <pwm_init_tc+0xc8>)
    1b42:	42a0      	cmp	r0, r4
    1b44:	d109      	bne.n	1b5a <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    1b46:	4a20      	ldr	r2, [pc, #128]	; (1bc8 <pwm_init_tc+0xb8>)
    1b48:	6a14      	ldr	r4, [r2, #32]
    1b4a:	2380      	movs	r3, #128	; 0x80
    1b4c:	015b      	lsls	r3, r3, #5
    1b4e:	4323      	orrs	r3, r4
    1b50:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1b52:	4b1e      	ldr	r3, [pc, #120]	; (1bcc <pwm_init_tc+0xbc>)
    1b54:	4a21      	ldr	r2, [pc, #132]	; (1bdc <pwm_init_tc+0xcc>)
    1b56:	805a      	strh	r2, [r3, #2]
		break;
    1b58:	e00c      	b.n	1b74 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1b5a:	2000      	movs	r0, #0
    1b5c:	e018      	b.n	1b90 <pwm_init_tc+0x80>
    1b5e:	2000      	movs	r0, #0
    1b60:	e016      	b.n	1b90 <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    1b62:	4a19      	ldr	r2, [pc, #100]	; (1bc8 <pwm_init_tc+0xb8>)
    1b64:	6a14      	ldr	r4, [r2, #32]
    1b66:	2380      	movs	r3, #128	; 0x80
    1b68:	011b      	lsls	r3, r3, #4
    1b6a:	4323      	orrs	r3, r4
    1b6c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    1b6e:	4b17      	ldr	r3, [pc, #92]	; (1bcc <pwm_init_tc+0xbc>)
    1b70:	4a1b      	ldr	r2, [pc, #108]	; (1be0 <pwm_init_tc+0xd0>)
    1b72:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1b74:	4b15      	ldr	r3, [pc, #84]	; (1bcc <pwm_init_tc+0xbc>)
    1b76:	785b      	ldrb	r3, [r3, #1]
    1b78:	b25b      	sxtb	r3, r3
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	dbfa      	blt.n	1b74 <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    1b7e:	020b      	lsls	r3, r1, #8
    1b80:	22e0      	movs	r2, #224	; 0xe0
    1b82:	00d2      	lsls	r2, r2, #3
    1b84:	4013      	ands	r3, r2
    1b86:	2244      	movs	r2, #68	; 0x44
    1b88:	4313      	orrs	r3, r2
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	8003      	strh	r3, [r0, #0]
	
	return true;
    1b8e:	2001      	movs	r0, #1
}
    1b90:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    1b92:	4a0d      	ldr	r2, [pc, #52]	; (1bc8 <pwm_init_tc+0xb8>)
    1b94:	6a14      	ldr	r4, [r2, #32]
    1b96:	2380      	movs	r3, #128	; 0x80
    1b98:	019b      	lsls	r3, r3, #6
    1b9a:	4323      	orrs	r3, r4
    1b9c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1b9e:	4b0b      	ldr	r3, [pc, #44]	; (1bcc <pwm_init_tc+0xbc>)
    1ba0:	4a0e      	ldr	r2, [pc, #56]	; (1bdc <pwm_init_tc+0xcc>)
    1ba2:	805a      	strh	r2, [r3, #2]
		break;
    1ba4:	e7e6      	b.n	1b74 <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    1ba6:	4a08      	ldr	r2, [pc, #32]	; (1bc8 <pwm_init_tc+0xb8>)
    1ba8:	6a14      	ldr	r4, [r2, #32]
    1baa:	2380      	movs	r3, #128	; 0x80
    1bac:	01db      	lsls	r3, r3, #7
    1bae:	4323      	orrs	r3, r4
    1bb0:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1bb2:	4b06      	ldr	r3, [pc, #24]	; (1bcc <pwm_init_tc+0xbc>)
    1bb4:	4a06      	ldr	r2, [pc, #24]	; (1bd0 <pwm_init_tc+0xc0>)
    1bb6:	805a      	strh	r2, [r3, #2]
		break;
    1bb8:	e7dc      	b.n	1b74 <pwm_init_tc+0x64>
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	42003400 	.word	0x42003400
    1bc0:	42003800 	.word	0x42003800
    1bc4:	42003c00 	.word	0x42003c00
    1bc8:	40000400 	.word	0x40000400
    1bcc:	40000c00 	.word	0x40000c00
    1bd0:	0000401d 	.word	0x0000401d
    1bd4:	42002c00 	.word	0x42002c00
    1bd8:	42003000 	.word	0x42003000
    1bdc:	0000401c 	.word	0x0000401c
    1be0:	0000401b 	.word	0x0000401b

00001be4 <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    1be4:	4a0f      	ldr	r2, [pc, #60]	; (1c24 <pwm_enable_tc+0x40>)
    1be6:	4290      	cmp	r0, r2
    1be8:	d010      	beq.n	1c0c <pwm_enable_tc+0x28>
    1bea:	d807      	bhi.n	1bfc <pwm_enable_tc+0x18>
    1bec:	4a0e      	ldr	r2, [pc, #56]	; (1c28 <pwm_enable_tc+0x44>)
    1bee:	4290      	cmp	r0, r2
    1bf0:	d00c      	beq.n	1c0c <pwm_enable_tc+0x28>
    1bf2:	4a0e      	ldr	r2, [pc, #56]	; (1c2c <pwm_enable_tc+0x48>)
    1bf4:	4290      	cmp	r0, r2
    1bf6:	d009      	beq.n	1c0c <pwm_enable_tc+0x28>
    1bf8:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    1bfa:	4770      	bx	lr
	switch ((uint32_t)tc) {
    1bfc:	4a0c      	ldr	r2, [pc, #48]	; (1c30 <pwm_enable_tc+0x4c>)
    1bfe:	4290      	cmp	r0, r2
    1c00:	d004      	beq.n	1c0c <pwm_enable_tc+0x28>
    1c02:	4a0c      	ldr	r2, [pc, #48]	; (1c34 <pwm_enable_tc+0x50>)
    1c04:	4290      	cmp	r0, r2
    1c06:	d001      	beq.n	1c0c <pwm_enable_tc+0x28>
    1c08:	2000      	movs	r0, #0
    1c0a:	e7f6      	b.n	1bfa <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    1c0c:	8803      	ldrh	r3, [r0, #0]
    1c0e:	2202      	movs	r2, #2
    1c10:	4313      	orrs	r3, r2
    1c12:	b29b      	uxth	r3, r3
    1c14:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1c16:	7bc3      	ldrb	r3, [r0, #15]
    1c18:	b25b      	sxtb	r3, r3
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	dbfb      	blt.n	1c16 <pwm_enable_tc+0x32>
	return true;
    1c1e:	2001      	movs	r0, #1
    1c20:	e7eb      	b.n	1bfa <pwm_enable_tc+0x16>
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	42003400 	.word	0x42003400
    1c28:	42002c00 	.word	0x42002c00
    1c2c:	42003000 	.word	0x42003000
    1c30:	42003800 	.word	0x42003800
    1c34:	42003c00 	.word	0x42003c00

00001c38 <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    1c38:	2307      	movs	r3, #7
    1c3a:	4018      	ands	r0, r3
	switch (prescaler) {
    1c3c:	2807      	cmp	r0, #7
    1c3e:	d813      	bhi.n	1c68 <pwm_get_div_val+0x30>
    1c40:	0080      	lsls	r0, r0, #2
    1c42:	4b0b      	ldr	r3, [pc, #44]	; (1c70 <pwm_get_div_val+0x38>)
    1c44:	581b      	ldr	r3, [r3, r0]
    1c46:	469f      	mov	pc, r3
    1c48:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    1c4a:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    1c4c:	2004      	movs	r0, #4
    1c4e:	e7fc      	b.n	1c4a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    1c50:	2008      	movs	r0, #8
    1c52:	e7fa      	b.n	1c4a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    1c54:	2010      	movs	r0, #16
    1c56:	e7f8      	b.n	1c4a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    1c58:	2040      	movs	r0, #64	; 0x40
    1c5a:	e7f6      	b.n	1c4a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    1c5c:	2080      	movs	r0, #128	; 0x80
    1c5e:	0040      	lsls	r0, r0, #1
    1c60:	e7f3      	b.n	1c4a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    1c62:	2080      	movs	r0, #128	; 0x80
    1c64:	00c0      	lsls	r0, r0, #3
    1c66:	e7f0      	b.n	1c4a <pwm_get_div_val+0x12>
	return 0;
    1c68:	2000      	movs	r0, #0
    1c6a:	e7ee      	b.n	1c4a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    1c6c:	2002      	movs	r0, #2
    1c6e:	e7ec      	b.n	1c4a <pwm_get_div_val+0x12>
    1c70:	000052d0 	.word	0x000052d0

00001c74 <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    1c74:	b570      	push	{r4, r5, r6, lr}
    1c76:	0004      	movs	r4, r0
    1c78:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    1c7a:	4a16      	ldr	r2, [pc, #88]	; (1cd4 <pwm_set_frequency_tc+0x60>)
    1c7c:	4290      	cmp	r0, r2
    1c7e:	d010      	beq.n	1ca2 <pwm_set_frequency_tc+0x2e>
    1c80:	d807      	bhi.n	1c92 <pwm_set_frequency_tc+0x1e>
    1c82:	4a15      	ldr	r2, [pc, #84]	; (1cd8 <pwm_set_frequency_tc+0x64>)
    1c84:	4290      	cmp	r0, r2
    1c86:	d00c      	beq.n	1ca2 <pwm_set_frequency_tc+0x2e>
    1c88:	4a14      	ldr	r2, [pc, #80]	; (1cdc <pwm_set_frequency_tc+0x68>)
    1c8a:	4290      	cmp	r0, r2
    1c8c:	d009      	beq.n	1ca2 <pwm_set_frequency_tc+0x2e>
    1c8e:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    1c90:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    1c92:	4a13      	ldr	r2, [pc, #76]	; (1ce0 <pwm_set_frequency_tc+0x6c>)
    1c94:	4290      	cmp	r0, r2
    1c96:	d004      	beq.n	1ca2 <pwm_set_frequency_tc+0x2e>
    1c98:	4a12      	ldr	r2, [pc, #72]	; (1ce4 <pwm_set_frequency_tc+0x70>)
    1c9a:	4290      	cmp	r0, r2
    1c9c:	d001      	beq.n	1ca2 <pwm_set_frequency_tc+0x2e>
    1c9e:	2000      	movs	r0, #0
    1ca0:	e7f6      	b.n	1c90 <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    1ca2:	8823      	ldrh	r3, [r4, #0]
    1ca4:	0a1b      	lsrs	r3, r3, #8
    1ca6:	2007      	movs	r0, #7
    1ca8:	4018      	ands	r0, r3
    1caa:	4b0f      	ldr	r3, [pc, #60]	; (1ce8 <pwm_set_frequency_tc+0x74>)
    1cac:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    1cae:	4b0f      	ldr	r3, [pc, #60]	; (1cec <pwm_set_frequency_tc+0x78>)
    1cb0:	4798      	blx	r3
    1cb2:	4b0f      	ldr	r3, [pc, #60]	; (1cf0 <pwm_set_frequency_tc+0x7c>)
    1cb4:	1c29      	adds	r1, r5, #0
    1cb6:	4798      	blx	r3
    1cb8:	1c01      	adds	r1, r0, #0
    1cba:	4b0e      	ldr	r3, [pc, #56]	; (1cf4 <pwm_set_frequency_tc+0x80>)
    1cbc:	480e      	ldr	r0, [pc, #56]	; (1cf8 <pwm_set_frequency_tc+0x84>)
    1cbe:	4798      	blx	r3
    1cc0:	4b0e      	ldr	r3, [pc, #56]	; (1cfc <pwm_set_frequency_tc+0x88>)
    1cc2:	4798      	blx	r3
	if (per > 0xFF) return false;
    1cc4:	28ff      	cmp	r0, #255	; 0xff
    1cc6:	d803      	bhi.n	1cd0 <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    1cc8:	b2c0      	uxtb	r0, r0
    1cca:	7520      	strb	r0, [r4, #20]
	return true;
    1ccc:	2001      	movs	r0, #1
    1cce:	e7df      	b.n	1c90 <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    1cd0:	2000      	movs	r0, #0
    1cd2:	e7dd      	b.n	1c90 <pwm_set_frequency_tc+0x1c>
    1cd4:	42003400 	.word	0x42003400
    1cd8:	42002c00 	.word	0x42002c00
    1cdc:	42003000 	.word	0x42003000
    1ce0:	42003800 	.word	0x42003800
    1ce4:	42003c00 	.word	0x42003c00
    1ce8:	00001c39 	.word	0x00001c39
    1cec:	00004e09 	.word	0x00004e09
    1cf0:	00004829 	.word	0x00004829
    1cf4:	0000445d 	.word	0x0000445d
    1cf8:	4c371b00 	.word	0x4c371b00
    1cfc:	00004129 	.word	0x00004129

00001d00 <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    1d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d02:	0004      	movs	r4, r0
    1d04:	000e      	movs	r6, r1
    1d06:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    1d08:	4a1b      	ldr	r2, [pc, #108]	; (1d78 <pwm_set_duty_tc+0x78>)
    1d0a:	4290      	cmp	r0, r2
    1d0c:	d010      	beq.n	1d30 <pwm_set_duty_tc+0x30>
    1d0e:	d807      	bhi.n	1d20 <pwm_set_duty_tc+0x20>
    1d10:	4a1a      	ldr	r2, [pc, #104]	; (1d7c <pwm_set_duty_tc+0x7c>)
    1d12:	4290      	cmp	r0, r2
    1d14:	d00c      	beq.n	1d30 <pwm_set_duty_tc+0x30>
    1d16:	4a1a      	ldr	r2, [pc, #104]	; (1d80 <pwm_set_duty_tc+0x80>)
    1d18:	4290      	cmp	r0, r2
    1d1a:	d009      	beq.n	1d30 <pwm_set_duty_tc+0x30>
    1d1c:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    1d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    1d20:	4a18      	ldr	r2, [pc, #96]	; (1d84 <pwm_set_duty_tc+0x84>)
    1d22:	4290      	cmp	r0, r2
    1d24:	d004      	beq.n	1d30 <pwm_set_duty_tc+0x30>
    1d26:	4a18      	ldr	r2, [pc, #96]	; (1d88 <pwm_set_duty_tc+0x88>)
    1d28:	4290      	cmp	r0, r2
    1d2a:	d001      	beq.n	1d30 <pwm_set_duty_tc+0x30>
    1d2c:	2000      	movs	r0, #0
    1d2e:	e7f6      	b.n	1d1e <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1d30:	4b16      	ldr	r3, [pc, #88]	; (1d8c <pwm_set_duty_tc+0x8c>)
    1d32:	2100      	movs	r1, #0
    1d34:	1c28      	adds	r0, r5, #0
    1d36:	4798      	blx	r3
    1d38:	2800      	cmp	r0, #0
    1d3a:	d11b      	bne.n	1d74 <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    1d3c:	4b14      	ldr	r3, [pc, #80]	; (1d90 <pwm_set_duty_tc+0x90>)
    1d3e:	21fe      	movs	r1, #254	; 0xfe
    1d40:	0589      	lsls	r1, r1, #22
    1d42:	1c28      	adds	r0, r5, #0
    1d44:	4798      	blx	r3
    1d46:	2800      	cmp	r0, #0
    1d48:	d001      	beq.n	1d4e <pwm_set_duty_tc+0x4e>
    1d4a:	25fe      	movs	r5, #254	; 0xfe
    1d4c:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    1d4e:	7d27      	ldrb	r7, [r4, #20]
    1d50:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    1d52:	4b10      	ldr	r3, [pc, #64]	; (1d94 <pwm_set_duty_tc+0x94>)
    1d54:	0038      	movs	r0, r7
    1d56:	4798      	blx	r3
    1d58:	4b0f      	ldr	r3, [pc, #60]	; (1d98 <pwm_set_duty_tc+0x98>)
    1d5a:	1c29      	adds	r1, r5, #0
    1d5c:	4798      	blx	r3
    1d5e:	4b0f      	ldr	r3, [pc, #60]	; (1d9c <pwm_set_duty_tc+0x9c>)
    1d60:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    1d62:	003b      	movs	r3, r7
    1d64:	4287      	cmp	r7, r0
    1d66:	d300      	bcc.n	1d6a <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    1d68:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    1d6a:	b2db      	uxtb	r3, r3
    1d6c:	19a4      	adds	r4, r4, r6
    1d6e:	7623      	strb	r3, [r4, #24]
	return true;
    1d70:	2001      	movs	r0, #1
    1d72:	e7d4      	b.n	1d1e <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1d74:	2500      	movs	r5, #0
    1d76:	e7e1      	b.n	1d3c <pwm_set_duty_tc+0x3c>
    1d78:	42003400 	.word	0x42003400
    1d7c:	42002c00 	.word	0x42002c00
    1d80:	42003000 	.word	0x42003000
    1d84:	42003800 	.word	0x42003800
    1d88:	42003c00 	.word	0x42003c00
    1d8c:	000040d9 	.word	0x000040d9
    1d90:	00004101 	.word	0x00004101
    1d94:	00004e09 	.word	0x00004e09
    1d98:	00004829 	.word	0x00004829
    1d9c:	00004129 	.word	0x00004129

00001da0 <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    1da0:	4b11      	ldr	r3, [pc, #68]	; (1de8 <sercom_check+0x48>)
    1da2:	4298      	cmp	r0, r3
    1da4:	d017      	beq.n	1dd6 <sercom_check+0x36>
    1da6:	d80c      	bhi.n	1dc2 <sercom_check+0x22>
    1da8:	4b10      	ldr	r3, [pc, #64]	; (1dec <sercom_check+0x4c>)
    1daa:	4298      	cmp	r0, r3
    1dac:	d015      	beq.n	1dda <sercom_check+0x3a>
    1dae:	4b10      	ldr	r3, [pc, #64]	; (1df0 <sercom_check+0x50>)
    1db0:	4298      	cmp	r0, r3
    1db2:	d014      	beq.n	1dde <sercom_check+0x3e>
    1db4:	4b0f      	ldr	r3, [pc, #60]	; (1df4 <sercom_check+0x54>)
    1db6:	4298      	cmp	r0, r3
    1db8:	d001      	beq.n	1dbe <sercom_check+0x1e>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    1dba:	2000      	movs	r0, #0
		break;
	}
}
    1dbc:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    1dbe:	2001      	movs	r0, #1
    1dc0:	e7fc      	b.n	1dbc <sercom_check+0x1c>
    1dc2:	4b0d      	ldr	r3, [pc, #52]	; (1df8 <sercom_check+0x58>)
    1dc4:	4298      	cmp	r0, r3
    1dc6:	d00c      	beq.n	1de2 <sercom_check+0x42>
    1dc8:	4b0c      	ldr	r3, [pc, #48]	; (1dfc <sercom_check+0x5c>)
    1dca:	4298      	cmp	r0, r3
    1dcc:	d001      	beq.n	1dd2 <sercom_check+0x32>
		return false;
    1dce:	2000      	movs	r0, #0
    1dd0:	e7f4      	b.n	1dbc <sercom_check+0x1c>
	switch ((uint32_t)sercom) {
    1dd2:	2001      	movs	r0, #1
    1dd4:	e7f2      	b.n	1dbc <sercom_check+0x1c>
    1dd6:	2001      	movs	r0, #1
    1dd8:	e7f0      	b.n	1dbc <sercom_check+0x1c>
    1dda:	2001      	movs	r0, #1
    1ddc:	e7ee      	b.n	1dbc <sercom_check+0x1c>
    1dde:	2001      	movs	r0, #1
    1de0:	e7ec      	b.n	1dbc <sercom_check+0x1c>
    1de2:	2001      	movs	r0, #1
    1de4:	e7ea      	b.n	1dbc <sercom_check+0x1c>
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	42001400 	.word	0x42001400
    1dec:	42000c00 	.word	0x42000c00
    1df0:	42001000 	.word	0x42001000
    1df4:	42000800 	.word	0x42000800
    1df8:	42001800 	.word	0x42001800
    1dfc:	42001c00 	.word	0x42001c00

00001e00 <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    1e00:	4b29      	ldr	r3, [pc, #164]	; (1ea8 <sercom_init+0xa8>)
    1e02:	4298      	cmp	r0, r3
    1e04:	d03d      	beq.n	1e82 <sercom_init+0x82>
    1e06:	d822      	bhi.n	1e4e <sercom_init+0x4e>
    1e08:	4b28      	ldr	r3, [pc, #160]	; (1eac <sercom_init+0xac>)
    1e0a:	4298      	cmp	r0, r3
    1e0c:	d030      	beq.n	1e70 <sercom_init+0x70>
    1e0e:	4b28      	ldr	r3, [pc, #160]	; (1eb0 <sercom_init+0xb0>)
    1e10:	4298      	cmp	r0, r3
    1e12:	d108      	bne.n	1e26 <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    1e14:	4a27      	ldr	r2, [pc, #156]	; (1eb4 <sercom_init+0xb4>)
    1e16:	6a13      	ldr	r3, [r2, #32]
    1e18:	2110      	movs	r1, #16
    1e1a:	430b      	orrs	r3, r1
    1e1c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    1e1e:	4b26      	ldr	r3, [pc, #152]	; (1eb8 <sercom_init+0xb8>)
    1e20:	4a26      	ldr	r2, [pc, #152]	; (1ebc <sercom_init+0xbc>)
    1e22:	805a      	strh	r2, [r3, #2]
		break;
    1e24:	e00a      	b.n	1e3c <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    1e26:	4b26      	ldr	r3, [pc, #152]	; (1ec0 <sercom_init+0xc0>)
    1e28:	4298      	cmp	r0, r3
    1e2a:	d10e      	bne.n	1e4a <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    1e2c:	4a21      	ldr	r2, [pc, #132]	; (1eb4 <sercom_init+0xb4>)
    1e2e:	6a13      	ldr	r3, [r2, #32]
    1e30:	2104      	movs	r1, #4
    1e32:	430b      	orrs	r3, r1
    1e34:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    1e36:	4b20      	ldr	r3, [pc, #128]	; (1eb8 <sercom_init+0xb8>)
    1e38:	4a22      	ldr	r2, [pc, #136]	; (1ec4 <sercom_init+0xc4>)
    1e3a:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1e3c:	4b1e      	ldr	r3, [pc, #120]	; (1eb8 <sercom_init+0xb8>)
    1e3e:	785b      	ldrb	r3, [r3, #1]
    1e40:	b25b      	sxtb	r3, r3
    1e42:	2b00      	cmp	r3, #0
    1e44:	dbfa      	blt.n	1e3c <sercom_init+0x3c>
	
	return true;
    1e46:	2001      	movs	r0, #1
    1e48:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    1e4a:	2000      	movs	r0, #0
    1e4c:	e7fc      	b.n	1e48 <sercom_init+0x48>
    1e4e:	4b1e      	ldr	r3, [pc, #120]	; (1ec8 <sercom_init+0xc8>)
    1e50:	4298      	cmp	r0, r3
    1e52:	d01f      	beq.n	1e94 <sercom_init+0x94>
    1e54:	4b1d      	ldr	r3, [pc, #116]	; (1ecc <sercom_init+0xcc>)
    1e56:	4298      	cmp	r0, r3
    1e58:	d108      	bne.n	1e6c <sercom_init+0x6c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    1e5a:	4a16      	ldr	r2, [pc, #88]	; (1eb4 <sercom_init+0xb4>)
    1e5c:	6a13      	ldr	r3, [r2, #32]
    1e5e:	2180      	movs	r1, #128	; 0x80
    1e60:	430b      	orrs	r3, r1
    1e62:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    1e64:	4b14      	ldr	r3, [pc, #80]	; (1eb8 <sercom_init+0xb8>)
    1e66:	4a1a      	ldr	r2, [pc, #104]	; (1ed0 <sercom_init+0xd0>)
    1e68:	805a      	strh	r2, [r3, #2]
		break;
    1e6a:	e7e7      	b.n	1e3c <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    1e6c:	2000      	movs	r0, #0
    1e6e:	e7eb      	b.n	1e48 <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    1e70:	4a10      	ldr	r2, [pc, #64]	; (1eb4 <sercom_init+0xb4>)
    1e72:	6a13      	ldr	r3, [r2, #32]
    1e74:	2108      	movs	r1, #8
    1e76:	430b      	orrs	r3, r1
    1e78:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    1e7a:	4b0f      	ldr	r3, [pc, #60]	; (1eb8 <sercom_init+0xb8>)
    1e7c:	4a15      	ldr	r2, [pc, #84]	; (1ed4 <sercom_init+0xd4>)
    1e7e:	805a      	strh	r2, [r3, #2]
		break;
    1e80:	e7dc      	b.n	1e3c <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    1e82:	4a0c      	ldr	r2, [pc, #48]	; (1eb4 <sercom_init+0xb4>)
    1e84:	6a13      	ldr	r3, [r2, #32]
    1e86:	2120      	movs	r1, #32
    1e88:	430b      	orrs	r3, r1
    1e8a:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    1e8c:	4b0a      	ldr	r3, [pc, #40]	; (1eb8 <sercom_init+0xb8>)
    1e8e:	4a12      	ldr	r2, [pc, #72]	; (1ed8 <sercom_init+0xd8>)
    1e90:	805a      	strh	r2, [r3, #2]
		break;
    1e92:	e7d3      	b.n	1e3c <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    1e94:	4a07      	ldr	r2, [pc, #28]	; (1eb4 <sercom_init+0xb4>)
    1e96:	6a13      	ldr	r3, [r2, #32]
    1e98:	2140      	movs	r1, #64	; 0x40
    1e9a:	430b      	orrs	r3, r1
    1e9c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    1e9e:	4b06      	ldr	r3, [pc, #24]	; (1eb8 <sercom_init+0xb8>)
    1ea0:	4a0e      	ldr	r2, [pc, #56]	; (1edc <sercom_init+0xdc>)
    1ea2:	805a      	strh	r2, [r3, #2]
		break;
    1ea4:	e7ca      	b.n	1e3c <sercom_init+0x3c>
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	42001400 	.word	0x42001400
    1eac:	42000c00 	.word	0x42000c00
    1eb0:	42001000 	.word	0x42001000
    1eb4:	40000400 	.word	0x40000400
    1eb8:	40000c00 	.word	0x40000c00
    1ebc:	00004016 	.word	0x00004016
    1ec0:	42000800 	.word	0x42000800
    1ec4:	00004014 	.word	0x00004014
    1ec8:	42001800 	.word	0x42001800
    1ecc:	42001c00 	.word	0x42001c00
    1ed0:	00004019 	.word	0x00004019
    1ed4:	00004015 	.word	0x00004015
    1ed8:	00004017 	.word	0x00004017
    1edc:	00004018 	.word	0x00004018

00001ee0 <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    1ee0:	b570      	push	{r4, r5, r6, lr}
    1ee2:	0006      	movs	r6, r0
    1ee4:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    1ee6:	4b0a      	ldr	r3, [pc, #40]	; (1f10 <spi_set_baud+0x30>)
    1ee8:	4798      	blx	r3
    1eea:	1e04      	subs	r4, r0, #0
    1eec:	d00e      	beq.n	1f0c <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    1eee:	0068      	lsls	r0, r5, #1
    1ef0:	4b08      	ldr	r3, [pc, #32]	; (1f14 <spi_set_baud+0x34>)
    1ef2:	4798      	blx	r3
    1ef4:	1c01      	adds	r1, r0, #0
    1ef6:	4b08      	ldr	r3, [pc, #32]	; (1f18 <spi_set_baud+0x38>)
    1ef8:	4808      	ldr	r0, [pc, #32]	; (1f1c <spi_set_baud+0x3c>)
    1efa:	4798      	blx	r3
    1efc:	4b08      	ldr	r3, [pc, #32]	; (1f20 <spi_set_baud+0x40>)
    1efe:	21fe      	movs	r1, #254	; 0xfe
    1f00:	0589      	lsls	r1, r1, #22
    1f02:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    1f04:	4b07      	ldr	r3, [pc, #28]	; (1f24 <spi_set_baud+0x44>)
    1f06:	4798      	blx	r3
    1f08:	b2c0      	uxtb	r0, r0
    1f0a:	7330      	strb	r0, [r6, #12]
	return true;
}
    1f0c:	0020      	movs	r0, r4
    1f0e:	bd70      	pop	{r4, r5, r6, pc}
    1f10:	00001da1 	.word	0x00001da1
    1f14:	00004ea1 	.word	0x00004ea1
    1f18:	0000445d 	.word	0x0000445d
    1f1c:	4c371b00 	.word	0x4c371b00
    1f20:	00004aa5 	.word	0x00004aa5
    1f24:	00004129 	.word	0x00004129

00001f28 <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    1f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f2a:	46ce      	mov	lr, r9
    1f2c:	4647      	mov	r7, r8
    1f2e:	b580      	push	{r7, lr}
    1f30:	0004      	movs	r4, r0
    1f32:	000d      	movs	r5, r1
    1f34:	0017      	movs	r7, r2
    1f36:	001e      	movs	r6, r3
    1f38:	ab08      	add	r3, sp, #32
    1f3a:	781b      	ldrb	r3, [r3, #0]
    1f3c:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    1f3e:	4b12      	ldr	r3, [pc, #72]	; (1f88 <spi_init+0x60>)
    1f40:	4798      	blx	r3
    1f42:	4680      	mov	r8, r0
    1f44:	2800      	cmp	r0, #0
    1f46:	d104      	bne.n	1f52 <spi_init+0x2a>
}
    1f48:	4640      	mov	r0, r8
    1f4a:	bcc0      	pop	{r6, r7}
    1f4c:	46b9      	mov	r9, r7
    1f4e:	46b0      	mov	r8, r6
    1f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    1f52:	076d      	lsls	r5, r5, #29
    1f54:	073f      	lsls	r7, r7, #28
    1f56:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    1f58:	0536      	lsls	r6, r6, #20
    1f5a:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    1f5c:	464b      	mov	r3, r9
    1f5e:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    1f60:	431d      	orrs	r5, r3
    1f62:	230c      	movs	r3, #12
    1f64:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    1f66:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    1f68:	2380      	movs	r3, #128	; 0x80
    1f6a:	029b      	lsls	r3, r3, #10
    1f6c:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    1f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f70:	0020      	movs	r0, r4
    1f72:	4b06      	ldr	r3, [pc, #24]	; (1f8c <spi_init+0x64>)
    1f74:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    1f76:	6823      	ldr	r3, [r4, #0]
    1f78:	2202      	movs	r2, #2
    1f7a:	4313      	orrs	r3, r2
    1f7c:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    1f7e:	69e3      	ldr	r3, [r4, #28]
    1f80:	079b      	lsls	r3, r3, #30
    1f82:	d4fc      	bmi.n	1f7e <spi_init+0x56>
    1f84:	e7e0      	b.n	1f48 <spi_init+0x20>
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	00001e01 	.word	0x00001e01
    1f8c:	00001ee1 	.word	0x00001ee1

00001f90 <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    1f90:	7e03      	ldrb	r3, [r0, #24]
    1f92:	07db      	lsls	r3, r3, #31
    1f94:	d5fc      	bpl.n	1f90 <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    1f96:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    1f98:	7e03      	ldrb	r3, [r0, #24]
    1f9a:	079b      	lsls	r3, r3, #30
    1f9c:	d5fc      	bpl.n	1f98 <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    1f9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1fa0:	b2c0      	uxtb	r0, r0
}
    1fa2:	4770      	bx	lr

00001fa4 <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    1fa4:	e000      	b.n	1fa8 <spi_flush+0x4>
    1fa6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1fa8:	7e03      	ldrb	r3, [r0, #24]
    1faa:	075b      	lsls	r3, r3, #29
    1fac:	d4fb      	bmi.n	1fa6 <spi_flush+0x2>
    1fae:	4770      	bx	lr

00001fb0 <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    1fb0:	4a27      	ldr	r2, [pc, #156]	; (2050 <STACK_SIZE+0x50>)
    1fb2:	6853      	ldr	r3, [r2, #4]
    1fb4:	2102      	movs	r1, #2
    1fb6:	430b      	orrs	r3, r1
    1fb8:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    1fba:	4a26      	ldr	r2, [pc, #152]	; (2054 <STACK_SIZE+0x54>)
    1fbc:	4b26      	ldr	r3, [pc, #152]	; (2058 <STACK_SIZE+0x58>)
    1fbe:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    1fc0:	8a93      	ldrh	r3, [r2, #20]
    1fc2:	430b      	orrs	r3, r1
    1fc4:	b29b      	uxth	r3, r3
    1fc6:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    1fc8:	4b22      	ldr	r3, [pc, #136]	; (2054 <STACK_SIZE+0x54>)
    1fca:	68db      	ldr	r3, [r3, #12]
    1fcc:	079b      	lsls	r3, r3, #30
    1fce:	d5fb      	bpl.n	1fc8 <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    1fd0:	4b22      	ldr	r3, [pc, #136]	; (205c <STACK_SIZE+0x5c>)
    1fd2:	2202      	movs	r2, #2
    1fd4:	32ff      	adds	r2, #255	; 0xff
    1fd6:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    1fd8:	4a21      	ldr	r2, [pc, #132]	; (2060 <STACK_SIZE+0x60>)
    1fda:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1fdc:	4b1f      	ldr	r3, [pc, #124]	; (205c <STACK_SIZE+0x5c>)
    1fde:	785b      	ldrb	r3, [r3, #1]
    1fe0:	b25b      	sxtb	r3, r3
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	dbfa      	blt.n	1fdc <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    1fe6:	4b1d      	ldr	r3, [pc, #116]	; (205c <STACK_SIZE+0x5c>)
    1fe8:	2282      	movs	r2, #130	; 0x82
    1fea:	01d2      	lsls	r2, r2, #7
    1fec:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    1fee:	4b19      	ldr	r3, [pc, #100]	; (2054 <STACK_SIZE+0x54>)
    1ff0:	68db      	ldr	r3, [r3, #12]
    1ff2:	06db      	lsls	r3, r3, #27
    1ff4:	d5fb      	bpl.n	1fee <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    1ff6:	4b17      	ldr	r3, [pc, #92]	; (2054 <STACK_SIZE+0x54>)
    1ff8:	2202      	movs	r2, #2
    1ffa:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    1ffc:	4b15      	ldr	r3, [pc, #84]	; (2054 <STACK_SIZE+0x54>)
    1ffe:	68db      	ldr	r3, [r3, #12]
    2000:	06db      	lsls	r3, r3, #27
    2002:	d5fb      	bpl.n	1ffc <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    2004:	4b13      	ldr	r3, [pc, #76]	; (2054 <STACK_SIZE+0x54>)
    2006:	4a17      	ldr	r2, [pc, #92]	; (2064 <STACK_SIZE+0x64>)
    2008:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    200a:	4b12      	ldr	r3, [pc, #72]	; (2054 <STACK_SIZE+0x54>)
    200c:	68db      	ldr	r3, [r3, #12]
    200e:	06db      	lsls	r3, r3, #27
    2010:	d5fb      	bpl.n	200a <STACK_SIZE+0xa>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2012:	4b15      	ldr	r3, [pc, #84]	; (2068 <STACK_SIZE+0x68>)
    2014:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    2016:	4b0f      	ldr	r3, [pc, #60]	; (2054 <STACK_SIZE+0x54>)
    2018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    201a:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    201c:	4b0d      	ldr	r3, [pc, #52]	; (2054 <STACK_SIZE+0x54>)
    201e:	68db      	ldr	r3, [r3, #12]
    2020:	06db      	lsls	r3, r3, #27
    2022:	d5fb      	bpl.n	201c <STACK_SIZE+0x1c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    2024:	4a0b      	ldr	r2, [pc, #44]	; (2054 <STACK_SIZE+0x54>)
    2026:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2028:	4910      	ldr	r1, [pc, #64]	; (206c <STACK_SIZE+0x6c>)
    202a:	430b      	orrs	r3, r1
    202c:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    202e:	4b09      	ldr	r3, [pc, #36]	; (2054 <STACK_SIZE+0x54>)
    2030:	68db      	ldr	r3, [r3, #12]
    2032:	061b      	lsls	r3, r3, #24
    2034:	d5fb      	bpl.n	202e <STACK_SIZE+0x2e>
    2036:	4b07      	ldr	r3, [pc, #28]	; (2054 <STACK_SIZE+0x54>)
    2038:	68db      	ldr	r3, [r3, #12]
    203a:	065b      	lsls	r3, r3, #25
    203c:	d5f7      	bpl.n	202e <STACK_SIZE+0x2e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    203e:	4b07      	ldr	r3, [pc, #28]	; (205c <STACK_SIZE+0x5c>)
    2040:	4a0b      	ldr	r2, [pc, #44]	; (2070 <STACK_SIZE+0x70>)
    2042:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2044:	4b05      	ldr	r3, [pc, #20]	; (205c <STACK_SIZE+0x5c>)
    2046:	785b      	ldrb	r3, [r3, #1]
    2048:	b25b      	sxtb	r3, r3
    204a:	2b00      	cmp	r3, #0
    204c:	dbfa      	blt.n	2044 <STACK_SIZE+0x44>
}
    204e:	4770      	bx	lr
    2050:	41004000 	.word	0x41004000
    2054:	40000800 	.word	0x40000800
    2058:	0000040c 	.word	0x0000040c
    205c:	40000c00 	.word	0x40000c00
    2060:	00030501 	.word	0x00030501
    2064:	7dff05b9 	.word	0x7dff05b9
    2068:	00806020 	.word	0x00806020
    206c:	00000806 	.word	0x00000806
    2070:	00030700 	.word	0x00030700

00002074 <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    2074:	3801      	subs	r0, #1
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	46c0      	nop			; (mov r8, r8)
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	46c0      	nop			; (mov r8, r8)
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	d1f8      	bne.n	2074 <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    2082:	4770      	bx	lr

00002084 <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    2084:	4a14      	ldr	r2, [pc, #80]	; (20d8 <init_timer+0x54>)
    2086:	6a11      	ldr	r1, [r2, #32]
    2088:	2380      	movs	r3, #128	; 0x80
    208a:	015b      	lsls	r3, r3, #5
    208c:	430b      	orrs	r3, r1
    208e:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    2090:	4b12      	ldr	r3, [pc, #72]	; (20dc <init_timer+0x58>)
    2092:	4a13      	ldr	r2, [pc, #76]	; (20e0 <init_timer+0x5c>)
    2094:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2096:	4b11      	ldr	r3, [pc, #68]	; (20dc <init_timer+0x58>)
    2098:	785b      	ldrb	r3, [r3, #1]
    209a:	b25b      	sxtb	r3, r3
    209c:	2b00      	cmp	r3, #0
    209e:	dbfa      	blt.n	2096 <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    20a0:	4b10      	ldr	r3, [pc, #64]	; (20e4 <init_timer+0x60>)
    20a2:	2208      	movs	r2, #8
    20a4:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    20a6:	4b0f      	ldr	r3, [pc, #60]	; (20e4 <init_timer+0x60>)
    20a8:	7bdb      	ldrb	r3, [r3, #15]
    20aa:	b25b      	sxtb	r3, r3
    20ac:	2b00      	cmp	r3, #0
    20ae:	dbfa      	blt.n	20a6 <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    20b0:	4a0c      	ldr	r2, [pc, #48]	; (20e4 <init_timer+0x60>)
    20b2:	8813      	ldrh	r3, [r2, #0]
    20b4:	2102      	movs	r1, #2
    20b6:	430b      	orrs	r3, r1
    20b8:	b29b      	uxth	r3, r3
    20ba:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    20bc:	4b09      	ldr	r3, [pc, #36]	; (20e4 <init_timer+0x60>)
    20be:	7bdb      	ldrb	r3, [r3, #15]
    20c0:	b25b      	sxtb	r3, r3
    20c2:	2b00      	cmp	r3, #0
    20c4:	dbfa      	blt.n	20bc <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    20c6:	4b07      	ldr	r3, [pc, #28]	; (20e4 <init_timer+0x60>)
    20c8:	4a07      	ldr	r2, [pc, #28]	; (20e8 <init_timer+0x64>)
    20ca:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    20cc:	4b05      	ldr	r3, [pc, #20]	; (20e4 <init_timer+0x60>)
    20ce:	7bdb      	ldrb	r3, [r3, #15]
    20d0:	b25b      	sxtb	r3, r3
    20d2:	2b00      	cmp	r3, #0
    20d4:	dbfa      	blt.n	20cc <init_timer+0x48>
}
    20d6:	4770      	bx	lr
    20d8:	40000400 	.word	0x40000400
    20dc:	40000c00 	.word	0x40000c00
    20e0:	0000401c 	.word	0x0000401c
    20e4:	42003000 	.word	0x42003000
    20e8:	00004010 	.word	0x00004010

000020ec <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    20ec:	4b01      	ldr	r3, [pc, #4]	; (20f4 <read_timer_20ns+0x8>)
    20ee:	6918      	ldr	r0, [r3, #16]
}
    20f0:	4770      	bx	lr
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	42003000 	.word	0x42003000

000020f8 <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    20f8:	4b04      	ldr	r3, [pc, #16]	; (210c <init_timer_interrupt+0x14>)
    20fa:	2210      	movs	r2, #16
    20fc:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    20fe:	4b03      	ldr	r3, [pc, #12]	; (210c <init_timer_interrupt+0x14>)
    2100:	7bdb      	ldrb	r3, [r3, #15]
    2102:	b25b      	sxtb	r3, r3
    2104:	2b00      	cmp	r3, #0
    2106:	dbfa      	blt.n	20fe <init_timer_interrupt+0x6>
}
    2108:	4770      	bx	lr
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	42003000 	.word	0x42003000

00002110 <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2110:	4b02      	ldr	r3, [pc, #8]	; (211c <timer_enable_interrupt+0xc>)
    2112:	2280      	movs	r2, #128	; 0x80
    2114:	0312      	lsls	r2, r2, #12
    2116:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    2118:	4770      	bx	lr
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	e000e100 	.word	0xe000e100

00002120 <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2120:	4a04      	ldr	r2, [pc, #16]	; (2134 <timer_disable_interrupt+0x14>)
    2122:	2380      	movs	r3, #128	; 0x80
    2124:	2180      	movs	r1, #128	; 0x80
    2126:	0309      	lsls	r1, r1, #12
    2128:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    212a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    212e:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    2132:	4770      	bx	lr
    2134:	e000e100 	.word	0xe000e100

00002138 <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    2138:	4b04      	ldr	r3, [pc, #16]	; (214c <timer_clear_interrupt+0x14>)
    213a:	2210      	movs	r2, #16
    213c:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    213e:	4a04      	ldr	r2, [pc, #16]	; (2150 <timer_clear_interrupt+0x18>)
    2140:	23c0      	movs	r3, #192	; 0xc0
    2142:	005b      	lsls	r3, r3, #1
    2144:	2180      	movs	r1, #128	; 0x80
    2146:	0309      	lsls	r1, r1, #12
    2148:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    214a:	4770      	bx	lr
    214c:	42003000 	.word	0x42003000
    2150:	e000e100 	.word	0xe000e100

00002154 <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    2154:	4a02      	ldr	r2, [pc, #8]	; (2160 <timer_set_interrupt_time+0xc>)
    2156:	6993      	ldr	r3, [r2, #24]
    2158:	4303      	orrs	r3, r0
    215a:	6193      	str	r3, [r2, #24]
    215c:	4770      	bx	lr
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	42003000 	.word	0x42003000

00002164 <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2164:	b570      	push	{r4, r5, r6, lr}
    2166:	0006      	movs	r6, r0
    2168:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    216a:	4b10      	ldr	r3, [pc, #64]	; (21ac <uart_set_baud+0x48>)
    216c:	4798      	blx	r3
    216e:	1e04      	subs	r4, r0, #0
    2170:	d018      	beq.n	21a4 <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    2172:	4b0f      	ldr	r3, [pc, #60]	; (21b0 <uart_set_baud+0x4c>)
    2174:	429d      	cmp	r5, r3
    2176:	d817      	bhi.n	21a8 <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    2178:	4b0e      	ldr	r3, [pc, #56]	; (21b4 <uart_set_baud+0x50>)
    217a:	0028      	movs	r0, r5
    217c:	4798      	blx	r3
    217e:	4b0e      	ldr	r3, [pc, #56]	; (21b8 <uart_set_baud+0x54>)
    2180:	490e      	ldr	r1, [pc, #56]	; (21bc <uart_set_baud+0x58>)
    2182:	4798      	blx	r3
    2184:	4d0e      	ldr	r5, [pc, #56]	; (21c0 <uart_set_baud+0x5c>)
    2186:	2183      	movs	r1, #131	; 0x83
    2188:	05c9      	lsls	r1, r1, #23
    218a:	47a8      	blx	r5
    218c:	1c01      	adds	r1, r0, #0
    218e:	4b0d      	ldr	r3, [pc, #52]	; (21c4 <uart_set_baud+0x60>)
    2190:	20fe      	movs	r0, #254	; 0xfe
    2192:	0580      	lsls	r0, r0, #22
    2194:	4798      	blx	r3
    2196:	218f      	movs	r1, #143	; 0x8f
    2198:	05c9      	lsls	r1, r1, #23
    219a:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    219c:	4b0a      	ldr	r3, [pc, #40]	; (21c8 <uart_set_baud+0x64>)
    219e:	4798      	blx	r3
    21a0:	b280      	uxth	r0, r0
    21a2:	81b0      	strh	r0, [r6, #12]
    return true;
}
    21a4:	0020      	movs	r0, r4
    21a6:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    21a8:	2400      	movs	r4, #0
    21aa:	e7fb      	b.n	21a4 <uart_set_baud+0x40>
    21ac:	00001da1 	.word	0x00001da1
    21b0:	002dc6c0 	.word	0x002dc6c0
    21b4:	00004ea1 	.word	0x00004ea1
    21b8:	0000445d 	.word	0x0000445d
    21bc:	4c371b00 	.word	0x4c371b00
    21c0:	00004829 	.word	0x00004829
    21c4:	00004aa5 	.word	0x00004aa5
    21c8:	00004129 	.word	0x00004129

000021cc <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    21cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ce:	0004      	movs	r4, r0
    21d0:	000e      	movs	r6, r1
    21d2:	0017      	movs	r7, r2
    21d4:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    21d6:	4b11      	ldr	r3, [pc, #68]	; (221c <uart_init+0x50>)
    21d8:	4798      	blx	r3
    21da:	2800      	cmp	r0, #0
    21dc:	d01c      	beq.n	2218 <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    21de:	0536      	lsls	r6, r6, #20
    21e0:	23c0      	movs	r3, #192	; 0xc0
    21e2:	039b      	lsls	r3, r3, #14
    21e4:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    21e6:	043f      	lsls	r7, r7, #16
    21e8:	22c0      	movs	r2, #192	; 0xc0
    21ea:	0292      	lsls	r2, r2, #10
    21ec:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    21ee:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    21f0:	4b0b      	ldr	r3, [pc, #44]	; (2220 <uart_init+0x54>)
    21f2:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    21f4:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    21f6:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    21f8:	69e2      	ldr	r2, [r4, #28]
    21fa:	0752      	lsls	r2, r2, #29
    21fc:	d4fc      	bmi.n	21f8 <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    21fe:	0029      	movs	r1, r5
    2200:	0020      	movs	r0, r4
    2202:	4b08      	ldr	r3, [pc, #32]	; (2224 <uart_init+0x58>)
    2204:	4798      	blx	r3
    2206:	2800      	cmp	r0, #0
    2208:	d006      	beq.n	2218 <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    220a:	6823      	ldr	r3, [r4, #0]
    220c:	2202      	movs	r2, #2
    220e:	4313      	orrs	r3, r2
    2210:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    2212:	69e3      	ldr	r3, [r4, #28]
    2214:	079b      	lsls	r3, r3, #30
    2216:	d4fc      	bmi.n	2212 <uart_init+0x46>
}
    2218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	00001e01 	.word	0x00001e01
    2220:	40000004 	.word	0x40000004
    2224:	00002165 	.word	0x00002165

00002228 <uart_flush>:

void uart_flush(sercom_registers_t* sercom) {
    while (sercom->USART_INT.SERCOM_INTFLAG & SERCOM_USART_INT_INTFLAG_RXC_Msk) sercom->USART_INT.SERCOM_DATA;
    2228:	e000      	b.n	222c <uart_flush+0x4>
    222a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    222c:	7e03      	ldrb	r3, [r0, #24]
    222e:	075b      	lsls	r3, r3, #29
    2230:	d4fb      	bmi.n	222a <uart_flush+0x2>
}
    2232:	4770      	bx	lr

00002234 <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    2234:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    2236:	4b10      	ldr	r3, [pc, #64]	; (2278 <usb_ep0_in_multi+0x44>)
    2238:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    223a:	2c40      	cmp	r4, #64	; 0x40
    223c:	d900      	bls.n	2240 <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    223e:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    2240:	0026      	movs	r6, r4
    2242:	4b0d      	ldr	r3, [pc, #52]	; (2278 <usb_ep0_in_multi+0x44>)
    2244:	1d1d      	adds	r5, r3, #4
    2246:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2248:	0022      	movs	r2, r4
    224a:	0028      	movs	r0, r5
    224c:	4b0b      	ldr	r3, [pc, #44]	; (227c <usb_ep0_in_multi+0x48>)
    224e:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    2250:	2300      	movs	r3, #0
    2252:	0022      	movs	r2, r4
    2254:	0029      	movs	r1, r5
    2256:	2080      	movs	r0, #128	; 0x80
    2258:	4d09      	ldr	r5, [pc, #36]	; (2280 <usb_ep0_in_multi+0x4c>)
    225a:	47a8      	blx	r5

	if (tsize == 0) {
    225c:	2c00      	cmp	r4, #0
    225e:	d007      	beq.n	2270 <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    2260:	4b05      	ldr	r3, [pc, #20]	; (2278 <usb_ep0_in_multi+0x44>)
    2262:	881a      	ldrh	r2, [r3, #0]
    2264:	1b12      	subs	r2, r2, r4
    2266:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    2268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    226a:	1992      	adds	r2, r2, r6
    226c:	645a      	str	r2, [r3, #68]	; 0x44
}
    226e:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    2270:	4b04      	ldr	r3, [pc, #16]	; (2284 <usb_ep0_in_multi+0x50>)
    2272:	4798      	blx	r3
    2274:	e7f4      	b.n	2260 <usb_ep0_in_multi+0x2c>
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	20000440 	.word	0x20000440
    227c:	00005059 	.word	0x00005059
    2280:	00002745 	.word	0x00002745
    2284:	0000284d 	.word	0x0000284d

00002288 <usb_handle_setup>:

void usb_handle_setup(void){
    2288:	b510      	push	{r4, lr}
    228a:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    228c:	4b40      	ldr	r3, [pc, #256]	; (2390 <usb_handle_setup+0x108>)
    228e:	2248      	movs	r2, #72	; 0x48
    2290:	5c9b      	ldrb	r3, [r3, r2]
    2292:	3218      	adds	r2, #24
    2294:	421a      	tst	r2, r3
    2296:	d177      	bne.n	2388 <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    2298:	4b3e      	ldr	r3, [pc, #248]	; (2394 <usb_handle_setup+0x10c>)
    229a:	785b      	ldrb	r3, [r3, #1]
    229c:	2b0b      	cmp	r3, #11
    229e:	d870      	bhi.n	2382 <usb_handle_setup+0xfa>
    22a0:	009b      	lsls	r3, r3, #2
    22a2:	4a3d      	ldr	r2, [pc, #244]	; (2398 <usb_handle_setup+0x110>)
    22a4:	58d3      	ldr	r3, [r2, r3]
    22a6:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    22a8:	4b39      	ldr	r3, [pc, #228]	; (2390 <usb_handle_setup+0x108>)
    22aa:	2200      	movs	r2, #0
    22ac:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    22ae:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    22b0:	2002      	movs	r0, #2
    22b2:	4b3a      	ldr	r3, [pc, #232]	; (239c <usb_handle_setup+0x114>)
    22b4:	4798      	blx	r3
				return usb_ep0_out();
    22b6:	4b3a      	ldr	r3, [pc, #232]	; (23a0 <usb_handle_setup+0x118>)
    22b8:	4798      	blx	r3
    22ba:	e067      	b.n	238c <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    22bc:	2000      	movs	r0, #0
    22be:	4b37      	ldr	r3, [pc, #220]	; (239c <usb_handle_setup+0x114>)
    22c0:	4798      	blx	r3
				return usb_ep0_out();
    22c2:	4b37      	ldr	r3, [pc, #220]	; (23a0 <usb_handle_setup+0x118>)
    22c4:	4798      	blx	r3
    22c6:	e061      	b.n	238c <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    22c8:	2000      	movs	r0, #0
    22ca:	4b34      	ldr	r3, [pc, #208]	; (239c <usb_handle_setup+0x114>)
    22cc:	4798      	blx	r3
				return usb_ep0_out();
    22ce:	4b34      	ldr	r3, [pc, #208]	; (23a0 <usb_handle_setup+0x118>)
    22d0:	4798      	blx	r3
    22d2:	e05b      	b.n	238c <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    22d4:	4b2f      	ldr	r3, [pc, #188]	; (2394 <usb_handle_setup+0x10c>)
    22d6:	8859      	ldrh	r1, [r3, #2]
    22d8:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    22da:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    22dc:	2300      	movs	r3, #0
    22de:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    22e0:	aa01      	add	r2, sp, #4
    22e2:	4b30      	ldr	r3, [pc, #192]	; (23a4 <usb_handle_setup+0x11c>)
    22e4:	4798      	blx	r3

				if (size && descriptor){
    22e6:	2800      	cmp	r0, #0
    22e8:	d019      	beq.n	231e <usb_handle_setup+0x96>
    22ea:	9901      	ldr	r1, [sp, #4]
    22ec:	2900      	cmp	r1, #0
    22ee:	d016      	beq.n	231e <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    22f0:	4a28      	ldr	r2, [pc, #160]	; (2394 <usb_handle_setup+0x10c>)
    22f2:	88d2      	ldrh	r2, [r2, #6]
    22f4:	4282      	cmp	r2, r0
    22f6:	d300      	bcc.n	22fa <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    22f8:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    22fa:	4b2b      	ldr	r3, [pc, #172]	; (23a8 <usb_handle_setup+0x120>)
    22fc:	4299      	cmp	r1, r3
    22fe:	d005      	beq.n	230c <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    2300:	4b23      	ldr	r3, [pc, #140]	; (2390 <usb_handle_setup+0x108>)
    2302:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    2304:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    2306:	4b29      	ldr	r3, [pc, #164]	; (23ac <usb_handle_setup+0x124>)
    2308:	4798      	blx	r3
					}

					return;
    230a:	e03f      	b.n	238c <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    230c:	4920      	ldr	r1, [pc, #128]	; (2390 <usb_handle_setup+0x108>)
    230e:	2300      	movs	r3, #0
    2310:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2312:	3104      	adds	r1, #4
    2314:	3301      	adds	r3, #1
    2316:	2080      	movs	r0, #128	; 0x80
    2318:	4c25      	ldr	r4, [pc, #148]	; (23b0 <usb_handle_setup+0x128>)
    231a:	47a0      	blx	r4
    231c:	e036      	b.n	238c <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    231e:	4b25      	ldr	r3, [pc, #148]	; (23b4 <usb_handle_setup+0x12c>)
    2320:	4798      	blx	r3
    2322:	e033      	b.n	238c <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    2324:	4b1a      	ldr	r3, [pc, #104]	; (2390 <usb_handle_setup+0x108>)
    2326:	2250      	movs	r2, #80	; 0x50
    2328:	5c9a      	ldrb	r2, [r3, r2]
    232a:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    232c:	2001      	movs	r0, #1
    232e:	4b1b      	ldr	r3, [pc, #108]	; (239c <usb_handle_setup+0x114>)
    2330:	4798      	blx	r3
				return usb_ep0_out();
    2332:	4b1b      	ldr	r3, [pc, #108]	; (23a0 <usb_handle_setup+0x118>)
    2334:	4798      	blx	r3
    2336:	e029      	b.n	238c <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    2338:	4b16      	ldr	r3, [pc, #88]	; (2394 <usb_handle_setup+0x10c>)
    233a:	7898      	ldrb	r0, [r3, #2]
    233c:	4b1e      	ldr	r3, [pc, #120]	; (23b8 <usb_handle_setup+0x130>)
    233e:	4798      	blx	r3
    2340:	2800      	cmp	r0, #0
    2342:	d00b      	beq.n	235c <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    2344:	2000      	movs	r0, #0
    2346:	4b15      	ldr	r3, [pc, #84]	; (239c <usb_handle_setup+0x114>)
    2348:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    234a:	4b11      	ldr	r3, [pc, #68]	; (2390 <usb_handle_setup+0x108>)
    234c:	001a      	movs	r2, r3
    234e:	3248      	adds	r2, #72	; 0x48
    2350:	7891      	ldrb	r1, [r2, #2]
    2352:	2250      	movs	r2, #80	; 0x50
    2354:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    2356:	4b12      	ldr	r3, [pc, #72]	; (23a0 <usb_handle_setup+0x118>)
    2358:	4798      	blx	r3
    235a:	e017      	b.n	238c <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    235c:	4b15      	ldr	r3, [pc, #84]	; (23b4 <usb_handle_setup+0x12c>)
    235e:	4798      	blx	r3
    2360:	e014      	b.n	238c <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    2362:	4b0c      	ldr	r3, [pc, #48]	; (2394 <usb_handle_setup+0x10c>)
    2364:	8859      	ldrh	r1, [r3, #2]
    2366:	8898      	ldrh	r0, [r3, #4]
    2368:	4b14      	ldr	r3, [pc, #80]	; (23bc <usb_handle_setup+0x134>)
    236a:	4798      	blx	r3
    236c:	2800      	cmp	r0, #0
    236e:	d005      	beq.n	237c <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    2370:	2000      	movs	r0, #0
    2372:	4b0a      	ldr	r3, [pc, #40]	; (239c <usb_handle_setup+0x114>)
    2374:	4798      	blx	r3
					return usb_ep0_out();
    2376:	4b0a      	ldr	r3, [pc, #40]	; (23a0 <usb_handle_setup+0x118>)
    2378:	4798      	blx	r3
    237a:	e007      	b.n	238c <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    237c:	4b0d      	ldr	r3, [pc, #52]	; (23b4 <usb_handle_setup+0x12c>)
    237e:	4798      	blx	r3
    2380:	e004      	b.n	238c <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    2382:	4b0c      	ldr	r3, [pc, #48]	; (23b4 <usb_handle_setup+0x12c>)
    2384:	4798      	blx	r3
    2386:	e001      	b.n	238c <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    2388:	4b0d      	ldr	r3, [pc, #52]	; (23c0 <usb_handle_setup+0x138>)
    238a:	4798      	blx	r3
}
    238c:	b002      	add	sp, #8
    238e:	bd10      	pop	{r4, pc}
    2390:	20000440 	.word	0x20000440
    2394:	20000488 	.word	0x20000488
    2398:	000052f0 	.word	0x000052f0
    239c:	00002865 	.word	0x00002865
    23a0:	0000284d 	.word	0x0000284d
    23a4:	00002be5 	.word	0x00002be5
    23a8:	20000444 	.word	0x20000444
    23ac:	00002235 	.word	0x00002235
    23b0:	00002745 	.word	0x00002745
    23b4:	0000287d 	.word	0x0000287d
    23b8:	00002ba9 	.word	0x00002ba9
    23bc:	00002bc1 	.word	0x00002bc1
    23c0:	00002a99 	.word	0x00002a99

000023c4 <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    23c4:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    23c6:	4b05      	ldr	r3, [pc, #20]	; (23dc <usb_handle_control_out_complete+0x18>)
    23c8:	2248      	movs	r2, #72	; 0x48
    23ca:	5c9b      	ldrb	r3, [r3, r2]
    23cc:	3218      	adds	r2, #24
    23ce:	421a      	tst	r2, r3
    23d0:	d100      	bne.n	23d4 <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    23d2:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    23d4:	4b02      	ldr	r3, [pc, #8]	; (23e0 <usb_handle_control_out_complete+0x1c>)
    23d6:	4798      	blx	r3
}
    23d8:	e7fb      	b.n	23d2 <usb_handle_control_out_complete+0xe>
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	20000440 	.word	0x20000440
    23e0:	00002ba7 	.word	0x00002ba7

000023e4 <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    23e4:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    23e6:	4b0d      	ldr	r3, [pc, #52]	; (241c <usb_handle_control_in_complete+0x38>)
    23e8:	2248      	movs	r2, #72	; 0x48
    23ea:	5c9b      	ldrb	r3, [r3, r2]
    23ec:	3218      	adds	r2, #24
    23ee:	421a      	tst	r2, r3
    23f0:	d110      	bne.n	2414 <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    23f2:	4b0b      	ldr	r3, [pc, #44]	; (2420 <usb_handle_control_in_complete+0x3c>)
    23f4:	785b      	ldrb	r3, [r3, #1]
    23f6:	2b05      	cmp	r3, #5
    23f8:	d002      	beq.n	2400 <usb_handle_control_in_complete+0x1c>
    23fa:	2b06      	cmp	r3, #6
    23fc:	d007      	beq.n	240e <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    23fe:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    2400:	4b07      	ldr	r3, [pc, #28]	; (2420 <usb_handle_control_in_complete+0x3c>)
    2402:	789b      	ldrb	r3, [r3, #2]
    2404:	207f      	movs	r0, #127	; 0x7f
    2406:	4018      	ands	r0, r3
    2408:	4b06      	ldr	r3, [pc, #24]	; (2424 <usb_handle_control_in_complete+0x40>)
    240a:	4798      	blx	r3
				return;
    240c:	e7f7      	b.n	23fe <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    240e:	4b06      	ldr	r3, [pc, #24]	; (2428 <usb_handle_control_in_complete+0x44>)
    2410:	4798      	blx	r3
				return;
    2412:	e7f4      	b.n	23fe <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    2414:	4b05      	ldr	r3, [pc, #20]	; (242c <usb_handle_control_in_complete+0x48>)
    2416:	4798      	blx	r3
    2418:	e7f1      	b.n	23fe <usb_handle_control_in_complete+0x1a>
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	20000440 	.word	0x20000440
    2420:	20000488 	.word	0x20000488
    2424:	00002591 	.word	0x00002591
    2428:	00002235 	.word	0x00002235
    242c:	00002ba5 	.word	0x00002ba5

00002430 <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    2430:	b570      	push	{r4, r5, r6, lr}
    2432:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    2434:	4b0b      	ldr	r3, [pc, #44]	; (2464 <usb_string_to_descriptor+0x34>)
    2436:	4798      	blx	r3
    2438:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    243a:	281f      	cmp	r0, #31
    243c:	d900      	bls.n	2440 <usb_string_to_descriptor+0x10>
    243e:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    2440:	1c43      	adds	r3, r0, #1
    2442:	005b      	lsls	r3, r3, #1
    2444:	4a08      	ldr	r2, [pc, #32]	; (2468 <usb_string_to_descriptor+0x38>)
    2446:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    2448:	2303      	movs	r3, #3
    244a:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    244c:	2200      	movs	r2, #0
    244e:	e005      	b.n	245c <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    2450:	5cb1      	ldrb	r1, [r6, r2]
    2452:	4b05      	ldr	r3, [pc, #20]	; (2468 <usb_string_to_descriptor+0x38>)
    2454:	0054      	lsls	r4, r2, #1
    2456:	191b      	adds	r3, r3, r4
    2458:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    245a:	3201      	adds	r2, #1
    245c:	4290      	cmp	r0, r2
    245e:	dcf7      	bgt.n	2450 <usb_string_to_descriptor+0x20>
	}
	return desc;
    2460:	4802      	ldr	r0, [pc, #8]	; (246c <usb_string_to_descriptor+0x3c>)
}
    2462:	bd70      	pop	{r4, r5, r6, pc}
    2464:	000050e9 	.word	0x000050e9
    2468:	20000440 	.word	0x20000440
    246c:	20000444 	.word	0x20000444

00002470 <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    2470:	4a12      	ldr	r2, [pc, #72]	; (24bc <usb_reset+0x4c>)
    2472:	4b13      	ldr	r3, [pc, #76]	; (24c0 <usb_reset+0x50>)
    2474:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2476:	685a      	ldr	r2, [r3, #4]
    2478:	4812      	ldr	r0, [pc, #72]	; (24c4 <usb_reset+0x54>)
    247a:	4002      	ands	r2, r0
    247c:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    247e:	6859      	ldr	r1, [r3, #4]
    2480:	22c0      	movs	r2, #192	; 0xc0
    2482:	0592      	lsls	r2, r2, #22
    2484:	4311      	orrs	r1, r2
    2486:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    2488:	490f      	ldr	r1, [pc, #60]	; (24c8 <usb_reset+0x58>)
    248a:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    248c:	6959      	ldr	r1, [r3, #20]
    248e:	4001      	ands	r1, r0
    2490:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    2492:	6959      	ldr	r1, [r3, #20]
    2494:	430a      	orrs	r2, r1
    2496:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    2498:	695a      	ldr	r2, [r3, #20]
    249a:	0052      	lsls	r2, r2, #1
    249c:	0852      	lsrs	r2, r2, #1
    249e:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    24a0:	6959      	ldr	r1, [r3, #20]
    24a2:	2280      	movs	r2, #128	; 0x80
    24a4:	0612      	lsls	r2, r2, #24
    24a6:	430a      	orrs	r2, r1
    24a8:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    24aa:	4b08      	ldr	r3, [pc, #32]	; (24cc <usb_reset+0x5c>)
    24ac:	220a      	movs	r2, #10
    24ae:	32ff      	adds	r2, #255	; 0xff
    24b0:	2110      	movs	r1, #16
    24b2:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    24b4:	3a09      	subs	r2, #9
    24b6:	3101      	adds	r1, #1
    24b8:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    24ba:	4770      	bx	lr
    24bc:	20000494 	.word	0x20000494
    24c0:	20000520 	.word	0x20000520
    24c4:	8fffffff 	.word	0x8fffffff
    24c8:	20000444 	.word	0x20000444
    24cc:	41005000 	.word	0x41005000

000024d0 <usb_init>:
void usb_init(){
    24d0:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    24d2:	4a26      	ldr	r2, [pc, #152]	; (256c <usb_init+0x9c>)
    24d4:	69d3      	ldr	r3, [r2, #28]
    24d6:	2120      	movs	r1, #32
    24d8:	430b      	orrs	r3, r1
    24da:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    24dc:	4b24      	ldr	r3, [pc, #144]	; (2570 <usb_init+0xa0>)
    24de:	4a25      	ldr	r2, [pc, #148]	; (2574 <usb_init+0xa4>)
    24e0:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    24e2:	4b25      	ldr	r3, [pc, #148]	; (2578 <usb_init+0xa8>)
    24e4:	2201      	movs	r2, #1
    24e6:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    24e8:	4b23      	ldr	r3, [pc, #140]	; (2578 <usb_init+0xa8>)
    24ea:	789b      	ldrb	r3, [r3, #2]
    24ec:	07db      	lsls	r3, r3, #31
    24ee:	d4fb      	bmi.n	24e8 <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    24f0:	4b21      	ldr	r3, [pc, #132]	; (2578 <usb_init+0xa8>)
    24f2:	2202      	movs	r2, #2
    24f4:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    24f6:	4b20      	ldr	r3, [pc, #128]	; (2578 <usb_init+0xa8>)
    24f8:	789b      	ldrb	r3, [r3, #2]
    24fa:	079b      	lsls	r3, r3, #30
    24fc:	d4fb      	bmi.n	24f6 <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    24fe:	4b1f      	ldr	r3, [pc, #124]	; (257c <usb_init+0xac>)
    2500:	685b      	ldr	r3, [r3, #4]
    2502:	035b      	lsls	r3, r3, #13
    2504:	22f8      	movs	r2, #248	; 0xf8
    2506:	0292      	lsls	r2, r2, #10
    2508:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    250a:	2b1f      	cmp	r3, #31
    250c:	d028      	beq.n	2560 <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    250e:	4a1b      	ldr	r2, [pc, #108]	; (257c <usb_init+0xac>)
    2510:	6851      	ldr	r1, [r2, #4]
    2512:	0489      	lsls	r1, r1, #18
    2514:	22f8      	movs	r2, #248	; 0xf8
    2516:	03d2      	lsls	r2, r2, #15
    2518:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    251a:	291f      	cmp	r1, #31
    251c:	d022      	beq.n	2564 <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    251e:	4a17      	ldr	r2, [pc, #92]	; (257c <usb_init+0xac>)
    2520:	6852      	ldr	r2, [r2, #4]
    2522:	05d2      	lsls	r2, r2, #23
    2524:	20e0      	movs	r0, #224	; 0xe0
    2526:	0480      	lsls	r0, r0, #18
    2528:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    252a:	2a07      	cmp	r2, #7
    252c:	d01c      	beq.n	2568 <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    252e:	019b      	lsls	r3, r3, #6
    2530:	20f8      	movs	r0, #248	; 0xf8
    2532:	00c0      	lsls	r0, r0, #3
    2534:	4003      	ands	r3, r0
    2536:	201f      	movs	r0, #31
    2538:	4001      	ands	r1, r0
    253a:	430b      	orrs	r3, r1
    253c:	0312      	lsls	r2, r2, #12
    253e:	4313      	orrs	r3, r2
    2540:	4d0d      	ldr	r5, [pc, #52]	; (2578 <usb_init+0xa8>)
    2542:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    2544:	4b0e      	ldr	r3, [pc, #56]	; (2580 <usb_init+0xb0>)
    2546:	781a      	ldrb	r2, [r3, #0]
    2548:	0112      	lsls	r2, r2, #4
    254a:	4c0e      	ldr	r4, [pc, #56]	; (2584 <usb_init+0xb4>)
    254c:	2100      	movs	r1, #0
    254e:	0020      	movs	r0, r4
    2550:	4b0d      	ldr	r3, [pc, #52]	; (2588 <usb_init+0xb8>)
    2552:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    2554:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    2556:	2308      	movs	r3, #8
    2558:	832b      	strh	r3, [r5, #24]
	usb_reset();
    255a:	4b0c      	ldr	r3, [pc, #48]	; (258c <usb_init+0xbc>)
    255c:	4798      	blx	r3
}
    255e:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    2560:	3b1a      	subs	r3, #26
    2562:	e7d4      	b.n	250e <usb_init+0x3e>
		pad_transp = 29;
    2564:	3902      	subs	r1, #2
    2566:	e7da      	b.n	251e <usb_init+0x4e>
		pad_trim = 3;
    2568:	3a04      	subs	r2, #4
    256a:	e7e0      	b.n	252e <usb_init+0x5e>
    256c:	40000400 	.word	0x40000400
    2570:	40000c00 	.word	0x40000c00
    2574:	00004006 	.word	0x00004006
    2578:	41005000 	.word	0x41005000
    257c:	00806020 	.word	0x00806020
    2580:	00005372 	.word	0x00005372
    2584:	20000520 	.word	0x20000520
    2588:	00004f61 	.word	0x00004f61
    258c:	00002471 	.word	0x00002471

00002590 <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    2590:	2380      	movs	r3, #128	; 0x80
    2592:	425b      	negs	r3, r3
    2594:	4318      	orrs	r0, r3
    2596:	b2c0      	uxtb	r0, r0
    2598:	4b01      	ldr	r3, [pc, #4]	; (25a0 <usb_set_address+0x10>)
    259a:	7298      	strb	r0, [r3, #10]
}
    259c:	4770      	bx	lr
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	41005000 	.word	0x41005000

000025a4 <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    25a4:	b530      	push	{r4, r5, lr}
    25a6:	0003      	movs	r3, r0
	if (ep & 0x80) {
    25a8:	b240      	sxtb	r0, r0
    25aa:	2800      	cmp	r0, #0
    25ac:	db24      	blt.n	25f8 <usb_enable_ep+0x54>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    25ae:	203f      	movs	r0, #63	; 0x3f
    25b0:	4018      	ands	r0, r3
    25b2:	4b49      	ldr	r3, [pc, #292]	; (26d8 <usb_enable_ep+0x134>)
    25b4:	0144      	lsls	r4, r0, #5
    25b6:	191b      	adds	r3, r3, r4
    25b8:	685c      	ldr	r4, [r3, #4]
    25ba:	4d48      	ldr	r5, [pc, #288]	; (26dc <usb_enable_ep+0x138>)
    25bc:	402c      	ands	r4, r5
    25be:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    25c0:	685b      	ldr	r3, [r3, #4]
    25c2:	2a08      	cmp	r2, #8
    25c4:	d95f      	bls.n	2686 <usb_enable_ep+0xe2>
    25c6:	2a10      	cmp	r2, #16
    25c8:	d800      	bhi.n	25cc <usb_enable_ep+0x28>
    25ca:	e072      	b.n	26b2 <usb_enable_ep+0x10e>
    25cc:	2a20      	cmp	r2, #32
    25ce:	d800      	bhi.n	25d2 <usb_enable_ep+0x2e>
    25d0:	e072      	b.n	26b8 <usb_enable_ep+0x114>
    25d2:	2a40      	cmp	r2, #64	; 0x40
    25d4:	d800      	bhi.n	25d8 <usb_enable_ep+0x34>
    25d6:	e072      	b.n	26be <usb_enable_ep+0x11a>
    25d8:	2a80      	cmp	r2, #128	; 0x80
    25da:	d800      	bhi.n	25de <usb_enable_ep+0x3a>
    25dc:	e072      	b.n	26c4 <usb_enable_ep+0x120>
    25de:	2480      	movs	r4, #128	; 0x80
    25e0:	0064      	lsls	r4, r4, #1
    25e2:	42a2      	cmp	r2, r4
    25e4:	d800      	bhi.n	25e8 <usb_enable_ep+0x44>
    25e6:	e070      	b.n	26ca <usb_enable_ep+0x126>
    25e8:	3401      	adds	r4, #1
    25ea:	34ff      	adds	r4, #255	; 0xff
    25ec:	42a2      	cmp	r2, r4
    25ee:	d900      	bls.n	25f2 <usb_enable_ep+0x4e>
    25f0:	e06e      	b.n	26d0 <usb_enable_ep+0x12c>
    25f2:	22c0      	movs	r2, #192	; 0xc0
    25f4:	05d2      	lsls	r2, r2, #23
    25f6:	e047      	b.n	2688 <usb_enable_ep+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    25f8:	203f      	movs	r0, #63	; 0x3f
    25fa:	4003      	ands	r3, r0
    25fc:	4836      	ldr	r0, [pc, #216]	; (26d8 <usb_enable_ep+0x134>)
    25fe:	015c      	lsls	r4, r3, #5
    2600:	1900      	adds	r0, r0, r4
    2602:	6944      	ldr	r4, [r0, #20]
    2604:	4d35      	ldr	r5, [pc, #212]	; (26dc <usb_enable_ep+0x138>)
    2606:	402c      	ands	r4, r5
    2608:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    260a:	6940      	ldr	r0, [r0, #20]
    260c:	2a08      	cmp	r2, #8
    260e:	d912      	bls.n	2636 <usb_enable_ep+0x92>
    2610:	2a10      	cmp	r2, #16
    2612:	d926      	bls.n	2662 <usb_enable_ep+0xbe>
    2614:	2a20      	cmp	r2, #32
    2616:	d927      	bls.n	2668 <usb_enable_ep+0xc4>
    2618:	2a40      	cmp	r2, #64	; 0x40
    261a:	d928      	bls.n	266e <usb_enable_ep+0xca>
    261c:	2a80      	cmp	r2, #128	; 0x80
    261e:	d929      	bls.n	2674 <usb_enable_ep+0xd0>
    2620:	2480      	movs	r4, #128	; 0x80
    2622:	0064      	lsls	r4, r4, #1
    2624:	42a2      	cmp	r2, r4
    2626:	d928      	bls.n	267a <usb_enable_ep+0xd6>
    2628:	3401      	adds	r4, #1
    262a:	34ff      	adds	r4, #255	; 0xff
    262c:	42a2      	cmp	r2, r4
    262e:	d827      	bhi.n	2680 <usb_enable_ep+0xdc>
    2630:	22c0      	movs	r2, #192	; 0xc0
    2632:	05d2      	lsls	r2, r2, #23
    2634:	e000      	b.n	2638 <usb_enable_ep+0x94>
    2636:	2200      	movs	r2, #0
    2638:	4310      	orrs	r0, r2
    263a:	4a27      	ldr	r2, [pc, #156]	; (26d8 <usb_enable_ep+0x134>)
    263c:	015c      	lsls	r4, r3, #5
    263e:	1912      	adds	r2, r2, r4
    2640:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    2642:	4c27      	ldr	r4, [pc, #156]	; (26e0 <usb_enable_ep+0x13c>)
    2644:	3308      	adds	r3, #8
    2646:	015b      	lsls	r3, r3, #5
    2648:	5d1a      	ldrb	r2, [r3, r4]
    264a:	3101      	adds	r1, #1
    264c:	b2c9      	uxtb	r1, r1
    264e:	0109      	lsls	r1, r1, #4
    2650:	2070      	movs	r0, #112	; 0x70
    2652:	4001      	ands	r1, r0
    2654:	430a      	orrs	r2, r1
    2656:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    2658:	46a4      	mov	ip, r4
    265a:	4463      	add	r3, ip
    265c:	22a2      	movs	r2, #162	; 0xa2
    265e:	711a      	strb	r2, [r3, #4]
    2660:	e026      	b.n	26b0 <usb_enable_ep+0x10c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2662:	2280      	movs	r2, #128	; 0x80
    2664:	0552      	lsls	r2, r2, #21
    2666:	e7e7      	b.n	2638 <usb_enable_ep+0x94>
    2668:	2280      	movs	r2, #128	; 0x80
    266a:	0592      	lsls	r2, r2, #22
    266c:	e7e4      	b.n	2638 <usb_enable_ep+0x94>
    266e:	22c0      	movs	r2, #192	; 0xc0
    2670:	0592      	lsls	r2, r2, #22
    2672:	e7e1      	b.n	2638 <usb_enable_ep+0x94>
    2674:	2280      	movs	r2, #128	; 0x80
    2676:	05d2      	lsls	r2, r2, #23
    2678:	e7de      	b.n	2638 <usb_enable_ep+0x94>
    267a:	22a0      	movs	r2, #160	; 0xa0
    267c:	05d2      	lsls	r2, r2, #23
    267e:	e7db      	b.n	2638 <usb_enable_ep+0x94>
    2680:	22e0      	movs	r2, #224	; 0xe0
    2682:	05d2      	lsls	r2, r2, #23
    2684:	e7d8      	b.n	2638 <usb_enable_ep+0x94>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2686:	2200      	movs	r2, #0
    2688:	431a      	orrs	r2, r3
    268a:	4b13      	ldr	r3, [pc, #76]	; (26d8 <usb_enable_ep+0x134>)
    268c:	0144      	lsls	r4, r0, #5
    268e:	191b      	adds	r3, r3, r4
    2690:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    2692:	4a13      	ldr	r2, [pc, #76]	; (26e0 <usb_enable_ep+0x13c>)
    2694:	3008      	adds	r0, #8
    2696:	0140      	lsls	r0, r0, #5
    2698:	5c83      	ldrb	r3, [r0, r2]
    269a:	3101      	adds	r1, #1
    269c:	2407      	movs	r4, #7
    269e:	4021      	ands	r1, r4
    26a0:	430b      	orrs	r3, r1
    26a2:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    26a4:	4694      	mov	ip, r2
    26a6:	4460      	add	r0, ip
    26a8:	2340      	movs	r3, #64	; 0x40
    26aa:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    26ac:	3b2f      	subs	r3, #47	; 0x2f
    26ae:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    26b0:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    26b2:	2280      	movs	r2, #128	; 0x80
    26b4:	0552      	lsls	r2, r2, #21
    26b6:	e7e7      	b.n	2688 <usb_enable_ep+0xe4>
    26b8:	2280      	movs	r2, #128	; 0x80
    26ba:	0592      	lsls	r2, r2, #22
    26bc:	e7e4      	b.n	2688 <usb_enable_ep+0xe4>
    26be:	22c0      	movs	r2, #192	; 0xc0
    26c0:	0592      	lsls	r2, r2, #22
    26c2:	e7e1      	b.n	2688 <usb_enable_ep+0xe4>
    26c4:	2280      	movs	r2, #128	; 0x80
    26c6:	05d2      	lsls	r2, r2, #23
    26c8:	e7de      	b.n	2688 <usb_enable_ep+0xe4>
    26ca:	22a0      	movs	r2, #160	; 0xa0
    26cc:	05d2      	lsls	r2, r2, #23
    26ce:	e7db      	b.n	2688 <usb_enable_ep+0xe4>
    26d0:	22e0      	movs	r2, #224	; 0xe0
    26d2:	05d2      	lsls	r2, r2, #23
    26d4:	e7d8      	b.n	2688 <usb_enable_ep+0xe4>
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	20000520 	.word	0x20000520
    26dc:	8fffffff 	.word	0x8fffffff
    26e0:	41005000 	.word	0x41005000

000026e4 <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    26e6:	4d12      	ldr	r5, [pc, #72]	; (2730 <usb_ep_start_out+0x4c>)
    26e8:	0144      	lsls	r4, r0, #5
    26ea:	192b      	adds	r3, r5, r4
    26ec:	685e      	ldr	r6, [r3, #4]
    26ee:	4f11      	ldr	r7, [pc, #68]	; (2734 <usb_ep_start_out+0x50>)
    26f0:	403e      	ands	r6, r7
    26f2:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    26f4:	685e      	ldr	r6, [r3, #4]
    26f6:	0392      	lsls	r2, r2, #14
    26f8:	4f0f      	ldr	r7, [pc, #60]	; (2738 <usb_ep_start_out+0x54>)
    26fa:	403a      	ands	r2, r7
    26fc:	4316      	orrs	r6, r2
    26fe:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2700:	685a      	ldr	r2, [r3, #4]
    2702:	0b92      	lsrs	r2, r2, #14
    2704:	0392      	lsls	r2, r2, #14
    2706:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    2708:	685a      	ldr	r2, [r3, #4]
    270a:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    270c:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    270e:	3008      	adds	r0, #8
    2710:	0140      	lsls	r0, r0, #5
    2712:	4b0a      	ldr	r3, [pc, #40]	; (273c <usb_ep_start_out+0x58>)
    2714:	469c      	mov	ip, r3
    2716:	4460      	add	r0, ip
    2718:	2305      	movs	r3, #5
    271a:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    271c:	4b08      	ldr	r3, [pc, #32]	; (2740 <usb_ep_start_out+0x5c>)
    271e:	469c      	mov	ip, r3
    2720:	4464      	add	r4, ip
    2722:	2301      	movs	r3, #1
    2724:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    2726:	333f      	adds	r3, #63	; 0x3f
    2728:	7103      	strb	r3, [r0, #4]
	return 0;
}
    272a:	2000      	movs	r0, #0
    272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	20000520 	.word	0x20000520
    2734:	f0003fff 	.word	0xf0003fff
    2738:	0fffc000 	.word	0x0fffc000
    273c:	41005000 	.word	0x41005000
    2740:	41005109 	.word	0x41005109

00002744 <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    2744:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    2746:	243f      	movs	r4, #63	; 0x3f
    2748:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    274a:	4c15      	ldr	r4, [pc, #84]	; (27a0 <usb_ep_start_in+0x5c>)
    274c:	0146      	lsls	r6, r0, #5
    274e:	19a4      	adds	r4, r4, r6
    2750:	6965      	ldr	r5, [r4, #20]
    2752:	006d      	lsls	r5, r5, #1
    2754:	086d      	lsrs	r5, r5, #1
    2756:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    2758:	6965      	ldr	r5, [r4, #20]
    275a:	07db      	lsls	r3, r3, #31
    275c:	431d      	orrs	r5, r3
    275e:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    2760:	6963      	ldr	r3, [r4, #20]
    2762:	4d10      	ldr	r5, [pc, #64]	; (27a4 <usb_ep_start_in+0x60>)
    2764:	402b      	ands	r3, r5
    2766:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    2768:	6963      	ldr	r3, [r4, #20]
    276a:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    276c:	6963      	ldr	r3, [r4, #20]
    276e:	0b9b      	lsrs	r3, r3, #14
    2770:	039b      	lsls	r3, r3, #14
    2772:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    2774:	6963      	ldr	r3, [r4, #20]
    2776:	0492      	lsls	r2, r2, #18
    2778:	0c92      	lsrs	r2, r2, #18
    277a:	4313      	orrs	r3, r2
    277c:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    277e:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    2780:	3008      	adds	r0, #8
    2782:	0140      	lsls	r0, r0, #5
    2784:	4b08      	ldr	r3, [pc, #32]	; (27a8 <usb_ep_start_in+0x64>)
    2786:	469c      	mov	ip, r3
    2788:	4460      	add	r0, ip
    278a:	230a      	movs	r3, #10
    278c:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    278e:	4b07      	ldr	r3, [pc, #28]	; (27ac <usb_ep_start_in+0x68>)
    2790:	469c      	mov	ip, r3
    2792:	4466      	add	r6, ip
    2794:	2302      	movs	r3, #2
    2796:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    2798:	337e      	adds	r3, #126	; 0x7e
    279a:	7143      	strb	r3, [r0, #5]
	return 0;
}
    279c:	2000      	movs	r0, #0
    279e:	bd70      	pop	{r4, r5, r6, pc}
    27a0:	20000520 	.word	0x20000520
    27a4:	f0003fff 	.word	0xf0003fff
    27a8:	41005000 	.word	0x41005000
    27ac:	41005109 	.word	0x41005109

000027b0 <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    27b0:	b243      	sxtb	r3, r0
    27b2:	2b00      	cmp	r3, #0
    27b4:	db0a      	blt.n	27cc <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    27b6:	233f      	movs	r3, #63	; 0x3f
    27b8:	4003      	ands	r3, r0
    27ba:	3308      	adds	r3, #8
    27bc:	015b      	lsls	r3, r3, #5
    27be:	4a09      	ldr	r2, [pc, #36]	; (27e4 <usb_ep_pending+0x34>)
    27c0:	4694      	mov	ip, r2
    27c2:	4463      	add	r3, ip
    27c4:	79d8      	ldrb	r0, [r3, #7]
    27c6:	2301      	movs	r3, #1
    27c8:	4018      	ands	r0, r3
	}
}
    27ca:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    27cc:	233f      	movs	r3, #63	; 0x3f
    27ce:	4003      	ands	r3, r0
    27d0:	3308      	adds	r3, #8
    27d2:	015b      	lsls	r3, r3, #5
    27d4:	4a03      	ldr	r2, [pc, #12]	; (27e4 <usb_ep_pending+0x34>)
    27d6:	4694      	mov	ip, r2
    27d8:	4463      	add	r3, ip
    27da:	79db      	ldrb	r3, [r3, #7]
    27dc:	085b      	lsrs	r3, r3, #1
    27de:	2001      	movs	r0, #1
    27e0:	4018      	ands	r0, r3
    27e2:	e7f2      	b.n	27ca <usb_ep_pending+0x1a>
    27e4:	41005000 	.word	0x41005000

000027e8 <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    27e8:	b243      	sxtb	r3, r0
    27ea:	2b00      	cmp	r3, #0
    27ec:	db09      	blt.n	2802 <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    27ee:	233f      	movs	r3, #63	; 0x3f
    27f0:	4003      	ands	r3, r0
    27f2:	3308      	adds	r3, #8
    27f4:	015b      	lsls	r3, r3, #5
    27f6:	4a08      	ldr	r2, [pc, #32]	; (2818 <usb_ep_handled+0x30>)
    27f8:	4694      	mov	ip, r2
    27fa:	4463      	add	r3, ip
    27fc:	2201      	movs	r2, #1
    27fe:	71da      	strb	r2, [r3, #7]
	}
}
    2800:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    2802:	233f      	movs	r3, #63	; 0x3f
    2804:	4003      	ands	r3, r0
    2806:	3308      	adds	r3, #8
    2808:	015b      	lsls	r3, r3, #5
    280a:	4a03      	ldr	r2, [pc, #12]	; (2818 <usb_ep_handled+0x30>)
    280c:	4694      	mov	ip, r2
    280e:	4463      	add	r3, ip
    2810:	2202      	movs	r2, #2
    2812:	71da      	strb	r2, [r3, #7]
    2814:	e7f4      	b.n	2800 <usb_ep_handled+0x18>
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	41005000 	.word	0x41005000

0000281c <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    281c:	4b03      	ldr	r3, [pc, #12]	; (282c <usb_ep_out_length+0x10>)
    281e:	0140      	lsls	r0, r0, #5
    2820:	181b      	adds	r3, r3, r0
    2822:	6858      	ldr	r0, [r3, #4]
    2824:	0480      	lsls	r0, r0, #18
    2826:	0c80      	lsrs	r0, r0, #18
}
    2828:	4770      	bx	lr
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	20000520 	.word	0x20000520

00002830 <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2830:	4b04      	ldr	r3, [pc, #16]	; (2844 <usb_attach+0x14>)
    2832:	2280      	movs	r2, #128	; 0x80
    2834:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    2836:	4a04      	ldr	r2, [pc, #16]	; (2848 <usb_attach+0x18>)
    2838:	8913      	ldrh	r3, [r2, #8]
    283a:	2101      	movs	r1, #1
    283c:	438b      	bics	r3, r1
    283e:	8113      	strh	r3, [r2, #8]
}
    2840:	4770      	bx	lr
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	e000e100 	.word	0xe000e100
    2848:	41005000 	.word	0x41005000

0000284c <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    284c:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    284e:	4903      	ldr	r1, [pc, #12]	; (285c <usb_ep0_out+0x10>)
    2850:	2240      	movs	r2, #64	; 0x40
    2852:	2000      	movs	r0, #0
    2854:	4b02      	ldr	r3, [pc, #8]	; (2860 <usb_ep0_out+0x14>)
    2856:	4798      	blx	r3
}
    2858:	bd10      	pop	{r4, pc}
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	20000494 	.word	0x20000494
    2860:	000026e5 	.word	0x000026e5

00002864 <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    2864:	b510      	push	{r4, lr}
    2866:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2868:	4902      	ldr	r1, [pc, #8]	; (2874 <usb_ep0_in+0x10>)
    286a:	2301      	movs	r3, #1
    286c:	2080      	movs	r0, #128	; 0x80
    286e:	4c02      	ldr	r4, [pc, #8]	; (2878 <usb_ep0_in+0x14>)
    2870:	47a0      	blx	r4
}
    2872:	bd10      	pop	{r4, pc}
    2874:	20000444 	.word	0x20000444
    2878:	00002745 	.word	0x00002745

0000287c <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    287c:	4a02      	ldr	r2, [pc, #8]	; (2888 <usb_ep0_stall+0xc>)
    287e:	2306      	movs	r3, #6
    2880:	33ff      	adds	r3, #255	; 0xff
    2882:	2130      	movs	r1, #48	; 0x30
    2884:	54d1      	strb	r1, [r2, r3]
}
    2886:	4770      	bx	lr
    2888:	41005000 	.word	0x41005000

0000288c <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    288c:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    288e:	4b25      	ldr	r3, [pc, #148]	; (2924 <usb_handle_function+0x98>)
    2890:	8c1c      	ldrh	r4, [r3, #32]
    2892:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    2894:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    2896:	071b      	lsls	r3, r3, #28
    2898:	d410      	bmi.n	28bc <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    289a:	07e3      	lsls	r3, r4, #31
    289c:	d50c      	bpl.n	28b8 <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    289e:	4921      	ldr	r1, [pc, #132]	; (2924 <usb_handle_function+0x98>)
    28a0:	2208      	movs	r2, #8
    28a2:	32ff      	adds	r2, #255	; 0xff
    28a4:	5c8b      	ldrb	r3, [r1, r2]
    28a6:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    28a8:	2013      	movs	r0, #19
    28aa:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    28ac:	06db      	lsls	r3, r3, #27
    28ae:	d40d      	bmi.n	28cc <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    28b0:	07eb      	lsls	r3, r5, #31
    28b2:	d413      	bmi.n	28dc <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    28b4:	07ad      	lsls	r5, r5, #30
    28b6:	d414      	bmi.n	28e2 <usb_handle_function+0x56>
void usb_handle_function() {
    28b8:	2301      	movs	r3, #1
    28ba:	e016      	b.n	28ea <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    28bc:	4b19      	ldr	r3, [pc, #100]	; (2924 <usb_handle_function+0x98>)
    28be:	2208      	movs	r2, #8
    28c0:	839a      	strh	r2, [r3, #28]
		usb_reset();
    28c2:	4b19      	ldr	r3, [pc, #100]	; (2928 <usb_handle_function+0x9c>)
    28c4:	4798      	blx	r3
		usb_cb_reset();
    28c6:	4b19      	ldr	r3, [pc, #100]	; (292c <usb_handle_function+0xa0>)
    28c8:	4798      	blx	r3
		goto usb_handle_function_end;
    28ca:	e026      	b.n	291a <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    28cc:	4818      	ldr	r0, [pc, #96]	; (2930 <usb_handle_function+0xa4>)
    28ce:	4919      	ldr	r1, [pc, #100]	; (2934 <usb_handle_function+0xa8>)
    28d0:	3aff      	subs	r2, #255	; 0xff
    28d2:	4b19      	ldr	r3, [pc, #100]	; (2938 <usb_handle_function+0xac>)
    28d4:	4798      	blx	r3
			usb_handle_setup();
    28d6:	4b19      	ldr	r3, [pc, #100]	; (293c <usb_handle_function+0xb0>)
    28d8:	4798      	blx	r3
    28da:	e7e9      	b.n	28b0 <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    28dc:	4b18      	ldr	r3, [pc, #96]	; (2940 <usb_handle_function+0xb4>)
    28de:	4798      	blx	r3
    28e0:	e7e8      	b.n	28b4 <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    28e2:	4b18      	ldr	r3, [pc, #96]	; (2944 <usb_handle_function+0xb8>)
    28e4:	4798      	blx	r3
    28e6:	e7e7      	b.n	28b8 <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    28e8:	3301      	adds	r3, #1
    28ea:	4a17      	ldr	r2, [pc, #92]	; (2948 <usb_handle_function+0xbc>)
    28ec:	7812      	ldrb	r2, [r2, #0]
    28ee:	429a      	cmp	r2, r3
    28f0:	dd11      	ble.n	2916 <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    28f2:	2201      	movs	r2, #1
    28f4:	409a      	lsls	r2, r3
    28f6:	4214      	tst	r4, r2
    28f8:	d0f6      	beq.n	28e8 <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    28fa:	001a      	movs	r2, r3
    28fc:	3208      	adds	r2, #8
    28fe:	0152      	lsls	r2, r2, #5
    2900:	4908      	ldr	r1, [pc, #32]	; (2924 <usb_handle_function+0x98>)
    2902:	468c      	mov	ip, r1
    2904:	4462      	add	r2, ip
    2906:	79d1      	ldrb	r1, [r2, #7]
    2908:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    290a:	015a      	lsls	r2, r3, #5
    290c:	480f      	ldr	r0, [pc, #60]	; (294c <usb_handle_function+0xc0>)
    290e:	4684      	mov	ip, r0
    2910:	4462      	add	r2, ip
    2912:	7011      	strb	r1, [r2, #0]
    2914:	e7e8      	b.n	28e8 <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    2916:	4b0e      	ldr	r3, [pc, #56]	; (2950 <usb_handle_function+0xc4>)
    2918:	4798      	blx	r3
    291a:	4b0e      	ldr	r3, [pc, #56]	; (2954 <usb_handle_function+0xc8>)
    291c:	2280      	movs	r2, #128	; 0x80
    291e:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    2920:	bd70      	pop	{r4, r5, r6, pc}
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	41005000 	.word	0x41005000
    2928:	00002471 	.word	0x00002471
    292c:	00002a95 	.word	0x00002a95
    2930:	20000488 	.word	0x20000488
    2934:	20000494 	.word	0x20000494
    2938:	00005059 	.word	0x00005059
    293c:	00002289 	.word	0x00002289
    2940:	000023c5 	.word	0x000023c5
    2944:	000023e5 	.word	0x000023e5
    2948:	00005372 	.word	0x00005372
    294c:	41005108 	.word	0x41005108
    2950:	00002b65 	.word	0x00002b65
    2954:	e000e100 	.word	0xe000e100

00002958 <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    2958:	b510      	push	{r4, lr}
    295a:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    295c:	2000      	movs	r0, #0
    295e:	e01c      	b.n	299a <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    2960:	0082      	lsls	r2, r0, #2
    2962:	1812      	adds	r2, r2, r0
    2964:	17d4      	asrs	r4, r2, #31
    2966:	2307      	movs	r3, #7
    2968:	0019      	movs	r1, r3
    296a:	4021      	ands	r1, r4
    296c:	1889      	adds	r1, r1, r2
    296e:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    2970:	0f64      	lsrs	r4, r4, #29
    2972:	1912      	adds	r2, r2, r4
    2974:	4013      	ands	r3, r2
    2976:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    2978:	4a0c      	ldr	r2, [pc, #48]	; (29ac <samd_serial_number_string_descriptor+0x54>)
    297a:	5c8a      	ldrb	r2, [r1, r2]
    297c:	411a      	asrs	r2, r3
    297e:	4c0c      	ldr	r4, [pc, #48]	; (29b0 <samd_serial_number_string_descriptor+0x58>)
    2980:	5d09      	ldrb	r1, [r1, r4]
    2982:	2408      	movs	r4, #8
    2984:	1ae3      	subs	r3, r4, r3
    2986:	4099      	lsls	r1, r3
    2988:	000b      	movs	r3, r1
    298a:	4313      	orrs	r3, r2
    298c:	221f      	movs	r2, #31
    298e:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    2990:	4a08      	ldr	r2, [pc, #32]	; (29b4 <samd_serial_number_string_descriptor+0x5c>)
    2992:	5cd2      	ldrb	r2, [r2, r3]
    2994:	ab01      	add	r3, sp, #4
    2996:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    2998:	3001      	adds	r0, #1
    299a:	2819      	cmp	r0, #25
    299c:	dde0      	ble.n	2960 <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    299e:	a801      	add	r0, sp, #4
    29a0:	2300      	movs	r3, #0
    29a2:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    29a4:	4b04      	ldr	r3, [pc, #16]	; (29b8 <samd_serial_number_string_descriptor+0x60>)
    29a6:	4798      	blx	r3
}
    29a8:	b008      	add	sp, #32
    29aa:	bd10      	pop	{r4, pc}
    29ac:	0080a00c 	.word	0x0080a00c
    29b0:	0080a00d 	.word	0x0080a00d
    29b4:	00005320 	.word	0x00005320
    29b8:	00002431 	.word	0x00002431

000029bc <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    29bc:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    29be:	2208      	movs	r2, #8
    29c0:	2103      	movs	r1, #3
    29c2:	2081      	movs	r0, #129	; 0x81
    29c4:	4c09      	ldr	r4, [pc, #36]	; (29ec <usb_serial_init+0x30>)
    29c6:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    29c8:	2220      	movs	r2, #32
    29ca:	2102      	movs	r1, #2
    29cc:	2002      	movs	r0, #2
    29ce:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    29d0:	2220      	movs	r2, #32
    29d2:	2102      	movs	r1, #2
    29d4:	2082      	movs	r0, #130	; 0x82
    29d6:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    29d8:	4c05      	ldr	r4, [pc, #20]	; (29f0 <usb_serial_init+0x34>)
    29da:	2220      	movs	r2, #32
    29dc:	0021      	movs	r1, r4
    29de:	2002      	movs	r0, #2
    29e0:	4b04      	ldr	r3, [pc, #16]	; (29f4 <usb_serial_init+0x38>)
    29e2:	4798      	blx	r3
	
	usb_tx_busy = false;
    29e4:	2320      	movs	r3, #32
    29e6:	2200      	movs	r2, #0
    29e8:	54e2      	strb	r2, [r4, r3]
}
    29ea:	bd10      	pop	{r4, pc}
    29ec:	000025a5 	.word	0x000025a5
    29f0:	200004d4 	.word	0x200004d4
    29f4:	000026e5 	.word	0x000026e5

000029f8 <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    29f8:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    29fa:	2002      	movs	r0, #2
    29fc:	4b02      	ldr	r3, [pc, #8]	; (2a08 <usb_serial_out_completion+0x10>)
    29fe:	4798      	blx	r3
    2a00:	4b02      	ldr	r3, [pc, #8]	; (2a0c <usb_serial_out_completion+0x14>)
    2a02:	6258      	str	r0, [r3, #36]	; 0x24
}
    2a04:	bd10      	pop	{r4, pc}
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	0000281d 	.word	0x0000281d
    2a0c:	200004d4 	.word	0x200004d4

00002a10 <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    2a10:	4b02      	ldr	r3, [pc, #8]	; (2a1c <usb_serial_in_completion+0xc>)
    2a12:	2220      	movs	r2, #32
    2a14:	2100      	movs	r1, #0
    2a16:	5499      	strb	r1, [r3, r2]
}
    2a18:	4770      	bx	lr
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	200004d4 	.word	0x200004d4

00002a20 <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    2a20:	b570      	push	{r4, r5, r6, lr}
    2a22:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    2a24:	2920      	cmp	r1, #32
    2a26:	dd00      	ble.n	2a2a <usb_serial_send_buffer+0xa>
    2a28:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    2a2a:	4d09      	ldr	r5, [pc, #36]	; (2a50 <usb_serial_send_buffer+0x30>)
    2a2c:	002e      	movs	r6, r5
    2a2e:	3628      	adds	r6, #40	; 0x28
    2a30:	0022      	movs	r2, r4
    2a32:	0001      	movs	r1, r0
    2a34:	0030      	movs	r0, r6
    2a36:	4b07      	ldr	r3, [pc, #28]	; (2a54 <usb_serial_send_buffer+0x34>)
    2a38:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    2a3a:	2300      	movs	r3, #0
    2a3c:	0022      	movs	r2, r4
    2a3e:	0031      	movs	r1, r6
    2a40:	2082      	movs	r0, #130	; 0x82
    2a42:	4e05      	ldr	r6, [pc, #20]	; (2a58 <usb_serial_send_buffer+0x38>)
    2a44:	47b0      	blx	r6
	usb_tx_busy = true;
    2a46:	2320      	movs	r3, #32
    2a48:	2201      	movs	r2, #1
    2a4a:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    2a4c:	0020      	movs	r0, r4
    2a4e:	bd70      	pop	{r4, r5, r6, pc}
    2a50:	200004d4 	.word	0x200004d4
    2a54:	00005059 	.word	0x00005059
    2a58:	00002745 	.word	0x00002745

00002a5c <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    2a5c:	b570      	push	{r4, r5, r6, lr}
    2a5e:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    2a60:	4b09      	ldr	r3, [pc, #36]	; (2a88 <usb_serial_read_buffer+0x2c>)
    2a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2a64:	4299      	cmp	r1, r3
    2a66:	d901      	bls.n	2a6c <usb_serial_read_buffer+0x10>
    2a68:	4b07      	ldr	r3, [pc, #28]	; (2a88 <usb_serial_read_buffer+0x2c>)
    2a6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    2a6c:	4d06      	ldr	r5, [pc, #24]	; (2a88 <usb_serial_read_buffer+0x2c>)
    2a6e:	0022      	movs	r2, r4
    2a70:	0029      	movs	r1, r5
    2a72:	4b06      	ldr	r3, [pc, #24]	; (2a8c <usb_serial_read_buffer+0x30>)
    2a74:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2a76:	2220      	movs	r2, #32
    2a78:	0029      	movs	r1, r5
    2a7a:	2002      	movs	r0, #2
    2a7c:	4b04      	ldr	r3, [pc, #16]	; (2a90 <usb_serial_read_buffer+0x34>)
    2a7e:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    2a80:	2300      	movs	r3, #0
    2a82:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    2a84:	0020      	movs	r0, r4
    2a86:	bd70      	pop	{r4, r5, r6, pc}
    2a88:	200004d4 	.word	0x200004d4
    2a8c:	00005059 	.word	0x00005059
    2a90:	000026e5 	.word	0x000026e5

00002a94 <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    2a94:	4770      	bx	lr
	...

00002a98 <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    2a98:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    2a9a:	4b2a      	ldr	r3, [pc, #168]	; (2b44 <usb_cb_control_setup+0xac>)
    2a9c:	781a      	ldrb	r2, [r3, #0]
    2a9e:	2360      	movs	r3, #96	; 0x60
    2aa0:	4013      	ands	r3, r2
    2aa2:	2b20      	cmp	r3, #32
    2aa4:	d000      	beq.n	2aa8 <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    2aa6:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    2aa8:	4b26      	ldr	r3, [pc, #152]	; (2b44 <usb_cb_control_setup+0xac>)
    2aaa:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    2aac:	231f      	movs	r3, #31
    2aae:	4013      	ands	r3, r2
    2ab0:	2b01      	cmp	r3, #1
    2ab2:	d144      	bne.n	2b3e <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    2ab4:	2900      	cmp	r1, #0
    2ab6:	d1f6      	bne.n	2aa6 <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    2ab8:	4b22      	ldr	r3, [pc, #136]	; (2b44 <usb_cb_control_setup+0xac>)
    2aba:	785b      	ldrb	r3, [r3, #1]
    2abc:	2b22      	cmp	r3, #34	; 0x22
    2abe:	d031      	beq.n	2b24 <usb_cb_control_setup+0x8c>
    2ac0:	d80c      	bhi.n	2adc <usb_cb_control_setup+0x44>
    2ac2:	2b20      	cmp	r3, #32
    2ac4:	d026      	beq.n	2b14 <usb_cb_control_setup+0x7c>
    2ac6:	2b21      	cmp	r3, #33	; 0x21
    2ac8:	d136      	bne.n	2b38 <usb_cb_control_setup+0xa0>
    2aca:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2acc:	2b06      	cmp	r3, #6
    2ace:	d823      	bhi.n	2b18 <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    2ad0:	4a1d      	ldr	r2, [pc, #116]	; (2b48 <usb_cb_control_setup+0xb0>)
    2ad2:	5cd1      	ldrb	r1, [r2, r3]
    2ad4:	4a1d      	ldr	r2, [pc, #116]	; (2b4c <usb_cb_control_setup+0xb4>)
    2ad6:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2ad8:	3301      	adds	r3, #1
    2ada:	e7f7      	b.n	2acc <usb_cb_control_setup+0x34>
    2adc:	2b23      	cmp	r3, #35	; 0x23
    2ade:	d12b      	bne.n	2b38 <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    2ae0:	2000      	movs	r0, #0
    2ae2:	4b1b      	ldr	r3, [pc, #108]	; (2b50 <usb_cb_control_setup+0xb8>)
    2ae4:	4798      	blx	r3
					usb_ep0_out();
    2ae6:	4b1b      	ldr	r3, [pc, #108]	; (2b54 <usb_cb_control_setup+0xbc>)
    2ae8:	4798      	blx	r3
					break;
    2aea:	e7dc      	b.n	2aa6 <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    2aec:	4b16      	ldr	r3, [pc, #88]	; (2b48 <usb_cb_control_setup+0xb0>)
    2aee:	491a      	ldr	r1, [pc, #104]	; (2b58 <usb_cb_control_setup+0xc0>)
    2af0:	5c89      	ldrb	r1, [r1, r2]
    2af2:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    2af4:	3201      	adds	r2, #1
    2af6:	4b13      	ldr	r3, [pc, #76]	; (2b44 <usb_cb_control_setup+0xac>)
    2af8:	7999      	ldrb	r1, [r3, #6]
    2afa:	79db      	ldrb	r3, [r3, #7]
    2afc:	021b      	lsls	r3, r3, #8
    2afe:	430b      	orrs	r3, r1
    2b00:	4293      	cmp	r3, r2
    2b02:	dd01      	ble.n	2b08 <usb_cb_control_setup+0x70>
    2b04:	2a06      	cmp	r2, #6
    2b06:	d9f1      	bls.n	2aec <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    2b08:	2000      	movs	r0, #0
    2b0a:	4b11      	ldr	r3, [pc, #68]	; (2b50 <usb_cb_control_setup+0xb8>)
    2b0c:	4798      	blx	r3
					usb_ep0_out();
    2b0e:	4b11      	ldr	r3, [pc, #68]	; (2b54 <usb_cb_control_setup+0xbc>)
    2b10:	4798      	blx	r3
					break;
    2b12:	e7c8      	b.n	2aa6 <usb_cb_control_setup+0xe>
    2b14:	2200      	movs	r2, #0
    2b16:	e7ee      	b.n	2af6 <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    2b18:	2007      	movs	r0, #7
    2b1a:	4b0d      	ldr	r3, [pc, #52]	; (2b50 <usb_cb_control_setup+0xb8>)
    2b1c:	4798      	blx	r3
					usb_ep0_out();
    2b1e:	4b0d      	ldr	r3, [pc, #52]	; (2b54 <usb_cb_control_setup+0xbc>)
    2b20:	4798      	blx	r3
					break;
    2b22:	e7c0      	b.n	2aa6 <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    2b24:	4b07      	ldr	r3, [pc, #28]	; (2b44 <usb_cb_control_setup+0xac>)
    2b26:	789a      	ldrb	r2, [r3, #2]
    2b28:	4b0c      	ldr	r3, [pc, #48]	; (2b5c <usb_cb_control_setup+0xc4>)
    2b2a:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    2b2c:	2000      	movs	r0, #0
    2b2e:	4b08      	ldr	r3, [pc, #32]	; (2b50 <usb_cb_control_setup+0xb8>)
    2b30:	4798      	blx	r3
					usb_ep0_out();
    2b32:	4b08      	ldr	r3, [pc, #32]	; (2b54 <usb_cb_control_setup+0xbc>)
    2b34:	4798      	blx	r3
					break;
    2b36:	e7b6      	b.n	2aa6 <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    2b38:	4b09      	ldr	r3, [pc, #36]	; (2b60 <usb_cb_control_setup+0xc8>)
    2b3a:	4798      	blx	r3
					break;
    2b3c:	e7b3      	b.n	2aa6 <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    2b3e:	4b08      	ldr	r3, [pc, #32]	; (2b60 <usb_cb_control_setup+0xc8>)
    2b40:	4798      	blx	r3
}
    2b42:	e7b0      	b.n	2aa6 <usb_cb_control_setup+0xe>
    2b44:	20000488 	.word	0x20000488
    2b48:	20000000 	.word	0x20000000
    2b4c:	20000444 	.word	0x20000444
    2b50:	00002865 	.word	0x00002865
    2b54:	0000284d 	.word	0x0000284d
    2b58:	20000494 	.word	0x20000494
    2b5c:	2000051c 	.word	0x2000051c
    2b60:	0000287d 	.word	0x0000287d

00002b64 <usb_cb_completion>:

void usb_cb_completion(void) {
    2b64:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    2b66:	2002      	movs	r0, #2
    2b68:	4b0a      	ldr	r3, [pc, #40]	; (2b94 <usb_cb_completion+0x30>)
    2b6a:	4798      	blx	r3
    2b6c:	2800      	cmp	r0, #0
    2b6e:	d105      	bne.n	2b7c <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    2b70:	2082      	movs	r0, #130	; 0x82
    2b72:	4b08      	ldr	r3, [pc, #32]	; (2b94 <usb_cb_completion+0x30>)
    2b74:	4798      	blx	r3
    2b76:	2800      	cmp	r0, #0
    2b78:	d106      	bne.n	2b88 <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    2b7a:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    2b7c:	2002      	movs	r0, #2
    2b7e:	4b06      	ldr	r3, [pc, #24]	; (2b98 <usb_cb_completion+0x34>)
    2b80:	4798      	blx	r3
		usb_serial_out_completion();
    2b82:	4b06      	ldr	r3, [pc, #24]	; (2b9c <usb_cb_completion+0x38>)
    2b84:	4798      	blx	r3
    2b86:	e7f3      	b.n	2b70 <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    2b88:	2082      	movs	r0, #130	; 0x82
    2b8a:	4b03      	ldr	r3, [pc, #12]	; (2b98 <usb_cb_completion+0x34>)
    2b8c:	4798      	blx	r3
		usb_serial_in_completion();
    2b8e:	4b04      	ldr	r3, [pc, #16]	; (2ba0 <usb_cb_completion+0x3c>)
    2b90:	4798      	blx	r3
}
    2b92:	e7f2      	b.n	2b7a <usb_cb_completion+0x16>
    2b94:	000027b1 	.word	0x000027b1
    2b98:	000027e9 	.word	0x000027e9
    2b9c:	000029f9 	.word	0x000029f9
    2ba0:	00002a11 	.word	0x00002a11

00002ba4 <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    2ba4:	4770      	bx	lr

00002ba6 <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    2ba6:	4770      	bx	lr

00002ba8 <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    2ba8:	b510      	push	{r4, lr}
	if (config <= 1) {
    2baa:	2801      	cmp	r0, #1
    2bac:	d901      	bls.n	2bb2 <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    2bae:	2000      	movs	r0, #0
}
    2bb0:	bd10      	pop	{r4, pc}
		usb_serial_init();
    2bb2:	4b02      	ldr	r3, [pc, #8]	; (2bbc <usb_cb_set_configuration+0x14>)
    2bb4:	4798      	blx	r3
		return true;
    2bb6:	2001      	movs	r0, #1
    2bb8:	e7fa      	b.n	2bb0 <usb_cb_set_configuration+0x8>
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	000029bd 	.word	0x000029bd

00002bc0 <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    2bc0:	2800      	cmp	r0, #0
    2bc2:	d003      	beq.n	2bcc <usb_cb_set_interface+0xc>
    2bc4:	2801      	cmp	r0, #1
    2bc6:	d005      	beq.n	2bd4 <usb_cb_set_interface+0x14>
    2bc8:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    2bca:	4770      	bx	lr
		if (altsetting == 0) return true;
    2bcc:	2900      	cmp	r1, #0
    2bce:	d005      	beq.n	2bdc <usb_cb_set_interface+0x1c>
	return false;
    2bd0:	2000      	movs	r0, #0
    2bd2:	e7fa      	b.n	2bca <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2bd4:	2900      	cmp	r1, #0
    2bd6:	d003      	beq.n	2be0 <usb_cb_set_interface+0x20>
	return false;
    2bd8:	2000      	movs	r0, #0
    2bda:	e7f6      	b.n	2bca <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2bdc:	2001      	movs	r0, #1
    2bde:	e7f4      	b.n	2bca <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2be0:	2001      	movs	r0, #1
    2be2:	e7f2      	b.n	2bca <usb_cb_set_interface+0xa>

00002be4 <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    2be4:	b510      	push	{r4, lr}
    2be6:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    2be8:	2802      	cmp	r0, #2
    2bea:	d028      	beq.n	2c3e <usb_cb_get_descriptor+0x5a>
    2bec:	2803      	cmp	r0, #3
    2bee:	d008      	beq.n	2c02 <usb_cb_get_descriptor+0x1e>
    2bf0:	2801      	cmp	r0, #1
    2bf2:	d003      	beq.n	2bfc <usb_cb_get_descriptor+0x18>
    2bf4:	2000      	movs	r0, #0
    2bf6:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    2bf8:	6023      	str	r3, [r4, #0]
	return size;
    2bfa:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    2bfc:	3011      	adds	r0, #17
		address = &device_descriptor;
    2bfe:	4b11      	ldr	r3, [pc, #68]	; (2c44 <usb_cb_get_descriptor+0x60>)
    2c00:	e7fa      	b.n	2bf8 <usb_cb_get_descriptor+0x14>
		switch (index) {
    2c02:	2902      	cmp	r1, #2
    2c04:	d00f      	beq.n	2c26 <usb_cb_get_descriptor+0x42>
    2c06:	d808      	bhi.n	2c1a <usb_cb_get_descriptor+0x36>
    2c08:	2900      	cmp	r1, #0
    2c0a:	d015      	beq.n	2c38 <usb_cb_get_descriptor+0x54>
    2c0c:	2901      	cmp	r1, #1
    2c0e:	d10f      	bne.n	2c30 <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    2c10:	480d      	ldr	r0, [pc, #52]	; (2c48 <usb_cb_get_descriptor+0x64>)
    2c12:	4b0e      	ldr	r3, [pc, #56]	; (2c4c <usb_cb_get_descriptor+0x68>)
    2c14:	4798      	blx	r3
    2c16:	0003      	movs	r3, r0
			break;
    2c18:	e00f      	b.n	2c3a <usb_cb_get_descriptor+0x56>
    2c1a:	2903      	cmp	r1, #3
    2c1c:	d108      	bne.n	2c30 <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    2c1e:	4b0c      	ldr	r3, [pc, #48]	; (2c50 <usb_cb_get_descriptor+0x6c>)
    2c20:	4798      	blx	r3
    2c22:	0003      	movs	r3, r0
			break;
    2c24:	e009      	b.n	2c3a <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    2c26:	480b      	ldr	r0, [pc, #44]	; (2c54 <usb_cb_get_descriptor+0x70>)
    2c28:	4b08      	ldr	r3, [pc, #32]	; (2c4c <usb_cb_get_descriptor+0x68>)
    2c2a:	4798      	blx	r3
    2c2c:	0003      	movs	r3, r0
			break;
    2c2e:	e004      	b.n	2c3a <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    2c30:	2300      	movs	r3, #0
    2c32:	6023      	str	r3, [r4, #0]
			return 0;
    2c34:	2000      	movs	r0, #0
    2c36:	e7e0      	b.n	2bfa <usb_cb_get_descriptor+0x16>
    2c38:	4b07      	ldr	r3, [pc, #28]	; (2c58 <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    2c3a:	7818      	ldrb	r0, [r3, #0]
		break;
    2c3c:	e7dc      	b.n	2bf8 <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    2c3e:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    2c40:	4b06      	ldr	r3, [pc, #24]	; (2c5c <usb_cb_get_descriptor+0x78>)
    2c42:	e7d9      	b.n	2bf8 <usb_cb_get_descriptor+0x14>
    2c44:	00005360 	.word	0x00005360
    2c48:	00005344 	.word	0x00005344
    2c4c:	00002431 	.word	0x00002431
    2c50:	00002959 	.word	0x00002959
    2c54:	00005354 	.word	0x00005354
    2c58:	0000535c 	.word	0x0000535c
    2c5c:	20000008 	.word	0x20000008

00002c60 <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    2c60:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    2c62:	4b07      	ldr	r3, [pc, #28]	; (2c80 <rtos_init+0x20>)
    2c64:	4798      	blx	r3
	#endif
	
	time_init();
    2c66:	4b07      	ldr	r3, [pc, #28]	; (2c84 <rtos_init+0x24>)
    2c68:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    2c6a:	2180      	movs	r1, #128	; 0x80
    2c6c:	03c9      	lsls	r1, r1, #15
    2c6e:	2001      	movs	r0, #1
    2c70:	4b05      	ldr	r3, [pc, #20]	; (2c88 <rtos_init+0x28>)
    2c72:	4798      	blx	r3
	#endif
	
	init_process_queue();
    2c74:	4b05      	ldr	r3, [pc, #20]	; (2c8c <rtos_init+0x2c>)
    2c76:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    2c78:	4b05      	ldr	r3, [pc, #20]	; (2c90 <rtos_init+0x30>)
    2c7a:	4798      	blx	r3
	#endif
	
	return true;
}
    2c7c:	2001      	movs	r0, #1
    2c7e:	bd10      	pop	{r4, pc}
    2c80:	00001fb1 	.word	0x00001fb1
    2c84:	00002085 	.word	0x00002085
    2c88:	00001a95 	.word	0x00001a95
    2c8c:	00002e81 	.word	0x00002e81
    2c90:	000020f9 	.word	0x000020f9

00002c94 <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    2c94:	b570      	push	{r4, r5, r6, lr}
    2c96:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    2c98:	e011      	b.n	2cbe <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    2c9a:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    2c9c:	2680      	movs	r6, #128	; 0x80
    2c9e:	03f6      	lsls	r6, r6, #15
    2ca0:	0031      	movs	r1, r6
    2ca2:	2001      	movs	r0, #1
    2ca4:	4b0c      	ldr	r3, [pc, #48]	; (2cd8 <morse+0x44>)
    2ca6:	4798      	blx	r3
		delay_ms(delay);
    2ca8:	480c      	ldr	r0, [pc, #48]	; (2cdc <morse+0x48>)
    2caa:	4368      	muls	r0, r5
    2cac:	4d0c      	ldr	r5, [pc, #48]	; (2ce0 <morse+0x4c>)
    2cae:	47a8      	blx	r5
		led_off();
    2cb0:	0031      	movs	r1, r6
    2cb2:	2001      	movs	r0, #1
    2cb4:	4b0b      	ldr	r3, [pc, #44]	; (2ce4 <morse+0x50>)
    2cb6:	4798      	blx	r3
		delay_ms(100);
    2cb8:	480b      	ldr	r0, [pc, #44]	; (2ce8 <morse+0x54>)
    2cba:	47a8      	blx	r5
		++c;
    2cbc:	3401      	adds	r4, #1
	while (*c != '\0') {
    2cbe:	7823      	ldrb	r3, [r4, #0]
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d007      	beq.n	2cd4 <morse+0x40>
		if (*c == '.') delay = 100;
    2cc4:	2b2e      	cmp	r3, #46	; 0x2e
    2cc6:	d0e8      	beq.n	2c9a <morse+0x6>
		else if (*c == '-') delay = 200;
    2cc8:	2b2d      	cmp	r3, #45	; 0x2d
    2cca:	d001      	beq.n	2cd0 <morse+0x3c>
		int delay = 0;
    2ccc:	2500      	movs	r5, #0
    2cce:	e7e5      	b.n	2c9c <morse+0x8>
		else if (*c == '-') delay = 200;
    2cd0:	25c8      	movs	r5, #200	; 0xc8
    2cd2:	e7e3      	b.n	2c9c <morse+0x8>
	}
}
    2cd4:	bd70      	pop	{r4, r5, r6, pc}
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	00001aa5 	.word	0x00001aa5
    2cdc:	00001770 	.word	0x00001770
    2ce0:	00002075 	.word	0x00002075
    2ce4:	00001ab5 	.word	0x00001ab5
    2ce8:	000927c0 	.word	0x000927c0

00002cec <SOS>:

void SOS() {
    2cec:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2cee:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    2cf0:	4803      	ldr	r0, [pc, #12]	; (2d00 <SOS+0x14>)
    2cf2:	4b04      	ldr	r3, [pc, #16]	; (2d04 <SOS+0x18>)
    2cf4:	4798      	blx	r3
		delay_ms(600);
    2cf6:	4804      	ldr	r0, [pc, #16]	; (2d08 <SOS+0x1c>)
    2cf8:	4b04      	ldr	r3, [pc, #16]	; (2d0c <SOS+0x20>)
    2cfa:	4798      	blx	r3
	while(1) {
    2cfc:	e7f8      	b.n	2cf0 <SOS+0x4>
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	00005374 	.word	0x00005374
    2d04:	00002c95 	.word	0x00002c95
    2d08:	0036ee80 	.word	0x0036ee80
    2d0c:	00002075 	.word	0x00002075

00002d10 <rtos_main>:
int rtos_main(void) {
    2d10:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    2d12:	4b13      	ldr	r3, [pc, #76]	; (2d60 <rtos_main+0x50>)
    2d14:	4798      	blx	r3
	mainproc = &_mainproc;
    2d16:	4c13      	ldr	r4, [pc, #76]	; (2d64 <rtos_main+0x54>)
    2d18:	1d20      	adds	r0, r4, #4
    2d1a:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    2d1c:	2380      	movs	r3, #128	; 0x80
    2d1e:	22c0      	movs	r2, #192	; 0xc0
    2d20:	4911      	ldr	r1, [pc, #68]	; (2d68 <rtos_main+0x58>)
    2d22:	00db      	lsls	r3, r3, #3
    2d24:	0092      	lsls	r2, r2, #2
    2d26:	4d11      	ldr	r5, [pc, #68]	; (2d6c <rtos_main+0x5c>)
    2d28:	47a8      	blx	r5
	dispatch_process(mainproc);
    2d2a:	6820      	ldr	r0, [r4, #0]
    2d2c:	4b10      	ldr	r3, [pc, #64]	; (2d70 <rtos_main+0x60>)
    2d2e:	4798      	blx	r3
	while (process_count) {
    2d30:	e001      	b.n	2d36 <rtos_main+0x26>
		dispatch_process(lastproc);
    2d32:	4b0f      	ldr	r3, [pc, #60]	; (2d70 <rtos_main+0x60>)
    2d34:	4798      	blx	r3
	while (process_count) {
    2d36:	4b0f      	ldr	r3, [pc, #60]	; (2d74 <rtos_main+0x64>)
    2d38:	681b      	ldr	r3, [r3, #0]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d003      	beq.n	2d46 <rtos_main+0x36>
		if (!(lastproc = next_process())) break;
    2d3e:	4b0e      	ldr	r3, [pc, #56]	; (2d78 <rtos_main+0x68>)
    2d40:	4798      	blx	r3
    2d42:	2800      	cmp	r0, #0
    2d44:	d1f5      	bne.n	2d32 <rtos_main+0x22>
	if (process_count) SOS();
    2d46:	4b0b      	ldr	r3, [pc, #44]	; (2d74 <rtos_main+0x64>)
    2d48:	681b      	ldr	r3, [r3, #0]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d106      	bne.n	2d5c <rtos_main+0x4c>
	led_on();
    2d4e:	2180      	movs	r1, #128	; 0x80
    2d50:	03c9      	lsls	r1, r1, #15
    2d52:	2001      	movs	r0, #1
    2d54:	4b09      	ldr	r3, [pc, #36]	; (2d7c <rtos_main+0x6c>)
    2d56:	4798      	blx	r3
}
    2d58:	2000      	movs	r0, #0
    2d5a:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    2d5c:	4b08      	ldr	r3, [pc, #32]	; (2d80 <rtos_main+0x70>)
    2d5e:	4798      	blx	r3
    2d60:	00002c61 	.word	0x00002c61
    2d64:	200005a0 	.word	0x200005a0
    2d68:	00000f49 	.word	0x00000f49
    2d6c:	00002dad 	.word	0x00002dad
    2d70:	00002e95 	.word	0x00002e95
    2d74:	200005d8 	.word	0x200005d8
    2d78:	00002f49 	.word	0x00002f49
    2d7c:	00001aa5 	.word	0x00001aa5
    2d80:	00002ced 	.word	0x00002ced

00002d84 <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    2d84:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    2d86:	4b05      	ldr	r3, [pc, #20]	; (2d9c <TC4_Handler+0x18>)
    2d88:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    2d8a:	4b05      	ldr	r3, [pc, #20]	; (2da0 <TC4_Handler+0x1c>)
    2d8c:	681c      	ldr	r4, [r3, #0]
    2d8e:	4b05      	ldr	r3, [pc, #20]	; (2da4 <TC4_Handler+0x20>)
    2d90:	4798      	blx	r3
    2d92:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    2d94:	2001      	movs	r0, #1
    2d96:	4b04      	ldr	r3, [pc, #16]	; (2da8 <TC4_Handler+0x24>)
    2d98:	4798      	blx	r3
}
    2d9a:	bd10      	pop	{r4, pc}
    2d9c:	00002139 	.word	0x00002139
    2da0:	200005cc 	.word	0x200005cc
    2da4:	000020ed 	.word	0x000020ed
    2da8:	000030b9 	.word	0x000030b9

00002dac <init_process>:
Process* current_process;

//uint32_t process_pc;


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    2dac:	b510      	push	{r4, lr}
    2dae:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    2db0:	4807      	ldr	r0, [pc, #28]	; (2dd0 <init_process+0x24>)
    2db2:	1a82      	subs	r2, r0, r2
    2db4:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    2db6:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    2db8:	1e4b      	subs	r3, r1, #1
    2dba:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    2dbc:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    2dbe:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    2dc0:	4b04      	ldr	r3, [pc, #16]	; (2dd4 <init_process+0x28>)
    2dc2:	4798      	blx	r3
    2dc4:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    2dc6:	2300      	movs	r3, #0
    2dc8:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    2dca:	2224      	movs	r2, #36	; 0x24
    2dcc:	54a3      	strb	r3, [r4, r2]
	#endif
}
    2dce:	bd10      	pop	{r4, pc}
    2dd0:	20002820 	.word	0x20002820
    2dd4:	000020ed 	.word	0x000020ed

00002dd8 <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    2dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dda:	465f      	mov	r7, fp
    2ddc:	4656      	mov	r6, sl
    2dde:	464d      	mov	r5, r9
    2de0:	4644      	mov	r4, r8
    2de2:	b4f0      	push	{r4, r5, r6, r7}
    2de4:	b083      	sub	sp, #12
    2de6:	9001      	str	r0, [sp, #4]
    2de8:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    2dea:	2324      	movs	r3, #36	; 0x24
    2dec:	5cc3      	ldrb	r3, [r0, r3]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d124      	bne.n	2e3c <switch_process+0x64>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    2df2:	4b1c      	ldr	r3, [pc, #112]	; (2e64 <switch_process+0x8c>)
    2df4:	9a01      	ldr	r2, [sp, #4]
    2df6:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    2df8:	2303      	movs	r3, #3
    2dfa:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    2dfc:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2dfe:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2e02:	2302      	movs	r3, #2
    2e04:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2e08:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e0c:	b662      	cpsie	i
	USE_PSP();
	
	__enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    2e0e:	9201      	str	r2, [sp, #4]
    2e10:	6813      	ldr	r3, [r2, #0]
    2e12:	3301      	adds	r3, #1
    2e14:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2e16:	b672      	cpsid	i
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2e18:	2300      	movs	r3, #0
    2e1a:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2e1e:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    2e22:	3324      	adds	r3, #36	; 0x24
    2e24:	9a01      	ldr	r2, [sp, #4]
    2e26:	5cd3      	ldrb	r3, [r2, r3]
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d118      	bne.n	2e5e <switch_process+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
    2e2c:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    2e2e:	b003      	add	sp, #12
    2e30:	bcf0      	pop	{r4, r5, r6, r7}
    2e32:	46bb      	mov	fp, r7
    2e34:	46b2      	mov	sl, r6
    2e36:	46a9      	mov	r9, r5
    2e38:	46a0      	mov	r8, r4
    2e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    2e3c:	4b0a      	ldr	r3, [pc, #40]	; (2e68 <switch_process+0x90>)
    2e3e:	4798      	blx	r3
    2e40:	4b0a      	ldr	r3, [pc, #40]	; (2e6c <switch_process+0x94>)
    2e42:	681a      	ldr	r2, [r3, #0]
    2e44:	0153      	lsls	r3, r2, #5
    2e46:	1a9b      	subs	r3, r3, r2
    2e48:	009b      	lsls	r3, r3, #2
    2e4a:	189b      	adds	r3, r3, r2
    2e4c:	00db      	lsls	r3, r3, #3
    2e4e:	18c0      	adds	r0, r0, r3
    2e50:	4b07      	ldr	r3, [pc, #28]	; (2e70 <switch_process+0x98>)
    2e52:	4798      	blx	r3
		preempt_clear_interrupts();
    2e54:	4b07      	ldr	r3, [pc, #28]	; (2e74 <switch_process+0x9c>)
    2e56:	4798      	blx	r3
		preempt_enable_interrupts();
    2e58:	4b07      	ldr	r3, [pc, #28]	; (2e78 <switch_process+0xa0>)
    2e5a:	4798      	blx	r3
    2e5c:	e7c9      	b.n	2df2 <switch_process+0x1a>
		preempt_disable_interrupts();
    2e5e:	4b07      	ldr	r3, [pc, #28]	; (2e7c <switch_process+0xa4>)
    2e60:	4798      	blx	r3
    2e62:	e7e3      	b.n	2e2c <switch_process+0x54>
    2e64:	200005cc 	.word	0x200005cc
    2e68:	000020ed 	.word	0x000020ed
    2e6c:	000053b0 	.word	0x000053b0
    2e70:	00002155 	.word	0x00002155
    2e74:	00002139 	.word	0x00002139
    2e78:	00002111 	.word	0x00002111
    2e7c:	00002121 	.word	0x00002121

00002e80 <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    2e80:	4b03      	ldr	r3, [pc, #12]	; (2e90 <init_process_queue+0x10>)
    2e82:	2200      	movs	r2, #0
    2e84:	605a      	str	r2, [r3, #4]
    2e86:	609a      	str	r2, [r3, #8]
	current_process = 0;
    2e88:	601a      	str	r2, [r3, #0]
	process_count = 0;
    2e8a:	60da      	str	r2, [r3, #12]
}
    2e8c:	4770      	bx	lr
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	200005cc 	.word	0x200005cc

00002e94 <dispatch_process>:

bool dispatch_process(Process* process) {
    2e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e96:	464f      	mov	r7, r9
    2e98:	4646      	mov	r6, r8
    2e9a:	b4c0      	push	{r6, r7}
    2e9c:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    2e9e:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    2ea0:	6983      	ldr	r3, [r0, #24]
    2ea2:	2b03      	cmp	r3, #3
    2ea4:	d049      	beq.n	2f3a <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    2ea6:	4b26      	ldr	r3, [pc, #152]	; (2f40 <dispatch_process+0xac>)
    2ea8:	68db      	ldr	r3, [r3, #12]
    2eaa:	2b0f      	cmp	r3, #15
    2eac:	dd04      	ble.n	2eb8 <dispatch_process+0x24>
    2eae:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    2eb0:	bcc0      	pop	{r6, r7}
    2eb2:	46b9      	mov	r9, r7
    2eb4:	46b0      	mov	r8, r6
    2eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    2eb8:	4b22      	ldr	r3, [pc, #136]	; (2f44 <dispatch_process+0xb0>)
    2eba:	4798      	blx	r3
    2ebc:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    2ebe:	464b      	mov	r3, r9
    2ec0:	699b      	ldr	r3, [r3, #24]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d007      	beq.n	2ed6 <dispatch_process+0x42>
    2ec6:	464b      	mov	r3, r9
    2ec8:	695f      	ldr	r7, [r3, #20]
    2eca:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    2ecc:	4b1c      	ldr	r3, [pc, #112]	; (2f40 <dispatch_process+0xac>)
    2ece:	685b      	ldr	r3, [r3, #4]
    2ed0:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    2ed2:	2500      	movs	r5, #0
    2ed4:	e00c      	b.n	2ef0 <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    2ed6:	2700      	movs	r7, #0
    2ed8:	e7f8      	b.n	2ecc <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    2eda:	3110      	adds	r1, #16
    2edc:	e00e      	b.n	2efc <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    2ede:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    2ee0:	42ba      	cmp	r2, r7
    2ee2:	dd16      	ble.n	2f12 <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    2ee4:	4a16      	ldr	r2, [pc, #88]	; (2f40 <dispatch_process+0xac>)
    2ee6:	009e      	lsls	r6, r3, #2
    2ee8:	1993      	adds	r3, r2, r6
    2eea:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    2eec:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    2eee:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    2ef0:	4a13      	ldr	r2, [pc, #76]	; (2f40 <dispatch_process+0xac>)
    2ef2:	68d6      	ldr	r6, [r2, #12]
    2ef4:	42ae      	cmp	r6, r5
    2ef6:	dd0c      	ble.n	2f12 <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    2ef8:	1e59      	subs	r1, r3, #1
    2efa:	d4ee      	bmi.n	2eda <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    2efc:	4a10      	ldr	r2, [pc, #64]	; (2f40 <dispatch_process+0xac>)
    2efe:	0088      	lsls	r0, r1, #2
    2f00:	1812      	adds	r2, r2, r0
    2f02:	6910      	ldr	r0, [r2, #16]
    2f04:	6982      	ldr	r2, [r0, #24]
    2f06:	2a00      	cmp	r2, #0
    2f08:	d0e9      	beq.n	2ede <dispatch_process+0x4a>
    2f0a:	6942      	ldr	r2, [r0, #20]
    2f0c:	4644      	mov	r4, r8
    2f0e:	1b12      	subs	r2, r2, r4
    2f10:	e7e6      	b.n	2ee0 <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    2f12:	4a0b      	ldr	r2, [pc, #44]	; (2f40 <dispatch_process+0xac>)
    2f14:	009b      	lsls	r3, r3, #2
    2f16:	18d3      	adds	r3, r2, r3
    2f18:	4649      	mov	r1, r9
    2f1a:	6119      	str	r1, [r3, #16]
	++process_count;
    2f1c:	1c73      	adds	r3, r6, #1
    2f1e:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    2f20:	4666      	mov	r6, ip
    2f22:	3601      	adds	r6, #1
    2f24:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    2f26:	17f1      	asrs	r1, r6, #31
    2f28:	0f09      	lsrs	r1, r1, #28
    2f2a:	1876      	adds	r6, r6, r1
    2f2c:	230f      	movs	r3, #15
    2f2e:	4033      	ands	r3, r6
    2f30:	1a5b      	subs	r3, r3, r1
    2f32:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    2f34:	b662      	cpsie	i
	return true;
    2f36:	2001      	movs	r0, #1
    2f38:	e7ba      	b.n	2eb0 <dispatch_process+0x1c>
		return false;
    2f3a:	2000      	movs	r0, #0
    2f3c:	e7b8      	b.n	2eb0 <dispatch_process+0x1c>
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	200005cc 	.word	0x200005cc
    2f44:	000020ed 	.word	0x000020ed

00002f48 <next_process>:

Process* next_process() {
    2f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f4a:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    2f4c:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    2f4e:	4b57      	ldr	r3, [pc, #348]	; (30ac <next_process+0x164>)
    2f50:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    2f52:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    2f54:	e015      	b.n	2f82 <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    2f56:	6823      	ldr	r3, [r4, #0]
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	e03d      	b.n	2fd8 <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    2f5c:	6823      	ldr	r3, [r4, #0]
    2f5e:	881b      	ldrh	r3, [r3, #0]
    2f60:	e03a      	b.n	2fd8 <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    2f62:	6863      	ldr	r3, [r4, #4]
    2f64:	42bb      	cmp	r3, r7
    2f66:	d041      	beq.n	2fec <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    2f68:	466b      	mov	r3, sp
    2f6a:	3307      	adds	r3, #7
    2f6c:	781b      	ldrb	r3, [r3, #0]
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d163      	bne.n	303a <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    2f72:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    2f74:	17f3      	asrs	r3, r6, #31
    2f76:	0f1b      	lsrs	r3, r3, #28
    2f78:	18f6      	adds	r6, r6, r3
    2f7a:	220f      	movs	r2, #15
    2f7c:	4016      	ands	r6, r2
    2f7e:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    2f80:	3501      	adds	r5, #1
    2f82:	4b4a      	ldr	r3, [pc, #296]	; (30ac <next_process+0x164>)
    2f84:	68db      	ldr	r3, [r3, #12]
    2f86:	42ab      	cmp	r3, r5
    2f88:	dd59      	ble.n	303e <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    2f8a:	4b48      	ldr	r3, [pc, #288]	; (30ac <next_process+0x164>)
    2f8c:	00b2      	lsls	r2, r6, #2
    2f8e:	189a      	adds	r2, r3, r2
    2f90:	6912      	ldr	r2, [r2, #16]
    2f92:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    2f94:	6993      	ldr	r3, [r2, #24]
    2f96:	2b02      	cmp	r3, #2
    2f98:	d151      	bne.n	303e <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    2f9a:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    2f9c:	466b      	mov	r3, sp
    2f9e:	2200      	movs	r2, #0
    2fa0:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    2fa2:	68e3      	ldr	r3, [r4, #12]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d001      	beq.n	2fac <next_process+0x64>
    2fa8:	68e3      	ldr	r3, [r4, #12]
    2faa:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    2fac:	4b3f      	ldr	r3, [pc, #252]	; (30ac <next_process+0x164>)
    2fae:	681a      	ldr	r2, [r3, #0]
    2fb0:	6993      	ldr	r3, [r2, #24]
    2fb2:	2b01      	cmp	r3, #1
    2fb4:	d043      	beq.n	303e <next_process+0xf6>
			if (data->mask) {
    2fb6:	68a3      	ldr	r3, [r4, #8]
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d00f      	beq.n	2fdc <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    2fbc:	68a1      	ldr	r1, [r4, #8]
    2fbe:	23ff      	movs	r3, #255	; 0xff
    2fc0:	400b      	ands	r3, r1
    2fc2:	68a1      	ldr	r1, [r4, #8]
    2fc4:	428b      	cmp	r3, r1
    2fc6:	d0c6      	beq.n	2f56 <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    2fc8:	68a3      	ldr	r3, [r4, #8]
    2fca:	041b      	lsls	r3, r3, #16
    2fcc:	0c1b      	lsrs	r3, r3, #16
    2fce:	68a1      	ldr	r1, [r4, #8]
    2fd0:	428b      	cmp	r3, r1
    2fd2:	d0c3      	beq.n	2f5c <next_process+0x14>
				else variable = *(data->variable);
    2fd4:	6823      	ldr	r3, [r4, #0]
    2fd6:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    2fd8:	68a7      	ldr	r7, [r4, #8]
    2fda:	401f      	ands	r7, r3
			switch (data->condition) {
    2fdc:	7c23      	ldrb	r3, [r4, #16]
    2fde:	b2db      	uxtb	r3, r3
    2fe0:	2b06      	cmp	r3, #6
    2fe2:	d861      	bhi.n	30a8 <next_process+0x160>
    2fe4:	009b      	lsls	r3, r3, #2
    2fe6:	4932      	ldr	r1, [pc, #200]	; (30b0 <next_process+0x168>)
    2fe8:	58cb      	ldr	r3, [r1, r3]
    2fea:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    2fec:	466b      	mov	r3, sp
    2fee:	2101      	movs	r1, #1
    2ff0:	71d9      	strb	r1, [r3, #7]
    2ff2:	e7b9      	b.n	2f68 <next_process+0x20>
				if (variable != data->value) unblocked = true;
    2ff4:	6863      	ldr	r3, [r4, #4]
    2ff6:	42bb      	cmp	r3, r7
    2ff8:	d0b6      	beq.n	2f68 <next_process+0x20>
    2ffa:	466b      	mov	r3, sp
    2ffc:	2101      	movs	r1, #1
    2ffe:	71d9      	strb	r1, [r3, #7]
    3000:	e7b2      	b.n	2f68 <next_process+0x20>
				if (variable > data->value) unblocked = true;
    3002:	6863      	ldr	r3, [r4, #4]
    3004:	42bb      	cmp	r3, r7
    3006:	d2af      	bcs.n	2f68 <next_process+0x20>
    3008:	466b      	mov	r3, sp
    300a:	2101      	movs	r1, #1
    300c:	71d9      	strb	r1, [r3, #7]
    300e:	e7ab      	b.n	2f68 <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    3010:	6863      	ldr	r3, [r4, #4]
    3012:	42bb      	cmp	r3, r7
    3014:	d8a8      	bhi.n	2f68 <next_process+0x20>
    3016:	466b      	mov	r3, sp
    3018:	2101      	movs	r1, #1
    301a:	71d9      	strb	r1, [r3, #7]
    301c:	e7a4      	b.n	2f68 <next_process+0x20>
				if (variable < data->value) unblocked = true;
    301e:	6863      	ldr	r3, [r4, #4]
    3020:	42bb      	cmp	r3, r7
    3022:	d9a1      	bls.n	2f68 <next_process+0x20>
    3024:	466b      	mov	r3, sp
    3026:	2101      	movs	r1, #1
    3028:	71d9      	strb	r1, [r3, #7]
    302a:	e79d      	b.n	2f68 <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    302c:	6863      	ldr	r3, [r4, #4]
    302e:	42bb      	cmp	r3, r7
    3030:	d39a      	bcc.n	2f68 <next_process+0x20>
    3032:	466b      	mov	r3, sp
    3034:	2101      	movs	r1, #1
    3036:	71d9      	strb	r1, [r3, #7]
    3038:	e796      	b.n	2f68 <next_process+0x20>
				current_process->status = Process_State_Running;
    303a:	2301      	movs	r3, #1
    303c:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    303e:	4b1b      	ldr	r3, [pc, #108]	; (30ac <next_process+0x164>)
    3040:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    3042:	0028      	movs	r0, r5
    3044:	e015      	b.n	3072 <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    3046:	4919      	ldr	r1, [pc, #100]	; (30ac <next_process+0x164>)
    3048:	688e      	ldr	r6, [r1, #8]
    304a:	1986      	adds	r6, r0, r6
    304c:	1e73      	subs	r3, r6, #1
    304e:	17df      	asrs	r7, r3, #31
    3050:	0f3f      	lsrs	r7, r7, #28
    3052:	19db      	adds	r3, r3, r7
    3054:	220f      	movs	r2, #15
    3056:	4013      	ands	r3, r2
    3058:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    305a:	17f7      	asrs	r7, r6, #31
    305c:	0f3f      	lsrs	r7, r7, #28
    305e:	19f6      	adds	r6, r6, r7
    3060:	4032      	ands	r2, r6
    3062:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    3064:	009b      	lsls	r3, r3, #2
    3066:	18cb      	adds	r3, r1, r3
    3068:	691b      	ldr	r3, [r3, #16]
    306a:	0092      	lsls	r2, r2, #2
    306c:	1889      	adds	r1, r1, r2
    306e:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    3070:	3801      	subs	r0, #1
    3072:	2800      	cmp	r0, #0
    3074:	dce7      	bgt.n	3046 <next_process+0xfe>
	}

	--process_count;
    3076:	490d      	ldr	r1, [pc, #52]	; (30ac <next_process+0x164>)
    3078:	1e63      	subs	r3, r4, #1
    307a:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    307c:	688b      	ldr	r3, [r1, #8]
    307e:	3301      	adds	r3, #1
    3080:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    3082:	17d8      	asrs	r0, r3, #31
    3084:	0f00      	lsrs	r0, r0, #28
    3086:	181b      	adds	r3, r3, r0
    3088:	220f      	movs	r2, #15
    308a:	4013      	ands	r3, r2
    308c:	1a1b      	subs	r3, r3, r0
    308e:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    3090:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    3092:	42ac      	cmp	r4, r5
    3094:	d103      	bne.n	309e <next_process+0x156>
	
	return current_process;
    3096:	4b05      	ldr	r3, [pc, #20]	; (30ac <next_process+0x164>)
    3098:	6818      	ldr	r0, [r3, #0]
}
    309a:	b003      	add	sp, #12
    309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    309e:	4b03      	ldr	r3, [pc, #12]	; (30ac <next_process+0x164>)
    30a0:	6818      	ldr	r0, [r3, #0]
    30a2:	4b04      	ldr	r3, [pc, #16]	; (30b4 <next_process+0x16c>)
    30a4:	4798      	blx	r3
    30a6:	e7f6      	b.n	3096 <next_process+0x14e>
			switch (data->condition) {
    30a8:	2000      	movs	r0, #0
    30aa:	e7f6      	b.n	309a <next_process+0x152>
    30ac:	200005cc 	.word	0x200005cc
    30b0:	00005380 	.word	0x00005380
    30b4:	00002dd9 	.word	0x00002dd9

000030b8 <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    30b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ba:	465f      	mov	r7, fp
    30bc:	4656      	mov	r6, sl
    30be:	464d      	mov	r5, r9
    30c0:	4644      	mov	r4, r8
    30c2:	b4f0      	push	{r4, r5, r6, r7}
    30c4:	b083      	sub	sp, #12
    30c6:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    30c8:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    30cc:	2b00      	cmp	r3, #0
    30ce:	d01c      	beq.n	310a <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    30d0:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    30d2:	4b0f      	ldr	r3, [pc, #60]	; (3110 <yield_process+0x58>)
    30d4:	9301      	str	r3, [sp, #4]
    30d6:	681b      	ldr	r3, [r3, #0]
    30d8:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    30da:	2208      	movs	r2, #8
    30dc:	4252      	negs	r2, r2
    30de:	446a      	add	r2, sp
    30e0:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    30e2:	685a      	ldr	r2, [r3, #4]
    30e4:	3a04      	subs	r2, #4
    30e6:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    30e8:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    30ea:	3204      	adds	r2, #4
    30ec:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    30ee:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    30f0:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    30f2:	9b01      	ldr	r3, [sp, #4]
    30f4:	681b      	ldr	r3, [r3, #0]
    30f6:	2203      	movs	r2, #3
    30f8:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    30fa:	b662      	cpsie	i
	
	__enable_irq();
}
    30fc:	b003      	add	sp, #12
    30fe:	bcf0      	pop	{r4, r5, r6, r7}
    3100:	46bb      	mov	fp, r7
    3102:	46b2      	mov	sl, r6
    3104:	46a9      	mov	r9, r5
    3106:	46a0      	mov	r8, r4
    3108:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    310a:	4b02      	ldr	r3, [pc, #8]	; (3114 <yield_process+0x5c>)
    310c:	4798      	blx	r3
    310e:	e7df      	b.n	30d0 <yield_process+0x18>
    3110:	200005cc 	.word	0x200005cc
    3114:	00002ced 	.word	0x00002ced

00003118 <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    3118:	b5f0      	push	{r4, r5, r6, r7, lr}
    311a:	464f      	mov	r7, r9
    311c:	4646      	mov	r6, r8
    311e:	b4c0      	push	{r6, r7}
    3120:	b08b      	sub	sp, #44	; 0x2c
    3122:	4681      	mov	r9, r0
    3124:	000f      	movs	r7, r1
    3126:	4690      	mov	r8, r2
    3128:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    312a:	4e0f      	ldr	r6, [pc, #60]	; (3168 <wait_until+0x50>)
    312c:	6834      	ldr	r4, [r6, #0]
    312e:	4b0f      	ldr	r3, [pc, #60]	; (316c <wait_until+0x54>)
    3130:	4798      	blx	r3
    3132:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3134:	ac05      	add	r4, sp, #20
    3136:	464b      	mov	r3, r9
    3138:	9305      	str	r3, [sp, #20]
    313a:	9706      	str	r7, [sp, #24]
    313c:	4643      	mov	r3, r8
    313e:	9307      	str	r3, [sp, #28]
    3140:	2300      	movs	r3, #0
    3142:	9308      	str	r3, [sp, #32]
    3144:	7425      	strb	r5, [r4, #16]
    3146:	466b      	mov	r3, sp
    3148:	001a      	movs	r2, r3
    314a:	cc23      	ldmia	r4!, {r0, r1, r5}
    314c:	c223      	stmia	r2!, {r0, r1, r5}
    314e:	cc03      	ldmia	r4!, {r0, r1}
    3150:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3152:	6832      	ldr	r2, [r6, #0]
    3154:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3156:	2002      	movs	r0, #2
    3158:	4b05      	ldr	r3, [pc, #20]	; (3170 <wait_until+0x58>)
    315a:	4798      	blx	r3
}
    315c:	b00b      	add	sp, #44	; 0x2c
    315e:	bcc0      	pop	{r6, r7}
    3160:	46b9      	mov	r9, r7
    3162:	46b0      	mov	r8, r6
    3164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	200005cc 	.word	0x200005cc
    316c:	000020ed 	.word	0x000020ed
    3170:	000030b9 	.word	0x000030b9

00003174 <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    3174:	b5f0      	push	{r4, r5, r6, r7, lr}
    3176:	464f      	mov	r7, r9
    3178:	4646      	mov	r6, r8
    317a:	b4c0      	push	{r6, r7}
    317c:	b08b      	sub	sp, #44	; 0x2c
    317e:	4681      	mov	r9, r0
    3180:	000f      	movs	r7, r1
    3182:	4690      	mov	r8, r2
    3184:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    3186:	4e0f      	ldr	r6, [pc, #60]	; (31c4 <wait_until_callback+0x50>)
    3188:	6834      	ldr	r4, [r6, #0]
    318a:	4b0f      	ldr	r3, [pc, #60]	; (31c8 <wait_until_callback+0x54>)
    318c:	4798      	blx	r3
    318e:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3190:	ac05      	add	r4, sp, #20
    3192:	464b      	mov	r3, r9
    3194:	9305      	str	r3, [sp, #20]
    3196:	9706      	str	r7, [sp, #24]
    3198:	4643      	mov	r3, r8
    319a:	9307      	str	r3, [sp, #28]
    319c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    319e:	9308      	str	r3, [sp, #32]
    31a0:	7425      	strb	r5, [r4, #16]
    31a2:	466b      	mov	r3, sp
    31a4:	001a      	movs	r2, r3
    31a6:	cc23      	ldmia	r4!, {r0, r1, r5}
    31a8:	c223      	stmia	r2!, {r0, r1, r5}
    31aa:	cc03      	ldmia	r4!, {r0, r1}
    31ac:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    31ae:	6832      	ldr	r2, [r6, #0]
    31b0:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    31b2:	2002      	movs	r0, #2
    31b4:	4b05      	ldr	r3, [pc, #20]	; (31cc <wait_until_callback+0x58>)
    31b6:	4798      	blx	r3
    31b8:	b00b      	add	sp, #44	; 0x2c
    31ba:	bcc0      	pop	{r6, r7}
    31bc:	46b9      	mov	r9, r7
    31be:	46b0      	mov	r8, r6
    31c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	200005cc 	.word	0x200005cc
    31c8:	000020ed 	.word	0x000020ed
    31cc:	000030b9 	.word	0x000030b9

000031d0 <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    31d0:	b500      	push	{lr}
    31d2:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    31d4:	4b0c      	ldr	r3, [pc, #48]	; (3208 <rtos_delay_callback+0x38>)
    31d6:	4798      	blx	r3
    31d8:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    31da:	4b0c      	ldr	r3, [pc, #48]	; (320c <rtos_delay_callback+0x3c>)
    31dc:	681a      	ldr	r2, [r3, #0]
    31de:	6953      	ldr	r3, [r2, #20]
    31e0:	9901      	ldr	r1, [sp, #4]
    31e2:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    31e4:	490a      	ldr	r1, [pc, #40]	; (3210 <rtos_delay_callback+0x40>)
    31e6:	6809      	ldr	r1, [r1, #0]
    31e8:	4299      	cmp	r1, r3
    31ea:	dc07      	bgt.n	31fc <rtos_delay_callback+0x2c>
    31ec:	4908      	ldr	r1, [pc, #32]	; (3210 <rtos_delay_callback+0x40>)
    31ee:	6808      	ldr	r0, [r1, #0]
    31f0:	4907      	ldr	r1, [pc, #28]	; (3210 <rtos_delay_callback+0x40>)
    31f2:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    31f4:	2b00      	cmp	r3, #0
    31f6:	dd03      	ble.n	3200 <rtos_delay_callback+0x30>
}
    31f8:	b003      	add	sp, #12
    31fa:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    31fc:	0018      	movs	r0, r3
    31fe:	e7f7      	b.n	31f0 <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    3200:	2301      	movs	r3, #1
    3202:	6193      	str	r3, [r2, #24]
}
    3204:	e7f8      	b.n	31f8 <rtos_delay_callback+0x28>
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	000020ed 	.word	0x000020ed
    320c:	200005cc 	.word	0x200005cc
    3210:	20000050 	.word	0x20000050

00003214 <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    3214:	b570      	push	{r4, r5, r6, lr}
    3216:	b086      	sub	sp, #24
    3218:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    321a:	4b09      	ldr	r3, [pc, #36]	; (3240 <rtos_delay_ctick+0x2c>)
    321c:	4798      	blx	r3
    321e:	4b09      	ldr	r3, [pc, #36]	; (3244 <rtos_delay_ctick+0x30>)
    3220:	681d      	ldr	r5, [r3, #0]
    3222:	1900      	adds	r0, r0, r4
    3224:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3226:	aa01      	add	r2, sp, #4
    3228:	4b07      	ldr	r3, [pc, #28]	; (3248 <rtos_delay_ctick+0x34>)
    322a:	0011      	movs	r1, r2
    322c:	cb51      	ldmia	r3!, {r0, r4, r6}
    322e:	c151      	stmia	r1!, {r0, r4, r6}
    3230:	cb11      	ldmia	r3!, {r0, r4}
    3232:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3234:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    3236:	2002      	movs	r0, #2
    3238:	4b04      	ldr	r3, [pc, #16]	; (324c <rtos_delay_ctick+0x38>)
    323a:	4798      	blx	r3
    323c:	b006      	add	sp, #24
    323e:	bd70      	pop	{r4, r5, r6, pc}
    3240:	000020ed 	.word	0x000020ed
    3244:	200005cc 	.word	0x200005cc
    3248:	0000539c 	.word	0x0000539c
    324c:	000030b9 	.word	0x000030b9

00003250 <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    3250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3252:	4b16      	ldr	r3, [pc, #88]	; (32ac <busmanager_process_wait_callback+0x5c>)
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    3258:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    325a:	2500      	movs	r5, #0
    325c:	e00b      	b.n	3276 <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    325e:	4b13      	ldr	r3, [pc, #76]	; (32ac <busmanager_process_wait_callback+0x5c>)
    3260:	681b      	ldr	r3, [r3, #0]
    3262:	2201      	movs	r2, #1
    3264:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    3266:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3268:	17e3      	asrs	r3, r4, #31
    326a:	0f5b      	lsrs	r3, r3, #29
    326c:	18e4      	adds	r4, r4, r3
    326e:	2207      	movs	r2, #7
    3270:	4014      	ands	r4, r2
    3272:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    3274:	3501      	adds	r5, #1
    3276:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3278:	42ab      	cmp	r3, r5
    327a:	dd15      	ble.n	32a8 <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    327c:	1ca3      	adds	r3, r4, #2
    327e:	009b      	lsls	r3, r3, #2
    3280:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    3282:	7d1a      	ldrb	r2, [r3, #20]
    3284:	2a00      	cmp	r2, #0
    3286:	d0ee      	beq.n	3266 <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    3288:	7c1a      	ldrb	r2, [r3, #16]
    328a:	7c59      	ldrb	r1, [r3, #17]
    328c:	0209      	lsls	r1, r1, #8
    328e:	4311      	orrs	r1, r2
    3290:	7c9a      	ldrb	r2, [r3, #18]
    3292:	0412      	lsls	r2, r2, #16
    3294:	430a      	orrs	r2, r1
    3296:	7cdf      	ldrb	r7, [r3, #19]
    3298:	063f      	lsls	r7, r7, #24
    329a:	4317      	orrs	r7, r2
    329c:	4b04      	ldr	r3, [pc, #16]	; (32b0 <busmanager_process_wait_callback+0x60>)
    329e:	4798      	blx	r3
    32a0:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    32a2:	2f00      	cmp	r7, #0
    32a4:	dcdf      	bgt.n	3266 <busmanager_process_wait_callback+0x16>
    32a6:	e7da      	b.n	325e <busmanager_process_wait_callback+0xe>
	}
}
    32a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	200005cc 	.word	0x200005cc
    32b0:	000020ed 	.word	0x000020ed

000032b4 <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    32b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    32b6:	780c      	ldrb	r4, [r1, #0]
    32b8:	784d      	ldrb	r5, [r1, #1]
    32ba:	022d      	lsls	r5, r5, #8
    32bc:	4325      	orrs	r5, r4
    32be:	788c      	ldrb	r4, [r1, #2]
    32c0:	0424      	lsls	r4, r4, #16
    32c2:	432c      	orrs	r4, r5
    32c4:	78cf      	ldrb	r7, [r1, #3]
    32c6:	063f      	lsls	r7, r7, #24
    32c8:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    32ca:	2601      	movs	r6, #1
    32cc:	e000      	b.n	32d0 <set_matching_id_status+0x1c>
    32ce:	3601      	adds	r6, #1
    32d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    32d2:	42b1      	cmp	r1, r6
    32d4:	dd17      	ble.n	3306 <set_matching_id_status+0x52>
		++queue_pointer;
    32d6:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    32d8:	17d1      	asrs	r1, r2, #31
    32da:	0f49      	lsrs	r1, r1, #29
    32dc:	1852      	adds	r2, r2, r1
    32de:	2407      	movs	r4, #7
    32e0:	4022      	ands	r2, r4
    32e2:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    32e4:	1c91      	adds	r1, r2, #2
    32e6:	0089      	lsls	r1, r1, #2
    32e8:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    32ea:	782c      	ldrb	r4, [r5, #0]
    32ec:	7869      	ldrb	r1, [r5, #1]
    32ee:	0209      	lsls	r1, r1, #8
    32f0:	4321      	orrs	r1, r4
    32f2:	78ac      	ldrb	r4, [r5, #2]
    32f4:	0424      	lsls	r4, r4, #16
    32f6:	430c      	orrs	r4, r1
    32f8:	78e9      	ldrb	r1, [r5, #3]
    32fa:	0609      	lsls	r1, r1, #24
    32fc:	4321      	orrs	r1, r4
    32fe:	42b9      	cmp	r1, r7
    3300:	d1e5      	bne.n	32ce <set_matching_id_status+0x1a>
    3302:	756b      	strb	r3, [r5, #21]
    3304:	e7e3      	b.n	32ce <set_matching_id_status+0x1a>
}
    3306:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003308 <busmanager_process_function>:

void busmanager_process_function() {
    3308:	b5f0      	push	{r4, r5, r6, r7, lr}
    330a:	46ce      	mov	lr, r9
    330c:	4647      	mov	r7, r8
    330e:	b580      	push	{r7, lr}
    3310:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3312:	4b62      	ldr	r3, [pc, #392]	; (349c <busmanager_process_function+0x194>)
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	6a1f      	ldr	r7, [r3, #32]
    3318:	e05d      	b.n	33d6 <busmanager_process_function+0xce>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    331a:	0038      	movs	r0, r7
    331c:	3030      	adds	r0, #48	; 0x30
    331e:	2201      	movs	r2, #1
    3320:	3302      	adds	r3, #2
    3322:	4252      	negs	r2, r2
    3324:	2100      	movs	r1, #0
    3326:	4c5e      	ldr	r4, [pc, #376]	; (34a0 <busmanager_process_function+0x198>)
    3328:	47a0      	blx	r4
    332a:	e057      	b.n	33dc <busmanager_process_function+0xd4>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    332c:	7d2b      	ldrb	r3, [r5, #20]
    332e:	2b00      	cmp	r3, #0
    3330:	d158      	bne.n	33e4 <busmanager_process_function+0xdc>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    3332:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3334:	17e3      	asrs	r3, r4, #31
    3336:	0f5b      	lsrs	r3, r3, #29
    3338:	18e4      	adds	r4, r4, r3
    333a:	2207      	movs	r2, #7
    333c:	4014      	ands	r4, r2
    333e:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3340:	2301      	movs	r3, #1
    3342:	469c      	mov	ip, r3
    3344:	44e1      	add	r9, ip
    3346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3348:	454b      	cmp	r3, r9
    334a:	dd09      	ble.n	3360 <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    334c:	1ca3      	adds	r3, r4, #2
    334e:	009b      	lsls	r3, r3, #2
    3350:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    3352:	2315      	movs	r3, #21
    3354:	56eb      	ldrsb	r3, [r5, r3]
    3356:	2b00      	cmp	r3, #0
    3358:	d1e8      	bne.n	332c <busmanager_process_function+0x24>
    335a:	7d2b      	ldrb	r3, [r5, #20]
    335c:	2b00      	cmp	r3, #0
    335e:	d1e5      	bne.n	332c <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    3360:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3362:	4549      	cmp	r1, r9
    3364:	d05e      	beq.n	3424 <busmanager_process_function+0x11c>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    3366:	2315      	movs	r3, #21
    3368:	56eb      	ldrsb	r3, [r5, r3]
    336a:	2b02      	cmp	r3, #2
    336c:	d02f      	beq.n	33ce <busmanager_process_function+0xc6>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    336e:	7b2a      	ldrb	r2, [r5, #12]
    3370:	7b6b      	ldrb	r3, [r5, #13]
    3372:	021b      	lsls	r3, r3, #8
    3374:	4313      	orrs	r3, r2
    3376:	7baa      	ldrb	r2, [r5, #14]
    3378:	0412      	lsls	r2, r2, #16
    337a:	431a      	orrs	r2, r3
    337c:	7beb      	ldrb	r3, [r5, #15]
    337e:	061b      	lsls	r3, r3, #24
    3380:	4313      	orrs	r3, r2
    3382:	d059      	beq.n	3438 <busmanager_process_function+0x130>
				SOS();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    3384:	7b2b      	ldrb	r3, [r5, #12]
    3386:	7b6a      	ldrb	r2, [r5, #13]
    3388:	0212      	lsls	r2, r2, #8
    338a:	431a      	orrs	r2, r3
    338c:	7bab      	ldrb	r3, [r5, #14]
    338e:	041b      	lsls	r3, r3, #16
    3390:	4313      	orrs	r3, r2
    3392:	7bec      	ldrb	r4, [r5, #15]
    3394:	0624      	lsls	r4, r4, #24
    3396:	431c      	orrs	r4, r3
    3398:	7a2b      	ldrb	r3, [r5, #8]
    339a:	7a6a      	ldrb	r2, [r5, #9]
    339c:	0212      	lsls	r2, r2, #8
    339e:	431a      	orrs	r2, r3
    33a0:	7aab      	ldrb	r3, [r5, #10]
    33a2:	041b      	lsls	r3, r3, #16
    33a4:	4313      	orrs	r3, r2
    33a6:	7aea      	ldrb	r2, [r5, #11]
    33a8:	0612      	lsls	r2, r2, #24
    33aa:	431a      	orrs	r2, r3
    33ac:	6879      	ldr	r1, [r7, #4]
    33ae:	792b      	ldrb	r3, [r5, #4]
    33b0:	7968      	ldrb	r0, [r5, #5]
    33b2:	0200      	lsls	r0, r0, #8
    33b4:	4318      	orrs	r0, r3
    33b6:	79ab      	ldrb	r3, [r5, #6]
    33b8:	041b      	lsls	r3, r3, #16
    33ba:	4303      	orrs	r3, r0
    33bc:	79e8      	ldrb	r0, [r5, #7]
    33be:	0600      	lsls	r0, r0, #24
    33c0:	4318      	orrs	r0, r3
    33c2:	002b      	movs	r3, r5
    33c4:	47a0      	blx	r4
    33c6:	2800      	cmp	r0, #0
    33c8:	d001      	beq.n	33ce <busmanager_process_function+0xc6>
				current_request->status = BusManager_Request_Complete;
    33ca:	2302      	movs	r3, #2
    33cc:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    33ce:	2315      	movs	r3, #21
    33d0:	56eb      	ldrsb	r3, [r5, r3]
    33d2:	2b02      	cmp	r3, #2
    33d4:	d033      	beq.n	343e <busmanager_process_function+0x136>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    33d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    33d8:	2b00      	cmp	r3, #0
    33da:	d09e      	beq.n	331a <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    33dc:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    33de:	2300      	movs	r3, #0
    33e0:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    33e2:	e7b0      	b.n	3346 <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    33e4:	7c2a      	ldrb	r2, [r5, #16]
    33e6:	7c6b      	ldrb	r3, [r5, #17]
    33e8:	021b      	lsls	r3, r3, #8
    33ea:	4313      	orrs	r3, r2
    33ec:	7caa      	ldrb	r2, [r5, #18]
    33ee:	0412      	lsls	r2, r2, #16
    33f0:	431a      	orrs	r2, r3
    33f2:	7ceb      	ldrb	r3, [r5, #19]
    33f4:	061b      	lsls	r3, r3, #24
    33f6:	4313      	orrs	r3, r2
    33f8:	4698      	mov	r8, r3
    33fa:	4b2a      	ldr	r3, [pc, #168]	; (34a4 <busmanager_process_function+0x19c>)
    33fc:	4798      	blx	r3
    33fe:	4643      	mov	r3, r8
    3400:	1a18      	subs	r0, r3, r0
    3402:	2800      	cmp	r0, #0
    3404:	dd06      	ble.n	3414 <busmanager_process_function+0x10c>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    3406:	2301      	movs	r3, #1
    3408:	0022      	movs	r2, r4
    340a:	0029      	movs	r1, r5
    340c:	0038      	movs	r0, r7
    340e:	4e26      	ldr	r6, [pc, #152]	; (34a8 <busmanager_process_function+0x1a0>)
    3410:	47b0      	blx	r6
			if (unblocked) break;
    3412:	e78e      	b.n	3332 <busmanager_process_function+0x2a>
					current_request->busy = false;
    3414:	2300      	movs	r3, #0
    3416:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    3418:	0022      	movs	r2, r4
    341a:	0029      	movs	r1, r5
    341c:	0038      	movs	r0, r7
    341e:	4c22      	ldr	r4, [pc, #136]	; (34a8 <busmanager_process_function+0x1a0>)
    3420:	47a0      	blx	r4
			if (unblocked) break;
    3422:	e79d      	b.n	3360 <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    3424:	0038      	movs	r0, r7
    3426:	3030      	adds	r0, #48	; 0x30
    3428:	2201      	movs	r2, #1
    342a:	4b20      	ldr	r3, [pc, #128]	; (34ac <busmanager_process_function+0x1a4>)
    342c:	9300      	str	r3, [sp, #0]
    342e:	2301      	movs	r3, #1
    3430:	4252      	negs	r2, r2
    3432:	4c1f      	ldr	r4, [pc, #124]	; (34b0 <busmanager_process_function+0x1a8>)
    3434:	47a0      	blx	r4
			continue;
    3436:	e7ce      	b.n	33d6 <busmanager_process_function+0xce>
				SOS();
    3438:	4b1e      	ldr	r3, [pc, #120]	; (34b4 <busmanager_process_function+0x1ac>)
    343a:	4798      	blx	r3
    343c:	e7a2      	b.n	3384 <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    343e:	7d2b      	ldrb	r3, [r5, #20]
    3440:	2b00      	cmp	r3, #0
    3442:	d1c8      	bne.n	33d6 <busmanager_process_function+0xce>
			current_request->status = BusManager_Request_CompleteNotBusy;
    3444:	3303      	adds	r3, #3
    3446:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    3448:	e017      	b.n	347a <busmanager_process_function+0x172>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    344a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    344c:	4449      	add	r1, r9
    344e:	1e4b      	subs	r3, r1, #1
    3450:	17d8      	asrs	r0, r3, #31
    3452:	0f40      	lsrs	r0, r0, #29
    3454:	181b      	adds	r3, r3, r0
    3456:	2207      	movs	r2, #7
    3458:	4013      	ands	r3, r2
    345a:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    345c:	17c8      	asrs	r0, r1, #31
    345e:	0f40      	lsrs	r0, r0, #29
    3460:	1809      	adds	r1, r1, r0
    3462:	400a      	ands	r2, r1
    3464:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    3466:	3302      	adds	r3, #2
    3468:	009b      	lsls	r3, r3, #2
    346a:	59d9      	ldr	r1, [r3, r7]
    346c:	3202      	adds	r2, #2
    346e:	0093      	lsls	r3, r2, #2
    3470:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    3472:	2301      	movs	r3, #1
    3474:	425b      	negs	r3, r3
    3476:	469c      	mov	ip, r3
    3478:	44e1      	add	r9, ip
    347a:	464b      	mov	r3, r9
    347c:	2b00      	cmp	r3, #0
    347e:	dce4      	bgt.n	344a <busmanager_process_function+0x142>
			}

			--(data->request_count);
    3480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3482:	3b01      	subs	r3, #1
    3484:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    3486:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3488:	3301      	adds	r3, #1
    348a:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    348c:	17d9      	asrs	r1, r3, #31
    348e:	0f49      	lsrs	r1, r1, #29
    3490:	185b      	adds	r3, r3, r1
    3492:	2207      	movs	r2, #7
    3494:	4013      	ands	r3, r2
    3496:	1a5b      	subs	r3, r3, r1
    3498:	62bb      	str	r3, [r7, #40]	; 0x28
    349a:	e79c      	b.n	33d6 <busmanager_process_function+0xce>
    349c:	200005cc 	.word	0x200005cc
    34a0:	00003119 	.word	0x00003119
    34a4:	000020ed 	.word	0x000020ed
    34a8:	000032b5 	.word	0x000032b5
    34ac:	00003251 	.word	0x00003251
    34b0:	00003175 	.word	0x00003175
    34b4:	00002ced 	.word	0x00002ced

000034b8 <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    34b8:	b570      	push	{r4, r5, r6, lr}
    34ba:	0004      	movs	r4, r0
    34bc:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    34be:	480a      	ldr	r0, [pc, #40]	; (34e8 <busmanager_new_process+0x30>)
    34c0:	0013      	movs	r3, r2
    34c2:	000a      	movs	r2, r1
    34c4:	0001      	movs	r1, r0
    34c6:	0020      	movs	r0, r4
    34c8:	4e08      	ldr	r6, [pc, #32]	; (34ec <busmanager_new_process+0x34>)
    34ca:	47b0      	blx	r6
	proc->data.sercom = sercom;
    34cc:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    34ce:	9b04      	ldr	r3, [sp, #16]
    34d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    34d2:	2300      	movs	r3, #0
    34d4:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    34d6:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    34d8:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    34da:	0023      	movs	r3, r4
    34dc:	3328      	adds	r3, #40	; 0x28
    34de:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    34e0:	0020      	movs	r0, r4
    34e2:	4b03      	ldr	r3, [pc, #12]	; (34f0 <busmanager_new_process+0x38>)
    34e4:	4798      	blx	r3
}
    34e6:	bd70      	pop	{r4, r5, r6, pc}
    34e8:	00003309 	.word	0x00003309
    34ec:	00002dad 	.word	0x00002dad
    34f0:	00002e95 	.word	0x00002e95

000034f4 <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    34f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34f6:	0004      	movs	r4, r0
    34f8:	000d      	movs	r5, r1
    34fa:	9806      	ldr	r0, [sp, #24]
    34fc:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    34fe:	2600      	movs	r6, #0
    3500:	702a      	strb	r2, [r5, #0]
    3502:	0a17      	lsrs	r7, r2, #8
    3504:	706f      	strb	r7, [r5, #1]
    3506:	0c17      	lsrs	r7, r2, #16
    3508:	70af      	strb	r7, [r5, #2]
    350a:	0e12      	lsrs	r2, r2, #24
    350c:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    350e:	712b      	strb	r3, [r5, #4]
    3510:	0a1a      	lsrs	r2, r3, #8
    3512:	716a      	strb	r2, [r5, #5]
    3514:	0c1a      	lsrs	r2, r3, #16
    3516:	71aa      	strb	r2, [r5, #6]
    3518:	0e1b      	lsrs	r3, r3, #24
    351a:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    351c:	7228      	strb	r0, [r5, #8]
    351e:	0a03      	lsrs	r3, r0, #8
    3520:	726b      	strb	r3, [r5, #9]
    3522:	0c03      	lsrs	r3, r0, #16
    3524:	72ab      	strb	r3, [r5, #10]
    3526:	0e00      	lsrs	r0, r0, #24
    3528:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    352a:	7329      	strb	r1, [r5, #12]
    352c:	0a0b      	lsrs	r3, r1, #8
    352e:	736b      	strb	r3, [r5, #13]
    3530:	0c0b      	lsrs	r3, r1, #16
    3532:	73ab      	strb	r3, [r5, #14]
    3534:	0e09      	lsrs	r1, r1, #24
    3536:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    3538:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    353a:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    353c:	e007      	b.n	354e <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    353e:	0020      	movs	r0, r4
    3540:	3058      	adds	r0, #88	; 0x58
    3542:	2201      	movs	r2, #1
    3544:	2301      	movs	r3, #1
    3546:	4252      	negs	r2, r2
    3548:	2108      	movs	r1, #8
    354a:	4e0b      	ldr	r6, [pc, #44]	; (3578 <busmanager_request_transaction+0x84>)
    354c:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    354e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3550:	2b08      	cmp	r3, #8
    3552:	d0f4      	beq.n	353e <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    3554:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3556:	0011      	movs	r1, r2
    3558:	310c      	adds	r1, #12
    355a:	0089      	lsls	r1, r1, #2
    355c:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    355e:	3301      	adds	r3, #1
    3560:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    3562:	3201      	adds	r2, #1
    3564:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3566:	17d1      	asrs	r1, r2, #31
    3568:	0f49      	lsrs	r1, r1, #29
    356a:	1853      	adds	r3, r2, r1
    356c:	2207      	movs	r2, #7
    356e:	4013      	ands	r3, r2
    3570:	1a5b      	subs	r3, r3, r1
    3572:	6563      	str	r3, [r4, #84]	; 0x54
    3574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	00003119 	.word	0x00003119

0000357c <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    357c:	b5f0      	push	{r4, r5, r6, r7, lr}
    357e:	46de      	mov	lr, fp
    3580:	4657      	mov	r7, sl
    3582:	464e      	mov	r6, r9
    3584:	4645      	mov	r5, r8
    3586:	b5e0      	push	{r5, r6, r7, lr}
    3588:	b089      	sub	sp, #36	; 0x24
    358a:	0004      	movs	r4, r0
    358c:	000e      	movs	r6, r1
    358e:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    3590:	ab07      	add	r3, sp, #28
    3592:	2003      	movs	r0, #3
    3594:	4682      	mov	sl, r0
    3596:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    3598:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    359a:	2115      	movs	r1, #21
    359c:	a802      	add	r0, sp, #8
    359e:	4684      	mov	ip, r0
    35a0:	4461      	add	r1, ip
    35a2:	0a10      	lsrs	r0, r2, #8
    35a4:	7008      	strb	r0, [r1, #0]
    35a6:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    35a8:	7822      	ldrb	r2, [r4, #0]
    35aa:	7861      	ldrb	r1, [r4, #1]
    35ac:	0209      	lsls	r1, r1, #8
    35ae:	4311      	orrs	r1, r2
    35b0:	78a2      	ldrb	r2, [r4, #2]
    35b2:	0412      	lsls	r2, r2, #16
    35b4:	430a      	orrs	r2, r1
    35b6:	78e5      	ldrb	r5, [r4, #3]
    35b8:	062d      	lsls	r5, r5, #24
    35ba:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    35bc:	9604      	str	r6, [sp, #16]
    35be:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    35c0:	2128      	movs	r1, #40	; 0x28
    35c2:	4689      	mov	r9, r1
    35c4:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    35c6:	0100      	lsls	r0, r0, #4
    35c8:	4e24      	ldr	r6, [pc, #144]	; (365c <dma_eeprom_read+0xe0>)
    35ca:	1980      	adds	r0, r0, r6
    35cc:	4924      	ldr	r1, [pc, #144]	; (3660 <dma_eeprom_read+0xe4>)
    35ce:	468b      	mov	fp, r1
    35d0:	9103      	str	r1, [sp, #12]
    35d2:	4649      	mov	r1, r9
    35d4:	9102      	str	r1, [sp, #8]
    35d6:	9301      	str	r3, [sp, #4]
    35d8:	4651      	mov	r1, sl
    35da:	9100      	str	r1, [sp, #0]
    35dc:	2300      	movs	r3, #0
    35de:	2200      	movs	r2, #0
    35e0:	3902      	subs	r1, #2
    35e2:	4f20      	ldr	r7, [pc, #128]	; (3664 <dma_eeprom_read+0xe8>)
    35e4:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    35e6:	466b      	mov	r3, sp
    35e8:	8a9b      	ldrh	r3, [r3, #20]
    35ea:	4698      	mov	r8, r3
    35ec:	2300      	movs	r3, #0
    35ee:	9303      	str	r3, [sp, #12]
    35f0:	4649      	mov	r1, r9
    35f2:	9102      	str	r1, [sp, #8]
    35f4:	4b1c      	ldr	r3, [pc, #112]	; (3668 <dma_eeprom_read+0xec>)
    35f6:	9301      	str	r3, [sp, #4]
    35f8:	4641      	mov	r1, r8
    35fa:	9100      	str	r1, [sp, #0]
    35fc:	2300      	movs	r3, #0
    35fe:	2200      	movs	r2, #0
    3600:	2100      	movs	r1, #0
    3602:	4658      	mov	r0, fp
    3604:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3606:	9a04      	ldr	r2, [sp, #16]
    3608:	7850      	ldrb	r0, [r2, #1]
    360a:	0100      	lsls	r0, r0, #4
    360c:	1980      	adds	r0, r0, r6
    360e:	4917      	ldr	r1, [pc, #92]	; (366c <dma_eeprom_read+0xf0>)
    3610:	468b      	mov	fp, r1
    3612:	9103      	str	r1, [sp, #12]
    3614:	4b16      	ldr	r3, [pc, #88]	; (3670 <dma_eeprom_read+0xf4>)
    3616:	9302      	str	r3, [sp, #8]
    3618:	4649      	mov	r1, r9
    361a:	9101      	str	r1, [sp, #4]
    361c:	4651      	mov	r1, sl
    361e:	9100      	str	r1, [sp, #0]
    3620:	2300      	movs	r3, #0
    3622:	2200      	movs	r2, #0
    3624:	2100      	movs	r1, #0
    3626:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3628:	2300      	movs	r3, #0
    362a:	9303      	str	r3, [sp, #12]
    362c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    362e:	9302      	str	r3, [sp, #8]
    3630:	464b      	mov	r3, r9
    3632:	9301      	str	r3, [sp, #4]
    3634:	4643      	mov	r3, r8
    3636:	9300      	str	r3, [sp, #0]
    3638:	2300      	movs	r3, #0
    363a:	2201      	movs	r2, #1
    363c:	2100      	movs	r1, #0
    363e:	4658      	mov	r0, fp
    3640:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3642:	1d21      	adds	r1, r4, #4
    3644:	9a04      	ldr	r2, [sp, #16]
    3646:	0028      	movs	r0, r5
    3648:	4b0a      	ldr	r3, [pc, #40]	; (3674 <dma_eeprom_read+0xf8>)
    364a:	4798      	blx	r3
}
    364c:	b009      	add	sp, #36	; 0x24
    364e:	bcf0      	pop	{r4, r5, r6, r7}
    3650:	46bb      	mov	fp, r7
    3652:	46b2      	mov	sl, r6
    3654:	46a9      	mov	r9, r5
    3656:	46a0      	mov	r8, r4
    3658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    365a:	46c0      	nop			; (mov r8, r8)
    365c:	200003a0 	.word	0x200003a0
    3660:	20000630 	.word	0x20000630
    3664:	00001245 	.word	0x00001245
    3668:	000052cd 	.word	0x000052cd
    366c:	20000620 	.word	0x20000620
    3670:	20000274 	.word	0x20000274
    3674:	00003b11 	.word	0x00003b11

00003678 <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    3678:	b5f0      	push	{r4, r5, r6, r7, lr}
    367a:	46de      	mov	lr, fp
    367c:	4657      	mov	r7, sl
    367e:	464e      	mov	r6, r9
    3680:	4645      	mov	r5, r8
    3682:	b5e0      	push	{r5, r6, r7, lr}
    3684:	b089      	sub	sp, #36	; 0x24
    3686:	0004      	movs	r4, r0
    3688:	000e      	movs	r6, r1
    368a:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    368c:	ab07      	add	r3, sp, #28
    368e:	2102      	movs	r1, #2
    3690:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    3692:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    3694:	3113      	adds	r1, #19
    3696:	a802      	add	r0, sp, #8
    3698:	4684      	mov	ip, r0
    369a:	4461      	add	r1, ip
    369c:	0a10      	lsrs	r0, r2, #8
    369e:	7008      	strb	r0, [r1, #0]
    36a0:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    36a2:	7822      	ldrb	r2, [r4, #0]
    36a4:	7861      	ldrb	r1, [r4, #1]
    36a6:	0209      	lsls	r1, r1, #8
    36a8:	4311      	orrs	r1, r2
    36aa:	78a2      	ldrb	r2, [r4, #2]
    36ac:	0412      	lsls	r2, r2, #16
    36ae:	430a      	orrs	r2, r1
    36b0:	78e5      	ldrb	r5, [r4, #3]
    36b2:	062d      	lsls	r5, r5, #24
    36b4:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    36b6:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    36b8:	2228      	movs	r2, #40	; 0x28
    36ba:	4690      	mov	r8, r2
    36bc:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    36be:	0100      	lsls	r0, r0, #4
    36c0:	4a25      	ldr	r2, [pc, #148]	; (3758 <dma_eeprom_write+0xe0>)
    36c2:	4691      	mov	r9, r2
    36c4:	4448      	add	r0, r9
    36c6:	4a25      	ldr	r2, [pc, #148]	; (375c <dma_eeprom_write+0xe4>)
    36c8:	4693      	mov	fp, r2
    36ca:	9203      	str	r2, [sp, #12]
    36cc:	4642      	mov	r2, r8
    36ce:	9202      	str	r2, [sp, #8]
    36d0:	9301      	str	r3, [sp, #4]
    36d2:	2203      	movs	r2, #3
    36d4:	9200      	str	r2, [sp, #0]
    36d6:	2300      	movs	r3, #0
    36d8:	2200      	movs	r2, #0
    36da:	2101      	movs	r1, #1
    36dc:	4f20      	ldr	r7, [pc, #128]	; (3760 <dma_eeprom_write+0xe8>)
    36de:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    36e0:	466b      	mov	r3, sp
    36e2:	8a9b      	ldrh	r3, [r3, #20]
    36e4:	469a      	mov	sl, r3
    36e6:	2300      	movs	r3, #0
    36e8:	9303      	str	r3, [sp, #12]
    36ea:	4641      	mov	r1, r8
    36ec:	9102      	str	r1, [sp, #8]
    36ee:	9912      	ldr	r1, [sp, #72]	; 0x48
    36f0:	9101      	str	r1, [sp, #4]
    36f2:	4651      	mov	r1, sl
    36f4:	9100      	str	r1, [sp, #0]
    36f6:	2200      	movs	r2, #0
    36f8:	2101      	movs	r1, #1
    36fa:	4658      	mov	r0, fp
    36fc:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    36fe:	7870      	ldrb	r0, [r6, #1]
    3700:	0100      	lsls	r0, r0, #4
    3702:	4448      	add	r0, r9
    3704:	4917      	ldr	r1, [pc, #92]	; (3764 <dma_eeprom_write+0xec>)
    3706:	4689      	mov	r9, r1
    3708:	9103      	str	r1, [sp, #12]
    370a:	4917      	ldr	r1, [pc, #92]	; (3768 <dma_eeprom_write+0xf0>)
    370c:	468b      	mov	fp, r1
    370e:	9102      	str	r1, [sp, #8]
    3710:	4641      	mov	r1, r8
    3712:	9101      	str	r1, [sp, #4]
    3714:	2203      	movs	r2, #3
    3716:	9200      	str	r2, [sp, #0]
    3718:	2300      	movs	r3, #0
    371a:	2200      	movs	r2, #0
    371c:	2100      	movs	r1, #0
    371e:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3720:	2300      	movs	r3, #0
    3722:	9303      	str	r3, [sp, #12]
    3724:	465b      	mov	r3, fp
    3726:	9302      	str	r3, [sp, #8]
    3728:	4643      	mov	r3, r8
    372a:	9301      	str	r3, [sp, #4]
    372c:	4653      	mov	r3, sl
    372e:	9300      	str	r3, [sp, #0]
    3730:	2300      	movs	r3, #0
    3732:	2200      	movs	r2, #0
    3734:	2100      	movs	r1, #0
    3736:	4648      	mov	r0, r9
    3738:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    373a:	0020      	movs	r0, r4
    373c:	4b0b      	ldr	r3, [pc, #44]	; (376c <dma_eeprom_write+0xf4>)
    373e:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3740:	1d21      	adds	r1, r4, #4
    3742:	0032      	movs	r2, r6
    3744:	0028      	movs	r0, r5
    3746:	4b0a      	ldr	r3, [pc, #40]	; (3770 <dma_eeprom_write+0xf8>)
    3748:	4798      	blx	r3
}
    374a:	b009      	add	sp, #36	; 0x24
    374c:	bcf0      	pop	{r4, r5, r6, r7}
    374e:	46bb      	mov	fp, r7
    3750:	46b2      	mov	sl, r6
    3752:	46a9      	mov	r9, r5
    3754:	46a0      	mov	r8, r4
    3756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3758:	200003a0 	.word	0x200003a0
    375c:	20000630 	.word	0x20000630
    3760:	00001245 	.word	0x00001245
    3764:	20000620 	.word	0x20000620
    3768:	20000274 	.word	0x20000274
    376c:	000013b5 	.word	0x000013b5
    3770:	00003b11 	.word	0x00003b11

00003774 <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    3774:	b5f0      	push	{r4, r5, r6, r7, lr}
    3776:	b083      	sub	sp, #12
    3778:	0014      	movs	r4, r2
    377a:	001d      	movs	r5, r3
	switch (request->type) {
    377c:	2324      	movs	r3, #36	; 0x24
    377e:	5cd3      	ldrb	r3, [r2, r3]
    3780:	2b00      	cmp	r3, #0
    3782:	d004      	beq.n	378e <dma_eeprom_process_request+0x1a>
    3784:	2b01      	cmp	r3, #1
    3786:	d00a      	beq.n	379e <dma_eeprom_process_request+0x2a>
    3788:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    378a:	b003      	add	sp, #12
    378c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    378e:	69d3      	ldr	r3, [r2, #28]
    3790:	6992      	ldr	r2, [r2, #24]
    3792:	6a24      	ldr	r4, [r4, #32]
    3794:	9400      	str	r4, [sp, #0]
    3796:	4c1a      	ldr	r4, [pc, #104]	; (3800 <dma_eeprom_process_request+0x8c>)
    3798:	47a0      	blx	r4
	return true;
    379a:	2001      	movs	r0, #1
		break;
    379c:	e7f5      	b.n	378a <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    379e:	6992      	ldr	r2, [r2, #24]
    37a0:	69e6      	ldr	r6, [r4, #28]
    37a2:	1993      	adds	r3, r2, r6
    37a4:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    37a6:	233f      	movs	r3, #63	; 0x3f
    37a8:	0017      	movs	r7, r2
    37aa:	439f      	bics	r7, r3
    37ac:	003b      	movs	r3, r7
    37ae:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    37b0:	459c      	cmp	ip, r3
    37b2:	d300      	bcc.n	37b6 <dma_eeprom_process_request+0x42>
    37b4:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    37b6:	6a23      	ldr	r3, [r4, #32]
    37b8:	9300      	str	r3, [sp, #0]
    37ba:	0033      	movs	r3, r6
    37bc:	4f11      	ldr	r7, [pc, #68]	; (3804 <dma_eeprom_process_request+0x90>)
    37be:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    37c0:	4b11      	ldr	r3, [pc, #68]	; (3808 <dma_eeprom_process_request+0x94>)
    37c2:	4798      	blx	r3
    37c4:	4b11      	ldr	r3, [pc, #68]	; (380c <dma_eeprom_process_request+0x98>)
    37c6:	4798      	blx	r3
    37c8:	4b11      	ldr	r3, [pc, #68]	; (3810 <dma_eeprom_process_request+0x9c>)
    37ca:	4912      	ldr	r1, [pc, #72]	; (3814 <dma_eeprom_process_request+0xa0>)
    37cc:	4798      	blx	r3
    37ce:	4b12      	ldr	r3, [pc, #72]	; (3818 <dma_eeprom_process_request+0xa4>)
    37d0:	4798      	blx	r3
    37d2:	7428      	strb	r0, [r5, #16]
    37d4:	0a03      	lsrs	r3, r0, #8
    37d6:	746b      	strb	r3, [r5, #17]
    37d8:	0c03      	lsrs	r3, r0, #16
    37da:	74ab      	strb	r3, [r5, #18]
    37dc:	0e00      	lsrs	r0, r0, #24
    37de:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    37e0:	2301      	movs	r3, #1
    37e2:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    37e4:	69e3      	ldr	r3, [r4, #28]
    37e6:	1b9b      	subs	r3, r3, r6
    37e8:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    37ea:	d101      	bne.n	37f0 <dma_eeprom_process_request+0x7c>
	return true;
    37ec:	2001      	movs	r0, #1
    37ee:	e7cc      	b.n	378a <dma_eeprom_process_request+0x16>
				request->address += count;
    37f0:	69a3      	ldr	r3, [r4, #24]
    37f2:	199b      	adds	r3, r3, r6
    37f4:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    37f6:	6a23      	ldr	r3, [r4, #32]
    37f8:	199b      	adds	r3, r3, r6
    37fa:	6223      	str	r3, [r4, #32]
				return false;
    37fc:	2000      	movs	r0, #0
    37fe:	e7c4      	b.n	378a <dma_eeprom_process_request+0x16>
    3800:	0000357d 	.word	0x0000357d
    3804:	00003679 	.word	0x00003679
    3808:	000020ed 	.word	0x000020ed
    380c:	00004ea1 	.word	0x00004ea1
    3810:	00004159 	.word	0x00004159
    3814:	486a6000 	.word	0x486a6000
    3818:	00004129 	.word	0x00004129

0000381c <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    381c:	b530      	push	{r4, r5, lr}
    381e:	b083      	sub	sp, #12
    3820:	0014      	movs	r4, r2
    3822:	001a      	movs	r2, r3
    3824:	ab06      	add	r3, sp, #24
    3826:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3828:	2324      	movs	r3, #36	; 0x24
    382a:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    382c:	9b07      	ldr	r3, [sp, #28]
    382e:	618b      	str	r3, [r1, #24]
	request->count = count;
    3830:	9b08      	ldr	r3, [sp, #32]
    3832:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3836:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    3838:	4b03      	ldr	r3, [pc, #12]	; (3848 <eeprom_request+0x2c>)
    383a:	9301      	str	r3, [sp, #4]
    383c:	9100      	str	r1, [sp, #0]
    383e:	0023      	movs	r3, r4
    3840:	4c02      	ldr	r4, [pc, #8]	; (384c <eeprom_request+0x30>)
    3842:	47a0      	blx	r4
}
    3844:	b003      	add	sp, #12
    3846:	bd30      	pop	{r4, r5, pc}
    3848:	00003775 	.word	0x00003775
    384c:	000034f5 	.word	0x000034f5

00003850 <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    3850:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3852:	3015      	adds	r0, #21
    3854:	2300      	movs	r3, #0
    3856:	22ff      	movs	r2, #255	; 0xff
    3858:	2103      	movs	r1, #3
    385a:	4c01      	ldr	r4, [pc, #4]	; (3860 <eeprom_wait_until_done+0x10>)
    385c:	47a0      	blx	r4
    385e:	bd10      	pop	{r4, pc}
    3860:	00003119 	.word	0x00003119

00003864 <dma_imu_icm20948_read>:
void dma_imu_icm20948_read(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* writeback) {
    3864:	b5f0      	push	{r4, r5, r6, r7, lr}
    3866:	46de      	mov	lr, fp
    3868:	4657      	mov	r7, sl
    386a:	464e      	mov	r6, r9
    386c:	4645      	mov	r5, r8
    386e:	b5e0      	push	{r5, r6, r7, lr}
    3870:	b087      	sub	sp, #28
    3872:	0004      	movs	r4, r0
    3874:	000e      	movs	r6, r1
    3876:	9304      	str	r3, [sp, #16]
    3878:	2317      	movs	r3, #23
    387a:	446b      	add	r3, sp
    387c:	701a      	strb	r2, [r3, #0]
	address |= IMU_READ_MASK;
    387e:	b2d1      	uxtb	r1, r2
    3880:	2280      	movs	r2, #128	; 0x80
    3882:	4252      	negs	r2, r2
    3884:	430a      	orrs	r2, r1
    3886:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3888:	7802      	ldrb	r2, [r0, #0]
    388a:	7841      	ldrb	r1, [r0, #1]
    388c:	0209      	lsls	r1, r1, #8
    388e:	4311      	orrs	r1, r2
    3890:	7882      	ldrb	r2, [r0, #2]
    3892:	0412      	lsls	r2, r2, #16
    3894:	430a      	orrs	r2, r1
    3896:	78c5      	ldrb	r5, [r0, #3]
    3898:	062d      	lsls	r5, r5, #24
    389a:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    389c:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    389e:	2228      	movs	r2, #40	; 0x28
    38a0:	4691      	mov	r9, r2
    38a2:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    38a4:	0100      	lsls	r0, r0, #4
    38a6:	4a24      	ldr	r2, [pc, #144]	; (3938 <dma_imu_icm20948_read+0xd4>)
    38a8:	4692      	mov	sl, r2
    38aa:	4450      	add	r0, sl
    38ac:	4a23      	ldr	r2, [pc, #140]	; (393c <dma_imu_icm20948_read+0xd8>)
    38ae:	4693      	mov	fp, r2
    38b0:	9203      	str	r2, [sp, #12]
    38b2:	464a      	mov	r2, r9
    38b4:	9202      	str	r2, [sp, #8]
    38b6:	9301      	str	r3, [sp, #4]
    38b8:	2201      	movs	r2, #1
    38ba:	9200      	str	r2, [sp, #0]
    38bc:	2300      	movs	r3, #0
    38be:	2200      	movs	r2, #0
    38c0:	2100      	movs	r1, #0
    38c2:	4f1f      	ldr	r7, [pc, #124]	; (3940 <dma_imu_icm20948_read+0xdc>)
    38c4:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    38c6:	466b      	mov	r3, sp
    38c8:	8a1b      	ldrh	r3, [r3, #16]
    38ca:	4698      	mov	r8, r3
    38cc:	2300      	movs	r3, #0
    38ce:	9303      	str	r3, [sp, #12]
    38d0:	4649      	mov	r1, r9
    38d2:	9102      	str	r1, [sp, #8]
    38d4:	4b1b      	ldr	r3, [pc, #108]	; (3944 <dma_imu_icm20948_read+0xe0>)
    38d6:	9301      	str	r3, [sp, #4]
    38d8:	4641      	mov	r1, r8
    38da:	9100      	str	r1, [sp, #0]
    38dc:	2300      	movs	r3, #0
    38de:	2200      	movs	r2, #0
    38e0:	2100      	movs	r1, #0
    38e2:	4658      	mov	r0, fp
    38e4:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    38e6:	7870      	ldrb	r0, [r6, #1]
    38e8:	0100      	lsls	r0, r0, #4
    38ea:	4450      	add	r0, sl
    38ec:	4916      	ldr	r1, [pc, #88]	; (3948 <dma_imu_icm20948_read+0xe4>)
    38ee:	468b      	mov	fp, r1
    38f0:	9103      	str	r1, [sp, #12]
    38f2:	4b16      	ldr	r3, [pc, #88]	; (394c <dma_imu_icm20948_read+0xe8>)
    38f4:	9302      	str	r3, [sp, #8]
    38f6:	4649      	mov	r1, r9
    38f8:	9101      	str	r1, [sp, #4]
    38fa:	2201      	movs	r2, #1
    38fc:	9200      	str	r2, [sp, #0]
    38fe:	2300      	movs	r3, #0
    3900:	2200      	movs	r2, #0
    3902:	2100      	movs	r1, #0
    3904:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3906:	2300      	movs	r3, #0
    3908:	9303      	str	r3, [sp, #12]
    390a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    390c:	9302      	str	r3, [sp, #8]
    390e:	464b      	mov	r3, r9
    3910:	9301      	str	r3, [sp, #4]
    3912:	4643      	mov	r3, r8
    3914:	9300      	str	r3, [sp, #0]
    3916:	2300      	movs	r3, #0
    3918:	2201      	movs	r2, #1
    391a:	2100      	movs	r1, #0
    391c:	4658      	mov	r0, fp
    391e:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3920:	1d21      	adds	r1, r4, #4
    3922:	0032      	movs	r2, r6
    3924:	0028      	movs	r0, r5
    3926:	4b0a      	ldr	r3, [pc, #40]	; (3950 <dma_imu_icm20948_read+0xec>)
    3928:	4798      	blx	r3
}
    392a:	b007      	add	sp, #28
    392c:	bcf0      	pop	{r4, r5, r6, r7}
    392e:	46bb      	mov	fp, r7
    3930:	46b2      	mov	sl, r6
    3932:	46a9      	mov	r9, r5
    3934:	46a0      	mov	r8, r4
    3936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3938:	200003a0 	.word	0x200003a0
    393c:	20000630 	.word	0x20000630
    3940:	00001245 	.word	0x00001245
    3944:	000052cd 	.word	0x000052cd
    3948:	20000620 	.word	0x20000620
    394c:	20000274 	.word	0x20000274
    3950:	00003b11 	.word	0x00003b11

00003954 <dma_imu_icm20948_write>:
void dma_imu_icm20948_write(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* data) {
    3954:	b5f0      	push	{r4, r5, r6, r7, lr}
    3956:	46de      	mov	lr, fp
    3958:	4657      	mov	r7, sl
    395a:	464e      	mov	r6, r9
    395c:	4645      	mov	r5, r8
    395e:	b5e0      	push	{r5, r6, r7, lr}
    3960:	b087      	sub	sp, #28
    3962:	0004      	movs	r4, r0
    3964:	000e      	movs	r6, r1
    3966:	9304      	str	r3, [sp, #16]
    3968:	2317      	movs	r3, #23
    396a:	446b      	add	r3, sp
    396c:	701a      	strb	r2, [r3, #0]
	address &= IMU_WRITE_MASK;
    396e:	b2d1      	uxtb	r1, r2
    3970:	227f      	movs	r2, #127	; 0x7f
    3972:	400a      	ands	r2, r1
    3974:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3976:	7802      	ldrb	r2, [r0, #0]
    3978:	7841      	ldrb	r1, [r0, #1]
    397a:	0209      	lsls	r1, r1, #8
    397c:	4311      	orrs	r1, r2
    397e:	7882      	ldrb	r2, [r0, #2]
    3980:	0412      	lsls	r2, r2, #16
    3982:	430a      	orrs	r2, r1
    3984:	78c5      	ldrb	r5, [r0, #3]
    3986:	062d      	lsls	r5, r5, #24
    3988:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    398a:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    398c:	2228      	movs	r2, #40	; 0x28
    398e:	4690      	mov	r8, r2
    3990:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3992:	0100      	lsls	r0, r0, #4
    3994:	4a24      	ldr	r2, [pc, #144]	; (3a28 <dma_imu_icm20948_write+0xd4>)
    3996:	4691      	mov	r9, r2
    3998:	4448      	add	r0, r9
    399a:	4a24      	ldr	r2, [pc, #144]	; (3a2c <dma_imu_icm20948_write+0xd8>)
    399c:	4693      	mov	fp, r2
    399e:	9203      	str	r2, [sp, #12]
    39a0:	4642      	mov	r2, r8
    39a2:	9202      	str	r2, [sp, #8]
    39a4:	9301      	str	r3, [sp, #4]
    39a6:	2201      	movs	r2, #1
    39a8:	9200      	str	r2, [sp, #0]
    39aa:	2300      	movs	r3, #0
    39ac:	2200      	movs	r2, #0
    39ae:	2100      	movs	r1, #0
    39b0:	4f1f      	ldr	r7, [pc, #124]	; (3a30 <dma_imu_icm20948_write+0xdc>)
    39b2:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    39b4:	466b      	mov	r3, sp
    39b6:	8a1b      	ldrh	r3, [r3, #16]
    39b8:	469a      	mov	sl, r3
    39ba:	2300      	movs	r3, #0
    39bc:	9303      	str	r3, [sp, #12]
    39be:	4641      	mov	r1, r8
    39c0:	9102      	str	r1, [sp, #8]
    39c2:	9910      	ldr	r1, [sp, #64]	; 0x40
    39c4:	9101      	str	r1, [sp, #4]
    39c6:	4651      	mov	r1, sl
    39c8:	9100      	str	r1, [sp, #0]
    39ca:	2200      	movs	r2, #0
    39cc:	2101      	movs	r1, #1
    39ce:	4658      	mov	r0, fp
    39d0:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    39d2:	7870      	ldrb	r0, [r6, #1]
    39d4:	0100      	lsls	r0, r0, #4
    39d6:	4448      	add	r0, r9
    39d8:	4916      	ldr	r1, [pc, #88]	; (3a34 <dma_imu_icm20948_write+0xe0>)
    39da:	4689      	mov	r9, r1
    39dc:	9103      	str	r1, [sp, #12]
    39de:	4916      	ldr	r1, [pc, #88]	; (3a38 <dma_imu_icm20948_write+0xe4>)
    39e0:	468b      	mov	fp, r1
    39e2:	9102      	str	r1, [sp, #8]
    39e4:	4641      	mov	r1, r8
    39e6:	9101      	str	r1, [sp, #4]
    39e8:	2201      	movs	r2, #1
    39ea:	9200      	str	r2, [sp, #0]
    39ec:	2300      	movs	r3, #0
    39ee:	2200      	movs	r2, #0
    39f0:	2100      	movs	r1, #0
    39f2:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    39f4:	2300      	movs	r3, #0
    39f6:	9303      	str	r3, [sp, #12]
    39f8:	465b      	mov	r3, fp
    39fa:	9302      	str	r3, [sp, #8]
    39fc:	4643      	mov	r3, r8
    39fe:	9301      	str	r3, [sp, #4]
    3a00:	4653      	mov	r3, sl
    3a02:	9300      	str	r3, [sp, #0]
    3a04:	2300      	movs	r3, #0
    3a06:	2200      	movs	r2, #0
    3a08:	2100      	movs	r1, #0
    3a0a:	4648      	mov	r0, r9
    3a0c:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3a0e:	1d21      	adds	r1, r4, #4
    3a10:	0032      	movs	r2, r6
    3a12:	0028      	movs	r0, r5
    3a14:	4b09      	ldr	r3, [pc, #36]	; (3a3c <dma_imu_icm20948_write+0xe8>)
    3a16:	4798      	blx	r3
}
    3a18:	b007      	add	sp, #28
    3a1a:	bcf0      	pop	{r4, r5, r6, r7}
    3a1c:	46bb      	mov	fp, r7
    3a1e:	46b2      	mov	sl, r6
    3a20:	46a9      	mov	r9, r5
    3a22:	46a0      	mov	r8, r4
    3a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a26:	46c0      	nop			; (mov r8, r8)
    3a28:	200003a0 	.word	0x200003a0
    3a2c:	20000630 	.word	0x20000630
    3a30:	00001245 	.word	0x00001245
    3a34:	20000620 	.word	0x20000620
    3a38:	20000274 	.word	0x20000274
    3a3c:	00003b11 	.word	0x00003b11

00003a40 <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    3a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a42:	b085      	sub	sp, #20
    3a44:	0005      	movs	r5, r0
    3a46:	000e      	movs	r6, r1
    3a48:	0014      	movs	r4, r2
	IMU_ON_BUS();
    3a4a:	2180      	movs	r1, #128	; 0x80
    3a4c:	0389      	lsls	r1, r1, #14
    3a4e:	2000      	movs	r0, #0
    3a50:	4b17      	ldr	r3, [pc, #92]	; (3ab0 <dma_imu_icm20948_process_request+0x70>)
    3a52:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    3a54:	2325      	movs	r3, #37	; 0x25
    3a56:	5ce3      	ldrb	r3, [r4, r3]
    3a58:	011b      	lsls	r3, r3, #4
    3a5a:	220f      	movs	r2, #15
    3a5c:	446a      	add	r2, sp
    3a5e:	7013      	strb	r3, [r2, #0]
	dma_imu_icm20948_write(imudesc, dmadesc, REG_BANK_SEL, 1, &bank);
    3a60:	9200      	str	r2, [sp, #0]
    3a62:	2301      	movs	r3, #1
    3a64:	227f      	movs	r2, #127	; 0x7f
    3a66:	0031      	movs	r1, r6
    3a68:	0028      	movs	r0, r5
    3a6a:	4f12      	ldr	r7, [pc, #72]	; (3ab4 <dma_imu_icm20948_process_request+0x74>)
    3a6c:	47b8      	blx	r7
	switch (request->type) {
    3a6e:	2324      	movs	r3, #36	; 0x24
    3a70:	5ce3      	ldrb	r3, [r4, r3]
    3a72:	2b00      	cmp	r3, #0
    3a74:	d009      	beq.n	3a8a <dma_imu_icm20948_process_request+0x4a>
    3a76:	2b01      	cmp	r3, #1
    3a78:	d010      	beq.n	3a9c <dma_imu_icm20948_process_request+0x5c>
	IMU_OFF_BUS();
    3a7a:	2180      	movs	r1, #128	; 0x80
    3a7c:	0389      	lsls	r1, r1, #14
    3a7e:	2000      	movs	r0, #0
    3a80:	4b0d      	ldr	r3, [pc, #52]	; (3ab8 <dma_imu_icm20948_process_request+0x78>)
    3a82:	4798      	blx	r3
}
    3a84:	2001      	movs	r0, #1
    3a86:	b005      	add	sp, #20
    3a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dma_imu_icm20948_read(imudesc, dmadesc, request->address, request->count, request->data);
    3a8a:	69e3      	ldr	r3, [r4, #28]
    3a8c:	7e22      	ldrb	r2, [r4, #24]
    3a8e:	6a21      	ldr	r1, [r4, #32]
    3a90:	9100      	str	r1, [sp, #0]
    3a92:	0031      	movs	r1, r6
    3a94:	0028      	movs	r0, r5
    3a96:	4c09      	ldr	r4, [pc, #36]	; (3abc <dma_imu_icm20948_process_request+0x7c>)
    3a98:	47a0      	blx	r4
		break;
    3a9a:	e7ee      	b.n	3a7a <dma_imu_icm20948_process_request+0x3a>
		dma_imu_icm20948_write(imudesc, dmadesc, request->address, request->count, request->data);
    3a9c:	69e3      	ldr	r3, [r4, #28]
    3a9e:	7e22      	ldrb	r2, [r4, #24]
    3aa0:	6a21      	ldr	r1, [r4, #32]
    3aa2:	9100      	str	r1, [sp, #0]
    3aa4:	0031      	movs	r1, r6
    3aa6:	0028      	movs	r0, r5
    3aa8:	4c02      	ldr	r4, [pc, #8]	; (3ab4 <dma_imu_icm20948_process_request+0x74>)
    3aaa:	47a0      	blx	r4
		break;
    3aac:	e7e5      	b.n	3a7a <dma_imu_icm20948_process_request+0x3a>
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	00001aa5 	.word	0x00001aa5
    3ab4:	00003955 	.word	0x00003955
    3ab8:	00001ab5 	.word	0x00001ab5
    3abc:	00003865 	.word	0x00003865

00003ac0 <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    3ac0:	b570      	push	{r4, r5, r6, lr}
    3ac2:	b082      	sub	sp, #8
    3ac4:	0014      	movs	r4, r2
    3ac6:	001a      	movs	r2, r3
    3ac8:	ab06      	add	r3, sp, #24
    3aca:	781e      	ldrb	r6, [r3, #0]
    3acc:	ab07      	add	r3, sp, #28
    3ace:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3ad0:	2324      	movs	r3, #36	; 0x24
    3ad2:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    3ad4:	9b08      	ldr	r3, [sp, #32]
    3ad6:	618b      	str	r3, [r1, #24]
	request->count = count;
    3ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ada:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ade:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    3ae0:	2325      	movs	r3, #37	; 0x25
    3ae2:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    3ae4:	4b03      	ldr	r3, [pc, #12]	; (3af4 <imu_icm20948_request+0x34>)
    3ae6:	9301      	str	r3, [sp, #4]
    3ae8:	9100      	str	r1, [sp, #0]
    3aea:	0023      	movs	r3, r4
    3aec:	4c02      	ldr	r4, [pc, #8]	; (3af8 <imu_icm20948_request+0x38>)
    3aee:	47a0      	blx	r4
}
    3af0:	b002      	add	sp, #8
    3af2:	bd70      	pop	{r4, r5, r6, pc}
    3af4:	00003a41 	.word	0x00003a41
    3af8:	000034f5 	.word	0x000034f5

00003afc <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    3afc:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3afe:	3015      	adds	r0, #21
    3b00:	2300      	movs	r3, #0
    3b02:	22ff      	movs	r2, #255	; 0xff
    3b04:	2103      	movs	r1, #3
    3b06:	4c01      	ldr	r4, [pc, #4]	; (3b0c <imu_icm20948_wait_until_done+0x10>)
    3b08:	47a0      	blx	r4
}
    3b0a:	bd10      	pop	{r4, pc}
    3b0c:	00003119 	.word	0x00003119

00003b10 <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    3b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b12:	0007      	movs	r7, r0
    3b14:	000d      	movs	r5, r1
    3b16:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    3b18:	7810      	ldrb	r0, [r2, #0]
    3b1a:	4e1c      	ldr	r6, [pc, #112]	; (3b8c <dma_spi_transaction+0x7c>)
    3b1c:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3b1e:	7860      	ldrb	r0, [r4, #1]
    3b20:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    3b22:	0038      	movs	r0, r7
    3b24:	4b1a      	ldr	r3, [pc, #104]	; (3b90 <dma_spi_transaction+0x80>)
    3b26:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    3b28:	7923      	ldrb	r3, [r4, #4]
    3b2a:	78e2      	ldrb	r2, [r4, #3]
    3b2c:	7820      	ldrb	r0, [r4, #0]
    3b2e:	2102      	movs	r1, #2
    3b30:	4f18      	ldr	r7, [pc, #96]	; (3b94 <dma_spi_transaction+0x84>)
    3b32:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    3b34:	7923      	ldrb	r3, [r4, #4]
    3b36:	78a2      	ldrb	r2, [r4, #2]
    3b38:	7860      	ldrb	r0, [r4, #1]
    3b3a:	2102      	movs	r1, #2
    3b3c:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    3b3e:	782b      	ldrb	r3, [r5, #0]
    3b40:	786a      	ldrb	r2, [r5, #1]
    3b42:	0212      	lsls	r2, r2, #8
    3b44:	431a      	orrs	r2, r3
    3b46:	78ab      	ldrb	r3, [r5, #2]
    3b48:	041b      	lsls	r3, r3, #16
    3b4a:	4313      	orrs	r3, r2
    3b4c:	78e9      	ldrb	r1, [r5, #3]
    3b4e:	0609      	lsls	r1, r1, #24
    3b50:	4319      	orrs	r1, r3
    3b52:	7928      	ldrb	r0, [r5, #4]
    3b54:	4b10      	ldr	r3, [pc, #64]	; (3b98 <dma_spi_transaction+0x88>)
    3b56:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    3b58:	7820      	ldrb	r0, [r4, #0]
    3b5a:	4f10      	ldr	r7, [pc, #64]	; (3b9c <dma_spi_transaction+0x8c>)
    3b5c:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    3b5e:	7860      	ldrb	r0, [r4, #1]
    3b60:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    3b62:	7860      	ldrb	r0, [r4, #1]
    3b64:	4b0e      	ldr	r3, [pc, #56]	; (3ba0 <dma_spi_transaction+0x90>)
    3b66:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    3b68:	7820      	ldrb	r0, [r4, #0]
    3b6a:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3b6c:	7860      	ldrb	r0, [r4, #1]
    3b6e:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    3b70:	782b      	ldrb	r3, [r5, #0]
    3b72:	786a      	ldrb	r2, [r5, #1]
    3b74:	0212      	lsls	r2, r2, #8
    3b76:	431a      	orrs	r2, r3
    3b78:	78ab      	ldrb	r3, [r5, #2]
    3b7a:	041b      	lsls	r3, r3, #16
    3b7c:	4313      	orrs	r3, r2
    3b7e:	78e9      	ldrb	r1, [r5, #3]
    3b80:	0609      	lsls	r1, r1, #24
    3b82:	4319      	orrs	r1, r3
    3b84:	7928      	ldrb	r0, [r5, #4]
    3b86:	4b07      	ldr	r3, [pc, #28]	; (3ba4 <dma_spi_transaction+0x94>)
    3b88:	4798      	blx	r3
    3b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b8c:	00001325 	.word	0x00001325
    3b90:	00001fa5 	.word	0x00001fa5
    3b94:	000012b1 	.word	0x000012b1
    3b98:	00001ab5 	.word	0x00001ab5
    3b9c:	000012fd 	.word	0x000012fd
    3ba0:	00003bc1 	.word	0x00003bc1
    3ba4:	00001aa5 	.word	0x00001aa5

00003ba8 <rtos_dma_wait_until_end_callback>:
#include "rtos_dma.h"
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3ba8:	4b03      	ldr	r3, [pc, #12]	; (3bb8 <rtos_dma_wait_until_end_callback+0x10>)
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	6a1b      	ldr	r3, [r3, #32]
    3bae:	7819      	ldrb	r1, [r3, #0]
    3bb0:	4a02      	ldr	r2, [pc, #8]	; (3bbc <rtos_dma_wait_until_end_callback+0x14>)
    3bb2:	233f      	movs	r3, #63	; 0x3f
    3bb4:	54d1      	strb	r1, [r2, r3]
}
    3bb6:	4770      	bx	lr
    3bb8:	200005cc 	.word	0x200005cc
    3bbc:	41004800 	.word	0x41004800

00003bc0 <rtos_dma_wait_until_end>:

void rtos_dma_wait_until_end(int channel) {
    3bc0:	b570      	push	{r4, r5, r6, lr}
    3bc2:	b084      	sub	sp, #16
    3bc4:	9003      	str	r0, [sp, #12]
	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    3bc6:	4c08      	ldr	r4, [pc, #32]	; (3be8 <rtos_dma_wait_until_end+0x28>)
    3bc8:	6823      	ldr	r3, [r4, #0]
    3bca:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    3bcc:	aa03      	add	r2, sp, #12
    3bce:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    3bd0:	4b06      	ldr	r3, [pc, #24]	; (3bec <rtos_dma_wait_until_end+0x2c>)
    3bd2:	9300      	str	r3, [sp, #0]
    3bd4:	2300      	movs	r3, #0
    3bd6:	2202      	movs	r2, #2
    3bd8:	2102      	movs	r1, #2
    3bda:	4805      	ldr	r0, [pc, #20]	; (3bf0 <rtos_dma_wait_until_end+0x30>)
    3bdc:	4e05      	ldr	r6, [pc, #20]	; (3bf4 <rtos_dma_wait_until_end+0x34>)
    3bde:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_callback);
	current_process->data = data;
    3be0:	6823      	ldr	r3, [r4, #0]
    3be2:	621d      	str	r5, [r3, #32]
    3be4:	b004      	add	sp, #16
    3be6:	bd70      	pop	{r4, r5, r6, pc}
    3be8:	200005cc 	.word	0x200005cc
    3bec:	00003ba9 	.word	0x00003ba9
    3bf0:	4100484e 	.word	0x4100484e
    3bf4:	00003175 	.word	0x00003175

00003bf8 <rtos_uart_start_send_buffer>:
#include "rtos_uart.h"
#include "Drivers/sercom.h"
#include "rtos_dma.h"

bool rtos_uart_start_send_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bfa:	b087      	sub	sp, #28
    3bfc:	0005      	movs	r5, r0
    3bfe:	000c      	movs	r4, r1
    3c00:	0016      	movs	r6, r2
    3c02:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3c04:	4b12      	ldr	r3, [pc, #72]	; (3c50 <rtos_uart_start_send_buffer+0x58>)
    3c06:	4798      	blx	r3
    3c08:	1e07      	subs	r7, r0, #0
    3c0a:	d102      	bne.n	3c12 <rtos_uart_start_send_buffer+0x1a>
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->txchannel);

    return true;
}
    3c0c:	0038      	movs	r0, r7
    3c0e:	b007      	add	sp, #28
    3c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3c12:	7820      	ldrb	r0, [r4, #0]
    buffer, &(sercom->USART_INT.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
    3c14:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3c16:	0100      	lsls	r0, r0, #4
    3c18:	4b0e      	ldr	r3, [pc, #56]	; (3c54 <rtos_uart_start_send_buffer+0x5c>)
    3c1a:	18c0      	adds	r0, r0, r3
    3c1c:	2300      	movs	r3, #0
    3c1e:	9303      	str	r3, [sp, #12]
    3c20:	9502      	str	r5, [sp, #8]
    3c22:	9601      	str	r6, [sp, #4]
    3c24:	466b      	mov	r3, sp
    3c26:	8a9e      	ldrh	r6, [r3, #20]
    3c28:	9600      	str	r6, [sp, #0]
    3c2a:	2300      	movs	r3, #0
    3c2c:	2200      	movs	r2, #0
    3c2e:	2101      	movs	r1, #1
    3c30:	4d09      	ldr	r5, [pc, #36]	; (3c58 <rtos_uart_start_send_buffer+0x60>)
    3c32:	47a8      	blx	r5
	dma_disable_channel(dmadesc->txchannel);
    3c34:	7820      	ldrb	r0, [r4, #0]
    3c36:	4b09      	ldr	r3, [pc, #36]	; (3c5c <rtos_uart_start_send_buffer+0x64>)
    3c38:	4798      	blx	r3
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    3c3a:	7923      	ldrb	r3, [r4, #4]
    3c3c:	78e2      	ldrb	r2, [r4, #3]
    3c3e:	7820      	ldrb	r0, [r4, #0]
    3c40:	2102      	movs	r1, #2
    3c42:	4d07      	ldr	r5, [pc, #28]	; (3c60 <rtos_uart_start_send_buffer+0x68>)
    3c44:	47a8      	blx	r5
	dma_enable_channel(dmadesc->txchannel);
    3c46:	7820      	ldrb	r0, [r4, #0]
    3c48:	4b06      	ldr	r3, [pc, #24]	; (3c64 <rtos_uart_start_send_buffer+0x6c>)
    3c4a:	4798      	blx	r3
    return true;
    3c4c:	e7de      	b.n	3c0c <rtos_uart_start_send_buffer+0x14>
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	00001da1 	.word	0x00001da1
    3c54:	200003a0 	.word	0x200003a0
    3c58:	00001245 	.word	0x00001245
    3c5c:	00001325 	.word	0x00001325
    3c60:	000012b1 	.word	0x000012b1
    3c64:	000012fd 	.word	0x000012fd

00003c68 <rtos_uart_wait_until_send_complete>:

void rtos_uart_wait_until_send_complete(DMA_Descriptor* dmadesc) {
    3c68:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->txchannel);
    3c6a:	7800      	ldrb	r0, [r0, #0]
    3c6c:	4b01      	ldr	r3, [pc, #4]	; (3c74 <rtos_uart_wait_until_send_complete+0xc>)
    3c6e:	4798      	blx	r3
}
    3c70:	bd10      	pop	{r4, pc}
    3c72:	46c0      	nop			; (mov r8, r8)
    3c74:	00003bc1 	.word	0x00003bc1

00003c78 <rtos_uart_start_read_buffer>:


bool rtos_uart_start_read_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c7a:	b087      	sub	sp, #28
    3c7c:	0005      	movs	r5, r0
    3c7e:	000c      	movs	r4, r1
    3c80:	0016      	movs	r6, r2
    3c82:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3c84:	4b12      	ldr	r3, [pc, #72]	; (3cd0 <rtos_uart_start_read_buffer+0x58>)
    3c86:	4798      	blx	r3
    3c88:	1e07      	subs	r7, r0, #0
    3c8a:	d102      	bne.n	3c92 <rtos_uart_start_read_buffer+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
}
    3c8c:	0038      	movs	r0, r7
    3c8e:	b007      	add	sp, #28
    3c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3c92:	7860      	ldrb	r0, [r4, #1]
    &(sercom->USART_INT.SERCOM_DATA), buffer, DMA_NEXTDESCRIPTOR_NONE);
    3c94:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3c96:	0100      	lsls	r0, r0, #4
    3c98:	4b0e      	ldr	r3, [pc, #56]	; (3cd4 <rtos_uart_start_read_buffer+0x5c>)
    3c9a:	18c0      	adds	r0, r0, r3
    3c9c:	2300      	movs	r3, #0
    3c9e:	9303      	str	r3, [sp, #12]
    3ca0:	9602      	str	r6, [sp, #8]
    3ca2:	9501      	str	r5, [sp, #4]
    3ca4:	466b      	mov	r3, sp
    3ca6:	8a9e      	ldrh	r6, [r3, #20]
    3ca8:	9600      	str	r6, [sp, #0]
    3caa:	2300      	movs	r3, #0
    3cac:	2201      	movs	r2, #1
    3cae:	2100      	movs	r1, #0
    3cb0:	4d09      	ldr	r5, [pc, #36]	; (3cd8 <rtos_uart_start_read_buffer+0x60>)
    3cb2:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    3cb4:	7860      	ldrb	r0, [r4, #1]
    3cb6:	4b09      	ldr	r3, [pc, #36]	; (3cdc <rtos_uart_start_read_buffer+0x64>)
    3cb8:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    3cba:	7923      	ldrb	r3, [r4, #4]
    3cbc:	78a2      	ldrb	r2, [r4, #2]
    3cbe:	7860      	ldrb	r0, [r4, #1]
    3cc0:	2102      	movs	r1, #2
    3cc2:	4d07      	ldr	r5, [pc, #28]	; (3ce0 <rtos_uart_start_read_buffer+0x68>)
    3cc4:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    3cc6:	7860      	ldrb	r0, [r4, #1]
    3cc8:	4b06      	ldr	r3, [pc, #24]	; (3ce4 <rtos_uart_start_read_buffer+0x6c>)
    3cca:	4798      	blx	r3
    return true;
    3ccc:	e7de      	b.n	3c8c <rtos_uart_start_read_buffer+0x14>
    3cce:	46c0      	nop			; (mov r8, r8)
    3cd0:	00001da1 	.word	0x00001da1
    3cd4:	200003a0 	.word	0x200003a0
    3cd8:	00001245 	.word	0x00001245
    3cdc:	00001325 	.word	0x00001325
    3ce0:	000012b1 	.word	0x000012b1
    3ce4:	000012fd 	.word	0x000012fd

00003ce8 <rtos_uart_wait_until_read_complete>:

void rtos_uart_wait_until_read_complete(DMA_Descriptor* dmadesc) {
    3ce8:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->rxchannel);
    3cea:	7840      	ldrb	r0, [r0, #1]
    3cec:	4b01      	ldr	r3, [pc, #4]	; (3cf4 <rtos_uart_wait_until_read_complete+0xc>)
    3cee:	4798      	blx	r3
    3cf0:	bd10      	pop	{r4, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	00003bc1 	.word	0x00003bc1

00003cf8 <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    3cf8:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    3cfa:	4b25      	ldr	r3, [pc, #148]	; (3d90 <usb_proc_loop+0x98>)
    3cfc:	2200      	movs	r2, #0
    3cfe:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    3d00:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    3d02:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    3d04:	70da      	strb	r2, [r3, #3]
    3d06:	e00f      	b.n	3d28 <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    3d08:	4c21      	ldr	r4, [pc, #132]	; (3d90 <usb_proc_loop+0x98>)
    3d0a:	68e0      	ldr	r0, [r4, #12]
    3d0c:	18c0      	adds	r0, r0, r3
    3d0e:	4b21      	ldr	r3, [pc, #132]	; (3d94 <usb_proc_loop+0x9c>)
    3d10:	4798      	blx	r3
    3d12:	68a3      	ldr	r3, [r4, #8]
    3d14:	181b      	adds	r3, r3, r0
    3d16:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    3d18:	4b1d      	ldr	r3, [pc, #116]	; (3d90 <usb_proc_loop+0x98>)
    3d1a:	78db      	ldrb	r3, [r3, #3]
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d003      	beq.n	3d28 <usb_proc_loop+0x30>
    3d20:	4b1d      	ldr	r3, [pc, #116]	; (3d98 <usb_proc_loop+0xa0>)
    3d22:	681b      	ldr	r3, [r3, #0]
    3d24:	2b00      	cmp	r3, #0
    3d26:	d11f      	bne.n	3d68 <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    3d28:	4c19      	ldr	r4, [pc, #100]	; (3d90 <usb_proc_loop+0x98>)
    3d2a:	2301      	movs	r3, #1
    3d2c:	22ff      	movs	r2, #255	; 0xff
    3d2e:	2100      	movs	r1, #0
    3d30:	0020      	movs	r0, r4
    3d32:	4d1a      	ldr	r5, [pc, #104]	; (3d9c <usb_proc_loop+0xa4>)
    3d34:	47a8      	blx	r5
		usb_interrupt = false;
    3d36:	2300      	movs	r3, #0
    3d38:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    3d3a:	7863      	ldrb	r3, [r4, #1]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d125      	bne.n	3d8c <usb_proc_loop+0x94>
		usb_handle_function();
    3d40:	4b17      	ldr	r3, [pc, #92]	; (3da0 <usb_proc_loop+0xa8>)
    3d42:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    3d44:	4b12      	ldr	r3, [pc, #72]	; (3d90 <usb_proc_loop+0x98>)
    3d46:	789b      	ldrb	r3, [r3, #2]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d0e5      	beq.n	3d18 <usb_proc_loop+0x20>
    3d4c:	4b15      	ldr	r3, [pc, #84]	; (3da4 <usb_proc_loop+0xac>)
    3d4e:	781b      	ldrb	r3, [r3, #0]
    3d50:	2b00      	cmp	r3, #0
    3d52:	d1e1      	bne.n	3d18 <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    3d54:	4b0e      	ldr	r3, [pc, #56]	; (3d90 <usb_proc_loop+0x98>)
    3d56:	685a      	ldr	r2, [r3, #4]
    3d58:	689b      	ldr	r3, [r3, #8]
    3d5a:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    3d5c:	429a      	cmp	r2, r3
    3d5e:	d1d3      	bne.n	3d08 <usb_proc_loop+0x10>
    3d60:	4b0b      	ldr	r3, [pc, #44]	; (3d90 <usb_proc_loop+0x98>)
    3d62:	2200      	movs	r2, #0
    3d64:	709a      	strb	r2, [r3, #2]
    3d66:	e7d7      	b.n	3d18 <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    3d68:	4b0b      	ldr	r3, [pc, #44]	; (3d98 <usb_proc_loop+0xa0>)
    3d6a:	6819      	ldr	r1, [r3, #0]
    3d6c:	4c08      	ldr	r4, [pc, #32]	; (3d90 <usb_proc_loop+0x98>)
    3d6e:	6920      	ldr	r0, [r4, #16]
    3d70:	6963      	ldr	r3, [r4, #20]
    3d72:	18c0      	adds	r0, r0, r3
    3d74:	4b0c      	ldr	r3, [pc, #48]	; (3da8 <usb_proc_loop+0xb0>)
    3d76:	4798      	blx	r3
    3d78:	6963      	ldr	r3, [r4, #20]
    3d7a:	18c0      	adds	r0, r0, r3
    3d7c:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    3d7e:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    3d80:	4298      	cmp	r0, r3
    3d82:	d1d1      	bne.n	3d28 <usb_proc_loop+0x30>
    3d84:	4b02      	ldr	r3, [pc, #8]	; (3d90 <usb_proc_loop+0x98>)
    3d86:	2200      	movs	r2, #0
    3d88:	70da      	strb	r2, [r3, #3]
    3d8a:	e7cd      	b.n	3d28 <usb_proc_loop+0x30>
		}
	}
}
    3d8c:	bd70      	pop	{r4, r5, r6, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	20000640 	.word	0x20000640
    3d94:	00002a21 	.word	0x00002a21
    3d98:	200004f8 	.word	0x200004f8
    3d9c:	00003119 	.word	0x00003119
    3da0:	0000288d 	.word	0x0000288d
    3da4:	200004f4 	.word	0x200004f4
    3da8:	00002a5d 	.word	0x00002a5d

00003dac <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    3dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dae:	46ce      	mov	lr, r9
    3db0:	4647      	mov	r7, r8
    3db2:	b580      	push	{r7, lr}
    3db4:	0006      	movs	r6, r0
    3db6:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3db8:	4f15      	ldr	r7, [pc, #84]	; (3e10 <rtos_usb_init+0x64>)
    3dba:	2580      	movs	r5, #128	; 0x80
    3dbc:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    3dbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3dc2:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    3dc6:	22c0      	movs	r2, #192	; 0xc0
    3dc8:	0492      	lsls	r2, r2, #18
    3dca:	2106      	movs	r1, #6
    3dcc:	2000      	movs	r0, #0
    3dce:	4b11      	ldr	r3, [pc, #68]	; (3e14 <rtos_usb_init+0x68>)
    3dd0:	4798      	blx	r3
	usb_init();
    3dd2:	4b11      	ldr	r3, [pc, #68]	; (3e18 <rtos_usb_init+0x6c>)
    3dd4:	4798      	blx	r3
	usb_attach();
    3dd6:	4b11      	ldr	r3, [pc, #68]	; (3e1c <rtos_usb_init+0x70>)
    3dd8:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    3dda:	4911      	ldr	r1, [pc, #68]	; (3e20 <rtos_usb_init+0x74>)
    3ddc:	4c11      	ldr	r4, [pc, #68]	; (3e24 <rtos_usb_init+0x78>)
    3dde:	231c      	movs	r3, #28
    3de0:	4699      	mov	r9, r3
    3de2:	44a1      	add	r9, r4
    3de4:	4643      	mov	r3, r8
    3de6:	0032      	movs	r2, r6
    3de8:	4648      	mov	r0, r9
    3dea:	4e0f      	ldr	r6, [pc, #60]	; (3e28 <rtos_usb_init+0x7c>)
    3dec:	47b0      	blx	r6
	dispatch_process(&usbproc);
    3dee:	4648      	mov	r0, r9
    3df0:	4b0e      	ldr	r3, [pc, #56]	; (3e2c <rtos_usb_init+0x80>)
    3df2:	4798      	blx	r3
	wait_until_started(&usbproc);
    3df4:	2201      	movs	r2, #1
    3df6:	0020      	movs	r0, r4
    3df8:	3034      	adds	r0, #52	; 0x34
    3dfa:	2301      	movs	r3, #1
    3dfc:	4252      	negs	r2, r2
    3dfe:	2100      	movs	r1, #0
    3e00:	4c0b      	ldr	r4, [pc, #44]	; (3e30 <rtos_usb_init+0x84>)
    3e02:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e04:	603d      	str	r5, [r7, #0]
}
    3e06:	bcc0      	pop	{r6, r7}
    3e08:	46b9      	mov	r9, r7
    3e0a:	46b0      	mov	r8, r6
    3e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e0e:	46c0      	nop			; (mov r8, r8)
    3e10:	e000e100 	.word	0xe000e100
    3e14:	00001ac5 	.word	0x00001ac5
    3e18:	000024d1 	.word	0x000024d1
    3e1c:	00002831 	.word	0x00002831
    3e20:	00003cf9 	.word	0x00003cf9
    3e24:	20000640 	.word	0x20000640
    3e28:	00002dad 	.word	0x00002dad
    3e2c:	00002e95 	.word	0x00002e95
    3e30:	00003119 	.word	0x00003119

00003e34 <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e34:	2380      	movs	r3, #128	; 0x80
    3e36:	4a05      	ldr	r2, [pc, #20]	; (3e4c <USB_Handler+0x18>)
    3e38:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e3e:	f3bf 8f6f 	isb	sy

void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);
	
	usb_interrupt = true;
    3e42:	4b03      	ldr	r3, [pc, #12]	; (3e50 <USB_Handler+0x1c>)
    3e44:	2201      	movs	r2, #1
    3e46:	701a      	strb	r2, [r3, #0]
}
    3e48:	4770      	bx	lr
    3e4a:	46c0      	nop			; (mov r8, r8)
    3e4c:	e000e100 	.word	0xe000e100
    3e50:	20000640 	.word	0x20000640

00003e54 <rtos_usb_start_send_buffer>:
	usb_quit = true;
	join_process(&usbproc);
}


void rtos_usb_start_send_buffer(uint8_t* buffer, int count) {
    3e54:	b570      	push	{r4, r5, r6, lr}
    3e56:	0005      	movs	r5, r0
    3e58:	000e      	movs	r6, r1
	// if send operation is currently in progress wait until it finishes
	if (usb_send_status) wait_until_false(&usb_send_status);
    3e5a:	4b0d      	ldr	r3, [pc, #52]	; (3e90 <rtos_usb_start_send_buffer+0x3c>)
    3e5c:	789b      	ldrb	r3, [r3, #2]
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d10e      	bne.n	3e80 <rtos_usb_start_send_buffer+0x2c>
	usb_send_buffer = buffer;
    3e62:	4c0b      	ldr	r4, [pc, #44]	; (3e90 <rtos_usb_start_send_buffer+0x3c>)
    3e64:	60e5      	str	r5, [r4, #12]
	usb_send_buffer_count = count;
    3e66:	6066      	str	r6, [r4, #4]
	usb_send_bytes_sent = 0;
    3e68:	2300      	movs	r3, #0
    3e6a:	60a3      	str	r3, [r4, #8]
	usb_send_status = true;
    3e6c:	3301      	adds	r3, #1
    3e6e:	70a3      	strb	r3, [r4, #2]
	// start send
	usb_send_bytes_sent += usb_serial_send_buffer(buffer, count);
    3e70:	0031      	movs	r1, r6
    3e72:	0028      	movs	r0, r5
    3e74:	4b07      	ldr	r3, [pc, #28]	; (3e94 <rtos_usb_start_send_buffer+0x40>)
    3e76:	4798      	blx	r3
    3e78:	68a3      	ldr	r3, [r4, #8]
    3e7a:	181b      	adds	r3, r3, r0
    3e7c:	60a3      	str	r3, [r4, #8]
}
    3e7e:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_send_status) wait_until_false(&usb_send_status);
    3e80:	4805      	ldr	r0, [pc, #20]	; (3e98 <rtos_usb_start_send_buffer+0x44>)
    3e82:	2300      	movs	r3, #0
    3e84:	22ff      	movs	r2, #255	; 0xff
    3e86:	2100      	movs	r1, #0
    3e88:	4c04      	ldr	r4, [pc, #16]	; (3e9c <rtos_usb_start_send_buffer+0x48>)
    3e8a:	47a0      	blx	r4
    3e8c:	e7e9      	b.n	3e62 <rtos_usb_start_send_buffer+0xe>
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	20000640 	.word	0x20000640
    3e94:	00002a21 	.word	0x00002a21
    3e98:	20000642 	.word	0x20000642
    3e9c:	00003119 	.word	0x00003119

00003ea0 <rtos_usb_wait_until_send_complete>:

int rtos_usb_wait_until_send_complete() {
    3ea0:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_send_status);
    3ea2:	4c04      	ldr	r4, [pc, #16]	; (3eb4 <rtos_usb_wait_until_send_complete+0x14>)
    3ea4:	1ca0      	adds	r0, r4, #2
    3ea6:	2300      	movs	r3, #0
    3ea8:	22ff      	movs	r2, #255	; 0xff
    3eaa:	2100      	movs	r1, #0
    3eac:	4d02      	ldr	r5, [pc, #8]	; (3eb8 <rtos_usb_wait_until_send_complete+0x18>)
    3eae:	47a8      	blx	r5
	return usb_send_bytes_sent;
    3eb0:	68a0      	ldr	r0, [r4, #8]
}
    3eb2:	bd70      	pop	{r4, r5, r6, pc}
    3eb4:	20000640 	.word	0x20000640
    3eb8:	00003119 	.word	0x00003119

00003ebc <rtos_usb_start_read_buffer>:


void rtos_usb_start_read_buffer(uint8_t* buffer, int count) {
    3ebc:	b570      	push	{r4, r5, r6, lr}
    3ebe:	0005      	movs	r5, r0
    3ec0:	000c      	movs	r4, r1
	// if read operation is currently in progress wait until it finishes
	if (usb_read_status) wait_until_false(&usb_read_status);
    3ec2:	4b09      	ldr	r3, [pc, #36]	; (3ee8 <rtos_usb_start_read_buffer+0x2c>)
    3ec4:	78db      	ldrb	r3, [r3, #3]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d107      	bne.n	3eda <rtos_usb_start_read_buffer+0x1e>
	usb_read_buffer = buffer;
    3eca:	4b07      	ldr	r3, [pc, #28]	; (3ee8 <rtos_usb_start_read_buffer+0x2c>)
    3ecc:	611d      	str	r5, [r3, #16]
	usb_read_buffer_count = count;
    3ece:	619c      	str	r4, [r3, #24]
	usb_read_bytes_read = 0;
    3ed0:	2200      	movs	r2, #0
    3ed2:	615a      	str	r2, [r3, #20]
	usb_read_status = true;
    3ed4:	3201      	adds	r2, #1
    3ed6:	70da      	strb	r2, [r3, #3]
}
    3ed8:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_read_status) wait_until_false(&usb_read_status);
    3eda:	4804      	ldr	r0, [pc, #16]	; (3eec <rtos_usb_start_read_buffer+0x30>)
    3edc:	2300      	movs	r3, #0
    3ede:	22ff      	movs	r2, #255	; 0xff
    3ee0:	2100      	movs	r1, #0
    3ee2:	4e03      	ldr	r6, [pc, #12]	; (3ef0 <rtos_usb_start_read_buffer+0x34>)
    3ee4:	47b0      	blx	r6
    3ee6:	e7f0      	b.n	3eca <rtos_usb_start_read_buffer+0xe>
    3ee8:	20000640 	.word	0x20000640
    3eec:	20000643 	.word	0x20000643
    3ef0:	00003119 	.word	0x00003119

00003ef4 <rtos_usb_wait_until_read_complete>:

int rtos_usb_wait_until_read_complete() {
    3ef4:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_read_status);
    3ef6:	4c04      	ldr	r4, [pc, #16]	; (3f08 <rtos_usb_wait_until_read_complete+0x14>)
    3ef8:	1ce0      	adds	r0, r4, #3
    3efa:	2300      	movs	r3, #0
    3efc:	22ff      	movs	r2, #255	; 0xff
    3efe:	2100      	movs	r1, #0
    3f00:	4d02      	ldr	r5, [pc, #8]	; (3f0c <rtos_usb_wait_until_read_complete+0x18>)
    3f02:	47a8      	blx	r5
	return usb_read_bytes_read;
    3f04:	6960      	ldr	r0, [r4, #20]
    3f06:	bd70      	pop	{r4, r5, r6, pc}
    3f08:	20000640 	.word	0x20000640
    3f0c:	00003119 	.word	0x00003119

00003f10 <CRC8>:
#include "gnclink.h"

const uint8_t CRC8_LUT_L[] = { 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D };
const uint8_t CRC8_LUT_H[] = { 0x00, 0x70, 0xE0, 0x90, 0xC7, 0xB7, 0x27, 0x57, 0x89, 0xF9, 0x69, 0x19, 0x4E, 0x3E, 0xAE, 0xDE };

uint8_t CRC8(uint8_t* data, int length) {
    3f10:	b570      	push	{r4, r5, r6, lr}
    3f12:	0006      	movs	r6, r0
	uint8_t crc = 0;
	for (int index = 0; index < length; ++index) {
    3f14:	2400      	movs	r4, #0
	uint8_t crc = 0;
    3f16:	2000      	movs	r0, #0
	for (int index = 0; index < length; ++index) {
    3f18:	e00a      	b.n	3f30 <CRC8+0x20>
		crc ^= data[index];
    3f1a:	5d33      	ldrb	r3, [r6, r4]
    3f1c:	4043      	eors	r3, r0
		crc = CRC8_LUT_L[crc & 0xF] ^ CRC8_LUT_H[crc >> 4];
    3f1e:	250f      	movs	r5, #15
    3f20:	401d      	ands	r5, r3
    3f22:	4a05      	ldr	r2, [pc, #20]	; (3f38 <CRC8+0x28>)
    3f24:	5d50      	ldrb	r0, [r2, r5]
    3f26:	091b      	lsrs	r3, r3, #4
    3f28:	18d2      	adds	r2, r2, r3
    3f2a:	7c13      	ldrb	r3, [r2, #16]
    3f2c:	4058      	eors	r0, r3
	for (int index = 0; index < length; ++index) {
    3f2e:	3401      	adds	r4, #1
    3f30:	428c      	cmp	r4, r1
    3f32:	dbf2      	blt.n	3f1a <CRC8+0xa>
	}
	return crc;
}
    3f34:	bd70      	pop	{r4, r5, r6, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	000053bc 	.word	0x000053bc

00003f3c <GNClink_Get_Packet_Payload_Pointer>:

uint8_t* GNClink_Get_Packet_Payload_Pointer(uint8_t* packetPointer) {
	return packetPointer + GNCLINK_PACKET_HEADER_LENGTH;
    3f3c:	3004      	adds	r0, #4
}
    3f3e:	4770      	bx	lr

00003f40 <GNClink_Construct_Packet>:

bool GNClink_Construct_Packet(uint8_t* packetPointer, GNClink_PacketType packetType, GNClink_PacketFlags packetFlags, int payloadSize) {
    3f40:	b570      	push	{r4, r5, r6, lr}
    3f42:	000c      	movs	r4, r1
	// validate inputs
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    3f44:	2b3b      	cmp	r3, #59	; 0x3b
    3f46:	d80c      	bhi.n	3f62 <GNClink_Construct_Packet+0x22>

	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;
	// get pointer to footer
	GNClink_PacketFooter* footer = (GNClink_PacketFooter*)(packetPointer + GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    3f48:	1d19      	adds	r1, r3, #4
    3f4a:	1845      	adds	r5, r0, r1

	// populate header
	header->magic = GNCLINK_PACKET_MAGIC;
    3f4c:	26ac      	movs	r6, #172	; 0xac
    3f4e:	7006      	strb	r6, [r0, #0]
	header->packetType = packetType;
    3f50:	7044      	strb	r4, [r0, #1]
	header->packetFlags = packetFlags;
    3f52:	7082      	strb	r2, [r0, #2]
	header->packetLength = payloadSize + GNCLINK_PACKET_HEADER_LENGTH + GNCLINK_PACKET_FOOTER_LENGTH;
    3f54:	3305      	adds	r3, #5
    3f56:	70c3      	strb	r3, [r0, #3]

	// populate footer
	footer->crc = CRC8(packetPointer, GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    3f58:	4b03      	ldr	r3, [pc, #12]	; (3f68 <GNClink_Construct_Packet+0x28>)
    3f5a:	4798      	blx	r3
    3f5c:	7028      	strb	r0, [r5, #0]

	return true;
    3f5e:	2001      	movs	r0, #1
}
    3f60:	bd70      	pop	{r4, r5, r6, pc}
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    3f62:	2000      	movs	r0, #0
    3f64:	e7fc      	b.n	3f60 <GNClink_Construct_Packet+0x20>
    3f66:	46c0      	nop			; (mov r8, r8)
    3f68:	00003f11 	.word	0x00003f11

00003f6c <GNClink_Check_Packet>:

bool GNClink_Check_Packet(uint8_t* packetPointer) {
    3f6c:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	// check magic
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    3f6e:	7803      	ldrb	r3, [r0, #0]
    3f70:	2bac      	cmp	r3, #172	; 0xac
    3f72:	d10a      	bne.n	3f8a <GNClink_Check_Packet+0x1e>

	// check packet length
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    3f74:	78c1      	ldrb	r1, [r0, #3]
    3f76:	1f4b      	subs	r3, r1, #5
    3f78:	b2db      	uxtb	r3, r3
    3f7a:	2b3b      	cmp	r3, #59	; 0x3b
    3f7c:	d807      	bhi.n	3f8e <GNClink_Check_Packet+0x22>

	// check CRC
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    3f7e:	4b06      	ldr	r3, [pc, #24]	; (3f98 <GNClink_Check_Packet+0x2c>)
    3f80:	4798      	blx	r3
    3f82:	2800      	cmp	r0, #0
    3f84:	d105      	bne.n	3f92 <GNClink_Check_Packet+0x26>

	// all checks passed, return true
	return true;
    3f86:	3001      	adds	r0, #1
    3f88:	e000      	b.n	3f8c <GNClink_Check_Packet+0x20>
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    3f8a:	2000      	movs	r0, #0
}
    3f8c:	bd10      	pop	{r4, pc}
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    3f8e:	2000      	movs	r0, #0
    3f90:	e7fc      	b.n	3f8c <GNClink_Check_Packet+0x20>
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    3f92:	2000      	movs	r0, #0
    3f94:	e7fa      	b.n	3f8c <GNClink_Check_Packet+0x20>
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	00003f11 	.word	0x00003f11

00003f9c <GNClink_Get_Packet_Type>:

GNClink_PacketType GNClink_Get_Packet_Type(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetType;
    3f9c:	7840      	ldrb	r0, [r0, #1]
}
    3f9e:	4770      	bx	lr

00003fa0 <GNClink_Get_Frame_Payload_Pointer>:


uint8_t* GNClink_Get_Frame_Payload_Pointer(uint8_t* framePointer) {
	return framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    3fa0:	3003      	adds	r0, #3
}
    3fa2:	4770      	bx	lr

00003fa4 <GNClink_Get_Frame>:

bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    3fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fa6:	000e      	movs	r6, r1
	// get pointer to packet header
	GNClink_PacketHeader* packetHeader = (GNClink_PacketHeader*)packetPointer;

	// check packet length
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    3fa8:	78c1      	ldrb	r1, [r0, #3]
    3faa:	1f4c      	subs	r4, r1, #5
    3fac:	b2e4      	uxtb	r4, r4
    3fae:	2c3b      	cmp	r4, #59	; 0x3b
    3fb0:	d832      	bhi.n	4018 <GNClink_Get_Frame+0x74>

	// calculate number of frames for packet
	int frameCount = (packetHeader->packetLength + GNCLINK_FRAME_PAYLOAD_LENGTH - 1) / GNCLINK_FRAME_PAYLOAD_LENGTH;
    3fb2:	310f      	adds	r1, #15
    3fb4:	1109      	asrs	r1, r1, #4
	*moreFrames = frameIndex < frameCount - 1;
    3fb6:	1e4d      	subs	r5, r1, #1
    3fb8:	2401      	movs	r4, #1
    3fba:	429d      	cmp	r5, r3
    3fbc:	dc00      	bgt.n	3fc0 <GNClink_Get_Frame+0x1c>
    3fbe:	2400      	movs	r4, #0
    3fc0:	9d06      	ldr	r5, [sp, #24]
    3fc2:	702c      	strb	r4, [r5, #0]

	// check index is valid
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	db29      	blt.n	401c <GNClink_Get_Frame+0x78>
    3fc8:	4299      	cmp	r1, r3
    3fca:	dd29      	ble.n	4020 <GNClink_Get_Frame+0x7c>
	// get pointer to frame header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    3fcc:	1cf7      	adds	r7, r6, #3

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    3fce:	24ae      	movs	r4, #174	; 0xae
    3fd0:	7034      	strb	r4, [r6, #0]
	header->index = frameIndex;
    3fd2:	7073      	strb	r3, [r6, #1]
	header->flags = flags;
    3fd4:	70b2      	strb	r2, [r6, #2]
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    3fd6:	1c5c      	adds	r4, r3, #1
    3fd8:	428c      	cmp	r4, r1
    3fda:	d00c      	beq.n	3ff6 <GNClink_Get_Frame+0x52>
bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    3fdc:	2200      	movs	r2, #0

	// populate payload
	int i = 0;
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    3fde:	2a0f      	cmp	r2, #15
    3fe0:	dc11      	bgt.n	4006 <GNClink_Get_Frame+0x62>
    3fe2:	78c5      	ldrb	r5, [r0, #3]
    3fe4:	011c      	lsls	r4, r3, #4
    3fe6:	1b2d      	subs	r5, r5, r4
    3fe8:	4295      	cmp	r5, r2
    3fea:	dd0c      	ble.n	4006 <GNClink_Get_Frame+0x62>
		payload[i] = packetPointer[i + GNCLINK_FRAME_PAYLOAD_LENGTH * frameIndex];
    3fec:	18a4      	adds	r4, r4, r2
    3fee:	5d01      	ldrb	r1, [r0, r4]
    3ff0:	54b9      	strb	r1, [r7, r2]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    3ff2:	3201      	adds	r2, #1
    3ff4:	e7f3      	b.n	3fde <GNClink_Get_Frame+0x3a>
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    3ff6:	2102      	movs	r1, #2
    3ff8:	430a      	orrs	r2, r1
    3ffa:	70b2      	strb	r2, [r6, #2]
    3ffc:	e7ee      	b.n	3fdc <GNClink_Get_Frame+0x38>
	}
	// populate the rest with zeros
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
		payload[i] = 0;
    3ffe:	18bb      	adds	r3, r7, r2
    4000:	2100      	movs	r1, #0
    4002:	7019      	strb	r1, [r3, #0]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4004:	3201      	adds	r2, #1
    4006:	2a0f      	cmp	r2, #15
    4008:	ddf9      	ble.n	3ffe <GNClink_Get_Frame+0x5a>
	}

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    400a:	2113      	movs	r1, #19
    400c:	0030      	movs	r0, r6
    400e:	4b05      	ldr	r3, [pc, #20]	; (4024 <GNClink_Get_Frame+0x80>)
    4010:	4798      	blx	r3
    4012:	74f0      	strb	r0, [r6, #19]

	return true;
    4014:	2001      	movs	r0, #1
    4016:	e000      	b.n	401a <GNClink_Get_Frame+0x76>
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4018:	2000      	movs	r0, #0
}
    401a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    401c:	2000      	movs	r0, #0
    401e:	e7fc      	b.n	401a <GNClink_Get_Frame+0x76>
    4020:	2000      	movs	r0, #0
    4022:	e7fa      	b.n	401a <GNClink_Get_Frame+0x76>
    4024:	00003f11 	.word	0x00003f11

00004028 <GNClink_Check_Frame>:

bool GNClink_Check_Frame(uint8_t* framePointer) {
    4028:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	// check magic
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    402a:	7803      	ldrb	r3, [r0, #0]
    402c:	2bae      	cmp	r3, #174	; 0xae
    402e:	d109      	bne.n	4044 <GNClink_Check_Frame+0x1c>

	// check index
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4030:	7843      	ldrb	r3, [r0, #1]
    4032:	2b03      	cmp	r3, #3
    4034:	d808      	bhi.n	4048 <GNClink_Check_Frame+0x20>

	// check CRC
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4036:	2114      	movs	r1, #20
    4038:	4b05      	ldr	r3, [pc, #20]	; (4050 <GNClink_Check_Frame+0x28>)
    403a:	4798      	blx	r3
    403c:	2800      	cmp	r0, #0
    403e:	d105      	bne.n	404c <GNClink_Check_Frame+0x24>

	// all checks passed, return true
	return true;
    4040:	3001      	adds	r0, #1
    4042:	e000      	b.n	4046 <GNClink_Check_Frame+0x1e>
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4044:	2000      	movs	r0, #0
}
    4046:	bd10      	pop	{r4, pc}
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4048:	2000      	movs	r0, #0
    404a:	e7fc      	b.n	4046 <GNClink_Check_Frame+0x1e>
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    404c:	2000      	movs	r0, #0
    404e:	e7fa      	b.n	4046 <GNClink_Check_Frame+0x1e>
    4050:	00003f11 	.word	0x00003f11

00004054 <GNClink_Frame_RequestResend>:

bool GNClink_Frame_RequestResend(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (header->flags & GNClink_FrameFlags_RequestResend) != 0;
    4054:	7883      	ldrb	r3, [r0, #2]
    4056:	089b      	lsrs	r3, r3, #2
    4058:	2001      	movs	r0, #1
    405a:	4018      	ands	r0, r3
}
    405c:	4770      	bx	lr

0000405e <GNClink_Get_Frame_Index>:

int GNClink_Get_Frame_Index(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (int)header->index;
    405e:	7840      	ldrb	r0, [r0, #1]
}
    4060:	4770      	bx	lr
	...

00004064 <GNClink_Construct_RequestResendFrame>:

void GNClink_Construct_RequestResendFrame(uint8_t* framePointer) {
    4064:	b510      	push	{r4, lr}
    4066:	0004      	movs	r4, r0
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    4068:	23ae      	movs	r3, #174	; 0xae
    406a:	7003      	strb	r3, [r0, #0]
	header->index = 0;
    406c:	2300      	movs	r3, #0
    406e:	7043      	strb	r3, [r0, #1]
	header->flags = GNClink_FrameFlags_RequestResend;
    4070:	3304      	adds	r3, #4
    4072:	7083      	strb	r3, [r0, #2]

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    4074:	2113      	movs	r1, #19
    4076:	4b02      	ldr	r3, [pc, #8]	; (4080 <GNClink_Construct_RequestResendFrame+0x1c>)
    4078:	4798      	blx	r3
    407a:	74e0      	strb	r0, [r4, #19]
}
    407c:	bd10      	pop	{r4, pc}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	00003f11 	.word	0x00003f11

00004084 <GNClink_Reconstruct_Packet_From_Frames>:


bool GNClink_Reconstruct_Packet_From_Frames(uint8_t* framePointer, uint8_t* packetPointer, bool* moreFrames) {
    4084:	b530      	push	{r4, r5, lr}
	// get pointer to frame footer
	//GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    4086:	2400      	movs	r4, #0
    4088:	2c0f      	cmp	r4, #15
    408a:	dc09      	bgt.n	40a0 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
    408c:	7843      	ldrb	r3, [r0, #1]
    408e:	011b      	lsls	r3, r3, #4
    4090:	191b      	adds	r3, r3, r4
    4092:	2b3f      	cmp	r3, #63	; 0x3f
    4094:	dc04      	bgt.n	40a0 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
		packetPointer[i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH] = payload[i];
    4096:	1905      	adds	r5, r0, r4
    4098:	78ed      	ldrb	r5, [r5, #3]
    409a:	54cd      	strb	r5, [r1, r3]
	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    409c:	3401      	adds	r4, #1
    409e:	e7f3      	b.n	4088 <GNClink_Reconstruct_Packet_From_Frames+0x4>
	}

	*moreFrames = (header->flags & GNClink_FrameFlags_TransactionEnd) == 0;
    40a0:	7883      	ldrb	r3, [r0, #2]
    40a2:	085b      	lsrs	r3, r3, #1
    40a4:	2101      	movs	r1, #1
    40a6:	404b      	eors	r3, r1
    40a8:	2101      	movs	r1, #1
    40aa:	400b      	ands	r3, r1
    40ac:	7013      	strb	r3, [r2, #0]

	return true;
    40ae:	2001      	movs	r0, #1
    40b0:	bd30      	pop	{r4, r5, pc}
	...

000040b4 <__aeabi_cfrcmple>:
    40b4:	4684      	mov	ip, r0
    40b6:	0008      	movs	r0, r1
    40b8:	4661      	mov	r1, ip
    40ba:	e7ff      	b.n	40bc <__aeabi_cfcmpeq>

000040bc <__aeabi_cfcmpeq>:
    40bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    40be:	f000 fb65 	bl	478c <__lesf2>
    40c2:	2800      	cmp	r0, #0
    40c4:	d401      	bmi.n	40ca <__aeabi_cfcmpeq+0xe>
    40c6:	2100      	movs	r1, #0
    40c8:	42c8      	cmn	r0, r1
    40ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000040cc <__aeabi_fcmpeq>:
    40cc:	b510      	push	{r4, lr}
    40ce:	f000 fae5 	bl	469c <__eqsf2>
    40d2:	4240      	negs	r0, r0
    40d4:	3001      	adds	r0, #1
    40d6:	bd10      	pop	{r4, pc}

000040d8 <__aeabi_fcmplt>:
    40d8:	b510      	push	{r4, lr}
    40da:	f000 fb57 	bl	478c <__lesf2>
    40de:	2800      	cmp	r0, #0
    40e0:	db01      	blt.n	40e6 <__aeabi_fcmplt+0xe>
    40e2:	2000      	movs	r0, #0
    40e4:	bd10      	pop	{r4, pc}
    40e6:	2001      	movs	r0, #1
    40e8:	bd10      	pop	{r4, pc}
    40ea:	46c0      	nop			; (mov r8, r8)

000040ec <__aeabi_fcmple>:
    40ec:	b510      	push	{r4, lr}
    40ee:	f000 fb4d 	bl	478c <__lesf2>
    40f2:	2800      	cmp	r0, #0
    40f4:	dd01      	ble.n	40fa <__aeabi_fcmple+0xe>
    40f6:	2000      	movs	r0, #0
    40f8:	bd10      	pop	{r4, pc}
    40fa:	2001      	movs	r0, #1
    40fc:	bd10      	pop	{r4, pc}
    40fe:	46c0      	nop			; (mov r8, r8)

00004100 <__aeabi_fcmpgt>:
    4100:	b510      	push	{r4, lr}
    4102:	f000 faf3 	bl	46ec <__gesf2>
    4106:	2800      	cmp	r0, #0
    4108:	dc01      	bgt.n	410e <__aeabi_fcmpgt+0xe>
    410a:	2000      	movs	r0, #0
    410c:	bd10      	pop	{r4, pc}
    410e:	2001      	movs	r0, #1
    4110:	bd10      	pop	{r4, pc}
    4112:	46c0      	nop			; (mov r8, r8)

00004114 <__aeabi_fcmpge>:
    4114:	b510      	push	{r4, lr}
    4116:	f000 fae9 	bl	46ec <__gesf2>
    411a:	2800      	cmp	r0, #0
    411c:	da01      	bge.n	4122 <__aeabi_fcmpge+0xe>
    411e:	2000      	movs	r0, #0
    4120:	bd10      	pop	{r4, pc}
    4122:	2001      	movs	r0, #1
    4124:	bd10      	pop	{r4, pc}
    4126:	46c0      	nop			; (mov r8, r8)

00004128 <__aeabi_f2uiz>:
    4128:	219e      	movs	r1, #158	; 0x9e
    412a:	b510      	push	{r4, lr}
    412c:	05c9      	lsls	r1, r1, #23
    412e:	1c04      	adds	r4, r0, #0
    4130:	f7ff fff0 	bl	4114 <__aeabi_fcmpge>
    4134:	2800      	cmp	r0, #0
    4136:	d103      	bne.n	4140 <__aeabi_f2uiz+0x18>
    4138:	1c20      	adds	r0, r4, #0
    413a:	f000 fe45 	bl	4dc8 <__aeabi_f2iz>
    413e:	bd10      	pop	{r4, pc}
    4140:	219e      	movs	r1, #158	; 0x9e
    4142:	1c20      	adds	r0, r4, #0
    4144:	05c9      	lsls	r1, r1, #23
    4146:	f000 fcad 	bl	4aa4 <__aeabi_fsub>
    414a:	f000 fe3d 	bl	4dc8 <__aeabi_f2iz>
    414e:	2380      	movs	r3, #128	; 0x80
    4150:	061b      	lsls	r3, r3, #24
    4152:	469c      	mov	ip, r3
    4154:	4460      	add	r0, ip
    4156:	e7f2      	b.n	413e <__aeabi_f2uiz+0x16>

00004158 <__aeabi_fadd>:
    4158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    415a:	0243      	lsls	r3, r0, #9
    415c:	0045      	lsls	r5, r0, #1
    415e:	0fc4      	lsrs	r4, r0, #31
    4160:	0248      	lsls	r0, r1, #9
    4162:	0a42      	lsrs	r2, r0, #9
    4164:	4694      	mov	ip, r2
    4166:	004a      	lsls	r2, r1, #1
    4168:	0a5f      	lsrs	r7, r3, #9
    416a:	0e2d      	lsrs	r5, r5, #24
    416c:	099b      	lsrs	r3, r3, #6
    416e:	0e12      	lsrs	r2, r2, #24
    4170:	0fc9      	lsrs	r1, r1, #31
    4172:	0980      	lsrs	r0, r0, #6
    4174:	428c      	cmp	r4, r1
    4176:	d022      	beq.n	41be <__aeabi_fadd+0x66>
    4178:	1aae      	subs	r6, r5, r2
    417a:	2e00      	cmp	r6, #0
    417c:	dd0d      	ble.n	419a <__aeabi_fadd+0x42>
    417e:	2a00      	cmp	r2, #0
    4180:	d12d      	bne.n	41de <__aeabi_fadd+0x86>
    4182:	2800      	cmp	r0, #0
    4184:	d100      	bne.n	4188 <__aeabi_fadd+0x30>
    4186:	e083      	b.n	4290 <__aeabi_fadd+0x138>
    4188:	1e72      	subs	r2, r6, #1
    418a:	2e01      	cmp	r6, #1
    418c:	d100      	bne.n	4190 <__aeabi_fadd+0x38>
    418e:	e11b      	b.n	43c8 <__aeabi_fadd+0x270>
    4190:	2eff      	cmp	r6, #255	; 0xff
    4192:	d100      	bne.n	4196 <__aeabi_fadd+0x3e>
    4194:	e0a2      	b.n	42dc <__aeabi_fadd+0x184>
    4196:	0016      	movs	r6, r2
    4198:	e027      	b.n	41ea <__aeabi_fadd+0x92>
    419a:	2e00      	cmp	r6, #0
    419c:	d048      	beq.n	4230 <__aeabi_fadd+0xd8>
    419e:	1b56      	subs	r6, r2, r5
    41a0:	2d00      	cmp	r5, #0
    41a2:	d000      	beq.n	41a6 <__aeabi_fadd+0x4e>
    41a4:	e0c1      	b.n	432a <__aeabi_fadd+0x1d2>
    41a6:	2b00      	cmp	r3, #0
    41a8:	d100      	bne.n	41ac <__aeabi_fadd+0x54>
    41aa:	e0f7      	b.n	439c <__aeabi_fadd+0x244>
    41ac:	1e74      	subs	r4, r6, #1
    41ae:	2e01      	cmp	r6, #1
    41b0:	d100      	bne.n	41b4 <__aeabi_fadd+0x5c>
    41b2:	e12d      	b.n	4410 <__aeabi_fadd+0x2b8>
    41b4:	2eff      	cmp	r6, #255	; 0xff
    41b6:	d100      	bne.n	41ba <__aeabi_fadd+0x62>
    41b8:	e08e      	b.n	42d8 <__aeabi_fadd+0x180>
    41ba:	0026      	movs	r6, r4
    41bc:	e0ba      	b.n	4334 <__aeabi_fadd+0x1dc>
    41be:	1aa9      	subs	r1, r5, r2
    41c0:	2900      	cmp	r1, #0
    41c2:	dc00      	bgt.n	41c6 <__aeabi_fadd+0x6e>
    41c4:	e08c      	b.n	42e0 <__aeabi_fadd+0x188>
    41c6:	2a00      	cmp	r2, #0
    41c8:	d046      	beq.n	4258 <__aeabi_fadd+0x100>
    41ca:	2dff      	cmp	r5, #255	; 0xff
    41cc:	d100      	bne.n	41d0 <__aeabi_fadd+0x78>
    41ce:	e085      	b.n	42dc <__aeabi_fadd+0x184>
    41d0:	2280      	movs	r2, #128	; 0x80
    41d2:	04d2      	lsls	r2, r2, #19
    41d4:	4310      	orrs	r0, r2
    41d6:	291b      	cmp	r1, #27
    41d8:	dd49      	ble.n	426e <__aeabi_fadd+0x116>
    41da:	3301      	adds	r3, #1
    41dc:	e016      	b.n	420c <__aeabi_fadd+0xb4>
    41de:	2dff      	cmp	r5, #255	; 0xff
    41e0:	d100      	bne.n	41e4 <__aeabi_fadd+0x8c>
    41e2:	e07b      	b.n	42dc <__aeabi_fadd+0x184>
    41e4:	2280      	movs	r2, #128	; 0x80
    41e6:	04d2      	lsls	r2, r2, #19
    41e8:	4310      	orrs	r0, r2
    41ea:	2201      	movs	r2, #1
    41ec:	2e1b      	cmp	r6, #27
    41ee:	dc07      	bgt.n	4200 <__aeabi_fadd+0xa8>
    41f0:	2120      	movs	r1, #32
    41f2:	1b89      	subs	r1, r1, r6
    41f4:	0002      	movs	r2, r0
    41f6:	4088      	lsls	r0, r1
    41f8:	40f2      	lsrs	r2, r6
    41fa:	1e41      	subs	r1, r0, #1
    41fc:	4188      	sbcs	r0, r1
    41fe:	4302      	orrs	r2, r0
    4200:	1a9b      	subs	r3, r3, r2
    4202:	015a      	lsls	r2, r3, #5
    4204:	d451      	bmi.n	42aa <__aeabi_fadd+0x152>
    4206:	2207      	movs	r2, #7
    4208:	401a      	ands	r2, r3
    420a:	d042      	beq.n	4292 <__aeabi_fadd+0x13a>
    420c:	220f      	movs	r2, #15
    420e:	401a      	ands	r2, r3
    4210:	2a04      	cmp	r2, #4
    4212:	d000      	beq.n	4216 <__aeabi_fadd+0xbe>
    4214:	3304      	adds	r3, #4
    4216:	015a      	lsls	r2, r3, #5
    4218:	d53b      	bpl.n	4292 <__aeabi_fadd+0x13a>
    421a:	1c68      	adds	r0, r5, #1
    421c:	2dfe      	cmp	r5, #254	; 0xfe
    421e:	d034      	beq.n	428a <__aeabi_fadd+0x132>
    4220:	019b      	lsls	r3, r3, #6
    4222:	0a5b      	lsrs	r3, r3, #9
    4224:	b2c0      	uxtb	r0, r0
    4226:	05c0      	lsls	r0, r0, #23
    4228:	4318      	orrs	r0, r3
    422a:	07e4      	lsls	r4, r4, #31
    422c:	4320      	orrs	r0, r4
    422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4230:	26fe      	movs	r6, #254	; 0xfe
    4232:	1c6a      	adds	r2, r5, #1
    4234:	4216      	tst	r6, r2
    4236:	d000      	beq.n	423a <__aeabi_fadd+0xe2>
    4238:	e08b      	b.n	4352 <__aeabi_fadd+0x1fa>
    423a:	2d00      	cmp	r5, #0
    423c:	d000      	beq.n	4240 <__aeabi_fadd+0xe8>
    423e:	e0b1      	b.n	43a4 <__aeabi_fadd+0x24c>
    4240:	2b00      	cmp	r3, #0
    4242:	d100      	bne.n	4246 <__aeabi_fadd+0xee>
    4244:	e0df      	b.n	4406 <__aeabi_fadd+0x2ae>
    4246:	2800      	cmp	r0, #0
    4248:	d069      	beq.n	431e <__aeabi_fadd+0x1c6>
    424a:	1a1a      	subs	r2, r3, r0
    424c:	0156      	lsls	r6, r2, #5
    424e:	d400      	bmi.n	4252 <__aeabi_fadd+0xfa>
    4250:	e0fb      	b.n	444a <__aeabi_fadd+0x2f2>
    4252:	000c      	movs	r4, r1
    4254:	1ac3      	subs	r3, r0, r3
    4256:	e03c      	b.n	42d2 <__aeabi_fadd+0x17a>
    4258:	2800      	cmp	r0, #0
    425a:	d100      	bne.n	425e <__aeabi_fadd+0x106>
    425c:	e0b7      	b.n	43ce <__aeabi_fadd+0x276>
    425e:	1e4a      	subs	r2, r1, #1
    4260:	2901      	cmp	r1, #1
    4262:	d100      	bne.n	4266 <__aeabi_fadd+0x10e>
    4264:	e0aa      	b.n	43bc <__aeabi_fadd+0x264>
    4266:	29ff      	cmp	r1, #255	; 0xff
    4268:	d038      	beq.n	42dc <__aeabi_fadd+0x184>
    426a:	0011      	movs	r1, r2
    426c:	e7b3      	b.n	41d6 <__aeabi_fadd+0x7e>
    426e:	0002      	movs	r2, r0
    4270:	2620      	movs	r6, #32
    4272:	40ca      	lsrs	r2, r1
    4274:	1a71      	subs	r1, r6, r1
    4276:	4088      	lsls	r0, r1
    4278:	1e41      	subs	r1, r0, #1
    427a:	4188      	sbcs	r0, r1
    427c:	4310      	orrs	r0, r2
    427e:	181b      	adds	r3, r3, r0
    4280:	015a      	lsls	r2, r3, #5
    4282:	d5c0      	bpl.n	4206 <__aeabi_fadd+0xae>
    4284:	3501      	adds	r5, #1
    4286:	2dff      	cmp	r5, #255	; 0xff
    4288:	d16c      	bne.n	4364 <__aeabi_fadd+0x20c>
    428a:	20ff      	movs	r0, #255	; 0xff
    428c:	2300      	movs	r3, #0
    428e:	e7ca      	b.n	4226 <__aeabi_fadd+0xce>
    4290:	0035      	movs	r5, r6
    4292:	08db      	lsrs	r3, r3, #3
    4294:	2dff      	cmp	r5, #255	; 0xff
    4296:	d144      	bne.n	4322 <__aeabi_fadd+0x1ca>
    4298:	2b00      	cmp	r3, #0
    429a:	d0f6      	beq.n	428a <__aeabi_fadd+0x132>
    429c:	2280      	movs	r2, #128	; 0x80
    429e:	03d2      	lsls	r2, r2, #15
    42a0:	4313      	orrs	r3, r2
    42a2:	025b      	lsls	r3, r3, #9
    42a4:	20ff      	movs	r0, #255	; 0xff
    42a6:	0a5b      	lsrs	r3, r3, #9
    42a8:	e7bd      	b.n	4226 <__aeabi_fadd+0xce>
    42aa:	019e      	lsls	r6, r3, #6
    42ac:	09b6      	lsrs	r6, r6, #6
    42ae:	0030      	movs	r0, r6
    42b0:	f000 fe38 	bl	4f24 <__clzsi2>
    42b4:	3805      	subs	r0, #5
    42b6:	4086      	lsls	r6, r0
    42b8:	4285      	cmp	r5, r0
    42ba:	dc20      	bgt.n	42fe <__aeabi_fadd+0x1a6>
    42bc:	2220      	movs	r2, #32
    42be:	1b40      	subs	r0, r0, r5
    42c0:	3001      	adds	r0, #1
    42c2:	1a12      	subs	r2, r2, r0
    42c4:	0033      	movs	r3, r6
    42c6:	4096      	lsls	r6, r2
    42c8:	40c3      	lsrs	r3, r0
    42ca:	1e72      	subs	r2, r6, #1
    42cc:	4196      	sbcs	r6, r2
    42ce:	2500      	movs	r5, #0
    42d0:	4333      	orrs	r3, r6
    42d2:	075a      	lsls	r2, r3, #29
    42d4:	d19a      	bne.n	420c <__aeabi_fadd+0xb4>
    42d6:	e79e      	b.n	4216 <__aeabi_fadd+0xbe>
    42d8:	000c      	movs	r4, r1
    42da:	0003      	movs	r3, r0
    42dc:	08db      	lsrs	r3, r3, #3
    42de:	e7db      	b.n	4298 <__aeabi_fadd+0x140>
    42e0:	2900      	cmp	r1, #0
    42e2:	d010      	beq.n	4306 <__aeabi_fadd+0x1ae>
    42e4:	1b51      	subs	r1, r2, r5
    42e6:	2d00      	cmp	r5, #0
    42e8:	d143      	bne.n	4372 <__aeabi_fadd+0x21a>
    42ea:	2b00      	cmp	r3, #0
    42ec:	d100      	bne.n	42f0 <__aeabi_fadd+0x198>
    42ee:	e093      	b.n	4418 <__aeabi_fadd+0x2c0>
    42f0:	1e4d      	subs	r5, r1, #1
    42f2:	2901      	cmp	r1, #1
    42f4:	d062      	beq.n	43bc <__aeabi_fadd+0x264>
    42f6:	29ff      	cmp	r1, #255	; 0xff
    42f8:	d0ef      	beq.n	42da <__aeabi_fadd+0x182>
    42fa:	0029      	movs	r1, r5
    42fc:	e03e      	b.n	437c <__aeabi_fadd+0x224>
    42fe:	4b55      	ldr	r3, [pc, #340]	; (4454 <__aeabi_fadd+0x2fc>)
    4300:	1a2d      	subs	r5, r5, r0
    4302:	4033      	ands	r3, r6
    4304:	e7e5      	b.n	42d2 <__aeabi_fadd+0x17a>
    4306:	21fe      	movs	r1, #254	; 0xfe
    4308:	1c6a      	adds	r2, r5, #1
    430a:	4211      	tst	r1, r2
    430c:	d13b      	bne.n	4386 <__aeabi_fadd+0x22e>
    430e:	2d00      	cmp	r5, #0
    4310:	d16a      	bne.n	43e8 <__aeabi_fadd+0x290>
    4312:	2b00      	cmp	r3, #0
    4314:	d100      	bne.n	4318 <__aeabi_fadd+0x1c0>
    4316:	e08e      	b.n	4436 <__aeabi_fadd+0x2de>
    4318:	2800      	cmp	r0, #0
    431a:	d000      	beq.n	431e <__aeabi_fadd+0x1c6>
    431c:	e08d      	b.n	443a <__aeabi_fadd+0x2e2>
    431e:	2500      	movs	r5, #0
    4320:	08db      	lsrs	r3, r3, #3
    4322:	025b      	lsls	r3, r3, #9
    4324:	0a5b      	lsrs	r3, r3, #9
    4326:	b2e8      	uxtb	r0, r5
    4328:	e77d      	b.n	4226 <__aeabi_fadd+0xce>
    432a:	2aff      	cmp	r2, #255	; 0xff
    432c:	d0d4      	beq.n	42d8 <__aeabi_fadd+0x180>
    432e:	2480      	movs	r4, #128	; 0x80
    4330:	04e4      	lsls	r4, r4, #19
    4332:	4323      	orrs	r3, r4
    4334:	2401      	movs	r4, #1
    4336:	2e1b      	cmp	r6, #27
    4338:	dc07      	bgt.n	434a <__aeabi_fadd+0x1f2>
    433a:	2520      	movs	r5, #32
    433c:	1bad      	subs	r5, r5, r6
    433e:	001c      	movs	r4, r3
    4340:	40ab      	lsls	r3, r5
    4342:	40f4      	lsrs	r4, r6
    4344:	1e5d      	subs	r5, r3, #1
    4346:	41ab      	sbcs	r3, r5
    4348:	431c      	orrs	r4, r3
    434a:	1b03      	subs	r3, r0, r4
    434c:	0015      	movs	r5, r2
    434e:	000c      	movs	r4, r1
    4350:	e757      	b.n	4202 <__aeabi_fadd+0xaa>
    4352:	1a1e      	subs	r6, r3, r0
    4354:	0172      	lsls	r2, r6, #5
    4356:	d42e      	bmi.n	43b6 <__aeabi_fadd+0x25e>
    4358:	2e00      	cmp	r6, #0
    435a:	d1a8      	bne.n	42ae <__aeabi_fadd+0x156>
    435c:	2400      	movs	r4, #0
    435e:	2000      	movs	r0, #0
    4360:	2300      	movs	r3, #0
    4362:	e760      	b.n	4226 <__aeabi_fadd+0xce>
    4364:	2201      	movs	r2, #1
    4366:	493c      	ldr	r1, [pc, #240]	; (4458 <__aeabi_fadd+0x300>)
    4368:	401a      	ands	r2, r3
    436a:	085b      	lsrs	r3, r3, #1
    436c:	400b      	ands	r3, r1
    436e:	4313      	orrs	r3, r2
    4370:	e7af      	b.n	42d2 <__aeabi_fadd+0x17a>
    4372:	2aff      	cmp	r2, #255	; 0xff
    4374:	d0b1      	beq.n	42da <__aeabi_fadd+0x182>
    4376:	2580      	movs	r5, #128	; 0x80
    4378:	04ed      	lsls	r5, r5, #19
    437a:	432b      	orrs	r3, r5
    437c:	291b      	cmp	r1, #27
    437e:	dd28      	ble.n	43d2 <__aeabi_fadd+0x27a>
    4380:	0015      	movs	r5, r2
    4382:	1c43      	adds	r3, r0, #1
    4384:	e742      	b.n	420c <__aeabi_fadd+0xb4>
    4386:	2aff      	cmp	r2, #255	; 0xff
    4388:	d100      	bne.n	438c <__aeabi_fadd+0x234>
    438a:	e77e      	b.n	428a <__aeabi_fadd+0x132>
    438c:	181b      	adds	r3, r3, r0
    438e:	085b      	lsrs	r3, r3, #1
    4390:	0015      	movs	r5, r2
    4392:	075a      	lsls	r2, r3, #29
    4394:	d000      	beq.n	4398 <__aeabi_fadd+0x240>
    4396:	e739      	b.n	420c <__aeabi_fadd+0xb4>
    4398:	08db      	lsrs	r3, r3, #3
    439a:	e7c2      	b.n	4322 <__aeabi_fadd+0x1ca>
    439c:	000c      	movs	r4, r1
    439e:	0035      	movs	r5, r6
    43a0:	0003      	movs	r3, r0
    43a2:	e776      	b.n	4292 <__aeabi_fadd+0x13a>
    43a4:	2b00      	cmp	r3, #0
    43a6:	d13a      	bne.n	441e <__aeabi_fadd+0x2c6>
    43a8:	2800      	cmp	r0, #0
    43aa:	d195      	bne.n	42d8 <__aeabi_fadd+0x180>
    43ac:	2380      	movs	r3, #128	; 0x80
    43ae:	2400      	movs	r4, #0
    43b0:	20ff      	movs	r0, #255	; 0xff
    43b2:	03db      	lsls	r3, r3, #15
    43b4:	e737      	b.n	4226 <__aeabi_fadd+0xce>
    43b6:	000c      	movs	r4, r1
    43b8:	1ac6      	subs	r6, r0, r3
    43ba:	e778      	b.n	42ae <__aeabi_fadd+0x156>
    43bc:	181b      	adds	r3, r3, r0
    43be:	2502      	movs	r5, #2
    43c0:	015a      	lsls	r2, r3, #5
    43c2:	d4cf      	bmi.n	4364 <__aeabi_fadd+0x20c>
    43c4:	3d01      	subs	r5, #1
    43c6:	e71e      	b.n	4206 <__aeabi_fadd+0xae>
    43c8:	2501      	movs	r5, #1
    43ca:	1a1b      	subs	r3, r3, r0
    43cc:	e719      	b.n	4202 <__aeabi_fadd+0xaa>
    43ce:	000d      	movs	r5, r1
    43d0:	e75f      	b.n	4292 <__aeabi_fadd+0x13a>
    43d2:	001d      	movs	r5, r3
    43d4:	2620      	movs	r6, #32
    43d6:	40cd      	lsrs	r5, r1
    43d8:	1a71      	subs	r1, r6, r1
    43da:	408b      	lsls	r3, r1
    43dc:	1e59      	subs	r1, r3, #1
    43de:	418b      	sbcs	r3, r1
    43e0:	432b      	orrs	r3, r5
    43e2:	181b      	adds	r3, r3, r0
    43e4:	0015      	movs	r5, r2
    43e6:	e74b      	b.n	4280 <__aeabi_fadd+0x128>
    43e8:	2b00      	cmp	r3, #0
    43ea:	d100      	bne.n	43ee <__aeabi_fadd+0x296>
    43ec:	e775      	b.n	42da <__aeabi_fadd+0x182>
    43ee:	2800      	cmp	r0, #0
    43f0:	d100      	bne.n	43f4 <__aeabi_fadd+0x29c>
    43f2:	e773      	b.n	42dc <__aeabi_fadd+0x184>
    43f4:	2280      	movs	r2, #128	; 0x80
    43f6:	03d2      	lsls	r2, r2, #15
    43f8:	4297      	cmp	r7, r2
    43fa:	d302      	bcc.n	4402 <__aeabi_fadd+0x2aa>
    43fc:	4594      	cmp	ip, r2
    43fe:	d200      	bcs.n	4402 <__aeabi_fadd+0x2aa>
    4400:	0003      	movs	r3, r0
    4402:	08db      	lsrs	r3, r3, #3
    4404:	e74a      	b.n	429c <__aeabi_fadd+0x144>
    4406:	2800      	cmp	r0, #0
    4408:	d0a8      	beq.n	435c <__aeabi_fadd+0x204>
    440a:	000c      	movs	r4, r1
    440c:	0003      	movs	r3, r0
    440e:	e786      	b.n	431e <__aeabi_fadd+0x1c6>
    4410:	000c      	movs	r4, r1
    4412:	1ac3      	subs	r3, r0, r3
    4414:	3501      	adds	r5, #1
    4416:	e6f4      	b.n	4202 <__aeabi_fadd+0xaa>
    4418:	000d      	movs	r5, r1
    441a:	0003      	movs	r3, r0
    441c:	e739      	b.n	4292 <__aeabi_fadd+0x13a>
    441e:	2800      	cmp	r0, #0
    4420:	d100      	bne.n	4424 <__aeabi_fadd+0x2cc>
    4422:	e75b      	b.n	42dc <__aeabi_fadd+0x184>
    4424:	2280      	movs	r2, #128	; 0x80
    4426:	03d2      	lsls	r2, r2, #15
    4428:	4297      	cmp	r7, r2
    442a:	d3ea      	bcc.n	4402 <__aeabi_fadd+0x2aa>
    442c:	4594      	cmp	ip, r2
    442e:	d2e8      	bcs.n	4402 <__aeabi_fadd+0x2aa>
    4430:	000c      	movs	r4, r1
    4432:	0003      	movs	r3, r0
    4434:	e7e5      	b.n	4402 <__aeabi_fadd+0x2aa>
    4436:	0003      	movs	r3, r0
    4438:	e771      	b.n	431e <__aeabi_fadd+0x1c6>
    443a:	181b      	adds	r3, r3, r0
    443c:	015a      	lsls	r2, r3, #5
    443e:	d5ab      	bpl.n	4398 <__aeabi_fadd+0x240>
    4440:	4a04      	ldr	r2, [pc, #16]	; (4454 <__aeabi_fadd+0x2fc>)
    4442:	3501      	adds	r5, #1
    4444:	4013      	ands	r3, r2
    4446:	08db      	lsrs	r3, r3, #3
    4448:	e76b      	b.n	4322 <__aeabi_fadd+0x1ca>
    444a:	1e13      	subs	r3, r2, #0
    444c:	d086      	beq.n	435c <__aeabi_fadd+0x204>
    444e:	08db      	lsrs	r3, r3, #3
    4450:	e767      	b.n	4322 <__aeabi_fadd+0x1ca>
    4452:	46c0      	nop			; (mov r8, r8)
    4454:	fbffffff 	.word	0xfbffffff
    4458:	7dffffff 	.word	0x7dffffff

0000445c <__aeabi_fdiv>:
    445c:	b5f0      	push	{r4, r5, r6, r7, lr}
    445e:	464f      	mov	r7, r9
    4460:	4646      	mov	r6, r8
    4462:	46d6      	mov	lr, sl
    4464:	0244      	lsls	r4, r0, #9
    4466:	b5c0      	push	{r6, r7, lr}
    4468:	0047      	lsls	r7, r0, #1
    446a:	1c0e      	adds	r6, r1, #0
    446c:	0a64      	lsrs	r4, r4, #9
    446e:	0e3f      	lsrs	r7, r7, #24
    4470:	0fc5      	lsrs	r5, r0, #31
    4472:	2f00      	cmp	r7, #0
    4474:	d03c      	beq.n	44f0 <__aeabi_fdiv+0x94>
    4476:	2fff      	cmp	r7, #255	; 0xff
    4478:	d042      	beq.n	4500 <__aeabi_fdiv+0xa4>
    447a:	2300      	movs	r3, #0
    447c:	2280      	movs	r2, #128	; 0x80
    447e:	4699      	mov	r9, r3
    4480:	469a      	mov	sl, r3
    4482:	00e4      	lsls	r4, r4, #3
    4484:	04d2      	lsls	r2, r2, #19
    4486:	4314      	orrs	r4, r2
    4488:	3f7f      	subs	r7, #127	; 0x7f
    448a:	0273      	lsls	r3, r6, #9
    448c:	0a5b      	lsrs	r3, r3, #9
    448e:	4698      	mov	r8, r3
    4490:	0073      	lsls	r3, r6, #1
    4492:	0e1b      	lsrs	r3, r3, #24
    4494:	0ff6      	lsrs	r6, r6, #31
    4496:	2b00      	cmp	r3, #0
    4498:	d01b      	beq.n	44d2 <__aeabi_fdiv+0x76>
    449a:	2bff      	cmp	r3, #255	; 0xff
    449c:	d013      	beq.n	44c6 <__aeabi_fdiv+0x6a>
    449e:	4642      	mov	r2, r8
    44a0:	2180      	movs	r1, #128	; 0x80
    44a2:	00d2      	lsls	r2, r2, #3
    44a4:	04c9      	lsls	r1, r1, #19
    44a6:	4311      	orrs	r1, r2
    44a8:	4688      	mov	r8, r1
    44aa:	2000      	movs	r0, #0
    44ac:	3b7f      	subs	r3, #127	; 0x7f
    44ae:	0029      	movs	r1, r5
    44b0:	1aff      	subs	r7, r7, r3
    44b2:	464b      	mov	r3, r9
    44b4:	4071      	eors	r1, r6
    44b6:	b2c9      	uxtb	r1, r1
    44b8:	2b0f      	cmp	r3, #15
    44ba:	d900      	bls.n	44be <__aeabi_fdiv+0x62>
    44bc:	e0b5      	b.n	462a <__aeabi_fdiv+0x1ce>
    44be:	4a74      	ldr	r2, [pc, #464]	; (4690 <__aeabi_fdiv+0x234>)
    44c0:	009b      	lsls	r3, r3, #2
    44c2:	58d3      	ldr	r3, [r2, r3]
    44c4:	469f      	mov	pc, r3
    44c6:	4643      	mov	r3, r8
    44c8:	2b00      	cmp	r3, #0
    44ca:	d13f      	bne.n	454c <__aeabi_fdiv+0xf0>
    44cc:	3fff      	subs	r7, #255	; 0xff
    44ce:	3302      	adds	r3, #2
    44d0:	e003      	b.n	44da <__aeabi_fdiv+0x7e>
    44d2:	4643      	mov	r3, r8
    44d4:	2b00      	cmp	r3, #0
    44d6:	d12d      	bne.n	4534 <__aeabi_fdiv+0xd8>
    44d8:	2301      	movs	r3, #1
    44da:	0029      	movs	r1, r5
    44dc:	464a      	mov	r2, r9
    44de:	4071      	eors	r1, r6
    44e0:	b2c9      	uxtb	r1, r1
    44e2:	431a      	orrs	r2, r3
    44e4:	2a0e      	cmp	r2, #14
    44e6:	d838      	bhi.n	455a <__aeabi_fdiv+0xfe>
    44e8:	486a      	ldr	r0, [pc, #424]	; (4694 <__aeabi_fdiv+0x238>)
    44ea:	0092      	lsls	r2, r2, #2
    44ec:	5882      	ldr	r2, [r0, r2]
    44ee:	4697      	mov	pc, r2
    44f0:	2c00      	cmp	r4, #0
    44f2:	d113      	bne.n	451c <__aeabi_fdiv+0xc0>
    44f4:	2304      	movs	r3, #4
    44f6:	4699      	mov	r9, r3
    44f8:	3b03      	subs	r3, #3
    44fa:	2700      	movs	r7, #0
    44fc:	469a      	mov	sl, r3
    44fe:	e7c4      	b.n	448a <__aeabi_fdiv+0x2e>
    4500:	2c00      	cmp	r4, #0
    4502:	d105      	bne.n	4510 <__aeabi_fdiv+0xb4>
    4504:	2308      	movs	r3, #8
    4506:	4699      	mov	r9, r3
    4508:	3b06      	subs	r3, #6
    450a:	27ff      	movs	r7, #255	; 0xff
    450c:	469a      	mov	sl, r3
    450e:	e7bc      	b.n	448a <__aeabi_fdiv+0x2e>
    4510:	230c      	movs	r3, #12
    4512:	4699      	mov	r9, r3
    4514:	3b09      	subs	r3, #9
    4516:	27ff      	movs	r7, #255	; 0xff
    4518:	469a      	mov	sl, r3
    451a:	e7b6      	b.n	448a <__aeabi_fdiv+0x2e>
    451c:	0020      	movs	r0, r4
    451e:	f000 fd01 	bl	4f24 <__clzsi2>
    4522:	2776      	movs	r7, #118	; 0x76
    4524:	1f43      	subs	r3, r0, #5
    4526:	409c      	lsls	r4, r3
    4528:	2300      	movs	r3, #0
    452a:	427f      	negs	r7, r7
    452c:	4699      	mov	r9, r3
    452e:	469a      	mov	sl, r3
    4530:	1a3f      	subs	r7, r7, r0
    4532:	e7aa      	b.n	448a <__aeabi_fdiv+0x2e>
    4534:	4640      	mov	r0, r8
    4536:	f000 fcf5 	bl	4f24 <__clzsi2>
    453a:	4642      	mov	r2, r8
    453c:	1f43      	subs	r3, r0, #5
    453e:	409a      	lsls	r2, r3
    4540:	2376      	movs	r3, #118	; 0x76
    4542:	425b      	negs	r3, r3
    4544:	1a1b      	subs	r3, r3, r0
    4546:	4690      	mov	r8, r2
    4548:	2000      	movs	r0, #0
    454a:	e7b0      	b.n	44ae <__aeabi_fdiv+0x52>
    454c:	2303      	movs	r3, #3
    454e:	464a      	mov	r2, r9
    4550:	431a      	orrs	r2, r3
    4552:	4691      	mov	r9, r2
    4554:	2003      	movs	r0, #3
    4556:	33fc      	adds	r3, #252	; 0xfc
    4558:	e7a9      	b.n	44ae <__aeabi_fdiv+0x52>
    455a:	000d      	movs	r5, r1
    455c:	20ff      	movs	r0, #255	; 0xff
    455e:	2200      	movs	r2, #0
    4560:	05c0      	lsls	r0, r0, #23
    4562:	07ed      	lsls	r5, r5, #31
    4564:	4310      	orrs	r0, r2
    4566:	4328      	orrs	r0, r5
    4568:	bce0      	pop	{r5, r6, r7}
    456a:	46ba      	mov	sl, r7
    456c:	46b1      	mov	r9, r6
    456e:	46a8      	mov	r8, r5
    4570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4572:	000d      	movs	r5, r1
    4574:	2000      	movs	r0, #0
    4576:	2200      	movs	r2, #0
    4578:	e7f2      	b.n	4560 <__aeabi_fdiv+0x104>
    457a:	4653      	mov	r3, sl
    457c:	2b02      	cmp	r3, #2
    457e:	d0ed      	beq.n	455c <__aeabi_fdiv+0x100>
    4580:	2b03      	cmp	r3, #3
    4582:	d033      	beq.n	45ec <__aeabi_fdiv+0x190>
    4584:	46a0      	mov	r8, r4
    4586:	2b01      	cmp	r3, #1
    4588:	d105      	bne.n	4596 <__aeabi_fdiv+0x13a>
    458a:	2000      	movs	r0, #0
    458c:	2200      	movs	r2, #0
    458e:	e7e7      	b.n	4560 <__aeabi_fdiv+0x104>
    4590:	0035      	movs	r5, r6
    4592:	2803      	cmp	r0, #3
    4594:	d07a      	beq.n	468c <__aeabi_fdiv+0x230>
    4596:	003b      	movs	r3, r7
    4598:	337f      	adds	r3, #127	; 0x7f
    459a:	2b00      	cmp	r3, #0
    459c:	dd2d      	ble.n	45fa <__aeabi_fdiv+0x19e>
    459e:	4642      	mov	r2, r8
    45a0:	0752      	lsls	r2, r2, #29
    45a2:	d007      	beq.n	45b4 <__aeabi_fdiv+0x158>
    45a4:	220f      	movs	r2, #15
    45a6:	4641      	mov	r1, r8
    45a8:	400a      	ands	r2, r1
    45aa:	2a04      	cmp	r2, #4
    45ac:	d002      	beq.n	45b4 <__aeabi_fdiv+0x158>
    45ae:	2204      	movs	r2, #4
    45b0:	4694      	mov	ip, r2
    45b2:	44e0      	add	r8, ip
    45b4:	4642      	mov	r2, r8
    45b6:	0112      	lsls	r2, r2, #4
    45b8:	d505      	bpl.n	45c6 <__aeabi_fdiv+0x16a>
    45ba:	4642      	mov	r2, r8
    45bc:	4b36      	ldr	r3, [pc, #216]	; (4698 <__aeabi_fdiv+0x23c>)
    45be:	401a      	ands	r2, r3
    45c0:	003b      	movs	r3, r7
    45c2:	4690      	mov	r8, r2
    45c4:	3380      	adds	r3, #128	; 0x80
    45c6:	2bfe      	cmp	r3, #254	; 0xfe
    45c8:	dcc8      	bgt.n	455c <__aeabi_fdiv+0x100>
    45ca:	4642      	mov	r2, r8
    45cc:	0192      	lsls	r2, r2, #6
    45ce:	0a52      	lsrs	r2, r2, #9
    45d0:	b2d8      	uxtb	r0, r3
    45d2:	e7c5      	b.n	4560 <__aeabi_fdiv+0x104>
    45d4:	2280      	movs	r2, #128	; 0x80
    45d6:	2500      	movs	r5, #0
    45d8:	20ff      	movs	r0, #255	; 0xff
    45da:	03d2      	lsls	r2, r2, #15
    45dc:	e7c0      	b.n	4560 <__aeabi_fdiv+0x104>
    45de:	2280      	movs	r2, #128	; 0x80
    45e0:	03d2      	lsls	r2, r2, #15
    45e2:	4214      	tst	r4, r2
    45e4:	d002      	beq.n	45ec <__aeabi_fdiv+0x190>
    45e6:	4643      	mov	r3, r8
    45e8:	4213      	tst	r3, r2
    45ea:	d049      	beq.n	4680 <__aeabi_fdiv+0x224>
    45ec:	2280      	movs	r2, #128	; 0x80
    45ee:	03d2      	lsls	r2, r2, #15
    45f0:	4322      	orrs	r2, r4
    45f2:	0252      	lsls	r2, r2, #9
    45f4:	20ff      	movs	r0, #255	; 0xff
    45f6:	0a52      	lsrs	r2, r2, #9
    45f8:	e7b2      	b.n	4560 <__aeabi_fdiv+0x104>
    45fa:	2201      	movs	r2, #1
    45fc:	1ad3      	subs	r3, r2, r3
    45fe:	2b1b      	cmp	r3, #27
    4600:	dcc3      	bgt.n	458a <__aeabi_fdiv+0x12e>
    4602:	4642      	mov	r2, r8
    4604:	40da      	lsrs	r2, r3
    4606:	4643      	mov	r3, r8
    4608:	379e      	adds	r7, #158	; 0x9e
    460a:	40bb      	lsls	r3, r7
    460c:	1e59      	subs	r1, r3, #1
    460e:	418b      	sbcs	r3, r1
    4610:	431a      	orrs	r2, r3
    4612:	0753      	lsls	r3, r2, #29
    4614:	d004      	beq.n	4620 <__aeabi_fdiv+0x1c4>
    4616:	230f      	movs	r3, #15
    4618:	4013      	ands	r3, r2
    461a:	2b04      	cmp	r3, #4
    461c:	d000      	beq.n	4620 <__aeabi_fdiv+0x1c4>
    461e:	3204      	adds	r2, #4
    4620:	0153      	lsls	r3, r2, #5
    4622:	d529      	bpl.n	4678 <__aeabi_fdiv+0x21c>
    4624:	2001      	movs	r0, #1
    4626:	2200      	movs	r2, #0
    4628:	e79a      	b.n	4560 <__aeabi_fdiv+0x104>
    462a:	4642      	mov	r2, r8
    462c:	0163      	lsls	r3, r4, #5
    462e:	0155      	lsls	r5, r2, #5
    4630:	42ab      	cmp	r3, r5
    4632:	d215      	bcs.n	4660 <__aeabi_fdiv+0x204>
    4634:	201b      	movs	r0, #27
    4636:	2200      	movs	r2, #0
    4638:	3f01      	subs	r7, #1
    463a:	2601      	movs	r6, #1
    463c:	001c      	movs	r4, r3
    463e:	0052      	lsls	r2, r2, #1
    4640:	005b      	lsls	r3, r3, #1
    4642:	2c00      	cmp	r4, #0
    4644:	db01      	blt.n	464a <__aeabi_fdiv+0x1ee>
    4646:	429d      	cmp	r5, r3
    4648:	d801      	bhi.n	464e <__aeabi_fdiv+0x1f2>
    464a:	1b5b      	subs	r3, r3, r5
    464c:	4332      	orrs	r2, r6
    464e:	3801      	subs	r0, #1
    4650:	2800      	cmp	r0, #0
    4652:	d1f3      	bne.n	463c <__aeabi_fdiv+0x1e0>
    4654:	1e58      	subs	r0, r3, #1
    4656:	4183      	sbcs	r3, r0
    4658:	4313      	orrs	r3, r2
    465a:	4698      	mov	r8, r3
    465c:	000d      	movs	r5, r1
    465e:	e79a      	b.n	4596 <__aeabi_fdiv+0x13a>
    4660:	201a      	movs	r0, #26
    4662:	2201      	movs	r2, #1
    4664:	1b5b      	subs	r3, r3, r5
    4666:	e7e8      	b.n	463a <__aeabi_fdiv+0x1de>
    4668:	3b02      	subs	r3, #2
    466a:	425a      	negs	r2, r3
    466c:	4153      	adcs	r3, r2
    466e:	425b      	negs	r3, r3
    4670:	0035      	movs	r5, r6
    4672:	2200      	movs	r2, #0
    4674:	b2d8      	uxtb	r0, r3
    4676:	e773      	b.n	4560 <__aeabi_fdiv+0x104>
    4678:	0192      	lsls	r2, r2, #6
    467a:	2000      	movs	r0, #0
    467c:	0a52      	lsrs	r2, r2, #9
    467e:	e76f      	b.n	4560 <__aeabi_fdiv+0x104>
    4680:	431a      	orrs	r2, r3
    4682:	0252      	lsls	r2, r2, #9
    4684:	0035      	movs	r5, r6
    4686:	20ff      	movs	r0, #255	; 0xff
    4688:	0a52      	lsrs	r2, r2, #9
    468a:	e769      	b.n	4560 <__aeabi_fdiv+0x104>
    468c:	4644      	mov	r4, r8
    468e:	e7ad      	b.n	45ec <__aeabi_fdiv+0x190>
    4690:	000053dc 	.word	0x000053dc
    4694:	0000541c 	.word	0x0000541c
    4698:	f7ffffff 	.word	0xf7ffffff

0000469c <__eqsf2>:
    469c:	b570      	push	{r4, r5, r6, lr}
    469e:	0042      	lsls	r2, r0, #1
    46a0:	024e      	lsls	r6, r1, #9
    46a2:	004c      	lsls	r4, r1, #1
    46a4:	0245      	lsls	r5, r0, #9
    46a6:	0a6d      	lsrs	r5, r5, #9
    46a8:	0e12      	lsrs	r2, r2, #24
    46aa:	0fc3      	lsrs	r3, r0, #31
    46ac:	0a76      	lsrs	r6, r6, #9
    46ae:	0e24      	lsrs	r4, r4, #24
    46b0:	0fc9      	lsrs	r1, r1, #31
    46b2:	2aff      	cmp	r2, #255	; 0xff
    46b4:	d010      	beq.n	46d8 <__eqsf2+0x3c>
    46b6:	2cff      	cmp	r4, #255	; 0xff
    46b8:	d00c      	beq.n	46d4 <__eqsf2+0x38>
    46ba:	2001      	movs	r0, #1
    46bc:	42a2      	cmp	r2, r4
    46be:	d10a      	bne.n	46d6 <__eqsf2+0x3a>
    46c0:	42b5      	cmp	r5, r6
    46c2:	d108      	bne.n	46d6 <__eqsf2+0x3a>
    46c4:	428b      	cmp	r3, r1
    46c6:	d00f      	beq.n	46e8 <__eqsf2+0x4c>
    46c8:	2a00      	cmp	r2, #0
    46ca:	d104      	bne.n	46d6 <__eqsf2+0x3a>
    46cc:	0028      	movs	r0, r5
    46ce:	1e43      	subs	r3, r0, #1
    46d0:	4198      	sbcs	r0, r3
    46d2:	e000      	b.n	46d6 <__eqsf2+0x3a>
    46d4:	2001      	movs	r0, #1
    46d6:	bd70      	pop	{r4, r5, r6, pc}
    46d8:	2001      	movs	r0, #1
    46da:	2cff      	cmp	r4, #255	; 0xff
    46dc:	d1fb      	bne.n	46d6 <__eqsf2+0x3a>
    46de:	4335      	orrs	r5, r6
    46e0:	d1f9      	bne.n	46d6 <__eqsf2+0x3a>
    46e2:	404b      	eors	r3, r1
    46e4:	0018      	movs	r0, r3
    46e6:	e7f6      	b.n	46d6 <__eqsf2+0x3a>
    46e8:	2000      	movs	r0, #0
    46ea:	e7f4      	b.n	46d6 <__eqsf2+0x3a>

000046ec <__gesf2>:
    46ec:	b530      	push	{r4, r5, lr}
    46ee:	0042      	lsls	r2, r0, #1
    46f0:	0244      	lsls	r4, r0, #9
    46f2:	024d      	lsls	r5, r1, #9
    46f4:	0fc3      	lsrs	r3, r0, #31
    46f6:	0048      	lsls	r0, r1, #1
    46f8:	0a64      	lsrs	r4, r4, #9
    46fa:	0e12      	lsrs	r2, r2, #24
    46fc:	0a6d      	lsrs	r5, r5, #9
    46fe:	0e00      	lsrs	r0, r0, #24
    4700:	0fc9      	lsrs	r1, r1, #31
    4702:	2aff      	cmp	r2, #255	; 0xff
    4704:	d019      	beq.n	473a <__gesf2+0x4e>
    4706:	28ff      	cmp	r0, #255	; 0xff
    4708:	d00b      	beq.n	4722 <__gesf2+0x36>
    470a:	2a00      	cmp	r2, #0
    470c:	d11e      	bne.n	474c <__gesf2+0x60>
    470e:	2800      	cmp	r0, #0
    4710:	d10b      	bne.n	472a <__gesf2+0x3e>
    4712:	2d00      	cmp	r5, #0
    4714:	d027      	beq.n	4766 <__gesf2+0x7a>
    4716:	2c00      	cmp	r4, #0
    4718:	d134      	bne.n	4784 <__gesf2+0x98>
    471a:	2900      	cmp	r1, #0
    471c:	d02f      	beq.n	477e <__gesf2+0x92>
    471e:	0008      	movs	r0, r1
    4720:	bd30      	pop	{r4, r5, pc}
    4722:	2d00      	cmp	r5, #0
    4724:	d128      	bne.n	4778 <__gesf2+0x8c>
    4726:	2a00      	cmp	r2, #0
    4728:	d101      	bne.n	472e <__gesf2+0x42>
    472a:	2c00      	cmp	r4, #0
    472c:	d0f5      	beq.n	471a <__gesf2+0x2e>
    472e:	428b      	cmp	r3, r1
    4730:	d107      	bne.n	4742 <__gesf2+0x56>
    4732:	2b00      	cmp	r3, #0
    4734:	d023      	beq.n	477e <__gesf2+0x92>
    4736:	0018      	movs	r0, r3
    4738:	e7f2      	b.n	4720 <__gesf2+0x34>
    473a:	2c00      	cmp	r4, #0
    473c:	d11c      	bne.n	4778 <__gesf2+0x8c>
    473e:	28ff      	cmp	r0, #255	; 0xff
    4740:	d014      	beq.n	476c <__gesf2+0x80>
    4742:	1e58      	subs	r0, r3, #1
    4744:	2302      	movs	r3, #2
    4746:	4018      	ands	r0, r3
    4748:	3801      	subs	r0, #1
    474a:	e7e9      	b.n	4720 <__gesf2+0x34>
    474c:	2800      	cmp	r0, #0
    474e:	d0f8      	beq.n	4742 <__gesf2+0x56>
    4750:	428b      	cmp	r3, r1
    4752:	d1f6      	bne.n	4742 <__gesf2+0x56>
    4754:	4282      	cmp	r2, r0
    4756:	dcf4      	bgt.n	4742 <__gesf2+0x56>
    4758:	dbeb      	blt.n	4732 <__gesf2+0x46>
    475a:	42ac      	cmp	r4, r5
    475c:	d8f1      	bhi.n	4742 <__gesf2+0x56>
    475e:	2000      	movs	r0, #0
    4760:	42ac      	cmp	r4, r5
    4762:	d2dd      	bcs.n	4720 <__gesf2+0x34>
    4764:	e7e5      	b.n	4732 <__gesf2+0x46>
    4766:	2c00      	cmp	r4, #0
    4768:	d0da      	beq.n	4720 <__gesf2+0x34>
    476a:	e7ea      	b.n	4742 <__gesf2+0x56>
    476c:	2d00      	cmp	r5, #0
    476e:	d103      	bne.n	4778 <__gesf2+0x8c>
    4770:	428b      	cmp	r3, r1
    4772:	d1e6      	bne.n	4742 <__gesf2+0x56>
    4774:	2000      	movs	r0, #0
    4776:	e7d3      	b.n	4720 <__gesf2+0x34>
    4778:	2002      	movs	r0, #2
    477a:	4240      	negs	r0, r0
    477c:	e7d0      	b.n	4720 <__gesf2+0x34>
    477e:	2001      	movs	r0, #1
    4780:	4240      	negs	r0, r0
    4782:	e7cd      	b.n	4720 <__gesf2+0x34>
    4784:	428b      	cmp	r3, r1
    4786:	d0e8      	beq.n	475a <__gesf2+0x6e>
    4788:	e7db      	b.n	4742 <__gesf2+0x56>
    478a:	46c0      	nop			; (mov r8, r8)

0000478c <__lesf2>:
    478c:	b530      	push	{r4, r5, lr}
    478e:	0042      	lsls	r2, r0, #1
    4790:	0244      	lsls	r4, r0, #9
    4792:	024d      	lsls	r5, r1, #9
    4794:	0fc3      	lsrs	r3, r0, #31
    4796:	0048      	lsls	r0, r1, #1
    4798:	0a64      	lsrs	r4, r4, #9
    479a:	0e12      	lsrs	r2, r2, #24
    479c:	0a6d      	lsrs	r5, r5, #9
    479e:	0e00      	lsrs	r0, r0, #24
    47a0:	0fc9      	lsrs	r1, r1, #31
    47a2:	2aff      	cmp	r2, #255	; 0xff
    47a4:	d01a      	beq.n	47dc <__lesf2+0x50>
    47a6:	28ff      	cmp	r0, #255	; 0xff
    47a8:	d00e      	beq.n	47c8 <__lesf2+0x3c>
    47aa:	2a00      	cmp	r2, #0
    47ac:	d11e      	bne.n	47ec <__lesf2+0x60>
    47ae:	2800      	cmp	r0, #0
    47b0:	d10e      	bne.n	47d0 <__lesf2+0x44>
    47b2:	2d00      	cmp	r5, #0
    47b4:	d02a      	beq.n	480c <__lesf2+0x80>
    47b6:	2c00      	cmp	r4, #0
    47b8:	d00c      	beq.n	47d4 <__lesf2+0x48>
    47ba:	428b      	cmp	r3, r1
    47bc:	d01d      	beq.n	47fa <__lesf2+0x6e>
    47be:	1e58      	subs	r0, r3, #1
    47c0:	2302      	movs	r3, #2
    47c2:	4018      	ands	r0, r3
    47c4:	3801      	subs	r0, #1
    47c6:	e010      	b.n	47ea <__lesf2+0x5e>
    47c8:	2d00      	cmp	r5, #0
    47ca:	d10d      	bne.n	47e8 <__lesf2+0x5c>
    47cc:	2a00      	cmp	r2, #0
    47ce:	d120      	bne.n	4812 <__lesf2+0x86>
    47d0:	2c00      	cmp	r4, #0
    47d2:	d11e      	bne.n	4812 <__lesf2+0x86>
    47d4:	2900      	cmp	r1, #0
    47d6:	d023      	beq.n	4820 <__lesf2+0x94>
    47d8:	0008      	movs	r0, r1
    47da:	e006      	b.n	47ea <__lesf2+0x5e>
    47dc:	2c00      	cmp	r4, #0
    47de:	d103      	bne.n	47e8 <__lesf2+0x5c>
    47e0:	28ff      	cmp	r0, #255	; 0xff
    47e2:	d1ec      	bne.n	47be <__lesf2+0x32>
    47e4:	2d00      	cmp	r5, #0
    47e6:	d017      	beq.n	4818 <__lesf2+0x8c>
    47e8:	2002      	movs	r0, #2
    47ea:	bd30      	pop	{r4, r5, pc}
    47ec:	2800      	cmp	r0, #0
    47ee:	d0e6      	beq.n	47be <__lesf2+0x32>
    47f0:	428b      	cmp	r3, r1
    47f2:	d1e4      	bne.n	47be <__lesf2+0x32>
    47f4:	4282      	cmp	r2, r0
    47f6:	dce2      	bgt.n	47be <__lesf2+0x32>
    47f8:	db04      	blt.n	4804 <__lesf2+0x78>
    47fa:	42ac      	cmp	r4, r5
    47fc:	d8df      	bhi.n	47be <__lesf2+0x32>
    47fe:	2000      	movs	r0, #0
    4800:	42ac      	cmp	r4, r5
    4802:	d2f2      	bcs.n	47ea <__lesf2+0x5e>
    4804:	2b00      	cmp	r3, #0
    4806:	d00b      	beq.n	4820 <__lesf2+0x94>
    4808:	0018      	movs	r0, r3
    480a:	e7ee      	b.n	47ea <__lesf2+0x5e>
    480c:	2c00      	cmp	r4, #0
    480e:	d0ec      	beq.n	47ea <__lesf2+0x5e>
    4810:	e7d5      	b.n	47be <__lesf2+0x32>
    4812:	428b      	cmp	r3, r1
    4814:	d1d3      	bne.n	47be <__lesf2+0x32>
    4816:	e7f5      	b.n	4804 <__lesf2+0x78>
    4818:	2000      	movs	r0, #0
    481a:	428b      	cmp	r3, r1
    481c:	d0e5      	beq.n	47ea <__lesf2+0x5e>
    481e:	e7ce      	b.n	47be <__lesf2+0x32>
    4820:	2001      	movs	r0, #1
    4822:	4240      	negs	r0, r0
    4824:	e7e1      	b.n	47ea <__lesf2+0x5e>
    4826:	46c0      	nop			; (mov r8, r8)

00004828 <__aeabi_fmul>:
    4828:	b5f0      	push	{r4, r5, r6, r7, lr}
    482a:	464f      	mov	r7, r9
    482c:	4646      	mov	r6, r8
    482e:	46d6      	mov	lr, sl
    4830:	0243      	lsls	r3, r0, #9
    4832:	0a5b      	lsrs	r3, r3, #9
    4834:	4699      	mov	r9, r3
    4836:	0043      	lsls	r3, r0, #1
    4838:	b5c0      	push	{r6, r7, lr}
    483a:	0e1b      	lsrs	r3, r3, #24
    483c:	1c0e      	adds	r6, r1, #0
    483e:	0fc5      	lsrs	r5, r0, #31
    4840:	2b00      	cmp	r3, #0
    4842:	d100      	bne.n	4846 <__aeabi_fmul+0x1e>
    4844:	e085      	b.n	4952 <__aeabi_fmul+0x12a>
    4846:	2bff      	cmp	r3, #255	; 0xff
    4848:	d100      	bne.n	484c <__aeabi_fmul+0x24>
    484a:	e08b      	b.n	4964 <__aeabi_fmul+0x13c>
    484c:	464a      	mov	r2, r9
    484e:	2180      	movs	r1, #128	; 0x80
    4850:	00d2      	lsls	r2, r2, #3
    4852:	04c9      	lsls	r1, r1, #19
    4854:	4311      	orrs	r1, r2
    4856:	227f      	movs	r2, #127	; 0x7f
    4858:	4252      	negs	r2, r2
    485a:	4690      	mov	r8, r2
    485c:	4498      	add	r8, r3
    485e:	2300      	movs	r3, #0
    4860:	4689      	mov	r9, r1
    4862:	2700      	movs	r7, #0
    4864:	469a      	mov	sl, r3
    4866:	0274      	lsls	r4, r6, #9
    4868:	0073      	lsls	r3, r6, #1
    486a:	0a64      	lsrs	r4, r4, #9
    486c:	0e1b      	lsrs	r3, r3, #24
    486e:	0ff6      	lsrs	r6, r6, #31
    4870:	2b00      	cmp	r3, #0
    4872:	d064      	beq.n	493e <__aeabi_fmul+0x116>
    4874:	2bff      	cmp	r3, #255	; 0xff
    4876:	d01f      	beq.n	48b8 <__aeabi_fmul+0x90>
    4878:	2280      	movs	r2, #128	; 0x80
    487a:	3b7f      	subs	r3, #127	; 0x7f
    487c:	00e4      	lsls	r4, r4, #3
    487e:	04d2      	lsls	r2, r2, #19
    4880:	4443      	add	r3, r8
    4882:	2000      	movs	r0, #0
    4884:	4314      	orrs	r4, r2
    4886:	1c59      	adds	r1, r3, #1
    4888:	2f0a      	cmp	r7, #10
    488a:	dc2b      	bgt.n	48e4 <__aeabi_fmul+0xbc>
    488c:	4075      	eors	r5, r6
    488e:	2f02      	cmp	r7, #2
    4890:	dc22      	bgt.n	48d8 <__aeabi_fmul+0xb0>
    4892:	3f01      	subs	r7, #1
    4894:	2f01      	cmp	r7, #1
    4896:	d900      	bls.n	489a <__aeabi_fmul+0x72>
    4898:	e0bb      	b.n	4a12 <__aeabi_fmul+0x1ea>
    489a:	2802      	cmp	r0, #2
    489c:	d06b      	beq.n	4976 <__aeabi_fmul+0x14e>
    489e:	2801      	cmp	r0, #1
    48a0:	d12a      	bne.n	48f8 <__aeabi_fmul+0xd0>
    48a2:	2000      	movs	r0, #0
    48a4:	2200      	movs	r2, #0
    48a6:	05c0      	lsls	r0, r0, #23
    48a8:	07ed      	lsls	r5, r5, #31
    48aa:	4310      	orrs	r0, r2
    48ac:	4328      	orrs	r0, r5
    48ae:	bce0      	pop	{r5, r6, r7}
    48b0:	46ba      	mov	sl, r7
    48b2:	46b1      	mov	r9, r6
    48b4:	46a8      	mov	r8, r5
    48b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48b8:	2c00      	cmp	r4, #0
    48ba:	d064      	beq.n	4986 <__aeabi_fmul+0x15e>
    48bc:	2203      	movs	r2, #3
    48be:	4641      	mov	r1, r8
    48c0:	4643      	mov	r3, r8
    48c2:	4317      	orrs	r7, r2
    48c4:	002a      	movs	r2, r5
    48c6:	3101      	adds	r1, #1
    48c8:	33ff      	adds	r3, #255	; 0xff
    48ca:	4072      	eors	r2, r6
    48cc:	31ff      	adds	r1, #255	; 0xff
    48ce:	2f0a      	cmp	r7, #10
    48d0:	dd00      	ble.n	48d4 <__aeabi_fmul+0xac>
    48d2:	e0d7      	b.n	4a84 <__aeabi_fmul+0x25c>
    48d4:	0015      	movs	r5, r2
    48d6:	2003      	movs	r0, #3
    48d8:	2201      	movs	r2, #1
    48da:	40ba      	lsls	r2, r7
    48dc:	27a6      	movs	r7, #166	; 0xa6
    48de:	00ff      	lsls	r7, r7, #3
    48e0:	423a      	tst	r2, r7
    48e2:	d020      	beq.n	4926 <__aeabi_fmul+0xfe>
    48e4:	4653      	mov	r3, sl
    48e6:	2b02      	cmp	r3, #2
    48e8:	d045      	beq.n	4976 <__aeabi_fmul+0x14e>
    48ea:	2b03      	cmp	r3, #3
    48ec:	d100      	bne.n	48f0 <__aeabi_fmul+0xc8>
    48ee:	e0bb      	b.n	4a68 <__aeabi_fmul+0x240>
    48f0:	4650      	mov	r0, sl
    48f2:	464c      	mov	r4, r9
    48f4:	2801      	cmp	r0, #1
    48f6:	d0d4      	beq.n	48a2 <__aeabi_fmul+0x7a>
    48f8:	000b      	movs	r3, r1
    48fa:	337f      	adds	r3, #127	; 0x7f
    48fc:	2b00      	cmp	r3, #0
    48fe:	dd70      	ble.n	49e2 <__aeabi_fmul+0x1ba>
    4900:	0762      	lsls	r2, r4, #29
    4902:	d004      	beq.n	490e <__aeabi_fmul+0xe6>
    4904:	220f      	movs	r2, #15
    4906:	4022      	ands	r2, r4
    4908:	2a04      	cmp	r2, #4
    490a:	d000      	beq.n	490e <__aeabi_fmul+0xe6>
    490c:	3404      	adds	r4, #4
    490e:	0122      	lsls	r2, r4, #4
    4910:	d503      	bpl.n	491a <__aeabi_fmul+0xf2>
    4912:	4b63      	ldr	r3, [pc, #396]	; (4aa0 <__aeabi_fmul+0x278>)
    4914:	401c      	ands	r4, r3
    4916:	000b      	movs	r3, r1
    4918:	3380      	adds	r3, #128	; 0x80
    491a:	2bfe      	cmp	r3, #254	; 0xfe
    491c:	dc2b      	bgt.n	4976 <__aeabi_fmul+0x14e>
    491e:	01a2      	lsls	r2, r4, #6
    4920:	0a52      	lsrs	r2, r2, #9
    4922:	b2d8      	uxtb	r0, r3
    4924:	e7bf      	b.n	48a6 <__aeabi_fmul+0x7e>
    4926:	2790      	movs	r7, #144	; 0x90
    4928:	00bf      	lsls	r7, r7, #2
    492a:	423a      	tst	r2, r7
    492c:	d126      	bne.n	497c <__aeabi_fmul+0x154>
    492e:	3fb9      	subs	r7, #185	; 0xb9
    4930:	3fff      	subs	r7, #255	; 0xff
    4932:	4217      	tst	r7, r2
    4934:	d06d      	beq.n	4a12 <__aeabi_fmul+0x1ea>
    4936:	0035      	movs	r5, r6
    4938:	46a1      	mov	r9, r4
    493a:	4682      	mov	sl, r0
    493c:	e7d2      	b.n	48e4 <__aeabi_fmul+0xbc>
    493e:	2c00      	cmp	r4, #0
    4940:	d141      	bne.n	49c6 <__aeabi_fmul+0x19e>
    4942:	2301      	movs	r3, #1
    4944:	431f      	orrs	r7, r3
    4946:	4643      	mov	r3, r8
    4948:	2001      	movs	r0, #1
    494a:	1c59      	adds	r1, r3, #1
    494c:	2f0a      	cmp	r7, #10
    494e:	dd9d      	ble.n	488c <__aeabi_fmul+0x64>
    4950:	e7c8      	b.n	48e4 <__aeabi_fmul+0xbc>
    4952:	464b      	mov	r3, r9
    4954:	2b00      	cmp	r3, #0
    4956:	d127      	bne.n	49a8 <__aeabi_fmul+0x180>
    4958:	2300      	movs	r3, #0
    495a:	4698      	mov	r8, r3
    495c:	3301      	adds	r3, #1
    495e:	2704      	movs	r7, #4
    4960:	469a      	mov	sl, r3
    4962:	e780      	b.n	4866 <__aeabi_fmul+0x3e>
    4964:	464b      	mov	r3, r9
    4966:	2b00      	cmp	r3, #0
    4968:	d118      	bne.n	499c <__aeabi_fmul+0x174>
    496a:	23ff      	movs	r3, #255	; 0xff
    496c:	4698      	mov	r8, r3
    496e:	3bfd      	subs	r3, #253	; 0xfd
    4970:	2708      	movs	r7, #8
    4972:	469a      	mov	sl, r3
    4974:	e777      	b.n	4866 <__aeabi_fmul+0x3e>
    4976:	20ff      	movs	r0, #255	; 0xff
    4978:	2200      	movs	r2, #0
    497a:	e794      	b.n	48a6 <__aeabi_fmul+0x7e>
    497c:	2280      	movs	r2, #128	; 0x80
    497e:	2500      	movs	r5, #0
    4980:	20ff      	movs	r0, #255	; 0xff
    4982:	03d2      	lsls	r2, r2, #15
    4984:	e78f      	b.n	48a6 <__aeabi_fmul+0x7e>
    4986:	2302      	movs	r3, #2
    4988:	431f      	orrs	r7, r3
    498a:	4643      	mov	r3, r8
    498c:	1c59      	adds	r1, r3, #1
    498e:	31ff      	adds	r1, #255	; 0xff
    4990:	2f0a      	cmp	r7, #10
    4992:	dca7      	bgt.n	48e4 <__aeabi_fmul+0xbc>
    4994:	2002      	movs	r0, #2
    4996:	33ff      	adds	r3, #255	; 0xff
    4998:	4075      	eors	r5, r6
    499a:	e778      	b.n	488e <__aeabi_fmul+0x66>
    499c:	23ff      	movs	r3, #255	; 0xff
    499e:	4698      	mov	r8, r3
    49a0:	3bfc      	subs	r3, #252	; 0xfc
    49a2:	270c      	movs	r7, #12
    49a4:	469a      	mov	sl, r3
    49a6:	e75e      	b.n	4866 <__aeabi_fmul+0x3e>
    49a8:	4648      	mov	r0, r9
    49aa:	f000 fabb 	bl	4f24 <__clzsi2>
    49ae:	464a      	mov	r2, r9
    49b0:	1f43      	subs	r3, r0, #5
    49b2:	409a      	lsls	r2, r3
    49b4:	2376      	movs	r3, #118	; 0x76
    49b6:	425b      	negs	r3, r3
    49b8:	1a1b      	subs	r3, r3, r0
    49ba:	4698      	mov	r8, r3
    49bc:	2300      	movs	r3, #0
    49be:	4691      	mov	r9, r2
    49c0:	2700      	movs	r7, #0
    49c2:	469a      	mov	sl, r3
    49c4:	e74f      	b.n	4866 <__aeabi_fmul+0x3e>
    49c6:	0020      	movs	r0, r4
    49c8:	f000 faac 	bl	4f24 <__clzsi2>
    49cc:	1f43      	subs	r3, r0, #5
    49ce:	409c      	lsls	r4, r3
    49d0:	4643      	mov	r3, r8
    49d2:	1a1b      	subs	r3, r3, r0
    49d4:	3b76      	subs	r3, #118	; 0x76
    49d6:	2000      	movs	r0, #0
    49d8:	1c59      	adds	r1, r3, #1
    49da:	2f0a      	cmp	r7, #10
    49dc:	dc00      	bgt.n	49e0 <__aeabi_fmul+0x1b8>
    49de:	e755      	b.n	488c <__aeabi_fmul+0x64>
    49e0:	e780      	b.n	48e4 <__aeabi_fmul+0xbc>
    49e2:	2201      	movs	r2, #1
    49e4:	1ad3      	subs	r3, r2, r3
    49e6:	2b1b      	cmp	r3, #27
    49e8:	dd00      	ble.n	49ec <__aeabi_fmul+0x1c4>
    49ea:	e75a      	b.n	48a2 <__aeabi_fmul+0x7a>
    49ec:	319e      	adds	r1, #158	; 0x9e
    49ee:	0022      	movs	r2, r4
    49f0:	408c      	lsls	r4, r1
    49f2:	40da      	lsrs	r2, r3
    49f4:	1e63      	subs	r3, r4, #1
    49f6:	419c      	sbcs	r4, r3
    49f8:	4322      	orrs	r2, r4
    49fa:	0753      	lsls	r3, r2, #29
    49fc:	d004      	beq.n	4a08 <__aeabi_fmul+0x1e0>
    49fe:	230f      	movs	r3, #15
    4a00:	4013      	ands	r3, r2
    4a02:	2b04      	cmp	r3, #4
    4a04:	d000      	beq.n	4a08 <__aeabi_fmul+0x1e0>
    4a06:	3204      	adds	r2, #4
    4a08:	0153      	lsls	r3, r2, #5
    4a0a:	d537      	bpl.n	4a7c <__aeabi_fmul+0x254>
    4a0c:	2001      	movs	r0, #1
    4a0e:	2200      	movs	r2, #0
    4a10:	e749      	b.n	48a6 <__aeabi_fmul+0x7e>
    4a12:	0c20      	lsrs	r0, r4, #16
    4a14:	464a      	mov	r2, r9
    4a16:	0424      	lsls	r4, r4, #16
    4a18:	0c24      	lsrs	r4, r4, #16
    4a1a:	0027      	movs	r7, r4
    4a1c:	0c16      	lsrs	r6, r2, #16
    4a1e:	0412      	lsls	r2, r2, #16
    4a20:	0c12      	lsrs	r2, r2, #16
    4a22:	4374      	muls	r4, r6
    4a24:	4357      	muls	r7, r2
    4a26:	4346      	muls	r6, r0
    4a28:	4350      	muls	r0, r2
    4a2a:	0c3a      	lsrs	r2, r7, #16
    4a2c:	1900      	adds	r0, r0, r4
    4a2e:	1812      	adds	r2, r2, r0
    4a30:	4294      	cmp	r4, r2
    4a32:	d903      	bls.n	4a3c <__aeabi_fmul+0x214>
    4a34:	2080      	movs	r0, #128	; 0x80
    4a36:	0240      	lsls	r0, r0, #9
    4a38:	4684      	mov	ip, r0
    4a3a:	4466      	add	r6, ip
    4a3c:	043f      	lsls	r7, r7, #16
    4a3e:	0410      	lsls	r0, r2, #16
    4a40:	0c3f      	lsrs	r7, r7, #16
    4a42:	19c0      	adds	r0, r0, r7
    4a44:	0184      	lsls	r4, r0, #6
    4a46:	1e67      	subs	r7, r4, #1
    4a48:	41bc      	sbcs	r4, r7
    4a4a:	0c12      	lsrs	r2, r2, #16
    4a4c:	0e80      	lsrs	r0, r0, #26
    4a4e:	1992      	adds	r2, r2, r6
    4a50:	4304      	orrs	r4, r0
    4a52:	0192      	lsls	r2, r2, #6
    4a54:	4314      	orrs	r4, r2
    4a56:	0112      	lsls	r2, r2, #4
    4a58:	d50e      	bpl.n	4a78 <__aeabi_fmul+0x250>
    4a5a:	2301      	movs	r3, #1
    4a5c:	0862      	lsrs	r2, r4, #1
    4a5e:	401c      	ands	r4, r3
    4a60:	4314      	orrs	r4, r2
    4a62:	e749      	b.n	48f8 <__aeabi_fmul+0xd0>
    4a64:	0035      	movs	r5, r6
    4a66:	46a1      	mov	r9, r4
    4a68:	2280      	movs	r2, #128	; 0x80
    4a6a:	464b      	mov	r3, r9
    4a6c:	03d2      	lsls	r2, r2, #15
    4a6e:	431a      	orrs	r2, r3
    4a70:	0252      	lsls	r2, r2, #9
    4a72:	20ff      	movs	r0, #255	; 0xff
    4a74:	0a52      	lsrs	r2, r2, #9
    4a76:	e716      	b.n	48a6 <__aeabi_fmul+0x7e>
    4a78:	0019      	movs	r1, r3
    4a7a:	e73d      	b.n	48f8 <__aeabi_fmul+0xd0>
    4a7c:	0192      	lsls	r2, r2, #6
    4a7e:	2000      	movs	r0, #0
    4a80:	0a52      	lsrs	r2, r2, #9
    4a82:	e710      	b.n	48a6 <__aeabi_fmul+0x7e>
    4a84:	2f0f      	cmp	r7, #15
    4a86:	d1ed      	bne.n	4a64 <__aeabi_fmul+0x23c>
    4a88:	2280      	movs	r2, #128	; 0x80
    4a8a:	464b      	mov	r3, r9
    4a8c:	03d2      	lsls	r2, r2, #15
    4a8e:	4213      	tst	r3, r2
    4a90:	d0ea      	beq.n	4a68 <__aeabi_fmul+0x240>
    4a92:	4214      	tst	r4, r2
    4a94:	d1e8      	bne.n	4a68 <__aeabi_fmul+0x240>
    4a96:	0035      	movs	r5, r6
    4a98:	20ff      	movs	r0, #255	; 0xff
    4a9a:	4322      	orrs	r2, r4
    4a9c:	e703      	b.n	48a6 <__aeabi_fmul+0x7e>
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	f7ffffff 	.word	0xf7ffffff

00004aa4 <__aeabi_fsub>:
    4aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aa6:	0243      	lsls	r3, r0, #9
    4aa8:	0045      	lsls	r5, r0, #1
    4aaa:	0fc4      	lsrs	r4, r0, #31
    4aac:	0248      	lsls	r0, r1, #9
    4aae:	0a42      	lsrs	r2, r0, #9
    4ab0:	4694      	mov	ip, r2
    4ab2:	004a      	lsls	r2, r1, #1
    4ab4:	0a5e      	lsrs	r6, r3, #9
    4ab6:	0e2d      	lsrs	r5, r5, #24
    4ab8:	099b      	lsrs	r3, r3, #6
    4aba:	0e12      	lsrs	r2, r2, #24
    4abc:	0fc9      	lsrs	r1, r1, #31
    4abe:	0980      	lsrs	r0, r0, #6
    4ac0:	2aff      	cmp	r2, #255	; 0xff
    4ac2:	d023      	beq.n	4b0c <__aeabi_fsub+0x68>
    4ac4:	2701      	movs	r7, #1
    4ac6:	4079      	eors	r1, r7
    4ac8:	1aaf      	subs	r7, r5, r2
    4aca:	428c      	cmp	r4, r1
    4acc:	d00f      	beq.n	4aee <__aeabi_fsub+0x4a>
    4ace:	2f00      	cmp	r7, #0
    4ad0:	dc00      	bgt.n	4ad4 <__aeabi_fsub+0x30>
    4ad2:	e15d      	b.n	4d90 <__aeabi_fsub+0x2ec>
    4ad4:	2a00      	cmp	r2, #0
    4ad6:	d12f      	bne.n	4b38 <__aeabi_fsub+0x94>
    4ad8:	2800      	cmp	r0, #0
    4ada:	d100      	bne.n	4ade <__aeabi_fsub+0x3a>
    4adc:	e090      	b.n	4c00 <__aeabi_fsub+0x15c>
    4ade:	1e7a      	subs	r2, r7, #1
    4ae0:	2f01      	cmp	r7, #1
    4ae2:	d100      	bne.n	4ae6 <__aeabi_fsub+0x42>
    4ae4:	e11a      	b.n	4d1c <__aeabi_fsub+0x278>
    4ae6:	2fff      	cmp	r7, #255	; 0xff
    4ae8:	d01c      	beq.n	4b24 <__aeabi_fsub+0x80>
    4aea:	0017      	movs	r7, r2
    4aec:	e029      	b.n	4b42 <__aeabi_fsub+0x9e>
    4aee:	2f00      	cmp	r7, #0
    4af0:	dc00      	bgt.n	4af4 <__aeabi_fsub+0x50>
    4af2:	e159      	b.n	4da8 <__aeabi_fsub+0x304>
    4af4:	2a00      	cmp	r2, #0
    4af6:	d052      	beq.n	4b9e <__aeabi_fsub+0xfa>
    4af8:	2dff      	cmp	r5, #255	; 0xff
    4afa:	d013      	beq.n	4b24 <__aeabi_fsub+0x80>
    4afc:	2280      	movs	r2, #128	; 0x80
    4afe:	04d2      	lsls	r2, r2, #19
    4b00:	4310      	orrs	r0, r2
    4b02:	2f1b      	cmp	r7, #27
    4b04:	dc00      	bgt.n	4b08 <__aeabi_fsub+0x64>
    4b06:	e06a      	b.n	4bde <__aeabi_fsub+0x13a>
    4b08:	3301      	adds	r3, #1
    4b0a:	e02b      	b.n	4b64 <__aeabi_fsub+0xc0>
    4b0c:	2800      	cmp	r0, #0
    4b0e:	d03b      	beq.n	4b88 <__aeabi_fsub+0xe4>
    4b10:	428c      	cmp	r4, r1
    4b12:	d04d      	beq.n	4bb0 <__aeabi_fsub+0x10c>
    4b14:	2dff      	cmp	r5, #255	; 0xff
    4b16:	d100      	bne.n	4b1a <__aeabi_fsub+0x76>
    4b18:	e08f      	b.n	4c3a <__aeabi_fsub+0x196>
    4b1a:	2d00      	cmp	r5, #0
    4b1c:	d100      	bne.n	4b20 <__aeabi_fsub+0x7c>
    4b1e:	e0ab      	b.n	4c78 <__aeabi_fsub+0x1d4>
    4b20:	000c      	movs	r4, r1
    4b22:	0003      	movs	r3, r0
    4b24:	08db      	lsrs	r3, r3, #3
    4b26:	2b00      	cmp	r3, #0
    4b28:	d067      	beq.n	4bfa <__aeabi_fsub+0x156>
    4b2a:	2280      	movs	r2, #128	; 0x80
    4b2c:	03d2      	lsls	r2, r2, #15
    4b2e:	4313      	orrs	r3, r2
    4b30:	025b      	lsls	r3, r3, #9
    4b32:	20ff      	movs	r0, #255	; 0xff
    4b34:	0a5b      	lsrs	r3, r3, #9
    4b36:	e022      	b.n	4b7e <__aeabi_fsub+0xda>
    4b38:	2dff      	cmp	r5, #255	; 0xff
    4b3a:	d0f3      	beq.n	4b24 <__aeabi_fsub+0x80>
    4b3c:	2280      	movs	r2, #128	; 0x80
    4b3e:	04d2      	lsls	r2, r2, #19
    4b40:	4310      	orrs	r0, r2
    4b42:	2201      	movs	r2, #1
    4b44:	2f1b      	cmp	r7, #27
    4b46:	dc07      	bgt.n	4b58 <__aeabi_fsub+0xb4>
    4b48:	2120      	movs	r1, #32
    4b4a:	1bc9      	subs	r1, r1, r7
    4b4c:	0002      	movs	r2, r0
    4b4e:	4088      	lsls	r0, r1
    4b50:	40fa      	lsrs	r2, r7
    4b52:	1e41      	subs	r1, r0, #1
    4b54:	4188      	sbcs	r0, r1
    4b56:	4302      	orrs	r2, r0
    4b58:	1a9b      	subs	r3, r3, r2
    4b5a:	015a      	lsls	r2, r3, #5
    4b5c:	d456      	bmi.n	4c0c <__aeabi_fsub+0x168>
    4b5e:	2207      	movs	r2, #7
    4b60:	401a      	ands	r2, r3
    4b62:	d04e      	beq.n	4c02 <__aeabi_fsub+0x15e>
    4b64:	220f      	movs	r2, #15
    4b66:	401a      	ands	r2, r3
    4b68:	2a04      	cmp	r2, #4
    4b6a:	d000      	beq.n	4b6e <__aeabi_fsub+0xca>
    4b6c:	3304      	adds	r3, #4
    4b6e:	015a      	lsls	r2, r3, #5
    4b70:	d547      	bpl.n	4c02 <__aeabi_fsub+0x15e>
    4b72:	1c68      	adds	r0, r5, #1
    4b74:	2dfe      	cmp	r5, #254	; 0xfe
    4b76:	d040      	beq.n	4bfa <__aeabi_fsub+0x156>
    4b78:	019b      	lsls	r3, r3, #6
    4b7a:	0a5b      	lsrs	r3, r3, #9
    4b7c:	b2c0      	uxtb	r0, r0
    4b7e:	05c0      	lsls	r0, r0, #23
    4b80:	4318      	orrs	r0, r3
    4b82:	07e4      	lsls	r4, r4, #31
    4b84:	4320      	orrs	r0, r4
    4b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b88:	2701      	movs	r7, #1
    4b8a:	4079      	eors	r1, r7
    4b8c:	428c      	cmp	r4, r1
    4b8e:	d1c1      	bne.n	4b14 <__aeabi_fsub+0x70>
    4b90:	2dff      	cmp	r5, #255	; 0xff
    4b92:	d010      	beq.n	4bb6 <__aeabi_fsub+0x112>
    4b94:	2d00      	cmp	r5, #0
    4b96:	d100      	bne.n	4b9a <__aeabi_fsub+0xf6>
    4b98:	e0e7      	b.n	4d6a <__aeabi_fsub+0x2c6>
    4b9a:	2300      	movs	r3, #0
    4b9c:	e7c2      	b.n	4b24 <__aeabi_fsub+0x80>
    4b9e:	2800      	cmp	r0, #0
    4ba0:	d02e      	beq.n	4c00 <__aeabi_fsub+0x15c>
    4ba2:	1e7a      	subs	r2, r7, #1
    4ba4:	2f01      	cmp	r7, #1
    4ba6:	d07f      	beq.n	4ca8 <__aeabi_fsub+0x204>
    4ba8:	2fff      	cmp	r7, #255	; 0xff
    4baa:	d0bb      	beq.n	4b24 <__aeabi_fsub+0x80>
    4bac:	0017      	movs	r7, r2
    4bae:	e7a8      	b.n	4b02 <__aeabi_fsub+0x5e>
    4bb0:	2dff      	cmp	r5, #255	; 0xff
    4bb2:	d000      	beq.n	4bb6 <__aeabi_fsub+0x112>
    4bb4:	e083      	b.n	4cbe <__aeabi_fsub+0x21a>
    4bb6:	27fe      	movs	r7, #254	; 0xfe
    4bb8:	1c6a      	adds	r2, r5, #1
    4bba:	4217      	tst	r7, r2
    4bbc:	d000      	beq.n	4bc0 <__aeabi_fsub+0x11c>
    4bbe:	e08d      	b.n	4cdc <__aeabi_fsub+0x238>
    4bc0:	2d00      	cmp	r5, #0
    4bc2:	d000      	beq.n	4bc6 <__aeabi_fsub+0x122>
    4bc4:	e0ad      	b.n	4d22 <__aeabi_fsub+0x27e>
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d100      	bne.n	4bcc <__aeabi_fsub+0x128>
    4bca:	e0d2      	b.n	4d72 <__aeabi_fsub+0x2ce>
    4bcc:	2800      	cmp	r0, #0
    4bce:	d000      	beq.n	4bd2 <__aeabi_fsub+0x12e>
    4bd0:	e0d1      	b.n	4d76 <__aeabi_fsub+0x2d2>
    4bd2:	2500      	movs	r5, #0
    4bd4:	08db      	lsrs	r3, r3, #3
    4bd6:	025b      	lsls	r3, r3, #9
    4bd8:	0a5b      	lsrs	r3, r3, #9
    4bda:	b2e8      	uxtb	r0, r5
    4bdc:	e7cf      	b.n	4b7e <__aeabi_fsub+0xda>
    4bde:	2120      	movs	r1, #32
    4be0:	1bc9      	subs	r1, r1, r7
    4be2:	0002      	movs	r2, r0
    4be4:	4088      	lsls	r0, r1
    4be6:	40fa      	lsrs	r2, r7
    4be8:	1e41      	subs	r1, r0, #1
    4bea:	4188      	sbcs	r0, r1
    4bec:	4310      	orrs	r0, r2
    4bee:	181b      	adds	r3, r3, r0
    4bf0:	015a      	lsls	r2, r3, #5
    4bf2:	d5b4      	bpl.n	4b5e <__aeabi_fsub+0xba>
    4bf4:	3501      	adds	r5, #1
    4bf6:	2dff      	cmp	r5, #255	; 0xff
    4bf8:	d15a      	bne.n	4cb0 <__aeabi_fsub+0x20c>
    4bfa:	20ff      	movs	r0, #255	; 0xff
    4bfc:	2300      	movs	r3, #0
    4bfe:	e7be      	b.n	4b7e <__aeabi_fsub+0xda>
    4c00:	003d      	movs	r5, r7
    4c02:	08db      	lsrs	r3, r3, #3
    4c04:	2dff      	cmp	r5, #255	; 0xff
    4c06:	d100      	bne.n	4c0a <__aeabi_fsub+0x166>
    4c08:	e78d      	b.n	4b26 <__aeabi_fsub+0x82>
    4c0a:	e7e4      	b.n	4bd6 <__aeabi_fsub+0x132>
    4c0c:	019e      	lsls	r6, r3, #6
    4c0e:	09b6      	lsrs	r6, r6, #6
    4c10:	0030      	movs	r0, r6
    4c12:	f000 f987 	bl	4f24 <__clzsi2>
    4c16:	3805      	subs	r0, #5
    4c18:	4086      	lsls	r6, r0
    4c1a:	4285      	cmp	r5, r0
    4c1c:	dc1f      	bgt.n	4c5e <__aeabi_fsub+0x1ba>
    4c1e:	2220      	movs	r2, #32
    4c20:	1b40      	subs	r0, r0, r5
    4c22:	3001      	adds	r0, #1
    4c24:	1a12      	subs	r2, r2, r0
    4c26:	0033      	movs	r3, r6
    4c28:	4096      	lsls	r6, r2
    4c2a:	40c3      	lsrs	r3, r0
    4c2c:	1e72      	subs	r2, r6, #1
    4c2e:	4196      	sbcs	r6, r2
    4c30:	2500      	movs	r5, #0
    4c32:	4333      	orrs	r3, r6
    4c34:	075a      	lsls	r2, r3, #29
    4c36:	d195      	bne.n	4b64 <__aeabi_fsub+0xc0>
    4c38:	e799      	b.n	4b6e <__aeabi_fsub+0xca>
    4c3a:	27fe      	movs	r7, #254	; 0xfe
    4c3c:	1c6a      	adds	r2, r5, #1
    4c3e:	4217      	tst	r7, r2
    4c40:	d111      	bne.n	4c66 <__aeabi_fsub+0x1c2>
    4c42:	2d00      	cmp	r5, #0
    4c44:	d15a      	bne.n	4cfc <__aeabi_fsub+0x258>
    4c46:	2b00      	cmp	r3, #0
    4c48:	d100      	bne.n	4c4c <__aeabi_fsub+0x1a8>
    4c4a:	e089      	b.n	4d60 <__aeabi_fsub+0x2bc>
    4c4c:	2800      	cmp	r0, #0
    4c4e:	d0c0      	beq.n	4bd2 <__aeabi_fsub+0x12e>
    4c50:	1a1a      	subs	r2, r3, r0
    4c52:	0156      	lsls	r6, r2, #5
    4c54:	d400      	bmi.n	4c58 <__aeabi_fsub+0x1b4>
    4c56:	e096      	b.n	4d86 <__aeabi_fsub+0x2e2>
    4c58:	000c      	movs	r4, r1
    4c5a:	1ac3      	subs	r3, r0, r3
    4c5c:	e7ea      	b.n	4c34 <__aeabi_fsub+0x190>
    4c5e:	4b58      	ldr	r3, [pc, #352]	; (4dc0 <__aeabi_fsub+0x31c>)
    4c60:	1a2d      	subs	r5, r5, r0
    4c62:	4033      	ands	r3, r6
    4c64:	e7e6      	b.n	4c34 <__aeabi_fsub+0x190>
    4c66:	1a1e      	subs	r6, r3, r0
    4c68:	0172      	lsls	r2, r6, #5
    4c6a:	d444      	bmi.n	4cf6 <__aeabi_fsub+0x252>
    4c6c:	2e00      	cmp	r6, #0
    4c6e:	d1cf      	bne.n	4c10 <__aeabi_fsub+0x16c>
    4c70:	2400      	movs	r4, #0
    4c72:	2000      	movs	r0, #0
    4c74:	2300      	movs	r3, #0
    4c76:	e782      	b.n	4b7e <__aeabi_fsub+0xda>
    4c78:	25ff      	movs	r5, #255	; 0xff
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d038      	beq.n	4cf0 <__aeabi_fsub+0x24c>
    4c7e:	1e6e      	subs	r6, r5, #1
    4c80:	2d01      	cmp	r5, #1
    4c82:	d06a      	beq.n	4d5a <__aeabi_fsub+0x2b6>
    4c84:	2dff      	cmp	r5, #255	; 0xff
    4c86:	d100      	bne.n	4c8a <__aeabi_fsub+0x1e6>
    4c88:	e74a      	b.n	4b20 <__aeabi_fsub+0x7c>
    4c8a:	2401      	movs	r4, #1
    4c8c:	2e1b      	cmp	r6, #27
    4c8e:	dc07      	bgt.n	4ca0 <__aeabi_fsub+0x1fc>
    4c90:	2520      	movs	r5, #32
    4c92:	1bad      	subs	r5, r5, r6
    4c94:	001c      	movs	r4, r3
    4c96:	40ab      	lsls	r3, r5
    4c98:	40f4      	lsrs	r4, r6
    4c9a:	1e5d      	subs	r5, r3, #1
    4c9c:	41ab      	sbcs	r3, r5
    4c9e:	431c      	orrs	r4, r3
    4ca0:	1b03      	subs	r3, r0, r4
    4ca2:	0015      	movs	r5, r2
    4ca4:	000c      	movs	r4, r1
    4ca6:	e758      	b.n	4b5a <__aeabi_fsub+0xb6>
    4ca8:	181b      	adds	r3, r3, r0
    4caa:	2502      	movs	r5, #2
    4cac:	015a      	lsls	r2, r3, #5
    4cae:	d533      	bpl.n	4d18 <__aeabi_fsub+0x274>
    4cb0:	2201      	movs	r2, #1
    4cb2:	4944      	ldr	r1, [pc, #272]	; (4dc4 <__aeabi_fsub+0x320>)
    4cb4:	401a      	ands	r2, r3
    4cb6:	085b      	lsrs	r3, r3, #1
    4cb8:	400b      	ands	r3, r1
    4cba:	4313      	orrs	r3, r2
    4cbc:	e7ba      	b.n	4c34 <__aeabi_fsub+0x190>
    4cbe:	2d00      	cmp	r5, #0
    4cc0:	d131      	bne.n	4d26 <__aeabi_fsub+0x282>
    4cc2:	35ff      	adds	r5, #255	; 0xff
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d052      	beq.n	4d6e <__aeabi_fsub+0x2ca>
    4cc8:	1e69      	subs	r1, r5, #1
    4cca:	2d01      	cmp	r5, #1
    4ccc:	d020      	beq.n	4d10 <__aeabi_fsub+0x26c>
    4cce:	2dff      	cmp	r5, #255	; 0xff
    4cd0:	d029      	beq.n	4d26 <__aeabi_fsub+0x282>
    4cd2:	291b      	cmp	r1, #27
    4cd4:	dd36      	ble.n	4d44 <__aeabi_fsub+0x2a0>
    4cd6:	0015      	movs	r5, r2
    4cd8:	1c43      	adds	r3, r0, #1
    4cda:	e743      	b.n	4b64 <__aeabi_fsub+0xc0>
    4cdc:	2aff      	cmp	r2, #255	; 0xff
    4cde:	d08c      	beq.n	4bfa <__aeabi_fsub+0x156>
    4ce0:	181b      	adds	r3, r3, r0
    4ce2:	085b      	lsrs	r3, r3, #1
    4ce4:	0015      	movs	r5, r2
    4ce6:	075a      	lsls	r2, r3, #29
    4ce8:	d000      	beq.n	4cec <__aeabi_fsub+0x248>
    4cea:	e73b      	b.n	4b64 <__aeabi_fsub+0xc0>
    4cec:	08db      	lsrs	r3, r3, #3
    4cee:	e772      	b.n	4bd6 <__aeabi_fsub+0x132>
    4cf0:	000c      	movs	r4, r1
    4cf2:	0003      	movs	r3, r0
    4cf4:	e785      	b.n	4c02 <__aeabi_fsub+0x15e>
    4cf6:	000c      	movs	r4, r1
    4cf8:	1ac6      	subs	r6, r0, r3
    4cfa:	e789      	b.n	4c10 <__aeabi_fsub+0x16c>
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	d114      	bne.n	4d2a <__aeabi_fsub+0x286>
    4d00:	2800      	cmp	r0, #0
    4d02:	d000      	beq.n	4d06 <__aeabi_fsub+0x262>
    4d04:	e70c      	b.n	4b20 <__aeabi_fsub+0x7c>
    4d06:	2380      	movs	r3, #128	; 0x80
    4d08:	2400      	movs	r4, #0
    4d0a:	20ff      	movs	r0, #255	; 0xff
    4d0c:	03db      	lsls	r3, r3, #15
    4d0e:	e736      	b.n	4b7e <__aeabi_fsub+0xda>
    4d10:	181b      	adds	r3, r3, r0
    4d12:	3501      	adds	r5, #1
    4d14:	015a      	lsls	r2, r3, #5
    4d16:	d4cb      	bmi.n	4cb0 <__aeabi_fsub+0x20c>
    4d18:	3d01      	subs	r5, #1
    4d1a:	e720      	b.n	4b5e <__aeabi_fsub+0xba>
    4d1c:	2501      	movs	r5, #1
    4d1e:	1a1b      	subs	r3, r3, r0
    4d20:	e71b      	b.n	4b5a <__aeabi_fsub+0xb6>
    4d22:	2b00      	cmp	r3, #0
    4d24:	d101      	bne.n	4d2a <__aeabi_fsub+0x286>
    4d26:	0003      	movs	r3, r0
    4d28:	e6fc      	b.n	4b24 <__aeabi_fsub+0x80>
    4d2a:	2800      	cmp	r0, #0
    4d2c:	d100      	bne.n	4d30 <__aeabi_fsub+0x28c>
    4d2e:	e6f9      	b.n	4b24 <__aeabi_fsub+0x80>
    4d30:	2280      	movs	r2, #128	; 0x80
    4d32:	03d2      	lsls	r2, r2, #15
    4d34:	4296      	cmp	r6, r2
    4d36:	d303      	bcc.n	4d40 <__aeabi_fsub+0x29c>
    4d38:	4594      	cmp	ip, r2
    4d3a:	d201      	bcs.n	4d40 <__aeabi_fsub+0x29c>
    4d3c:	000c      	movs	r4, r1
    4d3e:	0003      	movs	r3, r0
    4d40:	08db      	lsrs	r3, r3, #3
    4d42:	e6f2      	b.n	4b2a <__aeabi_fsub+0x86>
    4d44:	001d      	movs	r5, r3
    4d46:	2620      	movs	r6, #32
    4d48:	40cd      	lsrs	r5, r1
    4d4a:	1a71      	subs	r1, r6, r1
    4d4c:	408b      	lsls	r3, r1
    4d4e:	1e59      	subs	r1, r3, #1
    4d50:	418b      	sbcs	r3, r1
    4d52:	432b      	orrs	r3, r5
    4d54:	181b      	adds	r3, r3, r0
    4d56:	0015      	movs	r5, r2
    4d58:	e74a      	b.n	4bf0 <__aeabi_fsub+0x14c>
    4d5a:	000c      	movs	r4, r1
    4d5c:	1ac3      	subs	r3, r0, r3
    4d5e:	e6fc      	b.n	4b5a <__aeabi_fsub+0xb6>
    4d60:	2800      	cmp	r0, #0
    4d62:	d085      	beq.n	4c70 <__aeabi_fsub+0x1cc>
    4d64:	000c      	movs	r4, r1
    4d66:	0003      	movs	r3, r0
    4d68:	e733      	b.n	4bd2 <__aeabi_fsub+0x12e>
    4d6a:	25ff      	movs	r5, #255	; 0xff
    4d6c:	e7aa      	b.n	4cc4 <__aeabi_fsub+0x220>
    4d6e:	0003      	movs	r3, r0
    4d70:	e747      	b.n	4c02 <__aeabi_fsub+0x15e>
    4d72:	0003      	movs	r3, r0
    4d74:	e72d      	b.n	4bd2 <__aeabi_fsub+0x12e>
    4d76:	181b      	adds	r3, r3, r0
    4d78:	015a      	lsls	r2, r3, #5
    4d7a:	d5b7      	bpl.n	4cec <__aeabi_fsub+0x248>
    4d7c:	4a10      	ldr	r2, [pc, #64]	; (4dc0 <__aeabi_fsub+0x31c>)
    4d7e:	3501      	adds	r5, #1
    4d80:	4013      	ands	r3, r2
    4d82:	08db      	lsrs	r3, r3, #3
    4d84:	e727      	b.n	4bd6 <__aeabi_fsub+0x132>
    4d86:	1e13      	subs	r3, r2, #0
    4d88:	d100      	bne.n	4d8c <__aeabi_fsub+0x2e8>
    4d8a:	e771      	b.n	4c70 <__aeabi_fsub+0x1cc>
    4d8c:	08db      	lsrs	r3, r3, #3
    4d8e:	e722      	b.n	4bd6 <__aeabi_fsub+0x132>
    4d90:	2f00      	cmp	r7, #0
    4d92:	d100      	bne.n	4d96 <__aeabi_fsub+0x2f2>
    4d94:	e751      	b.n	4c3a <__aeabi_fsub+0x196>
    4d96:	1b56      	subs	r6, r2, r5
    4d98:	2d00      	cmp	r5, #0
    4d9a:	d101      	bne.n	4da0 <__aeabi_fsub+0x2fc>
    4d9c:	0035      	movs	r5, r6
    4d9e:	e76c      	b.n	4c7a <__aeabi_fsub+0x1d6>
    4da0:	2480      	movs	r4, #128	; 0x80
    4da2:	04e4      	lsls	r4, r4, #19
    4da4:	4323      	orrs	r3, r4
    4da6:	e770      	b.n	4c8a <__aeabi_fsub+0x1e6>
    4da8:	2f00      	cmp	r7, #0
    4daa:	d100      	bne.n	4dae <__aeabi_fsub+0x30a>
    4dac:	e703      	b.n	4bb6 <__aeabi_fsub+0x112>
    4dae:	1b51      	subs	r1, r2, r5
    4db0:	2d00      	cmp	r5, #0
    4db2:	d101      	bne.n	4db8 <__aeabi_fsub+0x314>
    4db4:	000d      	movs	r5, r1
    4db6:	e785      	b.n	4cc4 <__aeabi_fsub+0x220>
    4db8:	2580      	movs	r5, #128	; 0x80
    4dba:	04ed      	lsls	r5, r5, #19
    4dbc:	432b      	orrs	r3, r5
    4dbe:	e788      	b.n	4cd2 <__aeabi_fsub+0x22e>
    4dc0:	fbffffff 	.word	0xfbffffff
    4dc4:	7dffffff 	.word	0x7dffffff

00004dc8 <__aeabi_f2iz>:
    4dc8:	0241      	lsls	r1, r0, #9
    4dca:	0042      	lsls	r2, r0, #1
    4dcc:	0fc3      	lsrs	r3, r0, #31
    4dce:	0a49      	lsrs	r1, r1, #9
    4dd0:	2000      	movs	r0, #0
    4dd2:	0e12      	lsrs	r2, r2, #24
    4dd4:	2a7e      	cmp	r2, #126	; 0x7e
    4dd6:	dd03      	ble.n	4de0 <__aeabi_f2iz+0x18>
    4dd8:	2a9d      	cmp	r2, #157	; 0x9d
    4dda:	dd02      	ble.n	4de2 <__aeabi_f2iz+0x1a>
    4ddc:	4a09      	ldr	r2, [pc, #36]	; (4e04 <__aeabi_f2iz+0x3c>)
    4dde:	1898      	adds	r0, r3, r2
    4de0:	4770      	bx	lr
    4de2:	2080      	movs	r0, #128	; 0x80
    4de4:	0400      	lsls	r0, r0, #16
    4de6:	4301      	orrs	r1, r0
    4de8:	2a95      	cmp	r2, #149	; 0x95
    4dea:	dc07      	bgt.n	4dfc <__aeabi_f2iz+0x34>
    4dec:	2096      	movs	r0, #150	; 0x96
    4dee:	1a82      	subs	r2, r0, r2
    4df0:	40d1      	lsrs	r1, r2
    4df2:	4248      	negs	r0, r1
    4df4:	2b00      	cmp	r3, #0
    4df6:	d1f3      	bne.n	4de0 <__aeabi_f2iz+0x18>
    4df8:	0008      	movs	r0, r1
    4dfa:	e7f1      	b.n	4de0 <__aeabi_f2iz+0x18>
    4dfc:	3a96      	subs	r2, #150	; 0x96
    4dfe:	4091      	lsls	r1, r2
    4e00:	e7f7      	b.n	4df2 <__aeabi_f2iz+0x2a>
    4e02:	46c0      	nop			; (mov r8, r8)
    4e04:	7fffffff 	.word	0x7fffffff

00004e08 <__aeabi_i2f>:
    4e08:	b570      	push	{r4, r5, r6, lr}
    4e0a:	2800      	cmp	r0, #0
    4e0c:	d013      	beq.n	4e36 <__aeabi_i2f+0x2e>
    4e0e:	17c3      	asrs	r3, r0, #31
    4e10:	18c5      	adds	r5, r0, r3
    4e12:	405d      	eors	r5, r3
    4e14:	0fc4      	lsrs	r4, r0, #31
    4e16:	0028      	movs	r0, r5
    4e18:	f000 f884 	bl	4f24 <__clzsi2>
    4e1c:	239e      	movs	r3, #158	; 0x9e
    4e1e:	0001      	movs	r1, r0
    4e20:	1a1b      	subs	r3, r3, r0
    4e22:	2b96      	cmp	r3, #150	; 0x96
    4e24:	dc0f      	bgt.n	4e46 <__aeabi_i2f+0x3e>
    4e26:	2808      	cmp	r0, #8
    4e28:	d034      	beq.n	4e94 <__aeabi_i2f+0x8c>
    4e2a:	3908      	subs	r1, #8
    4e2c:	408d      	lsls	r5, r1
    4e2e:	026d      	lsls	r5, r5, #9
    4e30:	0a6d      	lsrs	r5, r5, #9
    4e32:	b2d8      	uxtb	r0, r3
    4e34:	e002      	b.n	4e3c <__aeabi_i2f+0x34>
    4e36:	2400      	movs	r4, #0
    4e38:	2000      	movs	r0, #0
    4e3a:	2500      	movs	r5, #0
    4e3c:	05c0      	lsls	r0, r0, #23
    4e3e:	4328      	orrs	r0, r5
    4e40:	07e4      	lsls	r4, r4, #31
    4e42:	4320      	orrs	r0, r4
    4e44:	bd70      	pop	{r4, r5, r6, pc}
    4e46:	2b99      	cmp	r3, #153	; 0x99
    4e48:	dc16      	bgt.n	4e78 <__aeabi_i2f+0x70>
    4e4a:	1f42      	subs	r2, r0, #5
    4e4c:	2805      	cmp	r0, #5
    4e4e:	d000      	beq.n	4e52 <__aeabi_i2f+0x4a>
    4e50:	4095      	lsls	r5, r2
    4e52:	002a      	movs	r2, r5
    4e54:	4811      	ldr	r0, [pc, #68]	; (4e9c <__aeabi_i2f+0x94>)
    4e56:	4002      	ands	r2, r0
    4e58:	076e      	lsls	r6, r5, #29
    4e5a:	d009      	beq.n	4e70 <__aeabi_i2f+0x68>
    4e5c:	260f      	movs	r6, #15
    4e5e:	4035      	ands	r5, r6
    4e60:	2d04      	cmp	r5, #4
    4e62:	d005      	beq.n	4e70 <__aeabi_i2f+0x68>
    4e64:	3204      	adds	r2, #4
    4e66:	0155      	lsls	r5, r2, #5
    4e68:	d502      	bpl.n	4e70 <__aeabi_i2f+0x68>
    4e6a:	239f      	movs	r3, #159	; 0x9f
    4e6c:	4002      	ands	r2, r0
    4e6e:	1a5b      	subs	r3, r3, r1
    4e70:	0192      	lsls	r2, r2, #6
    4e72:	0a55      	lsrs	r5, r2, #9
    4e74:	b2d8      	uxtb	r0, r3
    4e76:	e7e1      	b.n	4e3c <__aeabi_i2f+0x34>
    4e78:	2205      	movs	r2, #5
    4e7a:	1a12      	subs	r2, r2, r0
    4e7c:	0028      	movs	r0, r5
    4e7e:	40d0      	lsrs	r0, r2
    4e80:	0002      	movs	r2, r0
    4e82:	0008      	movs	r0, r1
    4e84:	301b      	adds	r0, #27
    4e86:	4085      	lsls	r5, r0
    4e88:	0028      	movs	r0, r5
    4e8a:	1e45      	subs	r5, r0, #1
    4e8c:	41a8      	sbcs	r0, r5
    4e8e:	4302      	orrs	r2, r0
    4e90:	0015      	movs	r5, r2
    4e92:	e7de      	b.n	4e52 <__aeabi_i2f+0x4a>
    4e94:	026d      	lsls	r5, r5, #9
    4e96:	2096      	movs	r0, #150	; 0x96
    4e98:	0a6d      	lsrs	r5, r5, #9
    4e9a:	e7cf      	b.n	4e3c <__aeabi_i2f+0x34>
    4e9c:	fbffffff 	.word	0xfbffffff

00004ea0 <__aeabi_ui2f>:
    4ea0:	b570      	push	{r4, r5, r6, lr}
    4ea2:	1e04      	subs	r4, r0, #0
    4ea4:	d00e      	beq.n	4ec4 <__aeabi_ui2f+0x24>
    4ea6:	f000 f83d 	bl	4f24 <__clzsi2>
    4eaa:	239e      	movs	r3, #158	; 0x9e
    4eac:	0001      	movs	r1, r0
    4eae:	1a1b      	subs	r3, r3, r0
    4eb0:	2b96      	cmp	r3, #150	; 0x96
    4eb2:	dc0c      	bgt.n	4ece <__aeabi_ui2f+0x2e>
    4eb4:	2808      	cmp	r0, #8
    4eb6:	d02f      	beq.n	4f18 <__aeabi_ui2f+0x78>
    4eb8:	3908      	subs	r1, #8
    4eba:	408c      	lsls	r4, r1
    4ebc:	0264      	lsls	r4, r4, #9
    4ebe:	0a64      	lsrs	r4, r4, #9
    4ec0:	b2d8      	uxtb	r0, r3
    4ec2:	e001      	b.n	4ec8 <__aeabi_ui2f+0x28>
    4ec4:	2000      	movs	r0, #0
    4ec6:	2400      	movs	r4, #0
    4ec8:	05c0      	lsls	r0, r0, #23
    4eca:	4320      	orrs	r0, r4
    4ecc:	bd70      	pop	{r4, r5, r6, pc}
    4ece:	2b99      	cmp	r3, #153	; 0x99
    4ed0:	dc16      	bgt.n	4f00 <__aeabi_ui2f+0x60>
    4ed2:	1f42      	subs	r2, r0, #5
    4ed4:	2805      	cmp	r0, #5
    4ed6:	d000      	beq.n	4eda <__aeabi_ui2f+0x3a>
    4ed8:	4094      	lsls	r4, r2
    4eda:	0022      	movs	r2, r4
    4edc:	4810      	ldr	r0, [pc, #64]	; (4f20 <__aeabi_ui2f+0x80>)
    4ede:	4002      	ands	r2, r0
    4ee0:	0765      	lsls	r5, r4, #29
    4ee2:	d009      	beq.n	4ef8 <__aeabi_ui2f+0x58>
    4ee4:	250f      	movs	r5, #15
    4ee6:	402c      	ands	r4, r5
    4ee8:	2c04      	cmp	r4, #4
    4eea:	d005      	beq.n	4ef8 <__aeabi_ui2f+0x58>
    4eec:	3204      	adds	r2, #4
    4eee:	0154      	lsls	r4, r2, #5
    4ef0:	d502      	bpl.n	4ef8 <__aeabi_ui2f+0x58>
    4ef2:	239f      	movs	r3, #159	; 0x9f
    4ef4:	4002      	ands	r2, r0
    4ef6:	1a5b      	subs	r3, r3, r1
    4ef8:	0192      	lsls	r2, r2, #6
    4efa:	0a54      	lsrs	r4, r2, #9
    4efc:	b2d8      	uxtb	r0, r3
    4efe:	e7e3      	b.n	4ec8 <__aeabi_ui2f+0x28>
    4f00:	0002      	movs	r2, r0
    4f02:	0020      	movs	r0, r4
    4f04:	321b      	adds	r2, #27
    4f06:	4090      	lsls	r0, r2
    4f08:	0002      	movs	r2, r0
    4f0a:	1e50      	subs	r0, r2, #1
    4f0c:	4182      	sbcs	r2, r0
    4f0e:	2005      	movs	r0, #5
    4f10:	1a40      	subs	r0, r0, r1
    4f12:	40c4      	lsrs	r4, r0
    4f14:	4314      	orrs	r4, r2
    4f16:	e7e0      	b.n	4eda <__aeabi_ui2f+0x3a>
    4f18:	0264      	lsls	r4, r4, #9
    4f1a:	2096      	movs	r0, #150	; 0x96
    4f1c:	0a64      	lsrs	r4, r4, #9
    4f1e:	e7d3      	b.n	4ec8 <__aeabi_ui2f+0x28>
    4f20:	fbffffff 	.word	0xfbffffff

00004f24 <__clzsi2>:
    4f24:	211c      	movs	r1, #28
    4f26:	2301      	movs	r3, #1
    4f28:	041b      	lsls	r3, r3, #16
    4f2a:	4298      	cmp	r0, r3
    4f2c:	d301      	bcc.n	4f32 <__clzsi2+0xe>
    4f2e:	0c00      	lsrs	r0, r0, #16
    4f30:	3910      	subs	r1, #16
    4f32:	0a1b      	lsrs	r3, r3, #8
    4f34:	4298      	cmp	r0, r3
    4f36:	d301      	bcc.n	4f3c <__clzsi2+0x18>
    4f38:	0a00      	lsrs	r0, r0, #8
    4f3a:	3908      	subs	r1, #8
    4f3c:	091b      	lsrs	r3, r3, #4
    4f3e:	4298      	cmp	r0, r3
    4f40:	d301      	bcc.n	4f46 <__clzsi2+0x22>
    4f42:	0900      	lsrs	r0, r0, #4
    4f44:	3904      	subs	r1, #4
    4f46:	a202      	add	r2, pc, #8	; (adr r2, 4f50 <__clzsi2+0x2c>)
    4f48:	5c10      	ldrb	r0, [r2, r0]
    4f4a:	1840      	adds	r0, r0, r1
    4f4c:	4770      	bx	lr
    4f4e:	46c0      	nop			; (mov r8, r8)
    4f50:	02020304 	.word	0x02020304
    4f54:	01010101 	.word	0x01010101
	...

00004f60 <memset>:
    4f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f62:	0005      	movs	r5, r0
    4f64:	0783      	lsls	r3, r0, #30
    4f66:	d049      	beq.n	4ffc <memset+0x9c>
    4f68:	1e54      	subs	r4, r2, #1
    4f6a:	2a00      	cmp	r2, #0
    4f6c:	d045      	beq.n	4ffa <memset+0x9a>
    4f6e:	0003      	movs	r3, r0
    4f70:	2603      	movs	r6, #3
    4f72:	b2ca      	uxtb	r2, r1
    4f74:	e002      	b.n	4f7c <memset+0x1c>
    4f76:	3501      	adds	r5, #1
    4f78:	3c01      	subs	r4, #1
    4f7a:	d33e      	bcc.n	4ffa <memset+0x9a>
    4f7c:	3301      	adds	r3, #1
    4f7e:	702a      	strb	r2, [r5, #0]
    4f80:	4233      	tst	r3, r6
    4f82:	d1f8      	bne.n	4f76 <memset+0x16>
    4f84:	2c03      	cmp	r4, #3
    4f86:	d930      	bls.n	4fea <memset+0x8a>
    4f88:	22ff      	movs	r2, #255	; 0xff
    4f8a:	400a      	ands	r2, r1
    4f8c:	0215      	lsls	r5, r2, #8
    4f8e:	18ad      	adds	r5, r5, r2
    4f90:	042a      	lsls	r2, r5, #16
    4f92:	18ad      	adds	r5, r5, r2
    4f94:	2c0f      	cmp	r4, #15
    4f96:	d934      	bls.n	5002 <memset+0xa2>
    4f98:	0027      	movs	r7, r4
    4f9a:	3f10      	subs	r7, #16
    4f9c:	093f      	lsrs	r7, r7, #4
    4f9e:	013e      	lsls	r6, r7, #4
    4fa0:	46b4      	mov	ip, r6
    4fa2:	001e      	movs	r6, r3
    4fa4:	001a      	movs	r2, r3
    4fa6:	3610      	adds	r6, #16
    4fa8:	4466      	add	r6, ip
    4faa:	6015      	str	r5, [r2, #0]
    4fac:	6055      	str	r5, [r2, #4]
    4fae:	6095      	str	r5, [r2, #8]
    4fb0:	60d5      	str	r5, [r2, #12]
    4fb2:	3210      	adds	r2, #16
    4fb4:	4296      	cmp	r6, r2
    4fb6:	d1f8      	bne.n	4faa <memset+0x4a>
    4fb8:	3701      	adds	r7, #1
    4fba:	013f      	lsls	r7, r7, #4
    4fbc:	19db      	adds	r3, r3, r7
    4fbe:	270f      	movs	r7, #15
    4fc0:	220c      	movs	r2, #12
    4fc2:	4027      	ands	r7, r4
    4fc4:	4022      	ands	r2, r4
    4fc6:	003c      	movs	r4, r7
    4fc8:	2a00      	cmp	r2, #0
    4fca:	d00e      	beq.n	4fea <memset+0x8a>
    4fcc:	1f3e      	subs	r6, r7, #4
    4fce:	08b6      	lsrs	r6, r6, #2
    4fd0:	00b4      	lsls	r4, r6, #2
    4fd2:	46a4      	mov	ip, r4
    4fd4:	001a      	movs	r2, r3
    4fd6:	1d1c      	adds	r4, r3, #4
    4fd8:	4464      	add	r4, ip
    4fda:	c220      	stmia	r2!, {r5}
    4fdc:	42a2      	cmp	r2, r4
    4fde:	d1fc      	bne.n	4fda <memset+0x7a>
    4fe0:	2403      	movs	r4, #3
    4fe2:	3601      	adds	r6, #1
    4fe4:	00b6      	lsls	r6, r6, #2
    4fe6:	199b      	adds	r3, r3, r6
    4fe8:	403c      	ands	r4, r7
    4fea:	2c00      	cmp	r4, #0
    4fec:	d005      	beq.n	4ffa <memset+0x9a>
    4fee:	b2c9      	uxtb	r1, r1
    4ff0:	191c      	adds	r4, r3, r4
    4ff2:	7019      	strb	r1, [r3, #0]
    4ff4:	3301      	adds	r3, #1
    4ff6:	429c      	cmp	r4, r3
    4ff8:	d1fb      	bne.n	4ff2 <memset+0x92>
    4ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ffc:	0003      	movs	r3, r0
    4ffe:	0014      	movs	r4, r2
    5000:	e7c0      	b.n	4f84 <memset+0x24>
    5002:	0027      	movs	r7, r4
    5004:	e7e2      	b.n	4fcc <memset+0x6c>
    5006:	46c0      	nop			; (mov r8, r8)

00005008 <__libc_init_array>:
    5008:	b570      	push	{r4, r5, r6, lr}
    500a:	4b0d      	ldr	r3, [pc, #52]	; (5040 <__libc_init_array+0x38>)
    500c:	4d0d      	ldr	r5, [pc, #52]	; (5044 <__libc_init_array+0x3c>)
    500e:	1b5e      	subs	r6, r3, r5
    5010:	10b6      	asrs	r6, r6, #2
    5012:	42ab      	cmp	r3, r5
    5014:	d005      	beq.n	5022 <__libc_init_array+0x1a>
    5016:	2400      	movs	r4, #0
    5018:	cd08      	ldmia	r5!, {r3}
    501a:	3401      	adds	r4, #1
    501c:	4798      	blx	r3
    501e:	42a6      	cmp	r6, r4
    5020:	d8fa      	bhi.n	5018 <__libc_init_array+0x10>
    5022:	f000 fa19 	bl	5458 <_init>
    5026:	4b08      	ldr	r3, [pc, #32]	; (5048 <__libc_init_array+0x40>)
    5028:	4d08      	ldr	r5, [pc, #32]	; (504c <__libc_init_array+0x44>)
    502a:	1b5e      	subs	r6, r3, r5
    502c:	10b6      	asrs	r6, r6, #2
    502e:	42ab      	cmp	r3, r5
    5030:	d005      	beq.n	503e <__libc_init_array+0x36>
    5032:	2400      	movs	r4, #0
    5034:	cd08      	ldmia	r5!, {r3}
    5036:	3401      	adds	r4, #1
    5038:	4798      	blx	r3
    503a:	42a6      	cmp	r6, r4
    503c:	d8fa      	bhi.n	5034 <__libc_init_array+0x2c>
    503e:	bd70      	pop	{r4, r5, r6, pc}
    5040:	00005464 	.word	0x00005464
    5044:	00005464 	.word	0x00005464
    5048:	0000546c 	.word	0x0000546c
    504c:	00005464 	.word	0x00005464

00005050 <__retarget_lock_acquire_recursive>:
    5050:	4770      	bx	lr
    5052:	46c0      	nop			; (mov r8, r8)

00005054 <__retarget_lock_release_recursive>:
    5054:	4770      	bx	lr
    5056:	46c0      	nop			; (mov r8, r8)

00005058 <memcpy>:
    5058:	b5f0      	push	{r4, r5, r6, r7, lr}
    505a:	0005      	movs	r5, r0
    505c:	2a0f      	cmp	r2, #15
    505e:	d933      	bls.n	50c8 <memcpy+0x70>
    5060:	2403      	movs	r4, #3
    5062:	0003      	movs	r3, r0
    5064:	0026      	movs	r6, r4
    5066:	430b      	orrs	r3, r1
    5068:	401e      	ands	r6, r3
    506a:	421c      	tst	r4, r3
    506c:	d137      	bne.n	50de <memcpy+0x86>
    506e:	0015      	movs	r5, r2
    5070:	3d10      	subs	r5, #16
    5072:	092d      	lsrs	r5, r5, #4
    5074:	0003      	movs	r3, r0
    5076:	000c      	movs	r4, r1
    5078:	46ac      	mov	ip, r5
    507a:	012f      	lsls	r7, r5, #4
    507c:	183f      	adds	r7, r7, r0
    507e:	6865      	ldr	r5, [r4, #4]
    5080:	605d      	str	r5, [r3, #4]
    5082:	68a5      	ldr	r5, [r4, #8]
    5084:	609d      	str	r5, [r3, #8]
    5086:	68e5      	ldr	r5, [r4, #12]
    5088:	60dd      	str	r5, [r3, #12]
    508a:	6825      	ldr	r5, [r4, #0]
    508c:	3410      	adds	r4, #16
    508e:	601d      	str	r5, [r3, #0]
    5090:	001d      	movs	r5, r3
    5092:	3310      	adds	r3, #16
    5094:	42bd      	cmp	r5, r7
    5096:	d1f2      	bne.n	507e <memcpy+0x26>
    5098:	4665      	mov	r5, ip
    509a:	230f      	movs	r3, #15
    509c:	240c      	movs	r4, #12
    509e:	3501      	adds	r5, #1
    50a0:	012d      	lsls	r5, r5, #4
    50a2:	1949      	adds	r1, r1, r5
    50a4:	4013      	ands	r3, r2
    50a6:	1945      	adds	r5, r0, r5
    50a8:	4214      	tst	r4, r2
    50aa:	d01a      	beq.n	50e2 <memcpy+0x8a>
    50ac:	598c      	ldr	r4, [r1, r6]
    50ae:	51ac      	str	r4, [r5, r6]
    50b0:	3604      	adds	r6, #4
    50b2:	1b9c      	subs	r4, r3, r6
    50b4:	2c03      	cmp	r4, #3
    50b6:	d8f9      	bhi.n	50ac <memcpy+0x54>
    50b8:	3b04      	subs	r3, #4
    50ba:	089b      	lsrs	r3, r3, #2
    50bc:	3301      	adds	r3, #1
    50be:	009b      	lsls	r3, r3, #2
    50c0:	18ed      	adds	r5, r5, r3
    50c2:	18c9      	adds	r1, r1, r3
    50c4:	2303      	movs	r3, #3
    50c6:	401a      	ands	r2, r3
    50c8:	1e56      	subs	r6, r2, #1
    50ca:	2a00      	cmp	r2, #0
    50cc:	d006      	beq.n	50dc <memcpy+0x84>
    50ce:	2300      	movs	r3, #0
    50d0:	5ccc      	ldrb	r4, [r1, r3]
    50d2:	001a      	movs	r2, r3
    50d4:	54ec      	strb	r4, [r5, r3]
    50d6:	3301      	adds	r3, #1
    50d8:	4296      	cmp	r6, r2
    50da:	d1f9      	bne.n	50d0 <memcpy+0x78>
    50dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50de:	1e56      	subs	r6, r2, #1
    50e0:	e7f5      	b.n	50ce <memcpy+0x76>
    50e2:	001a      	movs	r2, r3
    50e4:	e7f0      	b.n	50c8 <memcpy+0x70>
    50e6:	46c0      	nop			; (mov r8, r8)

000050e8 <strlen>:
    50e8:	b510      	push	{r4, lr}
    50ea:	0783      	lsls	r3, r0, #30
    50ec:	d00a      	beq.n	5104 <strlen+0x1c>
    50ee:	0003      	movs	r3, r0
    50f0:	2103      	movs	r1, #3
    50f2:	e002      	b.n	50fa <strlen+0x12>
    50f4:	3301      	adds	r3, #1
    50f6:	420b      	tst	r3, r1
    50f8:	d005      	beq.n	5106 <strlen+0x1e>
    50fa:	781a      	ldrb	r2, [r3, #0]
    50fc:	2a00      	cmp	r2, #0
    50fe:	d1f9      	bne.n	50f4 <strlen+0xc>
    5100:	1a18      	subs	r0, r3, r0
    5102:	bd10      	pop	{r4, pc}
    5104:	0003      	movs	r3, r0
    5106:	6819      	ldr	r1, [r3, #0]
    5108:	4a0c      	ldr	r2, [pc, #48]	; (513c <strlen+0x54>)
    510a:	4c0d      	ldr	r4, [pc, #52]	; (5140 <strlen+0x58>)
    510c:	188a      	adds	r2, r1, r2
    510e:	438a      	bics	r2, r1
    5110:	4222      	tst	r2, r4
    5112:	d10f      	bne.n	5134 <strlen+0x4c>
    5114:	6859      	ldr	r1, [r3, #4]
    5116:	4a09      	ldr	r2, [pc, #36]	; (513c <strlen+0x54>)
    5118:	3304      	adds	r3, #4
    511a:	188a      	adds	r2, r1, r2
    511c:	438a      	bics	r2, r1
    511e:	4222      	tst	r2, r4
    5120:	d108      	bne.n	5134 <strlen+0x4c>
    5122:	6859      	ldr	r1, [r3, #4]
    5124:	4a05      	ldr	r2, [pc, #20]	; (513c <strlen+0x54>)
    5126:	3304      	adds	r3, #4
    5128:	188a      	adds	r2, r1, r2
    512a:	438a      	bics	r2, r1
    512c:	4222      	tst	r2, r4
    512e:	d0f1      	beq.n	5114 <strlen+0x2c>
    5130:	e000      	b.n	5134 <strlen+0x4c>
    5132:	3301      	adds	r3, #1
    5134:	781a      	ldrb	r2, [r3, #0]
    5136:	2a00      	cmp	r2, #0
    5138:	d1fb      	bne.n	5132 <strlen+0x4a>
    513a:	e7e1      	b.n	5100 <strlen+0x18>
    513c:	fefefeff 	.word	0xfefefeff
    5140:	80808080 	.word	0x80808080

00005144 <register_fini>:
    5144:	4b03      	ldr	r3, [pc, #12]	; (5154 <register_fini+0x10>)
    5146:	b510      	push	{r4, lr}
    5148:	2b00      	cmp	r3, #0
    514a:	d002      	beq.n	5152 <register_fini+0xe>
    514c:	4802      	ldr	r0, [pc, #8]	; (5158 <register_fini+0x14>)
    514e:	f000 f805 	bl	515c <atexit>
    5152:	bd10      	pop	{r4, pc}
    5154:	00000000 	.word	0x00000000
    5158:	0000516d 	.word	0x0000516d

0000515c <atexit>:
    515c:	b510      	push	{r4, lr}
    515e:	0001      	movs	r1, r0
    5160:	2300      	movs	r3, #0
    5162:	2200      	movs	r2, #0
    5164:	2000      	movs	r0, #0
    5166:	f000 f815 	bl	5194 <__register_exitproc>
    516a:	bd10      	pop	{r4, pc}

0000516c <__libc_fini_array>:
    516c:	b570      	push	{r4, r5, r6, lr}
    516e:	4c07      	ldr	r4, [pc, #28]	; (518c <__libc_fini_array+0x20>)
    5170:	4d07      	ldr	r5, [pc, #28]	; (5190 <__libc_fini_array+0x24>)
    5172:	1b64      	subs	r4, r4, r5
    5174:	10a4      	asrs	r4, r4, #2
    5176:	d005      	beq.n	5184 <__libc_fini_array+0x18>
    5178:	3c01      	subs	r4, #1
    517a:	00a3      	lsls	r3, r4, #2
    517c:	58eb      	ldr	r3, [r5, r3]
    517e:	4798      	blx	r3
    5180:	2c00      	cmp	r4, #0
    5182:	d1f9      	bne.n	5178 <__libc_fini_array+0xc>
    5184:	f000 f972 	bl	546c <_fini>
    5188:	bd70      	pop	{r4, r5, r6, pc}
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	0000547c 	.word	0x0000547c
    5190:	00005478 	.word	0x00005478

00005194 <__register_exitproc>:
    5194:	b5f0      	push	{r4, r5, r6, r7, lr}
    5196:	46d6      	mov	lr, sl
    5198:	464f      	mov	r7, r9
    519a:	4646      	mov	r6, r8
    519c:	4698      	mov	r8, r3
    519e:	4b22      	ldr	r3, [pc, #136]	; (5228 <__register_exitproc+0x94>)
    51a0:	b5c0      	push	{r6, r7, lr}
    51a2:	0006      	movs	r6, r0
    51a4:	6818      	ldr	r0, [r3, #0]
    51a6:	4699      	mov	r9, r3
    51a8:	000f      	movs	r7, r1
    51aa:	4692      	mov	sl, r2
    51ac:	f7ff ff50 	bl	5050 <__retarget_lock_acquire_recursive>
    51b0:	4b1e      	ldr	r3, [pc, #120]	; (522c <__register_exitproc+0x98>)
    51b2:	681d      	ldr	r5, [r3, #0]
    51b4:	2d00      	cmp	r5, #0
    51b6:	d02d      	beq.n	5214 <__register_exitproc+0x80>
    51b8:	686c      	ldr	r4, [r5, #4]
    51ba:	2c1f      	cmp	r4, #31
    51bc:	dc2d      	bgt.n	521a <__register_exitproc+0x86>
    51be:	2e00      	cmp	r6, #0
    51c0:	d10e      	bne.n	51e0 <__register_exitproc+0x4c>
    51c2:	1c63      	adds	r3, r4, #1
    51c4:	606b      	str	r3, [r5, #4]
    51c6:	464b      	mov	r3, r9
    51c8:	3402      	adds	r4, #2
    51ca:	00a4      	lsls	r4, r4, #2
    51cc:	6818      	ldr	r0, [r3, #0]
    51ce:	5167      	str	r7, [r4, r5]
    51d0:	f7ff ff40 	bl	5054 <__retarget_lock_release_recursive>
    51d4:	2000      	movs	r0, #0
    51d6:	bce0      	pop	{r5, r6, r7}
    51d8:	46ba      	mov	sl, r7
    51da:	46b1      	mov	r9, r6
    51dc:	46a8      	mov	r8, r5
    51de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51e0:	2288      	movs	r2, #136	; 0x88
    51e2:	4651      	mov	r1, sl
    51e4:	0028      	movs	r0, r5
    51e6:	00a3      	lsls	r3, r4, #2
    51e8:	18eb      	adds	r3, r5, r3
    51ea:	5099      	str	r1, [r3, r2]
    51ec:	3a87      	subs	r2, #135	; 0x87
    51ee:	40a2      	lsls	r2, r4
    51f0:	3089      	adds	r0, #137	; 0x89
    51f2:	30ff      	adds	r0, #255	; 0xff
    51f4:	6801      	ldr	r1, [r0, #0]
    51f6:	4311      	orrs	r1, r2
    51f8:	6001      	str	r1, [r0, #0]
    51fa:	2184      	movs	r1, #132	; 0x84
    51fc:	4640      	mov	r0, r8
    51fe:	0049      	lsls	r1, r1, #1
    5200:	5058      	str	r0, [r3, r1]
    5202:	2e02      	cmp	r6, #2
    5204:	d1dd      	bne.n	51c2 <__register_exitproc+0x2e>
    5206:	0029      	movs	r1, r5
    5208:	318d      	adds	r1, #141	; 0x8d
    520a:	31ff      	adds	r1, #255	; 0xff
    520c:	680b      	ldr	r3, [r1, #0]
    520e:	4313      	orrs	r3, r2
    5210:	600b      	str	r3, [r1, #0]
    5212:	e7d6      	b.n	51c2 <__register_exitproc+0x2e>
    5214:	4d06      	ldr	r5, [pc, #24]	; (5230 <__register_exitproc+0x9c>)
    5216:	601d      	str	r5, [r3, #0]
    5218:	e7ce      	b.n	51b8 <__register_exitproc+0x24>
    521a:	464b      	mov	r3, r9
    521c:	6818      	ldr	r0, [r3, #0]
    521e:	f7ff ff19 	bl	5054 <__retarget_lock_release_recursive>
    5222:	2001      	movs	r0, #1
    5224:	4240      	negs	r0, r0
    5226:	e7d6      	b.n	51d6 <__register_exitproc+0x42>
    5228:	20000054 	.word	0x20000054
    522c:	20000688 	.word	0x20000688
    5230:	2000068c 	.word	0x2000068c
    5234:	40000000 	.word	0x40000000
    5238:	00000001 	.word	0x00000001
    523c:	00000ace 	.word	0x00000ace
    5240:	00000ada 	.word	0x00000ada
    5244:	00000ae8 	.word	0x00000ae8
    5248:	00000af6 	.word	0x00000af6
    524c:	00000b04 	.word	0x00000b04
    5250:	00000b52 	.word	0x00000b52
    5254:	00000b5a 	.word	0x00000b5a
    5258:	00000b64 	.word	0x00000b64
    525c:	00000b6e 	.word	0x00000b6e
    5260:	00000b78 	.word	0x00000b78
    5264:	00000bb6 	.word	0x00000bb6
    5268:	00000bc2 	.word	0x00000bc2
    526c:	00000bd0 	.word	0x00000bd0
    5270:	00000bde 	.word	0x00000bde
    5274:	00000bec 	.word	0x00000bec
    5278:	00000c3a 	.word	0x00000c3a
    527c:	00000c42 	.word	0x00000c42
    5280:	00000c4c 	.word	0x00000c4c
    5284:	00000c56 	.word	0x00000c56
    5288:	00000c60 	.word	0x00000c60
    528c:	00000cc6 	.word	0x00000cc6
    5290:	00000c9e 	.word	0x00000c9e
    5294:	00000ca8 	.word	0x00000ca8
    5298:	00000cb2 	.word	0x00000cb2
    529c:	00000cbc 	.word	0x00000cbc

000052a0 <uart1_descriptor>:
    52a0:	02010302 00000002                       ........

000052a8 <uart2_descriptor>:
    52a8:	04030504 00000002                       ........

000052b0 <uart3_descriptor>:
    52b0:	0a090706 00000002                       ........

000052b8 <uart4_descriptor>:
    52b8:	0c0b0908 00000002 80000000 00000001     ................

000052c8 <dma_spi_desc>:
    52c8:	08070100                                 .....

000052cd <zero>:
    52cd:	48000000 6c00001c 4c00001c 5000001c     ...H...l...L...P
    52dd:	5400001c 5800001c 5c00001c 6200001c     ...T...X...\...b
    52ed:	a800001c bc000022 82000022 bc000023     ...."..."...#...
    52fd:	82000022 c8000023 d4000022 82000022     "...#..."..."...
    530d:	24000023 38000023 82000023 62000023     #..$#..8#...#..b
    531d:	30000023 34333231 38373635 43424139     #..0123456789ABC
    532d:	48474644 4d4c4b4a 5251504e 57565453     DFGHJKLMNPQRSTVW
    533d:	005a5958 46000000 656c6e69 6c422079     XYZ....Finley Bl
    534d:	656e6961 47000000 0032434e               aine...GNC2....

0000535c <language_string>:
    535c:	04090304                                ....

00005360 <device_descriptor>:
    5360:	02000112 400102ef 000e1209 02010200     .......@........
    5370:	                                         ..

00005372 <usb_num_endpoints>:
    5372:	2e2e0003 2d2d2d2e 002e2e2e 2f620000     .....---......b/
    5382:	2ff40000 30020000 30100000 301e0000     .../...0...0...0
    5392:	302c0000 2f680000 00000000 00000000     ..,0..h/........
    53a2:	00000000 31d10000 00060000               .......1......

000053b0 <time_ticks_us_mult>:
    53b0:	00000030                                0...

000053b4 <time_ticks_ms_mult>:
    53b4:	0000bb80                                ....

000053b8 <time_ticks_s_mult>:
    53b8:	02dc6c00                                .l..

000053bc <CRC8_LUT_L>:
    53bc:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

000053cc <CRC8_LUT_H>:
    53cc:	90e07000 5727b7c7 1969f989 deae3e4e     .p....'W..i.N>..
    53dc:	0000462a 0000455a 00004572 00004590     *F..ZE..rE...E..
    53ec:	00004572 000045d4 00004572 00004590     rE...E..rE...E..
    53fc:	0000455a 0000455a 000045d4 00004590     ZE..ZE...E...E..
    540c:	0000457a 0000457a 0000457a 000045de     zE..zE..zE...E..
    541c:	0000455a 0000455a 00004572 00004668     ZE..ZE..rE..hF..
    542c:	00004572 000045d4 00004572 00004668     rE...E..rE..hF..
    543c:	0000455a 0000455a 000045d4 00004668     ZE..ZE...E..hF..
    544c:	0000457a 0000457a 0000457a              zE..zE..zE..

00005458 <_init>:
    5458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    545a:	46c0      	nop			; (mov r8, r8)
    545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    545e:	bc08      	pop	{r3}
    5460:	469e      	mov	lr, r3
    5462:	4770      	bx	lr

00005464 <__init_array_start>:
    5464:	00005145 	.word	0x00005145

00005468 <__frame_dummy_init_array_entry>:
    5468:	0000012d                                -...

0000546c <_fini>:
    546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    546e:	46c0      	nop			; (mov r8, r8)
    5470:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5472:	bc08      	pop	{r3}
    5474:	469e      	mov	lr, r3
    5476:	4770      	bx	lr

00005478 <__do_global_dtors_aux_fini_array_entry>:
    5478:	0101 0000                                   ....
