
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00005c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007cc  200000c0  00005d30  000200c0  2**4
                  ALLOC
  3 .stack        00002004  2000088c  000064fc  000200c0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c9b1  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000065df  00000000  00000000  0003cae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 000074bf  00000000  00000000  000430c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000e30  00000000  00000000  0004a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 0000105d  00000000  00000000  0004b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00009fc3  00000000  00000000  0004c40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0001c27e  00000000  00000000  000563d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b5c1e  00000000  00000000  0007264e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001ed0  00000000  00000000  0012826c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  0012a13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
    if (!get_address_from_id(type, id, &address, &size)) return false;
    memcpy(address, value, size);
    return true;
}

bool get_global(Global_Variable_IDs id, void* value) {
       0:	90 28 00 20 55 01 00 00 51 01 00 00 51 01 00 00     .(. U...Q...Q...
	...
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
    if (!get_address_from_id(type, id, &address, &size)) return false;
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...
    memcpy(value, address, size);
    return true;
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
	// send adc read command
	spi_command(desc->sercom, BARO_ADC_READ);
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	uint8_t data1 = spi_command(desc->sercom, 0);
      5c:	1d 43 00 00 51 01 00 00 51 01 00 00 51 01 00 00     .C..Q...Q...Q...
	uint8_t data2 = spi_command(desc->sercom, 0);
      6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      8c:	7d 31 00 00 51 01 00 00 51 01 00 00 51 01 00 00     }1..Q...Q...Q...
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	00005c64 	.word	0x00005c64
      d0:	00005c64 	.word	0x00005c64
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	00005c64 	.word	0x00005c64
      f8:	00005c64 	.word	0x00005c64
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	200000c0 	.word	0x200000c0
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	00005c64 	.word	0x00005c64

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	200000c4 	.word	0x200000c4
     14c:	00005c64 	.word	0x00005c64

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	00005c64 	.word	0x00005c64
     1a4:	20000000 	.word	0x20000000
     1a8:	200000bc 	.word	0x200000bc
     1ac:	200000c0 	.word	0x200000c0
     1b0:	2000088c 	.word	0x2000088c
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	00005569 	.word	0x00005569
     1c4:	00000000 	.word	0x00000000
     1c8:	00003109 	.word	0x00003109

000001cc <getGlobalHash>:
uint8_t rxframe[GNCLINK_FRAME_TOTAL_LENGTH];
uint8_t txframe[GNCLINK_FRAME_TOTAL_LENGTH];

extern void SOS();

bool getGlobalHash() {
     1cc:	b510      	push	{r4, lr}
    uint32_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     1ce:	4c06      	ldr	r4, [pc, #24]	; (1e8 <getGlobalHash+0x1c>)
     1d0:	0020      	movs	r0, r4
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <getGlobalHash+0x20>)
     1d4:	4798      	blx	r3
    *payload = __GLOBAL_HASH;
     1d6:	4b06      	ldr	r3, [pc, #24]	; (1f0 <getGlobalHash+0x24>)
     1d8:	6003      	str	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetGlobalHash, GNClink_PacketFlags_Response, 4)) return false;
     1da:	2304      	movs	r3, #4
     1dc:	2202      	movs	r2, #2
     1de:	2101      	movs	r1, #1
     1e0:	0020      	movs	r0, r4
     1e2:	4c04      	ldr	r4, [pc, #16]	; (1f4 <getGlobalHash+0x28>)
     1e4:	47a0      	blx	r4
    return true;
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	200000dc 	.word	0x200000dc
     1ec:	00004425 	.word	0x00004425
     1f0:	6f5242bf 	.word	0x6f5242bf
     1f4:	00004429 	.word	0x00004429

000001f8 <getValueList>:

bool getValueList() {
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46c6      	mov	lr, r8
     1fc:	b500      	push	{lr}
     1fe:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     200:	4d1a      	ldr	r5, [pc, #104]	; (26c <getValueList+0x74>)
     202:	0028      	movs	r0, r5
     204:	3040      	adds	r0, #64	; 0x40
     206:	4c1a      	ldr	r4, [pc, #104]	; (270 <getValueList+0x78>)
     208:	47a0      	blx	r4
     20a:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     20c:	0028      	movs	r0, r5
     20e:	47a0      	blx	r4
     210:	4680      	mov	r8, r0
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     212:	783e      	ldrb	r6, [r7, #0]
     214:	b2f6      	uxtb	r6, r6
    if (IDCount > (GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1) / 2) {
     216:	2e1d      	cmp	r6, #29
     218:	d825      	bhi.n	266 <getValueList+0x6e>
        // too many IDs, do something...
        return false;
    }

    int payloadIndex = 0;
    for (int index = 0; index < IDCount; ++index) {
     21a:	2400      	movs	r4, #0
    int payloadIndex = 0;
     21c:	2500      	movs	r5, #0
     21e:	e007      	b.n	230 <getValueList+0x38>
            // no more space, do something...
            return false;
        }

        // copy value to payload
        memcpy(&txpayload[payloadIndex], address, size);
     220:	4643      	mov	r3, r8
     222:	1958      	adds	r0, r3, r5
     224:	9900      	ldr	r1, [sp, #0]
     226:	4b13      	ldr	r3, [pc, #76]	; (274 <getValueList+0x7c>)
     228:	4798      	blx	r3
        payloadIndex += size;
     22a:	9b01      	ldr	r3, [sp, #4]
     22c:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     22e:	3401      	adds	r4, #1
     230:	42b4      	cmp	r4, r6
     232:	da11      	bge.n	258 <getValueList+0x60>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     234:	0063      	lsls	r3, r4, #1
     236:	18fb      	adds	r3, r7, r3
     238:	7858      	ldrb	r0, [r3, #1]
        if (!get_global_address_size(ID, &address, &size)) {
     23a:	aa01      	add	r2, sp, #4
     23c:	4669      	mov	r1, sp
     23e:	4b0e      	ldr	r3, [pc, #56]	; (278 <getValueList+0x80>)
     240:	4798      	blx	r3
     242:	2800      	cmp	r0, #0
     244:	d003      	beq.n	24e <getValueList+0x56>
        if (payloadIndex + size > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     246:	9a01      	ldr	r2, [sp, #4]
     248:	1953      	adds	r3, r2, r5
     24a:	2b3b      	cmp	r3, #59	; 0x3b
     24c:	d9e8      	bls.n	220 <getValueList+0x28>
            return false;
     24e:	2000      	movs	r0, #0
    }

    // construct response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
    return true;
}
     250:	b002      	add	sp, #8
     252:	bc80      	pop	{r7}
     254:	46b8      	mov	r8, r7
     256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
     258:	4804      	ldr	r0, [pc, #16]	; (26c <getValueList+0x74>)
     25a:	002b      	movs	r3, r5
     25c:	2202      	movs	r2, #2
     25e:	2102      	movs	r1, #2
     260:	4c06      	ldr	r4, [pc, #24]	; (27c <getValueList+0x84>)
     262:	47a0      	blx	r4
     264:	e7f4      	b.n	250 <getValueList+0x58>
        return false;
     266:	2000      	movs	r0, #0
     268:	e7f2      	b.n	250 <getValueList+0x58>
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	200000dc 	.word	0x200000dc
     270:	00004425 	.word	0x00004425
     274:	000055b9 	.word	0x000055b9
     278:	0000076d 	.word	0x0000076d
     27c:	00004429 	.word	0x00004429

00000280 <setValueList>:

bool setValueList() {
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	46c6      	mov	lr, r8
     284:	b500      	push	{lr}
     286:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     288:	4d18      	ldr	r5, [pc, #96]	; (2ec <setValueList+0x6c>)
     28a:	0028      	movs	r0, r5
     28c:	3040      	adds	r0, #64	; 0x40
     28e:	4c18      	ldr	r4, [pc, #96]	; (2f0 <setValueList+0x70>)
     290:	47a0      	blx	r4
     292:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     294:	0028      	movs	r0, r5
     296:	47a0      	blx	r4

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     298:	783b      	ldrb	r3, [r7, #0]
     29a:	b2db      	uxtb	r3, r3
     29c:	4698      	mov	r8, r3

    int payloadIndex = 1;
    for (int index = 0; index < IDCount; ++index) {
     29e:	2600      	movs	r6, #0
    int payloadIndex = 1;
     2a0:	2501      	movs	r5, #1
    for (int index = 0; index < IDCount; ++index) {
     2a2:	e008      	b.n	2b6 <setValueList+0x36>
            // Buffer overrun, do something...
            return false;
        }

        // copy value from payload to globals
        memcpy(address, &rxpayload[payloadIndex + 2], size);
     2a4:	3402      	adds	r4, #2
     2a6:	1939      	adds	r1, r7, r4
     2a8:	9800      	ldr	r0, [sp, #0]
     2aa:	4b12      	ldr	r3, [pc, #72]	; (2f4 <setValueList+0x74>)
     2ac:	4798      	blx	r3
        payloadIndex += size + 2;
     2ae:	9b01      	ldr	r3, [sp, #4]
     2b0:	3302      	adds	r3, #2
     2b2:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     2b4:	3601      	adds	r6, #1
     2b6:	4546      	cmp	r6, r8
     2b8:	da11      	bge.n	2de <setValueList+0x5e>
        Global_Variable_IDs ID = (Global_Variable_IDs)*((uint16_t*)(rxpayload + payloadIndex));
     2ba:	002c      	movs	r4, r5
     2bc:	5d78      	ldrb	r0, [r7, r5]
        if (!get_global_address_size(ID, &address, &size)) {
     2be:	aa01      	add	r2, sp, #4
     2c0:	4669      	mov	r1, sp
     2c2:	4b0d      	ldr	r3, [pc, #52]	; (2f8 <setValueList+0x78>)
     2c4:	4798      	blx	r3
     2c6:	2800      	cmp	r0, #0
     2c8:	d004      	beq.n	2d4 <setValueList+0x54>
        if (payloadIndex + size + 2 > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     2ca:	9a01      	ldr	r2, [sp, #4]
     2cc:	1953      	adds	r3, r2, r5
     2ce:	3302      	adds	r3, #2
     2d0:	2b3b      	cmp	r3, #59	; 0x3b
     2d2:	d9e7      	bls.n	2a4 <setValueList+0x24>
            return false;
     2d4:	2000      	movs	r0, #0
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SetValueList, GNClink_PacketFlags_Response, 0)) return false;
    return true;
}
     2d6:	b002      	add	sp, #8
     2d8:	bc80      	pop	{r7}
     2da:	46b8      	mov	r8, r7
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SetValueList, GNClink_PacketFlags_Response, 0)) return false;
     2de:	4803      	ldr	r0, [pc, #12]	; (2ec <setValueList+0x6c>)
     2e0:	2300      	movs	r3, #0
     2e2:	2202      	movs	r2, #2
     2e4:	2103      	movs	r1, #3
     2e6:	4c05      	ldr	r4, [pc, #20]	; (2fc <setValueList+0x7c>)
     2e8:	47a0      	blx	r4
     2ea:	e7f4      	b.n	2d6 <setValueList+0x56>
     2ec:	200000dc 	.word	0x200000dc
     2f0:	00004425 	.word	0x00004425
     2f4:	000055b9 	.word	0x000055b9
     2f8:	0000076d 	.word	0x0000076d
     2fc:	00004429 	.word	0x00004429

00000300 <loadValueList>:

bool loadValueList() {
     300:	b570      	push	{r4, r5, r6, lr}
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     302:	4e0f      	ldr	r6, [pc, #60]	; (340 <loadValueList+0x40>)
     304:	0030      	movs	r0, r6
     306:	3040      	adds	r0, #64	; 0x40
     308:	4c0e      	ldr	r4, [pc, #56]	; (344 <loadValueList+0x44>)
     30a:	47a0      	blx	r4
     30c:	0005      	movs	r5, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     30e:	0030      	movs	r0, r6
     310:	47a0      	blx	r4
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     312:	782e      	ldrb	r6, [r5, #0]
     314:	b2f6      	uxtb	r6, r6

    for (int index = 0; index < IDCount; ++index) {
     316:	2400      	movs	r4, #0
     318:	e000      	b.n	31c <loadValueList+0x1c>
     31a:	3401      	adds	r4, #1
     31c:	42b4      	cmp	r4, r6
     31e:	da07      	bge.n	330 <loadValueList+0x30>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     320:	0063      	lsls	r3, r4, #1
     322:	18eb      	adds	r3, r5, r3
     324:	7858      	ldrb	r0, [r3, #1]

        if (!load_global(ID)) {
     326:	4b08      	ldr	r3, [pc, #32]	; (348 <loadValueList+0x48>)
     328:	4798      	blx	r3
     32a:	2800      	cmp	r0, #0
     32c:	d1f5      	bne.n	31a <loadValueList+0x1a>
     32e:	e005      	b.n	33c <loadValueList+0x3c>
            return false;
        }
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_LoadValueList, GNClink_PacketFlags_Response, 0)) return false;
     330:	4803      	ldr	r0, [pc, #12]	; (340 <loadValueList+0x40>)
     332:	2300      	movs	r3, #0
     334:	2202      	movs	r2, #2
     336:	2105      	movs	r1, #5
     338:	4c04      	ldr	r4, [pc, #16]	; (34c <loadValueList+0x4c>)
     33a:	47a0      	blx	r4
    return true;
}
     33c:	bd70      	pop	{r4, r5, r6, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	200000dc 	.word	0x200000dc
     344:	00004425 	.word	0x00004425
     348:	000007a5 	.word	0x000007a5
     34c:	00004429 	.word	0x00004429

00000350 <saveValueList>:

bool saveValueList() {
     350:	b570      	push	{r4, r5, r6, lr}
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     352:	4e0f      	ldr	r6, [pc, #60]	; (390 <saveValueList+0x40>)
     354:	0030      	movs	r0, r6
     356:	3040      	adds	r0, #64	; 0x40
     358:	4c0e      	ldr	r4, [pc, #56]	; (394 <saveValueList+0x44>)
     35a:	47a0      	blx	r4
     35c:	0005      	movs	r5, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     35e:	0030      	movs	r0, r6
     360:	47a0      	blx	r4
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     362:	782e      	ldrb	r6, [r5, #0]
     364:	b2f6      	uxtb	r6, r6

    for (int index = 0; index < IDCount; ++index) {
     366:	2400      	movs	r4, #0
     368:	e000      	b.n	36c <saveValueList+0x1c>
     36a:	3401      	adds	r4, #1
     36c:	42b4      	cmp	r4, r6
     36e:	da07      	bge.n	380 <saveValueList+0x30>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     370:	0063      	lsls	r3, r4, #1
     372:	18eb      	adds	r3, r5, r3
     374:	7858      	ldrb	r0, [r3, #1]

        if (!save_global(ID)) {
     376:	4b08      	ldr	r3, [pc, #32]	; (398 <saveValueList+0x48>)
     378:	4798      	blx	r3
     37a:	2800      	cmp	r0, #0
     37c:	d1f5      	bne.n	36a <saveValueList+0x1a>
     37e:	e005      	b.n	38c <saveValueList+0x3c>
            return false;
        }
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SaveValueList, GNClink_PacketFlags_Response, 0)) return false;
     380:	4803      	ldr	r0, [pc, #12]	; (390 <saveValueList+0x40>)
     382:	2300      	movs	r3, #0
     384:	2202      	movs	r2, #2
     386:	2104      	movs	r1, #4
     388:	4c04      	ldr	r4, [pc, #16]	; (39c <saveValueList+0x4c>)
     38a:	47a0      	blx	r4
    return true;
}
     38c:	bd70      	pop	{r4, r5, r6, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	200000dc 	.word	0x200000dc
     394:	00004425 	.word	0x00004425
     398:	00000805 	.word	0x00000805
     39c:	00004429 	.word	0x00004429

000003a0 <getValueCount>:

bool getValueCount() {
     3a0:	b510      	push	{r4, lr}
    uint16_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     3a2:	4c06      	ldr	r4, [pc, #24]	; (3bc <getValueCount+0x1c>)
     3a4:	0020      	movs	r0, r4
     3a6:	4b06      	ldr	r3, [pc, #24]	; (3c0 <getValueCount+0x20>)
     3a8:	4798      	blx	r3
    *payload = __GLOBAL_ID_END - __GLOBAL_ID_START;
     3aa:	2317      	movs	r3, #23
     3ac:	8003      	strh	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueCount, GNClink_PacketFlags_Response, 2)) return false;
     3ae:	3b15      	subs	r3, #21
     3b0:	2202      	movs	r2, #2
     3b2:	2106      	movs	r1, #6
     3b4:	0020      	movs	r0, r4
     3b6:	4c03      	ldr	r4, [pc, #12]	; (3c4 <getValueCount+0x24>)
     3b8:	47a0      	blx	r4
    return true;
}
     3ba:	bd10      	pop	{r4, pc}
     3bc:	200000dc 	.word	0x200000dc
     3c0:	00004425 	.word	0x00004425
     3c4:	00004429 	.word	0x00004429

000003c8 <getValueName>:

bool getValueName() {
     3c8:	b570      	push	{r4, r5, r6, lr}
     3ca:	b082      	sub	sp, #8
    uint16_t* rxpayload = (uint16_t*)GNClink_Get_Packet_Payload_Pointer(rxpacket);
     3cc:	4e14      	ldr	r6, [pc, #80]	; (420 <getValueName+0x58>)
     3ce:	0030      	movs	r0, r6
     3d0:	3040      	adds	r0, #64	; 0x40
     3d2:	4d14      	ldr	r5, [pc, #80]	; (424 <getValueName+0x5c>)
     3d4:	47a8      	blx	r5
     3d6:	0004      	movs	r4, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     3d8:	0030      	movs	r0, r6
     3da:	47a8      	blx	r5
     3dc:	0005      	movs	r5, r0

    // get variable ID
    uint16_t id = *rxpayload;
     3de:	8824      	ldrh	r4, [r4, #0]

    int length = 0;
     3e0:	2300      	movs	r3, #0
     3e2:	9301      	str	r3, [sp, #4]

    __Global_Variable_Types type;
    if (!get_global_type_from_id(id, &type)) return false;
     3e4:	b2e4      	uxtb	r4, r4
     3e6:	466b      	mov	r3, sp
     3e8:	1cd9      	adds	r1, r3, #3
     3ea:	0020      	movs	r0, r4
     3ec:	4b0e      	ldr	r3, [pc, #56]	; (428 <getValueName+0x60>)
     3ee:	4798      	blx	r3
     3f0:	2800      	cmp	r0, #0
     3f2:	d101      	bne.n	3f8 <getValueName+0x30>

    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;

    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
    return true;
}
     3f4:	b002      	add	sp, #8
     3f6:	bd70      	pop	{r4, r5, r6, pc}
    *txpayload = (uint8_t*)type;
     3f8:	466b      	mov	r3, sp
     3fa:	3303      	adds	r3, #3
     3fc:	781b      	ldrb	r3, [r3, #0]
     3fe:	702b      	strb	r3, [r5, #0]
    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;
     400:	1c69      	adds	r1, r5, #1
     402:	233a      	movs	r3, #58	; 0x3a
     404:	aa01      	add	r2, sp, #4
     406:	0020      	movs	r0, r4
     408:	4c08      	ldr	r4, [pc, #32]	; (42c <getValueName+0x64>)
     40a:	47a0      	blx	r4
     40c:	2800      	cmp	r0, #0
     40e:	d0f1      	beq.n	3f4 <getValueName+0x2c>
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
     410:	9b01      	ldr	r3, [sp, #4]
     412:	3301      	adds	r3, #1
     414:	4802      	ldr	r0, [pc, #8]	; (420 <getValueName+0x58>)
     416:	2202      	movs	r2, #2
     418:	2107      	movs	r1, #7
     41a:	4c05      	ldr	r4, [pc, #20]	; (430 <getValueName+0x68>)
     41c:	47a0      	blx	r4
     41e:	e7e9      	b.n	3f4 <getValueName+0x2c>
     420:	200000dc 	.word	0x200000dc
     424:	00004425 	.word	0x00004425
     428:	00000731 	.word	0x00000731
     42c:	00000865 	.word	0x00000865
     430:	00004429 	.word	0x00004429

00000434 <evaluatePacket>:

bool evaluatePacket() {
     434:	b510      	push	{r4, lr}
    // check packet
    if (!GNClink_Check_Packet(rxpacket)) {
     436:	481b      	ldr	r0, [pc, #108]	; (4a4 <evaluatePacket+0x70>)
     438:	4b1b      	ldr	r3, [pc, #108]	; (4a8 <evaluatePacket+0x74>)
     43a:	4798      	blx	r3
     43c:	1e04      	subs	r4, r0, #0
     43e:	d006      	beq.n	44e <evaluatePacket+0x1a>
    // reset_process(&bz);
    // bz_count = (int)(*GNClink_Get_Packet_Payload_Pointer(rxpacket));
    // dispatch_process(&bz);

    // check packet is not response packet
    GNClink_PacketFlags flags = GNClink_Get_Packet_Flags(rxpacket);
     440:	4818      	ldr	r0, [pc, #96]	; (4a4 <evaluatePacket+0x70>)
     442:	4b1a      	ldr	r3, [pc, #104]	; (4ac <evaluatePacket+0x78>)
     444:	4798      	blx	r3
    if (flags & GNClink_PacketFlags_Response) return false;
     446:	0780      	lsls	r0, r0, #30
     448:	d505      	bpl.n	456 <evaluatePacket+0x22>
     44a:	2400      	movs	r4, #0
     44c:	e001      	b.n	452 <evaluatePacket+0x1e>
        SOS();
     44e:	4b18      	ldr	r3, [pc, #96]	; (4b0 <evaluatePacket+0x7c>)
     450:	4798      	blx	r3
        default:
        return false;
    }

    return false;
}
     452:	0020      	movs	r0, r4
     454:	bd10      	pop	{r4, pc}
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     456:	4813      	ldr	r0, [pc, #76]	; (4a4 <evaluatePacket+0x70>)
     458:	4b16      	ldr	r3, [pc, #88]	; (4b4 <evaluatePacket+0x80>)
     45a:	4798      	blx	r3
     45c:	2807      	cmp	r0, #7
     45e:	d81f      	bhi.n	4a0 <evaluatePacket+0x6c>
     460:	0080      	lsls	r0, r0, #2
     462:	4b15      	ldr	r3, [pc, #84]	; (4b8 <evaluatePacket+0x84>)
     464:	581b      	ldr	r3, [r3, r0]
     466:	469f      	mov	pc, r3
        return getGlobalHash();
     468:	4b14      	ldr	r3, [pc, #80]	; (4bc <evaluatePacket+0x88>)
     46a:	4798      	blx	r3
     46c:	0004      	movs	r4, r0
     46e:	e7f0      	b.n	452 <evaluatePacket+0x1e>
        return getValueList();
     470:	4b13      	ldr	r3, [pc, #76]	; (4c0 <evaluatePacket+0x8c>)
     472:	4798      	blx	r3
     474:	0004      	movs	r4, r0
     476:	e7ec      	b.n	452 <evaluatePacket+0x1e>
        return setValueList();
     478:	4b12      	ldr	r3, [pc, #72]	; (4c4 <evaluatePacket+0x90>)
     47a:	4798      	blx	r3
     47c:	0004      	movs	r4, r0
     47e:	e7e8      	b.n	452 <evaluatePacket+0x1e>
        return loadValueList();
     480:	4b11      	ldr	r3, [pc, #68]	; (4c8 <evaluatePacket+0x94>)
     482:	4798      	blx	r3
     484:	0004      	movs	r4, r0
     486:	e7e4      	b.n	452 <evaluatePacket+0x1e>
        return saveValueList();
     488:	4b10      	ldr	r3, [pc, #64]	; (4cc <evaluatePacket+0x98>)
     48a:	4798      	blx	r3
     48c:	0004      	movs	r4, r0
     48e:	e7e0      	b.n	452 <evaluatePacket+0x1e>
        return getValueCount();
     490:	4b0f      	ldr	r3, [pc, #60]	; (4d0 <evaluatePacket+0x9c>)
     492:	4798      	blx	r3
     494:	0004      	movs	r4, r0
     496:	e7dc      	b.n	452 <evaluatePacket+0x1e>
        return getValueName();
     498:	4b0e      	ldr	r3, [pc, #56]	; (4d4 <evaluatePacket+0xa0>)
     49a:	4798      	blx	r3
     49c:	0004      	movs	r4, r0
     49e:	e7d8      	b.n	452 <evaluatePacket+0x1e>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     4a0:	2400      	movs	r4, #0
     4a2:	e7d6      	b.n	452 <evaluatePacket+0x1e>
     4a4:	2000011c 	.word	0x2000011c
     4a8:	00004455 	.word	0x00004455
     4ac:	00004489 	.word	0x00004489
     4b0:	000030e5 	.word	0x000030e5
     4b4:	00004485 	.word	0x00004485
     4b8:	00005794 	.word	0x00005794
     4bc:	000001cd 	.word	0x000001cd
     4c0:	000001f9 	.word	0x000001f9
     4c4:	00000281 	.word	0x00000281
     4c8:	00000301 	.word	0x00000301
     4cc:	00000351 	.word	0x00000351
     4d0:	000003a1 	.word	0x000003a1
     4d4:	000003c9 	.word	0x000003c9

000004d8 <get_packet>:

// returns false if resend is being requested
bool get_packet() {
     4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4da:	b083      	sub	sp, #12
    // set previous received packets to zero to avoid any propagation
    memset(rxpacket, 0, sizeof(rxpacket));
     4dc:	4834      	ldr	r0, [pc, #208]	; (5b0 <get_packet+0xd8>)
     4de:	2240      	movs	r2, #64	; 0x40
     4e0:	2100      	movs	r1, #0
     4e2:	4c34      	ldr	r4, [pc, #208]	; (5b4 <get_packet+0xdc>)
     4e4:	47a0      	blx	r4
    memset(rxframe, 0, sizeof(rxframe));
     4e6:	4834      	ldr	r0, [pc, #208]	; (5b8 <get_packet+0xe0>)
     4e8:	2214      	movs	r2, #20
     4ea:	2100      	movs	r1, #0
     4ec:	47a0      	blx	r4

    bool receivedFrames[GNCLINK_MAX_FRAMES_PER_PACKET];
    for (int i = 0; i < GNCLINK_MAX_FRAMES_PER_PACKET; ++i) receivedFrames[i] = false;
     4ee:	2300      	movs	r3, #0
     4f0:	e003      	b.n	4fa <get_packet+0x22>
     4f2:	aa01      	add	r2, sp, #4
     4f4:	2100      	movs	r1, #0
     4f6:	54d1      	strb	r1, [r2, r3]
     4f8:	3301      	adds	r3, #1
     4fa:	2b03      	cmp	r3, #3
     4fc:	ddf9      	ble.n	4f2 <get_packet+0x1a>
     4fe:	e02a      	b.n	556 <get_packet+0x7e>
            continue;
        }

        // check if frame is requesting resend
        if (GNClink_Frame_RequestResend(rxframe)) {
            return false;
     500:	2500      	movs	r5, #0
            // packet fully received
            else break;
        }
    }
    return true;
}
     502:	0028      	movs	r0, r5
     504:	b003      	add	sp, #12
     506:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     508:	3401      	adds	r4, #1
     50a:	482b      	ldr	r0, [pc, #172]	; (5b8 <get_packet+0xe0>)
     50c:	4b2b      	ldr	r3, [pc, #172]	; (5bc <get_packet+0xe4>)
     50e:	4798      	blx	r3
     510:	42a0      	cmp	r0, r4
     512:	dd07      	ble.n	524 <get_packet+0x4c>
                if (!receivedFrames[i]) payload->resendIndexes[resendCount++] = (uint8_t)i;
     514:	ab01      	add	r3, sp, #4
     516:	5d1b      	ldrb	r3, [r3, r4]
     518:	2b00      	cmp	r3, #0
     51a:	d1f5      	bne.n	508 <get_packet+0x30>
     51c:	19bb      	adds	r3, r7, r6
     51e:	705c      	strb	r4, [r3, #1]
     520:	3601      	adds	r6, #1
     522:	e7f1      	b.n	508 <get_packet+0x30>
            if (resendCount) {
     524:	2e00      	cmp	r6, #0
     526:	d0ec      	beq.n	502 <get_packet+0x2a>
                payload->resendCount = (uint8_t)resendCount;
     528:	703e      	strb	r6, [r7, #0]
                GNClink_Construct_RequestResendFrame(txframe);
     52a:	4d25      	ldr	r5, [pc, #148]	; (5c0 <get_packet+0xe8>)
     52c:	0028      	movs	r0, r5
     52e:	4b25      	ldr	r3, [pc, #148]	; (5c4 <get_packet+0xec>)
     530:	4798      	blx	r3
                led_on(); // only flash if resend is being performed
     532:	2480      	movs	r4, #128	; 0x80
     534:	03e4      	lsls	r4, r4, #15
     536:	0021      	movs	r1, r4
     538:	2001      	movs	r0, #1
     53a:	4b23      	ldr	r3, [pc, #140]	; (5c8 <get_packet+0xf0>)
     53c:	4798      	blx	r3
                serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     53e:	2214      	movs	r2, #20
     540:	0029      	movs	r1, r5
     542:	2000      	movs	r0, #0
     544:	4b21      	ldr	r3, [pc, #132]	; (5cc <get_packet+0xf4>)
     546:	4798      	blx	r3
                serial_write_wait_until_complete(PORT0);
     548:	2000      	movs	r0, #0
     54a:	4b21      	ldr	r3, [pc, #132]	; (5d0 <get_packet+0xf8>)
     54c:	4798      	blx	r3
                led_off();
     54e:	0021      	movs	r1, r4
     550:	2001      	movs	r0, #1
     552:	4b20      	ldr	r3, [pc, #128]	; (5d4 <get_packet+0xfc>)
     554:	4798      	blx	r3
        serial_read_start(PORT0, rxframe, GNCLINK_FRAME_TOTAL_LENGTH);
     556:	4c18      	ldr	r4, [pc, #96]	; (5b8 <get_packet+0xe0>)
     558:	2214      	movs	r2, #20
     55a:	0021      	movs	r1, r4
     55c:	2000      	movs	r0, #0
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <get_packet+0x100>)
     560:	4798      	blx	r3
        serial_read_wait_until_complete(PORT0); // Consider using _or_timeout in the future
     562:	2000      	movs	r0, #0
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <get_packet+0x104>)
     566:	4798      	blx	r3
        if (!GNClink_Check_Frame(rxframe)) {
     568:	0020      	movs	r0, r4
     56a:	4b1d      	ldr	r3, [pc, #116]	; (5e0 <get_packet+0x108>)
     56c:	4798      	blx	r3
     56e:	1e05      	subs	r5, r0, #0
     570:	d0f1      	beq.n	556 <get_packet+0x7e>
        if (GNClink_Frame_RequestResend(rxframe)) {
     572:	4811      	ldr	r0, [pc, #68]	; (5b8 <get_packet+0xe0>)
     574:	4b1b      	ldr	r3, [pc, #108]	; (5e4 <get_packet+0x10c>)
     576:	4798      	blx	r3
     578:	2800      	cmp	r0, #0
     57a:	d1c1      	bne.n	500 <get_packet+0x28>
        receivedFrames[GNClink_Get_Frame_Index(rxframe)] = true;
     57c:	4c0e      	ldr	r4, [pc, #56]	; (5b8 <get_packet+0xe0>)
     57e:	0020      	movs	r0, r4
     580:	4b0e      	ldr	r3, [pc, #56]	; (5bc <get_packet+0xe4>)
     582:	4798      	blx	r3
     584:	2301      	movs	r3, #1
     586:	aa01      	add	r2, sp, #4
     588:	5413      	strb	r3, [r2, r0]
        bool moreFrames = true;
     58a:	466a      	mov	r2, sp
     58c:	70d3      	strb	r3, [r2, #3]
        GNClink_Reconstruct_Packet_From_Frames(rxframe, rxpacket, &moreFrames);
     58e:	4908      	ldr	r1, [pc, #32]	; (5b0 <get_packet+0xd8>)
     590:	3203      	adds	r2, #3
     592:	0020      	movs	r0, r4
     594:	4b14      	ldr	r3, [pc, #80]	; (5e8 <get_packet+0x110>)
     596:	4798      	blx	r3
        if (!moreFrames) {
     598:	466b      	mov	r3, sp
     59a:	78db      	ldrb	r3, [r3, #3]
     59c:	2b00      	cmp	r3, #0
     59e:	d1da      	bne.n	556 <get_packet+0x7e>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(txframe);
     5a0:	4807      	ldr	r0, [pc, #28]	; (5c0 <get_packet+0xe8>)
     5a2:	4b12      	ldr	r3, [pc, #72]	; (5ec <get_packet+0x114>)
     5a4:	4798      	blx	r3
     5a6:	0007      	movs	r7, r0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     5a8:	2400      	movs	r4, #0
            int resendCount = 0;
     5aa:	2600      	movs	r6, #0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     5ac:	e7ad      	b.n	50a <get_packet+0x32>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	2000011c 	.word	0x2000011c
     5b4:	000054c1 	.word	0x000054c1
     5b8:	2000015c 	.word	0x2000015c
     5bc:	0000454b 	.word	0x0000454b
     5c0:	20000170 	.word	0x20000170
     5c4:	00004551 	.word	0x00004551
     5c8:	00001e9d 	.word	0x00001e9d
     5cc:	00000df9 	.word	0x00000df9
     5d0:	00000e81 	.word	0x00000e81
     5d4:	00001ead 	.word	0x00001ead
     5d8:	00000ee1 	.word	0x00000ee1
     5dc:	00000f69 	.word	0x00000f69
     5e0:	00004515 	.word	0x00004515
     5e4:	00004541 	.word	0x00004541
     5e8:	00004571 	.word	0x00004571
     5ec:	0000448d 	.word	0x0000448d

000005f0 <send_packet>:

bool send_packet(bool resendFrames) {
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	b084      	sub	sp, #16
     5f4:	0005      	movs	r5, r0
    int count = 0;
    bool moreFrames = true;
     5f6:	230f      	movs	r3, #15
     5f8:	446b      	add	r3, sp
     5fa:	2201      	movs	r2, #1
     5fc:	701a      	strb	r2, [r3, #0]
    int count = 0;
     5fe:	2400      	movs	r4, #0
    while (moreFrames) {
     600:	e01a      	b.n	638 <send_packet+0x48>
        // check if frames are being resent
        if (resendFrames) {
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
            // break if all have been sent
            if (count == payload->resendCount) break;
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     602:	2202      	movs	r2, #2
     604:	e029      	b.n	65a <send_packet+0x6a>
        int frameIndex = count;
     606:	0023      	movs	r3, r4
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     608:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
        }

        // send frames
        GNClink_Get_Frame(txpacket, txframe, frameFlags, frameIndex, &moreFrames);
     60a:	491a      	ldr	r1, [pc, #104]	; (674 <send_packet+0x84>)
     60c:	481a      	ldr	r0, [pc, #104]	; (678 <send_packet+0x88>)
     60e:	260f      	movs	r6, #15
     610:	446e      	add	r6, sp
     612:	9600      	str	r6, [sp, #0]
     614:	4e19      	ldr	r6, [pc, #100]	; (67c <send_packet+0x8c>)
     616:	47b0      	blx	r6
        // send frame
#ifdef COMMS_TEST
        int random_value = rand() % 10;
        if (random_value != 0) {
#endif
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     618:	2d00      	cmp	r5, #0
     61a:	d121      	bne.n	660 <send_packet+0x70>
        serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     61c:	4915      	ldr	r1, [pc, #84]	; (674 <send_packet+0x84>)
     61e:	2214      	movs	r2, #20
     620:	2000      	movs	r0, #0
     622:	4b17      	ldr	r3, [pc, #92]	; (680 <send_packet+0x90>)
     624:	4798      	blx	r3
        serial_write_wait_until_complete(PORT0);
     626:	2000      	movs	r0, #0
     628:	4b16      	ldr	r3, [pc, #88]	; (684 <send_packet+0x94>)
     62a:	4798      	blx	r3
        led_off();
     62c:	2180      	movs	r1, #128	; 0x80
     62e:	03c9      	lsls	r1, r1, #15
     630:	2001      	movs	r0, #1
     632:	4b15      	ldr	r3, [pc, #84]	; (688 <send_packet+0x98>)
     634:	4798      	blx	r3
#ifdef COMMS_TEST
        }
#endif

        ++count;
     636:	3401      	adds	r4, #1
    while (moreFrames) {
     638:	230f      	movs	r3, #15
     63a:	446b      	add	r3, sp
     63c:	781b      	ldrb	r3, [r3, #0]
     63e:	2b00      	cmp	r3, #0
     640:	d014      	beq.n	66c <send_packet+0x7c>
        if (resendFrames) {
     642:	2d00      	cmp	r5, #0
     644:	d0df      	beq.n	606 <send_packet+0x16>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
     646:	4811      	ldr	r0, [pc, #68]	; (68c <send_packet+0x9c>)
     648:	4b11      	ldr	r3, [pc, #68]	; (690 <send_packet+0xa0>)
     64a:	4798      	blx	r3
            if (count == payload->resendCount) break;
     64c:	7803      	ldrb	r3, [r0, #0]
     64e:	42a3      	cmp	r3, r4
     650:	d00c      	beq.n	66c <send_packet+0x7c>
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     652:	3b01      	subs	r3, #1
     654:	42a3      	cmp	r3, r4
     656:	d0d4      	beq.n	602 <send_packet+0x12>
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     658:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
     65a:	1900      	adds	r0, r0, r4
     65c:	7843      	ldrb	r3, [r0, #1]
     65e:	e7d4      	b.n	60a <send_packet+0x1a>
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     660:	2180      	movs	r1, #128	; 0x80
     662:	03c9      	lsls	r1, r1, #15
     664:	2001      	movs	r0, #1
     666:	4b0b      	ldr	r3, [pc, #44]	; (694 <send_packet+0xa4>)
     668:	4798      	blx	r3
     66a:	e7d7      	b.n	61c <send_packet+0x2c>
    }
    return true;
}
     66c:	2001      	movs	r0, #1
     66e:	b004      	add	sp, #16
     670:	bd70      	pop	{r4, r5, r6, pc}
     672:	46c0      	nop			; (mov r8, r8)
     674:	20000170 	.word	0x20000170
     678:	200000dc 	.word	0x200000dc
     67c:	00004491 	.word	0x00004491
     680:	00000df9 	.word	0x00000df9
     684:	00000e81 	.word	0x00000e81
     688:	00001ead 	.word	0x00001ead
     68c:	2000015c 	.word	0x2000015c
     690:	0000448d 	.word	0x0000448d
     694:	00001e9d 	.word	0x00001e9d

00000698 <comms_loop>:

bool comms_loop() {
     698:	b510      	push	{r4, lr}
    bool run = true;
    while (run) {
     69a:	e002      	b.n	6a2 <comms_loop+0xa>
        // get packet, resend if required
        while (!get_packet()) {
            send_packet(true);
     69c:	2001      	movs	r0, #1
     69e:	4b07      	ldr	r3, [pc, #28]	; (6bc <comms_loop+0x24>)
     6a0:	4798      	blx	r3
        while (!get_packet()) {
     6a2:	4b07      	ldr	r3, [pc, #28]	; (6c0 <comms_loop+0x28>)
     6a4:	4798      	blx	r3
     6a6:	2800      	cmp	r0, #0
     6a8:	d0f8      	beq.n	69c <comms_loop+0x4>
        }

        if (evaluatePacket()) {
     6aa:	4b06      	ldr	r3, [pc, #24]	; (6c4 <comms_loop+0x2c>)
     6ac:	4798      	blx	r3
     6ae:	2800      	cmp	r0, #0
     6b0:	d0f7      	beq.n	6a2 <comms_loop+0xa>
            send_packet(false);
     6b2:	2000      	movs	r0, #0
     6b4:	4b01      	ldr	r3, [pc, #4]	; (6bc <comms_loop+0x24>)
     6b6:	4798      	blx	r3
     6b8:	e7f3      	b.n	6a2 <comms_loop+0xa>
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	000005f1 	.word	0x000005f1
     6c0:	000004d9 	.word	0x000004d9
     6c4:	00000435 	.word	0x00000435

000006c8 <get_address_from_id>:
    switch (type) {
     6c8:	2804      	cmp	r0, #4
     6ca:	d011      	beq.n	6f0 <get_address_from_id+0x28>
     6cc:	280b      	cmp	r0, #11
     6ce:	d01c      	beq.n	70a <get_address_from_id+0x42>
     6d0:	2803      	cmp	r0, #3
     6d2:	d001      	beq.n	6d8 <get_address_from_id+0x10>
}
     6d4:	2000      	movs	r0, #0
     6d6:	4770      	bx	lr
        if (id < __GLOBAL_I32_ID_START || id >= __GLOBAL_I32_ID_END) return false;
     6d8:	1e48      	subs	r0, r1, #1
     6da:	b2c0      	uxtb	r0, r0
     6dc:	280c      	cmp	r0, #12
     6de:	d8f9      	bhi.n	6d4 <get_address_from_id+0xc>
        *size = 4;
     6e0:	2004      	movs	r0, #4
     6e2:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_I32_ID_START;
     6e4:	3901      	subs	r1, #1
        *address = &(globals.__GLOBAL_I32_START_VARIABLE) + index;
     6e6:	4b0f      	ldr	r3, [pc, #60]	; (724 <get_address_from_id+0x5c>)
     6e8:	0089      	lsls	r1, r1, #2
     6ea:	185b      	adds	r3, r3, r1
     6ec:	6013      	str	r3, [r2, #0]
        break;
     6ee:	e7f2      	b.n	6d6 <get_address_from_id+0xe>
        if (id < __GLOBAL_U32_ID_START || id >= __GLOBAL_U32_ID_END) return false;
     6f0:	0008      	movs	r0, r1
     6f2:	380e      	subs	r0, #14
     6f4:	b2c0      	uxtb	r0, r0
     6f6:	2801      	cmp	r0, #1
     6f8:	d8ec      	bhi.n	6d4 <get_address_from_id+0xc>
        *size = 4;
     6fa:	2004      	movs	r0, #4
     6fc:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U32_ID_START;
     6fe:	390e      	subs	r1, #14
        *address = &(globals.__GLOBAL_U32_START_VARIABLE) + index;
     700:	4b09      	ldr	r3, [pc, #36]	; (728 <get_address_from_id+0x60>)
     702:	0089      	lsls	r1, r1, #2
     704:	185b      	adds	r3, r3, r1
     706:	6013      	str	r3, [r2, #0]
        break;
     708:	e7e5      	b.n	6d6 <get_address_from_id+0xe>
        if (id < __GLOBAL_BOOL_ID_START || id >= __GLOBAL_BOOL_ID_END) return false;
     70a:	0008      	movs	r0, r1
     70c:	3810      	subs	r0, #16
     70e:	b2c0      	uxtb	r0, r0
     710:	2807      	cmp	r0, #7
     712:	d8df      	bhi.n	6d4 <get_address_from_id+0xc>
        *size = 1;
     714:	2001      	movs	r0, #1
     716:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_BOOL_ID_START;
     718:	3910      	subs	r1, #16
        *address = &(globals.__GLOBAL_BOOL_START_VARIABLE) + index;
     71a:	4b04      	ldr	r3, [pc, #16]	; (72c <get_address_from_id+0x64>)
     71c:	185b      	adds	r3, r3, r1
     71e:	6013      	str	r3, [r2, #0]
}
     720:	e7d9      	b.n	6d6 <get_address_from_id+0xe>
     722:	46c0      	nop			; (mov r8, r8)
     724:	20000188 	.word	0x20000188
     728:	200001bc 	.word	0x200001bc
     72c:	200001c4 	.word	0x200001c4

00000730 <get_global_type_from_id>:
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     730:	1e43      	subs	r3, r0, #1
     732:	b2db      	uxtb	r3, r3
     734:	2b16      	cmp	r3, #22
     736:	d817      	bhi.n	768 <get_global_type_from_id+0x38>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     738:	2800      	cmp	r0, #0
     73a:	d009      	beq.n	750 <get_global_type_from_id+0x20>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     73c:	280d      	cmp	r0, #13
     73e:	d90b      	bls.n	758 <get_global_type_from_id+0x28>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     740:	280f      	cmp	r0, #15
     742:	d90d      	bls.n	760 <get_global_type_from_id+0x30>
    if (id - __GLOBAL_BOOL_ID_END < 0) {*type = __BOOL; return true;}
     744:	2817      	cmp	r0, #23
     746:	d810      	bhi.n	76a <get_global_type_from_id+0x3a>
     748:	230b      	movs	r3, #11
     74a:	700b      	strb	r3, [r1, #0]
     74c:	2001      	movs	r0, #1
     74e:	e00c      	b.n	76a <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     750:	2301      	movs	r3, #1
     752:	700b      	strb	r3, [r1, #0]
     754:	3001      	adds	r0, #1
     756:	e008      	b.n	76a <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     758:	2303      	movs	r3, #3
     75a:	700b      	strb	r3, [r1, #0]
     75c:	2001      	movs	r0, #1
     75e:	e004      	b.n	76a <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     760:	2304      	movs	r3, #4
     762:	700b      	strb	r3, [r1, #0]
     764:	2001      	movs	r0, #1
     766:	e000      	b.n	76a <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     768:	2000      	movs	r0, #0
}
     76a:	4770      	bx	lr

0000076c <get_global_address_size>:
bool get_global_address_size(Global_Variable_IDs id, void** address, int* size) {
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	b082      	sub	sp, #8
     770:	0004      	movs	r4, r0
     772:	000d      	movs	r5, r1
     774:	0016      	movs	r6, r2
    if (!get_global_type_from_id(id, &type)) return false;
     776:	466b      	mov	r3, sp
     778:	1dd9      	adds	r1, r3, #7
     77a:	4b08      	ldr	r3, [pc, #32]	; (79c <get_global_address_size+0x30>)
     77c:	4798      	blx	r3
     77e:	2800      	cmp	r0, #0
     780:	d102      	bne.n	788 <get_global_address_size+0x1c>
}
     782:	2000      	movs	r0, #0
     784:	b002      	add	sp, #8
     786:	bd70      	pop	{r4, r5, r6, pc}
    if (!get_address_from_id(type, id, address, size)) return false;
     788:	466b      	mov	r3, sp
     78a:	79d8      	ldrb	r0, [r3, #7]
     78c:	0033      	movs	r3, r6
     78e:	002a      	movs	r2, r5
     790:	0021      	movs	r1, r4
     792:	4c03      	ldr	r4, [pc, #12]	; (7a0 <get_global_address_size+0x34>)
     794:	47a0      	blx	r4
     796:	2800      	cmp	r0, #0
     798:	d1f4      	bne.n	784 <get_global_address_size+0x18>
     79a:	e7f2      	b.n	782 <get_global_address_size+0x16>
     79c:	00000731 	.word	0x00000731
     7a0:	000006c9 	.word	0x000006c9

000007a4 <load_global>:
}

bool load_global(Global_Variable_IDs id) {
     7a4:	b530      	push	{r4, r5, lr}
     7a6:	b08f      	sub	sp, #60	; 0x3c
     7a8:	0005      	movs	r5, r0
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
     7aa:	2137      	movs	r1, #55	; 0x37
     7ac:	4469      	add	r1, sp
     7ae:	4b10      	ldr	r3, [pc, #64]	; (7f0 <load_global+0x4c>)
     7b0:	4798      	blx	r3
     7b2:	1e04      	subs	r4, r0, #0
     7b4:	d102      	bne.n	7bc <load_global+0x18>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
    EEPROM_Request request;
    eeprom_read_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}
     7b6:	0020      	movs	r0, r4
     7b8:	b00f      	add	sp, #60	; 0x3c
     7ba:	bd30      	pop	{r4, r5, pc}
    if (!get_address_from_id(type, id, &address, &size)) return false;
     7bc:	2337      	movs	r3, #55	; 0x37
     7be:	446b      	add	r3, sp
     7c0:	7818      	ldrb	r0, [r3, #0]
     7c2:	ab0b      	add	r3, sp, #44	; 0x2c
     7c4:	aa0c      	add	r2, sp, #48	; 0x30
     7c6:	0029      	movs	r1, r5
     7c8:	4c0a      	ldr	r4, [pc, #40]	; (7f4 <load_global+0x50>)
     7ca:	47a0      	blx	r4
     7cc:	1e04      	subs	r4, r0, #0
     7ce:	d0f2      	beq.n	7b6 <load_global+0x12>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
     7d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     7d2:	4909      	ldr	r1, [pc, #36]	; (7f8 <load_global+0x54>)
     7d4:	2320      	movs	r3, #32
     7d6:	1a5b      	subs	r3, r3, r1
     7d8:	189b      	adds	r3, r3, r2
     7da:	930a      	str	r3, [sp, #40]	; 0x28
    eeprom_read_request(&request, eeprom_address, address, size);
     7dc:	990a      	ldr	r1, [sp, #40]	; 0x28
     7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     7e0:	4668      	mov	r0, sp
     7e2:	4d06      	ldr	r5, [pc, #24]	; (7fc <load_global+0x58>)
     7e4:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     7e6:	4668      	mov	r0, sp
     7e8:	4b05      	ldr	r3, [pc, #20]	; (800 <load_global+0x5c>)
     7ea:	4798      	blx	r3
    return true;
     7ec:	e7e3      	b.n	7b6 <load_global+0x12>
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	00000731 	.word	0x00000731
     7f4:	000006c9 	.word	0x000006c9
     7f8:	20000188 	.word	0x20000188
     7fc:	000009a9 	.word	0x000009a9
     800:	00003c81 	.word	0x00003c81

00000804 <save_global>:

bool save_global(Global_Variable_IDs id) {
     804:	b530      	push	{r4, r5, lr}
     806:	b08f      	sub	sp, #60	; 0x3c
     808:	0005      	movs	r5, r0
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
     80a:	2137      	movs	r1, #55	; 0x37
     80c:	4469      	add	r1, sp
     80e:	4b10      	ldr	r3, [pc, #64]	; (850 <save_global+0x4c>)
     810:	4798      	blx	r3
     812:	1e04      	subs	r4, r0, #0
     814:	d102      	bne.n	81c <save_global+0x18>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
    EEPROM_Request request;
    eeprom_write_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}
     816:	0020      	movs	r0, r4
     818:	b00f      	add	sp, #60	; 0x3c
     81a:	bd30      	pop	{r4, r5, pc}
    if (!get_address_from_id(type, id, &address, &size)) return false;
     81c:	2337      	movs	r3, #55	; 0x37
     81e:	446b      	add	r3, sp
     820:	7818      	ldrb	r0, [r3, #0]
     822:	ab0b      	add	r3, sp, #44	; 0x2c
     824:	aa0c      	add	r2, sp, #48	; 0x30
     826:	0029      	movs	r1, r5
     828:	4c0a      	ldr	r4, [pc, #40]	; (854 <save_global+0x50>)
     82a:	47a0      	blx	r4
     82c:	1e04      	subs	r4, r0, #0
     82e:	d0f2      	beq.n	816 <save_global+0x12>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
     830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     832:	4909      	ldr	r1, [pc, #36]	; (858 <save_global+0x54>)
     834:	2320      	movs	r3, #32
     836:	1a5b      	subs	r3, r3, r1
     838:	189b      	adds	r3, r3, r2
     83a:	930a      	str	r3, [sp, #40]	; 0x28
    eeprom_write_request(&request, eeprom_address, address, size);
     83c:	990a      	ldr	r1, [sp, #40]	; 0x28
     83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     840:	4668      	mov	r0, sp
     842:	4d06      	ldr	r5, [pc, #24]	; (85c <save_global+0x58>)
     844:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     846:	4668      	mov	r0, sp
     848:	4b05      	ldr	r3, [pc, #20]	; (860 <save_global+0x5c>)
     84a:	4798      	blx	r3
    return true;
     84c:	e7e3      	b.n	816 <save_global+0x12>
     84e:	46c0      	nop			; (mov r8, r8)
     850:	00000731 	.word	0x00000731
     854:	000006c9 	.word	0x000006c9
     858:	20000188 	.word	0x20000188
     85c:	000009d5 	.word	0x000009d5
     860:	00003c81 	.word	0x00003c81

00000864 <get_global_name>:

bool get_global_name(Global_Variable_IDs id, uint8_t* buffer, int* length, int maxLength) {
     864:	b5f0      	push	{r4, r5, r6, r7, lr}
     866:	46c6      	mov	lr, r8
     868:	b500      	push	{lr}
     86a:	000d      	movs	r5, r1
     86c:	0017      	movs	r7, r2
     86e:	001c      	movs	r4, r3
    bool ret = true;
    if (id >= __GLOBAL_ID_END) {
     870:	2817      	cmp	r0, #23
     872:	d817      	bhi.n	8a4 <get_global_name+0x40>
    bool ret = true;
     874:	2301      	movs	r3, #1
     876:	4698      	mov	r8, r3
        id = 0;
        ret = false;
    }

    *length = MIN_2(maxLength, strlen(global_variable_names[id]) + 1);
     878:	0006      	movs	r6, r0
     87a:	4b0c      	ldr	r3, [pc, #48]	; (8ac <get_global_name+0x48>)
     87c:	0080      	lsls	r0, r0, #2
     87e:	58c0      	ldr	r0, [r0, r3]
     880:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <get_global_name+0x4c>)
     882:	4798      	blx	r3
     884:	3001      	adds	r0, #1
     886:	42a0      	cmp	r0, r4
     888:	d800      	bhi.n	88c <get_global_name+0x28>
     88a:	0004      	movs	r4, r0
     88c:	603c      	str	r4, [r7, #0]

    memcpy(buffer, global_variable_names[id], *length);
     88e:	4b07      	ldr	r3, [pc, #28]	; (8ac <get_global_name+0x48>)
     890:	00b6      	lsls	r6, r6, #2
     892:	58f1      	ldr	r1, [r6, r3]
     894:	0022      	movs	r2, r4
     896:	0028      	movs	r0, r5
     898:	4b06      	ldr	r3, [pc, #24]	; (8b4 <get_global_name+0x50>)
     89a:	4798      	blx	r3

    return ret;
}
     89c:	4640      	mov	r0, r8
     89e:	bc80      	pop	{r7}
     8a0:	46b8      	mov	r8, r7
     8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = false;
     8a4:	2300      	movs	r3, #0
     8a6:	4698      	mov	r8, r3
        id = 0;
     8a8:	2000      	movs	r0, #0
     8aa:	e7e5      	b.n	878 <get_global_name+0x14>
     8ac:	20000000 	.word	0x20000000
     8b0:	00005649 	.word	0x00005649
     8b4:	000055b9 	.word	0x000055b9

000008b8 <init_globals>:

bool init_globals() {
     8b8:	b570      	push	{r4, r5, r6, lr}
     8ba:	b08a      	sub	sp, #40	; 0x28
    // load header
    EEPROM_Request request;
    eeprom_read_request(&request, 0, &__eeprom_header, sizeof(__eeprom_header));
     8bc:	4c1b      	ldr	r4, [pc, #108]	; (92c <init_globals+0x74>)
     8be:	0022      	movs	r2, r4
     8c0:	3248      	adds	r2, #72	; 0x48
     8c2:	2308      	movs	r3, #8
     8c4:	2100      	movs	r1, #0
     8c6:	4668      	mov	r0, sp
     8c8:	4d19      	ldr	r5, [pc, #100]	; (930 <init_globals+0x78>)
     8ca:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     8cc:	4668      	mov	r0, sp
     8ce:	4b19      	ldr	r3, [pc, #100]	; (934 <init_globals+0x7c>)
     8d0:	4798      	blx	r3
    
    // check and modify header values
    if (__eeprom_header.GlobalHash != __GLOBAL_HASH) {
     8d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
     8d4:	4b18      	ldr	r3, [pc, #96]	; (938 <init_globals+0x80>)
     8d6:	429a      	cmp	r2, r3
     8d8:	d11c      	bne.n	914 <init_globals+0x5c>
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
        eeprom_wait_until_done(&request);
    }
    
    ++__eeprom_header.StartupCount;
     8da:	4c14      	ldr	r4, [pc, #80]	; (92c <init_globals+0x74>)
     8dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     8de:	3301      	adds	r3, #1
     8e0:	64e3      	str	r3, [r4, #76]	; 0x4c
    eeprom_write_request(&request, 4, &(__eeprom_header.StartupCount), 4);
     8e2:	0022      	movs	r2, r4
     8e4:	324c      	adds	r2, #76	; 0x4c
     8e6:	2304      	movs	r3, #4
     8e8:	2104      	movs	r1, #4
     8ea:	4668      	mov	r0, sp
     8ec:	4d13      	ldr	r5, [pc, #76]	; (93c <init_globals+0x84>)
     8ee:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     8f0:	4668      	mov	r0, sp
     8f2:	4d10      	ldr	r5, [pc, #64]	; (934 <init_globals+0x7c>)
     8f4:	47a8      	blx	r5

    // load globals
    eeprom_read_request(&request, __EEPROM_GLOBAL_VARIABLES_START_ADDRESS, &globals, sizeof(globals));
     8f6:	2348      	movs	r3, #72	; 0x48
     8f8:	0022      	movs	r2, r4
     8fa:	2120      	movs	r1, #32
     8fc:	4668      	mov	r0, sp
     8fe:	4e0c      	ldr	r6, [pc, #48]	; (930 <init_globals+0x78>)
     900:	47b0      	blx	r6
    eeprom_wait_until_done(&request);
     902:	4668      	mov	r0, sp
     904:	47a8      	blx	r5

    globals.GlobalHash = __eeprom_header.GlobalHash;
     906:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     908:	6363      	str	r3, [r4, #52]	; 0x34
    globals.StartupCount = __eeprom_header.StartupCount;
     90a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     90c:	63a3      	str	r3, [r4, #56]	; 0x38

    return true;
     90e:	2001      	movs	r0, #1
     910:	b00a      	add	sp, #40	; 0x28
     912:	bd70      	pop	{r4, r5, r6, pc}
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
     914:	4a05      	ldr	r2, [pc, #20]	; (92c <init_globals+0x74>)
     916:	6493      	str	r3, [r2, #72]	; 0x48
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
     918:	3248      	adds	r2, #72	; 0x48
     91a:	2304      	movs	r3, #4
     91c:	2100      	movs	r1, #0
     91e:	4668      	mov	r0, sp
     920:	4c06      	ldr	r4, [pc, #24]	; (93c <init_globals+0x84>)
     922:	47a0      	blx	r4
        eeprom_wait_until_done(&request);
     924:	4668      	mov	r0, sp
     926:	4b03      	ldr	r3, [pc, #12]	; (934 <init_globals+0x7c>)
     928:	4798      	blx	r3
     92a:	e7d6      	b.n	8da <init_globals+0x22>
     92c:	20000188 	.word	0x20000188
     930:	000009a9 	.word	0x000009a9
     934:	00003c81 	.word	0x00003c81
     938:	6f5242bf 	.word	0x6f5242bf
     93c:	000009d5 	.word	0x000009d5

00000940 <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     940:	b510      	push	{r4, lr}
     942:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     944:	2480      	movs	r4, #128	; 0x80
     946:	05e4      	lsls	r4, r4, #23
     948:	0021      	movs	r1, r4
     94a:	2001      	movs	r0, #1
     94c:	4b0b      	ldr	r3, [pc, #44]	; (97c <init_eeprom+0x3c>)
     94e:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     950:	0021      	movs	r1, r4
     952:	2001      	movs	r0, #1
     954:	4b0a      	ldr	r3, [pc, #40]	; (980 <init_eeprom+0x40>)
     956:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     958:	ab02      	add	r3, sp, #8
     95a:	490a      	ldr	r1, [pc, #40]	; (984 <init_eeprom+0x44>)
     95c:	680a      	ldr	r2, [r1, #0]
     95e:	9202      	str	r2, [sp, #8]
     960:	7909      	ldrb	r1, [r1, #4]
     962:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     964:	4808      	ldr	r0, [pc, #32]	; (988 <init_eeprom+0x48>)
     966:	2180      	movs	r1, #128	; 0x80
     968:	0209      	lsls	r1, r1, #8
     96a:	9100      	str	r1, [sp, #0]
     96c:	9b03      	ldr	r3, [sp, #12]
     96e:	4907      	ldr	r1, [pc, #28]	; (98c <init_eeprom+0x4c>)
     970:	4c07      	ldr	r4, [pc, #28]	; (990 <init_eeprom+0x50>)
     972:	47a0      	blx	r4

    return true;
}
     974:	2001      	movs	r0, #1
     976:	b004      	add	sp, #16
     978:	bd10      	pop	{r4, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	00001e9d 	.word	0x00001e9d
     980:	00001e8d 	.word	0x00001e8d
     984:	00005a08 	.word	0x00005a08
     988:	200001d8 	.word	0x200001d8
     98c:	42001400 	.word	0x42001400
     990:	0000173d 	.word	0x0000173d

00000994 <check_eeprom>:

bool check_eeprom() {
     994:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     996:	4802      	ldr	r0, [pc, #8]	; (9a0 <check_eeprom+0xc>)
     998:	4b02      	ldr	r3, [pc, #8]	; (9a4 <check_eeprom+0x10>)
     99a:	4798      	blx	r3
}
     99c:	bd10      	pop	{r4, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	200001d8 	.word	0x200001d8
     9a4:	000018e9 	.word	0x000018e9

000009a8 <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     9a8:	b530      	push	{r4, r5, lr}
     9aa:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     9ac:	4d06      	ldr	r5, [pc, #24]	; (9c8 <eeprom_read_request+0x20>)
     9ae:	4c07      	ldr	r4, [pc, #28]	; (9cc <eeprom_read_request+0x24>)
     9b0:	9203      	str	r2, [sp, #12]
     9b2:	9302      	str	r3, [sp, #8]
     9b4:	9101      	str	r1, [sp, #4]
     9b6:	2300      	movs	r3, #0
     9b8:	9300      	str	r3, [sp, #0]
     9ba:	002a      	movs	r2, r5
     9bc:	0001      	movs	r1, r0
     9be:	0020      	movs	r0, r4
     9c0:	4c03      	ldr	r4, [pc, #12]	; (9d0 <eeprom_read_request+0x28>)
     9c2:	47a0      	blx	r4
}
     9c4:	b005      	add	sp, #20
     9c6:	bd30      	pop	{r4, r5, pc}
     9c8:	200001d8 	.word	0x200001d8
     9cc:	200002dc 	.word	0x200002dc
     9d0:	00003c4d 	.word	0x00003c4d

000009d4 <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     9d4:	b530      	push	{r4, r5, lr}
     9d6:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     9d8:	4d07      	ldr	r5, [pc, #28]	; (9f8 <eeprom_write_request+0x24>)
     9da:	4c08      	ldr	r4, [pc, #32]	; (9fc <eeprom_write_request+0x28>)
     9dc:	9203      	str	r2, [sp, #12]
     9de:	9302      	str	r3, [sp, #8]
     9e0:	9101      	str	r1, [sp, #4]
     9e2:	2301      	movs	r3, #1
     9e4:	9300      	str	r3, [sp, #0]
     9e6:	2300      	movs	r3, #0
     9e8:	002a      	movs	r2, r5
     9ea:	0001      	movs	r1, r0
     9ec:	0020      	movs	r0, r4
     9ee:	4c04      	ldr	r4, [pc, #16]	; (a00 <eeprom_write_request+0x2c>)
     9f0:	47a0      	blx	r4
     9f2:	b005      	add	sp, #20
     9f4:	bd30      	pop	{r4, r5, pc}
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	200001d8 	.word	0x200001d8
     9fc:	200002dc 	.word	0x200002dc
     a00:	00003c4d 	.word	0x00003c4d

00000a04 <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     a04:	b5f0      	push	{r4, r5, r6, r7, lr}
     a06:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     a08:	2480      	movs	r4, #128	; 0x80
     a0a:	0524      	lsls	r4, r4, #20
     a0c:	0021      	movs	r1, r4
     a0e:	2000      	movs	r0, #0
     a10:	4e15      	ldr	r6, [pc, #84]	; (a68 <imu_init+0x64>)
     a12:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     a14:	0021      	movs	r1, r4
     a16:	2000      	movs	r0, #0
     a18:	4f14      	ldr	r7, [pc, #80]	; (a6c <imu_init+0x68>)
     a1a:	47b8      	blx	r7
	IMU_OFF_BUS();
     a1c:	2580      	movs	r5, #128	; 0x80
     a1e:	03ad      	lsls	r5, r5, #14
     a20:	0029      	movs	r1, r5
     a22:	2000      	movs	r0, #0
     a24:	4b12      	ldr	r3, [pc, #72]	; (a70 <imu_init+0x6c>)
     a26:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     a28:	0029      	movs	r1, r5
     a2a:	2000      	movs	r0, #0
     a2c:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     a2e:	0029      	movs	r1, r5
     a30:	2000      	movs	r0, #0
     a32:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     a34:	9400      	str	r4, [sp, #0]
     a36:	2300      	movs	r3, #0
     a38:	466a      	mov	r2, sp
     a3a:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     a3c:	480d      	ldr	r0, [pc, #52]	; (a74 <imu_init+0x70>)
     a3e:	0022      	movs	r2, r4
     a40:	9b01      	ldr	r3, [sp, #4]
     a42:	490d      	ldr	r1, [pc, #52]	; (a78 <imu_init+0x74>)
     a44:	4c0d      	ldr	r4, [pc, #52]	; (a7c <imu_init+0x78>)
     a46:	47a0      	blx	r4
     a48:	1e04      	subs	r4, r0, #0
     a4a:	d107      	bne.n	a5c <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	0389      	lsls	r1, r1, #14
     a50:	2000      	movs	r0, #0
     a52:	4b07      	ldr	r3, [pc, #28]	; (a70 <imu_init+0x6c>)
     a54:	4798      	blx	r3
    return ret;
}
     a56:	0020      	movs	r0, r4
     a58:	b003      	add	sp, #12
     a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     a5c:	4805      	ldr	r0, [pc, #20]	; (a74 <imu_init+0x70>)
     a5e:	4b08      	ldr	r3, [pc, #32]	; (a80 <imu_init+0x7c>)
     a60:	4798      	blx	r3
     a62:	0004      	movs	r4, r0
     a64:	e7f2      	b.n	a4c <imu_init+0x48>
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	00001e9d 	.word	0x00001e9d
     a6c:	00001e8d 	.word	0x00001e8d
     a70:	00001ead 	.word	0x00001ead
     a74:	200001e4 	.word	0x200001e4
     a78:	42001400 	.word	0x42001400
     a7c:	00001cbd 	.word	0x00001cbd
     a80:	00001e01 	.word	0x00001e01

00000a84 <check_imu>:

bool check_imu() {
     a84:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     a86:	2180      	movs	r1, #128	; 0x80
     a88:	0389      	lsls	r1, r1, #14
     a8a:	2000      	movs	r0, #0
     a8c:	4b09      	ldr	r3, [pc, #36]	; (ab4 <check_imu+0x30>)
     a8e:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     a90:	4809      	ldr	r0, [pc, #36]	; (ab8 <check_imu+0x34>)
     a92:	4b0a      	ldr	r3, [pc, #40]	; (abc <check_imu+0x38>)
     a94:	4798      	blx	r3
     a96:	1e04      	subs	r4, r0, #0
     a98:	d106      	bne.n	aa8 <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     a9a:	2180      	movs	r1, #128	; 0x80
     a9c:	0389      	lsls	r1, r1, #14
     a9e:	2000      	movs	r0, #0
     aa0:	4b07      	ldr	r3, [pc, #28]	; (ac0 <check_imu+0x3c>)
     aa2:	4798      	blx	r3
    return pass;
}
     aa4:	0020      	movs	r0, r4
     aa6:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     aa8:	4803      	ldr	r0, [pc, #12]	; (ab8 <check_imu+0x34>)
     aaa:	4b06      	ldr	r3, [pc, #24]	; (ac4 <check_imu+0x40>)
     aac:	4798      	blx	r3
     aae:	0004      	movs	r4, r0
     ab0:	e7f3      	b.n	a9a <check_imu+0x16>
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	00001e9d 	.word	0x00001e9d
     ab8:	200001e4 	.word	0x200001e4
     abc:	00001d2d 	.word	0x00001d2d
     ac0:	00001ead 	.word	0x00001ead
     ac4:	00001e5d 	.word	0x00001e5d

00000ac8 <request_imu_data>:

void request_imu_data() {
     ac8:	b510      	push	{r4, lr}
     aca:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     acc:	4a09      	ldr	r2, [pc, #36]	; (af4 <request_imu_data+0x2c>)
     ace:	0011      	movs	r1, r2
     ad0:	310c      	adds	r1, #12
     ad2:	4809      	ldr	r0, [pc, #36]	; (af8 <request_imu_data+0x30>)
     ad4:	0013      	movs	r3, r2
     ad6:	3334      	adds	r3, #52	; 0x34
     ad8:	9304      	str	r3, [sp, #16]
     ada:	230e      	movs	r3, #14
     adc:	9303      	str	r3, [sp, #12]
     ade:	331f      	adds	r3, #31
     ae0:	9302      	str	r3, [sp, #8]
     ae2:	2300      	movs	r3, #0
     ae4:	9301      	str	r3, [sp, #4]
     ae6:	9300      	str	r3, [sp, #0]
     ae8:	3302      	adds	r3, #2
     aea:	4c04      	ldr	r4, [pc, #16]	; (afc <request_imu_data+0x34>)
     aec:	47a0      	blx	r4
}
     aee:	b006      	add	sp, #24
     af0:	bd10      	pop	{r4, pc}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	200001e4 	.word	0x200001e4
     af8:	200002dc 	.word	0x200002dc
     afc:	00003ef1 	.word	0x00003ef1

00000b00 <wait_for_imu_data>:

void wait_for_imu_data() {
     b00:	b5f0      	push	{r4, r5, r6, r7, lr}
     b02:	46c6      	mov	lr, r8
     b04:	b500      	push	{lr}
     b06:	b086      	sub	sp, #24
    imu_icm20948_wait_until_done(&data_request);
     b08:	4c8c      	ldr	r4, [pc, #560]	; (d3c <wait_for_imu_data+0x23c>)
     b0a:	0020      	movs	r0, r4
     b0c:	300c      	adds	r0, #12
     b0e:	4b8c      	ldr	r3, [pc, #560]	; (d40 <wait_for_imu_data+0x240>)
     b10:	4798      	blx	r3

    // float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
    int32_t accel_multiplier = (__G__ * ACCEL_MIN_RANGE_G) >> (15 - accel_fs_sel);
     b12:	6c66      	ldr	r6, [r4, #68]	; 0x44
     b14:	230f      	movs	r3, #15
     b16:	469c      	mov	ip, r3
     b18:	1b9b      	subs	r3, r3, r6
     b1a:	488a      	ldr	r0, [pc, #552]	; (d44 <wait_for_imu_data+0x244>)
     b1c:	4118      	asrs	r0, r3
    globals.AccelerationXRaw = SWAPI16(raw_data.accel_x) * accel_multiplier;
     b1e:	2234      	movs	r2, #52	; 0x34
     b20:	5ea3      	ldrsh	r3, [r4, r2]
     b22:	0219      	lsls	r1, r3, #8
     b24:	b209      	sxth	r1, r1
     b26:	b29b      	uxth	r3, r3
     b28:	0a1b      	lsrs	r3, r3, #8
     b2a:	4319      	orrs	r1, r3
     b2c:	0003      	movs	r3, r0
     b2e:	434b      	muls	r3, r1
     b30:	4f85      	ldr	r7, [pc, #532]	; (d48 <wait_for_imu_data+0x248>)
     b32:	603b      	str	r3, [r7, #0]
    globals.AccelerationYRaw = SWAPI16(raw_data.accel_y) * accel_multiplier;
     b34:	2236      	movs	r2, #54	; 0x36
     b36:	5ea3      	ldrsh	r3, [r4, r2]
     b38:	021a      	lsls	r2, r3, #8
     b3a:	b212      	sxth	r2, r2
     b3c:	b29b      	uxth	r3, r3
     b3e:	0a1b      	lsrs	r3, r3, #8
     b40:	431a      	orrs	r2, r3
     b42:	0003      	movs	r3, r0
     b44:	4353      	muls	r3, r2
     b46:	607b      	str	r3, [r7, #4]
    globals.AccelerationZRaw = SWAPI16(raw_data.accel_z) * accel_multiplier;
     b48:	2338      	movs	r3, #56	; 0x38
     b4a:	5ee5      	ldrsh	r5, [r4, r3]
     b4c:	022b      	lsls	r3, r5, #8
     b4e:	b21b      	sxth	r3, r3
     b50:	b2ad      	uxth	r5, r5
     b52:	0a2d      	lsrs	r5, r5, #8
     b54:	432b      	orrs	r3, r5
     b56:	4698      	mov	r8, r3
     b58:	4358      	muls	r0, r3
     b5a:	60b8      	str	r0, [r7, #8]

    // float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
    int32_t gyro_multiplier = (GYRO_MIN_RANGE_MICRORADIANS) >> (15 - gyro_fs_sel);
     b5c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
     b5e:	4660      	mov	r0, ip
     b60:	1b45      	subs	r5, r0, r5
     b62:	487a      	ldr	r0, [pc, #488]	; (d4c <wait_for_imu_data+0x24c>)
     b64:	4128      	asrs	r0, r5
    globals.AngularVelocityXRaw = SWAPI16(raw_data.gyro_x) * gyro_multiplier;
     b66:	233a      	movs	r3, #58	; 0x3a
     b68:	5ee5      	ldrsh	r5, [r4, r3]
     b6a:	46ac      	mov	ip, r5
     b6c:	022d      	lsls	r5, r5, #8
     b6e:	b22d      	sxth	r5, r5
     b70:	4663      	mov	r3, ip
     b72:	b29b      	uxth	r3, r3
     b74:	0a1b      	lsrs	r3, r3, #8
     b76:	431d      	orrs	r5, r3
     b78:	4345      	muls	r5, r0
     b7a:	60fd      	str	r5, [r7, #12]
    globals.AngularVelocityYRaw = SWAPI16(raw_data.gyro_y)* gyro_multiplier;
     b7c:	253c      	movs	r5, #60	; 0x3c
     b7e:	5f63      	ldrsh	r3, [r4, r5]
     b80:	021d      	lsls	r5, r3, #8
     b82:	b22d      	sxth	r5, r5
     b84:	b29b      	uxth	r3, r3
     b86:	0a1b      	lsrs	r3, r3, #8
     b88:	431d      	orrs	r5, r3
     b8a:	4345      	muls	r5, r0
     b8c:	613d      	str	r5, [r7, #16]
    globals.AngularVelocityZRaw = SWAPI16(raw_data.gyro_z) * gyro_multiplier;
     b8e:	233e      	movs	r3, #62	; 0x3e
     b90:	5ee4      	ldrsh	r4, [r4, r3]
     b92:	0225      	lsls	r5, r4, #8
     b94:	b22d      	sxth	r5, r5
     b96:	b2a4      	uxth	r4, r4
     b98:	0a24      	lsrs	r4, r4, #8
     b9a:	432c      	orrs	r4, r5
     b9c:	4360      	muls	r0, r4
     b9e:	6178      	str	r0, [r7, #20]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     ba0:	4643      	mov	r3, r8
     ba2:	17d8      	asrs	r0, r3, #31
     ba4:	181b      	adds	r3, r3, r0
     ba6:	4043      	eors	r3, r0
     ba8:	b29b      	uxth	r3, r3
     baa:	17d0      	asrs	r0, r2, #31
     bac:	1812      	adds	r2, r2, r0
     bae:	4042      	eors	r2, r0
     bb0:	b292      	uxth	r2, r2
     bb2:	17c8      	asrs	r0, r1, #31
     bb4:	1809      	adds	r1, r1, r0
     bb6:	4041      	eors	r1, r0
     bb8:	b289      	uxth	r1, r1
     bba:	1c10      	adds	r0, r2, #0
     bbc:	428a      	cmp	r2, r1
     bbe:	d200      	bcs.n	bc2 <wait_for_imu_data+0xc2>
     bc0:	1c08      	adds	r0, r1, #0
     bc2:	1c1a      	adds	r2, r3, #0
     bc4:	b281      	uxth	r1, r0
     bc6:	428b      	cmp	r3, r1
     bc8:	d200      	bcs.n	bcc <wait_for_imu_data+0xcc>
     bca:	1c02      	adds	r2, r0, #0
     bcc:	b212      	sxth	r2, r2
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     bce:	2e03      	cmp	r6, #3
     bd0:	d002      	beq.n	bd8 <wait_for_imu_data+0xd8>
     bd2:	4b5f      	ldr	r3, [pc, #380]	; (d50 <wait_for_imu_data+0x250>)
     bd4:	429a      	cmp	r2, r3
     bd6:	dc40      	bgt.n	c5a <wait_for_imu_data+0x15a>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     bd8:	2e00      	cmp	r6, #0
     bda:	d002      	beq.n	be2 <wait_for_imu_data+0xe2>
     bdc:	4b5d      	ldr	r3, [pc, #372]	; (d54 <wait_for_imu_data+0x254>)
     bde:	429a      	cmp	r2, r3
     be0:	dd55      	ble.n	c8e <wait_for_imu_data+0x18e>
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     be2:	4856      	ldr	r0, [pc, #344]	; (d3c <wait_for_imu_data+0x23c>)
     be4:	233e      	movs	r3, #62	; 0x3e
     be6:	5ec2      	ldrsh	r2, [r0, r3]
     be8:	0213      	lsls	r3, r2, #8
     bea:	b21b      	sxth	r3, r3
     bec:	b292      	uxth	r2, r2
     bee:	0a12      	lsrs	r2, r2, #8
     bf0:	4313      	orrs	r3, r2
     bf2:	17da      	asrs	r2, r3, #31
     bf4:	189b      	adds	r3, r3, r2
     bf6:	4053      	eors	r3, r2
     bf8:	b29b      	uxth	r3, r3
     bfa:	223c      	movs	r2, #60	; 0x3c
     bfc:	5e81      	ldrsh	r1, [r0, r2]
     bfe:	020a      	lsls	r2, r1, #8
     c00:	b212      	sxth	r2, r2
     c02:	b289      	uxth	r1, r1
     c04:	0a09      	lsrs	r1, r1, #8
     c06:	430a      	orrs	r2, r1
     c08:	17d1      	asrs	r1, r2, #31
     c0a:	1852      	adds	r2, r2, r1
     c0c:	404a      	eors	r2, r1
     c0e:	b292      	uxth	r2, r2
     c10:	213a      	movs	r1, #58	; 0x3a
     c12:	5e40      	ldrsh	r0, [r0, r1]
     c14:	0201      	lsls	r1, r0, #8
     c16:	b209      	sxth	r1, r1
     c18:	b280      	uxth	r0, r0
     c1a:	0a00      	lsrs	r0, r0, #8
     c1c:	4301      	orrs	r1, r0
     c1e:	17c8      	asrs	r0, r1, #31
     c20:	1809      	adds	r1, r1, r0
     c22:	4041      	eors	r1, r0
     c24:	b289      	uxth	r1, r1
     c26:	1c10      	adds	r0, r2, #0
     c28:	428a      	cmp	r2, r1
     c2a:	d200      	bcs.n	c2e <wait_for_imu_data+0x12e>
     c2c:	1c08      	adds	r0, r1, #0
     c2e:	1c1a      	adds	r2, r3, #0
     c30:	b281      	uxth	r1, r0
     c32:	428b      	cmp	r3, r1
     c34:	d200      	bcs.n	c38 <wait_for_imu_data+0x138>
     c36:	1c02      	adds	r2, r0, #0
     c38:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     c3a:	4b40      	ldr	r3, [pc, #256]	; (d3c <wait_for_imu_data+0x23c>)
     c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     c3e:	2b03      	cmp	r3, #3
     c40:	d002      	beq.n	c48 <wait_for_imu_data+0x148>
     c42:	4943      	ldr	r1, [pc, #268]	; (d50 <wait_for_imu_data+0x250>)
     c44:	428a      	cmp	r2, r1
     c46:	dc3c      	bgt.n	cc2 <wait_for_imu_data+0x1c2>
        ++gyro_fs_sel;
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     c48:	2b00      	cmp	r3, #0
     c4a:	d002      	beq.n	c52 <wait_for_imu_data+0x152>
     c4c:	4941      	ldr	r1, [pc, #260]	; (d54 <wait_for_imu_data+0x254>)
     c4e:	428a      	cmp	r2, r1
     c50:	dd55      	ble.n	cfe <wait_for_imu_data+0x1fe>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_off();
    }

     c52:	b006      	add	sp, #24
     c54:	bc80      	pop	{r7}
     c56:	46b8      	mov	r8, r7
     c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     c5a:	3601      	adds	r6, #1
     c5c:	4a37      	ldr	r2, [pc, #220]	; (d3c <wait_for_imu_data+0x23c>)
     c5e:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     c60:	b2f6      	uxtb	r6, r6
     c62:	0076      	lsls	r6, r6, #1
     c64:	2306      	movs	r3, #6
     c66:	401e      	ands	r6, r3
     c68:	3346      	adds	r3, #70	; 0x46
     c6a:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     c6c:	0011      	movs	r1, r2
     c6e:	3150      	adds	r1, #80	; 0x50
     c70:	4839      	ldr	r0, [pc, #228]	; (d58 <wait_for_imu_data+0x258>)
     c72:	0013      	movs	r3, r2
     c74:	334c      	adds	r3, #76	; 0x4c
     c76:	9304      	str	r3, [sp, #16]
     c78:	2301      	movs	r3, #1
     c7a:	9303      	str	r3, [sp, #12]
     c7c:	2414      	movs	r4, #20
     c7e:	9402      	str	r4, [sp, #8]
     c80:	3c12      	subs	r4, #18
     c82:	9401      	str	r4, [sp, #4]
     c84:	9300      	str	r3, [sp, #0]
     c86:	3301      	adds	r3, #1
     c88:	4c34      	ldr	r4, [pc, #208]	; (d5c <wait_for_imu_data+0x25c>)
     c8a:	47a0      	blx	r4
     c8c:	e7a9      	b.n	be2 <wait_for_imu_data+0xe2>
        --accel_fs_sel;
     c8e:	3e01      	subs	r6, #1
     c90:	4a2a      	ldr	r2, [pc, #168]	; (d3c <wait_for_imu_data+0x23c>)
     c92:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     c94:	b2f6      	uxtb	r6, r6
     c96:	0076      	lsls	r6, r6, #1
     c98:	2306      	movs	r3, #6
     c9a:	401e      	ands	r6, r3
     c9c:	3346      	adds	r3, #70	; 0x46
     c9e:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     ca0:	0011      	movs	r1, r2
     ca2:	3150      	adds	r1, #80	; 0x50
     ca4:	482c      	ldr	r0, [pc, #176]	; (d58 <wait_for_imu_data+0x258>)
     ca6:	0013      	movs	r3, r2
     ca8:	334c      	adds	r3, #76	; 0x4c
     caa:	9304      	str	r3, [sp, #16]
     cac:	2301      	movs	r3, #1
     cae:	9303      	str	r3, [sp, #12]
     cb0:	2414      	movs	r4, #20
     cb2:	9402      	str	r4, [sp, #8]
     cb4:	3c12      	subs	r4, #18
     cb6:	9401      	str	r4, [sp, #4]
     cb8:	9300      	str	r3, [sp, #0]
     cba:	3301      	adds	r3, #1
     cbc:	4c27      	ldr	r4, [pc, #156]	; (d5c <wait_for_imu_data+0x25c>)
     cbe:	47a0      	blx	r4
     cc0:	e78f      	b.n	be2 <wait_for_imu_data+0xe2>
        ++gyro_fs_sel;
     cc2:	3301      	adds	r3, #1
     cc4:	4a1d      	ldr	r2, [pc, #116]	; (d3c <wait_for_imu_data+0x23c>)
     cc6:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     cc8:	b2db      	uxtb	r3, r3
     cca:	005b      	lsls	r3, r3, #1
     ccc:	2106      	movs	r1, #6
     cce:	400b      	ands	r3, r1
     cd0:	3172      	adds	r1, #114	; 0x72
     cd2:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     cd4:	0011      	movs	r1, r2
     cd6:	317c      	adds	r1, #124	; 0x7c
     cd8:	481f      	ldr	r0, [pc, #124]	; (d58 <wait_for_imu_data+0x258>)
     cda:	0013      	movs	r3, r2
     cdc:	3378      	adds	r3, #120	; 0x78
     cde:	9304      	str	r3, [sp, #16]
     ce0:	2301      	movs	r3, #1
     ce2:	9303      	str	r3, [sp, #12]
     ce4:	9302      	str	r3, [sp, #8]
     ce6:	2402      	movs	r4, #2
     ce8:	9401      	str	r4, [sp, #4]
     cea:	9300      	str	r3, [sp, #0]
     cec:	3301      	adds	r3, #1
     cee:	4c1b      	ldr	r4, [pc, #108]	; (d5c <wait_for_imu_data+0x25c>)
     cf0:	47a0      	blx	r4
        led_on();
     cf2:	2180      	movs	r1, #128	; 0x80
     cf4:	03c9      	lsls	r1, r1, #15
     cf6:	2001      	movs	r0, #1
     cf8:	4b19      	ldr	r3, [pc, #100]	; (d60 <wait_for_imu_data+0x260>)
     cfa:	4798      	blx	r3
     cfc:	e7a9      	b.n	c52 <wait_for_imu_data+0x152>
        --gyro_fs_sel;
     cfe:	3b01      	subs	r3, #1
     d00:	4a0e      	ldr	r2, [pc, #56]	; (d3c <wait_for_imu_data+0x23c>)
     d02:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     d04:	b2db      	uxtb	r3, r3
     d06:	005b      	lsls	r3, r3, #1
     d08:	2106      	movs	r1, #6
     d0a:	400b      	ands	r3, r1
     d0c:	3172      	adds	r1, #114	; 0x72
     d0e:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     d10:	0011      	movs	r1, r2
     d12:	317c      	adds	r1, #124	; 0x7c
     d14:	4810      	ldr	r0, [pc, #64]	; (d58 <wait_for_imu_data+0x258>)
     d16:	0013      	movs	r3, r2
     d18:	3378      	adds	r3, #120	; 0x78
     d1a:	9304      	str	r3, [sp, #16]
     d1c:	2301      	movs	r3, #1
     d1e:	9303      	str	r3, [sp, #12]
     d20:	9302      	str	r3, [sp, #8]
     d22:	2402      	movs	r4, #2
     d24:	9401      	str	r4, [sp, #4]
     d26:	9300      	str	r3, [sp, #0]
     d28:	3301      	adds	r3, #1
     d2a:	4c0c      	ldr	r4, [pc, #48]	; (d5c <wait_for_imu_data+0x25c>)
     d2c:	47a0      	blx	r4
        led_off();
     d2e:	2180      	movs	r1, #128	; 0x80
     d30:	03c9      	lsls	r1, r1, #15
     d32:	2001      	movs	r0, #1
     d34:	4b0b      	ldr	r3, [pc, #44]	; (d64 <wait_for_imu_data+0x264>)
     d36:	4798      	blx	r3
     d38:	e78b      	b.n	c52 <wait_for_imu_data+0x152>
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	200001e4 	.word	0x200001e4
     d40:	00003f2d 	.word	0x00003f2d
     d44:	012b4674 	.word	0x012b4674
     d48:	20000188 	.word	0x20000188
     d4c:	0042943b 	.word	0x0042943b
     d50:	00007333 	.word	0x00007333
     d54:	00003333 	.word	0x00003333
     d58:	200002dc 	.word	0x200002dc
     d5c:	00003ef1 	.word	0x00003ef1
     d60:	00001e9d 	.word	0x00001e9d
     d64:	00001ead 	.word	0x00001ead

00000d68 <serial_init>:
    .rxtrig = UART4_DMA_RX_TRIGGER,
    .priority = UART4_DMA_PRIORITY
};


bool serial_init() {
     d68:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

	// init uart
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     d6a:	22c0      	movs	r2, #192	; 0xc0
     d6c:	0092      	lsls	r2, r2, #2
     d6e:	2102      	movs	r1, #2
     d70:	2000      	movs	r0, #0
     d72:	4c19      	ldr	r4, [pc, #100]	; (dd8 <serial_init+0x70>)
     d74:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     d76:	22c0      	movs	r2, #192	; 0xc0
     d78:	0312      	lsls	r2, r2, #12
     d7a:	2102      	movs	r1, #2
     d7c:	2000      	movs	r0, #0
     d7e:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     d80:	22c0      	movs	r2, #192	; 0xc0
     d82:	0212      	lsls	r2, r2, #8
     d84:	2102      	movs	r1, #2
     d86:	2001      	movs	r0, #1
     d88:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     d8a:	22c0      	movs	r2, #192	; 0xc0
     d8c:	0292      	lsls	r2, r2, #10
     d8e:	2102      	movs	r1, #2
     d90:	2001      	movs	r0, #1
     d92:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     d94:	2596      	movs	r5, #150	; 0x96
     d96:	01ad      	lsls	r5, r5, #6
     d98:	002b      	movs	r3, r5
     d9a:	2200      	movs	r2, #0
     d9c:	2101      	movs	r1, #1
     d9e:	480f      	ldr	r0, [pc, #60]	; (ddc <serial_init+0x74>)
     da0:	4c0f      	ldr	r4, [pc, #60]	; (de0 <serial_init+0x78>)
     da2:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     da4:	002b      	movs	r3, r5
     da6:	2201      	movs	r2, #1
     da8:	2103      	movs	r1, #3
     daa:	480e      	ldr	r0, [pc, #56]	; (de4 <serial_init+0x7c>)
     dac:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     dae:	002b      	movs	r3, r5
     db0:	2201      	movs	r2, #1
     db2:	2103      	movs	r1, #3
     db4:	480c      	ldr	r0, [pc, #48]	; (de8 <serial_init+0x80>)
     db6:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     db8:	2396      	movs	r3, #150	; 0x96
     dba:	015b      	lsls	r3, r3, #5
     dbc:	2200      	movs	r2, #0
     dbe:	2101      	movs	r1, #1
     dc0:	480a      	ldr	r0, [pc, #40]	; (dec <serial_init+0x84>)
     dc2:	47a0      	blx	r4
    
	// init usb
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     dc4:	2180      	movs	r1, #128	; 0x80
     dc6:	20e0      	movs	r0, #224	; 0xe0
     dc8:	0049      	lsls	r1, r1, #1
     dca:	00c0      	lsls	r0, r0, #3
     dcc:	4b08      	ldr	r3, [pc, #32]	; (df0 <serial_init+0x88>)
     dce:	4798      	blx	r3
	usb_attach();
     dd0:	4b08      	ldr	r3, [pc, #32]	; (df4 <serial_init+0x8c>)
     dd2:	4798      	blx	r3
}
     dd4:	bd70      	pop	{r4, r5, r6, pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	00001ebd 	.word	0x00001ebd
     ddc:	42000800 	.word	0x42000800
     de0:	000025c5 	.word	0x000025c5
     de4:	42000c00 	.word	0x42000c00
     de8:	42001800 	.word	0x42001800
     dec:	42001c00 	.word	0x42001c00
     df0:	00004295 	.word	0x00004295
     df4:	00002c29 	.word	0x00002c29

00000df8 <serial_write_start>:
    // will kill usb process which would remain running
    rtos_usb_quit();
}


bool serial_write_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     df8:	b570      	push	{r4, r5, r6, lr}
     dfa:	000e      	movs	r6, r1
     dfc:	0013      	movs	r3, r2
    switch (port) {
     dfe:	2804      	cmp	r0, #4
     e00:	d825      	bhi.n	e4e <serial_write_start+0x56>
     e02:	0080      	lsls	r0, r0, #2
     e04:	4d13      	ldr	r5, [pc, #76]	; (e54 <serial_write_start+0x5c>)
     e06:	582c      	ldr	r4, [r5, r0]
     e08:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_send_buffer(buffer, count);
     e0a:	0011      	movs	r1, r2
     e0c:	0030      	movs	r0, r6
     e0e:	4b12      	ldr	r3, [pc, #72]	; (e58 <serial_write_start+0x60>)
     e10:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     e12:	2001      	movs	r0, #1
}
     e14:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_send_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     e16:	4911      	ldr	r1, [pc, #68]	; (e5c <serial_write_start+0x64>)
     e18:	0032      	movs	r2, r6
     e1a:	4811      	ldr	r0, [pc, #68]	; (e60 <serial_write_start+0x68>)
     e1c:	4c11      	ldr	r4, [pc, #68]	; (e64 <serial_write_start+0x6c>)
     e1e:	47a0      	blx	r4
    return true;
     e20:	2001      	movs	r0, #1
        break;
     e22:	e7f7      	b.n	e14 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     e24:	4910      	ldr	r1, [pc, #64]	; (e68 <serial_write_start+0x70>)
     e26:	0032      	movs	r2, r6
     e28:	4810      	ldr	r0, [pc, #64]	; (e6c <serial_write_start+0x74>)
     e2a:	4c0e      	ldr	r4, [pc, #56]	; (e64 <serial_write_start+0x6c>)
     e2c:	47a0      	blx	r4
    return true;
     e2e:	2001      	movs	r0, #1
        break;
     e30:	e7f0      	b.n	e14 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     e32:	490f      	ldr	r1, [pc, #60]	; (e70 <serial_write_start+0x78>)
     e34:	0032      	movs	r2, r6
     e36:	480f      	ldr	r0, [pc, #60]	; (e74 <serial_write_start+0x7c>)
     e38:	4c0a      	ldr	r4, [pc, #40]	; (e64 <serial_write_start+0x6c>)
     e3a:	47a0      	blx	r4
    return true;
     e3c:	2001      	movs	r0, #1
        break;
     e3e:	e7e9      	b.n	e14 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     e40:	490d      	ldr	r1, [pc, #52]	; (e78 <serial_write_start+0x80>)
     e42:	0032      	movs	r2, r6
     e44:	480d      	ldr	r0, [pc, #52]	; (e7c <serial_write_start+0x84>)
     e46:	4c07      	ldr	r4, [pc, #28]	; (e64 <serial_write_start+0x6c>)
     e48:	47a0      	blx	r4
    return true;
     e4a:	2001      	movs	r0, #1
        break;
     e4c:	e7e2      	b.n	e14 <serial_write_start+0x1c>
    switch (port) {
     e4e:	2000      	movs	r0, #0
     e50:	e7e0      	b.n	e14 <serial_write_start+0x1c>
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	00005a10 	.word	0x00005a10
     e58:	0000433d 	.word	0x0000433d
     e5c:	00005a88 	.word	0x00005a88
     e60:	42000800 	.word	0x42000800
     e64:	000040c5 	.word	0x000040c5
     e68:	00005a90 	.word	0x00005a90
     e6c:	42000c00 	.word	0x42000c00
     e70:	00005a98 	.word	0x00005a98
     e74:	42001800 	.word	0x42001800
     e78:	00005aa0 	.word	0x00005aa0
     e7c:	42001c00 	.word	0x42001c00

00000e80 <serial_write_wait_until_complete>:

bool serial_write_wait_until_complete(Serial_Port_IDs port) {
     e80:	b510      	push	{r4, lr}
    switch (port) {
     e82:	2804      	cmp	r0, #4
     e84:	d81b      	bhi.n	ebe <serial_write_wait_until_complete+0x3e>
     e86:	0080      	lsls	r0, r0, #2
     e88:	4b0e      	ldr	r3, [pc, #56]	; (ec4 <serial_write_wait_until_complete+0x44>)
     e8a:	581b      	ldr	r3, [r3, r0]
     e8c:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_send_complete();
     e8e:	4b0e      	ldr	r3, [pc, #56]	; (ec8 <serial_write_wait_until_complete+0x48>)
     e90:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     e92:	2001      	movs	r0, #1
}
     e94:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_send_complete(&uart1_descriptor);
     e96:	480d      	ldr	r0, [pc, #52]	; (ecc <serial_write_wait_until_complete+0x4c>)
     e98:	4b0d      	ldr	r3, [pc, #52]	; (ed0 <serial_write_wait_until_complete+0x50>)
     e9a:	4798      	blx	r3
    return true;
     e9c:	2001      	movs	r0, #1
        break;
     e9e:	e7f9      	b.n	e94 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart2_descriptor);
     ea0:	480c      	ldr	r0, [pc, #48]	; (ed4 <serial_write_wait_until_complete+0x54>)
     ea2:	4b0b      	ldr	r3, [pc, #44]	; (ed0 <serial_write_wait_until_complete+0x50>)
     ea4:	4798      	blx	r3
    return true;
     ea6:	2001      	movs	r0, #1
        break;
     ea8:	e7f4      	b.n	e94 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart3_descriptor);
     eaa:	480b      	ldr	r0, [pc, #44]	; (ed8 <serial_write_wait_until_complete+0x58>)
     eac:	4b08      	ldr	r3, [pc, #32]	; (ed0 <serial_write_wait_until_complete+0x50>)
     eae:	4798      	blx	r3
    return true;
     eb0:	2001      	movs	r0, #1
        break;
     eb2:	e7ef      	b.n	e94 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart4_descriptor);
     eb4:	4809      	ldr	r0, [pc, #36]	; (edc <serial_write_wait_until_complete+0x5c>)
     eb6:	4b06      	ldr	r3, [pc, #24]	; (ed0 <serial_write_wait_until_complete+0x50>)
     eb8:	4798      	blx	r3
    return true;
     eba:	2001      	movs	r0, #1
        break;
     ebc:	e7ea      	b.n	e94 <serial_write_wait_until_complete+0x14>
    switch (port) {
     ebe:	2000      	movs	r0, #0
     ec0:	e7e8      	b.n	e94 <serial_write_wait_until_complete+0x14>
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	00005a24 	.word	0x00005a24
     ec8:	00004389 	.word	0x00004389
     ecc:	00005a88 	.word	0x00005a88
     ed0:	00004135 	.word	0x00004135
     ed4:	00005a90 	.word	0x00005a90
     ed8:	00005a98 	.word	0x00005a98
     edc:	00005aa0 	.word	0x00005aa0

00000ee0 <serial_read_start>:


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     ee0:	b570      	push	{r4, r5, r6, lr}
     ee2:	000e      	movs	r6, r1
     ee4:	0013      	movs	r3, r2
    switch (port) {
     ee6:	2804      	cmp	r0, #4
     ee8:	d825      	bhi.n	f36 <serial_read_start+0x56>
     eea:	0080      	lsls	r0, r0, #2
     eec:	4d13      	ldr	r5, [pc, #76]	; (f3c <serial_read_start+0x5c>)
     eee:	582c      	ldr	r4, [r5, r0]
     ef0:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_read_buffer(buffer, count);
     ef2:	0011      	movs	r1, r2
     ef4:	0030      	movs	r0, r6
     ef6:	4b12      	ldr	r3, [pc, #72]	; (f40 <serial_read_start+0x60>)
     ef8:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     efa:	2001      	movs	r0, #1
}
     efc:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     efe:	4911      	ldr	r1, [pc, #68]	; (f44 <serial_read_start+0x64>)
     f00:	0032      	movs	r2, r6
     f02:	4811      	ldr	r0, [pc, #68]	; (f48 <serial_read_start+0x68>)
     f04:	4c11      	ldr	r4, [pc, #68]	; (f4c <serial_read_start+0x6c>)
     f06:	47a0      	blx	r4
    return true;
     f08:	2001      	movs	r0, #1
        break;
     f0a:	e7f7      	b.n	efc <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     f0c:	4910      	ldr	r1, [pc, #64]	; (f50 <serial_read_start+0x70>)
     f0e:	0032      	movs	r2, r6
     f10:	4810      	ldr	r0, [pc, #64]	; (f54 <serial_read_start+0x74>)
     f12:	4c0e      	ldr	r4, [pc, #56]	; (f4c <serial_read_start+0x6c>)
     f14:	47a0      	blx	r4
    return true;
     f16:	2001      	movs	r0, #1
        break;
     f18:	e7f0      	b.n	efc <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     f1a:	490f      	ldr	r1, [pc, #60]	; (f58 <serial_read_start+0x78>)
     f1c:	0032      	movs	r2, r6
     f1e:	480f      	ldr	r0, [pc, #60]	; (f5c <serial_read_start+0x7c>)
     f20:	4c0a      	ldr	r4, [pc, #40]	; (f4c <serial_read_start+0x6c>)
     f22:	47a0      	blx	r4
    return true;
     f24:	2001      	movs	r0, #1
        break;
     f26:	e7e9      	b.n	efc <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     f28:	490d      	ldr	r1, [pc, #52]	; (f60 <serial_read_start+0x80>)
     f2a:	0032      	movs	r2, r6
     f2c:	480d      	ldr	r0, [pc, #52]	; (f64 <serial_read_start+0x84>)
     f2e:	4c07      	ldr	r4, [pc, #28]	; (f4c <serial_read_start+0x6c>)
     f30:	47a0      	blx	r4
    return true;
     f32:	2001      	movs	r0, #1
        break;
     f34:	e7e2      	b.n	efc <serial_read_start+0x1c>
    switch (port) {
     f36:	2000      	movs	r0, #0
     f38:	e7e0      	b.n	efc <serial_read_start+0x1c>
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	00005a38 	.word	0x00005a38
     f40:	000043a5 	.word	0x000043a5
     f44:	00005a88 	.word	0x00005a88
     f48:	42000800 	.word	0x42000800
     f4c:	00004145 	.word	0x00004145
     f50:	00005a90 	.word	0x00005a90
     f54:	42000c00 	.word	0x42000c00
     f58:	00005a98 	.word	0x00005a98
     f5c:	42001800 	.word	0x42001800
     f60:	00005aa0 	.word	0x00005aa0
     f64:	42001c00 	.word	0x42001c00

00000f68 <serial_read_wait_until_complete>:

bool serial_read_wait_until_complete(Serial_Port_IDs port) {
     f68:	b510      	push	{r4, lr}
    switch (port) {
     f6a:	2804      	cmp	r0, #4
     f6c:	d81b      	bhi.n	fa6 <serial_read_wait_until_complete+0x3e>
     f6e:	0080      	lsls	r0, r0, #2
     f70:	4b0e      	ldr	r3, [pc, #56]	; (fac <serial_read_wait_until_complete+0x44>)
     f72:	581b      	ldr	r3, [r3, r0]
     f74:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete();
     f76:	4b0e      	ldr	r3, [pc, #56]	; (fb0 <serial_read_wait_until_complete+0x48>)
     f78:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     f7a:	2001      	movs	r0, #1
}
     f7c:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete(&uart1_descriptor);
     f7e:	480d      	ldr	r0, [pc, #52]	; (fb4 <serial_read_wait_until_complete+0x4c>)
     f80:	4b0d      	ldr	r3, [pc, #52]	; (fb8 <serial_read_wait_until_complete+0x50>)
     f82:	4798      	blx	r3
    return true;
     f84:	2001      	movs	r0, #1
        break;
     f86:	e7f9      	b.n	f7c <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart2_descriptor);
     f88:	480c      	ldr	r0, [pc, #48]	; (fbc <serial_read_wait_until_complete+0x54>)
     f8a:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <serial_read_wait_until_complete+0x50>)
     f8c:	4798      	blx	r3
    return true;
     f8e:	2001      	movs	r0, #1
        break;
     f90:	e7f4      	b.n	f7c <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart3_descriptor);
     f92:	480b      	ldr	r0, [pc, #44]	; (fc0 <serial_read_wait_until_complete+0x58>)
     f94:	4b08      	ldr	r3, [pc, #32]	; (fb8 <serial_read_wait_until_complete+0x50>)
     f96:	4798      	blx	r3
    return true;
     f98:	2001      	movs	r0, #1
        break;
     f9a:	e7ef      	b.n	f7c <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart4_descriptor);
     f9c:	4809      	ldr	r0, [pc, #36]	; (fc4 <serial_read_wait_until_complete+0x5c>)
     f9e:	4b06      	ldr	r3, [pc, #24]	; (fb8 <serial_read_wait_until_complete+0x50>)
     fa0:	4798      	blx	r3
    return true;
     fa2:	2001      	movs	r0, #1
        break;
     fa4:	e7ea      	b.n	f7c <serial_read_wait_until_complete+0x14>
    switch (port) {
     fa6:	2000      	movs	r0, #0
     fa8:	e7e8      	b.n	f7c <serial_read_wait_until_complete+0x14>
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	00005a4c 	.word	0x00005a4c
     fb0:	000043dd 	.word	0x000043dd
     fb4:	00005a88 	.word	0x00005a88
     fb8:	000041b5 	.word	0x000041b5
     fbc:	00005a90 	.word	0x00005a90
     fc0:	00005a98 	.word	0x00005a98
     fc4:	00005aa0 	.word	0x00005aa0

00000fc8 <serial_read_wait_until_complete_or_timeout>:

bool serial_read_wait_until_complete_or_timeout(Serial_Port_IDs port, uint32_t timeout_ms) {
     fc8:	b510      	push	{r4, lr}
    switch (port) {
     fca:	2804      	cmp	r0, #4
     fcc:	d827      	bhi.n	101e <serial_read_wait_until_complete_or_timeout+0x56>
     fce:	0080      	lsls	r0, r0, #2
     fd0:	4b14      	ldr	r3, [pc, #80]	; (1024 <serial_read_wait_until_complete_or_timeout+0x5c>)
     fd2:	581b      	ldr	r3, [r3, r0]
     fd4:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete(); // USB doesn't time out
     fd6:	4b14      	ldr	r3, [pc, #80]	; (1028 <serial_read_wait_until_complete_or_timeout+0x60>)
     fd8:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     fda:	2001      	movs	r0, #1
}
     fdc:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete_or_timeout(&uart1_descriptor, timeout_ms * time_ticks_ms_mult);
     fde:	4b13      	ldr	r3, [pc, #76]	; (102c <serial_read_wait_until_complete_or_timeout+0x64>)
     fe0:	681b      	ldr	r3, [r3, #0]
     fe2:	4359      	muls	r1, r3
     fe4:	4812      	ldr	r0, [pc, #72]	; (1030 <serial_read_wait_until_complete_or_timeout+0x68>)
     fe6:	4b13      	ldr	r3, [pc, #76]	; (1034 <serial_read_wait_until_complete_or_timeout+0x6c>)
     fe8:	4798      	blx	r3
    return true;
     fea:	2001      	movs	r0, #1
        break;
     fec:	e7f6      	b.n	fdc <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart2_descriptor, timeout_ms * time_ticks_ms_mult);
     fee:	4b0f      	ldr	r3, [pc, #60]	; (102c <serial_read_wait_until_complete_or_timeout+0x64>)
     ff0:	681b      	ldr	r3, [r3, #0]
     ff2:	4359      	muls	r1, r3
     ff4:	4810      	ldr	r0, [pc, #64]	; (1038 <serial_read_wait_until_complete_or_timeout+0x70>)
     ff6:	4b0f      	ldr	r3, [pc, #60]	; (1034 <serial_read_wait_until_complete_or_timeout+0x6c>)
     ff8:	4798      	blx	r3
    return true;
     ffa:	2001      	movs	r0, #1
        break;
     ffc:	e7ee      	b.n	fdc <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart3_descriptor, timeout_ms * time_ticks_ms_mult);
     ffe:	4b0b      	ldr	r3, [pc, #44]	; (102c <serial_read_wait_until_complete_or_timeout+0x64>)
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	4359      	muls	r1, r3
    1004:	480d      	ldr	r0, [pc, #52]	; (103c <serial_read_wait_until_complete_or_timeout+0x74>)
    1006:	4b0b      	ldr	r3, [pc, #44]	; (1034 <serial_read_wait_until_complete_or_timeout+0x6c>)
    1008:	4798      	blx	r3
    return true;
    100a:	2001      	movs	r0, #1
        break;
    100c:	e7e6      	b.n	fdc <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart4_descriptor, timeout_ms * time_ticks_ms_mult);
    100e:	4b07      	ldr	r3, [pc, #28]	; (102c <serial_read_wait_until_complete_or_timeout+0x64>)
    1010:	681b      	ldr	r3, [r3, #0]
    1012:	4359      	muls	r1, r3
    1014:	480a      	ldr	r0, [pc, #40]	; (1040 <serial_read_wait_until_complete_or_timeout+0x78>)
    1016:	4b07      	ldr	r3, [pc, #28]	; (1034 <serial_read_wait_until_complete_or_timeout+0x6c>)
    1018:	4798      	blx	r3
    return true;
    101a:	2001      	movs	r0, #1
        break;
    101c:	e7de      	b.n	fdc <serial_read_wait_until_complete_or_timeout+0x14>
    switch (port) {
    101e:	2000      	movs	r0, #0
    1020:	e7dc      	b.n	fdc <serial_read_wait_until_complete_or_timeout+0x14>
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	00005a60 	.word	0x00005a60
    1028:	000043dd 	.word	0x000043dd
    102c:	00005b9c 	.word	0x00005b9c
    1030:	00005a88 	.word	0x00005a88
    1034:	000041c5 	.word	0x000041c5
    1038:	00005a90 	.word	0x00005a90
    103c:	00005a98 	.word	0x00005a98
    1040:	00005aa0 	.word	0x00005aa0

00001044 <serial_flush>:

bool serial_flush(Serial_Port_IDs port) {
    1044:	b510      	push	{r4, lr}
    switch (port) {
    1046:	2804      	cmp	r0, #4
    1048:	d803      	bhi.n	1052 <serial_flush+0xe>
    104a:	0080      	lsls	r0, r0, #2
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <serial_flush+0x40>)
    104e:	581b      	ldr	r3, [r3, r0]
    1050:	469f      	mov	pc, r3
    1052:	2000      	movs	r0, #0
    1054:	e014      	b.n	1080 <serial_flush+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_flush(UART1_SERCOM);
    1056:	480c      	ldr	r0, [pc, #48]	; (1088 <serial_flush+0x44>)
    1058:	4b0c      	ldr	r3, [pc, #48]	; (108c <serial_flush+0x48>)
    105a:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    105c:	2001      	movs	r0, #1
        break;
    105e:	e00f      	b.n	1080 <serial_flush+0x3c>
        uart_flush(UART2_SERCOM);
    1060:	480b      	ldr	r0, [pc, #44]	; (1090 <serial_flush+0x4c>)
    1062:	4b0a      	ldr	r3, [pc, #40]	; (108c <serial_flush+0x48>)
    1064:	4798      	blx	r3
    return true;
    1066:	2001      	movs	r0, #1
        break;
    1068:	e00a      	b.n	1080 <serial_flush+0x3c>
        uart_flush(UART3_SERCOM);
    106a:	480a      	ldr	r0, [pc, #40]	; (1094 <serial_flush+0x50>)
    106c:	4b07      	ldr	r3, [pc, #28]	; (108c <serial_flush+0x48>)
    106e:	4798      	blx	r3
    return true;
    1070:	2001      	movs	r0, #1
        break;
    1072:	e005      	b.n	1080 <serial_flush+0x3c>
        uart_flush(UART4_SERCOM);
    1074:	4808      	ldr	r0, [pc, #32]	; (1098 <serial_flush+0x54>)
    1076:	4b05      	ldr	r3, [pc, #20]	; (108c <serial_flush+0x48>)
    1078:	4798      	blx	r3
    return true;
    107a:	2001      	movs	r0, #1
        break;
    107c:	e000      	b.n	1080 <serial_flush+0x3c>
    return true;
    107e:	2001      	movs	r0, #1
    1080:	bd10      	pop	{r4, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	00005a74 	.word	0x00005a74
    1088:	42000800 	.word	0x42000800
    108c:	00002621 	.word	0x00002621
    1090:	42000c00 	.word	0x42000c00
    1094:	42001800 	.word	0x42001800
    1098:	42001c00 	.word	0x42001c00

0000109c <buzzer>:

void shutdown() {
	serial_quit();
}

void buzzer() {
    109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    109e:	46ce      	mov	lr, r9
    10a0:	4647      	mov	r7, r8
    10a2:	b580      	push	{r7, lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
    10a4:	2106      	movs	r1, #6
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <buzzer+0xb4>)
    10a8:	4b2a      	ldr	r3, [pc, #168]	; (1154 <buzzer+0xb8>)
    10aa:	4798      	blx	r3
    10ac:	2800      	cmp	r0, #0
    10ae:	d019      	beq.n	10e4 <buzzer+0x48>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
    10b0:	4929      	ldr	r1, [pc, #164]	; (1158 <buzzer+0xbc>)
    10b2:	4827      	ldr	r0, [pc, #156]	; (1150 <buzzer+0xb4>)
    10b4:	4b29      	ldr	r3, [pc, #164]	; (115c <buzzer+0xc0>)
    10b6:	4798      	blx	r3
    10b8:	2800      	cmp	r0, #0
    10ba:	d016      	beq.n	10ea <buzzer+0x4e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
    10bc:	2200      	movs	r2, #0
    10be:	2101      	movs	r1, #1
    10c0:	4823      	ldr	r0, [pc, #140]	; (1150 <buzzer+0xb4>)
    10c2:	4b27      	ldr	r3, [pc, #156]	; (1160 <buzzer+0xc4>)
    10c4:	4798      	blx	r3
    10c6:	2800      	cmp	r0, #0
    10c8:	d012      	beq.n	10f0 <buzzer+0x54>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
    10ca:	4821      	ldr	r0, [pc, #132]	; (1150 <buzzer+0xb4>)
    10cc:	4b25      	ldr	r3, [pc, #148]	; (1164 <buzzer+0xc8>)
    10ce:	4798      	blx	r3
    10d0:	2800      	cmp	r0, #0
    10d2:	d010      	beq.n	10f6 <buzzer+0x5a>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
    10d4:	2280      	movs	r2, #128	; 0x80
    10d6:	0412      	lsls	r2, r2, #16
    10d8:	2104      	movs	r1, #4
    10da:	2001      	movs	r0, #1
    10dc:	4b22      	ldr	r3, [pc, #136]	; (1168 <buzzer+0xcc>)
    10de:	4798      	blx	r3
	
	for (int i = 0; i < 2; ++i) {
    10e0:	2500      	movs	r5, #0
    10e2:	e02e      	b.n	1142 <buzzer+0xa6>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
    10e4:	4b21      	ldr	r3, [pc, #132]	; (116c <buzzer+0xd0>)
    10e6:	4798      	blx	r3
    10e8:	e7e2      	b.n	10b0 <buzzer+0x14>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
    10ea:	4b20      	ldr	r3, [pc, #128]	; (116c <buzzer+0xd0>)
    10ec:	4798      	blx	r3
    10ee:	e7e5      	b.n	10bc <buzzer+0x20>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
    10f0:	4b1e      	ldr	r3, [pc, #120]	; (116c <buzzer+0xd0>)
    10f2:	4798      	blx	r3
    10f4:	e7e9      	b.n	10ca <buzzer+0x2e>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
    10f6:	4b1d      	ldr	r3, [pc, #116]	; (116c <buzzer+0xd0>)
    10f8:	4798      	blx	r3
    10fa:	e7eb      	b.n	10d4 <buzzer+0x38>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
    10fc:	4b14      	ldr	r3, [pc, #80]	; (1150 <buzzer+0xb4>)
    10fe:	4698      	mov	r8, r3
    1100:	22fc      	movs	r2, #252	; 0xfc
    1102:	0592      	lsls	r2, r2, #22
    1104:	2101      	movs	r1, #1
    1106:	0018      	movs	r0, r3
    1108:	4f15      	ldr	r7, [pc, #84]	; (1160 <buzzer+0xc4>)
    110a:	47b8      	blx	r7
		led_on();
    110c:	2680      	movs	r6, #128	; 0x80
    110e:	03f6      	lsls	r6, r6, #15
    1110:	0031      	movs	r1, r6
    1112:	2001      	movs	r0, #1
    1114:	4b16      	ldr	r3, [pc, #88]	; (1170 <buzzer+0xd4>)
    1116:	4798      	blx	r3
		rtos_delay_ms(75);
    1118:	4b16      	ldr	r3, [pc, #88]	; (1174 <buzzer+0xd8>)
    111a:	681a      	ldr	r2, [r3, #0]
    111c:	0093      	lsls	r3, r2, #2
    111e:	189b      	adds	r3, r3, r2
    1120:	011c      	lsls	r4, r3, #4
    1122:	1ae4      	subs	r4, r4, r3
    1124:	0020      	movs	r0, r4
    1126:	4b14      	ldr	r3, [pc, #80]	; (1178 <buzzer+0xdc>)
    1128:	4699      	mov	r9, r3
    112a:	4798      	blx	r3
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
    112c:	2200      	movs	r2, #0
    112e:	2101      	movs	r1, #1
    1130:	4640      	mov	r0, r8
    1132:	47b8      	blx	r7
		led_off();
    1134:	0031      	movs	r1, r6
    1136:	2001      	movs	r0, #1
    1138:	4b10      	ldr	r3, [pc, #64]	; (117c <buzzer+0xe0>)
    113a:	4798      	blx	r3
		rtos_delay_ms(75);
    113c:	0020      	movs	r0, r4
    113e:	47c8      	blx	r9
	for (int i = 0; i < 2; ++i) {
    1140:	3501      	adds	r5, #1
    1142:	2d01      	cmp	r5, #1
    1144:	ddda      	ble.n	10fc <buzzer+0x60>
	// 	led_on();
	// 	rtos_delay_ms(200);
	// 	led_off();
	// 	rtos_delay_ms(200);
	// }
    1146:	bcc0      	pop	{r6, r7}
    1148:	46b9      	mov	r9, r7
    114a:	46b0      	mov	r8, r6
    114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	42003c00 	.word	0x42003c00
    1154:	00001f09 	.word	0x00001f09
    1158:	45309000 	.word	0x45309000
    115c:	0000206d 	.word	0x0000206d
    1160:	000020f9 	.word	0x000020f9
    1164:	00001fdd 	.word	0x00001fdd
    1168:	00001ebd 	.word	0x00001ebd
    116c:	000030e5 	.word	0x000030e5
    1170:	00001e9d 	.word	0x00001e9d
    1174:	00005b9c 	.word	0x00005b9c
    1178:	00003645 	.word	0x00003645
    117c:	00001ead 	.word	0x00001ead

00001180 <selftest>:
bool selftest() {
    1180:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
    1182:	4b0a      	ldr	r3, [pc, #40]	; (11ac <selftest+0x2c>)
    1184:	4798      	blx	r3
    1186:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
    1188:	4809      	ldr	r0, [pc, #36]	; (11b0 <selftest+0x30>)
    118a:	4b0a      	ldr	r3, [pc, #40]	; (11b4 <selftest+0x34>)
    118c:	4798      	blx	r3
    118e:	1e05      	subs	r5, r0, #0
    1190:	d000      	beq.n	1194 <selftest+0x14>
    1192:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
    1194:	4b08      	ldr	r3, [pc, #32]	; (11b8 <selftest+0x38>)
    1196:	4798      	blx	r3
    1198:	1e04      	subs	r4, r0, #0
    119a:	d000      	beq.n	119e <selftest+0x1e>
    119c:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
    119e:	4807      	ldr	r0, [pc, #28]	; (11bc <selftest+0x3c>)
    11a0:	4b07      	ldr	r3, [pc, #28]	; (11c0 <selftest+0x40>)
    11a2:	4798      	blx	r3
    11a4:	2800      	cmp	r0, #0
    11a6:	d000      	beq.n	11aa <selftest+0x2a>
    11a8:	0020      	movs	r0, r4
}
    11aa:	bd70      	pop	{r4, r5, r6, pc}
    11ac:	00000a85 	.word	0x00000a85
    11b0:	20000338 	.word	0x20000338
    11b4:	00001519 	.word	0x00001519
    11b8:	00000995 	.word	0x00000995
    11bc:	20000354 	.word	0x20000354
    11c0:	000019ad 	.word	0x000019ad

000011c4 <init>:
bool init() {
    11c4:	b570      	push	{r4, r5, r6, lr}
    11c6:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
    11c8:	22c0      	movs	r2, #192	; 0xc0
    11ca:	0412      	lsls	r2, r2, #16
    11cc:	2102      	movs	r1, #2
    11ce:	2000      	movs	r0, #0
    11d0:	4c35      	ldr	r4, [pc, #212]	; (12a8 <init+0xe4>)
    11d2:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
    11d4:	2280      	movs	r2, #128	; 0x80
    11d6:	0352      	lsls	r2, r2, #13
    11d8:	2103      	movs	r1, #3
    11da:	2000      	movs	r0, #0
    11dc:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
    11de:	2480      	movs	r4, #128	; 0x80
    11e0:	0564      	lsls	r4, r4, #21
    11e2:	0021      	movs	r1, r4
    11e4:	2000      	movs	r0, #0
    11e6:	4e31      	ldr	r6, [pc, #196]	; (12ac <init+0xe8>)
    11e8:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
    11ea:	2580      	movs	r5, #128	; 0x80
    11ec:	062d      	lsls	r5, r5, #24
    11ee:	0029      	movs	r1, r5
    11f0:	2001      	movs	r0, #1
    11f2:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
    11f4:	0021      	movs	r1, r4
    11f6:	2000      	movs	r0, #0
    11f8:	4c2d      	ldr	r4, [pc, #180]	; (12b0 <init+0xec>)
    11fa:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
    11fc:	0029      	movs	r1, r5
    11fe:	2001      	movs	r0, #1
    1200:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    1202:	4b2c      	ldr	r3, [pc, #176]	; (12b4 <init+0xf0>)
    1204:	9301      	str	r3, [sp, #4]
    1206:	2300      	movs	r3, #0
    1208:	9300      	str	r3, [sp, #0]
    120a:	3302      	adds	r3, #2
    120c:	2200      	movs	r2, #0
    120e:	2100      	movs	r1, #0
    1210:	4829      	ldr	r0, [pc, #164]	; (12b8 <init+0xf4>)
    1212:	4c2a      	ldr	r4, [pc, #168]	; (12bc <init+0xf8>)
    1214:	47a0      	blx	r4
    1216:	2800      	cmp	r0, #0
    1218:	d039      	beq.n	128e <init+0xca>
	dma_init();
    121a:	4b29      	ldr	r3, [pc, #164]	; (12c0 <init+0xfc>)
    121c:	4798      	blx	r3
	if (!serial_init()) SOS();
    121e:	4b29      	ldr	r3, [pc, #164]	; (12c4 <init+0x100>)
    1220:	4798      	blx	r3
    1222:	2800      	cmp	r0, #0
    1224:	d036      	beq.n	1294 <init+0xd0>
	if (!imu_init()) SOS();
    1226:	4b28      	ldr	r3, [pc, #160]	; (12c8 <init+0x104>)
    1228:	4798      	blx	r3
    122a:	2800      	cmp	r0, #0
    122c:	d035      	beq.n	129a <init+0xd6>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
    122e:	ab02      	add	r3, sp, #8
    1230:	2280      	movs	r2, #128	; 0x80
    1232:	0552      	lsls	r2, r2, #21
    1234:	9202      	str	r2, [sp, #8]
    1236:	2100      	movs	r1, #0
    1238:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    123a:	4824      	ldr	r0, [pc, #144]	; (12cc <init+0x108>)
    123c:	9b03      	ldr	r3, [sp, #12]
    123e:	491e      	ldr	r1, [pc, #120]	; (12b8 <init+0xf4>)
    1240:	4c23      	ldr	r4, [pc, #140]	; (12d0 <init+0x10c>)
    1242:	47a0      	blx	r4
    1244:	2800      	cmp	r0, #0
    1246:	d02b      	beq.n	12a0 <init+0xdc>
	init_eeprom();
    1248:	4b22      	ldr	r3, [pc, #136]	; (12d4 <init+0x110>)
    124a:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
    124c:	ab02      	add	r3, sp, #8
    124e:	4c22      	ldr	r4, [pc, #136]	; (12d8 <init+0x114>)
    1250:	6822      	ldr	r2, [r4, #0]
    1252:	9202      	str	r2, [sp, #8]
    1254:	7921      	ldrb	r1, [r4, #4]
    1256:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
    1258:	4d17      	ldr	r5, [pc, #92]	; (12b8 <init+0xf4>)
    125a:	4820      	ldr	r0, [pc, #128]	; (12dc <init+0x118>)
    125c:	2107      	movs	r1, #7
    125e:	9101      	str	r1, [sp, #4]
    1260:	2180      	movs	r1, #128	; 0x80
    1262:	03c9      	lsls	r1, r1, #15
    1264:	9100      	str	r1, [sp, #0]
    1266:	9b03      	ldr	r3, [sp, #12]
    1268:	0029      	movs	r1, r5
    126a:	4e1d      	ldr	r6, [pc, #116]	; (12e0 <init+0x11c>)
    126c:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
    126e:	2280      	movs	r2, #128	; 0x80
    1270:	2190      	movs	r1, #144	; 0x90
    1272:	481c      	ldr	r0, [pc, #112]	; (12e4 <init+0x120>)
    1274:	3408      	adds	r4, #8
    1276:	9400      	str	r4, [sp, #0]
    1278:	002b      	movs	r3, r5
    127a:	0092      	lsls	r2, r2, #2
    127c:	0109      	lsls	r1, r1, #4
    127e:	4c1a      	ldr	r4, [pc, #104]	; (12e8 <init+0x124>)
    1280:	47a0      	blx	r4
	init_globals();
    1282:	4b1a      	ldr	r3, [pc, #104]	; (12ec <init+0x128>)
    1284:	4798      	blx	r3
	return selftest();
    1286:	4b1a      	ldr	r3, [pc, #104]	; (12f0 <init+0x12c>)
    1288:	4798      	blx	r3
}
    128a:	b004      	add	sp, #16
    128c:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    128e:	4b19      	ldr	r3, [pc, #100]	; (12f4 <init+0x130>)
    1290:	4798      	blx	r3
    1292:	e7c2      	b.n	121a <init+0x56>
	if (!serial_init()) SOS();
    1294:	4b17      	ldr	r3, [pc, #92]	; (12f4 <init+0x130>)
    1296:	4798      	blx	r3
    1298:	e7c5      	b.n	1226 <init+0x62>
	if (!imu_init()) SOS();
    129a:	4b16      	ldr	r3, [pc, #88]	; (12f4 <init+0x130>)
    129c:	4798      	blx	r3
    129e:	e7c6      	b.n	122e <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    12a0:	4b14      	ldr	r3, [pc, #80]	; (12f4 <init+0x130>)
    12a2:	4798      	blx	r3
    12a4:	e7d0      	b.n	1248 <init+0x84>
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	00001ebd 	.word	0x00001ebd
    12ac:	00001e9d 	.word	0x00001e9d
    12b0:	00001e8d 	.word	0x00001e8d
    12b4:	005b8d80 	.word	0x005b8d80
    12b8:	42001400 	.word	0x42001400
    12bc:	00002321 	.word	0x00002321
    12c0:	00001609 	.word	0x00001609
    12c4:	00000d69 	.word	0x00000d69
    12c8:	00000a05 	.word	0x00000a05
    12cc:	20000338 	.word	0x20000338
    12d0:	00001595 	.word	0x00001595
    12d4:	00000941 	.word	0x00000941
    12d8:	00005aa8 	.word	0x00005aa8
    12dc:	20000354 	.word	0x20000354
    12e0:	00001925 	.word	0x00001925
    12e4:	200002dc 	.word	0x200002dc
    12e8:	000038e9 	.word	0x000038e9
    12ec:	000008b9 	.word	0x000008b9
    12f0:	00001181 	.word	0x00001181
    12f4:	000030e5 	.word	0x000030e5

000012f8 <main>:
int main(void) {
    12f8:	b530      	push	{r4, r5, lr}
    12fa:	b083      	sub	sp, #12
	if (!init()) SOS();
    12fc:	4b14      	ldr	r3, [pc, #80]	; (1350 <main+0x58>)
    12fe:	4798      	blx	r3
    1300:	2800      	cmp	r0, #0
    1302:	d022      	beq.n	134a <main+0x52>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
    1304:	2380      	movs	r3, #128	; 0x80
    1306:	2280      	movs	r2, #128	; 0x80
    1308:	4912      	ldr	r1, [pc, #72]	; (1354 <main+0x5c>)
    130a:	4c13      	ldr	r4, [pc, #76]	; (1358 <main+0x60>)
    130c:	005b      	lsls	r3, r3, #1
    130e:	0112      	lsls	r2, r2, #4
    1310:	0020      	movs	r0, r4
    1312:	4d12      	ldr	r5, [pc, #72]	; (135c <main+0x64>)
    1314:	47a8      	blx	r5
	dispatch_process(&bz);
    1316:	0020      	movs	r0, r4
    1318:	4b11      	ldr	r3, [pc, #68]	; (1360 <main+0x68>)
    131a:	4798      	blx	r3
	start_navigation();
    131c:	4b11      	ldr	r3, [pc, #68]	; (1364 <main+0x6c>)
    131e:	4798      	blx	r3
	volatile fp32_t testvalue1 = FP32_FROM_MILLI(10);
    1320:	4b11      	ldr	r3, [pc, #68]	; (1368 <main+0x70>)
    1322:	9301      	str	r3, [sp, #4]
	volatile fp32_t testvalue2 = FP32_FROM_INT(14);
    1324:	23e0      	movs	r3, #224	; 0xe0
    1326:	031b      	lsls	r3, r3, #12
    1328:	9300      	str	r3, [sp, #0]
	testvalue1 = fp_multiply(testvalue1, testvalue2);
    132a:	9801      	ldr	r0, [sp, #4]
    132c:	9900      	ldr	r1, [sp, #0]
    132e:	4b0f      	ldr	r3, [pc, #60]	; (136c <main+0x74>)
    1330:	4798      	blx	r3
    1332:	9001      	str	r0, [sp, #4]
	globals.DebugBool1 = false;
    1334:	4b0e      	ldr	r3, [pc, #56]	; (1370 <main+0x78>)
    1336:	2242      	movs	r2, #66	; 0x42
    1338:	2100      	movs	r1, #0
    133a:	5499      	strb	r1, [r3, r2]
	comms_loop();
    133c:	4b0d      	ldr	r3, [pc, #52]	; (1374 <main+0x7c>)
    133e:	4798      	blx	r3
		rtos_delay_ms(1);
    1340:	4b0d      	ldr	r3, [pc, #52]	; (1378 <main+0x80>)
    1342:	6818      	ldr	r0, [r3, #0]
    1344:	4b0d      	ldr	r3, [pc, #52]	; (137c <main+0x84>)
    1346:	4798      	blx	r3
	while (1) {
    1348:	e7fa      	b.n	1340 <main+0x48>
	if (!init()) SOS();
    134a:	4b0d      	ldr	r3, [pc, #52]	; (1380 <main+0x88>)
    134c:	4798      	blx	r3
    134e:	e7d9      	b.n	1304 <main+0xc>
    1350:	000011c5 	.word	0x000011c5
    1354:	0000109d 	.word	0x0000109d
    1358:	20000288 	.word	0x20000288
    135c:	000031a5 	.word	0x000031a5
    1360:	0000328d 	.word	0x0000328d
    1364:	000013cd 	.word	0x000013cd
    1368:	0000028f 	.word	0x0000028f
    136c:	000045a1 	.word	0x000045a1
    1370:	20000188 	.word	0x20000188
    1374:	00000699 	.word	0x00000699
    1378:	00005b9c 	.word	0x00005b9c
    137c:	00003645 	.word	0x00003645
    1380:	000030e5 	.word	0x000030e5

00001384 <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
    1384:	b510      	push	{r4, lr}
    1386:	e00d      	b.n	13a4 <navigation+0x20>
	while (1) {
		if (!globals.RunNavProcess) {
			wait_until_true(&globals.RunNavProcess);
    1388:	4809      	ldr	r0, [pc, #36]	; (13b0 <navigation+0x2c>)
    138a:	3301      	adds	r3, #1
    138c:	32c0      	adds	r2, #192	; 0xc0
    138e:	2100      	movs	r1, #0
    1390:	4c08      	ldr	r4, [pc, #32]	; (13b4 <navigation+0x30>)
    1392:	47a0      	blx	r4
		}
        // led_on();
		request_imu_data();
    1394:	4b08      	ldr	r3, [pc, #32]	; (13b8 <navigation+0x34>)
    1396:	4798      	blx	r3
		wait_for_imu_data();
    1398:	4b08      	ldr	r3, [pc, #32]	; (13bc <navigation+0x38>)
    139a:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(1);
    139c:	4b08      	ldr	r3, [pc, #32]	; (13c0 <navigation+0x3c>)
    139e:	6818      	ldr	r0, [r3, #0]
    13a0:	4b08      	ldr	r3, [pc, #32]	; (13c4 <navigation+0x40>)
    13a2:	4798      	blx	r3
		if (!globals.RunNavProcess) {
    13a4:	4b08      	ldr	r3, [pc, #32]	; (13c8 <navigation+0x44>)
    13a6:	223f      	movs	r2, #63	; 0x3f
    13a8:	5c9b      	ldrb	r3, [r3, r2]
    13aa:	2b00      	cmp	r3, #0
    13ac:	d0ec      	beq.n	1388 <navigation+0x4>
    13ae:	e7f1      	b.n	1394 <navigation+0x10>
    13b0:	200001c7 	.word	0x200001c7
    13b4:	00003511 	.word	0x00003511
    13b8:	00000ac9 	.word	0x00000ac9
    13bc:	00000b01 	.word	0x00000b01
    13c0:	00005b9c 	.word	0x00005b9c
    13c4:	00003645 	.word	0x00003645
    13c8:	20000188 	.word	0x20000188

000013cc <start_navigation>:
	}
}

void start_navigation() {
    13cc:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
    13ce:	23c0      	movs	r3, #192	; 0xc0
    13d0:	22b0      	movs	r2, #176	; 0xb0
    13d2:	4905      	ldr	r1, [pc, #20]	; (13e8 <start_navigation+0x1c>)
    13d4:	4c05      	ldr	r4, [pc, #20]	; (13ec <start_navigation+0x20>)
    13d6:	009b      	lsls	r3, r3, #2
    13d8:	0112      	lsls	r2, r2, #4
    13da:	0020      	movs	r0, r4
    13dc:	4d04      	ldr	r5, [pc, #16]	; (13f0 <start_navigation+0x24>)
    13de:	47a8      	blx	r5
    dispatch_process(&navigation_process);
    13e0:	0020      	movs	r0, r4
    13e2:	4b04      	ldr	r3, [pc, #16]	; (13f4 <start_navigation+0x28>)
    13e4:	4798      	blx	r3
    13e6:	bd70      	pop	{r4, r5, r6, pc}
    13e8:	00001385 	.word	0x00001385
    13ec:	200002b0 	.word	0x200002b0
    13f0:	000031a5 	.word	0x000031a5
    13f4:	0000328d 	.word	0x0000328d

000013f8 <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
    13f8:	b570      	push	{r4, r5, r6, lr}
    13fa:	0004      	movs	r4, r0
    13fc:	000e      	movs	r6, r1
    13fe:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
    1400:	7d03      	ldrb	r3, [r0, #20]
    1402:	7d42      	ldrb	r2, [r0, #21]
    1404:	0212      	lsls	r2, r2, #8
    1406:	431a      	orrs	r2, r3
    1408:	7d83      	ldrb	r3, [r0, #22]
    140a:	041b      	lsls	r3, r3, #16
    140c:	4313      	orrs	r3, r2
    140e:	7dc1      	ldrb	r1, [r0, #23]
    1410:	0609      	lsls	r1, r1, #24
    1412:	4319      	orrs	r1, r3
    1414:	7e00      	ldrb	r0, [r0, #24]
    1416:	4b11      	ldr	r3, [pc, #68]	; (145c <baro_send_command+0x64>)
    1418:	4798      	blx	r3
	spi_command(desc->sercom, command);
    141a:	7c23      	ldrb	r3, [r4, #16]
    141c:	7c62      	ldrb	r2, [r4, #17]
    141e:	0212      	lsls	r2, r2, #8
    1420:	431a      	orrs	r2, r3
    1422:	7ca3      	ldrb	r3, [r4, #18]
    1424:	041b      	lsls	r3, r3, #16
    1426:	4313      	orrs	r3, r2
    1428:	7ce0      	ldrb	r0, [r4, #19]
    142a:	0600      	lsls	r0, r0, #24
    142c:	4318      	orrs	r0, r3
    142e:	0031      	movs	r1, r6
    1430:	4b0b      	ldr	r3, [pc, #44]	; (1460 <baro_send_command+0x68>)
    1432:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1434:	7d23      	ldrb	r3, [r4, #20]
    1436:	7d62      	ldrb	r2, [r4, #21]
    1438:	0212      	lsls	r2, r2, #8
    143a:	431a      	orrs	r2, r3
    143c:	7da3      	ldrb	r3, [r4, #22]
    143e:	041b      	lsls	r3, r3, #16
    1440:	4313      	orrs	r3, r2
    1442:	7de1      	ldrb	r1, [r4, #23]
    1444:	0609      	lsls	r1, r1, #24
    1446:	4319      	orrs	r1, r3
    1448:	7e20      	ldrb	r0, [r4, #24]
    144a:	4b06      	ldr	r3, [pc, #24]	; (1464 <baro_send_command+0x6c>)
    144c:	4798      	blx	r3
	delay_us(delay);
    144e:	0068      	lsls	r0, r5, #1
    1450:	1940      	adds	r0, r0, r5
    1452:	0040      	lsls	r0, r0, #1
    1454:	4b04      	ldr	r3, [pc, #16]	; (1468 <baro_send_command+0x70>)
    1456:	4798      	blx	r3
}
    1458:	bd70      	pop	{r4, r5, r6, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	00001ead 	.word	0x00001ead
    1460:	00002389 	.word	0x00002389
    1464:	00001e9d 	.word	0x00001e9d
    1468:	0000246d 	.word	0x0000246d

0000146c <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
    146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    146e:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    1470:	26a0      	movs	r6, #160	; 0xa0
    1472:	e047      	b.n	1504 <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
    1474:	7d23      	ldrb	r3, [r4, #20]
    1476:	7d62      	ldrb	r2, [r4, #21]
    1478:	0212      	lsls	r2, r2, #8
    147a:	431a      	orrs	r2, r3
    147c:	7da3      	ldrb	r3, [r4, #22]
    147e:	041b      	lsls	r3, r3, #16
    1480:	4313      	orrs	r3, r2
    1482:	7de1      	ldrb	r1, [r4, #23]
    1484:	0609      	lsls	r1, r1, #24
    1486:	4319      	orrs	r1, r3
    1488:	7e20      	ldrb	r0, [r4, #24]
    148a:	4b20      	ldr	r3, [pc, #128]	; (150c <baro_read_prom+0xa0>)
    148c:	4798      	blx	r3
		spi_command(desc->sercom, addr);
    148e:	7c23      	ldrb	r3, [r4, #16]
    1490:	7c62      	ldrb	r2, [r4, #17]
    1492:	0212      	lsls	r2, r2, #8
    1494:	431a      	orrs	r2, r3
    1496:	7ca3      	ldrb	r3, [r4, #18]
    1498:	041b      	lsls	r3, r3, #16
    149a:	4313      	orrs	r3, r2
    149c:	7ce0      	ldrb	r0, [r4, #19]
    149e:	0600      	lsls	r0, r0, #24
    14a0:	4318      	orrs	r0, r3
    14a2:	0031      	movs	r1, r6
    14a4:	4f1a      	ldr	r7, [pc, #104]	; (1510 <baro_read_prom+0xa4>)
    14a6:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
    14a8:	7c23      	ldrb	r3, [r4, #16]
    14aa:	7c62      	ldrb	r2, [r4, #17]
    14ac:	0212      	lsls	r2, r2, #8
    14ae:	431a      	orrs	r2, r3
    14b0:	7ca3      	ldrb	r3, [r4, #18]
    14b2:	041b      	lsls	r3, r3, #16
    14b4:	4313      	orrs	r3, r2
    14b6:	7ce0      	ldrb	r0, [r4, #19]
    14b8:	0600      	lsls	r0, r0, #24
    14ba:	4318      	orrs	r0, r3
    14bc:	2100      	movs	r1, #0
    14be:	47b8      	blx	r7
    14c0:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
    14c2:	7c23      	ldrb	r3, [r4, #16]
    14c4:	7c62      	ldrb	r2, [r4, #17]
    14c6:	0212      	lsls	r2, r2, #8
    14c8:	431a      	orrs	r2, r3
    14ca:	7ca3      	ldrb	r3, [r4, #18]
    14cc:	041b      	lsls	r3, r3, #16
    14ce:	4313      	orrs	r3, r2
    14d0:	7ce0      	ldrb	r0, [r4, #19]
    14d2:	0600      	lsls	r0, r0, #24
    14d4:	4318      	orrs	r0, r3
    14d6:	2100      	movs	r1, #0
    14d8:	47b8      	blx	r7
    14da:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
    14dc:	7d23      	ldrb	r3, [r4, #20]
    14de:	7d62      	ldrb	r2, [r4, #21]
    14e0:	0212      	lsls	r2, r2, #8
    14e2:	431a      	orrs	r2, r3
    14e4:	7da3      	ldrb	r3, [r4, #22]
    14e6:	041b      	lsls	r3, r3, #16
    14e8:	4313      	orrs	r3, r2
    14ea:	7de1      	ldrb	r1, [r4, #23]
    14ec:	0609      	lsls	r1, r1, #24
    14ee:	4319      	orrs	r1, r3
    14f0:	7e20      	ldrb	r0, [r4, #24]
    14f2:	4b08      	ldr	r3, [pc, #32]	; (1514 <baro_read_prom+0xa8>)
    14f4:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
    14f6:	0033      	movs	r3, r6
    14f8:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
    14fa:	022d      	lsls	r5, r5, #8
    14fc:	433d      	orrs	r5, r7
    14fe:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    1500:	3602      	adds	r6, #2
    1502:	b2f6      	uxtb	r6, r6
    1504:	2eae      	cmp	r6, #174	; 0xae
    1506:	d9b5      	bls.n	1474 <baro_read_prom+0x8>
}
    1508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	00001ead 	.word	0x00001ead
    1510:	00002389 	.word	0x00002389
    1514:	00001e9d 	.word	0x00001e9d

00001518 <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
    1518:	b530      	push	{r4, r5, lr}
    151a:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
    151c:	7b83      	ldrb	r3, [r0, #14]
    151e:	7bc5      	ldrb	r5, [r0, #15]
    1520:	022d      	lsls	r5, r5, #8
    1522:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
    1524:	23ff      	movs	r3, #255	; 0xff
    1526:	002a      	movs	r2, r5
    1528:	439a      	bics	r2, r3
    152a:	0013      	movs	r3, r2
    152c:	2200      	movs	r2, #0
    152e:	7382      	strb	r2, [r0, #14]
    1530:	0a1b      	lsrs	r3, r3, #8
    1532:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
    1534:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
    1536:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
    1538:	e014      	b.n	1564 <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    153a:	1042      	asrs	r2, r0, #1
    153c:	0052      	lsls	r2, r2, #1
    153e:	5aa2      	ldrh	r2, [r4, r2]
    1540:	0a12      	lsrs	r2, r2, #8
    1542:	e018      	b.n	1576 <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1544:	005b      	lsls	r3, r3, #1
    1546:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
    1548:	3201      	adds	r2, #1
    154a:	2a07      	cmp	r2, #7
    154c:	dc09      	bgt.n	1562 <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    154e:	b219      	sxth	r1, r3
    1550:	2900      	cmp	r1, #0
    1552:	daf7      	bge.n	1544 <baro_check+0x2c>
    1554:	0059      	lsls	r1, r3, #1
    1556:	23c0      	movs	r3, #192	; 0xc0
    1558:	019b      	lsls	r3, r3, #6
    155a:	404b      	eors	r3, r1
    155c:	b21b      	sxth	r3, r3
    155e:	b29b      	uxth	r3, r3
    1560:	e7f2      	b.n	1548 <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
    1562:	3001      	adds	r0, #1
    1564:	280f      	cmp	r0, #15
    1566:	dc09      	bgt.n	157c <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1568:	07c2      	lsls	r2, r0, #31
    156a:	d5e6      	bpl.n	153a <baro_check+0x22>
    156c:	1042      	asrs	r2, r0, #1
    156e:	0052      	lsls	r2, r2, #1
    1570:	5aa1      	ldrh	r1, [r4, r2]
    1572:	22ff      	movs	r2, #255	; 0xff
    1574:	400a      	ands	r2, r1
		n_rem ^= byte;
    1576:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
    1578:	2200      	movs	r2, #0
    157a:	e7e6      	b.n	154a <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
    157c:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
    157e:	73a5      	strb	r5, [r4, #14]
    1580:	0a2a      	lsrs	r2, r5, #8
    1582:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
    1584:	200f      	movs	r0, #15
    1586:	4028      	ands	r0, r5
    1588:	1ac0      	subs	r0, r0, r3
    158a:	4243      	negs	r3, r0
    158c:	4158      	adcs	r0, r3
    158e:	b2c0      	uxtb	r0, r0
}
    1590:	bd30      	pop	{r4, r5, pc}
	...

00001594 <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    1594:	b570      	push	{r4, r5, r6, lr}
    1596:	b082      	sub	sp, #8
    1598:	0005      	movs	r5, r0
    159a:	000c      	movs	r4, r1
    159c:	9200      	str	r2, [sp, #0]
    159e:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    15a0:	0008      	movs	r0, r1
    15a2:	4b0e      	ldr	r3, [pc, #56]	; (15dc <baro_init+0x48>)
    15a4:	4798      	blx	r3
    15a6:	1e06      	subs	r6, r0, #0
    15a8:	d102      	bne.n	15b0 <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
    15aa:	0030      	movs	r0, r6
    15ac:	b002      	add	sp, #8
    15ae:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
    15b0:	742c      	strb	r4, [r5, #16]
    15b2:	0a23      	lsrs	r3, r4, #8
    15b4:	746b      	strb	r3, [r5, #17]
    15b6:	0c23      	lsrs	r3, r4, #16
    15b8:	74ab      	strb	r3, [r5, #18]
    15ba:	0e24      	lsrs	r4, r4, #24
    15bc:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
    15be:	0028      	movs	r0, r5
    15c0:	3014      	adds	r0, #20
    15c2:	2205      	movs	r2, #5
    15c4:	4669      	mov	r1, sp
    15c6:	4b06      	ldr	r3, [pc, #24]	; (15e0 <baro_init+0x4c>)
    15c8:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
    15ca:	4a06      	ldr	r2, [pc, #24]	; (15e4 <baro_init+0x50>)
    15cc:	211e      	movs	r1, #30
    15ce:	0028      	movs	r0, r5
    15d0:	4b05      	ldr	r3, [pc, #20]	; (15e8 <baro_init+0x54>)
    15d2:	4798      	blx	r3
	baro_read_prom(desc);
    15d4:	0028      	movs	r0, r5
    15d6:	4b05      	ldr	r3, [pc, #20]	; (15ec <baro_init+0x58>)
    15d8:	4798      	blx	r3
	return true;
    15da:	e7e6      	b.n	15aa <baro_init+0x16>
    15dc:	00002199 	.word	0x00002199
    15e0:	000055b9 	.word	0x000055b9
    15e4:	00000bb8 	.word	0x00000bb8
    15e8:	000013f9 	.word	0x000013f9
    15ec:	0000146d 	.word	0x0000146d

000015f0 <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
    15f0:	280b      	cmp	r0, #11
    15f2:	d804      	bhi.n	15fe <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
    15f4:	4a03      	ldr	r2, [pc, #12]	; (1604 <dma_set_channel+0x14>)
    15f6:	233f      	movs	r3, #63	; 0x3f
    15f8:	54d0      	strb	r0, [r2, r3]
		return true;
    15fa:	2001      	movs	r0, #1
	}
	else return false;
}
    15fc:	4770      	bx	lr
	else return false;
    15fe:	2000      	movs	r0, #0
    1600:	e7fc      	b.n	15fc <dma_set_channel+0xc>
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	41004800 	.word	0x41004800

00001608 <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
    1608:	4b07      	ldr	r3, [pc, #28]	; (1628 <dma_init+0x20>)
    160a:	695a      	ldr	r2, [r3, #20]
    160c:	2120      	movs	r1, #32
    160e:	430a      	orrs	r2, r1
    1610:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
    1612:	69da      	ldr	r2, [r3, #28]
    1614:	430a      	orrs	r2, r1
    1616:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
    1618:	4a04      	ldr	r2, [pc, #16]	; (162c <dma_init+0x24>)
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <dma_init+0x28>)
    161c:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
    161e:	4a05      	ldr	r2, [pc, #20]	; (1634 <dma_init+0x2c>)
    1620:	639a      	str	r2, [r3, #56]	; 0x38
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
    1622:	4a05      	ldr	r2, [pc, #20]	; (1638 <dma_init+0x30>)
    1624:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
    1626:	4770      	bx	lr
    1628:	40000400 	.word	0x40000400
    162c:	20000408 	.word	0x20000408
    1630:	41004800 	.word	0x41004800
    1634:	20000368 	.word	0x20000368
    1638:	00000f02 	.word	0x00000f02

0000163c <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
    163c:	b5f0      	push	{r4, r5, r6, r7, lr}
    163e:	ac05      	add	r4, sp, #20
    1640:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
    1642:	2b02      	cmp	r3, #2
    1644:	d82d      	bhi.n	16a2 <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1646:	2900      	cmp	r1, #0
    1648:	d023      	beq.n	1692 <dma_create_descriptor+0x56>
    164a:	2480      	movs	r4, #128	; 0x80
    164c:	00e4      	lsls	r4, r4, #3
    164e:	2a00      	cmp	r2, #0
    1650:	d021      	beq.n	1696 <dma_create_descriptor+0x5a>
    1652:	2580      	movs	r5, #128	; 0x80
    1654:	012d      	lsls	r5, r5, #4
    1656:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
    1658:	021d      	lsls	r5, r3, #8
    165a:	27c0      	movs	r7, #192	; 0xc0
    165c:	00bf      	lsls	r7, r7, #2
    165e:	403d      	ands	r5, r7
    1660:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
    1662:	2501      	movs	r5, #1
    1664:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
    1666:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
    1668:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    166a:	2900      	cmp	r1, #0
    166c:	d015      	beq.n	169a <dma_create_descriptor+0x5e>
    166e:	1c59      	adds	r1, r3, #1
    1670:	4371      	muls	r1, r6
    1672:	9c06      	ldr	r4, [sp, #24]
    1674:	46a4      	mov	ip, r4
    1676:	4461      	add	r1, ip
    1678:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    167a:	2a00      	cmp	r2, #0
    167c:	d00f      	beq.n	169e <dma_create_descriptor+0x62>
    167e:	3301      	adds	r3, #1
    1680:	4373      	muls	r3, r6
    1682:	9a07      	ldr	r2, [sp, #28]
    1684:	4694      	mov	ip, r2
    1686:	4463      	add	r3, ip
    1688:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
    168a:	9b08      	ldr	r3, [sp, #32]
    168c:	60c3      	str	r3, [r0, #12]
	
	return true;
    168e:	2001      	movs	r0, #1
}
    1690:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1692:	2400      	movs	r4, #0
    1694:	e7db      	b.n	164e <dma_create_descriptor+0x12>
    1696:	2500      	movs	r5, #0
    1698:	e7dd      	b.n	1656 <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    169a:	9906      	ldr	r1, [sp, #24]
    169c:	e7ec      	b.n	1678 <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    169e:	9b07      	ldr	r3, [sp, #28]
    16a0:	e7f2      	b.n	1688 <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
    16a2:	2000      	movs	r0, #0
    16a4:	e7f4      	b.n	1690 <dma_create_descriptor+0x54>
	...

000016a8 <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
    16a8:	b570      	push	{r4, r5, r6, lr}
    16aa:	000c      	movs	r4, r1
    16ac:	0015      	movs	r5, r2
    16ae:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
    16b0:	4b0e      	ldr	r3, [pc, #56]	; (16ec <dma_init_channel+0x44>)
    16b2:	4798      	blx	r3
    16b4:	2800      	cmp	r0, #0
    16b6:	d012      	beq.n	16de <dma_init_channel+0x36>
	if (priority > 3) return false;
    16b8:	2e03      	cmp	r6, #3
    16ba:	d811      	bhi.n	16e0 <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
    16bc:	2c03      	cmp	r4, #3
    16be:	d811      	bhi.n	16e4 <dma_init_channel+0x3c>
    16c0:	2c01      	cmp	r4, #1
    16c2:	d011      	beq.n	16e8 <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    16c4:	05a4      	lsls	r4, r4, #22
    16c6:	23c0      	movs	r3, #192	; 0xc0
    16c8:	041b      	lsls	r3, r3, #16
    16ca:	401c      	ands	r4, r3
    16cc:	022d      	lsls	r5, r5, #8
    16ce:	23fc      	movs	r3, #252	; 0xfc
    16d0:	019b      	lsls	r3, r3, #6
    16d2:	401d      	ands	r5, r3
    16d4:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
    16d6:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    16d8:	4334      	orrs	r4, r6
    16da:	4a05      	ldr	r2, [pc, #20]	; (16f0 <dma_init_channel+0x48>)
    16dc:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
    16de:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
    16e0:	2000      	movs	r0, #0
    16e2:	e7fc      	b.n	16de <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
    16e4:	2000      	movs	r0, #0
    16e6:	e7fa      	b.n	16de <dma_init_channel+0x36>
    16e8:	2000      	movs	r0, #0
    16ea:	e7f8      	b.n	16de <dma_init_channel+0x36>
    16ec:	000015f1 	.word	0x000015f1
    16f0:	41004800 	.word	0x41004800

000016f4 <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
    16f4:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    16f6:	4b07      	ldr	r3, [pc, #28]	; (1714 <dma_enable_channel+0x20>)
    16f8:	4798      	blx	r3
    16fa:	2800      	cmp	r0, #0
    16fc:	d009      	beq.n	1712 <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
    16fe:	4a06      	ldr	r2, [pc, #24]	; (1718 <dma_enable_channel+0x24>)
    1700:	234e      	movs	r3, #78	; 0x4e
    1702:	2102      	movs	r1, #2
    1704:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
    1706:	313e      	adds	r1, #62	; 0x3e
    1708:	5c53      	ldrb	r3, [r2, r1]
    170a:	2402      	movs	r4, #2
    170c:	4323      	orrs	r3, r4
    170e:	b2db      	uxtb	r3, r3
    1710:	5453      	strb	r3, [r2, r1]
	return true;
}
    1712:	bd10      	pop	{r4, pc}
    1714:	000015f1 	.word	0x000015f1
    1718:	41004800 	.word	0x41004800

0000171c <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
    171c:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    171e:	4b05      	ldr	r3, [pc, #20]	; (1734 <dma_disable_channel+0x18>)
    1720:	4798      	blx	r3
    1722:	2800      	cmp	r0, #0
    1724:	d005      	beq.n	1732 <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
    1726:	4904      	ldr	r1, [pc, #16]	; (1738 <dma_disable_channel+0x1c>)
    1728:	2240      	movs	r2, #64	; 0x40
    172a:	5c8b      	ldrb	r3, [r1, r2]
    172c:	2402      	movs	r4, #2
    172e:	43a3      	bics	r3, r4
    1730:	548b      	strb	r3, [r1, r2]
	return true;
}
    1732:	bd10      	pop	{r4, pc}
    1734:	000015f1 	.word	0x000015f1
    1738:	41004800 	.word	0x41004800

0000173c <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
    173c:	b530      	push	{r4, r5, lr}
    173e:	b083      	sub	sp, #12
    1740:	0004      	movs	r4, r0
    1742:	9200      	str	r2, [sp, #0]
    1744:	9301      	str	r3, [sp, #4]
    1746:	ab06      	add	r3, sp, #24
    1748:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
    174a:	7001      	strb	r1, [r0, #0]
    174c:	0a0b      	lsrs	r3, r1, #8
    174e:	7043      	strb	r3, [r0, #1]
    1750:	0c0b      	lsrs	r3, r1, #16
    1752:	7083      	strb	r3, [r0, #2]
    1754:	0e09      	lsrs	r1, r1, #24
    1756:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1758:	3004      	adds	r0, #4
    175a:	2205      	movs	r2, #5
    175c:	4669      	mov	r1, sp
    175e:	4b10      	ldr	r3, [pc, #64]	; (17a0 <eeprom_init+0x64>)
    1760:	4798      	blx	r3
	desc->size = size;
    1762:	7265      	strb	r5, [r4, #9]
    1764:	0a2d      	lsrs	r5, r5, #8
    1766:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1768:	7923      	ldrb	r3, [r4, #4]
    176a:	7962      	ldrb	r2, [r4, #5]
    176c:	0212      	lsls	r2, r2, #8
    176e:	431a      	orrs	r2, r3
    1770:	79a3      	ldrb	r3, [r4, #6]
    1772:	041b      	lsls	r3, r3, #16
    1774:	4313      	orrs	r3, r2
    1776:	79e1      	ldrb	r1, [r4, #7]
    1778:	0609      	lsls	r1, r1, #24
    177a:	4319      	orrs	r1, r3
    177c:	7a20      	ldrb	r0, [r4, #8]
    177e:	4b09      	ldr	r3, [pc, #36]	; (17a4 <eeprom_init+0x68>)
    1780:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1782:	7923      	ldrb	r3, [r4, #4]
    1784:	7962      	ldrb	r2, [r4, #5]
    1786:	0212      	lsls	r2, r2, #8
    1788:	431a      	orrs	r2, r3
    178a:	79a3      	ldrb	r3, [r4, #6]
    178c:	041b      	lsls	r3, r3, #16
    178e:	4313      	orrs	r3, r2
    1790:	79e1      	ldrb	r1, [r4, #7]
    1792:	0609      	lsls	r1, r1, #24
    1794:	4319      	orrs	r1, r3
    1796:	7a20      	ldrb	r0, [r4, #8]
    1798:	4b03      	ldr	r3, [pc, #12]	; (17a8 <eeprom_init+0x6c>)
    179a:	4798      	blx	r3
}
    179c:	b003      	add	sp, #12
    179e:	bd30      	pop	{r4, r5, pc}
    17a0:	000055b9 	.word	0x000055b9
    17a4:	00001e8d 	.word	0x00001e8d
    17a8:	00001e9d 	.word	0x00001e9d

000017ac <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
    17ac:	b510      	push	{r4, lr}
    17ae:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    17b0:	7903      	ldrb	r3, [r0, #4]
    17b2:	7942      	ldrb	r2, [r0, #5]
    17b4:	0212      	lsls	r2, r2, #8
    17b6:	431a      	orrs	r2, r3
    17b8:	7983      	ldrb	r3, [r0, #6]
    17ba:	041b      	lsls	r3, r3, #16
    17bc:	4313      	orrs	r3, r2
    17be:	79c1      	ldrb	r1, [r0, #7]
    17c0:	0609      	lsls	r1, r1, #24
    17c2:	4319      	orrs	r1, r3
    17c4:	7a00      	ldrb	r0, [r0, #8]
    17c6:	4b0e      	ldr	r3, [pc, #56]	; (1800 <eeprom_write_enable+0x54>)
    17c8:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
    17ca:	7823      	ldrb	r3, [r4, #0]
    17cc:	7862      	ldrb	r2, [r4, #1]
    17ce:	0212      	lsls	r2, r2, #8
    17d0:	431a      	orrs	r2, r3
    17d2:	78a3      	ldrb	r3, [r4, #2]
    17d4:	041b      	lsls	r3, r3, #16
    17d6:	4313      	orrs	r3, r2
    17d8:	78e0      	ldrb	r0, [r4, #3]
    17da:	0600      	lsls	r0, r0, #24
    17dc:	4318      	orrs	r0, r3
    17de:	2106      	movs	r1, #6
    17e0:	4b08      	ldr	r3, [pc, #32]	; (1804 <eeprom_write_enable+0x58>)
    17e2:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    17e4:	7923      	ldrb	r3, [r4, #4]
    17e6:	7962      	ldrb	r2, [r4, #5]
    17e8:	0212      	lsls	r2, r2, #8
    17ea:	431a      	orrs	r2, r3
    17ec:	79a3      	ldrb	r3, [r4, #6]
    17ee:	041b      	lsls	r3, r3, #16
    17f0:	4313      	orrs	r3, r2
    17f2:	79e1      	ldrb	r1, [r4, #7]
    17f4:	0609      	lsls	r1, r1, #24
    17f6:	4319      	orrs	r1, r3
    17f8:	7a20      	ldrb	r0, [r4, #8]
    17fa:	4b03      	ldr	r3, [pc, #12]	; (1808 <eeprom_write_enable+0x5c>)
    17fc:	4798      	blx	r3
}
    17fe:	bd10      	pop	{r4, pc}
    1800:	00001ead 	.word	0x00001ead
    1804:	00002389 	.word	0x00002389
    1808:	00001e9d 	.word	0x00001e9d

0000180c <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
    180c:	b510      	push	{r4, lr}
    180e:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1810:	7903      	ldrb	r3, [r0, #4]
    1812:	7942      	ldrb	r2, [r0, #5]
    1814:	0212      	lsls	r2, r2, #8
    1816:	431a      	orrs	r2, r3
    1818:	7983      	ldrb	r3, [r0, #6]
    181a:	041b      	lsls	r3, r3, #16
    181c:	4313      	orrs	r3, r2
    181e:	79c1      	ldrb	r1, [r0, #7]
    1820:	0609      	lsls	r1, r1, #24
    1822:	4319      	orrs	r1, r3
    1824:	7a00      	ldrb	r0, [r0, #8]
    1826:	4b0e      	ldr	r3, [pc, #56]	; (1860 <eeprom_write_disable+0x54>)
    1828:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
    182a:	7823      	ldrb	r3, [r4, #0]
    182c:	7862      	ldrb	r2, [r4, #1]
    182e:	0212      	lsls	r2, r2, #8
    1830:	431a      	orrs	r2, r3
    1832:	78a3      	ldrb	r3, [r4, #2]
    1834:	041b      	lsls	r3, r3, #16
    1836:	4313      	orrs	r3, r2
    1838:	78e0      	ldrb	r0, [r4, #3]
    183a:	0600      	lsls	r0, r0, #24
    183c:	4318      	orrs	r0, r3
    183e:	2104      	movs	r1, #4
    1840:	4b08      	ldr	r3, [pc, #32]	; (1864 <eeprom_write_disable+0x58>)
    1842:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1844:	7923      	ldrb	r3, [r4, #4]
    1846:	7962      	ldrb	r2, [r4, #5]
    1848:	0212      	lsls	r2, r2, #8
    184a:	431a      	orrs	r2, r3
    184c:	79a3      	ldrb	r3, [r4, #6]
    184e:	041b      	lsls	r3, r3, #16
    1850:	4313      	orrs	r3, r2
    1852:	79e1      	ldrb	r1, [r4, #7]
    1854:	0609      	lsls	r1, r1, #24
    1856:	4319      	orrs	r1, r3
    1858:	7a20      	ldrb	r0, [r4, #8]
    185a:	4b03      	ldr	r3, [pc, #12]	; (1868 <eeprom_write_disable+0x5c>)
    185c:	4798      	blx	r3
}
    185e:	bd10      	pop	{r4, pc}
    1860:	00001ead 	.word	0x00001ead
    1864:	00002389 	.word	0x00002389
    1868:	00001e9d 	.word	0x00001e9d

0000186c <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
    186c:	b570      	push	{r4, r5, r6, lr}
    186e:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1870:	7903      	ldrb	r3, [r0, #4]
    1872:	7942      	ldrb	r2, [r0, #5]
    1874:	0212      	lsls	r2, r2, #8
    1876:	431a      	orrs	r2, r3
    1878:	7983      	ldrb	r3, [r0, #6]
    187a:	041b      	lsls	r3, r3, #16
    187c:	4313      	orrs	r3, r2
    187e:	79c1      	ldrb	r1, [r0, #7]
    1880:	0609      	lsls	r1, r1, #24
    1882:	4319      	orrs	r1, r3
    1884:	7a00      	ldrb	r0, [r0, #8]
    1886:	4b15      	ldr	r3, [pc, #84]	; (18dc <eeprom_read_status+0x70>)
    1888:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
    188a:	7823      	ldrb	r3, [r4, #0]
    188c:	7862      	ldrb	r2, [r4, #1]
    188e:	0212      	lsls	r2, r2, #8
    1890:	431a      	orrs	r2, r3
    1892:	78a3      	ldrb	r3, [r4, #2]
    1894:	041b      	lsls	r3, r3, #16
    1896:	4313      	orrs	r3, r2
    1898:	78e0      	ldrb	r0, [r4, #3]
    189a:	0600      	lsls	r0, r0, #24
    189c:	4318      	orrs	r0, r3
    189e:	2105      	movs	r1, #5
    18a0:	4d0f      	ldr	r5, [pc, #60]	; (18e0 <eeprom_read_status+0x74>)
    18a2:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
    18a4:	7823      	ldrb	r3, [r4, #0]
    18a6:	7862      	ldrb	r2, [r4, #1]
    18a8:	0212      	lsls	r2, r2, #8
    18aa:	431a      	orrs	r2, r3
    18ac:	78a3      	ldrb	r3, [r4, #2]
    18ae:	041b      	lsls	r3, r3, #16
    18b0:	4313      	orrs	r3, r2
    18b2:	78e0      	ldrb	r0, [r4, #3]
    18b4:	0600      	lsls	r0, r0, #24
    18b6:	4318      	orrs	r0, r3
    18b8:	2100      	movs	r1, #0
    18ba:	47a8      	blx	r5
    18bc:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
    18be:	7923      	ldrb	r3, [r4, #4]
    18c0:	7962      	ldrb	r2, [r4, #5]
    18c2:	0212      	lsls	r2, r2, #8
    18c4:	431a      	orrs	r2, r3
    18c6:	79a3      	ldrb	r3, [r4, #6]
    18c8:	041b      	lsls	r3, r3, #16
    18ca:	4313      	orrs	r3, r2
    18cc:	79e1      	ldrb	r1, [r4, #7]
    18ce:	0609      	lsls	r1, r1, #24
    18d0:	4319      	orrs	r1, r3
    18d2:	7a20      	ldrb	r0, [r4, #8]
    18d4:	4b03      	ldr	r3, [pc, #12]	; (18e4 <eeprom_read_status+0x78>)
    18d6:	4798      	blx	r3
}
    18d8:	0028      	movs	r0, r5
    18da:	bd70      	pop	{r4, r5, r6, pc}
    18dc:	00001ead 	.word	0x00001ead
    18e0:	00002389 	.word	0x00002389
    18e4:	00001e9d 	.word	0x00001e9d

000018e8 <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
    18e8:	b510      	push	{r4, lr}
    18ea:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
    18ec:	4b0a      	ldr	r3, [pc, #40]	; (1918 <eeprom_check+0x30>)
    18ee:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
    18f0:	0020      	movs	r0, r4
    18f2:	4b0a      	ldr	r3, [pc, #40]	; (191c <eeprom_check+0x34>)
    18f4:	4798      	blx	r3
    18f6:	0780      	lsls	r0, r0, #30
    18f8:	d401      	bmi.n	18fe <eeprom_check+0x16>
    18fa:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
    18fc:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
    18fe:	0020      	movs	r0, r4
    1900:	4b07      	ldr	r3, [pc, #28]	; (1920 <eeprom_check+0x38>)
    1902:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1904:	0020      	movs	r0, r4
    1906:	4b05      	ldr	r3, [pc, #20]	; (191c <eeprom_check+0x34>)
    1908:	4798      	blx	r3
    190a:	0780      	lsls	r0, r0, #30
    190c:	d401      	bmi.n	1912 <eeprom_check+0x2a>
	return true;
    190e:	2001      	movs	r0, #1
    1910:	e7f4      	b.n	18fc <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1912:	2000      	movs	r0, #0
    1914:	e7f2      	b.n	18fc <eeprom_check+0x14>
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	000017ad 	.word	0x000017ad
    191c:	0000186d 	.word	0x0000186d
    1920:	0000180d 	.word	0x0000180d

00001924 <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	b082      	sub	sp, #8
    1928:	0004      	movs	r4, r0
    192a:	9200      	str	r2, [sp, #0]
    192c:	9301      	str	r3, [sp, #4]
    192e:	ab06      	add	r3, sp, #24
    1930:	cb20      	ldmia	r3!, {r5}
    1932:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
    1934:	7001      	strb	r1, [r0, #0]
    1936:	0a0b      	lsrs	r3, r1, #8
    1938:	7043      	strb	r3, [r0, #1]
    193a:	0c0b      	lsrs	r3, r1, #16
    193c:	7083      	strb	r3, [r0, #2]
    193e:	0e09      	lsrs	r1, r1, #24
    1940:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1942:	3008      	adds	r0, #8
    1944:	2205      	movs	r2, #5
    1946:	4669      	mov	r1, sp
    1948:	4b15      	ldr	r3, [pc, #84]	; (19a0 <flash_init+0x7c>)
    194a:	4798      	blx	r3
	desc->size = size;
    194c:	7125      	strb	r5, [r4, #4]
    194e:	0a2b      	lsrs	r3, r5, #8
    1950:	7163      	strb	r3, [r4, #5]
    1952:	0c2b      	lsrs	r3, r5, #16
    1954:	71a3      	strb	r3, [r4, #6]
    1956:	0e2d      	lsrs	r5, r5, #24
    1958:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
    195a:	221f      	movs	r2, #31
    195c:	4032      	ands	r2, r6
    195e:	7b63      	ldrb	r3, [r4, #13]
    1960:	211f      	movs	r1, #31
    1962:	438b      	bics	r3, r1
    1964:	4313      	orrs	r3, r2
    1966:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1968:	7a23      	ldrb	r3, [r4, #8]
    196a:	7a62      	ldrb	r2, [r4, #9]
    196c:	0212      	lsls	r2, r2, #8
    196e:	431a      	orrs	r2, r3
    1970:	7aa3      	ldrb	r3, [r4, #10]
    1972:	041b      	lsls	r3, r3, #16
    1974:	4313      	orrs	r3, r2
    1976:	7ae1      	ldrb	r1, [r4, #11]
    1978:	0609      	lsls	r1, r1, #24
    197a:	4319      	orrs	r1, r3
    197c:	7b20      	ldrb	r0, [r4, #12]
    197e:	4b09      	ldr	r3, [pc, #36]	; (19a4 <flash_init+0x80>)
    1980:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1982:	7a23      	ldrb	r3, [r4, #8]
    1984:	7a62      	ldrb	r2, [r4, #9]
    1986:	0212      	lsls	r2, r2, #8
    1988:	431a      	orrs	r2, r3
    198a:	7aa3      	ldrb	r3, [r4, #10]
    198c:	041b      	lsls	r3, r3, #16
    198e:	4313      	orrs	r3, r2
    1990:	7ae1      	ldrb	r1, [r4, #11]
    1992:	0609      	lsls	r1, r1, #24
    1994:	4319      	orrs	r1, r3
    1996:	7b20      	ldrb	r0, [r4, #12]
    1998:	4b03      	ldr	r3, [pc, #12]	; (19a8 <flash_init+0x84>)
    199a:	4798      	blx	r3
}
    199c:	b002      	add	sp, #8
    199e:	bd70      	pop	{r4, r5, r6, pc}
    19a0:	000055b9 	.word	0x000055b9
    19a4:	00001e8d 	.word	0x00001e8d
    19a8:	00001e9d 	.word	0x00001e9d

000019ac <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
    19ac:	b530      	push	{r4, r5, lr}
    19ae:	b083      	sub	sp, #12
    19b0:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    19b2:	7a03      	ldrb	r3, [r0, #8]
    19b4:	7a42      	ldrb	r2, [r0, #9]
    19b6:	0212      	lsls	r2, r2, #8
    19b8:	431a      	orrs	r2, r3
    19ba:	7a83      	ldrb	r3, [r0, #10]
    19bc:	041b      	lsls	r3, r3, #16
    19be:	4313      	orrs	r3, r2
    19c0:	7ac1      	ldrb	r1, [r0, #11]
    19c2:	0609      	lsls	r1, r1, #24
    19c4:	4319      	orrs	r1, r3
    19c6:	7b00      	ldrb	r0, [r0, #12]
    19c8:	4b24      	ldr	r3, [pc, #144]	; (1a5c <flash_check+0xb0>)
    19ca:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    19cc:	7823      	ldrb	r3, [r4, #0]
    19ce:	7862      	ldrb	r2, [r4, #1]
    19d0:	0212      	lsls	r2, r2, #8
    19d2:	431a      	orrs	r2, r3
    19d4:	78a3      	ldrb	r3, [r4, #2]
    19d6:	041b      	lsls	r3, r3, #16
    19d8:	4313      	orrs	r3, r2
    19da:	78e0      	ldrb	r0, [r4, #3]
    19dc:	0600      	lsls	r0, r0, #24
    19de:	4318      	orrs	r0, r3
    19e0:	219f      	movs	r1, #159	; 0x9f
    19e2:	4b1f      	ldr	r3, [pc, #124]	; (1a60 <flash_check+0xb4>)
    19e4:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    19e6:	2500      	movs	r5, #0
    19e8:	e00f      	b.n	1a0a <flash_check+0x5e>
    19ea:	7823      	ldrb	r3, [r4, #0]
    19ec:	7862      	ldrb	r2, [r4, #1]
    19ee:	0212      	lsls	r2, r2, #8
    19f0:	431a      	orrs	r2, r3
    19f2:	78a3      	ldrb	r3, [r4, #2]
    19f4:	041b      	lsls	r3, r3, #16
    19f6:	4313      	orrs	r3, r2
    19f8:	78e0      	ldrb	r0, [r4, #3]
    19fa:	0600      	lsls	r0, r0, #24
    19fc:	4318      	orrs	r0, r3
    19fe:	2100      	movs	r1, #0
    1a00:	4b17      	ldr	r3, [pc, #92]	; (1a60 <flash_check+0xb4>)
    1a02:	4798      	blx	r3
    1a04:	ab01      	add	r3, sp, #4
    1a06:	5558      	strb	r0, [r3, r5]
    1a08:	3501      	adds	r5, #1
    1a0a:	2d02      	cmp	r5, #2
    1a0c:	dded      	ble.n	19ea <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    1a0e:	7a23      	ldrb	r3, [r4, #8]
    1a10:	7a62      	ldrb	r2, [r4, #9]
    1a12:	0212      	lsls	r2, r2, #8
    1a14:	431a      	orrs	r2, r3
    1a16:	7aa3      	ldrb	r3, [r4, #10]
    1a18:	041b      	lsls	r3, r3, #16
    1a1a:	4313      	orrs	r3, r2
    1a1c:	7ae1      	ldrb	r1, [r4, #11]
    1a1e:	0609      	lsls	r1, r1, #24
    1a20:	4319      	orrs	r1, r3
    1a22:	7b20      	ldrb	r0, [r4, #12]
    1a24:	4b0f      	ldr	r3, [pc, #60]	; (1a64 <flash_check+0xb8>)
    1a26:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1a28:	ab01      	add	r3, sp, #4
    1a2a:	781b      	ldrb	r3, [r3, #0]
    1a2c:	2b1f      	cmp	r3, #31
    1a2e:	d10e      	bne.n	1a4e <flash_check+0xa2>
    1a30:	ab01      	add	r3, sp, #4
    1a32:	785a      	ldrb	r2, [r3, #1]
    1a34:	7b63      	ldrb	r3, [r4, #13]
    1a36:	06db      	lsls	r3, r3, #27
    1a38:	0edb      	lsrs	r3, r3, #27
    1a3a:	2180      	movs	r1, #128	; 0x80
    1a3c:	430b      	orrs	r3, r1
    1a3e:	429a      	cmp	r2, r3
    1a40:	d108      	bne.n	1a54 <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    1a42:	ab01      	add	r3, sp, #4
    1a44:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1a46:	2b01      	cmp	r3, #1
    1a48:	d006      	beq.n	1a58 <flash_check+0xac>
	else return false;
    1a4a:	2000      	movs	r0, #0
    1a4c:	e000      	b.n	1a50 <flash_check+0xa4>
    1a4e:	2000      	movs	r0, #0
}
    1a50:	b003      	add	sp, #12
    1a52:	bd30      	pop	{r4, r5, pc}
	else return false;
    1a54:	2000      	movs	r0, #0
    1a56:	e7fb      	b.n	1a50 <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    1a58:	2001      	movs	r0, #1
    1a5a:	e7f9      	b.n	1a50 <flash_check+0xa4>
    1a5c:	00001ead 	.word	0x00001ead
    1a60:	00002389 	.word	0x00002389
    1a64:	00001e9d 	.word	0x00001e9d

00001a68 <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1a68:	b570      	push	{r4, r5, r6, lr}
    1a6a:	0004      	movs	r4, r0
    1a6c:	000e      	movs	r6, r1
    1a6e:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1a70:	7902      	ldrb	r2, [r0, #4]
    1a72:	7943      	ldrb	r3, [r0, #5]
    1a74:	021b      	lsls	r3, r3, #8
    1a76:	4313      	orrs	r3, r2
    1a78:	7982      	ldrb	r2, [r0, #6]
    1a7a:	0412      	lsls	r2, r2, #16
    1a7c:	431a      	orrs	r2, r3
    1a7e:	79c1      	ldrb	r1, [r0, #7]
    1a80:	0609      	lsls	r1, r1, #24
    1a82:	4311      	orrs	r1, r2
    1a84:	7a00      	ldrb	r0, [r0, #8]
    1a86:	4b15      	ldr	r3, [pc, #84]	; (1adc <imu_icm20948_write_byte+0x74>)
    1a88:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    1a8a:	217f      	movs	r1, #127	; 0x7f
    1a8c:	4031      	ands	r1, r6
    1a8e:	7823      	ldrb	r3, [r4, #0]
    1a90:	7862      	ldrb	r2, [r4, #1]
    1a92:	0212      	lsls	r2, r2, #8
    1a94:	431a      	orrs	r2, r3
    1a96:	78a3      	ldrb	r3, [r4, #2]
    1a98:	041b      	lsls	r3, r3, #16
    1a9a:	4313      	orrs	r3, r2
    1a9c:	78e0      	ldrb	r0, [r4, #3]
    1a9e:	0600      	lsls	r0, r0, #24
    1aa0:	4318      	orrs	r0, r3
    1aa2:	4e0f      	ldr	r6, [pc, #60]	; (1ae0 <imu_icm20948_write_byte+0x78>)
    1aa4:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    1aa6:	7823      	ldrb	r3, [r4, #0]
    1aa8:	7862      	ldrb	r2, [r4, #1]
    1aaa:	0212      	lsls	r2, r2, #8
    1aac:	431a      	orrs	r2, r3
    1aae:	78a3      	ldrb	r3, [r4, #2]
    1ab0:	041b      	lsls	r3, r3, #16
    1ab2:	4313      	orrs	r3, r2
    1ab4:	78e0      	ldrb	r0, [r4, #3]
    1ab6:	0600      	lsls	r0, r0, #24
    1ab8:	4318      	orrs	r0, r3
    1aba:	0029      	movs	r1, r5
    1abc:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1abe:	7923      	ldrb	r3, [r4, #4]
    1ac0:	7962      	ldrb	r2, [r4, #5]
    1ac2:	0212      	lsls	r2, r2, #8
    1ac4:	431a      	orrs	r2, r3
    1ac6:	79a3      	ldrb	r3, [r4, #6]
    1ac8:	041b      	lsls	r3, r3, #16
    1aca:	4313      	orrs	r3, r2
    1acc:	79e1      	ldrb	r1, [r4, #7]
    1ace:	0609      	lsls	r1, r1, #24
    1ad0:	4319      	orrs	r1, r3
    1ad2:	7a20      	ldrb	r0, [r4, #8]
    1ad4:	4b03      	ldr	r3, [pc, #12]	; (1ae4 <imu_icm20948_write_byte+0x7c>)
    1ad6:	4798      	blx	r3
}
    1ad8:	bd70      	pop	{r4, r5, r6, pc}
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	00001ead 	.word	0x00001ead
    1ae0:	00002389 	.word	0x00002389
    1ae4:	00001e9d 	.word	0x00001e9d

00001ae8 <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    1ae8:	b570      	push	{r4, r5, r6, lr}
    1aea:	0004      	movs	r4, r0
    1aec:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1aee:	7903      	ldrb	r3, [r0, #4]
    1af0:	7942      	ldrb	r2, [r0, #5]
    1af2:	0212      	lsls	r2, r2, #8
    1af4:	431a      	orrs	r2, r3
    1af6:	7983      	ldrb	r3, [r0, #6]
    1af8:	041b      	lsls	r3, r3, #16
    1afa:	4313      	orrs	r3, r2
    1afc:	79c1      	ldrb	r1, [r0, #7]
    1afe:	0609      	lsls	r1, r1, #24
    1b00:	4319      	orrs	r1, r3
    1b02:	7a00      	ldrb	r0, [r0, #8]
    1b04:	4b16      	ldr	r3, [pc, #88]	; (1b60 <imu_icm20948_read_byte+0x78>)
    1b06:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1b08:	2180      	movs	r1, #128	; 0x80
    1b0a:	4249      	negs	r1, r1
    1b0c:	4329      	orrs	r1, r5
    1b0e:	b2c9      	uxtb	r1, r1
    1b10:	7823      	ldrb	r3, [r4, #0]
    1b12:	7862      	ldrb	r2, [r4, #1]
    1b14:	0212      	lsls	r2, r2, #8
    1b16:	431a      	orrs	r2, r3
    1b18:	78a3      	ldrb	r3, [r4, #2]
    1b1a:	041b      	lsls	r3, r3, #16
    1b1c:	4313      	orrs	r3, r2
    1b1e:	78e0      	ldrb	r0, [r4, #3]
    1b20:	0600      	lsls	r0, r0, #24
    1b22:	4318      	orrs	r0, r3
    1b24:	4d0f      	ldr	r5, [pc, #60]	; (1b64 <imu_icm20948_read_byte+0x7c>)
    1b26:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    1b28:	7823      	ldrb	r3, [r4, #0]
    1b2a:	7862      	ldrb	r2, [r4, #1]
    1b2c:	0212      	lsls	r2, r2, #8
    1b2e:	431a      	orrs	r2, r3
    1b30:	78a3      	ldrb	r3, [r4, #2]
    1b32:	041b      	lsls	r3, r3, #16
    1b34:	4313      	orrs	r3, r2
    1b36:	78e0      	ldrb	r0, [r4, #3]
    1b38:	0600      	lsls	r0, r0, #24
    1b3a:	4318      	orrs	r0, r3
    1b3c:	2100      	movs	r1, #0
    1b3e:	47a8      	blx	r5
    1b40:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1b42:	7923      	ldrb	r3, [r4, #4]
    1b44:	7962      	ldrb	r2, [r4, #5]
    1b46:	0212      	lsls	r2, r2, #8
    1b48:	431a      	orrs	r2, r3
    1b4a:	79a3      	ldrb	r3, [r4, #6]
    1b4c:	041b      	lsls	r3, r3, #16
    1b4e:	4313      	orrs	r3, r2
    1b50:	79e1      	ldrb	r1, [r4, #7]
    1b52:	0609      	lsls	r1, r1, #24
    1b54:	4319      	orrs	r1, r3
    1b56:	7a20      	ldrb	r0, [r4, #8]
    1b58:	4b03      	ldr	r3, [pc, #12]	; (1b68 <imu_icm20948_read_byte+0x80>)
    1b5a:	4798      	blx	r3
	return out;
}
    1b5c:	0028      	movs	r0, r5
    1b5e:	bd70      	pop	{r4, r5, r6, pc}
    1b60:	00001ead 	.word	0x00001ead
    1b64:	00002389 	.word	0x00002389
    1b68:	00001e9d 	.word	0x00001e9d

00001b6c <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b6e:	46c6      	mov	lr, r8
    1b70:	b500      	push	{lr}
    1b72:	0004      	movs	r4, r0
    1b74:	000d      	movs	r5, r1
    1b76:	0017      	movs	r7, r2
    1b78:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1b7a:	7902      	ldrb	r2, [r0, #4]
    1b7c:	7943      	ldrb	r3, [r0, #5]
    1b7e:	021b      	lsls	r3, r3, #8
    1b80:	4313      	orrs	r3, r2
    1b82:	7982      	ldrb	r2, [r0, #6]
    1b84:	0412      	lsls	r2, r2, #16
    1b86:	431a      	orrs	r2, r3
    1b88:	79c1      	ldrb	r1, [r0, #7]
    1b8a:	0609      	lsls	r1, r1, #24
    1b8c:	4311      	orrs	r1, r2
    1b8e:	7a00      	ldrb	r0, [r0, #8]
    1b90:	4b19      	ldr	r3, [pc, #100]	; (1bf8 <imu_icm20948_write+0x8c>)
    1b92:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    1b94:	217f      	movs	r1, #127	; 0x7f
    1b96:	4029      	ands	r1, r5
    1b98:	7823      	ldrb	r3, [r4, #0]
    1b9a:	7862      	ldrb	r2, [r4, #1]
    1b9c:	0212      	lsls	r2, r2, #8
    1b9e:	431a      	orrs	r2, r3
    1ba0:	78a3      	ldrb	r3, [r4, #2]
    1ba2:	041b      	lsls	r3, r3, #16
    1ba4:	4313      	orrs	r3, r2
    1ba6:	78e0      	ldrb	r0, [r4, #3]
    1ba8:	0600      	lsls	r0, r0, #24
    1baa:	4318      	orrs	r0, r3
    1bac:	4b13      	ldr	r3, [pc, #76]	; (1bfc <imu_icm20948_write+0x90>)
    1bae:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1bb0:	2600      	movs	r6, #0
    1bb2:	e00e      	b.n	1bd2 <imu_icm20948_write+0x66>
		spi_command(desc->sercom, data[i]);
    1bb4:	4643      	mov	r3, r8
    1bb6:	5d99      	ldrb	r1, [r3, r6]
    1bb8:	7822      	ldrb	r2, [r4, #0]
    1bba:	7863      	ldrb	r3, [r4, #1]
    1bbc:	021b      	lsls	r3, r3, #8
    1bbe:	4313      	orrs	r3, r2
    1bc0:	78a5      	ldrb	r5, [r4, #2]
    1bc2:	042d      	lsls	r5, r5, #16
    1bc4:	431d      	orrs	r5, r3
    1bc6:	78e0      	ldrb	r0, [r4, #3]
    1bc8:	0600      	lsls	r0, r0, #24
    1bca:	4328      	orrs	r0, r5
    1bcc:	4b0b      	ldr	r3, [pc, #44]	; (1bfc <imu_icm20948_write+0x90>)
    1bce:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    1bd0:	3601      	adds	r6, #1
    1bd2:	42be      	cmp	r6, r7
    1bd4:	dbee      	blt.n	1bb4 <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1bd6:	7923      	ldrb	r3, [r4, #4]
    1bd8:	7962      	ldrb	r2, [r4, #5]
    1bda:	0212      	lsls	r2, r2, #8
    1bdc:	431a      	orrs	r2, r3
    1bde:	79a3      	ldrb	r3, [r4, #6]
    1be0:	041b      	lsls	r3, r3, #16
    1be2:	4313      	orrs	r3, r2
    1be4:	79e1      	ldrb	r1, [r4, #7]
    1be6:	0609      	lsls	r1, r1, #24
    1be8:	4319      	orrs	r1, r3
    1bea:	7a20      	ldrb	r0, [r4, #8]
    1bec:	4b04      	ldr	r3, [pc, #16]	; (1c00 <imu_icm20948_write+0x94>)
    1bee:	4798      	blx	r3
}
    1bf0:	bc80      	pop	{r7}
    1bf2:	46b8      	mov	r8, r7
    1bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	00001ead 	.word	0x00001ead
    1bfc:	00002389 	.word	0x00002389
    1c00:	00001e9d 	.word	0x00001e9d

00001c04 <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c06:	46c6      	mov	lr, r8
    1c08:	b500      	push	{lr}
    1c0a:	0004      	movs	r4, r0
    1c0c:	000d      	movs	r5, r1
    1c0e:	0017      	movs	r7, r2
    1c10:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1c12:	7903      	ldrb	r3, [r0, #4]
    1c14:	7942      	ldrb	r2, [r0, #5]
    1c16:	0212      	lsls	r2, r2, #8
    1c18:	431a      	orrs	r2, r3
    1c1a:	7983      	ldrb	r3, [r0, #6]
    1c1c:	041b      	lsls	r3, r3, #16
    1c1e:	4313      	orrs	r3, r2
    1c20:	79c1      	ldrb	r1, [r0, #7]
    1c22:	0609      	lsls	r1, r1, #24
    1c24:	4319      	orrs	r1, r3
    1c26:	7a00      	ldrb	r0, [r0, #8]
    1c28:	4b1b      	ldr	r3, [pc, #108]	; (1c98 <imu_icm20948_read+0x94>)
    1c2a:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1c2c:	2180      	movs	r1, #128	; 0x80
    1c2e:	4249      	negs	r1, r1
    1c30:	4329      	orrs	r1, r5
    1c32:	b2c9      	uxtb	r1, r1
    1c34:	7823      	ldrb	r3, [r4, #0]
    1c36:	7862      	ldrb	r2, [r4, #1]
    1c38:	0212      	lsls	r2, r2, #8
    1c3a:	431a      	orrs	r2, r3
    1c3c:	78a3      	ldrb	r3, [r4, #2]
    1c3e:	041b      	lsls	r3, r3, #16
    1c40:	4313      	orrs	r3, r2
    1c42:	78e0      	ldrb	r0, [r4, #3]
    1c44:	0600      	lsls	r0, r0, #24
    1c46:	4318      	orrs	r0, r3
    1c48:	4b14      	ldr	r3, [pc, #80]	; (1c9c <imu_icm20948_read+0x98>)
    1c4a:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1c4c:	2500      	movs	r5, #0
    1c4e:	e010      	b.n	1c72 <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    1c50:	4643      	mov	r3, r8
    1c52:	195e      	adds	r6, r3, r5
    1c54:	7823      	ldrb	r3, [r4, #0]
    1c56:	7862      	ldrb	r2, [r4, #1]
    1c58:	0212      	lsls	r2, r2, #8
    1c5a:	431a      	orrs	r2, r3
    1c5c:	78a3      	ldrb	r3, [r4, #2]
    1c5e:	041b      	lsls	r3, r3, #16
    1c60:	4313      	orrs	r3, r2
    1c62:	78e0      	ldrb	r0, [r4, #3]
    1c64:	0600      	lsls	r0, r0, #24
    1c66:	4318      	orrs	r0, r3
    1c68:	2100      	movs	r1, #0
    1c6a:	4b0c      	ldr	r3, [pc, #48]	; (1c9c <imu_icm20948_read+0x98>)
    1c6c:	4798      	blx	r3
    1c6e:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    1c70:	3501      	adds	r5, #1
    1c72:	42bd      	cmp	r5, r7
    1c74:	dbec      	blt.n	1c50 <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1c76:	7923      	ldrb	r3, [r4, #4]
    1c78:	7962      	ldrb	r2, [r4, #5]
    1c7a:	0212      	lsls	r2, r2, #8
    1c7c:	431a      	orrs	r2, r3
    1c7e:	79a3      	ldrb	r3, [r4, #6]
    1c80:	041b      	lsls	r3, r3, #16
    1c82:	4313      	orrs	r3, r2
    1c84:	79e1      	ldrb	r1, [r4, #7]
    1c86:	0609      	lsls	r1, r1, #24
    1c88:	4319      	orrs	r1, r3
    1c8a:	7a20      	ldrb	r0, [r4, #8]
    1c8c:	4b04      	ldr	r3, [pc, #16]	; (1ca0 <imu_icm20948_read+0x9c>)
    1c8e:	4798      	blx	r3
}
    1c90:	bc80      	pop	{r7}
    1c92:	46b8      	mov	r8, r7
    1c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	00001ead 	.word	0x00001ead
    1c9c:	00002389 	.word	0x00002389
    1ca0:	00001e9d 	.word	0x00001e9d

00001ca4 <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    1ca4:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    1ca6:	2903      	cmp	r1, #3
    1ca8:	d900      	bls.n	1cac <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    1caa:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    1cac:	0109      	lsls	r1, r1, #4
    1cae:	b2ca      	uxtb	r2, r1
    1cb0:	217f      	movs	r1, #127	; 0x7f
    1cb2:	4b01      	ldr	r3, [pc, #4]	; (1cb8 <imu_icm20948_user_bank+0x14>)
    1cb4:	4798      	blx	r3
}
    1cb6:	e7f8      	b.n	1caa <imu_icm20948_user_bank+0x6>
    1cb8:	00001a69 	.word	0x00001a69

00001cbc <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    1cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cbe:	b083      	sub	sp, #12
    1cc0:	0005      	movs	r5, r0
    1cc2:	000c      	movs	r4, r1
    1cc4:	9200      	str	r2, [sp, #0]
    1cc6:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    1cc8:	0008      	movs	r0, r1
    1cca:	4b13      	ldr	r3, [pc, #76]	; (1d18 <imu_icm20948_init+0x5c>)
    1ccc:	4798      	blx	r3
    1cce:	1e06      	subs	r6, r0, #0
    1cd0:	d102      	bne.n	1cd8 <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    1cd2:	0030      	movs	r0, r6
    1cd4:	b003      	add	sp, #12
    1cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    1cd8:	702c      	strb	r4, [r5, #0]
    1cda:	0a23      	lsrs	r3, r4, #8
    1cdc:	706b      	strb	r3, [r5, #1]
    1cde:	0c23      	lsrs	r3, r4, #16
    1ce0:	70ab      	strb	r3, [r5, #2]
    1ce2:	0e24      	lsrs	r4, r4, #24
    1ce4:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    1ce6:	1d28      	adds	r0, r5, #4
    1ce8:	2205      	movs	r2, #5
    1cea:	4669      	mov	r1, sp
    1cec:	4b0b      	ldr	r3, [pc, #44]	; (1d1c <imu_icm20948_init+0x60>)
    1cee:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    1cf0:	2280      	movs	r2, #128	; 0x80
    1cf2:	2106      	movs	r1, #6
    1cf4:	0028      	movs	r0, r5
    1cf6:	4c0a      	ldr	r4, [pc, #40]	; (1d20 <imu_icm20948_init+0x64>)
    1cf8:	47a0      	blx	r4
	delay_ms(11);
    1cfa:	480a      	ldr	r0, [pc, #40]	; (1d24 <imu_icm20948_init+0x68>)
    1cfc:	4f0a      	ldr	r7, [pc, #40]	; (1d28 <imu_icm20948_init+0x6c>)
    1cfe:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    1d00:	2210      	movs	r2, #16
    1d02:	2103      	movs	r1, #3
    1d04:	0028      	movs	r0, r5
    1d06:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    1d08:	2201      	movs	r2, #1
    1d0a:	2106      	movs	r1, #6
    1d0c:	0028      	movs	r0, r5
    1d0e:	47a0      	blx	r4
	delay_us(80);
    1d10:	20f0      	movs	r0, #240	; 0xf0
    1d12:	0040      	lsls	r0, r0, #1
    1d14:	47b8      	blx	r7
	return true;
    1d16:	e7dc      	b.n	1cd2 <imu_icm20948_init+0x16>
    1d18:	00002199 	.word	0x00002199
    1d1c:	000055b9 	.word	0x000055b9
    1d20:	00001a69 	.word	0x00001a69
    1d24:	000101d0 	.word	0x000101d0
    1d28:	0000246d 	.word	0x0000246d

00001d2c <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1d2c:	b510      	push	{r4, lr}
    1d2e:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    1d30:	2100      	movs	r1, #0
    1d32:	4b06      	ldr	r3, [pc, #24]	; (1d4c <imu_icm20948_check+0x20>)
    1d34:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    1d36:	2100      	movs	r1, #0
    1d38:	0020      	movs	r0, r4
    1d3a:	4b05      	ldr	r3, [pc, #20]	; (1d50 <imu_icm20948_check+0x24>)
    1d3c:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    1d3e:	28ea      	cmp	r0, #234	; 0xea
    1d40:	d001      	beq.n	1d46 <imu_icm20948_check+0x1a>
	else return false;
    1d42:	2000      	movs	r0, #0
}
    1d44:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    1d46:	38e9      	subs	r0, #233	; 0xe9
    1d48:	e7fc      	b.n	1d44 <imu_icm20948_check+0x18>
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	00001ca5 	.word	0x00001ca5
    1d50:	00001ae9 	.word	0x00001ae9

00001d54 <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d56:	0004      	movs	r4, r0
    1d58:	000f      	movs	r7, r1
    1d5a:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1d5c:	2103      	movs	r1, #3
    1d5e:	4b0b      	ldr	r3, [pc, #44]	; (1d8c <mag_icm20948_write_byte+0x38>)
    1d60:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    1d62:	220c      	movs	r2, #12
    1d64:	2103      	movs	r1, #3
    1d66:	0020      	movs	r0, r4
    1d68:	4d09      	ldr	r5, [pc, #36]	; (1d90 <mag_icm20948_write_byte+0x3c>)
    1d6a:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    1d6c:	003a      	movs	r2, r7
    1d6e:	2104      	movs	r1, #4
    1d70:	0020      	movs	r0, r4
    1d72:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    1d74:	0032      	movs	r2, r6
    1d76:	2106      	movs	r1, #6
    1d78:	0020      	movs	r0, r4
    1d7a:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    1d7c:	2281      	movs	r2, #129	; 0x81
    1d7e:	2105      	movs	r1, #5
    1d80:	0020      	movs	r0, r4
    1d82:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    1d84:	4803      	ldr	r0, [pc, #12]	; (1d94 <mag_icm20948_write_byte+0x40>)
    1d86:	4b04      	ldr	r3, [pc, #16]	; (1d98 <mag_icm20948_write_byte+0x44>)
    1d88:	4798      	blx	r3
}
    1d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d8c:	00001ca5 	.word	0x00001ca5
    1d90:	00001a69 	.word	0x00001a69
    1d94:	0000ea60 	.word	0x0000ea60
    1d98:	0000246d 	.word	0x0000246d

00001d9c <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    1d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9e:	46c6      	mov	lr, r8
    1da0:	b500      	push	{lr}
    1da2:	b082      	sub	sp, #8
    1da4:	0004      	movs	r4, r0
    1da6:	000f      	movs	r7, r1
    1da8:	0015      	movs	r5, r2
    1daa:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1dac:	2103      	movs	r1, #3
    1dae:	4e0f      	ldr	r6, [pc, #60]	; (1dec <mag_icm20948_read+0x50>)
    1db0:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    1db2:	ab01      	add	r3, sp, #4
    1db4:	228c      	movs	r2, #140	; 0x8c
    1db6:	701a      	strb	r2, [r3, #0]
    1db8:	705f      	strb	r7, [r3, #1]
    1dba:	3a0d      	subs	r2, #13
    1dbc:	3aff      	subs	r2, #255	; 0xff
    1dbe:	432a      	orrs	r2, r5
    1dc0:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    1dc2:	2203      	movs	r2, #3
    1dc4:	2103      	movs	r1, #3
    1dc6:	0020      	movs	r0, r4
    1dc8:	4f09      	ldr	r7, [pc, #36]	; (1df0 <mag_icm20948_read+0x54>)
    1dca:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    1dcc:	4809      	ldr	r0, [pc, #36]	; (1df4 <mag_icm20948_read+0x58>)
    1dce:	4b0a      	ldr	r3, [pc, #40]	; (1df8 <mag_icm20948_read+0x5c>)
    1dd0:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1dd2:	2100      	movs	r1, #0
    1dd4:	0020      	movs	r0, r4
    1dd6:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    1dd8:	4643      	mov	r3, r8
    1dda:	002a      	movs	r2, r5
    1ddc:	213b      	movs	r1, #59	; 0x3b
    1dde:	0020      	movs	r0, r4
    1de0:	4c06      	ldr	r4, [pc, #24]	; (1dfc <mag_icm20948_read+0x60>)
    1de2:	47a0      	blx	r4
}
    1de4:	b002      	add	sp, #8
    1de6:	bc80      	pop	{r7}
    1de8:	46b8      	mov	r8, r7
    1dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dec:	00001ca5 	.word	0x00001ca5
    1df0:	00001b6d 	.word	0x00001b6d
    1df4:	00001770 	.word	0x00001770
    1df8:	0000246d 	.word	0x0000246d
    1dfc:	00001c05 	.word	0x00001c05

00001e00 <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    1e00:	b570      	push	{r4, r5, r6, lr}
    1e02:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1e04:	2100      	movs	r1, #0
    1e06:	4e10      	ldr	r6, [pc, #64]	; (1e48 <mag_icm20948_init+0x48>)
    1e08:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    1e0a:	2220      	movs	r2, #32
    1e0c:	2103      	movs	r1, #3
    1e0e:	0020      	movs	r0, r4
    1e10:	4d0e      	ldr	r5, [pc, #56]	; (1e4c <mag_icm20948_init+0x4c>)
    1e12:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1e14:	2103      	movs	r1, #3
    1e16:	0020      	movs	r0, r4
    1e18:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    1e1a:	2207      	movs	r2, #7
    1e1c:	2101      	movs	r1, #1
    1e1e:	0020      	movs	r0, r4
    1e20:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    1e22:	2201      	movs	r2, #1
    1e24:	2102      	movs	r1, #2
    1e26:	0020      	movs	r0, r4
    1e28:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    1e2a:	4809      	ldr	r0, [pc, #36]	; (1e50 <mag_icm20948_init+0x50>)
    1e2c:	4b09      	ldr	r3, [pc, #36]	; (1e54 <mag_icm20948_init+0x54>)
    1e2e:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    1e30:	2201      	movs	r2, #1
    1e32:	2132      	movs	r1, #50	; 0x32
    1e34:	0020      	movs	r0, r4
    1e36:	4d08      	ldr	r5, [pc, #32]	; (1e58 <mag_icm20948_init+0x58>)
    1e38:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    1e3a:	2208      	movs	r2, #8
    1e3c:	2131      	movs	r1, #49	; 0x31
    1e3e:	0020      	movs	r0, r4
    1e40:	47a8      	blx	r5
	
	return true;
}
    1e42:	2001      	movs	r0, #1
    1e44:	bd70      	pop	{r4, r5, r6, pc}
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	00001ca5 	.word	0x00001ca5
    1e4c:	00001a69 	.word	0x00001a69
    1e50:	00001770 	.word	0x00001770
    1e54:	0000246d 	.word	0x0000246d
    1e58:	00001d55 	.word	0x00001d55

00001e5c <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1e5c:	b530      	push	{r4, r5, lr}
    1e5e:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    1e60:	ac01      	add	r4, sp, #4
    1e62:	0023      	movs	r3, r4
    1e64:	2202      	movs	r2, #2
    1e66:	2100      	movs	r1, #0
    1e68:	4d07      	ldr	r5, [pc, #28]	; (1e88 <mag_icm20948_check+0x2c>)
    1e6a:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1e6c:	7823      	ldrb	r3, [r4, #0]
    1e6e:	2b48      	cmp	r3, #72	; 0x48
    1e70:	d104      	bne.n	1e7c <mag_icm20948_check+0x20>
    1e72:	7863      	ldrb	r3, [r4, #1]
    1e74:	2b09      	cmp	r3, #9
    1e76:	d004      	beq.n	1e82 <mag_icm20948_check+0x26>
	else return false;
    1e78:	2000      	movs	r0, #0
    1e7a:	e000      	b.n	1e7e <mag_icm20948_check+0x22>
    1e7c:	2000      	movs	r0, #0
    1e7e:	b003      	add	sp, #12
    1e80:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1e82:	2001      	movs	r0, #1
    1e84:	e7fb      	b.n	1e7e <mag_icm20948_check+0x22>
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	00001d9d 	.word	0x00001d9d

00001e8c <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    1e8c:	01c0      	lsls	r0, r0, #7
    1e8e:	4b02      	ldr	r3, [pc, #8]	; (1e98 <port_set_output+0xc>)
    1e90:	469c      	mov	ip, r3
    1e92:	4460      	add	r0, ip
    1e94:	6081      	str	r1, [r0, #8]
}
    1e96:	4770      	bx	lr
    1e98:	41004400 	.word	0x41004400

00001e9c <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    1e9c:	01c0      	lsls	r0, r0, #7
    1e9e:	4b02      	ldr	r3, [pc, #8]	; (1ea8 <port_set+0xc>)
    1ea0:	469c      	mov	ip, r3
    1ea2:	4460      	add	r0, ip
    1ea4:	6181      	str	r1, [r0, #24]
}
    1ea6:	4770      	bx	lr
    1ea8:	41004400 	.word	0x41004400

00001eac <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    1eac:	01c0      	lsls	r0, r0, #7
    1eae:	4b02      	ldr	r3, [pc, #8]	; (1eb8 <port_clear+0xc>)
    1eb0:	469c      	mov	ip, r3
    1eb2:	4460      	add	r0, ip
    1eb4:	6141      	str	r1, [r0, #20]
}
    1eb6:	4770      	bx	lr
    1eb8:	41004400 	.word	0x41004400

00001ebc <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    1ebc:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    1ebe:	060b      	lsls	r3, r1, #24
    1ec0:	21f0      	movs	r1, #240	; 0xf0
    1ec2:	0509      	lsls	r1, r1, #20
    1ec4:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    1ec6:	490e      	ldr	r1, [pc, #56]	; (1f00 <port_wrconfig+0x44>)
    1ec8:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    1eca:	0413      	lsls	r3, r2, #16
    1ecc:	0c1c      	lsrs	r4, r3, #16
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d005      	beq.n	1ede <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    1ed2:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1ed4:	01c3      	lsls	r3, r0, #7
    1ed6:	4c0b      	ldr	r4, [pc, #44]	; (1f04 <port_wrconfig+0x48>)
    1ed8:	46a4      	mov	ip, r4
    1eda:	4463      	add	r3, ip
    1edc:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    1ede:	2380      	movs	r3, #128	; 0x80
    1ee0:	025b      	lsls	r3, r3, #9
    1ee2:	429a      	cmp	r2, r3
    1ee4:	d30b      	bcc.n	1efe <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    1ee6:	0c09      	lsrs	r1, r1, #16
    1ee8:	0409      	lsls	r1, r1, #16
    1eea:	2380      	movs	r3, #128	; 0x80
    1eec:	061b      	lsls	r3, r3, #24
    1eee:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    1ef0:	0c12      	lsrs	r2, r2, #16
    1ef2:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1ef4:	01c0      	lsls	r0, r0, #7
    1ef6:	4b03      	ldr	r3, [pc, #12]	; (1f04 <port_wrconfig+0x48>)
    1ef8:	469c      	mov	ip, r3
    1efa:	4460      	add	r0, ip
    1efc:	6282      	str	r2, [r0, #40]	; 0x28
	}
    1efe:	bd10      	pop	{r4, pc}
    1f00:	50010000 	.word	0x50010000
    1f04:	41004400 	.word	0x41004400

00001f08 <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    1f08:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    1f0a:	4c2a      	ldr	r4, [pc, #168]	; (1fb4 <pwm_init_tc+0xac>)
    1f0c:	42a0      	cmp	r0, r4
    1f0e:	d03c      	beq.n	1f8a <pwm_init_tc+0x82>
    1f10:	d90f      	bls.n	1f32 <pwm_init_tc+0x2a>
    1f12:	4c29      	ldr	r4, [pc, #164]	; (1fb8 <pwm_init_tc+0xb0>)
    1f14:	42a0      	cmp	r0, r4
    1f16:	d042      	beq.n	1f9e <pwm_init_tc+0x96>
    1f18:	4c28      	ldr	r4, [pc, #160]	; (1fbc <pwm_init_tc+0xb4>)
    1f1a:	42a0      	cmp	r0, r4
    1f1c:	d11b      	bne.n	1f56 <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    1f1e:	4a28      	ldr	r2, [pc, #160]	; (1fc0 <pwm_init_tc+0xb8>)
    1f20:	6a14      	ldr	r4, [r2, #32]
    1f22:	2380      	movs	r3, #128	; 0x80
    1f24:	021b      	lsls	r3, r3, #8
    1f26:	4323      	orrs	r3, r4
    1f28:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1f2a:	4b26      	ldr	r3, [pc, #152]	; (1fc4 <pwm_init_tc+0xbc>)
    1f2c:	4a26      	ldr	r2, [pc, #152]	; (1fc8 <pwm_init_tc+0xc0>)
    1f2e:	805a      	strh	r2, [r3, #2]
		break;
    1f30:	e01c      	b.n	1f6c <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1f32:	4c26      	ldr	r4, [pc, #152]	; (1fcc <pwm_init_tc+0xc4>)
    1f34:	42a0      	cmp	r0, r4
    1f36:	d010      	beq.n	1f5a <pwm_init_tc+0x52>
    1f38:	4c25      	ldr	r4, [pc, #148]	; (1fd0 <pwm_init_tc+0xc8>)
    1f3a:	42a0      	cmp	r0, r4
    1f3c:	d109      	bne.n	1f52 <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    1f3e:	4a20      	ldr	r2, [pc, #128]	; (1fc0 <pwm_init_tc+0xb8>)
    1f40:	6a14      	ldr	r4, [r2, #32]
    1f42:	2380      	movs	r3, #128	; 0x80
    1f44:	015b      	lsls	r3, r3, #5
    1f46:	4323      	orrs	r3, r4
    1f48:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1f4a:	4b1e      	ldr	r3, [pc, #120]	; (1fc4 <pwm_init_tc+0xbc>)
    1f4c:	4a21      	ldr	r2, [pc, #132]	; (1fd4 <pwm_init_tc+0xcc>)
    1f4e:	805a      	strh	r2, [r3, #2]
		break;
    1f50:	e00c      	b.n	1f6c <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1f52:	2000      	movs	r0, #0
    1f54:	e018      	b.n	1f88 <pwm_init_tc+0x80>
    1f56:	2000      	movs	r0, #0
    1f58:	e016      	b.n	1f88 <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    1f5a:	4a19      	ldr	r2, [pc, #100]	; (1fc0 <pwm_init_tc+0xb8>)
    1f5c:	6a14      	ldr	r4, [r2, #32]
    1f5e:	2380      	movs	r3, #128	; 0x80
    1f60:	011b      	lsls	r3, r3, #4
    1f62:	4323      	orrs	r3, r4
    1f64:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    1f66:	4b17      	ldr	r3, [pc, #92]	; (1fc4 <pwm_init_tc+0xbc>)
    1f68:	4a1b      	ldr	r2, [pc, #108]	; (1fd8 <pwm_init_tc+0xd0>)
    1f6a:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1f6c:	4b15      	ldr	r3, [pc, #84]	; (1fc4 <pwm_init_tc+0xbc>)
    1f6e:	785b      	ldrb	r3, [r3, #1]
    1f70:	b25b      	sxtb	r3, r3
    1f72:	2b00      	cmp	r3, #0
    1f74:	dbfa      	blt.n	1f6c <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    1f76:	020b      	lsls	r3, r1, #8
    1f78:	22e0      	movs	r2, #224	; 0xe0
    1f7a:	00d2      	lsls	r2, r2, #3
    1f7c:	4013      	ands	r3, r2
    1f7e:	2244      	movs	r2, #68	; 0x44
    1f80:	4313      	orrs	r3, r2
    1f82:	b29b      	uxth	r3, r3
    1f84:	8003      	strh	r3, [r0, #0]
	
	return true;
    1f86:	2001      	movs	r0, #1
}
    1f88:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    1f8a:	4a0d      	ldr	r2, [pc, #52]	; (1fc0 <pwm_init_tc+0xb8>)
    1f8c:	6a14      	ldr	r4, [r2, #32]
    1f8e:	2380      	movs	r3, #128	; 0x80
    1f90:	019b      	lsls	r3, r3, #6
    1f92:	4323      	orrs	r3, r4
    1f94:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1f96:	4b0b      	ldr	r3, [pc, #44]	; (1fc4 <pwm_init_tc+0xbc>)
    1f98:	4a0e      	ldr	r2, [pc, #56]	; (1fd4 <pwm_init_tc+0xcc>)
    1f9a:	805a      	strh	r2, [r3, #2]
		break;
    1f9c:	e7e6      	b.n	1f6c <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    1f9e:	4a08      	ldr	r2, [pc, #32]	; (1fc0 <pwm_init_tc+0xb8>)
    1fa0:	6a14      	ldr	r4, [r2, #32]
    1fa2:	2380      	movs	r3, #128	; 0x80
    1fa4:	01db      	lsls	r3, r3, #7
    1fa6:	4323      	orrs	r3, r4
    1fa8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1faa:	4b06      	ldr	r3, [pc, #24]	; (1fc4 <pwm_init_tc+0xbc>)
    1fac:	4a06      	ldr	r2, [pc, #24]	; (1fc8 <pwm_init_tc+0xc0>)
    1fae:	805a      	strh	r2, [r3, #2]
		break;
    1fb0:	e7dc      	b.n	1f6c <pwm_init_tc+0x64>
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	42003400 	.word	0x42003400
    1fb8:	42003800 	.word	0x42003800
    1fbc:	42003c00 	.word	0x42003c00
    1fc0:	40000400 	.word	0x40000400
    1fc4:	40000c00 	.word	0x40000c00
    1fc8:	0000401d 	.word	0x0000401d
    1fcc:	42002c00 	.word	0x42002c00
    1fd0:	42003000 	.word	0x42003000
    1fd4:	0000401c 	.word	0x0000401c
    1fd8:	0000401b 	.word	0x0000401b

00001fdc <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    1fdc:	4a0f      	ldr	r2, [pc, #60]	; (201c <STACK_SIZE+0x1c>)
    1fde:	4290      	cmp	r0, r2
    1fe0:	d010      	beq.n	2004 <STACK_SIZE+0x4>
    1fe2:	d807      	bhi.n	1ff4 <pwm_enable_tc+0x18>
    1fe4:	4a0e      	ldr	r2, [pc, #56]	; (2020 <STACK_SIZE+0x20>)
    1fe6:	4290      	cmp	r0, r2
    1fe8:	d00c      	beq.n	2004 <STACK_SIZE+0x4>
    1fea:	4a0e      	ldr	r2, [pc, #56]	; (2024 <STACK_SIZE+0x24>)
    1fec:	4290      	cmp	r0, r2
    1fee:	d009      	beq.n	2004 <STACK_SIZE+0x4>
    1ff0:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    1ff2:	4770      	bx	lr
	switch ((uint32_t)tc) {
    1ff4:	4a0c      	ldr	r2, [pc, #48]	; (2028 <STACK_SIZE+0x28>)
    1ff6:	4290      	cmp	r0, r2
    1ff8:	d004      	beq.n	2004 <STACK_SIZE+0x4>
    1ffa:	4a0c      	ldr	r2, [pc, #48]	; (202c <STACK_SIZE+0x2c>)
    1ffc:	4290      	cmp	r0, r2
    1ffe:	d001      	beq.n	2004 <STACK_SIZE+0x4>
    2000:	2000      	movs	r0, #0
    2002:	e7f6      	b.n	1ff2 <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    2004:	8803      	ldrh	r3, [r0, #0]
    2006:	2202      	movs	r2, #2
    2008:	4313      	orrs	r3, r2
    200a:	b29b      	uxth	r3, r3
    200c:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    200e:	7bc3      	ldrb	r3, [r0, #15]
    2010:	b25b      	sxtb	r3, r3
    2012:	2b00      	cmp	r3, #0
    2014:	dbfb      	blt.n	200e <STACK_SIZE+0xe>
	return true;
    2016:	2001      	movs	r0, #1
    2018:	e7eb      	b.n	1ff2 <pwm_enable_tc+0x16>
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	42003400 	.word	0x42003400
    2020:	42002c00 	.word	0x42002c00
    2024:	42003000 	.word	0x42003000
    2028:	42003800 	.word	0x42003800
    202c:	42003c00 	.word	0x42003c00

00002030 <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    2030:	2307      	movs	r3, #7
    2032:	4018      	ands	r0, r3
	switch (prescaler) {
    2034:	2807      	cmp	r0, #7
    2036:	d813      	bhi.n	2060 <pwm_get_div_val+0x30>
    2038:	0080      	lsls	r0, r0, #2
    203a:	4b0b      	ldr	r3, [pc, #44]	; (2068 <pwm_get_div_val+0x38>)
    203c:	581b      	ldr	r3, [r3, r0]
    203e:	469f      	mov	pc, r3
    2040:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    2042:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    2044:	2004      	movs	r0, #4
    2046:	e7fc      	b.n	2042 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    2048:	2008      	movs	r0, #8
    204a:	e7fa      	b.n	2042 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    204c:	2010      	movs	r0, #16
    204e:	e7f8      	b.n	2042 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    2050:	2040      	movs	r0, #64	; 0x40
    2052:	e7f6      	b.n	2042 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    2054:	2080      	movs	r0, #128	; 0x80
    2056:	0040      	lsls	r0, r0, #1
    2058:	e7f3      	b.n	2042 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    205a:	2080      	movs	r0, #128	; 0x80
    205c:	00c0      	lsls	r0, r0, #3
    205e:	e7f0      	b.n	2042 <pwm_get_div_val+0x12>
	return 0;
    2060:	2000      	movs	r0, #0
    2062:	e7ee      	b.n	2042 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    2064:	2002      	movs	r0, #2
    2066:	e7ec      	b.n	2042 <pwm_get_div_val+0x12>
    2068:	00005ab8 	.word	0x00005ab8

0000206c <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    206c:	b570      	push	{r4, r5, r6, lr}
    206e:	0004      	movs	r4, r0
    2070:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    2072:	4a16      	ldr	r2, [pc, #88]	; (20cc <pwm_set_frequency_tc+0x60>)
    2074:	4290      	cmp	r0, r2
    2076:	d010      	beq.n	209a <pwm_set_frequency_tc+0x2e>
    2078:	d807      	bhi.n	208a <pwm_set_frequency_tc+0x1e>
    207a:	4a15      	ldr	r2, [pc, #84]	; (20d0 <pwm_set_frequency_tc+0x64>)
    207c:	4290      	cmp	r0, r2
    207e:	d00c      	beq.n	209a <pwm_set_frequency_tc+0x2e>
    2080:	4a14      	ldr	r2, [pc, #80]	; (20d4 <pwm_set_frequency_tc+0x68>)
    2082:	4290      	cmp	r0, r2
    2084:	d009      	beq.n	209a <pwm_set_frequency_tc+0x2e>
    2086:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    2088:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    208a:	4a13      	ldr	r2, [pc, #76]	; (20d8 <pwm_set_frequency_tc+0x6c>)
    208c:	4290      	cmp	r0, r2
    208e:	d004      	beq.n	209a <pwm_set_frequency_tc+0x2e>
    2090:	4a12      	ldr	r2, [pc, #72]	; (20dc <pwm_set_frequency_tc+0x70>)
    2092:	4290      	cmp	r0, r2
    2094:	d001      	beq.n	209a <pwm_set_frequency_tc+0x2e>
    2096:	2000      	movs	r0, #0
    2098:	e7f6      	b.n	2088 <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    209a:	8823      	ldrh	r3, [r4, #0]
    209c:	0a1b      	lsrs	r3, r3, #8
    209e:	2007      	movs	r0, #7
    20a0:	4018      	ands	r0, r3
    20a2:	4b0f      	ldr	r3, [pc, #60]	; (20e0 <pwm_set_frequency_tc+0x74>)
    20a4:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    20a6:	4b0f      	ldr	r3, [pc, #60]	; (20e4 <pwm_set_frequency_tc+0x78>)
    20a8:	4798      	blx	r3
    20aa:	4b0f      	ldr	r3, [pc, #60]	; (20e8 <pwm_set_frequency_tc+0x7c>)
    20ac:	1c29      	adds	r1, r5, #0
    20ae:	4798      	blx	r3
    20b0:	1c01      	adds	r1, r0, #0
    20b2:	4b0e      	ldr	r3, [pc, #56]	; (20ec <pwm_set_frequency_tc+0x80>)
    20b4:	480e      	ldr	r0, [pc, #56]	; (20f0 <pwm_set_frequency_tc+0x84>)
    20b6:	4798      	blx	r3
    20b8:	4b0e      	ldr	r3, [pc, #56]	; (20f4 <pwm_set_frequency_tc+0x88>)
    20ba:	4798      	blx	r3
	if (per > 0xFF) return false;
    20bc:	28ff      	cmp	r0, #255	; 0xff
    20be:	d803      	bhi.n	20c8 <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    20c0:	b2c0      	uxtb	r0, r0
    20c2:	7520      	strb	r0, [r4, #20]
	return true;
    20c4:	2001      	movs	r0, #1
    20c6:	e7df      	b.n	2088 <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    20c8:	2000      	movs	r0, #0
    20ca:	e7dd      	b.n	2088 <pwm_set_frequency_tc+0x1c>
    20cc:	42003400 	.word	0x42003400
    20d0:	42002c00 	.word	0x42002c00
    20d4:	42003000 	.word	0x42003000
    20d8:	42003800 	.word	0x42003800
    20dc:	42003c00 	.word	0x42003c00
    20e0:	00002031 	.word	0x00002031
    20e4:	00005369 	.word	0x00005369
    20e8:	00004d89 	.word	0x00004d89
    20ec:	000049bd 	.word	0x000049bd
    20f0:	4c371b00 	.word	0x4c371b00
    20f4:	00004689 	.word	0x00004689

000020f8 <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    20f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20fa:	0004      	movs	r4, r0
    20fc:	000e      	movs	r6, r1
    20fe:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    2100:	4a1b      	ldr	r2, [pc, #108]	; (2170 <pwm_set_duty_tc+0x78>)
    2102:	4290      	cmp	r0, r2
    2104:	d010      	beq.n	2128 <pwm_set_duty_tc+0x30>
    2106:	d807      	bhi.n	2118 <pwm_set_duty_tc+0x20>
    2108:	4a1a      	ldr	r2, [pc, #104]	; (2174 <pwm_set_duty_tc+0x7c>)
    210a:	4290      	cmp	r0, r2
    210c:	d00c      	beq.n	2128 <pwm_set_duty_tc+0x30>
    210e:	4a1a      	ldr	r2, [pc, #104]	; (2178 <pwm_set_duty_tc+0x80>)
    2110:	4290      	cmp	r0, r2
    2112:	d009      	beq.n	2128 <pwm_set_duty_tc+0x30>
    2114:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    2116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    2118:	4a18      	ldr	r2, [pc, #96]	; (217c <pwm_set_duty_tc+0x84>)
    211a:	4290      	cmp	r0, r2
    211c:	d004      	beq.n	2128 <pwm_set_duty_tc+0x30>
    211e:	4a18      	ldr	r2, [pc, #96]	; (2180 <pwm_set_duty_tc+0x88>)
    2120:	4290      	cmp	r0, r2
    2122:	d001      	beq.n	2128 <pwm_set_duty_tc+0x30>
    2124:	2000      	movs	r0, #0
    2126:	e7f6      	b.n	2116 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    2128:	4b16      	ldr	r3, [pc, #88]	; (2184 <pwm_set_duty_tc+0x8c>)
    212a:	2100      	movs	r1, #0
    212c:	1c28      	adds	r0, r5, #0
    212e:	4798      	blx	r3
    2130:	2800      	cmp	r0, #0
    2132:	d11b      	bne.n	216c <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    2134:	4b14      	ldr	r3, [pc, #80]	; (2188 <pwm_set_duty_tc+0x90>)
    2136:	21fe      	movs	r1, #254	; 0xfe
    2138:	0589      	lsls	r1, r1, #22
    213a:	1c28      	adds	r0, r5, #0
    213c:	4798      	blx	r3
    213e:	2800      	cmp	r0, #0
    2140:	d001      	beq.n	2146 <pwm_set_duty_tc+0x4e>
    2142:	25fe      	movs	r5, #254	; 0xfe
    2144:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    2146:	7d27      	ldrb	r7, [r4, #20]
    2148:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    214a:	4b10      	ldr	r3, [pc, #64]	; (218c <pwm_set_duty_tc+0x94>)
    214c:	0038      	movs	r0, r7
    214e:	4798      	blx	r3
    2150:	4b0f      	ldr	r3, [pc, #60]	; (2190 <pwm_set_duty_tc+0x98>)
    2152:	1c29      	adds	r1, r5, #0
    2154:	4798      	blx	r3
    2156:	4b0f      	ldr	r3, [pc, #60]	; (2194 <pwm_set_duty_tc+0x9c>)
    2158:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    215a:	003b      	movs	r3, r7
    215c:	4287      	cmp	r7, r0
    215e:	d300      	bcc.n	2162 <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    2160:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    2162:	b2db      	uxtb	r3, r3
    2164:	19a4      	adds	r4, r4, r6
    2166:	7623      	strb	r3, [r4, #24]
	return true;
    2168:	2001      	movs	r0, #1
    216a:	e7d4      	b.n	2116 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    216c:	2500      	movs	r5, #0
    216e:	e7e1      	b.n	2134 <pwm_set_duty_tc+0x3c>
    2170:	42003400 	.word	0x42003400
    2174:	42002c00 	.word	0x42002c00
    2178:	42003000 	.word	0x42003000
    217c:	42003800 	.word	0x42003800
    2180:	42003c00 	.word	0x42003c00
    2184:	000045dd 	.word	0x000045dd
    2188:	00004605 	.word	0x00004605
    218c:	00005369 	.word	0x00005369
    2190:	00004d89 	.word	0x00004d89
    2194:	00004689 	.word	0x00004689

00002198 <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    2198:	4b11      	ldr	r3, [pc, #68]	; (21e0 <sercom_check+0x48>)
    219a:	4298      	cmp	r0, r3
    219c:	d017      	beq.n	21ce <sercom_check+0x36>
    219e:	d80c      	bhi.n	21ba <sercom_check+0x22>
    21a0:	4b10      	ldr	r3, [pc, #64]	; (21e4 <sercom_check+0x4c>)
    21a2:	4298      	cmp	r0, r3
    21a4:	d015      	beq.n	21d2 <sercom_check+0x3a>
    21a6:	4b10      	ldr	r3, [pc, #64]	; (21e8 <sercom_check+0x50>)
    21a8:	4298      	cmp	r0, r3
    21aa:	d014      	beq.n	21d6 <sercom_check+0x3e>
    21ac:	4b0f      	ldr	r3, [pc, #60]	; (21ec <sercom_check+0x54>)
    21ae:	4298      	cmp	r0, r3
    21b0:	d001      	beq.n	21b6 <sercom_check+0x1e>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    21b2:	2000      	movs	r0, #0
		break;
	}
}
    21b4:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    21b6:	2001      	movs	r0, #1
    21b8:	e7fc      	b.n	21b4 <sercom_check+0x1c>
    21ba:	4b0d      	ldr	r3, [pc, #52]	; (21f0 <sercom_check+0x58>)
    21bc:	4298      	cmp	r0, r3
    21be:	d00c      	beq.n	21da <sercom_check+0x42>
    21c0:	4b0c      	ldr	r3, [pc, #48]	; (21f4 <sercom_check+0x5c>)
    21c2:	4298      	cmp	r0, r3
    21c4:	d001      	beq.n	21ca <sercom_check+0x32>
		return false;
    21c6:	2000      	movs	r0, #0
    21c8:	e7f4      	b.n	21b4 <sercom_check+0x1c>
	switch ((uint32_t)sercom) {
    21ca:	2001      	movs	r0, #1
    21cc:	e7f2      	b.n	21b4 <sercom_check+0x1c>
    21ce:	2001      	movs	r0, #1
    21d0:	e7f0      	b.n	21b4 <sercom_check+0x1c>
    21d2:	2001      	movs	r0, #1
    21d4:	e7ee      	b.n	21b4 <sercom_check+0x1c>
    21d6:	2001      	movs	r0, #1
    21d8:	e7ec      	b.n	21b4 <sercom_check+0x1c>
    21da:	2001      	movs	r0, #1
    21dc:	e7ea      	b.n	21b4 <sercom_check+0x1c>
    21de:	46c0      	nop			; (mov r8, r8)
    21e0:	42001400 	.word	0x42001400
    21e4:	42000c00 	.word	0x42000c00
    21e8:	42001000 	.word	0x42001000
    21ec:	42000800 	.word	0x42000800
    21f0:	42001800 	.word	0x42001800
    21f4:	42001c00 	.word	0x42001c00

000021f8 <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    21f8:	4b29      	ldr	r3, [pc, #164]	; (22a0 <sercom_init+0xa8>)
    21fa:	4298      	cmp	r0, r3
    21fc:	d03d      	beq.n	227a <sercom_init+0x82>
    21fe:	d822      	bhi.n	2246 <sercom_init+0x4e>
    2200:	4b28      	ldr	r3, [pc, #160]	; (22a4 <sercom_init+0xac>)
    2202:	4298      	cmp	r0, r3
    2204:	d030      	beq.n	2268 <sercom_init+0x70>
    2206:	4b28      	ldr	r3, [pc, #160]	; (22a8 <sercom_init+0xb0>)
    2208:	4298      	cmp	r0, r3
    220a:	d108      	bne.n	221e <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    220c:	4a27      	ldr	r2, [pc, #156]	; (22ac <sercom_init+0xb4>)
    220e:	6a13      	ldr	r3, [r2, #32]
    2210:	2110      	movs	r1, #16
    2212:	430b      	orrs	r3, r1
    2214:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    2216:	4b26      	ldr	r3, [pc, #152]	; (22b0 <sercom_init+0xb8>)
    2218:	4a26      	ldr	r2, [pc, #152]	; (22b4 <sercom_init+0xbc>)
    221a:	805a      	strh	r2, [r3, #2]
		break;
    221c:	e00a      	b.n	2234 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    221e:	4b26      	ldr	r3, [pc, #152]	; (22b8 <sercom_init+0xc0>)
    2220:	4298      	cmp	r0, r3
    2222:	d10e      	bne.n	2242 <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    2224:	4a21      	ldr	r2, [pc, #132]	; (22ac <sercom_init+0xb4>)
    2226:	6a13      	ldr	r3, [r2, #32]
    2228:	2104      	movs	r1, #4
    222a:	430b      	orrs	r3, r1
    222c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    222e:	4b20      	ldr	r3, [pc, #128]	; (22b0 <sercom_init+0xb8>)
    2230:	4a22      	ldr	r2, [pc, #136]	; (22bc <sercom_init+0xc4>)
    2232:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2234:	4b1e      	ldr	r3, [pc, #120]	; (22b0 <sercom_init+0xb8>)
    2236:	785b      	ldrb	r3, [r3, #1]
    2238:	b25b      	sxtb	r3, r3
    223a:	2b00      	cmp	r3, #0
    223c:	dbfa      	blt.n	2234 <sercom_init+0x3c>
	
	return true;
    223e:	2001      	movs	r0, #1
    2240:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    2242:	2000      	movs	r0, #0
    2244:	e7fc      	b.n	2240 <sercom_init+0x48>
    2246:	4b1e      	ldr	r3, [pc, #120]	; (22c0 <sercom_init+0xc8>)
    2248:	4298      	cmp	r0, r3
    224a:	d01f      	beq.n	228c <sercom_init+0x94>
    224c:	4b1d      	ldr	r3, [pc, #116]	; (22c4 <sercom_init+0xcc>)
    224e:	4298      	cmp	r0, r3
    2250:	d108      	bne.n	2264 <sercom_init+0x6c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    2252:	4a16      	ldr	r2, [pc, #88]	; (22ac <sercom_init+0xb4>)
    2254:	6a13      	ldr	r3, [r2, #32]
    2256:	2180      	movs	r1, #128	; 0x80
    2258:	430b      	orrs	r3, r1
    225a:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    225c:	4b14      	ldr	r3, [pc, #80]	; (22b0 <sercom_init+0xb8>)
    225e:	4a1a      	ldr	r2, [pc, #104]	; (22c8 <sercom_init+0xd0>)
    2260:	805a      	strh	r2, [r3, #2]
		break;
    2262:	e7e7      	b.n	2234 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    2264:	2000      	movs	r0, #0
    2266:	e7eb      	b.n	2240 <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    2268:	4a10      	ldr	r2, [pc, #64]	; (22ac <sercom_init+0xb4>)
    226a:	6a13      	ldr	r3, [r2, #32]
    226c:	2108      	movs	r1, #8
    226e:	430b      	orrs	r3, r1
    2270:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    2272:	4b0f      	ldr	r3, [pc, #60]	; (22b0 <sercom_init+0xb8>)
    2274:	4a15      	ldr	r2, [pc, #84]	; (22cc <sercom_init+0xd4>)
    2276:	805a      	strh	r2, [r3, #2]
		break;
    2278:	e7dc      	b.n	2234 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    227a:	4a0c      	ldr	r2, [pc, #48]	; (22ac <sercom_init+0xb4>)
    227c:	6a13      	ldr	r3, [r2, #32]
    227e:	2120      	movs	r1, #32
    2280:	430b      	orrs	r3, r1
    2282:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    2284:	4b0a      	ldr	r3, [pc, #40]	; (22b0 <sercom_init+0xb8>)
    2286:	4a12      	ldr	r2, [pc, #72]	; (22d0 <sercom_init+0xd8>)
    2288:	805a      	strh	r2, [r3, #2]
		break;
    228a:	e7d3      	b.n	2234 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    228c:	4a07      	ldr	r2, [pc, #28]	; (22ac <sercom_init+0xb4>)
    228e:	6a13      	ldr	r3, [r2, #32]
    2290:	2140      	movs	r1, #64	; 0x40
    2292:	430b      	orrs	r3, r1
    2294:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    2296:	4b06      	ldr	r3, [pc, #24]	; (22b0 <sercom_init+0xb8>)
    2298:	4a0e      	ldr	r2, [pc, #56]	; (22d4 <sercom_init+0xdc>)
    229a:	805a      	strh	r2, [r3, #2]
		break;
    229c:	e7ca      	b.n	2234 <sercom_init+0x3c>
    229e:	46c0      	nop			; (mov r8, r8)
    22a0:	42001400 	.word	0x42001400
    22a4:	42000c00 	.word	0x42000c00
    22a8:	42001000 	.word	0x42001000
    22ac:	40000400 	.word	0x40000400
    22b0:	40000c00 	.word	0x40000c00
    22b4:	00004016 	.word	0x00004016
    22b8:	42000800 	.word	0x42000800
    22bc:	00004014 	.word	0x00004014
    22c0:	42001800 	.word	0x42001800
    22c4:	42001c00 	.word	0x42001c00
    22c8:	00004019 	.word	0x00004019
    22cc:	00004015 	.word	0x00004015
    22d0:	00004017 	.word	0x00004017
    22d4:	00004018 	.word	0x00004018

000022d8 <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    22d8:	b570      	push	{r4, r5, r6, lr}
    22da:	0006      	movs	r6, r0
    22dc:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    22de:	4b0a      	ldr	r3, [pc, #40]	; (2308 <spi_set_baud+0x30>)
    22e0:	4798      	blx	r3
    22e2:	1e04      	subs	r4, r0, #0
    22e4:	d00e      	beq.n	2304 <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    22e6:	0068      	lsls	r0, r5, #1
    22e8:	4b08      	ldr	r3, [pc, #32]	; (230c <spi_set_baud+0x34>)
    22ea:	4798      	blx	r3
    22ec:	1c01      	adds	r1, r0, #0
    22ee:	4b08      	ldr	r3, [pc, #32]	; (2310 <spi_set_baud+0x38>)
    22f0:	4808      	ldr	r0, [pc, #32]	; (2314 <spi_set_baud+0x3c>)
    22f2:	4798      	blx	r3
    22f4:	4b08      	ldr	r3, [pc, #32]	; (2318 <spi_set_baud+0x40>)
    22f6:	21fe      	movs	r1, #254	; 0xfe
    22f8:	0589      	lsls	r1, r1, #22
    22fa:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    22fc:	4b07      	ldr	r3, [pc, #28]	; (231c <spi_set_baud+0x44>)
    22fe:	4798      	blx	r3
    2300:	b2c0      	uxtb	r0, r0
    2302:	7330      	strb	r0, [r6, #12]
	return true;
}
    2304:	0020      	movs	r0, r4
    2306:	bd70      	pop	{r4, r5, r6, pc}
    2308:	00002199 	.word	0x00002199
    230c:	00005401 	.word	0x00005401
    2310:	000049bd 	.word	0x000049bd
    2314:	4c371b00 	.word	0x4c371b00
    2318:	00005005 	.word	0x00005005
    231c:	00004689 	.word	0x00004689

00002320 <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    2320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2322:	46ce      	mov	lr, r9
    2324:	4647      	mov	r7, r8
    2326:	b580      	push	{r7, lr}
    2328:	0004      	movs	r4, r0
    232a:	000d      	movs	r5, r1
    232c:	0017      	movs	r7, r2
    232e:	001e      	movs	r6, r3
    2330:	ab08      	add	r3, sp, #32
    2332:	781b      	ldrb	r3, [r3, #0]
    2334:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    2336:	4b12      	ldr	r3, [pc, #72]	; (2380 <spi_init+0x60>)
    2338:	4798      	blx	r3
    233a:	4680      	mov	r8, r0
    233c:	2800      	cmp	r0, #0
    233e:	d104      	bne.n	234a <spi_init+0x2a>
}
    2340:	4640      	mov	r0, r8
    2342:	bcc0      	pop	{r6, r7}
    2344:	46b9      	mov	r9, r7
    2346:	46b0      	mov	r8, r6
    2348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    234a:	076d      	lsls	r5, r5, #29
    234c:	073f      	lsls	r7, r7, #28
    234e:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2350:	0536      	lsls	r6, r6, #20
    2352:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    2354:	464b      	mov	r3, r9
    2356:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2358:	431d      	orrs	r5, r3
    235a:	230c      	movs	r3, #12
    235c:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    235e:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    2360:	2380      	movs	r3, #128	; 0x80
    2362:	029b      	lsls	r3, r3, #10
    2364:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    2366:	9909      	ldr	r1, [sp, #36]	; 0x24
    2368:	0020      	movs	r0, r4
    236a:	4b06      	ldr	r3, [pc, #24]	; (2384 <spi_init+0x64>)
    236c:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    236e:	6823      	ldr	r3, [r4, #0]
    2370:	2202      	movs	r2, #2
    2372:	4313      	orrs	r3, r2
    2374:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    2376:	69e3      	ldr	r3, [r4, #28]
    2378:	079b      	lsls	r3, r3, #30
    237a:	d4fc      	bmi.n	2376 <spi_init+0x56>
    237c:	e7e0      	b.n	2340 <spi_init+0x20>
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	000021f9 	.word	0x000021f9
    2384:	000022d9 	.word	0x000022d9

00002388 <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    2388:	7e03      	ldrb	r3, [r0, #24]
    238a:	07db      	lsls	r3, r3, #31
    238c:	d5fc      	bpl.n	2388 <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    238e:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    2390:	7e03      	ldrb	r3, [r0, #24]
    2392:	079b      	lsls	r3, r3, #30
    2394:	d5fc      	bpl.n	2390 <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    2396:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2398:	b2c0      	uxtb	r0, r0
}
    239a:	4770      	bx	lr

0000239c <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    239c:	e000      	b.n	23a0 <spi_flush+0x4>
    239e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    23a0:	7e03      	ldrb	r3, [r0, #24]
    23a2:	075b      	lsls	r3, r3, #29
    23a4:	d4fb      	bmi.n	239e <spi_flush+0x2>
    23a6:	4770      	bx	lr

000023a8 <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    23a8:	4a27      	ldr	r2, [pc, #156]	; (2448 <set_clock_48m+0xa0>)
    23aa:	6853      	ldr	r3, [r2, #4]
    23ac:	2102      	movs	r1, #2
    23ae:	430b      	orrs	r3, r1
    23b0:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    23b2:	4a26      	ldr	r2, [pc, #152]	; (244c <set_clock_48m+0xa4>)
    23b4:	4b26      	ldr	r3, [pc, #152]	; (2450 <set_clock_48m+0xa8>)
    23b6:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    23b8:	8a93      	ldrh	r3, [r2, #20]
    23ba:	430b      	orrs	r3, r1
    23bc:	b29b      	uxth	r3, r3
    23be:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    23c0:	4b22      	ldr	r3, [pc, #136]	; (244c <set_clock_48m+0xa4>)
    23c2:	68db      	ldr	r3, [r3, #12]
    23c4:	079b      	lsls	r3, r3, #30
    23c6:	d5fb      	bpl.n	23c0 <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    23c8:	4b22      	ldr	r3, [pc, #136]	; (2454 <set_clock_48m+0xac>)
    23ca:	2202      	movs	r2, #2
    23cc:	32ff      	adds	r2, #255	; 0xff
    23ce:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    23d0:	4a21      	ldr	r2, [pc, #132]	; (2458 <set_clock_48m+0xb0>)
    23d2:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    23d4:	4b1f      	ldr	r3, [pc, #124]	; (2454 <set_clock_48m+0xac>)
    23d6:	785b      	ldrb	r3, [r3, #1]
    23d8:	b25b      	sxtb	r3, r3
    23da:	2b00      	cmp	r3, #0
    23dc:	dbfa      	blt.n	23d4 <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    23de:	4b1d      	ldr	r3, [pc, #116]	; (2454 <set_clock_48m+0xac>)
    23e0:	2282      	movs	r2, #130	; 0x82
    23e2:	01d2      	lsls	r2, r2, #7
    23e4:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    23e6:	4b19      	ldr	r3, [pc, #100]	; (244c <set_clock_48m+0xa4>)
    23e8:	68db      	ldr	r3, [r3, #12]
    23ea:	06db      	lsls	r3, r3, #27
    23ec:	d5fb      	bpl.n	23e6 <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    23ee:	4b17      	ldr	r3, [pc, #92]	; (244c <set_clock_48m+0xa4>)
    23f0:	2202      	movs	r2, #2
    23f2:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    23f4:	4b15      	ldr	r3, [pc, #84]	; (244c <set_clock_48m+0xa4>)
    23f6:	68db      	ldr	r3, [r3, #12]
    23f8:	06db      	lsls	r3, r3, #27
    23fa:	d5fb      	bpl.n	23f4 <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    23fc:	4b13      	ldr	r3, [pc, #76]	; (244c <set_clock_48m+0xa4>)
    23fe:	4a17      	ldr	r2, [pc, #92]	; (245c <set_clock_48m+0xb4>)
    2400:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2402:	4b12      	ldr	r3, [pc, #72]	; (244c <set_clock_48m+0xa4>)
    2404:	68db      	ldr	r3, [r3, #12]
    2406:	06db      	lsls	r3, r3, #27
    2408:	d5fb      	bpl.n	2402 <set_clock_48m+0x5a>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    240a:	4b15      	ldr	r3, [pc, #84]	; (2460 <set_clock_48m+0xb8>)
    240c:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    240e:	4b0f      	ldr	r3, [pc, #60]	; (244c <set_clock_48m+0xa4>)
    2410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2412:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2414:	4b0d      	ldr	r3, [pc, #52]	; (244c <set_clock_48m+0xa4>)
    2416:	68db      	ldr	r3, [r3, #12]
    2418:	06db      	lsls	r3, r3, #27
    241a:	d5fb      	bpl.n	2414 <set_clock_48m+0x6c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    241c:	4a0b      	ldr	r2, [pc, #44]	; (244c <set_clock_48m+0xa4>)
    241e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2420:	4910      	ldr	r1, [pc, #64]	; (2464 <set_clock_48m+0xbc>)
    2422:	430b      	orrs	r3, r1
    2424:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    2426:	4b09      	ldr	r3, [pc, #36]	; (244c <set_clock_48m+0xa4>)
    2428:	68db      	ldr	r3, [r3, #12]
    242a:	061b      	lsls	r3, r3, #24
    242c:	d5fb      	bpl.n	2426 <set_clock_48m+0x7e>
    242e:	4b07      	ldr	r3, [pc, #28]	; (244c <set_clock_48m+0xa4>)
    2430:	68db      	ldr	r3, [r3, #12]
    2432:	065b      	lsls	r3, r3, #25
    2434:	d5f7      	bpl.n	2426 <set_clock_48m+0x7e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    2436:	4b07      	ldr	r3, [pc, #28]	; (2454 <set_clock_48m+0xac>)
    2438:	4a0b      	ldr	r2, [pc, #44]	; (2468 <set_clock_48m+0xc0>)
    243a:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    243c:	4b05      	ldr	r3, [pc, #20]	; (2454 <set_clock_48m+0xac>)
    243e:	785b      	ldrb	r3, [r3, #1]
    2440:	b25b      	sxtb	r3, r3
    2442:	2b00      	cmp	r3, #0
    2444:	dbfa      	blt.n	243c <set_clock_48m+0x94>
}
    2446:	4770      	bx	lr
    2448:	41004000 	.word	0x41004000
    244c:	40000800 	.word	0x40000800
    2450:	0000040c 	.word	0x0000040c
    2454:	40000c00 	.word	0x40000c00
    2458:	00030501 	.word	0x00030501
    245c:	7dff05b9 	.word	0x7dff05b9
    2460:	00806020 	.word	0x00806020
    2464:	00000806 	.word	0x00000806
    2468:	00030700 	.word	0x00030700

0000246c <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    246c:	3801      	subs	r0, #1
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	46c0      	nop			; (mov r8, r8)
    2472:	46c0      	nop			; (mov r8, r8)
    2474:	46c0      	nop			; (mov r8, r8)
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	d1f8      	bne.n	246c <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    247a:	4770      	bx	lr

0000247c <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    247c:	4a14      	ldr	r2, [pc, #80]	; (24d0 <init_timer+0x54>)
    247e:	6a11      	ldr	r1, [r2, #32]
    2480:	2380      	movs	r3, #128	; 0x80
    2482:	015b      	lsls	r3, r3, #5
    2484:	430b      	orrs	r3, r1
    2486:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    2488:	4b12      	ldr	r3, [pc, #72]	; (24d4 <init_timer+0x58>)
    248a:	4a13      	ldr	r2, [pc, #76]	; (24d8 <init_timer+0x5c>)
    248c:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    248e:	4b11      	ldr	r3, [pc, #68]	; (24d4 <init_timer+0x58>)
    2490:	785b      	ldrb	r3, [r3, #1]
    2492:	b25b      	sxtb	r3, r3
    2494:	2b00      	cmp	r3, #0
    2496:	dbfa      	blt.n	248e <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    2498:	4b10      	ldr	r3, [pc, #64]	; (24dc <init_timer+0x60>)
    249a:	2208      	movs	r2, #8
    249c:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    249e:	4b0f      	ldr	r3, [pc, #60]	; (24dc <init_timer+0x60>)
    24a0:	7bdb      	ldrb	r3, [r3, #15]
    24a2:	b25b      	sxtb	r3, r3
    24a4:	2b00      	cmp	r3, #0
    24a6:	dbfa      	blt.n	249e <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    24a8:	4a0c      	ldr	r2, [pc, #48]	; (24dc <init_timer+0x60>)
    24aa:	8813      	ldrh	r3, [r2, #0]
    24ac:	2102      	movs	r1, #2
    24ae:	430b      	orrs	r3, r1
    24b0:	b29b      	uxth	r3, r3
    24b2:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    24b4:	4b09      	ldr	r3, [pc, #36]	; (24dc <init_timer+0x60>)
    24b6:	7bdb      	ldrb	r3, [r3, #15]
    24b8:	b25b      	sxtb	r3, r3
    24ba:	2b00      	cmp	r3, #0
    24bc:	dbfa      	blt.n	24b4 <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    24be:	4b07      	ldr	r3, [pc, #28]	; (24dc <init_timer+0x60>)
    24c0:	4a07      	ldr	r2, [pc, #28]	; (24e0 <init_timer+0x64>)
    24c2:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    24c4:	4b05      	ldr	r3, [pc, #20]	; (24dc <init_timer+0x60>)
    24c6:	7bdb      	ldrb	r3, [r3, #15]
    24c8:	b25b      	sxtb	r3, r3
    24ca:	2b00      	cmp	r3, #0
    24cc:	dbfa      	blt.n	24c4 <init_timer+0x48>
}
    24ce:	4770      	bx	lr
    24d0:	40000400 	.word	0x40000400
    24d4:	40000c00 	.word	0x40000c00
    24d8:	0000401c 	.word	0x0000401c
    24dc:	42003000 	.word	0x42003000
    24e0:	00004010 	.word	0x00004010

000024e4 <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    24e4:	4b01      	ldr	r3, [pc, #4]	; (24ec <read_timer_20ns+0x8>)
    24e6:	6918      	ldr	r0, [r3, #16]
}
    24e8:	4770      	bx	lr
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	42003000 	.word	0x42003000

000024f0 <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    24f0:	4b04      	ldr	r3, [pc, #16]	; (2504 <init_timer_interrupt+0x14>)
    24f2:	2210      	movs	r2, #16
    24f4:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    24f6:	4b03      	ldr	r3, [pc, #12]	; (2504 <init_timer_interrupt+0x14>)
    24f8:	7bdb      	ldrb	r3, [r3, #15]
    24fa:	b25b      	sxtb	r3, r3
    24fc:	2b00      	cmp	r3, #0
    24fe:	dbfa      	blt.n	24f6 <init_timer_interrupt+0x6>
}
    2500:	4770      	bx	lr
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	42003000 	.word	0x42003000

00002508 <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2508:	4b02      	ldr	r3, [pc, #8]	; (2514 <timer_enable_interrupt+0xc>)
    250a:	2280      	movs	r2, #128	; 0x80
    250c:	0312      	lsls	r2, r2, #12
    250e:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    2510:	4770      	bx	lr
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	e000e100 	.word	0xe000e100

00002518 <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2518:	4a04      	ldr	r2, [pc, #16]	; (252c <timer_disable_interrupt+0x14>)
    251a:	2380      	movs	r3, #128	; 0x80
    251c:	2180      	movs	r1, #128	; 0x80
    251e:	0309      	lsls	r1, r1, #12
    2520:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2522:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2526:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    252a:	4770      	bx	lr
    252c:	e000e100 	.word	0xe000e100

00002530 <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    2530:	4b04      	ldr	r3, [pc, #16]	; (2544 <timer_clear_interrupt+0x14>)
    2532:	2210      	movs	r2, #16
    2534:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2536:	4a04      	ldr	r2, [pc, #16]	; (2548 <timer_clear_interrupt+0x18>)
    2538:	23c0      	movs	r3, #192	; 0xc0
    253a:	005b      	lsls	r3, r3, #1
    253c:	2180      	movs	r1, #128	; 0x80
    253e:	0309      	lsls	r1, r1, #12
    2540:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    2542:	4770      	bx	lr
    2544:	42003000 	.word	0x42003000
    2548:	e000e100 	.word	0xe000e100

0000254c <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    254c:	4a02      	ldr	r2, [pc, #8]	; (2558 <timer_set_interrupt_time+0xc>)
    254e:	6993      	ldr	r3, [r2, #24]
    2550:	4303      	orrs	r3, r0
    2552:	6193      	str	r3, [r2, #24]
    2554:	4770      	bx	lr
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	42003000 	.word	0x42003000

0000255c <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    255c:	b570      	push	{r4, r5, r6, lr}
    255e:	0006      	movs	r6, r0
    2560:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    2562:	4b10      	ldr	r3, [pc, #64]	; (25a4 <uart_set_baud+0x48>)
    2564:	4798      	blx	r3
    2566:	1e04      	subs	r4, r0, #0
    2568:	d018      	beq.n	259c <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    256a:	4b0f      	ldr	r3, [pc, #60]	; (25a8 <uart_set_baud+0x4c>)
    256c:	429d      	cmp	r5, r3
    256e:	d817      	bhi.n	25a0 <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    2570:	4b0e      	ldr	r3, [pc, #56]	; (25ac <uart_set_baud+0x50>)
    2572:	0028      	movs	r0, r5
    2574:	4798      	blx	r3
    2576:	4b0e      	ldr	r3, [pc, #56]	; (25b0 <uart_set_baud+0x54>)
    2578:	490e      	ldr	r1, [pc, #56]	; (25b4 <uart_set_baud+0x58>)
    257a:	4798      	blx	r3
    257c:	4d0e      	ldr	r5, [pc, #56]	; (25b8 <uart_set_baud+0x5c>)
    257e:	2183      	movs	r1, #131	; 0x83
    2580:	05c9      	lsls	r1, r1, #23
    2582:	47a8      	blx	r5
    2584:	1c01      	adds	r1, r0, #0
    2586:	4b0d      	ldr	r3, [pc, #52]	; (25bc <uart_set_baud+0x60>)
    2588:	20fe      	movs	r0, #254	; 0xfe
    258a:	0580      	lsls	r0, r0, #22
    258c:	4798      	blx	r3
    258e:	218f      	movs	r1, #143	; 0x8f
    2590:	05c9      	lsls	r1, r1, #23
    2592:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    2594:	4b0a      	ldr	r3, [pc, #40]	; (25c0 <uart_set_baud+0x64>)
    2596:	4798      	blx	r3
    2598:	b280      	uxth	r0, r0
    259a:	81b0      	strh	r0, [r6, #12]
    return true;
}
    259c:	0020      	movs	r0, r4
    259e:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    25a0:	2400      	movs	r4, #0
    25a2:	e7fb      	b.n	259c <uart_set_baud+0x40>
    25a4:	00002199 	.word	0x00002199
    25a8:	002dc6c0 	.word	0x002dc6c0
    25ac:	00005401 	.word	0x00005401
    25b0:	000049bd 	.word	0x000049bd
    25b4:	4c371b00 	.word	0x4c371b00
    25b8:	00004d89 	.word	0x00004d89
    25bc:	00005005 	.word	0x00005005
    25c0:	00004689 	.word	0x00004689

000025c4 <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    25c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25c6:	0004      	movs	r4, r0
    25c8:	000e      	movs	r6, r1
    25ca:	0017      	movs	r7, r2
    25cc:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    25ce:	4b11      	ldr	r3, [pc, #68]	; (2614 <uart_init+0x50>)
    25d0:	4798      	blx	r3
    25d2:	2800      	cmp	r0, #0
    25d4:	d01c      	beq.n	2610 <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    25d6:	0536      	lsls	r6, r6, #20
    25d8:	23c0      	movs	r3, #192	; 0xc0
    25da:	039b      	lsls	r3, r3, #14
    25dc:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    25de:	043f      	lsls	r7, r7, #16
    25e0:	22c0      	movs	r2, #192	; 0xc0
    25e2:	0292      	lsls	r2, r2, #10
    25e4:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    25e6:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    25e8:	4b0b      	ldr	r3, [pc, #44]	; (2618 <uart_init+0x54>)
    25ea:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    25ec:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    25ee:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    25f0:	69e2      	ldr	r2, [r4, #28]
    25f2:	0752      	lsls	r2, r2, #29
    25f4:	d4fc      	bmi.n	25f0 <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    25f6:	0029      	movs	r1, r5
    25f8:	0020      	movs	r0, r4
    25fa:	4b08      	ldr	r3, [pc, #32]	; (261c <uart_init+0x58>)
    25fc:	4798      	blx	r3
    25fe:	2800      	cmp	r0, #0
    2600:	d006      	beq.n	2610 <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    2602:	6823      	ldr	r3, [r4, #0]
    2604:	2202      	movs	r2, #2
    2606:	4313      	orrs	r3, r2
    2608:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    260a:	69e3      	ldr	r3, [r4, #28]
    260c:	079b      	lsls	r3, r3, #30
    260e:	d4fc      	bmi.n	260a <uart_init+0x46>
}
    2610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	000021f9 	.word	0x000021f9
    2618:	40000004 	.word	0x40000004
    261c:	0000255d 	.word	0x0000255d

00002620 <uart_flush>:

void uart_flush(sercom_registers_t* sercom) {
    while (sercom->USART_INT.SERCOM_INTFLAG & SERCOM_USART_INT_INTFLAG_RXC_Msk) sercom->USART_INT.SERCOM_DATA;
    2620:	e000      	b.n	2624 <uart_flush+0x4>
    2622:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2624:	7e03      	ldrb	r3, [r0, #24]
    2626:	075b      	lsls	r3, r3, #29
    2628:	d4fb      	bmi.n	2622 <uart_flush+0x2>
}
    262a:	4770      	bx	lr

0000262c <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    262c:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    262e:	4b10      	ldr	r3, [pc, #64]	; (2670 <usb_ep0_in_multi+0x44>)
    2630:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    2632:	2c40      	cmp	r4, #64	; 0x40
    2634:	d900      	bls.n	2638 <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    2636:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    2638:	0026      	movs	r6, r4
    263a:	4b0d      	ldr	r3, [pc, #52]	; (2670 <usb_ep0_in_multi+0x44>)
    263c:	1d1d      	adds	r5, r3, #4
    263e:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2640:	0022      	movs	r2, r4
    2642:	0028      	movs	r0, r5
    2644:	4b0b      	ldr	r3, [pc, #44]	; (2674 <usb_ep0_in_multi+0x48>)
    2646:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    2648:	2300      	movs	r3, #0
    264a:	0022      	movs	r2, r4
    264c:	0029      	movs	r1, r5
    264e:	2080      	movs	r0, #128	; 0x80
    2650:	4d09      	ldr	r5, [pc, #36]	; (2678 <usb_ep0_in_multi+0x4c>)
    2652:	47a8      	blx	r5

	if (tsize == 0) {
    2654:	2c00      	cmp	r4, #0
    2656:	d007      	beq.n	2668 <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    2658:	4b05      	ldr	r3, [pc, #20]	; (2670 <usb_ep0_in_multi+0x44>)
    265a:	881a      	ldrh	r2, [r3, #0]
    265c:	1b12      	subs	r2, r2, r4
    265e:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    2660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2662:	1992      	adds	r2, r2, r6
    2664:	645a      	str	r2, [r3, #68]	; 0x44
}
    2666:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    2668:	4b04      	ldr	r3, [pc, #16]	; (267c <usb_ep0_in_multi+0x50>)
    266a:	4798      	blx	r3
    266c:	e7f4      	b.n	2658 <usb_ep0_in_multi+0x2c>
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	200004a8 	.word	0x200004a8
    2674:	000055b9 	.word	0x000055b9
    2678:	00002b3d 	.word	0x00002b3d
    267c:	00002c45 	.word	0x00002c45

00002680 <usb_handle_setup>:

void usb_handle_setup(void){
    2680:	b510      	push	{r4, lr}
    2682:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    2684:	4b40      	ldr	r3, [pc, #256]	; (2788 <usb_handle_setup+0x108>)
    2686:	2248      	movs	r2, #72	; 0x48
    2688:	5c9b      	ldrb	r3, [r3, r2]
    268a:	3218      	adds	r2, #24
    268c:	421a      	tst	r2, r3
    268e:	d177      	bne.n	2780 <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    2690:	4b3e      	ldr	r3, [pc, #248]	; (278c <usb_handle_setup+0x10c>)
    2692:	785b      	ldrb	r3, [r3, #1]
    2694:	2b0b      	cmp	r3, #11
    2696:	d870      	bhi.n	277a <usb_handle_setup+0xfa>
    2698:	009b      	lsls	r3, r3, #2
    269a:	4a3d      	ldr	r2, [pc, #244]	; (2790 <usb_handle_setup+0x110>)
    269c:	58d3      	ldr	r3, [r2, r3]
    269e:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    26a0:	4b39      	ldr	r3, [pc, #228]	; (2788 <usb_handle_setup+0x108>)
    26a2:	2200      	movs	r2, #0
    26a4:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    26a6:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    26a8:	2002      	movs	r0, #2
    26aa:	4b3a      	ldr	r3, [pc, #232]	; (2794 <usb_handle_setup+0x114>)
    26ac:	4798      	blx	r3
				return usb_ep0_out();
    26ae:	4b3a      	ldr	r3, [pc, #232]	; (2798 <usb_handle_setup+0x118>)
    26b0:	4798      	blx	r3
    26b2:	e067      	b.n	2784 <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    26b4:	2000      	movs	r0, #0
    26b6:	4b37      	ldr	r3, [pc, #220]	; (2794 <usb_handle_setup+0x114>)
    26b8:	4798      	blx	r3
				return usb_ep0_out();
    26ba:	4b37      	ldr	r3, [pc, #220]	; (2798 <usb_handle_setup+0x118>)
    26bc:	4798      	blx	r3
    26be:	e061      	b.n	2784 <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    26c0:	2000      	movs	r0, #0
    26c2:	4b34      	ldr	r3, [pc, #208]	; (2794 <usb_handle_setup+0x114>)
    26c4:	4798      	blx	r3
				return usb_ep0_out();
    26c6:	4b34      	ldr	r3, [pc, #208]	; (2798 <usb_handle_setup+0x118>)
    26c8:	4798      	blx	r3
    26ca:	e05b      	b.n	2784 <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    26cc:	4b2f      	ldr	r3, [pc, #188]	; (278c <usb_handle_setup+0x10c>)
    26ce:	8859      	ldrh	r1, [r3, #2]
    26d0:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    26d2:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    26d4:	2300      	movs	r3, #0
    26d6:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    26d8:	aa01      	add	r2, sp, #4
    26da:	4b30      	ldr	r3, [pc, #192]	; (279c <usb_handle_setup+0x11c>)
    26dc:	4798      	blx	r3

				if (size && descriptor){
    26de:	2800      	cmp	r0, #0
    26e0:	d019      	beq.n	2716 <usb_handle_setup+0x96>
    26e2:	9901      	ldr	r1, [sp, #4]
    26e4:	2900      	cmp	r1, #0
    26e6:	d016      	beq.n	2716 <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    26e8:	4a28      	ldr	r2, [pc, #160]	; (278c <usb_handle_setup+0x10c>)
    26ea:	88d2      	ldrh	r2, [r2, #6]
    26ec:	4282      	cmp	r2, r0
    26ee:	d300      	bcc.n	26f2 <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    26f0:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    26f2:	4b2b      	ldr	r3, [pc, #172]	; (27a0 <usb_handle_setup+0x120>)
    26f4:	4299      	cmp	r1, r3
    26f6:	d005      	beq.n	2704 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    26f8:	4b23      	ldr	r3, [pc, #140]	; (2788 <usb_handle_setup+0x108>)
    26fa:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    26fc:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    26fe:	4b29      	ldr	r3, [pc, #164]	; (27a4 <usb_handle_setup+0x124>)
    2700:	4798      	blx	r3
					}

					return;
    2702:	e03f      	b.n	2784 <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    2704:	4920      	ldr	r1, [pc, #128]	; (2788 <usb_handle_setup+0x108>)
    2706:	2300      	movs	r3, #0
    2708:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    270a:	3104      	adds	r1, #4
    270c:	3301      	adds	r3, #1
    270e:	2080      	movs	r0, #128	; 0x80
    2710:	4c25      	ldr	r4, [pc, #148]	; (27a8 <usb_handle_setup+0x128>)
    2712:	47a0      	blx	r4
    2714:	e036      	b.n	2784 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2716:	4b25      	ldr	r3, [pc, #148]	; (27ac <usb_handle_setup+0x12c>)
    2718:	4798      	blx	r3
    271a:	e033      	b.n	2784 <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    271c:	4b1a      	ldr	r3, [pc, #104]	; (2788 <usb_handle_setup+0x108>)
    271e:	2250      	movs	r2, #80	; 0x50
    2720:	5c9a      	ldrb	r2, [r3, r2]
    2722:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    2724:	2001      	movs	r0, #1
    2726:	4b1b      	ldr	r3, [pc, #108]	; (2794 <usb_handle_setup+0x114>)
    2728:	4798      	blx	r3
				return usb_ep0_out();
    272a:	4b1b      	ldr	r3, [pc, #108]	; (2798 <usb_handle_setup+0x118>)
    272c:	4798      	blx	r3
    272e:	e029      	b.n	2784 <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    2730:	4b16      	ldr	r3, [pc, #88]	; (278c <usb_handle_setup+0x10c>)
    2732:	7898      	ldrb	r0, [r3, #2]
    2734:	4b1e      	ldr	r3, [pc, #120]	; (27b0 <usb_handle_setup+0x130>)
    2736:	4798      	blx	r3
    2738:	2800      	cmp	r0, #0
    273a:	d00b      	beq.n	2754 <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    273c:	2000      	movs	r0, #0
    273e:	4b15      	ldr	r3, [pc, #84]	; (2794 <usb_handle_setup+0x114>)
    2740:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    2742:	4b11      	ldr	r3, [pc, #68]	; (2788 <usb_handle_setup+0x108>)
    2744:	001a      	movs	r2, r3
    2746:	3248      	adds	r2, #72	; 0x48
    2748:	7891      	ldrb	r1, [r2, #2]
    274a:	2250      	movs	r2, #80	; 0x50
    274c:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    274e:	4b12      	ldr	r3, [pc, #72]	; (2798 <usb_handle_setup+0x118>)
    2750:	4798      	blx	r3
    2752:	e017      	b.n	2784 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2754:	4b15      	ldr	r3, [pc, #84]	; (27ac <usb_handle_setup+0x12c>)
    2756:	4798      	blx	r3
    2758:	e014      	b.n	2784 <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    275a:	4b0c      	ldr	r3, [pc, #48]	; (278c <usb_handle_setup+0x10c>)
    275c:	8859      	ldrh	r1, [r3, #2]
    275e:	8898      	ldrh	r0, [r3, #4]
    2760:	4b14      	ldr	r3, [pc, #80]	; (27b4 <usb_handle_setup+0x134>)
    2762:	4798      	blx	r3
    2764:	2800      	cmp	r0, #0
    2766:	d005      	beq.n	2774 <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    2768:	2000      	movs	r0, #0
    276a:	4b0a      	ldr	r3, [pc, #40]	; (2794 <usb_handle_setup+0x114>)
    276c:	4798      	blx	r3
					return usb_ep0_out();
    276e:	4b0a      	ldr	r3, [pc, #40]	; (2798 <usb_handle_setup+0x118>)
    2770:	4798      	blx	r3
    2772:	e007      	b.n	2784 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2774:	4b0d      	ldr	r3, [pc, #52]	; (27ac <usb_handle_setup+0x12c>)
    2776:	4798      	blx	r3
    2778:	e004      	b.n	2784 <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    277a:	4b0c      	ldr	r3, [pc, #48]	; (27ac <usb_handle_setup+0x12c>)
    277c:	4798      	blx	r3
    277e:	e001      	b.n	2784 <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    2780:	4b0d      	ldr	r3, [pc, #52]	; (27b8 <usb_handle_setup+0x138>)
    2782:	4798      	blx	r3
}
    2784:	b002      	add	sp, #8
    2786:	bd10      	pop	{r4, pc}
    2788:	200004a8 	.word	0x200004a8
    278c:	200004f0 	.word	0x200004f0
    2790:	00005ad8 	.word	0x00005ad8
    2794:	00002c5d 	.word	0x00002c5d
    2798:	00002c45 	.word	0x00002c45
    279c:	00002fdd 	.word	0x00002fdd
    27a0:	200004ac 	.word	0x200004ac
    27a4:	0000262d 	.word	0x0000262d
    27a8:	00002b3d 	.word	0x00002b3d
    27ac:	00002c75 	.word	0x00002c75
    27b0:	00002fa1 	.word	0x00002fa1
    27b4:	00002fb9 	.word	0x00002fb9
    27b8:	00002e91 	.word	0x00002e91

000027bc <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    27bc:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    27be:	4b05      	ldr	r3, [pc, #20]	; (27d4 <usb_handle_control_out_complete+0x18>)
    27c0:	2248      	movs	r2, #72	; 0x48
    27c2:	5c9b      	ldrb	r3, [r3, r2]
    27c4:	3218      	adds	r2, #24
    27c6:	421a      	tst	r2, r3
    27c8:	d100      	bne.n	27cc <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    27ca:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    27cc:	4b02      	ldr	r3, [pc, #8]	; (27d8 <usb_handle_control_out_complete+0x1c>)
    27ce:	4798      	blx	r3
}
    27d0:	e7fb      	b.n	27ca <usb_handle_control_out_complete+0xe>
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	200004a8 	.word	0x200004a8
    27d8:	00002f9f 	.word	0x00002f9f

000027dc <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    27dc:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    27de:	4b0d      	ldr	r3, [pc, #52]	; (2814 <usb_handle_control_in_complete+0x38>)
    27e0:	2248      	movs	r2, #72	; 0x48
    27e2:	5c9b      	ldrb	r3, [r3, r2]
    27e4:	3218      	adds	r2, #24
    27e6:	421a      	tst	r2, r3
    27e8:	d110      	bne.n	280c <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    27ea:	4b0b      	ldr	r3, [pc, #44]	; (2818 <usb_handle_control_in_complete+0x3c>)
    27ec:	785b      	ldrb	r3, [r3, #1]
    27ee:	2b05      	cmp	r3, #5
    27f0:	d002      	beq.n	27f8 <usb_handle_control_in_complete+0x1c>
    27f2:	2b06      	cmp	r3, #6
    27f4:	d007      	beq.n	2806 <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    27f6:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    27f8:	4b07      	ldr	r3, [pc, #28]	; (2818 <usb_handle_control_in_complete+0x3c>)
    27fa:	789b      	ldrb	r3, [r3, #2]
    27fc:	207f      	movs	r0, #127	; 0x7f
    27fe:	4018      	ands	r0, r3
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <usb_handle_control_in_complete+0x40>)
    2802:	4798      	blx	r3
				return;
    2804:	e7f7      	b.n	27f6 <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    2806:	4b06      	ldr	r3, [pc, #24]	; (2820 <usb_handle_control_in_complete+0x44>)
    2808:	4798      	blx	r3
				return;
    280a:	e7f4      	b.n	27f6 <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    280c:	4b05      	ldr	r3, [pc, #20]	; (2824 <usb_handle_control_in_complete+0x48>)
    280e:	4798      	blx	r3
    2810:	e7f1      	b.n	27f6 <usb_handle_control_in_complete+0x1a>
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	200004a8 	.word	0x200004a8
    2818:	200004f0 	.word	0x200004f0
    281c:	00002989 	.word	0x00002989
    2820:	0000262d 	.word	0x0000262d
    2824:	00002f9d 	.word	0x00002f9d

00002828 <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    2828:	b570      	push	{r4, r5, r6, lr}
    282a:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    282c:	4b0b      	ldr	r3, [pc, #44]	; (285c <usb_string_to_descriptor+0x34>)
    282e:	4798      	blx	r3
    2830:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    2832:	281f      	cmp	r0, #31
    2834:	d900      	bls.n	2838 <usb_string_to_descriptor+0x10>
    2836:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    2838:	1c43      	adds	r3, r0, #1
    283a:	005b      	lsls	r3, r3, #1
    283c:	4a08      	ldr	r2, [pc, #32]	; (2860 <usb_string_to_descriptor+0x38>)
    283e:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    2840:	2303      	movs	r3, #3
    2842:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    2844:	2200      	movs	r2, #0
    2846:	e005      	b.n	2854 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    2848:	5cb1      	ldrb	r1, [r6, r2]
    284a:	4b05      	ldr	r3, [pc, #20]	; (2860 <usb_string_to_descriptor+0x38>)
    284c:	0054      	lsls	r4, r2, #1
    284e:	191b      	adds	r3, r3, r4
    2850:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    2852:	3201      	adds	r2, #1
    2854:	4290      	cmp	r0, r2
    2856:	dcf7      	bgt.n	2848 <usb_string_to_descriptor+0x20>
	}
	return desc;
    2858:	4802      	ldr	r0, [pc, #8]	; (2864 <usb_string_to_descriptor+0x3c>)
}
    285a:	bd70      	pop	{r4, r5, r6, pc}
    285c:	00005649 	.word	0x00005649
    2860:	200004a8 	.word	0x200004a8
    2864:	200004ac 	.word	0x200004ac

00002868 <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    2868:	4a12      	ldr	r2, [pc, #72]	; (28b4 <usb_reset+0x4c>)
    286a:	4b13      	ldr	r3, [pc, #76]	; (28b8 <usb_reset+0x50>)
    286c:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    286e:	685a      	ldr	r2, [r3, #4]
    2870:	4812      	ldr	r0, [pc, #72]	; (28bc <usb_reset+0x54>)
    2872:	4002      	ands	r2, r0
    2874:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    2876:	6859      	ldr	r1, [r3, #4]
    2878:	22c0      	movs	r2, #192	; 0xc0
    287a:	0592      	lsls	r2, r2, #22
    287c:	4311      	orrs	r1, r2
    287e:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    2880:	490f      	ldr	r1, [pc, #60]	; (28c0 <usb_reset+0x58>)
    2882:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2884:	6959      	ldr	r1, [r3, #20]
    2886:	4001      	ands	r1, r0
    2888:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    288a:	6959      	ldr	r1, [r3, #20]
    288c:	430a      	orrs	r2, r1
    288e:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    2890:	695a      	ldr	r2, [r3, #20]
    2892:	0052      	lsls	r2, r2, #1
    2894:	0852      	lsrs	r2, r2, #1
    2896:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    2898:	6959      	ldr	r1, [r3, #20]
    289a:	2280      	movs	r2, #128	; 0x80
    289c:	0612      	lsls	r2, r2, #24
    289e:	430a      	orrs	r2, r1
    28a0:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    28a2:	4b08      	ldr	r3, [pc, #32]	; (28c4 <usb_reset+0x5c>)
    28a4:	220a      	movs	r2, #10
    28a6:	32ff      	adds	r2, #255	; 0xff
    28a8:	2110      	movs	r1, #16
    28aa:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    28ac:	3a09      	subs	r2, #9
    28ae:	3101      	adds	r1, #1
    28b0:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    28b2:	4770      	bx	lr
    28b4:	200004fc 	.word	0x200004fc
    28b8:	20000588 	.word	0x20000588
    28bc:	8fffffff 	.word	0x8fffffff
    28c0:	200004ac 	.word	0x200004ac
    28c4:	41005000 	.word	0x41005000

000028c8 <usb_init>:
void usb_init(){
    28c8:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    28ca:	4a26      	ldr	r2, [pc, #152]	; (2964 <usb_init+0x9c>)
    28cc:	69d3      	ldr	r3, [r2, #28]
    28ce:	2120      	movs	r1, #32
    28d0:	430b      	orrs	r3, r1
    28d2:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    28d4:	4b24      	ldr	r3, [pc, #144]	; (2968 <usb_init+0xa0>)
    28d6:	4a25      	ldr	r2, [pc, #148]	; (296c <usb_init+0xa4>)
    28d8:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    28da:	4b25      	ldr	r3, [pc, #148]	; (2970 <usb_init+0xa8>)
    28dc:	2201      	movs	r2, #1
    28de:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    28e0:	4b23      	ldr	r3, [pc, #140]	; (2970 <usb_init+0xa8>)
    28e2:	789b      	ldrb	r3, [r3, #2]
    28e4:	07db      	lsls	r3, r3, #31
    28e6:	d4fb      	bmi.n	28e0 <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    28e8:	4b21      	ldr	r3, [pc, #132]	; (2970 <usb_init+0xa8>)
    28ea:	2202      	movs	r2, #2
    28ec:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    28ee:	4b20      	ldr	r3, [pc, #128]	; (2970 <usb_init+0xa8>)
    28f0:	789b      	ldrb	r3, [r3, #2]
    28f2:	079b      	lsls	r3, r3, #30
    28f4:	d4fb      	bmi.n	28ee <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    28f6:	4b1f      	ldr	r3, [pc, #124]	; (2974 <usb_init+0xac>)
    28f8:	685b      	ldr	r3, [r3, #4]
    28fa:	035b      	lsls	r3, r3, #13
    28fc:	22f8      	movs	r2, #248	; 0xf8
    28fe:	0292      	lsls	r2, r2, #10
    2900:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    2902:	2b1f      	cmp	r3, #31
    2904:	d028      	beq.n	2958 <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2906:	4a1b      	ldr	r2, [pc, #108]	; (2974 <usb_init+0xac>)
    2908:	6851      	ldr	r1, [r2, #4]
    290a:	0489      	lsls	r1, r1, #18
    290c:	22f8      	movs	r2, #248	; 0xf8
    290e:	03d2      	lsls	r2, r2, #15
    2910:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    2912:	291f      	cmp	r1, #31
    2914:	d022      	beq.n	295c <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2916:	4a17      	ldr	r2, [pc, #92]	; (2974 <usb_init+0xac>)
    2918:	6852      	ldr	r2, [r2, #4]
    291a:	05d2      	lsls	r2, r2, #23
    291c:	20e0      	movs	r0, #224	; 0xe0
    291e:	0480      	lsls	r0, r0, #18
    2920:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    2922:	2a07      	cmp	r2, #7
    2924:	d01c      	beq.n	2960 <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2926:	019b      	lsls	r3, r3, #6
    2928:	20f8      	movs	r0, #248	; 0xf8
    292a:	00c0      	lsls	r0, r0, #3
    292c:	4003      	ands	r3, r0
    292e:	201f      	movs	r0, #31
    2930:	4001      	ands	r1, r0
    2932:	430b      	orrs	r3, r1
    2934:	0312      	lsls	r2, r2, #12
    2936:	4313      	orrs	r3, r2
    2938:	4d0d      	ldr	r5, [pc, #52]	; (2970 <usb_init+0xa8>)
    293a:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    293c:	4b0e      	ldr	r3, [pc, #56]	; (2978 <usb_init+0xb0>)
    293e:	781a      	ldrb	r2, [r3, #0]
    2940:	0112      	lsls	r2, r2, #4
    2942:	4c0e      	ldr	r4, [pc, #56]	; (297c <usb_init+0xb4>)
    2944:	2100      	movs	r1, #0
    2946:	0020      	movs	r0, r4
    2948:	4b0d      	ldr	r3, [pc, #52]	; (2980 <usb_init+0xb8>)
    294a:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    294c:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    294e:	2308      	movs	r3, #8
    2950:	832b      	strh	r3, [r5, #24]
	usb_reset();
    2952:	4b0c      	ldr	r3, [pc, #48]	; (2984 <usb_init+0xbc>)
    2954:	4798      	blx	r3
}
    2956:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    2958:	3b1a      	subs	r3, #26
    295a:	e7d4      	b.n	2906 <usb_init+0x3e>
		pad_transp = 29;
    295c:	3902      	subs	r1, #2
    295e:	e7da      	b.n	2916 <usb_init+0x4e>
		pad_trim = 3;
    2960:	3a04      	subs	r2, #4
    2962:	e7e0      	b.n	2926 <usb_init+0x5e>
    2964:	40000400 	.word	0x40000400
    2968:	40000c00 	.word	0x40000c00
    296c:	00004006 	.word	0x00004006
    2970:	41005000 	.word	0x41005000
    2974:	00806020 	.word	0x00806020
    2978:	00005b5a 	.word	0x00005b5a
    297c:	20000588 	.word	0x20000588
    2980:	000054c1 	.word	0x000054c1
    2984:	00002869 	.word	0x00002869

00002988 <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    2988:	2380      	movs	r3, #128	; 0x80
    298a:	425b      	negs	r3, r3
    298c:	4318      	orrs	r0, r3
    298e:	b2c0      	uxtb	r0, r0
    2990:	4b01      	ldr	r3, [pc, #4]	; (2998 <usb_set_address+0x10>)
    2992:	7298      	strb	r0, [r3, #10]
}
    2994:	4770      	bx	lr
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	41005000 	.word	0x41005000

0000299c <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    299c:	b530      	push	{r4, r5, lr}
    299e:	0003      	movs	r3, r0
	if (ep & 0x80) {
    29a0:	b240      	sxtb	r0, r0
    29a2:	2800      	cmp	r0, #0
    29a4:	db24      	blt.n	29f0 <usb_enable_ep+0x54>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    29a6:	203f      	movs	r0, #63	; 0x3f
    29a8:	4018      	ands	r0, r3
    29aa:	4b49      	ldr	r3, [pc, #292]	; (2ad0 <usb_enable_ep+0x134>)
    29ac:	0144      	lsls	r4, r0, #5
    29ae:	191b      	adds	r3, r3, r4
    29b0:	685c      	ldr	r4, [r3, #4]
    29b2:	4d48      	ldr	r5, [pc, #288]	; (2ad4 <usb_enable_ep+0x138>)
    29b4:	402c      	ands	r4, r5
    29b6:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    29b8:	685b      	ldr	r3, [r3, #4]
    29ba:	2a08      	cmp	r2, #8
    29bc:	d95f      	bls.n	2a7e <usb_enable_ep+0xe2>
    29be:	2a10      	cmp	r2, #16
    29c0:	d800      	bhi.n	29c4 <usb_enable_ep+0x28>
    29c2:	e072      	b.n	2aaa <usb_enable_ep+0x10e>
    29c4:	2a20      	cmp	r2, #32
    29c6:	d800      	bhi.n	29ca <usb_enable_ep+0x2e>
    29c8:	e072      	b.n	2ab0 <usb_enable_ep+0x114>
    29ca:	2a40      	cmp	r2, #64	; 0x40
    29cc:	d800      	bhi.n	29d0 <usb_enable_ep+0x34>
    29ce:	e072      	b.n	2ab6 <usb_enable_ep+0x11a>
    29d0:	2a80      	cmp	r2, #128	; 0x80
    29d2:	d800      	bhi.n	29d6 <usb_enable_ep+0x3a>
    29d4:	e072      	b.n	2abc <usb_enable_ep+0x120>
    29d6:	2480      	movs	r4, #128	; 0x80
    29d8:	0064      	lsls	r4, r4, #1
    29da:	42a2      	cmp	r2, r4
    29dc:	d800      	bhi.n	29e0 <usb_enable_ep+0x44>
    29de:	e070      	b.n	2ac2 <usb_enable_ep+0x126>
    29e0:	3401      	adds	r4, #1
    29e2:	34ff      	adds	r4, #255	; 0xff
    29e4:	42a2      	cmp	r2, r4
    29e6:	d900      	bls.n	29ea <usb_enable_ep+0x4e>
    29e8:	e06e      	b.n	2ac8 <usb_enable_ep+0x12c>
    29ea:	22c0      	movs	r2, #192	; 0xc0
    29ec:	05d2      	lsls	r2, r2, #23
    29ee:	e047      	b.n	2a80 <usb_enable_ep+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    29f0:	203f      	movs	r0, #63	; 0x3f
    29f2:	4003      	ands	r3, r0
    29f4:	4836      	ldr	r0, [pc, #216]	; (2ad0 <usb_enable_ep+0x134>)
    29f6:	015c      	lsls	r4, r3, #5
    29f8:	1900      	adds	r0, r0, r4
    29fa:	6944      	ldr	r4, [r0, #20]
    29fc:	4d35      	ldr	r5, [pc, #212]	; (2ad4 <usb_enable_ep+0x138>)
    29fe:	402c      	ands	r4, r5
    2a00:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2a02:	6940      	ldr	r0, [r0, #20]
    2a04:	2a08      	cmp	r2, #8
    2a06:	d912      	bls.n	2a2e <usb_enable_ep+0x92>
    2a08:	2a10      	cmp	r2, #16
    2a0a:	d926      	bls.n	2a5a <usb_enable_ep+0xbe>
    2a0c:	2a20      	cmp	r2, #32
    2a0e:	d927      	bls.n	2a60 <usb_enable_ep+0xc4>
    2a10:	2a40      	cmp	r2, #64	; 0x40
    2a12:	d928      	bls.n	2a66 <usb_enable_ep+0xca>
    2a14:	2a80      	cmp	r2, #128	; 0x80
    2a16:	d929      	bls.n	2a6c <usb_enable_ep+0xd0>
    2a18:	2480      	movs	r4, #128	; 0x80
    2a1a:	0064      	lsls	r4, r4, #1
    2a1c:	42a2      	cmp	r2, r4
    2a1e:	d928      	bls.n	2a72 <usb_enable_ep+0xd6>
    2a20:	3401      	adds	r4, #1
    2a22:	34ff      	adds	r4, #255	; 0xff
    2a24:	42a2      	cmp	r2, r4
    2a26:	d827      	bhi.n	2a78 <usb_enable_ep+0xdc>
    2a28:	22c0      	movs	r2, #192	; 0xc0
    2a2a:	05d2      	lsls	r2, r2, #23
    2a2c:	e000      	b.n	2a30 <usb_enable_ep+0x94>
    2a2e:	2200      	movs	r2, #0
    2a30:	4310      	orrs	r0, r2
    2a32:	4a27      	ldr	r2, [pc, #156]	; (2ad0 <usb_enable_ep+0x134>)
    2a34:	015c      	lsls	r4, r3, #5
    2a36:	1912      	adds	r2, r2, r4
    2a38:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    2a3a:	4c27      	ldr	r4, [pc, #156]	; (2ad8 <usb_enable_ep+0x13c>)
    2a3c:	3308      	adds	r3, #8
    2a3e:	015b      	lsls	r3, r3, #5
    2a40:	5d1a      	ldrb	r2, [r3, r4]
    2a42:	3101      	adds	r1, #1
    2a44:	b2c9      	uxtb	r1, r1
    2a46:	0109      	lsls	r1, r1, #4
    2a48:	2070      	movs	r0, #112	; 0x70
    2a4a:	4001      	ands	r1, r0
    2a4c:	430a      	orrs	r2, r1
    2a4e:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    2a50:	46a4      	mov	ip, r4
    2a52:	4463      	add	r3, ip
    2a54:	22a2      	movs	r2, #162	; 0xa2
    2a56:	711a      	strb	r2, [r3, #4]
    2a58:	e026      	b.n	2aa8 <usb_enable_ep+0x10c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2a5a:	2280      	movs	r2, #128	; 0x80
    2a5c:	0552      	lsls	r2, r2, #21
    2a5e:	e7e7      	b.n	2a30 <usb_enable_ep+0x94>
    2a60:	2280      	movs	r2, #128	; 0x80
    2a62:	0592      	lsls	r2, r2, #22
    2a64:	e7e4      	b.n	2a30 <usb_enable_ep+0x94>
    2a66:	22c0      	movs	r2, #192	; 0xc0
    2a68:	0592      	lsls	r2, r2, #22
    2a6a:	e7e1      	b.n	2a30 <usb_enable_ep+0x94>
    2a6c:	2280      	movs	r2, #128	; 0x80
    2a6e:	05d2      	lsls	r2, r2, #23
    2a70:	e7de      	b.n	2a30 <usb_enable_ep+0x94>
    2a72:	22a0      	movs	r2, #160	; 0xa0
    2a74:	05d2      	lsls	r2, r2, #23
    2a76:	e7db      	b.n	2a30 <usb_enable_ep+0x94>
    2a78:	22e0      	movs	r2, #224	; 0xe0
    2a7a:	05d2      	lsls	r2, r2, #23
    2a7c:	e7d8      	b.n	2a30 <usb_enable_ep+0x94>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2a7e:	2200      	movs	r2, #0
    2a80:	431a      	orrs	r2, r3
    2a82:	4b13      	ldr	r3, [pc, #76]	; (2ad0 <usb_enable_ep+0x134>)
    2a84:	0144      	lsls	r4, r0, #5
    2a86:	191b      	adds	r3, r3, r4
    2a88:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    2a8a:	4a13      	ldr	r2, [pc, #76]	; (2ad8 <usb_enable_ep+0x13c>)
    2a8c:	3008      	adds	r0, #8
    2a8e:	0140      	lsls	r0, r0, #5
    2a90:	5c83      	ldrb	r3, [r0, r2]
    2a92:	3101      	adds	r1, #1
    2a94:	2407      	movs	r4, #7
    2a96:	4021      	ands	r1, r4
    2a98:	430b      	orrs	r3, r1
    2a9a:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    2a9c:	4694      	mov	ip, r2
    2a9e:	4460      	add	r0, ip
    2aa0:	2340      	movs	r3, #64	; 0x40
    2aa2:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    2aa4:	3b2f      	subs	r3, #47	; 0x2f
    2aa6:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    2aa8:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2aaa:	2280      	movs	r2, #128	; 0x80
    2aac:	0552      	lsls	r2, r2, #21
    2aae:	e7e7      	b.n	2a80 <usb_enable_ep+0xe4>
    2ab0:	2280      	movs	r2, #128	; 0x80
    2ab2:	0592      	lsls	r2, r2, #22
    2ab4:	e7e4      	b.n	2a80 <usb_enable_ep+0xe4>
    2ab6:	22c0      	movs	r2, #192	; 0xc0
    2ab8:	0592      	lsls	r2, r2, #22
    2aba:	e7e1      	b.n	2a80 <usb_enable_ep+0xe4>
    2abc:	2280      	movs	r2, #128	; 0x80
    2abe:	05d2      	lsls	r2, r2, #23
    2ac0:	e7de      	b.n	2a80 <usb_enable_ep+0xe4>
    2ac2:	22a0      	movs	r2, #160	; 0xa0
    2ac4:	05d2      	lsls	r2, r2, #23
    2ac6:	e7db      	b.n	2a80 <usb_enable_ep+0xe4>
    2ac8:	22e0      	movs	r2, #224	; 0xe0
    2aca:	05d2      	lsls	r2, r2, #23
    2acc:	e7d8      	b.n	2a80 <usb_enable_ep+0xe4>
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	20000588 	.word	0x20000588
    2ad4:	8fffffff 	.word	0x8fffffff
    2ad8:	41005000 	.word	0x41005000

00002adc <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    2ade:	4d12      	ldr	r5, [pc, #72]	; (2b28 <usb_ep_start_out+0x4c>)
    2ae0:	0144      	lsls	r4, r0, #5
    2ae2:	192b      	adds	r3, r5, r4
    2ae4:	685e      	ldr	r6, [r3, #4]
    2ae6:	4f11      	ldr	r7, [pc, #68]	; (2b2c <usb_ep_start_out+0x50>)
    2ae8:	403e      	ands	r6, r7
    2aea:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    2aec:	685e      	ldr	r6, [r3, #4]
    2aee:	0392      	lsls	r2, r2, #14
    2af0:	4f0f      	ldr	r7, [pc, #60]	; (2b30 <usb_ep_start_out+0x54>)
    2af2:	403a      	ands	r2, r7
    2af4:	4316      	orrs	r6, r2
    2af6:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2af8:	685a      	ldr	r2, [r3, #4]
    2afa:	0b92      	lsrs	r2, r2, #14
    2afc:	0392      	lsls	r2, r2, #14
    2afe:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    2b00:	685a      	ldr	r2, [r3, #4]
    2b02:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    2b04:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    2b06:	3008      	adds	r0, #8
    2b08:	0140      	lsls	r0, r0, #5
    2b0a:	4b0a      	ldr	r3, [pc, #40]	; (2b34 <usb_ep_start_out+0x58>)
    2b0c:	469c      	mov	ip, r3
    2b0e:	4460      	add	r0, ip
    2b10:	2305      	movs	r3, #5
    2b12:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    2b14:	4b08      	ldr	r3, [pc, #32]	; (2b38 <usb_ep_start_out+0x5c>)
    2b16:	469c      	mov	ip, r3
    2b18:	4464      	add	r4, ip
    2b1a:	2301      	movs	r3, #1
    2b1c:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    2b1e:	333f      	adds	r3, #63	; 0x3f
    2b20:	7103      	strb	r3, [r0, #4]
	return 0;
}
    2b22:	2000      	movs	r0, #0
    2b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	20000588 	.word	0x20000588
    2b2c:	f0003fff 	.word	0xf0003fff
    2b30:	0fffc000 	.word	0x0fffc000
    2b34:	41005000 	.word	0x41005000
    2b38:	41005109 	.word	0x41005109

00002b3c <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    2b3c:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    2b3e:	243f      	movs	r4, #63	; 0x3f
    2b40:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    2b42:	4c15      	ldr	r4, [pc, #84]	; (2b98 <usb_ep_start_in+0x5c>)
    2b44:	0146      	lsls	r6, r0, #5
    2b46:	19a4      	adds	r4, r4, r6
    2b48:	6965      	ldr	r5, [r4, #20]
    2b4a:	006d      	lsls	r5, r5, #1
    2b4c:	086d      	lsrs	r5, r5, #1
    2b4e:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    2b50:	6965      	ldr	r5, [r4, #20]
    2b52:	07db      	lsls	r3, r3, #31
    2b54:	431d      	orrs	r5, r3
    2b56:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    2b58:	6963      	ldr	r3, [r4, #20]
    2b5a:	4d10      	ldr	r5, [pc, #64]	; (2b9c <usb_ep_start_in+0x60>)
    2b5c:	402b      	ands	r3, r5
    2b5e:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    2b60:	6963      	ldr	r3, [r4, #20]
    2b62:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2b64:	6963      	ldr	r3, [r4, #20]
    2b66:	0b9b      	lsrs	r3, r3, #14
    2b68:	039b      	lsls	r3, r3, #14
    2b6a:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    2b6c:	6963      	ldr	r3, [r4, #20]
    2b6e:	0492      	lsls	r2, r2, #18
    2b70:	0c92      	lsrs	r2, r2, #18
    2b72:	4313      	orrs	r3, r2
    2b74:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    2b76:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    2b78:	3008      	adds	r0, #8
    2b7a:	0140      	lsls	r0, r0, #5
    2b7c:	4b08      	ldr	r3, [pc, #32]	; (2ba0 <usb_ep_start_in+0x64>)
    2b7e:	469c      	mov	ip, r3
    2b80:	4460      	add	r0, ip
    2b82:	230a      	movs	r3, #10
    2b84:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    2b86:	4b07      	ldr	r3, [pc, #28]	; (2ba4 <usb_ep_start_in+0x68>)
    2b88:	469c      	mov	ip, r3
    2b8a:	4466      	add	r6, ip
    2b8c:	2302      	movs	r3, #2
    2b8e:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    2b90:	337e      	adds	r3, #126	; 0x7e
    2b92:	7143      	strb	r3, [r0, #5]
	return 0;
}
    2b94:	2000      	movs	r0, #0
    2b96:	bd70      	pop	{r4, r5, r6, pc}
    2b98:	20000588 	.word	0x20000588
    2b9c:	f0003fff 	.word	0xf0003fff
    2ba0:	41005000 	.word	0x41005000
    2ba4:	41005109 	.word	0x41005109

00002ba8 <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    2ba8:	b243      	sxtb	r3, r0
    2baa:	2b00      	cmp	r3, #0
    2bac:	db0a      	blt.n	2bc4 <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    2bae:	233f      	movs	r3, #63	; 0x3f
    2bb0:	4003      	ands	r3, r0
    2bb2:	3308      	adds	r3, #8
    2bb4:	015b      	lsls	r3, r3, #5
    2bb6:	4a09      	ldr	r2, [pc, #36]	; (2bdc <usb_ep_pending+0x34>)
    2bb8:	4694      	mov	ip, r2
    2bba:	4463      	add	r3, ip
    2bbc:	79d8      	ldrb	r0, [r3, #7]
    2bbe:	2301      	movs	r3, #1
    2bc0:	4018      	ands	r0, r3
	}
}
    2bc2:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    2bc4:	233f      	movs	r3, #63	; 0x3f
    2bc6:	4003      	ands	r3, r0
    2bc8:	3308      	adds	r3, #8
    2bca:	015b      	lsls	r3, r3, #5
    2bcc:	4a03      	ldr	r2, [pc, #12]	; (2bdc <usb_ep_pending+0x34>)
    2bce:	4694      	mov	ip, r2
    2bd0:	4463      	add	r3, ip
    2bd2:	79db      	ldrb	r3, [r3, #7]
    2bd4:	085b      	lsrs	r3, r3, #1
    2bd6:	2001      	movs	r0, #1
    2bd8:	4018      	ands	r0, r3
    2bda:	e7f2      	b.n	2bc2 <usb_ep_pending+0x1a>
    2bdc:	41005000 	.word	0x41005000

00002be0 <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    2be0:	b243      	sxtb	r3, r0
    2be2:	2b00      	cmp	r3, #0
    2be4:	db09      	blt.n	2bfa <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    2be6:	233f      	movs	r3, #63	; 0x3f
    2be8:	4003      	ands	r3, r0
    2bea:	3308      	adds	r3, #8
    2bec:	015b      	lsls	r3, r3, #5
    2bee:	4a08      	ldr	r2, [pc, #32]	; (2c10 <usb_ep_handled+0x30>)
    2bf0:	4694      	mov	ip, r2
    2bf2:	4463      	add	r3, ip
    2bf4:	2201      	movs	r2, #1
    2bf6:	71da      	strb	r2, [r3, #7]
	}
}
    2bf8:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    2bfa:	233f      	movs	r3, #63	; 0x3f
    2bfc:	4003      	ands	r3, r0
    2bfe:	3308      	adds	r3, #8
    2c00:	015b      	lsls	r3, r3, #5
    2c02:	4a03      	ldr	r2, [pc, #12]	; (2c10 <usb_ep_handled+0x30>)
    2c04:	4694      	mov	ip, r2
    2c06:	4463      	add	r3, ip
    2c08:	2202      	movs	r2, #2
    2c0a:	71da      	strb	r2, [r3, #7]
    2c0c:	e7f4      	b.n	2bf8 <usb_ep_handled+0x18>
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	41005000 	.word	0x41005000

00002c14 <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    2c14:	4b03      	ldr	r3, [pc, #12]	; (2c24 <usb_ep_out_length+0x10>)
    2c16:	0140      	lsls	r0, r0, #5
    2c18:	181b      	adds	r3, r3, r0
    2c1a:	6858      	ldr	r0, [r3, #4]
    2c1c:	0480      	lsls	r0, r0, #18
    2c1e:	0c80      	lsrs	r0, r0, #18
}
    2c20:	4770      	bx	lr
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	20000588 	.word	0x20000588

00002c28 <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c28:	4b04      	ldr	r3, [pc, #16]	; (2c3c <usb_attach+0x14>)
    2c2a:	2280      	movs	r2, #128	; 0x80
    2c2c:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    2c2e:	4a04      	ldr	r2, [pc, #16]	; (2c40 <usb_attach+0x18>)
    2c30:	8913      	ldrh	r3, [r2, #8]
    2c32:	2101      	movs	r1, #1
    2c34:	438b      	bics	r3, r1
    2c36:	8113      	strh	r3, [r2, #8]
}
    2c38:	4770      	bx	lr
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	e000e100 	.word	0xe000e100
    2c40:	41005000 	.word	0x41005000

00002c44 <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    2c44:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    2c46:	4903      	ldr	r1, [pc, #12]	; (2c54 <usb_ep0_out+0x10>)
    2c48:	2240      	movs	r2, #64	; 0x40
    2c4a:	2000      	movs	r0, #0
    2c4c:	4b02      	ldr	r3, [pc, #8]	; (2c58 <usb_ep0_out+0x14>)
    2c4e:	4798      	blx	r3
}
    2c50:	bd10      	pop	{r4, pc}
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	200004fc 	.word	0x200004fc
    2c58:	00002add 	.word	0x00002add

00002c5c <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    2c5c:	b510      	push	{r4, lr}
    2c5e:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2c60:	4902      	ldr	r1, [pc, #8]	; (2c6c <usb_ep0_in+0x10>)
    2c62:	2301      	movs	r3, #1
    2c64:	2080      	movs	r0, #128	; 0x80
    2c66:	4c02      	ldr	r4, [pc, #8]	; (2c70 <usb_ep0_in+0x14>)
    2c68:	47a0      	blx	r4
}
    2c6a:	bd10      	pop	{r4, pc}
    2c6c:	200004ac 	.word	0x200004ac
    2c70:	00002b3d 	.word	0x00002b3d

00002c74 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    2c74:	4a02      	ldr	r2, [pc, #8]	; (2c80 <usb_ep0_stall+0xc>)
    2c76:	2306      	movs	r3, #6
    2c78:	33ff      	adds	r3, #255	; 0xff
    2c7a:	2130      	movs	r1, #48	; 0x30
    2c7c:	54d1      	strb	r1, [r2, r3]
}
    2c7e:	4770      	bx	lr
    2c80:	41005000 	.word	0x41005000

00002c84 <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    2c84:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    2c86:	4b25      	ldr	r3, [pc, #148]	; (2d1c <usb_handle_function+0x98>)
    2c88:	8c1c      	ldrh	r4, [r3, #32]
    2c8a:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    2c8c:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    2c8e:	071b      	lsls	r3, r3, #28
    2c90:	d410      	bmi.n	2cb4 <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    2c92:	07e3      	lsls	r3, r4, #31
    2c94:	d50c      	bpl.n	2cb0 <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    2c96:	4921      	ldr	r1, [pc, #132]	; (2d1c <usb_handle_function+0x98>)
    2c98:	2208      	movs	r2, #8
    2c9a:	32ff      	adds	r2, #255	; 0xff
    2c9c:	5c8b      	ldrb	r3, [r1, r2]
    2c9e:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    2ca0:	2013      	movs	r0, #19
    2ca2:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    2ca4:	06db      	lsls	r3, r3, #27
    2ca6:	d40d      	bmi.n	2cc4 <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    2ca8:	07eb      	lsls	r3, r5, #31
    2caa:	d413      	bmi.n	2cd4 <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    2cac:	07ad      	lsls	r5, r5, #30
    2cae:	d414      	bmi.n	2cda <usb_handle_function+0x56>
void usb_handle_function() {
    2cb0:	2301      	movs	r3, #1
    2cb2:	e016      	b.n	2ce2 <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    2cb4:	4b19      	ldr	r3, [pc, #100]	; (2d1c <usb_handle_function+0x98>)
    2cb6:	2208      	movs	r2, #8
    2cb8:	839a      	strh	r2, [r3, #28]
		usb_reset();
    2cba:	4b19      	ldr	r3, [pc, #100]	; (2d20 <usb_handle_function+0x9c>)
    2cbc:	4798      	blx	r3
		usb_cb_reset();
    2cbe:	4b19      	ldr	r3, [pc, #100]	; (2d24 <usb_handle_function+0xa0>)
    2cc0:	4798      	blx	r3
		goto usb_handle_function_end;
    2cc2:	e026      	b.n	2d12 <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    2cc4:	4818      	ldr	r0, [pc, #96]	; (2d28 <usb_handle_function+0xa4>)
    2cc6:	4919      	ldr	r1, [pc, #100]	; (2d2c <usb_handle_function+0xa8>)
    2cc8:	3aff      	subs	r2, #255	; 0xff
    2cca:	4b19      	ldr	r3, [pc, #100]	; (2d30 <usb_handle_function+0xac>)
    2ccc:	4798      	blx	r3
			usb_handle_setup();
    2cce:	4b19      	ldr	r3, [pc, #100]	; (2d34 <usb_handle_function+0xb0>)
    2cd0:	4798      	blx	r3
    2cd2:	e7e9      	b.n	2ca8 <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    2cd4:	4b18      	ldr	r3, [pc, #96]	; (2d38 <usb_handle_function+0xb4>)
    2cd6:	4798      	blx	r3
    2cd8:	e7e8      	b.n	2cac <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    2cda:	4b18      	ldr	r3, [pc, #96]	; (2d3c <usb_handle_function+0xb8>)
    2cdc:	4798      	blx	r3
    2cde:	e7e7      	b.n	2cb0 <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    2ce0:	3301      	adds	r3, #1
    2ce2:	4a17      	ldr	r2, [pc, #92]	; (2d40 <usb_handle_function+0xbc>)
    2ce4:	7812      	ldrb	r2, [r2, #0]
    2ce6:	429a      	cmp	r2, r3
    2ce8:	dd11      	ble.n	2d0e <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    2cea:	2201      	movs	r2, #1
    2cec:	409a      	lsls	r2, r3
    2cee:	4214      	tst	r4, r2
    2cf0:	d0f6      	beq.n	2ce0 <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    2cf2:	001a      	movs	r2, r3
    2cf4:	3208      	adds	r2, #8
    2cf6:	0152      	lsls	r2, r2, #5
    2cf8:	4908      	ldr	r1, [pc, #32]	; (2d1c <usb_handle_function+0x98>)
    2cfa:	468c      	mov	ip, r1
    2cfc:	4462      	add	r2, ip
    2cfe:	79d1      	ldrb	r1, [r2, #7]
    2d00:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    2d02:	015a      	lsls	r2, r3, #5
    2d04:	480f      	ldr	r0, [pc, #60]	; (2d44 <usb_handle_function+0xc0>)
    2d06:	4684      	mov	ip, r0
    2d08:	4462      	add	r2, ip
    2d0a:	7011      	strb	r1, [r2, #0]
    2d0c:	e7e8      	b.n	2ce0 <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    2d0e:	4b0e      	ldr	r3, [pc, #56]	; (2d48 <usb_handle_function+0xc4>)
    2d10:	4798      	blx	r3
    2d12:	4b0e      	ldr	r3, [pc, #56]	; (2d4c <usb_handle_function+0xc8>)
    2d14:	2280      	movs	r2, #128	; 0x80
    2d16:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    2d18:	bd70      	pop	{r4, r5, r6, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	41005000 	.word	0x41005000
    2d20:	00002869 	.word	0x00002869
    2d24:	00002e8d 	.word	0x00002e8d
    2d28:	200004f0 	.word	0x200004f0
    2d2c:	200004fc 	.word	0x200004fc
    2d30:	000055b9 	.word	0x000055b9
    2d34:	00002681 	.word	0x00002681
    2d38:	000027bd 	.word	0x000027bd
    2d3c:	000027dd 	.word	0x000027dd
    2d40:	00005b5a 	.word	0x00005b5a
    2d44:	41005108 	.word	0x41005108
    2d48:	00002f5d 	.word	0x00002f5d
    2d4c:	e000e100 	.word	0xe000e100

00002d50 <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    2d50:	b510      	push	{r4, lr}
    2d52:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    2d54:	2000      	movs	r0, #0
    2d56:	e01c      	b.n	2d92 <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    2d58:	0082      	lsls	r2, r0, #2
    2d5a:	1812      	adds	r2, r2, r0
    2d5c:	17d4      	asrs	r4, r2, #31
    2d5e:	2307      	movs	r3, #7
    2d60:	0019      	movs	r1, r3
    2d62:	4021      	ands	r1, r4
    2d64:	1889      	adds	r1, r1, r2
    2d66:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    2d68:	0f64      	lsrs	r4, r4, #29
    2d6a:	1912      	adds	r2, r2, r4
    2d6c:	4013      	ands	r3, r2
    2d6e:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    2d70:	4a0c      	ldr	r2, [pc, #48]	; (2da4 <samd_serial_number_string_descriptor+0x54>)
    2d72:	5c8a      	ldrb	r2, [r1, r2]
    2d74:	411a      	asrs	r2, r3
    2d76:	4c0c      	ldr	r4, [pc, #48]	; (2da8 <samd_serial_number_string_descriptor+0x58>)
    2d78:	5d09      	ldrb	r1, [r1, r4]
    2d7a:	2408      	movs	r4, #8
    2d7c:	1ae3      	subs	r3, r4, r3
    2d7e:	4099      	lsls	r1, r3
    2d80:	000b      	movs	r3, r1
    2d82:	4313      	orrs	r3, r2
    2d84:	221f      	movs	r2, #31
    2d86:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    2d88:	4a08      	ldr	r2, [pc, #32]	; (2dac <samd_serial_number_string_descriptor+0x5c>)
    2d8a:	5cd2      	ldrb	r2, [r2, r3]
    2d8c:	ab01      	add	r3, sp, #4
    2d8e:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    2d90:	3001      	adds	r0, #1
    2d92:	2819      	cmp	r0, #25
    2d94:	dde0      	ble.n	2d58 <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    2d96:	a801      	add	r0, sp, #4
    2d98:	2300      	movs	r3, #0
    2d9a:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    2d9c:	4b04      	ldr	r3, [pc, #16]	; (2db0 <samd_serial_number_string_descriptor+0x60>)
    2d9e:	4798      	blx	r3
}
    2da0:	b008      	add	sp, #32
    2da2:	bd10      	pop	{r4, pc}
    2da4:	0080a00c 	.word	0x0080a00c
    2da8:	0080a00d 	.word	0x0080a00d
    2dac:	00005b08 	.word	0x00005b08
    2db0:	00002829 	.word	0x00002829

00002db4 <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    2db4:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    2db6:	2208      	movs	r2, #8
    2db8:	2103      	movs	r1, #3
    2dba:	2081      	movs	r0, #129	; 0x81
    2dbc:	4c09      	ldr	r4, [pc, #36]	; (2de4 <usb_serial_init+0x30>)
    2dbe:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2dc0:	2220      	movs	r2, #32
    2dc2:	2102      	movs	r1, #2
    2dc4:	2002      	movs	r0, #2
    2dc6:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2dc8:	2220      	movs	r2, #32
    2dca:	2102      	movs	r1, #2
    2dcc:	2082      	movs	r0, #130	; 0x82
    2dce:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2dd0:	4c05      	ldr	r4, [pc, #20]	; (2de8 <usb_serial_init+0x34>)
    2dd2:	2220      	movs	r2, #32
    2dd4:	0021      	movs	r1, r4
    2dd6:	2002      	movs	r0, #2
    2dd8:	4b04      	ldr	r3, [pc, #16]	; (2dec <usb_serial_init+0x38>)
    2dda:	4798      	blx	r3
	
	usb_tx_busy = false;
    2ddc:	2320      	movs	r3, #32
    2dde:	2200      	movs	r2, #0
    2de0:	54e2      	strb	r2, [r4, r3]
}
    2de2:	bd10      	pop	{r4, pc}
    2de4:	0000299d 	.word	0x0000299d
    2de8:	2000053c 	.word	0x2000053c
    2dec:	00002add 	.word	0x00002add

00002df0 <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    2df0:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    2df2:	2002      	movs	r0, #2
    2df4:	4b02      	ldr	r3, [pc, #8]	; (2e00 <usb_serial_out_completion+0x10>)
    2df6:	4798      	blx	r3
    2df8:	4b02      	ldr	r3, [pc, #8]	; (2e04 <usb_serial_out_completion+0x14>)
    2dfa:	6258      	str	r0, [r3, #36]	; 0x24
}
    2dfc:	bd10      	pop	{r4, pc}
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00002c15 	.word	0x00002c15
    2e04:	2000053c 	.word	0x2000053c

00002e08 <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    2e08:	4b02      	ldr	r3, [pc, #8]	; (2e14 <usb_serial_in_completion+0xc>)
    2e0a:	2220      	movs	r2, #32
    2e0c:	2100      	movs	r1, #0
    2e0e:	5499      	strb	r1, [r3, r2]
}
    2e10:	4770      	bx	lr
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	2000053c 	.word	0x2000053c

00002e18 <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    2e18:	b570      	push	{r4, r5, r6, lr}
    2e1a:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    2e1c:	2920      	cmp	r1, #32
    2e1e:	dd00      	ble.n	2e22 <usb_serial_send_buffer+0xa>
    2e20:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    2e22:	4d09      	ldr	r5, [pc, #36]	; (2e48 <usb_serial_send_buffer+0x30>)
    2e24:	002e      	movs	r6, r5
    2e26:	3628      	adds	r6, #40	; 0x28
    2e28:	0022      	movs	r2, r4
    2e2a:	0001      	movs	r1, r0
    2e2c:	0030      	movs	r0, r6
    2e2e:	4b07      	ldr	r3, [pc, #28]	; (2e4c <usb_serial_send_buffer+0x34>)
    2e30:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    2e32:	2300      	movs	r3, #0
    2e34:	0022      	movs	r2, r4
    2e36:	0031      	movs	r1, r6
    2e38:	2082      	movs	r0, #130	; 0x82
    2e3a:	4e05      	ldr	r6, [pc, #20]	; (2e50 <usb_serial_send_buffer+0x38>)
    2e3c:	47b0      	blx	r6
	usb_tx_busy = true;
    2e3e:	2320      	movs	r3, #32
    2e40:	2201      	movs	r2, #1
    2e42:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    2e44:	0020      	movs	r0, r4
    2e46:	bd70      	pop	{r4, r5, r6, pc}
    2e48:	2000053c 	.word	0x2000053c
    2e4c:	000055b9 	.word	0x000055b9
    2e50:	00002b3d 	.word	0x00002b3d

00002e54 <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    2e54:	b570      	push	{r4, r5, r6, lr}
    2e56:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    2e58:	4b09      	ldr	r3, [pc, #36]	; (2e80 <usb_serial_read_buffer+0x2c>)
    2e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e5c:	4299      	cmp	r1, r3
    2e5e:	d901      	bls.n	2e64 <usb_serial_read_buffer+0x10>
    2e60:	4b07      	ldr	r3, [pc, #28]	; (2e80 <usb_serial_read_buffer+0x2c>)
    2e62:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    2e64:	4d06      	ldr	r5, [pc, #24]	; (2e80 <usb_serial_read_buffer+0x2c>)
    2e66:	0022      	movs	r2, r4
    2e68:	0029      	movs	r1, r5
    2e6a:	4b06      	ldr	r3, [pc, #24]	; (2e84 <usb_serial_read_buffer+0x30>)
    2e6c:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2e6e:	2220      	movs	r2, #32
    2e70:	0029      	movs	r1, r5
    2e72:	2002      	movs	r0, #2
    2e74:	4b04      	ldr	r3, [pc, #16]	; (2e88 <usb_serial_read_buffer+0x34>)
    2e76:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    2e78:	2300      	movs	r3, #0
    2e7a:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    2e7c:	0020      	movs	r0, r4
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
    2e80:	2000053c 	.word	0x2000053c
    2e84:	000055b9 	.word	0x000055b9
    2e88:	00002add 	.word	0x00002add

00002e8c <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    2e8c:	4770      	bx	lr
	...

00002e90 <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    2e90:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    2e92:	4b2a      	ldr	r3, [pc, #168]	; (2f3c <usb_cb_control_setup+0xac>)
    2e94:	781a      	ldrb	r2, [r3, #0]
    2e96:	2360      	movs	r3, #96	; 0x60
    2e98:	4013      	ands	r3, r2
    2e9a:	2b20      	cmp	r3, #32
    2e9c:	d000      	beq.n	2ea0 <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    2e9e:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    2ea0:	4b26      	ldr	r3, [pc, #152]	; (2f3c <usb_cb_control_setup+0xac>)
    2ea2:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    2ea4:	231f      	movs	r3, #31
    2ea6:	4013      	ands	r3, r2
    2ea8:	2b01      	cmp	r3, #1
    2eaa:	d144      	bne.n	2f36 <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    2eac:	2900      	cmp	r1, #0
    2eae:	d1f6      	bne.n	2e9e <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    2eb0:	4b22      	ldr	r3, [pc, #136]	; (2f3c <usb_cb_control_setup+0xac>)
    2eb2:	785b      	ldrb	r3, [r3, #1]
    2eb4:	2b22      	cmp	r3, #34	; 0x22
    2eb6:	d031      	beq.n	2f1c <usb_cb_control_setup+0x8c>
    2eb8:	d80c      	bhi.n	2ed4 <usb_cb_control_setup+0x44>
    2eba:	2b20      	cmp	r3, #32
    2ebc:	d026      	beq.n	2f0c <usb_cb_control_setup+0x7c>
    2ebe:	2b21      	cmp	r3, #33	; 0x21
    2ec0:	d136      	bne.n	2f30 <usb_cb_control_setup+0xa0>
    2ec2:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2ec4:	2b06      	cmp	r3, #6
    2ec6:	d823      	bhi.n	2f10 <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    2ec8:	4a1d      	ldr	r2, [pc, #116]	; (2f40 <usb_cb_control_setup+0xb0>)
    2eca:	5cd1      	ldrb	r1, [r2, r3]
    2ecc:	4a1d      	ldr	r2, [pc, #116]	; (2f44 <usb_cb_control_setup+0xb4>)
    2ece:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2ed0:	3301      	adds	r3, #1
    2ed2:	e7f7      	b.n	2ec4 <usb_cb_control_setup+0x34>
    2ed4:	2b23      	cmp	r3, #35	; 0x23
    2ed6:	d12b      	bne.n	2f30 <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    2ed8:	2000      	movs	r0, #0
    2eda:	4b1b      	ldr	r3, [pc, #108]	; (2f48 <usb_cb_control_setup+0xb8>)
    2edc:	4798      	blx	r3
					usb_ep0_out();
    2ede:	4b1b      	ldr	r3, [pc, #108]	; (2f4c <usb_cb_control_setup+0xbc>)
    2ee0:	4798      	blx	r3
					break;
    2ee2:	e7dc      	b.n	2e9e <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    2ee4:	4b16      	ldr	r3, [pc, #88]	; (2f40 <usb_cb_control_setup+0xb0>)
    2ee6:	491a      	ldr	r1, [pc, #104]	; (2f50 <usb_cb_control_setup+0xc0>)
    2ee8:	5c89      	ldrb	r1, [r1, r2]
    2eea:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    2eec:	3201      	adds	r2, #1
    2eee:	4b13      	ldr	r3, [pc, #76]	; (2f3c <usb_cb_control_setup+0xac>)
    2ef0:	7999      	ldrb	r1, [r3, #6]
    2ef2:	79db      	ldrb	r3, [r3, #7]
    2ef4:	021b      	lsls	r3, r3, #8
    2ef6:	430b      	orrs	r3, r1
    2ef8:	4293      	cmp	r3, r2
    2efa:	dd01      	ble.n	2f00 <usb_cb_control_setup+0x70>
    2efc:	2a06      	cmp	r2, #6
    2efe:	d9f1      	bls.n	2ee4 <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    2f00:	2000      	movs	r0, #0
    2f02:	4b11      	ldr	r3, [pc, #68]	; (2f48 <usb_cb_control_setup+0xb8>)
    2f04:	4798      	blx	r3
					usb_ep0_out();
    2f06:	4b11      	ldr	r3, [pc, #68]	; (2f4c <usb_cb_control_setup+0xbc>)
    2f08:	4798      	blx	r3
					break;
    2f0a:	e7c8      	b.n	2e9e <usb_cb_control_setup+0xe>
    2f0c:	2200      	movs	r2, #0
    2f0e:	e7ee      	b.n	2eee <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    2f10:	2007      	movs	r0, #7
    2f12:	4b0d      	ldr	r3, [pc, #52]	; (2f48 <usb_cb_control_setup+0xb8>)
    2f14:	4798      	blx	r3
					usb_ep0_out();
    2f16:	4b0d      	ldr	r3, [pc, #52]	; (2f4c <usb_cb_control_setup+0xbc>)
    2f18:	4798      	blx	r3
					break;
    2f1a:	e7c0      	b.n	2e9e <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    2f1c:	4b07      	ldr	r3, [pc, #28]	; (2f3c <usb_cb_control_setup+0xac>)
    2f1e:	789a      	ldrb	r2, [r3, #2]
    2f20:	4b0c      	ldr	r3, [pc, #48]	; (2f54 <usb_cb_control_setup+0xc4>)
    2f22:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    2f24:	2000      	movs	r0, #0
    2f26:	4b08      	ldr	r3, [pc, #32]	; (2f48 <usb_cb_control_setup+0xb8>)
    2f28:	4798      	blx	r3
					usb_ep0_out();
    2f2a:	4b08      	ldr	r3, [pc, #32]	; (2f4c <usb_cb_control_setup+0xbc>)
    2f2c:	4798      	blx	r3
					break;
    2f2e:	e7b6      	b.n	2e9e <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    2f30:	4b09      	ldr	r3, [pc, #36]	; (2f58 <usb_cb_control_setup+0xc8>)
    2f32:	4798      	blx	r3
					break;
    2f34:	e7b3      	b.n	2e9e <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    2f36:	4b08      	ldr	r3, [pc, #32]	; (2f58 <usb_cb_control_setup+0xc8>)
    2f38:	4798      	blx	r3
}
    2f3a:	e7b0      	b.n	2e9e <usb_cb_control_setup+0xe>
    2f3c:	200004f0 	.word	0x200004f0
    2f40:	20000060 	.word	0x20000060
    2f44:	200004ac 	.word	0x200004ac
    2f48:	00002c5d 	.word	0x00002c5d
    2f4c:	00002c45 	.word	0x00002c45
    2f50:	200004fc 	.word	0x200004fc
    2f54:	20000584 	.word	0x20000584
    2f58:	00002c75 	.word	0x00002c75

00002f5c <usb_cb_completion>:

void usb_cb_completion(void) {
    2f5c:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    2f5e:	2002      	movs	r0, #2
    2f60:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <usb_cb_completion+0x30>)
    2f62:	4798      	blx	r3
    2f64:	2800      	cmp	r0, #0
    2f66:	d105      	bne.n	2f74 <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    2f68:	2082      	movs	r0, #130	; 0x82
    2f6a:	4b08      	ldr	r3, [pc, #32]	; (2f8c <usb_cb_completion+0x30>)
    2f6c:	4798      	blx	r3
    2f6e:	2800      	cmp	r0, #0
    2f70:	d106      	bne.n	2f80 <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    2f72:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    2f74:	2002      	movs	r0, #2
    2f76:	4b06      	ldr	r3, [pc, #24]	; (2f90 <usb_cb_completion+0x34>)
    2f78:	4798      	blx	r3
		usb_serial_out_completion();
    2f7a:	4b06      	ldr	r3, [pc, #24]	; (2f94 <usb_cb_completion+0x38>)
    2f7c:	4798      	blx	r3
    2f7e:	e7f3      	b.n	2f68 <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    2f80:	2082      	movs	r0, #130	; 0x82
    2f82:	4b03      	ldr	r3, [pc, #12]	; (2f90 <usb_cb_completion+0x34>)
    2f84:	4798      	blx	r3
		usb_serial_in_completion();
    2f86:	4b04      	ldr	r3, [pc, #16]	; (2f98 <usb_cb_completion+0x3c>)
    2f88:	4798      	blx	r3
}
    2f8a:	e7f2      	b.n	2f72 <usb_cb_completion+0x16>
    2f8c:	00002ba9 	.word	0x00002ba9
    2f90:	00002be1 	.word	0x00002be1
    2f94:	00002df1 	.word	0x00002df1
    2f98:	00002e09 	.word	0x00002e09

00002f9c <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    2f9c:	4770      	bx	lr

00002f9e <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    2f9e:	4770      	bx	lr

00002fa0 <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    2fa0:	b510      	push	{r4, lr}
	if (config <= 1) {
    2fa2:	2801      	cmp	r0, #1
    2fa4:	d901      	bls.n	2faa <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    2fa6:	2000      	movs	r0, #0
}
    2fa8:	bd10      	pop	{r4, pc}
		usb_serial_init();
    2faa:	4b02      	ldr	r3, [pc, #8]	; (2fb4 <usb_cb_set_configuration+0x14>)
    2fac:	4798      	blx	r3
		return true;
    2fae:	2001      	movs	r0, #1
    2fb0:	e7fa      	b.n	2fa8 <usb_cb_set_configuration+0x8>
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	00002db5 	.word	0x00002db5

00002fb8 <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    2fb8:	2800      	cmp	r0, #0
    2fba:	d003      	beq.n	2fc4 <usb_cb_set_interface+0xc>
    2fbc:	2801      	cmp	r0, #1
    2fbe:	d005      	beq.n	2fcc <usb_cb_set_interface+0x14>
    2fc0:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    2fc2:	4770      	bx	lr
		if (altsetting == 0) return true;
    2fc4:	2900      	cmp	r1, #0
    2fc6:	d005      	beq.n	2fd4 <usb_cb_set_interface+0x1c>
	return false;
    2fc8:	2000      	movs	r0, #0
    2fca:	e7fa      	b.n	2fc2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2fcc:	2900      	cmp	r1, #0
    2fce:	d003      	beq.n	2fd8 <usb_cb_set_interface+0x20>
	return false;
    2fd0:	2000      	movs	r0, #0
    2fd2:	e7f6      	b.n	2fc2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2fd4:	2001      	movs	r0, #1
    2fd6:	e7f4      	b.n	2fc2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2fd8:	2001      	movs	r0, #1
    2fda:	e7f2      	b.n	2fc2 <usb_cb_set_interface+0xa>

00002fdc <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    2fdc:	b510      	push	{r4, lr}
    2fde:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    2fe0:	2802      	cmp	r0, #2
    2fe2:	d028      	beq.n	3036 <usb_cb_get_descriptor+0x5a>
    2fe4:	2803      	cmp	r0, #3
    2fe6:	d008      	beq.n	2ffa <usb_cb_get_descriptor+0x1e>
    2fe8:	2801      	cmp	r0, #1
    2fea:	d003      	beq.n	2ff4 <usb_cb_get_descriptor+0x18>
    2fec:	2000      	movs	r0, #0
    2fee:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    2ff0:	6023      	str	r3, [r4, #0]
	return size;
    2ff2:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    2ff4:	3011      	adds	r0, #17
		address = &device_descriptor;
    2ff6:	4b11      	ldr	r3, [pc, #68]	; (303c <usb_cb_get_descriptor+0x60>)
    2ff8:	e7fa      	b.n	2ff0 <usb_cb_get_descriptor+0x14>
		switch (index) {
    2ffa:	2902      	cmp	r1, #2
    2ffc:	d00f      	beq.n	301e <usb_cb_get_descriptor+0x42>
    2ffe:	d808      	bhi.n	3012 <usb_cb_get_descriptor+0x36>
    3000:	2900      	cmp	r1, #0
    3002:	d015      	beq.n	3030 <usb_cb_get_descriptor+0x54>
    3004:	2901      	cmp	r1, #1
    3006:	d10f      	bne.n	3028 <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    3008:	480d      	ldr	r0, [pc, #52]	; (3040 <usb_cb_get_descriptor+0x64>)
    300a:	4b0e      	ldr	r3, [pc, #56]	; (3044 <usb_cb_get_descriptor+0x68>)
    300c:	4798      	blx	r3
    300e:	0003      	movs	r3, r0
			break;
    3010:	e00f      	b.n	3032 <usb_cb_get_descriptor+0x56>
    3012:	2903      	cmp	r1, #3
    3014:	d108      	bne.n	3028 <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    3016:	4b0c      	ldr	r3, [pc, #48]	; (3048 <usb_cb_get_descriptor+0x6c>)
    3018:	4798      	blx	r3
    301a:	0003      	movs	r3, r0
			break;
    301c:	e009      	b.n	3032 <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    301e:	480b      	ldr	r0, [pc, #44]	; (304c <usb_cb_get_descriptor+0x70>)
    3020:	4b08      	ldr	r3, [pc, #32]	; (3044 <usb_cb_get_descriptor+0x68>)
    3022:	4798      	blx	r3
    3024:	0003      	movs	r3, r0
			break;
    3026:	e004      	b.n	3032 <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    3028:	2300      	movs	r3, #0
    302a:	6023      	str	r3, [r4, #0]
			return 0;
    302c:	2000      	movs	r0, #0
    302e:	e7e0      	b.n	2ff2 <usb_cb_get_descriptor+0x16>
    3030:	4b07      	ldr	r3, [pc, #28]	; (3050 <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    3032:	7818      	ldrb	r0, [r3, #0]
		break;
    3034:	e7dc      	b.n	2ff0 <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    3036:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    3038:	4b06      	ldr	r3, [pc, #24]	; (3054 <usb_cb_get_descriptor+0x78>)
    303a:	e7d9      	b.n	2ff0 <usb_cb_get_descriptor+0x14>
    303c:	00005b48 	.word	0x00005b48
    3040:	00005b2c 	.word	0x00005b2c
    3044:	00002829 	.word	0x00002829
    3048:	00002d51 	.word	0x00002d51
    304c:	00005b3c 	.word	0x00005b3c
    3050:	00005b44 	.word	0x00005b44
    3054:	20000068 	.word	0x20000068

00003058 <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    3058:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    305a:	4b07      	ldr	r3, [pc, #28]	; (3078 <rtos_init+0x20>)
    305c:	4798      	blx	r3
	#endif
	
	time_init();
    305e:	4b07      	ldr	r3, [pc, #28]	; (307c <rtos_init+0x24>)
    3060:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    3062:	2180      	movs	r1, #128	; 0x80
    3064:	03c9      	lsls	r1, r1, #15
    3066:	2001      	movs	r0, #1
    3068:	4b05      	ldr	r3, [pc, #20]	; (3080 <rtos_init+0x28>)
    306a:	4798      	blx	r3
	#endif
	
	init_process_queue();
    306c:	4b05      	ldr	r3, [pc, #20]	; (3084 <rtos_init+0x2c>)
    306e:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    3070:	4b05      	ldr	r3, [pc, #20]	; (3088 <rtos_init+0x30>)
    3072:	4798      	blx	r3
	#endif
	
	return true;
}
    3074:	2001      	movs	r0, #1
    3076:	bd10      	pop	{r4, pc}
    3078:	000023a9 	.word	0x000023a9
    307c:	0000247d 	.word	0x0000247d
    3080:	00001e8d 	.word	0x00001e8d
    3084:	00003279 	.word	0x00003279
    3088:	000024f1 	.word	0x000024f1

0000308c <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    308c:	b570      	push	{r4, r5, r6, lr}
    308e:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    3090:	e011      	b.n	30b6 <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    3092:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    3094:	2680      	movs	r6, #128	; 0x80
    3096:	03f6      	lsls	r6, r6, #15
    3098:	0031      	movs	r1, r6
    309a:	2001      	movs	r0, #1
    309c:	4b0c      	ldr	r3, [pc, #48]	; (30d0 <morse+0x44>)
    309e:	4798      	blx	r3
		delay_ms(delay);
    30a0:	480c      	ldr	r0, [pc, #48]	; (30d4 <morse+0x48>)
    30a2:	4368      	muls	r0, r5
    30a4:	4d0c      	ldr	r5, [pc, #48]	; (30d8 <morse+0x4c>)
    30a6:	47a8      	blx	r5
		led_off();
    30a8:	0031      	movs	r1, r6
    30aa:	2001      	movs	r0, #1
    30ac:	4b0b      	ldr	r3, [pc, #44]	; (30dc <morse+0x50>)
    30ae:	4798      	blx	r3
		delay_ms(100);
    30b0:	480b      	ldr	r0, [pc, #44]	; (30e0 <morse+0x54>)
    30b2:	47a8      	blx	r5
		++c;
    30b4:	3401      	adds	r4, #1
	while (*c != '\0') {
    30b6:	7823      	ldrb	r3, [r4, #0]
    30b8:	2b00      	cmp	r3, #0
    30ba:	d007      	beq.n	30cc <morse+0x40>
		if (*c == '.') delay = 100;
    30bc:	2b2e      	cmp	r3, #46	; 0x2e
    30be:	d0e8      	beq.n	3092 <morse+0x6>
		else if (*c == '-') delay = 200;
    30c0:	2b2d      	cmp	r3, #45	; 0x2d
    30c2:	d001      	beq.n	30c8 <morse+0x3c>
		int delay = 0;
    30c4:	2500      	movs	r5, #0
    30c6:	e7e5      	b.n	3094 <morse+0x8>
		else if (*c == '-') delay = 200;
    30c8:	25c8      	movs	r5, #200	; 0xc8
    30ca:	e7e3      	b.n	3094 <morse+0x8>
	}
}
    30cc:	bd70      	pop	{r4, r5, r6, pc}
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	00001e9d 	.word	0x00001e9d
    30d4:	00001770 	.word	0x00001770
    30d8:	0000246d 	.word	0x0000246d
    30dc:	00001ead 	.word	0x00001ead
    30e0:	000927c0 	.word	0x000927c0

000030e4 <SOS>:

void SOS() {
    30e4:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    30e6:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    30e8:	4803      	ldr	r0, [pc, #12]	; (30f8 <SOS+0x14>)
    30ea:	4b04      	ldr	r3, [pc, #16]	; (30fc <SOS+0x18>)
    30ec:	4798      	blx	r3
		delay_ms(600);
    30ee:	4804      	ldr	r0, [pc, #16]	; (3100 <SOS+0x1c>)
    30f0:	4b04      	ldr	r3, [pc, #16]	; (3104 <SOS+0x20>)
    30f2:	4798      	blx	r3
	while(1) {
    30f4:	e7f8      	b.n	30e8 <SOS+0x4>
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	00005b5c 	.word	0x00005b5c
    30fc:	0000308d 	.word	0x0000308d
    3100:	0036ee80 	.word	0x0036ee80
    3104:	0000246d 	.word	0x0000246d

00003108 <rtos_main>:
int rtos_main(void) {
    3108:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    310a:	4b13      	ldr	r3, [pc, #76]	; (3158 <rtos_main+0x50>)
    310c:	4798      	blx	r3
	mainproc = &_mainproc;
    310e:	4c13      	ldr	r4, [pc, #76]	; (315c <rtos_main+0x54>)
    3110:	1d20      	adds	r0, r4, #4
    3112:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    3114:	2380      	movs	r3, #128	; 0x80
    3116:	22c0      	movs	r2, #192	; 0xc0
    3118:	4911      	ldr	r1, [pc, #68]	; (3160 <rtos_main+0x58>)
    311a:	00db      	lsls	r3, r3, #3
    311c:	0092      	lsls	r2, r2, #2
    311e:	4d11      	ldr	r5, [pc, #68]	; (3164 <rtos_main+0x5c>)
    3120:	47a8      	blx	r5
	dispatch_process(mainproc);
    3122:	6820      	ldr	r0, [r4, #0]
    3124:	4b10      	ldr	r3, [pc, #64]	; (3168 <rtos_main+0x60>)
    3126:	4798      	blx	r3
	while (process_count) {
    3128:	e001      	b.n	312e <rtos_main+0x26>
		dispatch_process(lastproc);
    312a:	4b0f      	ldr	r3, [pc, #60]	; (3168 <rtos_main+0x60>)
    312c:	4798      	blx	r3
	while (process_count) {
    312e:	4b0f      	ldr	r3, [pc, #60]	; (316c <rtos_main+0x64>)
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	2b00      	cmp	r3, #0
    3134:	d003      	beq.n	313e <rtos_main+0x36>
		if (!(lastproc = next_process())) break;
    3136:	4b0e      	ldr	r3, [pc, #56]	; (3170 <rtos_main+0x68>)
    3138:	4798      	blx	r3
    313a:	2800      	cmp	r0, #0
    313c:	d1f5      	bne.n	312a <rtos_main+0x22>
	if (process_count) SOS();
    313e:	4b0b      	ldr	r3, [pc, #44]	; (316c <rtos_main+0x64>)
    3140:	681b      	ldr	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d106      	bne.n	3154 <rtos_main+0x4c>
	led_on();
    3146:	2180      	movs	r1, #128	; 0x80
    3148:	03c9      	lsls	r1, r1, #15
    314a:	2001      	movs	r0, #1
    314c:	4b09      	ldr	r3, [pc, #36]	; (3174 <rtos_main+0x6c>)
    314e:	4798      	blx	r3
}
    3150:	2000      	movs	r0, #0
    3152:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    3154:	4b08      	ldr	r3, [pc, #32]	; (3178 <rtos_main+0x70>)
    3156:	4798      	blx	r3
    3158:	00003059 	.word	0x00003059
    315c:	20000608 	.word	0x20000608
    3160:	000012f9 	.word	0x000012f9
    3164:	000031a5 	.word	0x000031a5
    3168:	0000328d 	.word	0x0000328d
    316c:	20000640 	.word	0x20000640
    3170:	00003341 	.word	0x00003341
    3174:	00001e9d 	.word	0x00001e9d
    3178:	000030e5 	.word	0x000030e5

0000317c <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    317c:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    317e:	4b05      	ldr	r3, [pc, #20]	; (3194 <TC4_Handler+0x18>)
    3180:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    3182:	4b05      	ldr	r3, [pc, #20]	; (3198 <TC4_Handler+0x1c>)
    3184:	681c      	ldr	r4, [r3, #0]
    3186:	4b05      	ldr	r3, [pc, #20]	; (319c <TC4_Handler+0x20>)
    3188:	4798      	blx	r3
    318a:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    318c:	2001      	movs	r0, #1
    318e:	4b04      	ldr	r3, [pc, #16]	; (31a0 <TC4_Handler+0x24>)
    3190:	4798      	blx	r3
}
    3192:	bd10      	pop	{r4, pc}
    3194:	00002531 	.word	0x00002531
    3198:	20000634 	.word	0x20000634
    319c:	000024e5 	.word	0x000024e5
    31a0:	000034b1 	.word	0x000034b1

000031a4 <init_process>:
Process* current_process;

//uint32_t process_pc;


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    31a4:	b510      	push	{r4, lr}
    31a6:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    31a8:	4807      	ldr	r0, [pc, #28]	; (31c8 <init_process+0x24>)
    31aa:	1a82      	subs	r2, r0, r2
    31ac:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    31ae:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    31b0:	1e4b      	subs	r3, r1, #1
    31b2:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    31b4:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    31b6:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    31b8:	4b04      	ldr	r3, [pc, #16]	; (31cc <init_process+0x28>)
    31ba:	4798      	blx	r3
    31bc:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    31be:	2300      	movs	r3, #0
    31c0:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    31c2:	2224      	movs	r2, #36	; 0x24
    31c4:	54a3      	strb	r3, [r4, r2]
	#endif
}
    31c6:	bd10      	pop	{r4, pc}
    31c8:	20002890 	.word	0x20002890
    31cc:	000024e5 	.word	0x000024e5

000031d0 <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    31d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31d2:	465f      	mov	r7, fp
    31d4:	4656      	mov	r6, sl
    31d6:	464d      	mov	r5, r9
    31d8:	4644      	mov	r4, r8
    31da:	b4f0      	push	{r4, r5, r6, r7}
    31dc:	b083      	sub	sp, #12
    31de:	9001      	str	r0, [sp, #4]
    31e0:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    31e2:	2324      	movs	r3, #36	; 0x24
    31e4:	5cc3      	ldrb	r3, [r0, r3]
    31e6:	2b00      	cmp	r3, #0
    31e8:	d124      	bne.n	3234 <switch_process+0x64>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    31ea:	4b1c      	ldr	r3, [pc, #112]	; (325c <switch_process+0x8c>)
    31ec:	9a01      	ldr	r2, [sp, #4]
    31ee:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    31f0:	2303      	movs	r3, #3
    31f2:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    31f4:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    31f6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    31fa:	2302      	movs	r3, #2
    31fc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3200:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3204:	b662      	cpsie	i
	USE_PSP();
	
	__enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    3206:	9201      	str	r2, [sp, #4]
    3208:	6813      	ldr	r3, [r2, #0]
    320a:	3301      	adds	r3, #1
    320c:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    320e:	b672      	cpsid	i
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3210:	2300      	movs	r3, #0
    3212:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3216:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    321a:	3324      	adds	r3, #36	; 0x24
    321c:	9a01      	ldr	r2, [sp, #4]
    321e:	5cd3      	ldrb	r3, [r2, r3]
    3220:	2b00      	cmp	r3, #0
    3222:	d118      	bne.n	3256 <switch_process+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
    3224:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    3226:	b003      	add	sp, #12
    3228:	bcf0      	pop	{r4, r5, r6, r7}
    322a:	46bb      	mov	fp, r7
    322c:	46b2      	mov	sl, r6
    322e:	46a9      	mov	r9, r5
    3230:	46a0      	mov	r8, r4
    3232:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    3234:	4b0a      	ldr	r3, [pc, #40]	; (3260 <switch_process+0x90>)
    3236:	4798      	blx	r3
    3238:	4b0a      	ldr	r3, [pc, #40]	; (3264 <switch_process+0x94>)
    323a:	681a      	ldr	r2, [r3, #0]
    323c:	0153      	lsls	r3, r2, #5
    323e:	1a9b      	subs	r3, r3, r2
    3240:	009b      	lsls	r3, r3, #2
    3242:	189b      	adds	r3, r3, r2
    3244:	00db      	lsls	r3, r3, #3
    3246:	18c0      	adds	r0, r0, r3
    3248:	4b07      	ldr	r3, [pc, #28]	; (3268 <switch_process+0x98>)
    324a:	4798      	blx	r3
		preempt_clear_interrupts();
    324c:	4b07      	ldr	r3, [pc, #28]	; (326c <switch_process+0x9c>)
    324e:	4798      	blx	r3
		preempt_enable_interrupts();
    3250:	4b07      	ldr	r3, [pc, #28]	; (3270 <switch_process+0xa0>)
    3252:	4798      	blx	r3
    3254:	e7c9      	b.n	31ea <switch_process+0x1a>
		preempt_disable_interrupts();
    3256:	4b07      	ldr	r3, [pc, #28]	; (3274 <switch_process+0xa4>)
    3258:	4798      	blx	r3
    325a:	e7e3      	b.n	3224 <switch_process+0x54>
    325c:	20000634 	.word	0x20000634
    3260:	000024e5 	.word	0x000024e5
    3264:	00005b98 	.word	0x00005b98
    3268:	0000254d 	.word	0x0000254d
    326c:	00002531 	.word	0x00002531
    3270:	00002509 	.word	0x00002509
    3274:	00002519 	.word	0x00002519

00003278 <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    3278:	4b03      	ldr	r3, [pc, #12]	; (3288 <init_process_queue+0x10>)
    327a:	2200      	movs	r2, #0
    327c:	605a      	str	r2, [r3, #4]
    327e:	609a      	str	r2, [r3, #8]
	current_process = 0;
    3280:	601a      	str	r2, [r3, #0]
	process_count = 0;
    3282:	60da      	str	r2, [r3, #12]
}
    3284:	4770      	bx	lr
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	20000634 	.word	0x20000634

0000328c <dispatch_process>:

bool dispatch_process(Process* process) {
    328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    328e:	464f      	mov	r7, r9
    3290:	4646      	mov	r6, r8
    3292:	b4c0      	push	{r6, r7}
    3294:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    3296:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    3298:	6983      	ldr	r3, [r0, #24]
    329a:	2b03      	cmp	r3, #3
    329c:	d049      	beq.n	3332 <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    329e:	4b26      	ldr	r3, [pc, #152]	; (3338 <dispatch_process+0xac>)
    32a0:	68db      	ldr	r3, [r3, #12]
    32a2:	2b0f      	cmp	r3, #15
    32a4:	dd04      	ble.n	32b0 <dispatch_process+0x24>
    32a6:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    32a8:	bcc0      	pop	{r6, r7}
    32aa:	46b9      	mov	r9, r7
    32ac:	46b0      	mov	r8, r6
    32ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    32b0:	4b22      	ldr	r3, [pc, #136]	; (333c <dispatch_process+0xb0>)
    32b2:	4798      	blx	r3
    32b4:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    32b6:	464b      	mov	r3, r9
    32b8:	699b      	ldr	r3, [r3, #24]
    32ba:	2b00      	cmp	r3, #0
    32bc:	d007      	beq.n	32ce <dispatch_process+0x42>
    32be:	464b      	mov	r3, r9
    32c0:	695f      	ldr	r7, [r3, #20]
    32c2:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    32c4:	4b1c      	ldr	r3, [pc, #112]	; (3338 <dispatch_process+0xac>)
    32c6:	685b      	ldr	r3, [r3, #4]
    32c8:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    32ca:	2500      	movs	r5, #0
    32cc:	e00c      	b.n	32e8 <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    32ce:	2700      	movs	r7, #0
    32d0:	e7f8      	b.n	32c4 <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    32d2:	3110      	adds	r1, #16
    32d4:	e00e      	b.n	32f4 <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    32d6:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    32d8:	42ba      	cmp	r2, r7
    32da:	dd16      	ble.n	330a <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    32dc:	4a16      	ldr	r2, [pc, #88]	; (3338 <dispatch_process+0xac>)
    32de:	009e      	lsls	r6, r3, #2
    32e0:	1993      	adds	r3, r2, r6
    32e2:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    32e4:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    32e6:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    32e8:	4a13      	ldr	r2, [pc, #76]	; (3338 <dispatch_process+0xac>)
    32ea:	68d6      	ldr	r6, [r2, #12]
    32ec:	42ae      	cmp	r6, r5
    32ee:	dd0c      	ble.n	330a <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    32f0:	1e59      	subs	r1, r3, #1
    32f2:	d4ee      	bmi.n	32d2 <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    32f4:	4a10      	ldr	r2, [pc, #64]	; (3338 <dispatch_process+0xac>)
    32f6:	0088      	lsls	r0, r1, #2
    32f8:	1812      	adds	r2, r2, r0
    32fa:	6910      	ldr	r0, [r2, #16]
    32fc:	6982      	ldr	r2, [r0, #24]
    32fe:	2a00      	cmp	r2, #0
    3300:	d0e9      	beq.n	32d6 <dispatch_process+0x4a>
    3302:	6942      	ldr	r2, [r0, #20]
    3304:	4644      	mov	r4, r8
    3306:	1b12      	subs	r2, r2, r4
    3308:	e7e6      	b.n	32d8 <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    330a:	4a0b      	ldr	r2, [pc, #44]	; (3338 <dispatch_process+0xac>)
    330c:	009b      	lsls	r3, r3, #2
    330e:	18d3      	adds	r3, r2, r3
    3310:	4649      	mov	r1, r9
    3312:	6119      	str	r1, [r3, #16]
	++process_count;
    3314:	1c73      	adds	r3, r6, #1
    3316:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    3318:	4666      	mov	r6, ip
    331a:	3601      	adds	r6, #1
    331c:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    331e:	17f1      	asrs	r1, r6, #31
    3320:	0f09      	lsrs	r1, r1, #28
    3322:	1876      	adds	r6, r6, r1
    3324:	230f      	movs	r3, #15
    3326:	4033      	ands	r3, r6
    3328:	1a5b      	subs	r3, r3, r1
    332a:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    332c:	b662      	cpsie	i
	return true;
    332e:	2001      	movs	r0, #1
    3330:	e7ba      	b.n	32a8 <dispatch_process+0x1c>
		return false;
    3332:	2000      	movs	r0, #0
    3334:	e7b8      	b.n	32a8 <dispatch_process+0x1c>
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	20000634 	.word	0x20000634
    333c:	000024e5 	.word	0x000024e5

00003340 <next_process>:

Process* next_process() {
    3340:	b5f0      	push	{r4, r5, r6, r7, lr}
    3342:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    3344:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    3346:	4b57      	ldr	r3, [pc, #348]	; (34a4 <next_process+0x164>)
    3348:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    334a:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    334c:	e015      	b.n	337a <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    334e:	6823      	ldr	r3, [r4, #0]
    3350:	781b      	ldrb	r3, [r3, #0]
    3352:	e03d      	b.n	33d0 <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    3354:	6823      	ldr	r3, [r4, #0]
    3356:	881b      	ldrh	r3, [r3, #0]
    3358:	e03a      	b.n	33d0 <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    335a:	6863      	ldr	r3, [r4, #4]
    335c:	42bb      	cmp	r3, r7
    335e:	d041      	beq.n	33e4 <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    3360:	466b      	mov	r3, sp
    3362:	3307      	adds	r3, #7
    3364:	781b      	ldrb	r3, [r3, #0]
    3366:	2b00      	cmp	r3, #0
    3368:	d163      	bne.n	3432 <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    336a:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    336c:	17f3      	asrs	r3, r6, #31
    336e:	0f1b      	lsrs	r3, r3, #28
    3370:	18f6      	adds	r6, r6, r3
    3372:	220f      	movs	r2, #15
    3374:	4016      	ands	r6, r2
    3376:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    3378:	3501      	adds	r5, #1
    337a:	4b4a      	ldr	r3, [pc, #296]	; (34a4 <next_process+0x164>)
    337c:	68db      	ldr	r3, [r3, #12]
    337e:	42ab      	cmp	r3, r5
    3380:	dd59      	ble.n	3436 <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    3382:	4b48      	ldr	r3, [pc, #288]	; (34a4 <next_process+0x164>)
    3384:	00b2      	lsls	r2, r6, #2
    3386:	189a      	adds	r2, r3, r2
    3388:	6912      	ldr	r2, [r2, #16]
    338a:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    338c:	6993      	ldr	r3, [r2, #24]
    338e:	2b02      	cmp	r3, #2
    3390:	d151      	bne.n	3436 <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    3392:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    3394:	466b      	mov	r3, sp
    3396:	2200      	movs	r2, #0
    3398:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    339a:	68e3      	ldr	r3, [r4, #12]
    339c:	2b00      	cmp	r3, #0
    339e:	d001      	beq.n	33a4 <next_process+0x64>
    33a0:	68e3      	ldr	r3, [r4, #12]
    33a2:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    33a4:	4b3f      	ldr	r3, [pc, #252]	; (34a4 <next_process+0x164>)
    33a6:	681a      	ldr	r2, [r3, #0]
    33a8:	6993      	ldr	r3, [r2, #24]
    33aa:	2b01      	cmp	r3, #1
    33ac:	d043      	beq.n	3436 <next_process+0xf6>
			if (data->mask) {
    33ae:	68a3      	ldr	r3, [r4, #8]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d00f      	beq.n	33d4 <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    33b4:	68a1      	ldr	r1, [r4, #8]
    33b6:	23ff      	movs	r3, #255	; 0xff
    33b8:	400b      	ands	r3, r1
    33ba:	68a1      	ldr	r1, [r4, #8]
    33bc:	428b      	cmp	r3, r1
    33be:	d0c6      	beq.n	334e <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    33c0:	68a3      	ldr	r3, [r4, #8]
    33c2:	041b      	lsls	r3, r3, #16
    33c4:	0c1b      	lsrs	r3, r3, #16
    33c6:	68a1      	ldr	r1, [r4, #8]
    33c8:	428b      	cmp	r3, r1
    33ca:	d0c3      	beq.n	3354 <next_process+0x14>
				else variable = *(data->variable);
    33cc:	6823      	ldr	r3, [r4, #0]
    33ce:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    33d0:	68a7      	ldr	r7, [r4, #8]
    33d2:	401f      	ands	r7, r3
			switch (data->condition) {
    33d4:	7c23      	ldrb	r3, [r4, #16]
    33d6:	b2db      	uxtb	r3, r3
    33d8:	2b06      	cmp	r3, #6
    33da:	d861      	bhi.n	34a0 <next_process+0x160>
    33dc:	009b      	lsls	r3, r3, #2
    33de:	4932      	ldr	r1, [pc, #200]	; (34a8 <next_process+0x168>)
    33e0:	58cb      	ldr	r3, [r1, r3]
    33e2:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    33e4:	466b      	mov	r3, sp
    33e6:	2101      	movs	r1, #1
    33e8:	71d9      	strb	r1, [r3, #7]
    33ea:	e7b9      	b.n	3360 <next_process+0x20>
				if (variable != data->value) unblocked = true;
    33ec:	6863      	ldr	r3, [r4, #4]
    33ee:	42bb      	cmp	r3, r7
    33f0:	d0b6      	beq.n	3360 <next_process+0x20>
    33f2:	466b      	mov	r3, sp
    33f4:	2101      	movs	r1, #1
    33f6:	71d9      	strb	r1, [r3, #7]
    33f8:	e7b2      	b.n	3360 <next_process+0x20>
				if (variable > data->value) unblocked = true;
    33fa:	6863      	ldr	r3, [r4, #4]
    33fc:	42bb      	cmp	r3, r7
    33fe:	d2af      	bcs.n	3360 <next_process+0x20>
    3400:	466b      	mov	r3, sp
    3402:	2101      	movs	r1, #1
    3404:	71d9      	strb	r1, [r3, #7]
    3406:	e7ab      	b.n	3360 <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    3408:	6863      	ldr	r3, [r4, #4]
    340a:	42bb      	cmp	r3, r7
    340c:	d8a8      	bhi.n	3360 <next_process+0x20>
    340e:	466b      	mov	r3, sp
    3410:	2101      	movs	r1, #1
    3412:	71d9      	strb	r1, [r3, #7]
    3414:	e7a4      	b.n	3360 <next_process+0x20>
				if (variable < data->value) unblocked = true;
    3416:	6863      	ldr	r3, [r4, #4]
    3418:	42bb      	cmp	r3, r7
    341a:	d9a1      	bls.n	3360 <next_process+0x20>
    341c:	466b      	mov	r3, sp
    341e:	2101      	movs	r1, #1
    3420:	71d9      	strb	r1, [r3, #7]
    3422:	e79d      	b.n	3360 <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    3424:	6863      	ldr	r3, [r4, #4]
    3426:	42bb      	cmp	r3, r7
    3428:	d39a      	bcc.n	3360 <next_process+0x20>
    342a:	466b      	mov	r3, sp
    342c:	2101      	movs	r1, #1
    342e:	71d9      	strb	r1, [r3, #7]
    3430:	e796      	b.n	3360 <next_process+0x20>
				current_process->status = Process_State_Running;
    3432:	2301      	movs	r3, #1
    3434:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    3436:	4b1b      	ldr	r3, [pc, #108]	; (34a4 <next_process+0x164>)
    3438:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    343a:	0028      	movs	r0, r5
    343c:	e015      	b.n	346a <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    343e:	4919      	ldr	r1, [pc, #100]	; (34a4 <next_process+0x164>)
    3440:	688e      	ldr	r6, [r1, #8]
    3442:	1986      	adds	r6, r0, r6
    3444:	1e73      	subs	r3, r6, #1
    3446:	17df      	asrs	r7, r3, #31
    3448:	0f3f      	lsrs	r7, r7, #28
    344a:	19db      	adds	r3, r3, r7
    344c:	220f      	movs	r2, #15
    344e:	4013      	ands	r3, r2
    3450:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    3452:	17f7      	asrs	r7, r6, #31
    3454:	0f3f      	lsrs	r7, r7, #28
    3456:	19f6      	adds	r6, r6, r7
    3458:	4032      	ands	r2, r6
    345a:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    345c:	009b      	lsls	r3, r3, #2
    345e:	18cb      	adds	r3, r1, r3
    3460:	691b      	ldr	r3, [r3, #16]
    3462:	0092      	lsls	r2, r2, #2
    3464:	1889      	adds	r1, r1, r2
    3466:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    3468:	3801      	subs	r0, #1
    346a:	2800      	cmp	r0, #0
    346c:	dce7      	bgt.n	343e <next_process+0xfe>
	}

	--process_count;
    346e:	490d      	ldr	r1, [pc, #52]	; (34a4 <next_process+0x164>)
    3470:	1e63      	subs	r3, r4, #1
    3472:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    3474:	688b      	ldr	r3, [r1, #8]
    3476:	3301      	adds	r3, #1
    3478:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    347a:	17d8      	asrs	r0, r3, #31
    347c:	0f00      	lsrs	r0, r0, #28
    347e:	181b      	adds	r3, r3, r0
    3480:	220f      	movs	r2, #15
    3482:	4013      	ands	r3, r2
    3484:	1a1b      	subs	r3, r3, r0
    3486:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    3488:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    348a:	42ac      	cmp	r4, r5
    348c:	d103      	bne.n	3496 <next_process+0x156>
	
	return current_process;
    348e:	4b05      	ldr	r3, [pc, #20]	; (34a4 <next_process+0x164>)
    3490:	6818      	ldr	r0, [r3, #0]
}
    3492:	b003      	add	sp, #12
    3494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    3496:	4b03      	ldr	r3, [pc, #12]	; (34a4 <next_process+0x164>)
    3498:	6818      	ldr	r0, [r3, #0]
    349a:	4b04      	ldr	r3, [pc, #16]	; (34ac <next_process+0x16c>)
    349c:	4798      	blx	r3
    349e:	e7f6      	b.n	348e <next_process+0x14e>
			switch (data->condition) {
    34a0:	2000      	movs	r0, #0
    34a2:	e7f6      	b.n	3492 <next_process+0x152>
    34a4:	20000634 	.word	0x20000634
    34a8:	00005b68 	.word	0x00005b68
    34ac:	000031d1 	.word	0x000031d1

000034b0 <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    34b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34b2:	465f      	mov	r7, fp
    34b4:	4656      	mov	r6, sl
    34b6:	464d      	mov	r5, r9
    34b8:	4644      	mov	r4, r8
    34ba:	b4f0      	push	{r4, r5, r6, r7}
    34bc:	b083      	sub	sp, #12
    34be:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    34c0:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    34c4:	2b00      	cmp	r3, #0
    34c6:	d01c      	beq.n	3502 <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    34c8:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    34ca:	4b0f      	ldr	r3, [pc, #60]	; (3508 <yield_process+0x58>)
    34cc:	9301      	str	r3, [sp, #4]
    34ce:	681b      	ldr	r3, [r3, #0]
    34d0:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    34d2:	2208      	movs	r2, #8
    34d4:	4252      	negs	r2, r2
    34d6:	446a      	add	r2, sp
    34d8:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    34da:	685a      	ldr	r2, [r3, #4]
    34dc:	3a04      	subs	r2, #4
    34de:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    34e0:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    34e2:	3204      	adds	r2, #4
    34e4:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    34e6:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    34e8:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    34ea:	9b01      	ldr	r3, [sp, #4]
    34ec:	681b      	ldr	r3, [r3, #0]
    34ee:	2203      	movs	r2, #3
    34f0:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    34f2:	b662      	cpsie	i
	
	__enable_irq();
}
    34f4:	b003      	add	sp, #12
    34f6:	bcf0      	pop	{r4, r5, r6, r7}
    34f8:	46bb      	mov	fp, r7
    34fa:	46b2      	mov	sl, r6
    34fc:	46a9      	mov	r9, r5
    34fe:	46a0      	mov	r8, r4
    3500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    3502:	4b02      	ldr	r3, [pc, #8]	; (350c <yield_process+0x5c>)
    3504:	4798      	blx	r3
    3506:	e7df      	b.n	34c8 <yield_process+0x18>
    3508:	20000634 	.word	0x20000634
    350c:	000030e5 	.word	0x000030e5

00003510 <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    3510:	b5f0      	push	{r4, r5, r6, r7, lr}
    3512:	464f      	mov	r7, r9
    3514:	4646      	mov	r6, r8
    3516:	b4c0      	push	{r6, r7}
    3518:	b08b      	sub	sp, #44	; 0x2c
    351a:	4681      	mov	r9, r0
    351c:	000f      	movs	r7, r1
    351e:	4690      	mov	r8, r2
    3520:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    3522:	4e0f      	ldr	r6, [pc, #60]	; (3560 <wait_until+0x50>)
    3524:	6834      	ldr	r4, [r6, #0]
    3526:	4b0f      	ldr	r3, [pc, #60]	; (3564 <wait_until+0x54>)
    3528:	4798      	blx	r3
    352a:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    352c:	ac05      	add	r4, sp, #20
    352e:	464b      	mov	r3, r9
    3530:	9305      	str	r3, [sp, #20]
    3532:	9706      	str	r7, [sp, #24]
    3534:	4643      	mov	r3, r8
    3536:	9307      	str	r3, [sp, #28]
    3538:	2300      	movs	r3, #0
    353a:	9308      	str	r3, [sp, #32]
    353c:	7425      	strb	r5, [r4, #16]
    353e:	466b      	mov	r3, sp
    3540:	001a      	movs	r2, r3
    3542:	cc23      	ldmia	r4!, {r0, r1, r5}
    3544:	c223      	stmia	r2!, {r0, r1, r5}
    3546:	cc03      	ldmia	r4!, {r0, r1}
    3548:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    354a:	6832      	ldr	r2, [r6, #0]
    354c:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    354e:	2002      	movs	r0, #2
    3550:	4b05      	ldr	r3, [pc, #20]	; (3568 <wait_until+0x58>)
    3552:	4798      	blx	r3
}
    3554:	b00b      	add	sp, #44	; 0x2c
    3556:	bcc0      	pop	{r6, r7}
    3558:	46b9      	mov	r9, r7
    355a:	46b0      	mov	r8, r6
    355c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	20000634 	.word	0x20000634
    3564:	000024e5 	.word	0x000024e5
    3568:	000034b1 	.word	0x000034b1

0000356c <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    356c:	b5f0      	push	{r4, r5, r6, r7, lr}
    356e:	464f      	mov	r7, r9
    3570:	4646      	mov	r6, r8
    3572:	b4c0      	push	{r6, r7}
    3574:	b08b      	sub	sp, #44	; 0x2c
    3576:	4681      	mov	r9, r0
    3578:	000f      	movs	r7, r1
    357a:	4690      	mov	r8, r2
    357c:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    357e:	4e0f      	ldr	r6, [pc, #60]	; (35bc <wait_until_callback+0x50>)
    3580:	6834      	ldr	r4, [r6, #0]
    3582:	4b0f      	ldr	r3, [pc, #60]	; (35c0 <wait_until_callback+0x54>)
    3584:	4798      	blx	r3
    3586:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3588:	ac05      	add	r4, sp, #20
    358a:	464b      	mov	r3, r9
    358c:	9305      	str	r3, [sp, #20]
    358e:	9706      	str	r7, [sp, #24]
    3590:	4643      	mov	r3, r8
    3592:	9307      	str	r3, [sp, #28]
    3594:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3596:	9308      	str	r3, [sp, #32]
    3598:	7425      	strb	r5, [r4, #16]
    359a:	466b      	mov	r3, sp
    359c:	001a      	movs	r2, r3
    359e:	cc23      	ldmia	r4!, {r0, r1, r5}
    35a0:	c223      	stmia	r2!, {r0, r1, r5}
    35a2:	cc03      	ldmia	r4!, {r0, r1}
    35a4:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    35a6:	6832      	ldr	r2, [r6, #0]
    35a8:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    35aa:	2002      	movs	r0, #2
    35ac:	4b05      	ldr	r3, [pc, #20]	; (35c4 <wait_until_callback+0x58>)
    35ae:	4798      	blx	r3
}
    35b0:	b00b      	add	sp, #44	; 0x2c
    35b2:	bcc0      	pop	{r6, r7}
    35b4:	46b9      	mov	r9, r7
    35b6:	46b0      	mov	r8, r6
    35b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	20000634 	.word	0x20000634
    35c0:	000024e5 	.word	0x000024e5
    35c4:	000034b1 	.word	0x000034b1

000035c8 <wait_until_callback_preserve_deadline>:

void wait_until_callback_preserve_deadline(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    35c8:	b530      	push	{r4, r5, lr}
    35ca:	b08b      	sub	sp, #44	; 0x2c
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    35cc:	ac05      	add	r4, sp, #20
    35ce:	9005      	str	r0, [sp, #20]
    35d0:	9106      	str	r1, [sp, #24]
    35d2:	9207      	str	r2, [sp, #28]
    35d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    35d6:	9208      	str	r2, [sp, #32]
    35d8:	7423      	strb	r3, [r4, #16]
    35da:	466b      	mov	r3, sp
    35dc:	001a      	movs	r2, r3
    35de:	cc23      	ldmia	r4!, {r0, r1, r5}
    35e0:	c223      	stmia	r2!, {r0, r1, r5}
    35e2:	cc03      	ldmia	r4!, {r0, r1}
    35e4:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    35e6:	4a04      	ldr	r2, [pc, #16]	; (35f8 <wait_until_callback_preserve_deadline+0x30>)
    35e8:	6812      	ldr	r2, [r2, #0]
    35ea:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    35ec:	2002      	movs	r0, #2
    35ee:	4b03      	ldr	r3, [pc, #12]	; (35fc <wait_until_callback_preserve_deadline+0x34>)
    35f0:	4798      	blx	r3
    35f2:	b00b      	add	sp, #44	; 0x2c
    35f4:	bd30      	pop	{r4, r5, pc}
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	20000634 	.word	0x20000634
    35fc:	000034b1 	.word	0x000034b1

00003600 <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    3600:	b500      	push	{lr}
    3602:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    3604:	4b0c      	ldr	r3, [pc, #48]	; (3638 <rtos_delay_callback+0x38>)
    3606:	4798      	blx	r3
    3608:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    360a:	4b0c      	ldr	r3, [pc, #48]	; (363c <rtos_delay_callback+0x3c>)
    360c:	681a      	ldr	r2, [r3, #0]
    360e:	6953      	ldr	r3, [r2, #20]
    3610:	9901      	ldr	r1, [sp, #4]
    3612:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    3614:	490a      	ldr	r1, [pc, #40]	; (3640 <rtos_delay_callback+0x40>)
    3616:	6809      	ldr	r1, [r1, #0]
    3618:	4299      	cmp	r1, r3
    361a:	dc07      	bgt.n	362c <rtos_delay_callback+0x2c>
    361c:	4908      	ldr	r1, [pc, #32]	; (3640 <rtos_delay_callback+0x40>)
    361e:	6808      	ldr	r0, [r1, #0]
    3620:	4907      	ldr	r1, [pc, #28]	; (3640 <rtos_delay_callback+0x40>)
    3622:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    3624:	2b00      	cmp	r3, #0
    3626:	dd03      	ble.n	3630 <rtos_delay_callback+0x30>
}
    3628:	b003      	add	sp, #12
    362a:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    362c:	0018      	movs	r0, r3
    362e:	e7f7      	b.n	3620 <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    3630:	2301      	movs	r3, #1
    3632:	6193      	str	r3, [r2, #24]
}
    3634:	e7f8      	b.n	3628 <rtos_delay_callback+0x28>
    3636:	46c0      	nop			; (mov r8, r8)
    3638:	000024e5 	.word	0x000024e5
    363c:	20000634 	.word	0x20000634
    3640:	200000b0 	.word	0x200000b0

00003644 <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    3644:	b570      	push	{r4, r5, r6, lr}
    3646:	b086      	sub	sp, #24
    3648:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    364a:	4b09      	ldr	r3, [pc, #36]	; (3670 <rtos_delay_ctick+0x2c>)
    364c:	4798      	blx	r3
    364e:	4b09      	ldr	r3, [pc, #36]	; (3674 <rtos_delay_ctick+0x30>)
    3650:	681d      	ldr	r5, [r3, #0]
    3652:	1900      	adds	r0, r0, r4
    3654:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3656:	aa01      	add	r2, sp, #4
    3658:	4b07      	ldr	r3, [pc, #28]	; (3678 <rtos_delay_ctick+0x34>)
    365a:	0011      	movs	r1, r2
    365c:	cb51      	ldmia	r3!, {r0, r4, r6}
    365e:	c151      	stmia	r1!, {r0, r4, r6}
    3660:	cb11      	ldmia	r3!, {r0, r4}
    3662:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3664:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    3666:	2002      	movs	r0, #2
    3668:	4b04      	ldr	r3, [pc, #16]	; (367c <rtos_delay_ctick+0x38>)
    366a:	4798      	blx	r3
    366c:	b006      	add	sp, #24
    366e:	bd70      	pop	{r4, r5, r6, pc}
    3670:	000024e5 	.word	0x000024e5
    3674:	20000634 	.word	0x20000634
    3678:	00005b84 	.word	0x00005b84
    367c:	000034b1 	.word	0x000034b1

00003680 <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    3680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3682:	4b16      	ldr	r3, [pc, #88]	; (36dc <busmanager_process_wait_callback+0x5c>)
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    3688:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    368a:	2500      	movs	r5, #0
    368c:	e00b      	b.n	36a6 <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    368e:	4b13      	ldr	r3, [pc, #76]	; (36dc <busmanager_process_wait_callback+0x5c>)
    3690:	681b      	ldr	r3, [r3, #0]
    3692:	2201      	movs	r2, #1
    3694:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    3696:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3698:	17e3      	asrs	r3, r4, #31
    369a:	0f5b      	lsrs	r3, r3, #29
    369c:	18e4      	adds	r4, r4, r3
    369e:	2207      	movs	r2, #7
    36a0:	4014      	ands	r4, r2
    36a2:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    36a4:	3501      	adds	r5, #1
    36a6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    36a8:	42ab      	cmp	r3, r5
    36aa:	dd15      	ble.n	36d8 <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    36ac:	1ca3      	adds	r3, r4, #2
    36ae:	009b      	lsls	r3, r3, #2
    36b0:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    36b2:	7d1a      	ldrb	r2, [r3, #20]
    36b4:	2a00      	cmp	r2, #0
    36b6:	d0ee      	beq.n	3696 <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    36b8:	7c1a      	ldrb	r2, [r3, #16]
    36ba:	7c59      	ldrb	r1, [r3, #17]
    36bc:	0209      	lsls	r1, r1, #8
    36be:	4311      	orrs	r1, r2
    36c0:	7c9a      	ldrb	r2, [r3, #18]
    36c2:	0412      	lsls	r2, r2, #16
    36c4:	430a      	orrs	r2, r1
    36c6:	7cdf      	ldrb	r7, [r3, #19]
    36c8:	063f      	lsls	r7, r7, #24
    36ca:	4317      	orrs	r7, r2
    36cc:	4b04      	ldr	r3, [pc, #16]	; (36e0 <busmanager_process_wait_callback+0x60>)
    36ce:	4798      	blx	r3
    36d0:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    36d2:	2f00      	cmp	r7, #0
    36d4:	dcdf      	bgt.n	3696 <busmanager_process_wait_callback+0x16>
    36d6:	e7da      	b.n	368e <busmanager_process_wait_callback+0xe>
	}
}
    36d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36da:	46c0      	nop			; (mov r8, r8)
    36dc:	20000634 	.word	0x20000634
    36e0:	000024e5 	.word	0x000024e5

000036e4 <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    36e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    36e6:	780c      	ldrb	r4, [r1, #0]
    36e8:	784d      	ldrb	r5, [r1, #1]
    36ea:	022d      	lsls	r5, r5, #8
    36ec:	4325      	orrs	r5, r4
    36ee:	788c      	ldrb	r4, [r1, #2]
    36f0:	0424      	lsls	r4, r4, #16
    36f2:	432c      	orrs	r4, r5
    36f4:	78cf      	ldrb	r7, [r1, #3]
    36f6:	063f      	lsls	r7, r7, #24
    36f8:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    36fa:	2601      	movs	r6, #1
    36fc:	e000      	b.n	3700 <set_matching_id_status+0x1c>
    36fe:	3601      	adds	r6, #1
    3700:	6b01      	ldr	r1, [r0, #48]	; 0x30
    3702:	42b1      	cmp	r1, r6
    3704:	dd17      	ble.n	3736 <set_matching_id_status+0x52>
		++queue_pointer;
    3706:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3708:	17d1      	asrs	r1, r2, #31
    370a:	0f49      	lsrs	r1, r1, #29
    370c:	1852      	adds	r2, r2, r1
    370e:	2407      	movs	r4, #7
    3710:	4022      	ands	r2, r4
    3712:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    3714:	1c91      	adds	r1, r2, #2
    3716:	0089      	lsls	r1, r1, #2
    3718:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    371a:	782c      	ldrb	r4, [r5, #0]
    371c:	7869      	ldrb	r1, [r5, #1]
    371e:	0209      	lsls	r1, r1, #8
    3720:	4321      	orrs	r1, r4
    3722:	78ac      	ldrb	r4, [r5, #2]
    3724:	0424      	lsls	r4, r4, #16
    3726:	430c      	orrs	r4, r1
    3728:	78e9      	ldrb	r1, [r5, #3]
    372a:	0609      	lsls	r1, r1, #24
    372c:	4321      	orrs	r1, r4
    372e:	42b9      	cmp	r1, r7
    3730:	d1e5      	bne.n	36fe <set_matching_id_status+0x1a>
    3732:	756b      	strb	r3, [r5, #21]
    3734:	e7e3      	b.n	36fe <set_matching_id_status+0x1a>
}
    3736:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003738 <busmanager_process_function>:

void busmanager_process_function() {
    3738:	b5f0      	push	{r4, r5, r6, r7, lr}
    373a:	46ce      	mov	lr, r9
    373c:	4647      	mov	r7, r8
    373e:	b580      	push	{r7, lr}
    3740:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3742:	4b62      	ldr	r3, [pc, #392]	; (38cc <busmanager_process_function+0x194>)
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	6a1f      	ldr	r7, [r3, #32]
    3748:	e05d      	b.n	3806 <busmanager_process_function+0xce>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    374a:	0038      	movs	r0, r7
    374c:	3030      	adds	r0, #48	; 0x30
    374e:	2201      	movs	r2, #1
    3750:	3302      	adds	r3, #2
    3752:	4252      	negs	r2, r2
    3754:	2100      	movs	r1, #0
    3756:	4c5e      	ldr	r4, [pc, #376]	; (38d0 <busmanager_process_function+0x198>)
    3758:	47a0      	blx	r4
    375a:	e057      	b.n	380c <busmanager_process_function+0xd4>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    375c:	7d2b      	ldrb	r3, [r5, #20]
    375e:	2b00      	cmp	r3, #0
    3760:	d158      	bne.n	3814 <busmanager_process_function+0xdc>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    3762:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3764:	17e3      	asrs	r3, r4, #31
    3766:	0f5b      	lsrs	r3, r3, #29
    3768:	18e4      	adds	r4, r4, r3
    376a:	2207      	movs	r2, #7
    376c:	4014      	ands	r4, r2
    376e:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3770:	2301      	movs	r3, #1
    3772:	469c      	mov	ip, r3
    3774:	44e1      	add	r9, ip
    3776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3778:	454b      	cmp	r3, r9
    377a:	dd09      	ble.n	3790 <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    377c:	1ca3      	adds	r3, r4, #2
    377e:	009b      	lsls	r3, r3, #2
    3780:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    3782:	2315      	movs	r3, #21
    3784:	56eb      	ldrsb	r3, [r5, r3]
    3786:	2b00      	cmp	r3, #0
    3788:	d1e8      	bne.n	375c <busmanager_process_function+0x24>
    378a:	7d2b      	ldrb	r3, [r5, #20]
    378c:	2b00      	cmp	r3, #0
    378e:	d1e5      	bne.n	375c <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    3790:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3792:	4549      	cmp	r1, r9
    3794:	d05e      	beq.n	3854 <busmanager_process_function+0x11c>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    3796:	2315      	movs	r3, #21
    3798:	56eb      	ldrsb	r3, [r5, r3]
    379a:	2b02      	cmp	r3, #2
    379c:	d02f      	beq.n	37fe <busmanager_process_function+0xc6>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    379e:	7b2a      	ldrb	r2, [r5, #12]
    37a0:	7b6b      	ldrb	r3, [r5, #13]
    37a2:	021b      	lsls	r3, r3, #8
    37a4:	4313      	orrs	r3, r2
    37a6:	7baa      	ldrb	r2, [r5, #14]
    37a8:	0412      	lsls	r2, r2, #16
    37aa:	431a      	orrs	r2, r3
    37ac:	7beb      	ldrb	r3, [r5, #15]
    37ae:	061b      	lsls	r3, r3, #24
    37b0:	4313      	orrs	r3, r2
    37b2:	d059      	beq.n	3868 <busmanager_process_function+0x130>
				SOS();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    37b4:	7b2b      	ldrb	r3, [r5, #12]
    37b6:	7b6a      	ldrb	r2, [r5, #13]
    37b8:	0212      	lsls	r2, r2, #8
    37ba:	431a      	orrs	r2, r3
    37bc:	7bab      	ldrb	r3, [r5, #14]
    37be:	041b      	lsls	r3, r3, #16
    37c0:	4313      	orrs	r3, r2
    37c2:	7bec      	ldrb	r4, [r5, #15]
    37c4:	0624      	lsls	r4, r4, #24
    37c6:	431c      	orrs	r4, r3
    37c8:	7a2b      	ldrb	r3, [r5, #8]
    37ca:	7a6a      	ldrb	r2, [r5, #9]
    37cc:	0212      	lsls	r2, r2, #8
    37ce:	431a      	orrs	r2, r3
    37d0:	7aab      	ldrb	r3, [r5, #10]
    37d2:	041b      	lsls	r3, r3, #16
    37d4:	4313      	orrs	r3, r2
    37d6:	7aea      	ldrb	r2, [r5, #11]
    37d8:	0612      	lsls	r2, r2, #24
    37da:	431a      	orrs	r2, r3
    37dc:	6879      	ldr	r1, [r7, #4]
    37de:	792b      	ldrb	r3, [r5, #4]
    37e0:	7968      	ldrb	r0, [r5, #5]
    37e2:	0200      	lsls	r0, r0, #8
    37e4:	4318      	orrs	r0, r3
    37e6:	79ab      	ldrb	r3, [r5, #6]
    37e8:	041b      	lsls	r3, r3, #16
    37ea:	4303      	orrs	r3, r0
    37ec:	79e8      	ldrb	r0, [r5, #7]
    37ee:	0600      	lsls	r0, r0, #24
    37f0:	4318      	orrs	r0, r3
    37f2:	002b      	movs	r3, r5
    37f4:	47a0      	blx	r4
    37f6:	2800      	cmp	r0, #0
    37f8:	d001      	beq.n	37fe <busmanager_process_function+0xc6>
				current_request->status = BusManager_Request_Complete;
    37fa:	2302      	movs	r3, #2
    37fc:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    37fe:	2315      	movs	r3, #21
    3800:	56eb      	ldrsb	r3, [r5, r3]
    3802:	2b02      	cmp	r3, #2
    3804:	d033      	beq.n	386e <busmanager_process_function+0x136>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    3806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3808:	2b00      	cmp	r3, #0
    380a:	d09e      	beq.n	374a <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    380c:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    380e:	2300      	movs	r3, #0
    3810:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3812:	e7b0      	b.n	3776 <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    3814:	7c2a      	ldrb	r2, [r5, #16]
    3816:	7c6b      	ldrb	r3, [r5, #17]
    3818:	021b      	lsls	r3, r3, #8
    381a:	4313      	orrs	r3, r2
    381c:	7caa      	ldrb	r2, [r5, #18]
    381e:	0412      	lsls	r2, r2, #16
    3820:	431a      	orrs	r2, r3
    3822:	7ceb      	ldrb	r3, [r5, #19]
    3824:	061b      	lsls	r3, r3, #24
    3826:	4313      	orrs	r3, r2
    3828:	4698      	mov	r8, r3
    382a:	4b2a      	ldr	r3, [pc, #168]	; (38d4 <busmanager_process_function+0x19c>)
    382c:	4798      	blx	r3
    382e:	4643      	mov	r3, r8
    3830:	1a18      	subs	r0, r3, r0
    3832:	2800      	cmp	r0, #0
    3834:	dd06      	ble.n	3844 <busmanager_process_function+0x10c>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    3836:	2301      	movs	r3, #1
    3838:	0022      	movs	r2, r4
    383a:	0029      	movs	r1, r5
    383c:	0038      	movs	r0, r7
    383e:	4e26      	ldr	r6, [pc, #152]	; (38d8 <busmanager_process_function+0x1a0>)
    3840:	47b0      	blx	r6
			if (unblocked) break;
    3842:	e78e      	b.n	3762 <busmanager_process_function+0x2a>
					current_request->busy = false;
    3844:	2300      	movs	r3, #0
    3846:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    3848:	0022      	movs	r2, r4
    384a:	0029      	movs	r1, r5
    384c:	0038      	movs	r0, r7
    384e:	4c22      	ldr	r4, [pc, #136]	; (38d8 <busmanager_process_function+0x1a0>)
    3850:	47a0      	blx	r4
			if (unblocked) break;
    3852:	e79d      	b.n	3790 <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    3854:	0038      	movs	r0, r7
    3856:	3030      	adds	r0, #48	; 0x30
    3858:	2201      	movs	r2, #1
    385a:	4b20      	ldr	r3, [pc, #128]	; (38dc <busmanager_process_function+0x1a4>)
    385c:	9300      	str	r3, [sp, #0]
    385e:	2301      	movs	r3, #1
    3860:	4252      	negs	r2, r2
    3862:	4c1f      	ldr	r4, [pc, #124]	; (38e0 <busmanager_process_function+0x1a8>)
    3864:	47a0      	blx	r4
			continue;
    3866:	e7ce      	b.n	3806 <busmanager_process_function+0xce>
				SOS();
    3868:	4b1e      	ldr	r3, [pc, #120]	; (38e4 <busmanager_process_function+0x1ac>)
    386a:	4798      	blx	r3
    386c:	e7a2      	b.n	37b4 <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    386e:	7d2b      	ldrb	r3, [r5, #20]
    3870:	2b00      	cmp	r3, #0
    3872:	d1c8      	bne.n	3806 <busmanager_process_function+0xce>
			current_request->status = BusManager_Request_CompleteNotBusy;
    3874:	3303      	adds	r3, #3
    3876:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    3878:	e017      	b.n	38aa <busmanager_process_function+0x172>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    387a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    387c:	4449      	add	r1, r9
    387e:	1e4b      	subs	r3, r1, #1
    3880:	17d8      	asrs	r0, r3, #31
    3882:	0f40      	lsrs	r0, r0, #29
    3884:	181b      	adds	r3, r3, r0
    3886:	2207      	movs	r2, #7
    3888:	4013      	ands	r3, r2
    388a:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    388c:	17c8      	asrs	r0, r1, #31
    388e:	0f40      	lsrs	r0, r0, #29
    3890:	1809      	adds	r1, r1, r0
    3892:	400a      	ands	r2, r1
    3894:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    3896:	3302      	adds	r3, #2
    3898:	009b      	lsls	r3, r3, #2
    389a:	59d9      	ldr	r1, [r3, r7]
    389c:	3202      	adds	r2, #2
    389e:	0093      	lsls	r3, r2, #2
    38a0:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    38a2:	2301      	movs	r3, #1
    38a4:	425b      	negs	r3, r3
    38a6:	469c      	mov	ip, r3
    38a8:	44e1      	add	r9, ip
    38aa:	464b      	mov	r3, r9
    38ac:	2b00      	cmp	r3, #0
    38ae:	dce4      	bgt.n	387a <busmanager_process_function+0x142>
			}

			--(data->request_count);
    38b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38b2:	3b01      	subs	r3, #1
    38b4:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    38b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38b8:	3301      	adds	r3, #1
    38ba:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    38bc:	17d9      	asrs	r1, r3, #31
    38be:	0f49      	lsrs	r1, r1, #29
    38c0:	185b      	adds	r3, r3, r1
    38c2:	2207      	movs	r2, #7
    38c4:	4013      	ands	r3, r2
    38c6:	1a5b      	subs	r3, r3, r1
    38c8:	62bb      	str	r3, [r7, #40]	; 0x28
    38ca:	e79c      	b.n	3806 <busmanager_process_function+0xce>
    38cc:	20000634 	.word	0x20000634
    38d0:	00003511 	.word	0x00003511
    38d4:	000024e5 	.word	0x000024e5
    38d8:	000036e5 	.word	0x000036e5
    38dc:	00003681 	.word	0x00003681
    38e0:	0000356d 	.word	0x0000356d
    38e4:	000030e5 	.word	0x000030e5

000038e8 <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    38e8:	b570      	push	{r4, r5, r6, lr}
    38ea:	0004      	movs	r4, r0
    38ec:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    38ee:	480a      	ldr	r0, [pc, #40]	; (3918 <busmanager_new_process+0x30>)
    38f0:	0013      	movs	r3, r2
    38f2:	000a      	movs	r2, r1
    38f4:	0001      	movs	r1, r0
    38f6:	0020      	movs	r0, r4
    38f8:	4e08      	ldr	r6, [pc, #32]	; (391c <busmanager_new_process+0x34>)
    38fa:	47b0      	blx	r6
	proc->data.sercom = sercom;
    38fc:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    38fe:	9b04      	ldr	r3, [sp, #16]
    3900:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    3902:	2300      	movs	r3, #0
    3904:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    3906:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    3908:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    390a:	0023      	movs	r3, r4
    390c:	3328      	adds	r3, #40	; 0x28
    390e:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    3910:	0020      	movs	r0, r4
    3912:	4b03      	ldr	r3, [pc, #12]	; (3920 <busmanager_new_process+0x38>)
    3914:	4798      	blx	r3
}
    3916:	bd70      	pop	{r4, r5, r6, pc}
    3918:	00003739 	.word	0x00003739
    391c:	000031a5 	.word	0x000031a5
    3920:	0000328d 	.word	0x0000328d

00003924 <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    3924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3926:	0004      	movs	r4, r0
    3928:	000d      	movs	r5, r1
    392a:	9806      	ldr	r0, [sp, #24]
    392c:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    392e:	2600      	movs	r6, #0
    3930:	702a      	strb	r2, [r5, #0]
    3932:	0a17      	lsrs	r7, r2, #8
    3934:	706f      	strb	r7, [r5, #1]
    3936:	0c17      	lsrs	r7, r2, #16
    3938:	70af      	strb	r7, [r5, #2]
    393a:	0e12      	lsrs	r2, r2, #24
    393c:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    393e:	712b      	strb	r3, [r5, #4]
    3940:	0a1a      	lsrs	r2, r3, #8
    3942:	716a      	strb	r2, [r5, #5]
    3944:	0c1a      	lsrs	r2, r3, #16
    3946:	71aa      	strb	r2, [r5, #6]
    3948:	0e1b      	lsrs	r3, r3, #24
    394a:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    394c:	7228      	strb	r0, [r5, #8]
    394e:	0a03      	lsrs	r3, r0, #8
    3950:	726b      	strb	r3, [r5, #9]
    3952:	0c03      	lsrs	r3, r0, #16
    3954:	72ab      	strb	r3, [r5, #10]
    3956:	0e00      	lsrs	r0, r0, #24
    3958:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    395a:	7329      	strb	r1, [r5, #12]
    395c:	0a0b      	lsrs	r3, r1, #8
    395e:	736b      	strb	r3, [r5, #13]
    3960:	0c0b      	lsrs	r3, r1, #16
    3962:	73ab      	strb	r3, [r5, #14]
    3964:	0e09      	lsrs	r1, r1, #24
    3966:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    3968:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    396a:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    396c:	e007      	b.n	397e <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    396e:	0020      	movs	r0, r4
    3970:	3058      	adds	r0, #88	; 0x58
    3972:	2201      	movs	r2, #1
    3974:	2301      	movs	r3, #1
    3976:	4252      	negs	r2, r2
    3978:	2108      	movs	r1, #8
    397a:	4e0b      	ldr	r6, [pc, #44]	; (39a8 <busmanager_request_transaction+0x84>)
    397c:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    397e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3980:	2b08      	cmp	r3, #8
    3982:	d0f4      	beq.n	396e <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    3984:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3986:	0011      	movs	r1, r2
    3988:	310c      	adds	r1, #12
    398a:	0089      	lsls	r1, r1, #2
    398c:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    398e:	3301      	adds	r3, #1
    3990:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    3992:	3201      	adds	r2, #1
    3994:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3996:	17d1      	asrs	r1, r2, #31
    3998:	0f49      	lsrs	r1, r1, #29
    399a:	1853      	adds	r3, r2, r1
    399c:	2207      	movs	r2, #7
    399e:	4013      	ands	r3, r2
    39a0:	1a5b      	subs	r3, r3, r1
    39a2:	6563      	str	r3, [r4, #84]	; 0x54
    39a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	00003511 	.word	0x00003511

000039ac <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    39ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ae:	46de      	mov	lr, fp
    39b0:	4657      	mov	r7, sl
    39b2:	464e      	mov	r6, r9
    39b4:	4645      	mov	r5, r8
    39b6:	b5e0      	push	{r5, r6, r7, lr}
    39b8:	b089      	sub	sp, #36	; 0x24
    39ba:	0004      	movs	r4, r0
    39bc:	000e      	movs	r6, r1
    39be:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    39c0:	ab07      	add	r3, sp, #28
    39c2:	2003      	movs	r0, #3
    39c4:	4682      	mov	sl, r0
    39c6:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    39c8:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    39ca:	2115      	movs	r1, #21
    39cc:	a802      	add	r0, sp, #8
    39ce:	4684      	mov	ip, r0
    39d0:	4461      	add	r1, ip
    39d2:	0a10      	lsrs	r0, r2, #8
    39d4:	7008      	strb	r0, [r1, #0]
    39d6:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    39d8:	7822      	ldrb	r2, [r4, #0]
    39da:	7861      	ldrb	r1, [r4, #1]
    39dc:	0209      	lsls	r1, r1, #8
    39de:	4311      	orrs	r1, r2
    39e0:	78a2      	ldrb	r2, [r4, #2]
    39e2:	0412      	lsls	r2, r2, #16
    39e4:	430a      	orrs	r2, r1
    39e6:	78e5      	ldrb	r5, [r4, #3]
    39e8:	062d      	lsls	r5, r5, #24
    39ea:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    39ec:	9604      	str	r6, [sp, #16]
    39ee:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    39f0:	2128      	movs	r1, #40	; 0x28
    39f2:	4689      	mov	r9, r1
    39f4:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    39f6:	0100      	lsls	r0, r0, #4
    39f8:	4e24      	ldr	r6, [pc, #144]	; (3a8c <dma_eeprom_read+0xe0>)
    39fa:	1980      	adds	r0, r0, r6
    39fc:	4924      	ldr	r1, [pc, #144]	; (3a90 <dma_eeprom_read+0xe4>)
    39fe:	468b      	mov	fp, r1
    3a00:	9103      	str	r1, [sp, #12]
    3a02:	4649      	mov	r1, r9
    3a04:	9102      	str	r1, [sp, #8]
    3a06:	9301      	str	r3, [sp, #4]
    3a08:	4651      	mov	r1, sl
    3a0a:	9100      	str	r1, [sp, #0]
    3a0c:	2300      	movs	r3, #0
    3a0e:	2200      	movs	r2, #0
    3a10:	3902      	subs	r1, #2
    3a12:	4f20      	ldr	r7, [pc, #128]	; (3a94 <dma_eeprom_read+0xe8>)
    3a14:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3a16:	466b      	mov	r3, sp
    3a18:	8a9b      	ldrh	r3, [r3, #20]
    3a1a:	4698      	mov	r8, r3
    3a1c:	2300      	movs	r3, #0
    3a1e:	9303      	str	r3, [sp, #12]
    3a20:	4649      	mov	r1, r9
    3a22:	9102      	str	r1, [sp, #8]
    3a24:	4b1c      	ldr	r3, [pc, #112]	; (3a98 <dma_eeprom_read+0xec>)
    3a26:	9301      	str	r3, [sp, #4]
    3a28:	4641      	mov	r1, r8
    3a2a:	9100      	str	r1, [sp, #0]
    3a2c:	2300      	movs	r3, #0
    3a2e:	2200      	movs	r2, #0
    3a30:	2100      	movs	r1, #0
    3a32:	4658      	mov	r0, fp
    3a34:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3a36:	9a04      	ldr	r2, [sp, #16]
    3a38:	7850      	ldrb	r0, [r2, #1]
    3a3a:	0100      	lsls	r0, r0, #4
    3a3c:	1980      	adds	r0, r0, r6
    3a3e:	4917      	ldr	r1, [pc, #92]	; (3a9c <dma_eeprom_read+0xf0>)
    3a40:	468b      	mov	fp, r1
    3a42:	9103      	str	r1, [sp, #12]
    3a44:	4b16      	ldr	r3, [pc, #88]	; (3aa0 <dma_eeprom_read+0xf4>)
    3a46:	9302      	str	r3, [sp, #8]
    3a48:	4649      	mov	r1, r9
    3a4a:	9101      	str	r1, [sp, #4]
    3a4c:	4651      	mov	r1, sl
    3a4e:	9100      	str	r1, [sp, #0]
    3a50:	2300      	movs	r3, #0
    3a52:	2200      	movs	r2, #0
    3a54:	2100      	movs	r1, #0
    3a56:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3a58:	2300      	movs	r3, #0
    3a5a:	9303      	str	r3, [sp, #12]
    3a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a5e:	9302      	str	r3, [sp, #8]
    3a60:	464b      	mov	r3, r9
    3a62:	9301      	str	r3, [sp, #4]
    3a64:	4643      	mov	r3, r8
    3a66:	9300      	str	r3, [sp, #0]
    3a68:	2300      	movs	r3, #0
    3a6a:	2201      	movs	r2, #1
    3a6c:	2100      	movs	r1, #0
    3a6e:	4658      	mov	r0, fp
    3a70:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3a72:	1d21      	adds	r1, r4, #4
    3a74:	9a04      	ldr	r2, [sp, #16]
    3a76:	0028      	movs	r0, r5
    3a78:	4b0a      	ldr	r3, [pc, #40]	; (3aa4 <dma_eeprom_read+0xf8>)
    3a7a:	4798      	blx	r3
}
    3a7c:	b009      	add	sp, #36	; 0x24
    3a7e:	bcf0      	pop	{r4, r5, r6, r7}
    3a80:	46bb      	mov	fp, r7
    3a82:	46b2      	mov	sl, r6
    3a84:	46a9      	mov	r9, r5
    3a86:	46a0      	mov	r8, r4
    3a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a8a:	46c0      	nop			; (mov r8, r8)
    3a8c:	20000408 	.word	0x20000408
    3a90:	200006a0 	.word	0x200006a0
    3a94:	0000163d 	.word	0x0000163d
    3a98:	00005ab5 	.word	0x00005ab5
    3a9c:	20000690 	.word	0x20000690
    3aa0:	200002d8 	.word	0x200002d8
    3aa4:	00003f41 	.word	0x00003f41

00003aa8 <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    3aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aaa:	46de      	mov	lr, fp
    3aac:	4657      	mov	r7, sl
    3aae:	464e      	mov	r6, r9
    3ab0:	4645      	mov	r5, r8
    3ab2:	b5e0      	push	{r5, r6, r7, lr}
    3ab4:	b089      	sub	sp, #36	; 0x24
    3ab6:	0004      	movs	r4, r0
    3ab8:	000e      	movs	r6, r1
    3aba:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    3abc:	ab07      	add	r3, sp, #28
    3abe:	2102      	movs	r1, #2
    3ac0:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    3ac2:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    3ac4:	3113      	adds	r1, #19
    3ac6:	a802      	add	r0, sp, #8
    3ac8:	4684      	mov	ip, r0
    3aca:	4461      	add	r1, ip
    3acc:	0a10      	lsrs	r0, r2, #8
    3ace:	7008      	strb	r0, [r1, #0]
    3ad0:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    3ad2:	7822      	ldrb	r2, [r4, #0]
    3ad4:	7861      	ldrb	r1, [r4, #1]
    3ad6:	0209      	lsls	r1, r1, #8
    3ad8:	4311      	orrs	r1, r2
    3ada:	78a2      	ldrb	r2, [r4, #2]
    3adc:	0412      	lsls	r2, r2, #16
    3ade:	430a      	orrs	r2, r1
    3ae0:	78e5      	ldrb	r5, [r4, #3]
    3ae2:	062d      	lsls	r5, r5, #24
    3ae4:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3ae6:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3ae8:	2228      	movs	r2, #40	; 0x28
    3aea:	4690      	mov	r8, r2
    3aec:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3aee:	0100      	lsls	r0, r0, #4
    3af0:	4a25      	ldr	r2, [pc, #148]	; (3b88 <dma_eeprom_write+0xe0>)
    3af2:	4691      	mov	r9, r2
    3af4:	4448      	add	r0, r9
    3af6:	4a25      	ldr	r2, [pc, #148]	; (3b8c <dma_eeprom_write+0xe4>)
    3af8:	4693      	mov	fp, r2
    3afa:	9203      	str	r2, [sp, #12]
    3afc:	4642      	mov	r2, r8
    3afe:	9202      	str	r2, [sp, #8]
    3b00:	9301      	str	r3, [sp, #4]
    3b02:	2203      	movs	r2, #3
    3b04:	9200      	str	r2, [sp, #0]
    3b06:	2300      	movs	r3, #0
    3b08:	2200      	movs	r2, #0
    3b0a:	2101      	movs	r1, #1
    3b0c:	4f20      	ldr	r7, [pc, #128]	; (3b90 <dma_eeprom_write+0xe8>)
    3b0e:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3b10:	466b      	mov	r3, sp
    3b12:	8a9b      	ldrh	r3, [r3, #20]
    3b14:	469a      	mov	sl, r3
    3b16:	2300      	movs	r3, #0
    3b18:	9303      	str	r3, [sp, #12]
    3b1a:	4641      	mov	r1, r8
    3b1c:	9102      	str	r1, [sp, #8]
    3b1e:	9912      	ldr	r1, [sp, #72]	; 0x48
    3b20:	9101      	str	r1, [sp, #4]
    3b22:	4651      	mov	r1, sl
    3b24:	9100      	str	r1, [sp, #0]
    3b26:	2200      	movs	r2, #0
    3b28:	2101      	movs	r1, #1
    3b2a:	4658      	mov	r0, fp
    3b2c:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3b2e:	7870      	ldrb	r0, [r6, #1]
    3b30:	0100      	lsls	r0, r0, #4
    3b32:	4448      	add	r0, r9
    3b34:	4917      	ldr	r1, [pc, #92]	; (3b94 <dma_eeprom_write+0xec>)
    3b36:	4689      	mov	r9, r1
    3b38:	9103      	str	r1, [sp, #12]
    3b3a:	4917      	ldr	r1, [pc, #92]	; (3b98 <dma_eeprom_write+0xf0>)
    3b3c:	468b      	mov	fp, r1
    3b3e:	9102      	str	r1, [sp, #8]
    3b40:	4641      	mov	r1, r8
    3b42:	9101      	str	r1, [sp, #4]
    3b44:	2203      	movs	r2, #3
    3b46:	9200      	str	r2, [sp, #0]
    3b48:	2300      	movs	r3, #0
    3b4a:	2200      	movs	r2, #0
    3b4c:	2100      	movs	r1, #0
    3b4e:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3b50:	2300      	movs	r3, #0
    3b52:	9303      	str	r3, [sp, #12]
    3b54:	465b      	mov	r3, fp
    3b56:	9302      	str	r3, [sp, #8]
    3b58:	4643      	mov	r3, r8
    3b5a:	9301      	str	r3, [sp, #4]
    3b5c:	4653      	mov	r3, sl
    3b5e:	9300      	str	r3, [sp, #0]
    3b60:	2300      	movs	r3, #0
    3b62:	2200      	movs	r2, #0
    3b64:	2100      	movs	r1, #0
    3b66:	4648      	mov	r0, r9
    3b68:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    3b6a:	0020      	movs	r0, r4
    3b6c:	4b0b      	ldr	r3, [pc, #44]	; (3b9c <dma_eeprom_write+0xf4>)
    3b6e:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3b70:	1d21      	adds	r1, r4, #4
    3b72:	0032      	movs	r2, r6
    3b74:	0028      	movs	r0, r5
    3b76:	4b0a      	ldr	r3, [pc, #40]	; (3ba0 <dma_eeprom_write+0xf8>)
    3b78:	4798      	blx	r3
}
    3b7a:	b009      	add	sp, #36	; 0x24
    3b7c:	bcf0      	pop	{r4, r5, r6, r7}
    3b7e:	46bb      	mov	fp, r7
    3b80:	46b2      	mov	sl, r6
    3b82:	46a9      	mov	r9, r5
    3b84:	46a0      	mov	r8, r4
    3b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b88:	20000408 	.word	0x20000408
    3b8c:	200006a0 	.word	0x200006a0
    3b90:	0000163d 	.word	0x0000163d
    3b94:	20000690 	.word	0x20000690
    3b98:	200002d8 	.word	0x200002d8
    3b9c:	000017ad 	.word	0x000017ad
    3ba0:	00003f41 	.word	0x00003f41

00003ba4 <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    3ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ba6:	b083      	sub	sp, #12
    3ba8:	0014      	movs	r4, r2
    3baa:	001d      	movs	r5, r3
	switch (request->type) {
    3bac:	2324      	movs	r3, #36	; 0x24
    3bae:	5cd3      	ldrb	r3, [r2, r3]
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d004      	beq.n	3bbe <dma_eeprom_process_request+0x1a>
    3bb4:	2b01      	cmp	r3, #1
    3bb6:	d00a      	beq.n	3bce <dma_eeprom_process_request+0x2a>
    3bb8:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    3bba:	b003      	add	sp, #12
    3bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    3bbe:	69d3      	ldr	r3, [r2, #28]
    3bc0:	6992      	ldr	r2, [r2, #24]
    3bc2:	6a24      	ldr	r4, [r4, #32]
    3bc4:	9400      	str	r4, [sp, #0]
    3bc6:	4c1a      	ldr	r4, [pc, #104]	; (3c30 <dma_eeprom_process_request+0x8c>)
    3bc8:	47a0      	blx	r4
	return true;
    3bca:	2001      	movs	r0, #1
		break;
    3bcc:	e7f5      	b.n	3bba <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    3bce:	6992      	ldr	r2, [r2, #24]
    3bd0:	69e6      	ldr	r6, [r4, #28]
    3bd2:	1993      	adds	r3, r2, r6
    3bd4:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    3bd6:	233f      	movs	r3, #63	; 0x3f
    3bd8:	0017      	movs	r7, r2
    3bda:	439f      	bics	r7, r3
    3bdc:	003b      	movs	r3, r7
    3bde:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    3be0:	459c      	cmp	ip, r3
    3be2:	d300      	bcc.n	3be6 <dma_eeprom_process_request+0x42>
    3be4:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    3be6:	6a23      	ldr	r3, [r4, #32]
    3be8:	9300      	str	r3, [sp, #0]
    3bea:	0033      	movs	r3, r6
    3bec:	4f11      	ldr	r7, [pc, #68]	; (3c34 <dma_eeprom_process_request+0x90>)
    3bee:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    3bf0:	4b11      	ldr	r3, [pc, #68]	; (3c38 <dma_eeprom_process_request+0x94>)
    3bf2:	4798      	blx	r3
    3bf4:	4b11      	ldr	r3, [pc, #68]	; (3c3c <dma_eeprom_process_request+0x98>)
    3bf6:	4798      	blx	r3
    3bf8:	4b11      	ldr	r3, [pc, #68]	; (3c40 <dma_eeprom_process_request+0x9c>)
    3bfa:	4912      	ldr	r1, [pc, #72]	; (3c44 <dma_eeprom_process_request+0xa0>)
    3bfc:	4798      	blx	r3
    3bfe:	4b12      	ldr	r3, [pc, #72]	; (3c48 <dma_eeprom_process_request+0xa4>)
    3c00:	4798      	blx	r3
    3c02:	7428      	strb	r0, [r5, #16]
    3c04:	0a03      	lsrs	r3, r0, #8
    3c06:	746b      	strb	r3, [r5, #17]
    3c08:	0c03      	lsrs	r3, r0, #16
    3c0a:	74ab      	strb	r3, [r5, #18]
    3c0c:	0e00      	lsrs	r0, r0, #24
    3c0e:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    3c10:	2301      	movs	r3, #1
    3c12:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    3c14:	69e3      	ldr	r3, [r4, #28]
    3c16:	1b9b      	subs	r3, r3, r6
    3c18:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    3c1a:	d101      	bne.n	3c20 <dma_eeprom_process_request+0x7c>
	return true;
    3c1c:	2001      	movs	r0, #1
    3c1e:	e7cc      	b.n	3bba <dma_eeprom_process_request+0x16>
				request->address += count;
    3c20:	69a3      	ldr	r3, [r4, #24]
    3c22:	199b      	adds	r3, r3, r6
    3c24:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    3c26:	6a23      	ldr	r3, [r4, #32]
    3c28:	199b      	adds	r3, r3, r6
    3c2a:	6223      	str	r3, [r4, #32]
				return false;
    3c2c:	2000      	movs	r0, #0
    3c2e:	e7c4      	b.n	3bba <dma_eeprom_process_request+0x16>
    3c30:	000039ad 	.word	0x000039ad
    3c34:	00003aa9 	.word	0x00003aa9
    3c38:	000024e5 	.word	0x000024e5
    3c3c:	00005401 	.word	0x00005401
    3c40:	000046b9 	.word	0x000046b9
    3c44:	486a6000 	.word	0x486a6000
    3c48:	00004689 	.word	0x00004689

00003c4c <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    3c4c:	b530      	push	{r4, r5, lr}
    3c4e:	b083      	sub	sp, #12
    3c50:	0014      	movs	r4, r2
    3c52:	001a      	movs	r2, r3
    3c54:	ab06      	add	r3, sp, #24
    3c56:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3c58:	2324      	movs	r3, #36	; 0x24
    3c5a:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    3c5c:	9b07      	ldr	r3, [sp, #28]
    3c5e:	618b      	str	r3, [r1, #24]
	request->count = count;
    3c60:	9b08      	ldr	r3, [sp, #32]
    3c62:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c66:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    3c68:	4b03      	ldr	r3, [pc, #12]	; (3c78 <eeprom_request+0x2c>)
    3c6a:	9301      	str	r3, [sp, #4]
    3c6c:	9100      	str	r1, [sp, #0]
    3c6e:	0023      	movs	r3, r4
    3c70:	4c02      	ldr	r4, [pc, #8]	; (3c7c <eeprom_request+0x30>)
    3c72:	47a0      	blx	r4
}
    3c74:	b003      	add	sp, #12
    3c76:	bd30      	pop	{r4, r5, pc}
    3c78:	00003ba5 	.word	0x00003ba5
    3c7c:	00003925 	.word	0x00003925

00003c80 <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    3c80:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3c82:	3015      	adds	r0, #21
    3c84:	2300      	movs	r3, #0
    3c86:	22ff      	movs	r2, #255	; 0xff
    3c88:	2103      	movs	r1, #3
    3c8a:	4c01      	ldr	r4, [pc, #4]	; (3c90 <eeprom_wait_until_done+0x10>)
    3c8c:	47a0      	blx	r4
    3c8e:	bd10      	pop	{r4, pc}
    3c90:	00003511 	.word	0x00003511

00003c94 <dma_imu_icm20948_read>:
void dma_imu_icm20948_read(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* writeback) {
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	46de      	mov	lr, fp
    3c98:	4657      	mov	r7, sl
    3c9a:	464e      	mov	r6, r9
    3c9c:	4645      	mov	r5, r8
    3c9e:	b5e0      	push	{r5, r6, r7, lr}
    3ca0:	b087      	sub	sp, #28
    3ca2:	0004      	movs	r4, r0
    3ca4:	000e      	movs	r6, r1
    3ca6:	9304      	str	r3, [sp, #16]
    3ca8:	2317      	movs	r3, #23
    3caa:	446b      	add	r3, sp
    3cac:	701a      	strb	r2, [r3, #0]
	address |= IMU_READ_MASK;
    3cae:	b2d1      	uxtb	r1, r2
    3cb0:	2280      	movs	r2, #128	; 0x80
    3cb2:	4252      	negs	r2, r2
    3cb4:	430a      	orrs	r2, r1
    3cb6:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3cb8:	7802      	ldrb	r2, [r0, #0]
    3cba:	7841      	ldrb	r1, [r0, #1]
    3cbc:	0209      	lsls	r1, r1, #8
    3cbe:	4311      	orrs	r1, r2
    3cc0:	7882      	ldrb	r2, [r0, #2]
    3cc2:	0412      	lsls	r2, r2, #16
    3cc4:	430a      	orrs	r2, r1
    3cc6:	78c5      	ldrb	r5, [r0, #3]
    3cc8:	062d      	lsls	r5, r5, #24
    3cca:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3ccc:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3cce:	2228      	movs	r2, #40	; 0x28
    3cd0:	4691      	mov	r9, r2
    3cd2:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3cd4:	0100      	lsls	r0, r0, #4
    3cd6:	4a24      	ldr	r2, [pc, #144]	; (3d68 <dma_imu_icm20948_read+0xd4>)
    3cd8:	4692      	mov	sl, r2
    3cda:	4450      	add	r0, sl
    3cdc:	4a23      	ldr	r2, [pc, #140]	; (3d6c <dma_imu_icm20948_read+0xd8>)
    3cde:	4693      	mov	fp, r2
    3ce0:	9203      	str	r2, [sp, #12]
    3ce2:	464a      	mov	r2, r9
    3ce4:	9202      	str	r2, [sp, #8]
    3ce6:	9301      	str	r3, [sp, #4]
    3ce8:	2201      	movs	r2, #1
    3cea:	9200      	str	r2, [sp, #0]
    3cec:	2300      	movs	r3, #0
    3cee:	2200      	movs	r2, #0
    3cf0:	2100      	movs	r1, #0
    3cf2:	4f1f      	ldr	r7, [pc, #124]	; (3d70 <dma_imu_icm20948_read+0xdc>)
    3cf4:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3cf6:	466b      	mov	r3, sp
    3cf8:	8a1b      	ldrh	r3, [r3, #16]
    3cfa:	4698      	mov	r8, r3
    3cfc:	2300      	movs	r3, #0
    3cfe:	9303      	str	r3, [sp, #12]
    3d00:	4649      	mov	r1, r9
    3d02:	9102      	str	r1, [sp, #8]
    3d04:	4b1b      	ldr	r3, [pc, #108]	; (3d74 <dma_imu_icm20948_read+0xe0>)
    3d06:	9301      	str	r3, [sp, #4]
    3d08:	4641      	mov	r1, r8
    3d0a:	9100      	str	r1, [sp, #0]
    3d0c:	2300      	movs	r3, #0
    3d0e:	2200      	movs	r2, #0
    3d10:	2100      	movs	r1, #0
    3d12:	4658      	mov	r0, fp
    3d14:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3d16:	7870      	ldrb	r0, [r6, #1]
    3d18:	0100      	lsls	r0, r0, #4
    3d1a:	4450      	add	r0, sl
    3d1c:	4916      	ldr	r1, [pc, #88]	; (3d78 <dma_imu_icm20948_read+0xe4>)
    3d1e:	468b      	mov	fp, r1
    3d20:	9103      	str	r1, [sp, #12]
    3d22:	4b16      	ldr	r3, [pc, #88]	; (3d7c <dma_imu_icm20948_read+0xe8>)
    3d24:	9302      	str	r3, [sp, #8]
    3d26:	4649      	mov	r1, r9
    3d28:	9101      	str	r1, [sp, #4]
    3d2a:	2201      	movs	r2, #1
    3d2c:	9200      	str	r2, [sp, #0]
    3d2e:	2300      	movs	r3, #0
    3d30:	2200      	movs	r2, #0
    3d32:	2100      	movs	r1, #0
    3d34:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3d36:	2300      	movs	r3, #0
    3d38:	9303      	str	r3, [sp, #12]
    3d3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3d3c:	9302      	str	r3, [sp, #8]
    3d3e:	464b      	mov	r3, r9
    3d40:	9301      	str	r3, [sp, #4]
    3d42:	4643      	mov	r3, r8
    3d44:	9300      	str	r3, [sp, #0]
    3d46:	2300      	movs	r3, #0
    3d48:	2201      	movs	r2, #1
    3d4a:	2100      	movs	r1, #0
    3d4c:	4658      	mov	r0, fp
    3d4e:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3d50:	1d21      	adds	r1, r4, #4
    3d52:	0032      	movs	r2, r6
    3d54:	0028      	movs	r0, r5
    3d56:	4b0a      	ldr	r3, [pc, #40]	; (3d80 <dma_imu_icm20948_read+0xec>)
    3d58:	4798      	blx	r3
}
    3d5a:	b007      	add	sp, #28
    3d5c:	bcf0      	pop	{r4, r5, r6, r7}
    3d5e:	46bb      	mov	fp, r7
    3d60:	46b2      	mov	sl, r6
    3d62:	46a9      	mov	r9, r5
    3d64:	46a0      	mov	r8, r4
    3d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d68:	20000408 	.word	0x20000408
    3d6c:	200006a0 	.word	0x200006a0
    3d70:	0000163d 	.word	0x0000163d
    3d74:	00005ab5 	.word	0x00005ab5
    3d78:	20000690 	.word	0x20000690
    3d7c:	200002d8 	.word	0x200002d8
    3d80:	00003f41 	.word	0x00003f41

00003d84 <dma_imu_icm20948_write>:
void dma_imu_icm20948_write(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* data) {
    3d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d86:	46de      	mov	lr, fp
    3d88:	4657      	mov	r7, sl
    3d8a:	464e      	mov	r6, r9
    3d8c:	4645      	mov	r5, r8
    3d8e:	b5e0      	push	{r5, r6, r7, lr}
    3d90:	b087      	sub	sp, #28
    3d92:	0004      	movs	r4, r0
    3d94:	000e      	movs	r6, r1
    3d96:	9304      	str	r3, [sp, #16]
    3d98:	2317      	movs	r3, #23
    3d9a:	446b      	add	r3, sp
    3d9c:	701a      	strb	r2, [r3, #0]
	address &= IMU_WRITE_MASK;
    3d9e:	b2d1      	uxtb	r1, r2
    3da0:	227f      	movs	r2, #127	; 0x7f
    3da2:	400a      	ands	r2, r1
    3da4:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3da6:	7802      	ldrb	r2, [r0, #0]
    3da8:	7841      	ldrb	r1, [r0, #1]
    3daa:	0209      	lsls	r1, r1, #8
    3dac:	4311      	orrs	r1, r2
    3dae:	7882      	ldrb	r2, [r0, #2]
    3db0:	0412      	lsls	r2, r2, #16
    3db2:	430a      	orrs	r2, r1
    3db4:	78c5      	ldrb	r5, [r0, #3]
    3db6:	062d      	lsls	r5, r5, #24
    3db8:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3dba:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3dbc:	2228      	movs	r2, #40	; 0x28
    3dbe:	4690      	mov	r8, r2
    3dc0:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3dc2:	0100      	lsls	r0, r0, #4
    3dc4:	4a24      	ldr	r2, [pc, #144]	; (3e58 <dma_imu_icm20948_write+0xd4>)
    3dc6:	4691      	mov	r9, r2
    3dc8:	4448      	add	r0, r9
    3dca:	4a24      	ldr	r2, [pc, #144]	; (3e5c <dma_imu_icm20948_write+0xd8>)
    3dcc:	4693      	mov	fp, r2
    3dce:	9203      	str	r2, [sp, #12]
    3dd0:	4642      	mov	r2, r8
    3dd2:	9202      	str	r2, [sp, #8]
    3dd4:	9301      	str	r3, [sp, #4]
    3dd6:	2201      	movs	r2, #1
    3dd8:	9200      	str	r2, [sp, #0]
    3dda:	2300      	movs	r3, #0
    3ddc:	2200      	movs	r2, #0
    3dde:	2100      	movs	r1, #0
    3de0:	4f1f      	ldr	r7, [pc, #124]	; (3e60 <dma_imu_icm20948_write+0xdc>)
    3de2:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3de4:	466b      	mov	r3, sp
    3de6:	8a1b      	ldrh	r3, [r3, #16]
    3de8:	469a      	mov	sl, r3
    3dea:	2300      	movs	r3, #0
    3dec:	9303      	str	r3, [sp, #12]
    3dee:	4641      	mov	r1, r8
    3df0:	9102      	str	r1, [sp, #8]
    3df2:	9910      	ldr	r1, [sp, #64]	; 0x40
    3df4:	9101      	str	r1, [sp, #4]
    3df6:	4651      	mov	r1, sl
    3df8:	9100      	str	r1, [sp, #0]
    3dfa:	2200      	movs	r2, #0
    3dfc:	2101      	movs	r1, #1
    3dfe:	4658      	mov	r0, fp
    3e00:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3e02:	7870      	ldrb	r0, [r6, #1]
    3e04:	0100      	lsls	r0, r0, #4
    3e06:	4448      	add	r0, r9
    3e08:	4916      	ldr	r1, [pc, #88]	; (3e64 <dma_imu_icm20948_write+0xe0>)
    3e0a:	4689      	mov	r9, r1
    3e0c:	9103      	str	r1, [sp, #12]
    3e0e:	4916      	ldr	r1, [pc, #88]	; (3e68 <dma_imu_icm20948_write+0xe4>)
    3e10:	468b      	mov	fp, r1
    3e12:	9102      	str	r1, [sp, #8]
    3e14:	4641      	mov	r1, r8
    3e16:	9101      	str	r1, [sp, #4]
    3e18:	2201      	movs	r2, #1
    3e1a:	9200      	str	r2, [sp, #0]
    3e1c:	2300      	movs	r3, #0
    3e1e:	2200      	movs	r2, #0
    3e20:	2100      	movs	r1, #0
    3e22:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3e24:	2300      	movs	r3, #0
    3e26:	9303      	str	r3, [sp, #12]
    3e28:	465b      	mov	r3, fp
    3e2a:	9302      	str	r3, [sp, #8]
    3e2c:	4643      	mov	r3, r8
    3e2e:	9301      	str	r3, [sp, #4]
    3e30:	4653      	mov	r3, sl
    3e32:	9300      	str	r3, [sp, #0]
    3e34:	2300      	movs	r3, #0
    3e36:	2200      	movs	r2, #0
    3e38:	2100      	movs	r1, #0
    3e3a:	4648      	mov	r0, r9
    3e3c:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3e3e:	1d21      	adds	r1, r4, #4
    3e40:	0032      	movs	r2, r6
    3e42:	0028      	movs	r0, r5
    3e44:	4b09      	ldr	r3, [pc, #36]	; (3e6c <dma_imu_icm20948_write+0xe8>)
    3e46:	4798      	blx	r3
}
    3e48:	b007      	add	sp, #28
    3e4a:	bcf0      	pop	{r4, r5, r6, r7}
    3e4c:	46bb      	mov	fp, r7
    3e4e:	46b2      	mov	sl, r6
    3e50:	46a9      	mov	r9, r5
    3e52:	46a0      	mov	r8, r4
    3e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	20000408 	.word	0x20000408
    3e5c:	200006a0 	.word	0x200006a0
    3e60:	0000163d 	.word	0x0000163d
    3e64:	20000690 	.word	0x20000690
    3e68:	200002d8 	.word	0x200002d8
    3e6c:	00003f41 	.word	0x00003f41

00003e70 <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    3e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e72:	b085      	sub	sp, #20
    3e74:	0005      	movs	r5, r0
    3e76:	000e      	movs	r6, r1
    3e78:	0014      	movs	r4, r2
	IMU_ON_BUS();
    3e7a:	2180      	movs	r1, #128	; 0x80
    3e7c:	0389      	lsls	r1, r1, #14
    3e7e:	2000      	movs	r0, #0
    3e80:	4b17      	ldr	r3, [pc, #92]	; (3ee0 <dma_imu_icm20948_process_request+0x70>)
    3e82:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    3e84:	2325      	movs	r3, #37	; 0x25
    3e86:	5ce3      	ldrb	r3, [r4, r3]
    3e88:	011b      	lsls	r3, r3, #4
    3e8a:	220f      	movs	r2, #15
    3e8c:	446a      	add	r2, sp
    3e8e:	7013      	strb	r3, [r2, #0]
	dma_imu_icm20948_write(imudesc, dmadesc, REG_BANK_SEL, 1, &bank);
    3e90:	9200      	str	r2, [sp, #0]
    3e92:	2301      	movs	r3, #1
    3e94:	227f      	movs	r2, #127	; 0x7f
    3e96:	0031      	movs	r1, r6
    3e98:	0028      	movs	r0, r5
    3e9a:	4f12      	ldr	r7, [pc, #72]	; (3ee4 <dma_imu_icm20948_process_request+0x74>)
    3e9c:	47b8      	blx	r7
	switch (request->type) {
    3e9e:	2324      	movs	r3, #36	; 0x24
    3ea0:	5ce3      	ldrb	r3, [r4, r3]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d009      	beq.n	3eba <dma_imu_icm20948_process_request+0x4a>
    3ea6:	2b01      	cmp	r3, #1
    3ea8:	d010      	beq.n	3ecc <dma_imu_icm20948_process_request+0x5c>
	IMU_OFF_BUS();
    3eaa:	2180      	movs	r1, #128	; 0x80
    3eac:	0389      	lsls	r1, r1, #14
    3eae:	2000      	movs	r0, #0
    3eb0:	4b0d      	ldr	r3, [pc, #52]	; (3ee8 <dma_imu_icm20948_process_request+0x78>)
    3eb2:	4798      	blx	r3
}
    3eb4:	2001      	movs	r0, #1
    3eb6:	b005      	add	sp, #20
    3eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dma_imu_icm20948_read(imudesc, dmadesc, request->address, request->count, request->data);
    3eba:	69e3      	ldr	r3, [r4, #28]
    3ebc:	7e22      	ldrb	r2, [r4, #24]
    3ebe:	6a21      	ldr	r1, [r4, #32]
    3ec0:	9100      	str	r1, [sp, #0]
    3ec2:	0031      	movs	r1, r6
    3ec4:	0028      	movs	r0, r5
    3ec6:	4c09      	ldr	r4, [pc, #36]	; (3eec <dma_imu_icm20948_process_request+0x7c>)
    3ec8:	47a0      	blx	r4
		break;
    3eca:	e7ee      	b.n	3eaa <dma_imu_icm20948_process_request+0x3a>
		dma_imu_icm20948_write(imudesc, dmadesc, request->address, request->count, request->data);
    3ecc:	69e3      	ldr	r3, [r4, #28]
    3ece:	7e22      	ldrb	r2, [r4, #24]
    3ed0:	6a21      	ldr	r1, [r4, #32]
    3ed2:	9100      	str	r1, [sp, #0]
    3ed4:	0031      	movs	r1, r6
    3ed6:	0028      	movs	r0, r5
    3ed8:	4c02      	ldr	r4, [pc, #8]	; (3ee4 <dma_imu_icm20948_process_request+0x74>)
    3eda:	47a0      	blx	r4
		break;
    3edc:	e7e5      	b.n	3eaa <dma_imu_icm20948_process_request+0x3a>
    3ede:	46c0      	nop			; (mov r8, r8)
    3ee0:	00001e9d 	.word	0x00001e9d
    3ee4:	00003d85 	.word	0x00003d85
    3ee8:	00001ead 	.word	0x00001ead
    3eec:	00003c95 	.word	0x00003c95

00003ef0 <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    3ef0:	b570      	push	{r4, r5, r6, lr}
    3ef2:	b082      	sub	sp, #8
    3ef4:	0014      	movs	r4, r2
    3ef6:	001a      	movs	r2, r3
    3ef8:	ab06      	add	r3, sp, #24
    3efa:	781e      	ldrb	r6, [r3, #0]
    3efc:	ab07      	add	r3, sp, #28
    3efe:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3f00:	2324      	movs	r3, #36	; 0x24
    3f02:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    3f04:	9b08      	ldr	r3, [sp, #32]
    3f06:	618b      	str	r3, [r1, #24]
	request->count = count;
    3f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f0a:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3f0e:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    3f10:	2325      	movs	r3, #37	; 0x25
    3f12:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    3f14:	4b03      	ldr	r3, [pc, #12]	; (3f24 <imu_icm20948_request+0x34>)
    3f16:	9301      	str	r3, [sp, #4]
    3f18:	9100      	str	r1, [sp, #0]
    3f1a:	0023      	movs	r3, r4
    3f1c:	4c02      	ldr	r4, [pc, #8]	; (3f28 <imu_icm20948_request+0x38>)
    3f1e:	47a0      	blx	r4
}
    3f20:	b002      	add	sp, #8
    3f22:	bd70      	pop	{r4, r5, r6, pc}
    3f24:	00003e71 	.word	0x00003e71
    3f28:	00003925 	.word	0x00003925

00003f2c <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    3f2c:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3f2e:	3015      	adds	r0, #21
    3f30:	2300      	movs	r3, #0
    3f32:	22ff      	movs	r2, #255	; 0xff
    3f34:	2103      	movs	r1, #3
    3f36:	4c01      	ldr	r4, [pc, #4]	; (3f3c <imu_icm20948_wait_until_done+0x10>)
    3f38:	47a0      	blx	r4
}
    3f3a:	bd10      	pop	{r4, pc}
    3f3c:	00003511 	.word	0x00003511

00003f40 <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    3f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f42:	0007      	movs	r7, r0
    3f44:	000d      	movs	r5, r1
    3f46:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    3f48:	7810      	ldrb	r0, [r2, #0]
    3f4a:	4e1c      	ldr	r6, [pc, #112]	; (3fbc <dma_spi_transaction+0x7c>)
    3f4c:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3f4e:	7860      	ldrb	r0, [r4, #1]
    3f50:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    3f52:	0038      	movs	r0, r7
    3f54:	4b1a      	ldr	r3, [pc, #104]	; (3fc0 <dma_spi_transaction+0x80>)
    3f56:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    3f58:	7923      	ldrb	r3, [r4, #4]
    3f5a:	78e2      	ldrb	r2, [r4, #3]
    3f5c:	7820      	ldrb	r0, [r4, #0]
    3f5e:	2102      	movs	r1, #2
    3f60:	4f18      	ldr	r7, [pc, #96]	; (3fc4 <dma_spi_transaction+0x84>)
    3f62:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    3f64:	7923      	ldrb	r3, [r4, #4]
    3f66:	78a2      	ldrb	r2, [r4, #2]
    3f68:	7860      	ldrb	r0, [r4, #1]
    3f6a:	2102      	movs	r1, #2
    3f6c:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    3f6e:	782b      	ldrb	r3, [r5, #0]
    3f70:	786a      	ldrb	r2, [r5, #1]
    3f72:	0212      	lsls	r2, r2, #8
    3f74:	431a      	orrs	r2, r3
    3f76:	78ab      	ldrb	r3, [r5, #2]
    3f78:	041b      	lsls	r3, r3, #16
    3f7a:	4313      	orrs	r3, r2
    3f7c:	78e9      	ldrb	r1, [r5, #3]
    3f7e:	0609      	lsls	r1, r1, #24
    3f80:	4319      	orrs	r1, r3
    3f82:	7928      	ldrb	r0, [r5, #4]
    3f84:	4b10      	ldr	r3, [pc, #64]	; (3fc8 <dma_spi_transaction+0x88>)
    3f86:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    3f88:	7820      	ldrb	r0, [r4, #0]
    3f8a:	4f10      	ldr	r7, [pc, #64]	; (3fcc <dma_spi_transaction+0x8c>)
    3f8c:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    3f8e:	7860      	ldrb	r0, [r4, #1]
    3f90:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    3f92:	7860      	ldrb	r0, [r4, #1]
    3f94:	4b0e      	ldr	r3, [pc, #56]	; (3fd0 <dma_spi_transaction+0x90>)
    3f96:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    3f98:	7820      	ldrb	r0, [r4, #0]
    3f9a:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3f9c:	7860      	ldrb	r0, [r4, #1]
    3f9e:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    3fa0:	782b      	ldrb	r3, [r5, #0]
    3fa2:	786a      	ldrb	r2, [r5, #1]
    3fa4:	0212      	lsls	r2, r2, #8
    3fa6:	431a      	orrs	r2, r3
    3fa8:	78ab      	ldrb	r3, [r5, #2]
    3faa:	041b      	lsls	r3, r3, #16
    3fac:	4313      	orrs	r3, r2
    3fae:	78e9      	ldrb	r1, [r5, #3]
    3fb0:	0609      	lsls	r1, r1, #24
    3fb2:	4319      	orrs	r1, r3
    3fb4:	7928      	ldrb	r0, [r5, #4]
    3fb6:	4b07      	ldr	r3, [pc, #28]	; (3fd4 <dma_spi_transaction+0x94>)
    3fb8:	4798      	blx	r3
    3fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fbc:	0000171d 	.word	0x0000171d
    3fc0:	0000239d 	.word	0x0000239d
    3fc4:	000016a9 	.word	0x000016a9
    3fc8:	00001ead 	.word	0x00001ead
    3fcc:	000016f5 	.word	0x000016f5
    3fd0:	00004045 	.word	0x00004045
    3fd4:	00001e9d 	.word	0x00001e9d

00003fd8 <rtos_dma_wait_until_end_callback>:
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3fd8:	4b03      	ldr	r3, [pc, #12]	; (3fe8 <rtos_dma_wait_until_end_callback+0x10>)
    3fda:	681b      	ldr	r3, [r3, #0]
    3fdc:	6a1b      	ldr	r3, [r3, #32]
    3fde:	7819      	ldrb	r1, [r3, #0]
    3fe0:	4a02      	ldr	r2, [pc, #8]	; (3fec <rtos_dma_wait_until_end_callback+0x14>)
    3fe2:	233f      	movs	r3, #63	; 0x3f
    3fe4:	54d1      	strb	r1, [r2, r3]
}
    3fe6:	4770      	bx	lr
    3fe8:	20000634 	.word	0x20000634
    3fec:	41004800 	.word	0x41004800

00003ff0 <rtos_dma_wait_until_end_or_timeout_callback>:
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_callback);
	current_process->data = data;
}

void rtos_dma_wait_until_end_or_timeout_callback() {
    3ff0:	b510      	push	{r4, lr}
    3ff2:	b082      	sub	sp, #8
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3ff4:	4c0f      	ldr	r4, [pc, #60]	; (4034 <rtos_dma_wait_until_end_or_timeout_callback+0x44>)
    3ff6:	6823      	ldr	r3, [r4, #0]
    3ff8:	6a1b      	ldr	r3, [r3, #32]
    3ffa:	7819      	ldrb	r1, [r3, #0]
    3ffc:	4a0e      	ldr	r2, [pc, #56]	; (4038 <rtos_dma_wait_until_end_or_timeout_callback+0x48>)
    3ffe:	233f      	movs	r3, #63	; 0x3f
    4000:	54d1      	strb	r1, [r2, r3]

	// Check whether timeout has occured
	volatile uint32_t time = time_read_ticks();
    4002:	4b0e      	ldr	r3, [pc, #56]	; (403c <rtos_dma_wait_until_end_or_timeout_callback+0x4c>)
    4004:	4798      	blx	r3
    4006:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    4008:	6822      	ldr	r2, [r4, #0]
    400a:	6953      	ldr	r3, [r2, #20]
    400c:	9901      	ldr	r1, [sp, #4]
    400e:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    4010:	490b      	ldr	r1, [pc, #44]	; (4040 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    4012:	6809      	ldr	r1, [r1, #0]
    4014:	4299      	cmp	r1, r3
    4016:	dc07      	bgt.n	4028 <rtos_dma_wait_until_end_or_timeout_callback+0x38>
    4018:	4909      	ldr	r1, [pc, #36]	; (4040 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    401a:	6808      	ldr	r0, [r1, #0]
    401c:	4908      	ldr	r1, [pc, #32]	; (4040 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    401e:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    4020:	2b00      	cmp	r3, #0
    4022:	dd03      	ble.n	402c <rtos_dma_wait_until_end_or_timeout_callback+0x3c>
}
    4024:	b002      	add	sp, #8
    4026:	bd10      	pop	{r4, pc}
	min = (t < min) ? t : min;
    4028:	0018      	movs	r0, r3
    402a:	e7f7      	b.n	401c <rtos_dma_wait_until_end_or_timeout_callback+0x2c>
	if (t <= 0) current_process->status = Process_State_Running;
    402c:	2301      	movs	r3, #1
    402e:	6193      	str	r3, [r2, #24]
}
    4030:	e7f8      	b.n	4024 <rtos_dma_wait_until_end_or_timeout_callback+0x34>
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	20000634 	.word	0x20000634
    4038:	41004800 	.word	0x41004800
    403c:	000024e5 	.word	0x000024e5
    4040:	200000b4 	.word	0x200000b4

00004044 <rtos_dma_wait_until_end>:
void rtos_dma_wait_until_end(int channel) {
    4044:	b570      	push	{r4, r5, r6, lr}
    4046:	b084      	sub	sp, #16
    4048:	9003      	str	r0, [sp, #12]
	void* data = current_process->data;
    404a:	4c08      	ldr	r4, [pc, #32]	; (406c <rtos_dma_wait_until_end+0x28>)
    404c:	6823      	ldr	r3, [r4, #0]
    404e:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    4050:	aa03      	add	r2, sp, #12
    4052:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    4054:	4b06      	ldr	r3, [pc, #24]	; (4070 <rtos_dma_wait_until_end+0x2c>)
    4056:	9300      	str	r3, [sp, #0]
    4058:	2300      	movs	r3, #0
    405a:	2202      	movs	r2, #2
    405c:	2102      	movs	r1, #2
    405e:	4805      	ldr	r0, [pc, #20]	; (4074 <rtos_dma_wait_until_end+0x30>)
    4060:	4e05      	ldr	r6, [pc, #20]	; (4078 <rtos_dma_wait_until_end+0x34>)
    4062:	47b0      	blx	r6
	current_process->data = data;
    4064:	6823      	ldr	r3, [r4, #0]
    4066:	621d      	str	r5, [r3, #32]
}
    4068:	b004      	add	sp, #16
    406a:	bd70      	pop	{r4, r5, r6, pc}
    406c:	20000634 	.word	0x20000634
    4070:	00003fd9 	.word	0x00003fd9
    4074:	4100484e 	.word	0x4100484e
    4078:	0000356d 	.word	0x0000356d

0000407c <rtos_dma_wait_until_end_or_timeout>:

void rtos_dma_wait_until_end_or_timeout(int channel, uint32_t timeout_ticks) {
    407c:	b570      	push	{r4, r5, r6, lr}
    407e:	b084      	sub	sp, #16
    4080:	9003      	str	r0, [sp, #12]
    4082:	000c      	movs	r4, r1
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + timeout_ticks;
    4084:	4b0a      	ldr	r3, [pc, #40]	; (40b0 <rtos_dma_wait_until_end_or_timeout+0x34>)
    4086:	4798      	blx	r3
    4088:	4d0a      	ldr	r5, [pc, #40]	; (40b4 <rtos_dma_wait_until_end_or_timeout+0x38>)
    408a:	682b      	ldr	r3, [r5, #0]
    408c:	1900      	adds	r0, r0, r4
    408e:	6158      	str	r0, [r3, #20]

	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    4090:	6a1c      	ldr	r4, [r3, #32]
	current_process->data = &channel;
    4092:	aa03      	add	r2, sp, #12
    4094:	621a      	str	r2, [r3, #32]
	wait_until_callback_preserve_deadline(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    4096:	4b08      	ldr	r3, [pc, #32]	; (40b8 <rtos_dma_wait_until_end_or_timeout+0x3c>)
    4098:	9300      	str	r3, [sp, #0]
    409a:	2300      	movs	r3, #0
    409c:	2202      	movs	r2, #2
    409e:	2102      	movs	r1, #2
    40a0:	4806      	ldr	r0, [pc, #24]	; (40bc <rtos_dma_wait_until_end_or_timeout+0x40>)
    40a2:	4e07      	ldr	r6, [pc, #28]	; (40c0 <rtos_dma_wait_until_end_or_timeout+0x44>)
    40a4:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_or_timeout_callback);
		
	current_process->data = data;
    40a6:	682b      	ldr	r3, [r5, #0]
    40a8:	621c      	str	r4, [r3, #32]
    40aa:	b004      	add	sp, #16
    40ac:	bd70      	pop	{r4, r5, r6, pc}
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	000024e5 	.word	0x000024e5
    40b4:	20000634 	.word	0x20000634
    40b8:	00003ff1 	.word	0x00003ff1
    40bc:	4100484e 	.word	0x4100484e
    40c0:	000035c9 	.word	0x000035c9

000040c4 <rtos_uart_start_send_buffer>:
#include "rtos_uart.h"
#include "Drivers/sercom.h"
#include "rtos_dma.h"

bool rtos_uart_start_send_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    40c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    40c6:	b087      	sub	sp, #28
    40c8:	0005      	movs	r5, r0
    40ca:	000c      	movs	r4, r1
    40cc:	0016      	movs	r6, r2
    40ce:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    40d0:	4b12      	ldr	r3, [pc, #72]	; (411c <rtos_uart_start_send_buffer+0x58>)
    40d2:	4798      	blx	r3
    40d4:	1e07      	subs	r7, r0, #0
    40d6:	d102      	bne.n	40de <rtos_uart_start_send_buffer+0x1a>
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->txchannel);

    return true;
}
    40d8:	0038      	movs	r0, r7
    40da:	b007      	add	sp, #28
    40dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    40de:	7820      	ldrb	r0, [r4, #0]
    buffer, &(sercom->USART_INT.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
    40e0:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    40e2:	0100      	lsls	r0, r0, #4
    40e4:	4b0e      	ldr	r3, [pc, #56]	; (4120 <rtos_uart_start_send_buffer+0x5c>)
    40e6:	18c0      	adds	r0, r0, r3
    40e8:	2300      	movs	r3, #0
    40ea:	9303      	str	r3, [sp, #12]
    40ec:	9502      	str	r5, [sp, #8]
    40ee:	9601      	str	r6, [sp, #4]
    40f0:	466b      	mov	r3, sp
    40f2:	8a9e      	ldrh	r6, [r3, #20]
    40f4:	9600      	str	r6, [sp, #0]
    40f6:	2300      	movs	r3, #0
    40f8:	2200      	movs	r2, #0
    40fa:	2101      	movs	r1, #1
    40fc:	4d09      	ldr	r5, [pc, #36]	; (4124 <rtos_uart_start_send_buffer+0x60>)
    40fe:	47a8      	blx	r5
	dma_disable_channel(dmadesc->txchannel);
    4100:	7820      	ldrb	r0, [r4, #0]
    4102:	4b09      	ldr	r3, [pc, #36]	; (4128 <rtos_uart_start_send_buffer+0x64>)
    4104:	4798      	blx	r3
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    4106:	7923      	ldrb	r3, [r4, #4]
    4108:	78e2      	ldrb	r2, [r4, #3]
    410a:	7820      	ldrb	r0, [r4, #0]
    410c:	2102      	movs	r1, #2
    410e:	4d07      	ldr	r5, [pc, #28]	; (412c <rtos_uart_start_send_buffer+0x68>)
    4110:	47a8      	blx	r5
	dma_enable_channel(dmadesc->txchannel);
    4112:	7820      	ldrb	r0, [r4, #0]
    4114:	4b06      	ldr	r3, [pc, #24]	; (4130 <rtos_uart_start_send_buffer+0x6c>)
    4116:	4798      	blx	r3
    return true;
    4118:	e7de      	b.n	40d8 <rtos_uart_start_send_buffer+0x14>
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	00002199 	.word	0x00002199
    4120:	20000408 	.word	0x20000408
    4124:	0000163d 	.word	0x0000163d
    4128:	0000171d 	.word	0x0000171d
    412c:	000016a9 	.word	0x000016a9
    4130:	000016f5 	.word	0x000016f5

00004134 <rtos_uart_wait_until_send_complete>:

void rtos_uart_wait_until_send_complete(DMA_Descriptor* dmadesc) {
    4134:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->txchannel);
    4136:	7800      	ldrb	r0, [r0, #0]
    4138:	4b01      	ldr	r3, [pc, #4]	; (4140 <rtos_uart_wait_until_send_complete+0xc>)
    413a:	4798      	blx	r3
}
    413c:	bd10      	pop	{r4, pc}
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	00004045 	.word	0x00004045

00004144 <rtos_uart_start_read_buffer>:


bool rtos_uart_start_read_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    4144:	b5f0      	push	{r4, r5, r6, r7, lr}
    4146:	b087      	sub	sp, #28
    4148:	0005      	movs	r5, r0
    414a:	000c      	movs	r4, r1
    414c:	0016      	movs	r6, r2
    414e:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    4150:	4b12      	ldr	r3, [pc, #72]	; (419c <rtos_uart_start_read_buffer+0x58>)
    4152:	4798      	blx	r3
    4154:	1e07      	subs	r7, r0, #0
    4156:	d102      	bne.n	415e <rtos_uart_start_read_buffer+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
}
    4158:	0038      	movs	r0, r7
    415a:	b007      	add	sp, #28
    415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    415e:	7860      	ldrb	r0, [r4, #1]
    &(sercom->USART_INT.SERCOM_DATA), buffer, DMA_NEXTDESCRIPTOR_NONE);
    4160:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    4162:	0100      	lsls	r0, r0, #4
    4164:	4b0e      	ldr	r3, [pc, #56]	; (41a0 <rtos_uart_start_read_buffer+0x5c>)
    4166:	18c0      	adds	r0, r0, r3
    4168:	2300      	movs	r3, #0
    416a:	9303      	str	r3, [sp, #12]
    416c:	9602      	str	r6, [sp, #8]
    416e:	9501      	str	r5, [sp, #4]
    4170:	466b      	mov	r3, sp
    4172:	8a9e      	ldrh	r6, [r3, #20]
    4174:	9600      	str	r6, [sp, #0]
    4176:	2300      	movs	r3, #0
    4178:	2201      	movs	r2, #1
    417a:	2100      	movs	r1, #0
    417c:	4d09      	ldr	r5, [pc, #36]	; (41a4 <rtos_uart_start_read_buffer+0x60>)
    417e:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    4180:	7860      	ldrb	r0, [r4, #1]
    4182:	4b09      	ldr	r3, [pc, #36]	; (41a8 <rtos_uart_start_read_buffer+0x64>)
    4184:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    4186:	7923      	ldrb	r3, [r4, #4]
    4188:	78a2      	ldrb	r2, [r4, #2]
    418a:	7860      	ldrb	r0, [r4, #1]
    418c:	2102      	movs	r1, #2
    418e:	4d07      	ldr	r5, [pc, #28]	; (41ac <rtos_uart_start_read_buffer+0x68>)
    4190:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    4192:	7860      	ldrb	r0, [r4, #1]
    4194:	4b06      	ldr	r3, [pc, #24]	; (41b0 <rtos_uart_start_read_buffer+0x6c>)
    4196:	4798      	blx	r3
    return true;
    4198:	e7de      	b.n	4158 <rtos_uart_start_read_buffer+0x14>
    419a:	46c0      	nop			; (mov r8, r8)
    419c:	00002199 	.word	0x00002199
    41a0:	20000408 	.word	0x20000408
    41a4:	0000163d 	.word	0x0000163d
    41a8:	0000171d 	.word	0x0000171d
    41ac:	000016a9 	.word	0x000016a9
    41b0:	000016f5 	.word	0x000016f5

000041b4 <rtos_uart_wait_until_read_complete>:

void rtos_uart_wait_until_read_complete(DMA_Descriptor* dmadesc) {
    41b4:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->rxchannel);
    41b6:	7840      	ldrb	r0, [r0, #1]
    41b8:	4b01      	ldr	r3, [pc, #4]	; (41c0 <rtos_uart_wait_until_read_complete+0xc>)
    41ba:	4798      	blx	r3
}
    41bc:	bd10      	pop	{r4, pc}
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	00004045 	.word	0x00004045

000041c4 <rtos_uart_wait_until_read_complete_or_timeout>:

void rtos_uart_wait_until_read_complete_or_timeout(DMA_Descriptor* dmadesc, uint32_t timeout_ticks) {
    41c4:	b510      	push	{r4, lr}
    41c6:	0004      	movs	r4, r0
    rtos_dma_wait_until_end_or_timeout(dmadesc->rxchannel, timeout_ticks);
    41c8:	7840      	ldrb	r0, [r0, #1]
    41ca:	4b03      	ldr	r3, [pc, #12]	; (41d8 <rtos_uart_wait_until_read_complete_or_timeout+0x14>)
    41cc:	4798      	blx	r3

    dma_enable_channel(dmadesc->rxchannel);
    41ce:	7860      	ldrb	r0, [r4, #1]
    41d0:	4b02      	ldr	r3, [pc, #8]	; (41dc <rtos_uart_wait_until_read_complete_or_timeout+0x18>)
    41d2:	4798      	blx	r3
    41d4:	bd10      	pop	{r4, pc}
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	0000407d 	.word	0x0000407d
    41dc:	000016f5 	.word	0x000016f5

000041e0 <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    41e0:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    41e2:	4b25      	ldr	r3, [pc, #148]	; (4278 <usb_proc_loop+0x98>)
    41e4:	2200      	movs	r2, #0
    41e6:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    41e8:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    41ea:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    41ec:	70da      	strb	r2, [r3, #3]
    41ee:	e00f      	b.n	4210 <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    41f0:	4c21      	ldr	r4, [pc, #132]	; (4278 <usb_proc_loop+0x98>)
    41f2:	68e0      	ldr	r0, [r4, #12]
    41f4:	18c0      	adds	r0, r0, r3
    41f6:	4b21      	ldr	r3, [pc, #132]	; (427c <usb_proc_loop+0x9c>)
    41f8:	4798      	blx	r3
    41fa:	68a3      	ldr	r3, [r4, #8]
    41fc:	181b      	adds	r3, r3, r0
    41fe:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    4200:	4b1d      	ldr	r3, [pc, #116]	; (4278 <usb_proc_loop+0x98>)
    4202:	78db      	ldrb	r3, [r3, #3]
    4204:	2b00      	cmp	r3, #0
    4206:	d003      	beq.n	4210 <usb_proc_loop+0x30>
    4208:	4b1d      	ldr	r3, [pc, #116]	; (4280 <usb_proc_loop+0xa0>)
    420a:	681b      	ldr	r3, [r3, #0]
    420c:	2b00      	cmp	r3, #0
    420e:	d11f      	bne.n	4250 <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    4210:	4c19      	ldr	r4, [pc, #100]	; (4278 <usb_proc_loop+0x98>)
    4212:	2301      	movs	r3, #1
    4214:	22ff      	movs	r2, #255	; 0xff
    4216:	2100      	movs	r1, #0
    4218:	0020      	movs	r0, r4
    421a:	4d1a      	ldr	r5, [pc, #104]	; (4284 <usb_proc_loop+0xa4>)
    421c:	47a8      	blx	r5
		usb_interrupt = false;
    421e:	2300      	movs	r3, #0
    4220:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    4222:	7863      	ldrb	r3, [r4, #1]
    4224:	2b00      	cmp	r3, #0
    4226:	d125      	bne.n	4274 <usb_proc_loop+0x94>
		usb_handle_function();
    4228:	4b17      	ldr	r3, [pc, #92]	; (4288 <usb_proc_loop+0xa8>)
    422a:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    422c:	4b12      	ldr	r3, [pc, #72]	; (4278 <usb_proc_loop+0x98>)
    422e:	789b      	ldrb	r3, [r3, #2]
    4230:	2b00      	cmp	r3, #0
    4232:	d0e5      	beq.n	4200 <usb_proc_loop+0x20>
    4234:	4b15      	ldr	r3, [pc, #84]	; (428c <usb_proc_loop+0xac>)
    4236:	781b      	ldrb	r3, [r3, #0]
    4238:	2b00      	cmp	r3, #0
    423a:	d1e1      	bne.n	4200 <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    423c:	4b0e      	ldr	r3, [pc, #56]	; (4278 <usb_proc_loop+0x98>)
    423e:	685a      	ldr	r2, [r3, #4]
    4240:	689b      	ldr	r3, [r3, #8]
    4242:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    4244:	429a      	cmp	r2, r3
    4246:	d1d3      	bne.n	41f0 <usb_proc_loop+0x10>
    4248:	4b0b      	ldr	r3, [pc, #44]	; (4278 <usb_proc_loop+0x98>)
    424a:	2200      	movs	r2, #0
    424c:	709a      	strb	r2, [r3, #2]
    424e:	e7d7      	b.n	4200 <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    4250:	4b0b      	ldr	r3, [pc, #44]	; (4280 <usb_proc_loop+0xa0>)
    4252:	6819      	ldr	r1, [r3, #0]
    4254:	4c08      	ldr	r4, [pc, #32]	; (4278 <usb_proc_loop+0x98>)
    4256:	6920      	ldr	r0, [r4, #16]
    4258:	6963      	ldr	r3, [r4, #20]
    425a:	18c0      	adds	r0, r0, r3
    425c:	4b0c      	ldr	r3, [pc, #48]	; (4290 <usb_proc_loop+0xb0>)
    425e:	4798      	blx	r3
    4260:	6963      	ldr	r3, [r4, #20]
    4262:	18c0      	adds	r0, r0, r3
    4264:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    4266:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    4268:	4298      	cmp	r0, r3
    426a:	d1d1      	bne.n	4210 <usb_proc_loop+0x30>
    426c:	4b02      	ldr	r3, [pc, #8]	; (4278 <usb_proc_loop+0x98>)
    426e:	2200      	movs	r2, #0
    4270:	70da      	strb	r2, [r3, #3]
    4272:	e7cd      	b.n	4210 <usb_proc_loop+0x30>
		}
	}
}
    4274:	bd70      	pop	{r4, r5, r6, pc}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	200006b0 	.word	0x200006b0
    427c:	00002e19 	.word	0x00002e19
    4280:	20000560 	.word	0x20000560
    4284:	00003511 	.word	0x00003511
    4288:	00002c85 	.word	0x00002c85
    428c:	2000055c 	.word	0x2000055c
    4290:	00002e55 	.word	0x00002e55

00004294 <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    4294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4296:	46ce      	mov	lr, r9
    4298:	4647      	mov	r7, r8
    429a:	b580      	push	{r7, lr}
    429c:	0006      	movs	r6, r0
    429e:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42a0:	4f15      	ldr	r7, [pc, #84]	; (42f8 <rtos_usb_init+0x64>)
    42a2:	2580      	movs	r5, #128	; 0x80
    42a4:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    42a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42aa:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    42ae:	22c0      	movs	r2, #192	; 0xc0
    42b0:	0492      	lsls	r2, r2, #18
    42b2:	2106      	movs	r1, #6
    42b4:	2000      	movs	r0, #0
    42b6:	4b11      	ldr	r3, [pc, #68]	; (42fc <rtos_usb_init+0x68>)
    42b8:	4798      	blx	r3
	usb_init();
    42ba:	4b11      	ldr	r3, [pc, #68]	; (4300 <rtos_usb_init+0x6c>)
    42bc:	4798      	blx	r3
	usb_attach();
    42be:	4b11      	ldr	r3, [pc, #68]	; (4304 <rtos_usb_init+0x70>)
    42c0:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    42c2:	4911      	ldr	r1, [pc, #68]	; (4308 <rtos_usb_init+0x74>)
    42c4:	4c11      	ldr	r4, [pc, #68]	; (430c <rtos_usb_init+0x78>)
    42c6:	231c      	movs	r3, #28
    42c8:	4699      	mov	r9, r3
    42ca:	44a1      	add	r9, r4
    42cc:	4643      	mov	r3, r8
    42ce:	0032      	movs	r2, r6
    42d0:	4648      	mov	r0, r9
    42d2:	4e0f      	ldr	r6, [pc, #60]	; (4310 <rtos_usb_init+0x7c>)
    42d4:	47b0      	blx	r6
	dispatch_process(&usbproc);
    42d6:	4648      	mov	r0, r9
    42d8:	4b0e      	ldr	r3, [pc, #56]	; (4314 <rtos_usb_init+0x80>)
    42da:	4798      	blx	r3
	wait_until_started(&usbproc);
    42dc:	2201      	movs	r2, #1
    42de:	0020      	movs	r0, r4
    42e0:	3034      	adds	r0, #52	; 0x34
    42e2:	2301      	movs	r3, #1
    42e4:	4252      	negs	r2, r2
    42e6:	2100      	movs	r1, #0
    42e8:	4c0b      	ldr	r4, [pc, #44]	; (4318 <rtos_usb_init+0x84>)
    42ea:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42ec:	603d      	str	r5, [r7, #0]
}
    42ee:	bcc0      	pop	{r6, r7}
    42f0:	46b9      	mov	r9, r7
    42f2:	46b0      	mov	r8, r6
    42f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	e000e100 	.word	0xe000e100
    42fc:	00001ebd 	.word	0x00001ebd
    4300:	000028c9 	.word	0x000028c9
    4304:	00002c29 	.word	0x00002c29
    4308:	000041e1 	.word	0x000041e1
    430c:	200006b0 	.word	0x200006b0
    4310:	000031a5 	.word	0x000031a5
    4314:	0000328d 	.word	0x0000328d
    4318:	00003511 	.word	0x00003511

0000431c <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    431c:	2380      	movs	r3, #128	; 0x80
    431e:	4a05      	ldr	r2, [pc, #20]	; (4334 <USB_Handler+0x18>)
    4320:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    4322:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4326:	f3bf 8f6f 	isb	sy

void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);
	
	usb_interrupt = true;
    432a:	4b03      	ldr	r3, [pc, #12]	; (4338 <USB_Handler+0x1c>)
    432c:	2201      	movs	r2, #1
    432e:	701a      	strb	r2, [r3, #0]
}
    4330:	4770      	bx	lr
    4332:	46c0      	nop			; (mov r8, r8)
    4334:	e000e100 	.word	0xe000e100
    4338:	200006b0 	.word	0x200006b0

0000433c <rtos_usb_start_send_buffer>:
	usb_quit = true;
	join_process(&usbproc);
}


void rtos_usb_start_send_buffer(uint8_t* buffer, int count) {
    433c:	b570      	push	{r4, r5, r6, lr}
    433e:	0005      	movs	r5, r0
    4340:	000e      	movs	r6, r1
	// if send operation is currently in progress wait until it finishes
	if (usb_send_status) wait_until_false(&usb_send_status);
    4342:	4b0d      	ldr	r3, [pc, #52]	; (4378 <rtos_usb_start_send_buffer+0x3c>)
    4344:	789b      	ldrb	r3, [r3, #2]
    4346:	2b00      	cmp	r3, #0
    4348:	d10e      	bne.n	4368 <rtos_usb_start_send_buffer+0x2c>
	usb_send_buffer = buffer;
    434a:	4c0b      	ldr	r4, [pc, #44]	; (4378 <rtos_usb_start_send_buffer+0x3c>)
    434c:	60e5      	str	r5, [r4, #12]
	usb_send_buffer_count = count;
    434e:	6066      	str	r6, [r4, #4]
	usb_send_bytes_sent = 0;
    4350:	2300      	movs	r3, #0
    4352:	60a3      	str	r3, [r4, #8]
	usb_send_status = true;
    4354:	3301      	adds	r3, #1
    4356:	70a3      	strb	r3, [r4, #2]
	// start send
	usb_send_bytes_sent += usb_serial_send_buffer(buffer, count);
    4358:	0031      	movs	r1, r6
    435a:	0028      	movs	r0, r5
    435c:	4b07      	ldr	r3, [pc, #28]	; (437c <rtos_usb_start_send_buffer+0x40>)
    435e:	4798      	blx	r3
    4360:	68a3      	ldr	r3, [r4, #8]
    4362:	181b      	adds	r3, r3, r0
    4364:	60a3      	str	r3, [r4, #8]
}
    4366:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_send_status) wait_until_false(&usb_send_status);
    4368:	4805      	ldr	r0, [pc, #20]	; (4380 <rtos_usb_start_send_buffer+0x44>)
    436a:	2300      	movs	r3, #0
    436c:	22ff      	movs	r2, #255	; 0xff
    436e:	2100      	movs	r1, #0
    4370:	4c04      	ldr	r4, [pc, #16]	; (4384 <rtos_usb_start_send_buffer+0x48>)
    4372:	47a0      	blx	r4
    4374:	e7e9      	b.n	434a <rtos_usb_start_send_buffer+0xe>
    4376:	46c0      	nop			; (mov r8, r8)
    4378:	200006b0 	.word	0x200006b0
    437c:	00002e19 	.word	0x00002e19
    4380:	200006b2 	.word	0x200006b2
    4384:	00003511 	.word	0x00003511

00004388 <rtos_usb_wait_until_send_complete>:

int rtos_usb_wait_until_send_complete() {
    4388:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_send_status);
    438a:	4c04      	ldr	r4, [pc, #16]	; (439c <rtos_usb_wait_until_send_complete+0x14>)
    438c:	1ca0      	adds	r0, r4, #2
    438e:	2300      	movs	r3, #0
    4390:	22ff      	movs	r2, #255	; 0xff
    4392:	2100      	movs	r1, #0
    4394:	4d02      	ldr	r5, [pc, #8]	; (43a0 <rtos_usb_wait_until_send_complete+0x18>)
    4396:	47a8      	blx	r5
	return usb_send_bytes_sent;
    4398:	68a0      	ldr	r0, [r4, #8]
}
    439a:	bd70      	pop	{r4, r5, r6, pc}
    439c:	200006b0 	.word	0x200006b0
    43a0:	00003511 	.word	0x00003511

000043a4 <rtos_usb_start_read_buffer>:


void rtos_usb_start_read_buffer(uint8_t* buffer, int count) {
    43a4:	b570      	push	{r4, r5, r6, lr}
    43a6:	0005      	movs	r5, r0
    43a8:	000c      	movs	r4, r1
	// if read operation is currently in progress wait until it finishes
	if (usb_read_status) wait_until_false(&usb_read_status);
    43aa:	4b09      	ldr	r3, [pc, #36]	; (43d0 <rtos_usb_start_read_buffer+0x2c>)
    43ac:	78db      	ldrb	r3, [r3, #3]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d107      	bne.n	43c2 <rtos_usb_start_read_buffer+0x1e>
	usb_read_buffer = buffer;
    43b2:	4b07      	ldr	r3, [pc, #28]	; (43d0 <rtos_usb_start_read_buffer+0x2c>)
    43b4:	611d      	str	r5, [r3, #16]
	usb_read_buffer_count = count;
    43b6:	619c      	str	r4, [r3, #24]
	usb_read_bytes_read = 0;
    43b8:	2200      	movs	r2, #0
    43ba:	615a      	str	r2, [r3, #20]
	usb_read_status = true;
    43bc:	3201      	adds	r2, #1
    43be:	70da      	strb	r2, [r3, #3]
}
    43c0:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_read_status) wait_until_false(&usb_read_status);
    43c2:	4804      	ldr	r0, [pc, #16]	; (43d4 <rtos_usb_start_read_buffer+0x30>)
    43c4:	2300      	movs	r3, #0
    43c6:	22ff      	movs	r2, #255	; 0xff
    43c8:	2100      	movs	r1, #0
    43ca:	4e03      	ldr	r6, [pc, #12]	; (43d8 <rtos_usb_start_read_buffer+0x34>)
    43cc:	47b0      	blx	r6
    43ce:	e7f0      	b.n	43b2 <rtos_usb_start_read_buffer+0xe>
    43d0:	200006b0 	.word	0x200006b0
    43d4:	200006b3 	.word	0x200006b3
    43d8:	00003511 	.word	0x00003511

000043dc <rtos_usb_wait_until_read_complete>:

int rtos_usb_wait_until_read_complete() {
    43dc:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_read_status);
    43de:	4c04      	ldr	r4, [pc, #16]	; (43f0 <rtos_usb_wait_until_read_complete+0x14>)
    43e0:	1ce0      	adds	r0, r4, #3
    43e2:	2300      	movs	r3, #0
    43e4:	22ff      	movs	r2, #255	; 0xff
    43e6:	2100      	movs	r1, #0
    43e8:	4d02      	ldr	r5, [pc, #8]	; (43f4 <rtos_usb_wait_until_read_complete+0x18>)
    43ea:	47a8      	blx	r5
	return usb_read_bytes_read;
    43ec:	6960      	ldr	r0, [r4, #20]
}
    43ee:	bd70      	pop	{r4, r5, r6, pc}
    43f0:	200006b0 	.word	0x200006b0
    43f4:	00003511 	.word	0x00003511

000043f8 <CRC8>:
#include "gnclink.h"

const uint8_t CRC8_LUT_L[] = { 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D };
const uint8_t CRC8_LUT_H[] = { 0x00, 0x70, 0xE0, 0x90, 0xC7, 0xB7, 0x27, 0x57, 0x89, 0xF9, 0x69, 0x19, 0x4E, 0x3E, 0xAE, 0xDE };

uint8_t CRC8(uint8_t* data, int length) {
    43f8:	b570      	push	{r4, r5, r6, lr}
    43fa:	0006      	movs	r6, r0
	uint8_t crc = 0;
	for (int index = 0; index < length; ++index) {
    43fc:	2400      	movs	r4, #0
	uint8_t crc = 0;
    43fe:	2000      	movs	r0, #0
	for (int index = 0; index < length; ++index) {
    4400:	e00a      	b.n	4418 <CRC8+0x20>
		crc ^= data[index];
    4402:	5d33      	ldrb	r3, [r6, r4]
    4404:	4043      	eors	r3, r0
		crc = CRC8_LUT_L[crc & 0xF] ^ CRC8_LUT_H[crc >> 4];
    4406:	250f      	movs	r5, #15
    4408:	401d      	ands	r5, r3
    440a:	4a05      	ldr	r2, [pc, #20]	; (4420 <CRC8+0x28>)
    440c:	5d50      	ldrb	r0, [r2, r5]
    440e:	091b      	lsrs	r3, r3, #4
    4410:	18d2      	adds	r2, r2, r3
    4412:	7c13      	ldrb	r3, [r2, #16]
    4414:	4058      	eors	r0, r3
	for (int index = 0; index < length; ++index) {
    4416:	3401      	adds	r4, #1
    4418:	428c      	cmp	r4, r1
    441a:	dbf2      	blt.n	4402 <CRC8+0xa>
	}
	return crc;
}
    441c:	bd70      	pop	{r4, r5, r6, pc}
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	00005ba4 	.word	0x00005ba4

00004424 <GNClink_Get_Packet_Payload_Pointer>:

uint8_t* GNClink_Get_Packet_Payload_Pointer(uint8_t* packetPointer) {
	return packetPointer + GNCLINK_PACKET_HEADER_LENGTH;
    4424:	3004      	adds	r0, #4
}
    4426:	4770      	bx	lr

00004428 <GNClink_Construct_Packet>:

bool GNClink_Construct_Packet(uint8_t* packetPointer, GNClink_PacketType packetType, GNClink_PacketFlags packetFlags, int payloadSize) {
    4428:	b570      	push	{r4, r5, r6, lr}
    442a:	000c      	movs	r4, r1
	// validate inputs
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    442c:	2b3b      	cmp	r3, #59	; 0x3b
    442e:	d80c      	bhi.n	444a <GNClink_Construct_Packet+0x22>

	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;
	// get pointer to footer
	GNClink_PacketFooter* footer = (GNClink_PacketFooter*)(packetPointer + GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    4430:	1d19      	adds	r1, r3, #4
    4432:	1845      	adds	r5, r0, r1

	// populate header
	header->magic = GNCLINK_PACKET_MAGIC;
    4434:	26ac      	movs	r6, #172	; 0xac
    4436:	7006      	strb	r6, [r0, #0]
	header->packetType = packetType;
    4438:	7044      	strb	r4, [r0, #1]
	header->packetFlags = packetFlags;
    443a:	7082      	strb	r2, [r0, #2]
	header->packetLength = payloadSize + GNCLINK_PACKET_HEADER_LENGTH + GNCLINK_PACKET_FOOTER_LENGTH;
    443c:	3305      	adds	r3, #5
    443e:	70c3      	strb	r3, [r0, #3]

	// populate footer
	footer->crc = CRC8(packetPointer, GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    4440:	4b03      	ldr	r3, [pc, #12]	; (4450 <GNClink_Construct_Packet+0x28>)
    4442:	4798      	blx	r3
    4444:	7028      	strb	r0, [r5, #0]

	return true;
    4446:	2001      	movs	r0, #1
}
    4448:	bd70      	pop	{r4, r5, r6, pc}
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    444a:	2000      	movs	r0, #0
    444c:	e7fc      	b.n	4448 <GNClink_Construct_Packet+0x20>
    444e:	46c0      	nop			; (mov r8, r8)
    4450:	000043f9 	.word	0x000043f9

00004454 <GNClink_Check_Packet>:

bool GNClink_Check_Packet(uint8_t* packetPointer) {
    4454:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	// check magic
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    4456:	7803      	ldrb	r3, [r0, #0]
    4458:	2bac      	cmp	r3, #172	; 0xac
    445a:	d10a      	bne.n	4472 <GNClink_Check_Packet+0x1e>

	// check packet length
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    445c:	78c1      	ldrb	r1, [r0, #3]
    445e:	1f4b      	subs	r3, r1, #5
    4460:	b2db      	uxtb	r3, r3
    4462:	2b3b      	cmp	r3, #59	; 0x3b
    4464:	d807      	bhi.n	4476 <GNClink_Check_Packet+0x22>

	// check CRC
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    4466:	4b06      	ldr	r3, [pc, #24]	; (4480 <GNClink_Check_Packet+0x2c>)
    4468:	4798      	blx	r3
    446a:	2800      	cmp	r0, #0
    446c:	d105      	bne.n	447a <GNClink_Check_Packet+0x26>

	// all checks passed, return true
	return true;
    446e:	3001      	adds	r0, #1
    4470:	e000      	b.n	4474 <GNClink_Check_Packet+0x20>
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    4472:	2000      	movs	r0, #0
}
    4474:	bd10      	pop	{r4, pc}
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4476:	2000      	movs	r0, #0
    4478:	e7fc      	b.n	4474 <GNClink_Check_Packet+0x20>
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    447a:	2000      	movs	r0, #0
    447c:	e7fa      	b.n	4474 <GNClink_Check_Packet+0x20>
    447e:	46c0      	nop			; (mov r8, r8)
    4480:	000043f9 	.word	0x000043f9

00004484 <GNClink_Get_Packet_Type>:

GNClink_PacketType GNClink_Get_Packet_Type(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetType;
    4484:	7840      	ldrb	r0, [r0, #1]
}
    4486:	4770      	bx	lr

00004488 <GNClink_Get_Packet_Flags>:

GNClink_PacketFlags GNClink_Get_Packet_Flags(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetFlags;
    4488:	7880      	ldrb	r0, [r0, #2]
}
    448a:	4770      	bx	lr

0000448c <GNClink_Get_Frame_Payload_Pointer>:


uint8_t* GNClink_Get_Frame_Payload_Pointer(uint8_t* framePointer) {
	return framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    448c:	3003      	adds	r0, #3
}
    448e:	4770      	bx	lr

00004490 <GNClink_Get_Frame>:

bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    4490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4492:	000e      	movs	r6, r1
	// get pointer to packet header
	GNClink_PacketHeader* packetHeader = (GNClink_PacketHeader*)packetPointer;

	// check packet length
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4494:	78c1      	ldrb	r1, [r0, #3]
    4496:	1f4c      	subs	r4, r1, #5
    4498:	b2e4      	uxtb	r4, r4
    449a:	2c3b      	cmp	r4, #59	; 0x3b
    449c:	d832      	bhi.n	4504 <GNClink_Get_Frame+0x74>

	// calculate number of frames for packet
	int frameCount = (packetHeader->packetLength + GNCLINK_FRAME_PAYLOAD_LENGTH - 1) / GNCLINK_FRAME_PAYLOAD_LENGTH;
    449e:	310f      	adds	r1, #15
    44a0:	1109      	asrs	r1, r1, #4
	*moreFrames = frameIndex < frameCount - 1;
    44a2:	1e4d      	subs	r5, r1, #1
    44a4:	2401      	movs	r4, #1
    44a6:	429d      	cmp	r5, r3
    44a8:	dc00      	bgt.n	44ac <GNClink_Get_Frame+0x1c>
    44aa:	2400      	movs	r4, #0
    44ac:	9d06      	ldr	r5, [sp, #24]
    44ae:	702c      	strb	r4, [r5, #0]

	// check index is valid
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    44b0:	2b00      	cmp	r3, #0
    44b2:	db29      	blt.n	4508 <GNClink_Get_Frame+0x78>
    44b4:	4299      	cmp	r1, r3
    44b6:	dd29      	ble.n	450c <GNClink_Get_Frame+0x7c>
	// get pointer to frame header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    44b8:	1cf7      	adds	r7, r6, #3

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    44ba:	24ae      	movs	r4, #174	; 0xae
    44bc:	7034      	strb	r4, [r6, #0]
	header->index = frameIndex;
    44be:	7073      	strb	r3, [r6, #1]
	header->flags = flags;
    44c0:	70b2      	strb	r2, [r6, #2]
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    44c2:	1c5c      	adds	r4, r3, #1
    44c4:	428c      	cmp	r4, r1
    44c6:	d00c      	beq.n	44e2 <GNClink_Get_Frame+0x52>
bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    44c8:	2200      	movs	r2, #0

	// populate payload
	int i = 0;
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    44ca:	2a0f      	cmp	r2, #15
    44cc:	dc11      	bgt.n	44f2 <GNClink_Get_Frame+0x62>
    44ce:	78c5      	ldrb	r5, [r0, #3]
    44d0:	011c      	lsls	r4, r3, #4
    44d2:	1b2d      	subs	r5, r5, r4
    44d4:	4295      	cmp	r5, r2
    44d6:	dd0c      	ble.n	44f2 <GNClink_Get_Frame+0x62>
		payload[i] = packetPointer[i + GNCLINK_FRAME_PAYLOAD_LENGTH * frameIndex];
    44d8:	18a4      	adds	r4, r4, r2
    44da:	5d01      	ldrb	r1, [r0, r4]
    44dc:	54b9      	strb	r1, [r7, r2]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    44de:	3201      	adds	r2, #1
    44e0:	e7f3      	b.n	44ca <GNClink_Get_Frame+0x3a>
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    44e2:	2102      	movs	r1, #2
    44e4:	430a      	orrs	r2, r1
    44e6:	70b2      	strb	r2, [r6, #2]
    44e8:	e7ee      	b.n	44c8 <GNClink_Get_Frame+0x38>
	}
	// populate the rest with zeros
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
		payload[i] = 0;
    44ea:	18bb      	adds	r3, r7, r2
    44ec:	2100      	movs	r1, #0
    44ee:	7019      	strb	r1, [r3, #0]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    44f0:	3201      	adds	r2, #1
    44f2:	2a0f      	cmp	r2, #15
    44f4:	ddf9      	ble.n	44ea <GNClink_Get_Frame+0x5a>
	}

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    44f6:	2113      	movs	r1, #19
    44f8:	0030      	movs	r0, r6
    44fa:	4b05      	ldr	r3, [pc, #20]	; (4510 <GNClink_Get_Frame+0x80>)
    44fc:	4798      	blx	r3
    44fe:	74f0      	strb	r0, [r6, #19]

	return true;
    4500:	2001      	movs	r0, #1
    4502:	e000      	b.n	4506 <GNClink_Get_Frame+0x76>
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4504:	2000      	movs	r0, #0
}
    4506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    4508:	2000      	movs	r0, #0
    450a:	e7fc      	b.n	4506 <GNClink_Get_Frame+0x76>
    450c:	2000      	movs	r0, #0
    450e:	e7fa      	b.n	4506 <GNClink_Get_Frame+0x76>
    4510:	000043f9 	.word	0x000043f9

00004514 <GNClink_Check_Frame>:

bool GNClink_Check_Frame(uint8_t* framePointer) {
    4514:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	// check magic
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4516:	7803      	ldrb	r3, [r0, #0]
    4518:	2bae      	cmp	r3, #174	; 0xae
    451a:	d109      	bne.n	4530 <GNClink_Check_Frame+0x1c>

	// check index
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    451c:	7843      	ldrb	r3, [r0, #1]
    451e:	2b03      	cmp	r3, #3
    4520:	d808      	bhi.n	4534 <GNClink_Check_Frame+0x20>

	// check CRC
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4522:	2114      	movs	r1, #20
    4524:	4b05      	ldr	r3, [pc, #20]	; (453c <GNClink_Check_Frame+0x28>)
    4526:	4798      	blx	r3
    4528:	2800      	cmp	r0, #0
    452a:	d105      	bne.n	4538 <GNClink_Check_Frame+0x24>

	// all checks passed, return true
	return true;
    452c:	3001      	adds	r0, #1
    452e:	e000      	b.n	4532 <GNClink_Check_Frame+0x1e>
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4530:	2000      	movs	r0, #0
}
    4532:	bd10      	pop	{r4, pc}
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4534:	2000      	movs	r0, #0
    4536:	e7fc      	b.n	4532 <GNClink_Check_Frame+0x1e>
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4538:	2000      	movs	r0, #0
    453a:	e7fa      	b.n	4532 <GNClink_Check_Frame+0x1e>
    453c:	000043f9 	.word	0x000043f9

00004540 <GNClink_Frame_RequestResend>:

bool GNClink_Frame_RequestResend(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (header->flags & GNClink_FrameFlags_RequestResend) != 0;
    4540:	7883      	ldrb	r3, [r0, #2]
    4542:	089b      	lsrs	r3, r3, #2
    4544:	2001      	movs	r0, #1
    4546:	4018      	ands	r0, r3
}
    4548:	4770      	bx	lr

0000454a <GNClink_Get_Frame_Index>:

int GNClink_Get_Frame_Index(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (int)header->index;
    454a:	7840      	ldrb	r0, [r0, #1]
}
    454c:	4770      	bx	lr
	...

00004550 <GNClink_Construct_RequestResendFrame>:

void GNClink_Construct_RequestResendFrame(uint8_t* framePointer) {
    4550:	b510      	push	{r4, lr}
    4552:	0004      	movs	r4, r0
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    4554:	23ae      	movs	r3, #174	; 0xae
    4556:	7003      	strb	r3, [r0, #0]
	header->index = 0;
    4558:	2300      	movs	r3, #0
    455a:	7043      	strb	r3, [r0, #1]
	header->flags = GNClink_FrameFlags_RequestResend;
    455c:	3304      	adds	r3, #4
    455e:	7083      	strb	r3, [r0, #2]

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    4560:	2113      	movs	r1, #19
    4562:	4b02      	ldr	r3, [pc, #8]	; (456c <GNClink_Construct_RequestResendFrame+0x1c>)
    4564:	4798      	blx	r3
    4566:	74e0      	strb	r0, [r4, #19]
}
    4568:	bd10      	pop	{r4, pc}
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	000043f9 	.word	0x000043f9

00004570 <GNClink_Reconstruct_Packet_From_Frames>:


bool GNClink_Reconstruct_Packet_From_Frames(uint8_t* framePointer, uint8_t* packetPointer, bool* moreFrames) {
    4570:	b530      	push	{r4, r5, lr}
	// get pointer to frame footer
	//GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    4572:	2400      	movs	r4, #0
    4574:	2c0f      	cmp	r4, #15
    4576:	dc09      	bgt.n	458c <GNClink_Reconstruct_Packet_From_Frames+0x1c>
    4578:	7843      	ldrb	r3, [r0, #1]
    457a:	011b      	lsls	r3, r3, #4
    457c:	191b      	adds	r3, r3, r4
    457e:	2b3f      	cmp	r3, #63	; 0x3f
    4580:	dc04      	bgt.n	458c <GNClink_Reconstruct_Packet_From_Frames+0x1c>
		packetPointer[i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH] = payload[i];
    4582:	1905      	adds	r5, r0, r4
    4584:	78ed      	ldrb	r5, [r5, #3]
    4586:	54cd      	strb	r5, [r1, r3]
	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    4588:	3401      	adds	r4, #1
    458a:	e7f3      	b.n	4574 <GNClink_Reconstruct_Packet_From_Frames+0x4>
	}

	*moreFrames = (header->flags & GNClink_FrameFlags_TransactionEnd) == 0;
    458c:	7883      	ldrb	r3, [r0, #2]
    458e:	085b      	lsrs	r3, r3, #1
    4590:	2101      	movs	r1, #1
    4592:	404b      	eors	r3, r1
    4594:	2101      	movs	r1, #1
    4596:	400b      	ands	r3, r1
    4598:	7013      	strb	r3, [r2, #0]

	return true;
    459a:	2001      	movs	r0, #1
    459c:	bd30      	pop	{r4, r5, pc}
	...

000045a0 <fp_multiply>:
#include <fixedpoint_defs.h>

fp32_t fp_multiply(fp32_t a, fp32_t b) {
    45a0:	b510      	push	{r4, lr}
    45a2:	000a      	movs	r2, r1
    fp_long c = (fp_long)a * b;
    45a4:	17c1      	asrs	r1, r0, #31
    45a6:	17d3      	asrs	r3, r2, #31
    45a8:	4c02      	ldr	r4, [pc, #8]	; (45b4 <fp_multiply+0x14>)
    45aa:	47a0      	blx	r4
    return c >> 16;
    45ac:	0409      	lsls	r1, r1, #16
    45ae:	0c00      	lsrs	r0, r0, #16
    45b0:	4308      	orrs	r0, r1
    45b2:	bd10      	pop	{r4, pc}
    45b4:	0000462d 	.word	0x0000462d

000045b8 <__aeabi_cfrcmple>:
    45b8:	4684      	mov	ip, r0
    45ba:	0008      	movs	r0, r1
    45bc:	4661      	mov	r1, ip
    45be:	e7ff      	b.n	45c0 <__aeabi_cfcmpeq>

000045c0 <__aeabi_cfcmpeq>:
    45c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    45c2:	f000 fb93 	bl	4cec <__lesf2>
    45c6:	2800      	cmp	r0, #0
    45c8:	d401      	bmi.n	45ce <__aeabi_cfcmpeq+0xe>
    45ca:	2100      	movs	r1, #0
    45cc:	42c8      	cmn	r0, r1
    45ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000045d0 <__aeabi_fcmpeq>:
    45d0:	b510      	push	{r4, lr}
    45d2:	f000 fb13 	bl	4bfc <__eqsf2>
    45d6:	4240      	negs	r0, r0
    45d8:	3001      	adds	r0, #1
    45da:	bd10      	pop	{r4, pc}

000045dc <__aeabi_fcmplt>:
    45dc:	b510      	push	{r4, lr}
    45de:	f000 fb85 	bl	4cec <__lesf2>
    45e2:	2800      	cmp	r0, #0
    45e4:	db01      	blt.n	45ea <__aeabi_fcmplt+0xe>
    45e6:	2000      	movs	r0, #0
    45e8:	bd10      	pop	{r4, pc}
    45ea:	2001      	movs	r0, #1
    45ec:	bd10      	pop	{r4, pc}
    45ee:	46c0      	nop			; (mov r8, r8)

000045f0 <__aeabi_fcmple>:
    45f0:	b510      	push	{r4, lr}
    45f2:	f000 fb7b 	bl	4cec <__lesf2>
    45f6:	2800      	cmp	r0, #0
    45f8:	dd01      	ble.n	45fe <__aeabi_fcmple+0xe>
    45fa:	2000      	movs	r0, #0
    45fc:	bd10      	pop	{r4, pc}
    45fe:	2001      	movs	r0, #1
    4600:	bd10      	pop	{r4, pc}
    4602:	46c0      	nop			; (mov r8, r8)

00004604 <__aeabi_fcmpgt>:
    4604:	b510      	push	{r4, lr}
    4606:	f000 fb21 	bl	4c4c <__gesf2>
    460a:	2800      	cmp	r0, #0
    460c:	dc01      	bgt.n	4612 <__aeabi_fcmpgt+0xe>
    460e:	2000      	movs	r0, #0
    4610:	bd10      	pop	{r4, pc}
    4612:	2001      	movs	r0, #1
    4614:	bd10      	pop	{r4, pc}
    4616:	46c0      	nop			; (mov r8, r8)

00004618 <__aeabi_fcmpge>:
    4618:	b510      	push	{r4, lr}
    461a:	f000 fb17 	bl	4c4c <__gesf2>
    461e:	2800      	cmp	r0, #0
    4620:	da01      	bge.n	4626 <__aeabi_fcmpge+0xe>
    4622:	2000      	movs	r0, #0
    4624:	bd10      	pop	{r4, pc}
    4626:	2001      	movs	r0, #1
    4628:	bd10      	pop	{r4, pc}
    462a:	46c0      	nop			; (mov r8, r8)

0000462c <__aeabi_lmul>:
    462c:	b5f0      	push	{r4, r5, r6, r7, lr}
    462e:	46ce      	mov	lr, r9
    4630:	4699      	mov	r9, r3
    4632:	0c03      	lsrs	r3, r0, #16
    4634:	469c      	mov	ip, r3
    4636:	0413      	lsls	r3, r2, #16
    4638:	4647      	mov	r7, r8
    463a:	0c1b      	lsrs	r3, r3, #16
    463c:	001d      	movs	r5, r3
    463e:	000e      	movs	r6, r1
    4640:	4661      	mov	r1, ip
    4642:	0404      	lsls	r4, r0, #16
    4644:	0c24      	lsrs	r4, r4, #16
    4646:	b580      	push	{r7, lr}
    4648:	0007      	movs	r7, r0
    464a:	0c10      	lsrs	r0, r2, #16
    464c:	434b      	muls	r3, r1
    464e:	4365      	muls	r5, r4
    4650:	4341      	muls	r1, r0
    4652:	4360      	muls	r0, r4
    4654:	0c2c      	lsrs	r4, r5, #16
    4656:	18c0      	adds	r0, r0, r3
    4658:	1824      	adds	r4, r4, r0
    465a:	468c      	mov	ip, r1
    465c:	42a3      	cmp	r3, r4
    465e:	d903      	bls.n	4668 <__aeabi_lmul+0x3c>
    4660:	2380      	movs	r3, #128	; 0x80
    4662:	025b      	lsls	r3, r3, #9
    4664:	4698      	mov	r8, r3
    4666:	44c4      	add	ip, r8
    4668:	4649      	mov	r1, r9
    466a:	4379      	muls	r1, r7
    466c:	4356      	muls	r6, r2
    466e:	0c23      	lsrs	r3, r4, #16
    4670:	042d      	lsls	r5, r5, #16
    4672:	0c2d      	lsrs	r5, r5, #16
    4674:	1989      	adds	r1, r1, r6
    4676:	4463      	add	r3, ip
    4678:	0424      	lsls	r4, r4, #16
    467a:	1960      	adds	r0, r4, r5
    467c:	18c9      	adds	r1, r1, r3
    467e:	bcc0      	pop	{r6, r7}
    4680:	46b9      	mov	r9, r7
    4682:	46b0      	mov	r8, r6
    4684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4686:	46c0      	nop			; (mov r8, r8)

00004688 <__aeabi_f2uiz>:
    4688:	219e      	movs	r1, #158	; 0x9e
    468a:	b510      	push	{r4, lr}
    468c:	05c9      	lsls	r1, r1, #23
    468e:	1c04      	adds	r4, r0, #0
    4690:	f7ff ffc2 	bl	4618 <__aeabi_fcmpge>
    4694:	2800      	cmp	r0, #0
    4696:	d103      	bne.n	46a0 <__aeabi_f2uiz+0x18>
    4698:	1c20      	adds	r0, r4, #0
    469a:	f000 fe45 	bl	5328 <__aeabi_f2iz>
    469e:	bd10      	pop	{r4, pc}
    46a0:	219e      	movs	r1, #158	; 0x9e
    46a2:	1c20      	adds	r0, r4, #0
    46a4:	05c9      	lsls	r1, r1, #23
    46a6:	f000 fcad 	bl	5004 <__aeabi_fsub>
    46aa:	f000 fe3d 	bl	5328 <__aeabi_f2iz>
    46ae:	2380      	movs	r3, #128	; 0x80
    46b0:	061b      	lsls	r3, r3, #24
    46b2:	469c      	mov	ip, r3
    46b4:	4460      	add	r0, ip
    46b6:	e7f2      	b.n	469e <__aeabi_f2uiz+0x16>

000046b8 <__aeabi_fadd>:
    46b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ba:	0243      	lsls	r3, r0, #9
    46bc:	0045      	lsls	r5, r0, #1
    46be:	0fc4      	lsrs	r4, r0, #31
    46c0:	0248      	lsls	r0, r1, #9
    46c2:	0a42      	lsrs	r2, r0, #9
    46c4:	4694      	mov	ip, r2
    46c6:	004a      	lsls	r2, r1, #1
    46c8:	0a5f      	lsrs	r7, r3, #9
    46ca:	0e2d      	lsrs	r5, r5, #24
    46cc:	099b      	lsrs	r3, r3, #6
    46ce:	0e12      	lsrs	r2, r2, #24
    46d0:	0fc9      	lsrs	r1, r1, #31
    46d2:	0980      	lsrs	r0, r0, #6
    46d4:	428c      	cmp	r4, r1
    46d6:	d022      	beq.n	471e <__aeabi_fadd+0x66>
    46d8:	1aae      	subs	r6, r5, r2
    46da:	2e00      	cmp	r6, #0
    46dc:	dd0d      	ble.n	46fa <__aeabi_fadd+0x42>
    46de:	2a00      	cmp	r2, #0
    46e0:	d12d      	bne.n	473e <__aeabi_fadd+0x86>
    46e2:	2800      	cmp	r0, #0
    46e4:	d100      	bne.n	46e8 <__aeabi_fadd+0x30>
    46e6:	e083      	b.n	47f0 <__aeabi_fadd+0x138>
    46e8:	1e72      	subs	r2, r6, #1
    46ea:	2e01      	cmp	r6, #1
    46ec:	d100      	bne.n	46f0 <__aeabi_fadd+0x38>
    46ee:	e11b      	b.n	4928 <__aeabi_fadd+0x270>
    46f0:	2eff      	cmp	r6, #255	; 0xff
    46f2:	d100      	bne.n	46f6 <__aeabi_fadd+0x3e>
    46f4:	e0a2      	b.n	483c <__aeabi_fadd+0x184>
    46f6:	0016      	movs	r6, r2
    46f8:	e027      	b.n	474a <__aeabi_fadd+0x92>
    46fa:	2e00      	cmp	r6, #0
    46fc:	d048      	beq.n	4790 <__aeabi_fadd+0xd8>
    46fe:	1b56      	subs	r6, r2, r5
    4700:	2d00      	cmp	r5, #0
    4702:	d000      	beq.n	4706 <__aeabi_fadd+0x4e>
    4704:	e0c1      	b.n	488a <__aeabi_fadd+0x1d2>
    4706:	2b00      	cmp	r3, #0
    4708:	d100      	bne.n	470c <__aeabi_fadd+0x54>
    470a:	e0f7      	b.n	48fc <__aeabi_fadd+0x244>
    470c:	1e74      	subs	r4, r6, #1
    470e:	2e01      	cmp	r6, #1
    4710:	d100      	bne.n	4714 <__aeabi_fadd+0x5c>
    4712:	e12d      	b.n	4970 <__aeabi_fadd+0x2b8>
    4714:	2eff      	cmp	r6, #255	; 0xff
    4716:	d100      	bne.n	471a <__aeabi_fadd+0x62>
    4718:	e08e      	b.n	4838 <__aeabi_fadd+0x180>
    471a:	0026      	movs	r6, r4
    471c:	e0ba      	b.n	4894 <__aeabi_fadd+0x1dc>
    471e:	1aa9      	subs	r1, r5, r2
    4720:	2900      	cmp	r1, #0
    4722:	dc00      	bgt.n	4726 <__aeabi_fadd+0x6e>
    4724:	e08c      	b.n	4840 <__aeabi_fadd+0x188>
    4726:	2a00      	cmp	r2, #0
    4728:	d046      	beq.n	47b8 <__aeabi_fadd+0x100>
    472a:	2dff      	cmp	r5, #255	; 0xff
    472c:	d100      	bne.n	4730 <__aeabi_fadd+0x78>
    472e:	e085      	b.n	483c <__aeabi_fadd+0x184>
    4730:	2280      	movs	r2, #128	; 0x80
    4732:	04d2      	lsls	r2, r2, #19
    4734:	4310      	orrs	r0, r2
    4736:	291b      	cmp	r1, #27
    4738:	dd49      	ble.n	47ce <__aeabi_fadd+0x116>
    473a:	3301      	adds	r3, #1
    473c:	e016      	b.n	476c <__aeabi_fadd+0xb4>
    473e:	2dff      	cmp	r5, #255	; 0xff
    4740:	d100      	bne.n	4744 <__aeabi_fadd+0x8c>
    4742:	e07b      	b.n	483c <__aeabi_fadd+0x184>
    4744:	2280      	movs	r2, #128	; 0x80
    4746:	04d2      	lsls	r2, r2, #19
    4748:	4310      	orrs	r0, r2
    474a:	2201      	movs	r2, #1
    474c:	2e1b      	cmp	r6, #27
    474e:	dc07      	bgt.n	4760 <__aeabi_fadd+0xa8>
    4750:	2120      	movs	r1, #32
    4752:	1b89      	subs	r1, r1, r6
    4754:	0002      	movs	r2, r0
    4756:	4088      	lsls	r0, r1
    4758:	40f2      	lsrs	r2, r6
    475a:	1e41      	subs	r1, r0, #1
    475c:	4188      	sbcs	r0, r1
    475e:	4302      	orrs	r2, r0
    4760:	1a9b      	subs	r3, r3, r2
    4762:	015a      	lsls	r2, r3, #5
    4764:	d451      	bmi.n	480a <__aeabi_fadd+0x152>
    4766:	2207      	movs	r2, #7
    4768:	401a      	ands	r2, r3
    476a:	d042      	beq.n	47f2 <__aeabi_fadd+0x13a>
    476c:	220f      	movs	r2, #15
    476e:	401a      	ands	r2, r3
    4770:	2a04      	cmp	r2, #4
    4772:	d000      	beq.n	4776 <__aeabi_fadd+0xbe>
    4774:	3304      	adds	r3, #4
    4776:	015a      	lsls	r2, r3, #5
    4778:	d53b      	bpl.n	47f2 <__aeabi_fadd+0x13a>
    477a:	1c68      	adds	r0, r5, #1
    477c:	2dfe      	cmp	r5, #254	; 0xfe
    477e:	d034      	beq.n	47ea <__aeabi_fadd+0x132>
    4780:	019b      	lsls	r3, r3, #6
    4782:	0a5b      	lsrs	r3, r3, #9
    4784:	b2c0      	uxtb	r0, r0
    4786:	05c0      	lsls	r0, r0, #23
    4788:	4318      	orrs	r0, r3
    478a:	07e4      	lsls	r4, r4, #31
    478c:	4320      	orrs	r0, r4
    478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4790:	26fe      	movs	r6, #254	; 0xfe
    4792:	1c6a      	adds	r2, r5, #1
    4794:	4216      	tst	r6, r2
    4796:	d000      	beq.n	479a <__aeabi_fadd+0xe2>
    4798:	e08b      	b.n	48b2 <__aeabi_fadd+0x1fa>
    479a:	2d00      	cmp	r5, #0
    479c:	d000      	beq.n	47a0 <__aeabi_fadd+0xe8>
    479e:	e0b1      	b.n	4904 <__aeabi_fadd+0x24c>
    47a0:	2b00      	cmp	r3, #0
    47a2:	d100      	bne.n	47a6 <__aeabi_fadd+0xee>
    47a4:	e0df      	b.n	4966 <__aeabi_fadd+0x2ae>
    47a6:	2800      	cmp	r0, #0
    47a8:	d069      	beq.n	487e <__aeabi_fadd+0x1c6>
    47aa:	1a1a      	subs	r2, r3, r0
    47ac:	0156      	lsls	r6, r2, #5
    47ae:	d400      	bmi.n	47b2 <__aeabi_fadd+0xfa>
    47b0:	e0fb      	b.n	49aa <__aeabi_fadd+0x2f2>
    47b2:	000c      	movs	r4, r1
    47b4:	1ac3      	subs	r3, r0, r3
    47b6:	e03c      	b.n	4832 <__aeabi_fadd+0x17a>
    47b8:	2800      	cmp	r0, #0
    47ba:	d100      	bne.n	47be <__aeabi_fadd+0x106>
    47bc:	e0b7      	b.n	492e <__aeabi_fadd+0x276>
    47be:	1e4a      	subs	r2, r1, #1
    47c0:	2901      	cmp	r1, #1
    47c2:	d100      	bne.n	47c6 <__aeabi_fadd+0x10e>
    47c4:	e0aa      	b.n	491c <__aeabi_fadd+0x264>
    47c6:	29ff      	cmp	r1, #255	; 0xff
    47c8:	d038      	beq.n	483c <__aeabi_fadd+0x184>
    47ca:	0011      	movs	r1, r2
    47cc:	e7b3      	b.n	4736 <__aeabi_fadd+0x7e>
    47ce:	0002      	movs	r2, r0
    47d0:	2620      	movs	r6, #32
    47d2:	40ca      	lsrs	r2, r1
    47d4:	1a71      	subs	r1, r6, r1
    47d6:	4088      	lsls	r0, r1
    47d8:	1e41      	subs	r1, r0, #1
    47da:	4188      	sbcs	r0, r1
    47dc:	4310      	orrs	r0, r2
    47de:	181b      	adds	r3, r3, r0
    47e0:	015a      	lsls	r2, r3, #5
    47e2:	d5c0      	bpl.n	4766 <__aeabi_fadd+0xae>
    47e4:	3501      	adds	r5, #1
    47e6:	2dff      	cmp	r5, #255	; 0xff
    47e8:	d16c      	bne.n	48c4 <__aeabi_fadd+0x20c>
    47ea:	20ff      	movs	r0, #255	; 0xff
    47ec:	2300      	movs	r3, #0
    47ee:	e7ca      	b.n	4786 <__aeabi_fadd+0xce>
    47f0:	0035      	movs	r5, r6
    47f2:	08db      	lsrs	r3, r3, #3
    47f4:	2dff      	cmp	r5, #255	; 0xff
    47f6:	d144      	bne.n	4882 <__aeabi_fadd+0x1ca>
    47f8:	2b00      	cmp	r3, #0
    47fa:	d0f6      	beq.n	47ea <__aeabi_fadd+0x132>
    47fc:	2280      	movs	r2, #128	; 0x80
    47fe:	03d2      	lsls	r2, r2, #15
    4800:	4313      	orrs	r3, r2
    4802:	025b      	lsls	r3, r3, #9
    4804:	20ff      	movs	r0, #255	; 0xff
    4806:	0a5b      	lsrs	r3, r3, #9
    4808:	e7bd      	b.n	4786 <__aeabi_fadd+0xce>
    480a:	019e      	lsls	r6, r3, #6
    480c:	09b6      	lsrs	r6, r6, #6
    480e:	0030      	movs	r0, r6
    4810:	f000 fe38 	bl	5484 <__clzsi2>
    4814:	3805      	subs	r0, #5
    4816:	4086      	lsls	r6, r0
    4818:	4285      	cmp	r5, r0
    481a:	dc20      	bgt.n	485e <__aeabi_fadd+0x1a6>
    481c:	2220      	movs	r2, #32
    481e:	1b40      	subs	r0, r0, r5
    4820:	3001      	adds	r0, #1
    4822:	1a12      	subs	r2, r2, r0
    4824:	0033      	movs	r3, r6
    4826:	4096      	lsls	r6, r2
    4828:	40c3      	lsrs	r3, r0
    482a:	1e72      	subs	r2, r6, #1
    482c:	4196      	sbcs	r6, r2
    482e:	2500      	movs	r5, #0
    4830:	4333      	orrs	r3, r6
    4832:	075a      	lsls	r2, r3, #29
    4834:	d19a      	bne.n	476c <__aeabi_fadd+0xb4>
    4836:	e79e      	b.n	4776 <__aeabi_fadd+0xbe>
    4838:	000c      	movs	r4, r1
    483a:	0003      	movs	r3, r0
    483c:	08db      	lsrs	r3, r3, #3
    483e:	e7db      	b.n	47f8 <__aeabi_fadd+0x140>
    4840:	2900      	cmp	r1, #0
    4842:	d010      	beq.n	4866 <__aeabi_fadd+0x1ae>
    4844:	1b51      	subs	r1, r2, r5
    4846:	2d00      	cmp	r5, #0
    4848:	d143      	bne.n	48d2 <__aeabi_fadd+0x21a>
    484a:	2b00      	cmp	r3, #0
    484c:	d100      	bne.n	4850 <__aeabi_fadd+0x198>
    484e:	e093      	b.n	4978 <__aeabi_fadd+0x2c0>
    4850:	1e4d      	subs	r5, r1, #1
    4852:	2901      	cmp	r1, #1
    4854:	d062      	beq.n	491c <__aeabi_fadd+0x264>
    4856:	29ff      	cmp	r1, #255	; 0xff
    4858:	d0ef      	beq.n	483a <__aeabi_fadd+0x182>
    485a:	0029      	movs	r1, r5
    485c:	e03e      	b.n	48dc <__aeabi_fadd+0x224>
    485e:	4b55      	ldr	r3, [pc, #340]	; (49b4 <__aeabi_fadd+0x2fc>)
    4860:	1a2d      	subs	r5, r5, r0
    4862:	4033      	ands	r3, r6
    4864:	e7e5      	b.n	4832 <__aeabi_fadd+0x17a>
    4866:	21fe      	movs	r1, #254	; 0xfe
    4868:	1c6a      	adds	r2, r5, #1
    486a:	4211      	tst	r1, r2
    486c:	d13b      	bne.n	48e6 <__aeabi_fadd+0x22e>
    486e:	2d00      	cmp	r5, #0
    4870:	d16a      	bne.n	4948 <__aeabi_fadd+0x290>
    4872:	2b00      	cmp	r3, #0
    4874:	d100      	bne.n	4878 <__aeabi_fadd+0x1c0>
    4876:	e08e      	b.n	4996 <__aeabi_fadd+0x2de>
    4878:	2800      	cmp	r0, #0
    487a:	d000      	beq.n	487e <__aeabi_fadd+0x1c6>
    487c:	e08d      	b.n	499a <__aeabi_fadd+0x2e2>
    487e:	2500      	movs	r5, #0
    4880:	08db      	lsrs	r3, r3, #3
    4882:	025b      	lsls	r3, r3, #9
    4884:	0a5b      	lsrs	r3, r3, #9
    4886:	b2e8      	uxtb	r0, r5
    4888:	e77d      	b.n	4786 <__aeabi_fadd+0xce>
    488a:	2aff      	cmp	r2, #255	; 0xff
    488c:	d0d4      	beq.n	4838 <__aeabi_fadd+0x180>
    488e:	2480      	movs	r4, #128	; 0x80
    4890:	04e4      	lsls	r4, r4, #19
    4892:	4323      	orrs	r3, r4
    4894:	2401      	movs	r4, #1
    4896:	2e1b      	cmp	r6, #27
    4898:	dc07      	bgt.n	48aa <__aeabi_fadd+0x1f2>
    489a:	2520      	movs	r5, #32
    489c:	1bad      	subs	r5, r5, r6
    489e:	001c      	movs	r4, r3
    48a0:	40ab      	lsls	r3, r5
    48a2:	40f4      	lsrs	r4, r6
    48a4:	1e5d      	subs	r5, r3, #1
    48a6:	41ab      	sbcs	r3, r5
    48a8:	431c      	orrs	r4, r3
    48aa:	1b03      	subs	r3, r0, r4
    48ac:	0015      	movs	r5, r2
    48ae:	000c      	movs	r4, r1
    48b0:	e757      	b.n	4762 <__aeabi_fadd+0xaa>
    48b2:	1a1e      	subs	r6, r3, r0
    48b4:	0172      	lsls	r2, r6, #5
    48b6:	d42e      	bmi.n	4916 <__aeabi_fadd+0x25e>
    48b8:	2e00      	cmp	r6, #0
    48ba:	d1a8      	bne.n	480e <__aeabi_fadd+0x156>
    48bc:	2400      	movs	r4, #0
    48be:	2000      	movs	r0, #0
    48c0:	2300      	movs	r3, #0
    48c2:	e760      	b.n	4786 <__aeabi_fadd+0xce>
    48c4:	2201      	movs	r2, #1
    48c6:	493c      	ldr	r1, [pc, #240]	; (49b8 <__aeabi_fadd+0x300>)
    48c8:	401a      	ands	r2, r3
    48ca:	085b      	lsrs	r3, r3, #1
    48cc:	400b      	ands	r3, r1
    48ce:	4313      	orrs	r3, r2
    48d0:	e7af      	b.n	4832 <__aeabi_fadd+0x17a>
    48d2:	2aff      	cmp	r2, #255	; 0xff
    48d4:	d0b1      	beq.n	483a <__aeabi_fadd+0x182>
    48d6:	2580      	movs	r5, #128	; 0x80
    48d8:	04ed      	lsls	r5, r5, #19
    48da:	432b      	orrs	r3, r5
    48dc:	291b      	cmp	r1, #27
    48de:	dd28      	ble.n	4932 <__aeabi_fadd+0x27a>
    48e0:	0015      	movs	r5, r2
    48e2:	1c43      	adds	r3, r0, #1
    48e4:	e742      	b.n	476c <__aeabi_fadd+0xb4>
    48e6:	2aff      	cmp	r2, #255	; 0xff
    48e8:	d100      	bne.n	48ec <__aeabi_fadd+0x234>
    48ea:	e77e      	b.n	47ea <__aeabi_fadd+0x132>
    48ec:	181b      	adds	r3, r3, r0
    48ee:	085b      	lsrs	r3, r3, #1
    48f0:	0015      	movs	r5, r2
    48f2:	075a      	lsls	r2, r3, #29
    48f4:	d000      	beq.n	48f8 <__aeabi_fadd+0x240>
    48f6:	e739      	b.n	476c <__aeabi_fadd+0xb4>
    48f8:	08db      	lsrs	r3, r3, #3
    48fa:	e7c2      	b.n	4882 <__aeabi_fadd+0x1ca>
    48fc:	000c      	movs	r4, r1
    48fe:	0035      	movs	r5, r6
    4900:	0003      	movs	r3, r0
    4902:	e776      	b.n	47f2 <__aeabi_fadd+0x13a>
    4904:	2b00      	cmp	r3, #0
    4906:	d13a      	bne.n	497e <__aeabi_fadd+0x2c6>
    4908:	2800      	cmp	r0, #0
    490a:	d195      	bne.n	4838 <__aeabi_fadd+0x180>
    490c:	2380      	movs	r3, #128	; 0x80
    490e:	2400      	movs	r4, #0
    4910:	20ff      	movs	r0, #255	; 0xff
    4912:	03db      	lsls	r3, r3, #15
    4914:	e737      	b.n	4786 <__aeabi_fadd+0xce>
    4916:	000c      	movs	r4, r1
    4918:	1ac6      	subs	r6, r0, r3
    491a:	e778      	b.n	480e <__aeabi_fadd+0x156>
    491c:	181b      	adds	r3, r3, r0
    491e:	2502      	movs	r5, #2
    4920:	015a      	lsls	r2, r3, #5
    4922:	d4cf      	bmi.n	48c4 <__aeabi_fadd+0x20c>
    4924:	3d01      	subs	r5, #1
    4926:	e71e      	b.n	4766 <__aeabi_fadd+0xae>
    4928:	2501      	movs	r5, #1
    492a:	1a1b      	subs	r3, r3, r0
    492c:	e719      	b.n	4762 <__aeabi_fadd+0xaa>
    492e:	000d      	movs	r5, r1
    4930:	e75f      	b.n	47f2 <__aeabi_fadd+0x13a>
    4932:	001d      	movs	r5, r3
    4934:	2620      	movs	r6, #32
    4936:	40cd      	lsrs	r5, r1
    4938:	1a71      	subs	r1, r6, r1
    493a:	408b      	lsls	r3, r1
    493c:	1e59      	subs	r1, r3, #1
    493e:	418b      	sbcs	r3, r1
    4940:	432b      	orrs	r3, r5
    4942:	181b      	adds	r3, r3, r0
    4944:	0015      	movs	r5, r2
    4946:	e74b      	b.n	47e0 <__aeabi_fadd+0x128>
    4948:	2b00      	cmp	r3, #0
    494a:	d100      	bne.n	494e <__aeabi_fadd+0x296>
    494c:	e775      	b.n	483a <__aeabi_fadd+0x182>
    494e:	2800      	cmp	r0, #0
    4950:	d100      	bne.n	4954 <__aeabi_fadd+0x29c>
    4952:	e773      	b.n	483c <__aeabi_fadd+0x184>
    4954:	2280      	movs	r2, #128	; 0x80
    4956:	03d2      	lsls	r2, r2, #15
    4958:	4297      	cmp	r7, r2
    495a:	d302      	bcc.n	4962 <__aeabi_fadd+0x2aa>
    495c:	4594      	cmp	ip, r2
    495e:	d200      	bcs.n	4962 <__aeabi_fadd+0x2aa>
    4960:	0003      	movs	r3, r0
    4962:	08db      	lsrs	r3, r3, #3
    4964:	e74a      	b.n	47fc <__aeabi_fadd+0x144>
    4966:	2800      	cmp	r0, #0
    4968:	d0a8      	beq.n	48bc <__aeabi_fadd+0x204>
    496a:	000c      	movs	r4, r1
    496c:	0003      	movs	r3, r0
    496e:	e786      	b.n	487e <__aeabi_fadd+0x1c6>
    4970:	000c      	movs	r4, r1
    4972:	1ac3      	subs	r3, r0, r3
    4974:	3501      	adds	r5, #1
    4976:	e6f4      	b.n	4762 <__aeabi_fadd+0xaa>
    4978:	000d      	movs	r5, r1
    497a:	0003      	movs	r3, r0
    497c:	e739      	b.n	47f2 <__aeabi_fadd+0x13a>
    497e:	2800      	cmp	r0, #0
    4980:	d100      	bne.n	4984 <__aeabi_fadd+0x2cc>
    4982:	e75b      	b.n	483c <__aeabi_fadd+0x184>
    4984:	2280      	movs	r2, #128	; 0x80
    4986:	03d2      	lsls	r2, r2, #15
    4988:	4297      	cmp	r7, r2
    498a:	d3ea      	bcc.n	4962 <__aeabi_fadd+0x2aa>
    498c:	4594      	cmp	ip, r2
    498e:	d2e8      	bcs.n	4962 <__aeabi_fadd+0x2aa>
    4990:	000c      	movs	r4, r1
    4992:	0003      	movs	r3, r0
    4994:	e7e5      	b.n	4962 <__aeabi_fadd+0x2aa>
    4996:	0003      	movs	r3, r0
    4998:	e771      	b.n	487e <__aeabi_fadd+0x1c6>
    499a:	181b      	adds	r3, r3, r0
    499c:	015a      	lsls	r2, r3, #5
    499e:	d5ab      	bpl.n	48f8 <__aeabi_fadd+0x240>
    49a0:	4a04      	ldr	r2, [pc, #16]	; (49b4 <__aeabi_fadd+0x2fc>)
    49a2:	3501      	adds	r5, #1
    49a4:	4013      	ands	r3, r2
    49a6:	08db      	lsrs	r3, r3, #3
    49a8:	e76b      	b.n	4882 <__aeabi_fadd+0x1ca>
    49aa:	1e13      	subs	r3, r2, #0
    49ac:	d086      	beq.n	48bc <__aeabi_fadd+0x204>
    49ae:	08db      	lsrs	r3, r3, #3
    49b0:	e767      	b.n	4882 <__aeabi_fadd+0x1ca>
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	fbffffff 	.word	0xfbffffff
    49b8:	7dffffff 	.word	0x7dffffff

000049bc <__aeabi_fdiv>:
    49bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    49be:	464f      	mov	r7, r9
    49c0:	4646      	mov	r6, r8
    49c2:	46d6      	mov	lr, sl
    49c4:	0244      	lsls	r4, r0, #9
    49c6:	b5c0      	push	{r6, r7, lr}
    49c8:	0047      	lsls	r7, r0, #1
    49ca:	1c0e      	adds	r6, r1, #0
    49cc:	0a64      	lsrs	r4, r4, #9
    49ce:	0e3f      	lsrs	r7, r7, #24
    49d0:	0fc5      	lsrs	r5, r0, #31
    49d2:	2f00      	cmp	r7, #0
    49d4:	d03c      	beq.n	4a50 <__aeabi_fdiv+0x94>
    49d6:	2fff      	cmp	r7, #255	; 0xff
    49d8:	d042      	beq.n	4a60 <__aeabi_fdiv+0xa4>
    49da:	2300      	movs	r3, #0
    49dc:	2280      	movs	r2, #128	; 0x80
    49de:	4699      	mov	r9, r3
    49e0:	469a      	mov	sl, r3
    49e2:	00e4      	lsls	r4, r4, #3
    49e4:	04d2      	lsls	r2, r2, #19
    49e6:	4314      	orrs	r4, r2
    49e8:	3f7f      	subs	r7, #127	; 0x7f
    49ea:	0273      	lsls	r3, r6, #9
    49ec:	0a5b      	lsrs	r3, r3, #9
    49ee:	4698      	mov	r8, r3
    49f0:	0073      	lsls	r3, r6, #1
    49f2:	0e1b      	lsrs	r3, r3, #24
    49f4:	0ff6      	lsrs	r6, r6, #31
    49f6:	2b00      	cmp	r3, #0
    49f8:	d01b      	beq.n	4a32 <__aeabi_fdiv+0x76>
    49fa:	2bff      	cmp	r3, #255	; 0xff
    49fc:	d013      	beq.n	4a26 <__aeabi_fdiv+0x6a>
    49fe:	4642      	mov	r2, r8
    4a00:	2180      	movs	r1, #128	; 0x80
    4a02:	00d2      	lsls	r2, r2, #3
    4a04:	04c9      	lsls	r1, r1, #19
    4a06:	4311      	orrs	r1, r2
    4a08:	4688      	mov	r8, r1
    4a0a:	2000      	movs	r0, #0
    4a0c:	3b7f      	subs	r3, #127	; 0x7f
    4a0e:	0029      	movs	r1, r5
    4a10:	1aff      	subs	r7, r7, r3
    4a12:	464b      	mov	r3, r9
    4a14:	4071      	eors	r1, r6
    4a16:	b2c9      	uxtb	r1, r1
    4a18:	2b0f      	cmp	r3, #15
    4a1a:	d900      	bls.n	4a1e <__aeabi_fdiv+0x62>
    4a1c:	e0b5      	b.n	4b8a <__aeabi_fdiv+0x1ce>
    4a1e:	4a74      	ldr	r2, [pc, #464]	; (4bf0 <__aeabi_fdiv+0x234>)
    4a20:	009b      	lsls	r3, r3, #2
    4a22:	58d3      	ldr	r3, [r2, r3]
    4a24:	469f      	mov	pc, r3
    4a26:	4643      	mov	r3, r8
    4a28:	2b00      	cmp	r3, #0
    4a2a:	d13f      	bne.n	4aac <__aeabi_fdiv+0xf0>
    4a2c:	3fff      	subs	r7, #255	; 0xff
    4a2e:	3302      	adds	r3, #2
    4a30:	e003      	b.n	4a3a <__aeabi_fdiv+0x7e>
    4a32:	4643      	mov	r3, r8
    4a34:	2b00      	cmp	r3, #0
    4a36:	d12d      	bne.n	4a94 <__aeabi_fdiv+0xd8>
    4a38:	2301      	movs	r3, #1
    4a3a:	0029      	movs	r1, r5
    4a3c:	464a      	mov	r2, r9
    4a3e:	4071      	eors	r1, r6
    4a40:	b2c9      	uxtb	r1, r1
    4a42:	431a      	orrs	r2, r3
    4a44:	2a0e      	cmp	r2, #14
    4a46:	d838      	bhi.n	4aba <__aeabi_fdiv+0xfe>
    4a48:	486a      	ldr	r0, [pc, #424]	; (4bf4 <__aeabi_fdiv+0x238>)
    4a4a:	0092      	lsls	r2, r2, #2
    4a4c:	5882      	ldr	r2, [r0, r2]
    4a4e:	4697      	mov	pc, r2
    4a50:	2c00      	cmp	r4, #0
    4a52:	d113      	bne.n	4a7c <__aeabi_fdiv+0xc0>
    4a54:	2304      	movs	r3, #4
    4a56:	4699      	mov	r9, r3
    4a58:	3b03      	subs	r3, #3
    4a5a:	2700      	movs	r7, #0
    4a5c:	469a      	mov	sl, r3
    4a5e:	e7c4      	b.n	49ea <__aeabi_fdiv+0x2e>
    4a60:	2c00      	cmp	r4, #0
    4a62:	d105      	bne.n	4a70 <__aeabi_fdiv+0xb4>
    4a64:	2308      	movs	r3, #8
    4a66:	4699      	mov	r9, r3
    4a68:	3b06      	subs	r3, #6
    4a6a:	27ff      	movs	r7, #255	; 0xff
    4a6c:	469a      	mov	sl, r3
    4a6e:	e7bc      	b.n	49ea <__aeabi_fdiv+0x2e>
    4a70:	230c      	movs	r3, #12
    4a72:	4699      	mov	r9, r3
    4a74:	3b09      	subs	r3, #9
    4a76:	27ff      	movs	r7, #255	; 0xff
    4a78:	469a      	mov	sl, r3
    4a7a:	e7b6      	b.n	49ea <__aeabi_fdiv+0x2e>
    4a7c:	0020      	movs	r0, r4
    4a7e:	f000 fd01 	bl	5484 <__clzsi2>
    4a82:	2776      	movs	r7, #118	; 0x76
    4a84:	1f43      	subs	r3, r0, #5
    4a86:	409c      	lsls	r4, r3
    4a88:	2300      	movs	r3, #0
    4a8a:	427f      	negs	r7, r7
    4a8c:	4699      	mov	r9, r3
    4a8e:	469a      	mov	sl, r3
    4a90:	1a3f      	subs	r7, r7, r0
    4a92:	e7aa      	b.n	49ea <__aeabi_fdiv+0x2e>
    4a94:	4640      	mov	r0, r8
    4a96:	f000 fcf5 	bl	5484 <__clzsi2>
    4a9a:	4642      	mov	r2, r8
    4a9c:	1f43      	subs	r3, r0, #5
    4a9e:	409a      	lsls	r2, r3
    4aa0:	2376      	movs	r3, #118	; 0x76
    4aa2:	425b      	negs	r3, r3
    4aa4:	1a1b      	subs	r3, r3, r0
    4aa6:	4690      	mov	r8, r2
    4aa8:	2000      	movs	r0, #0
    4aaa:	e7b0      	b.n	4a0e <__aeabi_fdiv+0x52>
    4aac:	2303      	movs	r3, #3
    4aae:	464a      	mov	r2, r9
    4ab0:	431a      	orrs	r2, r3
    4ab2:	4691      	mov	r9, r2
    4ab4:	2003      	movs	r0, #3
    4ab6:	33fc      	adds	r3, #252	; 0xfc
    4ab8:	e7a9      	b.n	4a0e <__aeabi_fdiv+0x52>
    4aba:	000d      	movs	r5, r1
    4abc:	20ff      	movs	r0, #255	; 0xff
    4abe:	2200      	movs	r2, #0
    4ac0:	05c0      	lsls	r0, r0, #23
    4ac2:	07ed      	lsls	r5, r5, #31
    4ac4:	4310      	orrs	r0, r2
    4ac6:	4328      	orrs	r0, r5
    4ac8:	bce0      	pop	{r5, r6, r7}
    4aca:	46ba      	mov	sl, r7
    4acc:	46b1      	mov	r9, r6
    4ace:	46a8      	mov	r8, r5
    4ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ad2:	000d      	movs	r5, r1
    4ad4:	2000      	movs	r0, #0
    4ad6:	2200      	movs	r2, #0
    4ad8:	e7f2      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4ada:	4653      	mov	r3, sl
    4adc:	2b02      	cmp	r3, #2
    4ade:	d0ed      	beq.n	4abc <__aeabi_fdiv+0x100>
    4ae0:	2b03      	cmp	r3, #3
    4ae2:	d033      	beq.n	4b4c <__aeabi_fdiv+0x190>
    4ae4:	46a0      	mov	r8, r4
    4ae6:	2b01      	cmp	r3, #1
    4ae8:	d105      	bne.n	4af6 <__aeabi_fdiv+0x13a>
    4aea:	2000      	movs	r0, #0
    4aec:	2200      	movs	r2, #0
    4aee:	e7e7      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4af0:	0035      	movs	r5, r6
    4af2:	2803      	cmp	r0, #3
    4af4:	d07a      	beq.n	4bec <__aeabi_fdiv+0x230>
    4af6:	003b      	movs	r3, r7
    4af8:	337f      	adds	r3, #127	; 0x7f
    4afa:	2b00      	cmp	r3, #0
    4afc:	dd2d      	ble.n	4b5a <__aeabi_fdiv+0x19e>
    4afe:	4642      	mov	r2, r8
    4b00:	0752      	lsls	r2, r2, #29
    4b02:	d007      	beq.n	4b14 <__aeabi_fdiv+0x158>
    4b04:	220f      	movs	r2, #15
    4b06:	4641      	mov	r1, r8
    4b08:	400a      	ands	r2, r1
    4b0a:	2a04      	cmp	r2, #4
    4b0c:	d002      	beq.n	4b14 <__aeabi_fdiv+0x158>
    4b0e:	2204      	movs	r2, #4
    4b10:	4694      	mov	ip, r2
    4b12:	44e0      	add	r8, ip
    4b14:	4642      	mov	r2, r8
    4b16:	0112      	lsls	r2, r2, #4
    4b18:	d505      	bpl.n	4b26 <__aeabi_fdiv+0x16a>
    4b1a:	4642      	mov	r2, r8
    4b1c:	4b36      	ldr	r3, [pc, #216]	; (4bf8 <__aeabi_fdiv+0x23c>)
    4b1e:	401a      	ands	r2, r3
    4b20:	003b      	movs	r3, r7
    4b22:	4690      	mov	r8, r2
    4b24:	3380      	adds	r3, #128	; 0x80
    4b26:	2bfe      	cmp	r3, #254	; 0xfe
    4b28:	dcc8      	bgt.n	4abc <__aeabi_fdiv+0x100>
    4b2a:	4642      	mov	r2, r8
    4b2c:	0192      	lsls	r2, r2, #6
    4b2e:	0a52      	lsrs	r2, r2, #9
    4b30:	b2d8      	uxtb	r0, r3
    4b32:	e7c5      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4b34:	2280      	movs	r2, #128	; 0x80
    4b36:	2500      	movs	r5, #0
    4b38:	20ff      	movs	r0, #255	; 0xff
    4b3a:	03d2      	lsls	r2, r2, #15
    4b3c:	e7c0      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4b3e:	2280      	movs	r2, #128	; 0x80
    4b40:	03d2      	lsls	r2, r2, #15
    4b42:	4214      	tst	r4, r2
    4b44:	d002      	beq.n	4b4c <__aeabi_fdiv+0x190>
    4b46:	4643      	mov	r3, r8
    4b48:	4213      	tst	r3, r2
    4b4a:	d049      	beq.n	4be0 <__aeabi_fdiv+0x224>
    4b4c:	2280      	movs	r2, #128	; 0x80
    4b4e:	03d2      	lsls	r2, r2, #15
    4b50:	4322      	orrs	r2, r4
    4b52:	0252      	lsls	r2, r2, #9
    4b54:	20ff      	movs	r0, #255	; 0xff
    4b56:	0a52      	lsrs	r2, r2, #9
    4b58:	e7b2      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4b5a:	2201      	movs	r2, #1
    4b5c:	1ad3      	subs	r3, r2, r3
    4b5e:	2b1b      	cmp	r3, #27
    4b60:	dcc3      	bgt.n	4aea <__aeabi_fdiv+0x12e>
    4b62:	4642      	mov	r2, r8
    4b64:	40da      	lsrs	r2, r3
    4b66:	4643      	mov	r3, r8
    4b68:	379e      	adds	r7, #158	; 0x9e
    4b6a:	40bb      	lsls	r3, r7
    4b6c:	1e59      	subs	r1, r3, #1
    4b6e:	418b      	sbcs	r3, r1
    4b70:	431a      	orrs	r2, r3
    4b72:	0753      	lsls	r3, r2, #29
    4b74:	d004      	beq.n	4b80 <__aeabi_fdiv+0x1c4>
    4b76:	230f      	movs	r3, #15
    4b78:	4013      	ands	r3, r2
    4b7a:	2b04      	cmp	r3, #4
    4b7c:	d000      	beq.n	4b80 <__aeabi_fdiv+0x1c4>
    4b7e:	3204      	adds	r2, #4
    4b80:	0153      	lsls	r3, r2, #5
    4b82:	d529      	bpl.n	4bd8 <__aeabi_fdiv+0x21c>
    4b84:	2001      	movs	r0, #1
    4b86:	2200      	movs	r2, #0
    4b88:	e79a      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4b8a:	4642      	mov	r2, r8
    4b8c:	0163      	lsls	r3, r4, #5
    4b8e:	0155      	lsls	r5, r2, #5
    4b90:	42ab      	cmp	r3, r5
    4b92:	d215      	bcs.n	4bc0 <__aeabi_fdiv+0x204>
    4b94:	201b      	movs	r0, #27
    4b96:	2200      	movs	r2, #0
    4b98:	3f01      	subs	r7, #1
    4b9a:	2601      	movs	r6, #1
    4b9c:	001c      	movs	r4, r3
    4b9e:	0052      	lsls	r2, r2, #1
    4ba0:	005b      	lsls	r3, r3, #1
    4ba2:	2c00      	cmp	r4, #0
    4ba4:	db01      	blt.n	4baa <__aeabi_fdiv+0x1ee>
    4ba6:	429d      	cmp	r5, r3
    4ba8:	d801      	bhi.n	4bae <__aeabi_fdiv+0x1f2>
    4baa:	1b5b      	subs	r3, r3, r5
    4bac:	4332      	orrs	r2, r6
    4bae:	3801      	subs	r0, #1
    4bb0:	2800      	cmp	r0, #0
    4bb2:	d1f3      	bne.n	4b9c <__aeabi_fdiv+0x1e0>
    4bb4:	1e58      	subs	r0, r3, #1
    4bb6:	4183      	sbcs	r3, r0
    4bb8:	4313      	orrs	r3, r2
    4bba:	4698      	mov	r8, r3
    4bbc:	000d      	movs	r5, r1
    4bbe:	e79a      	b.n	4af6 <__aeabi_fdiv+0x13a>
    4bc0:	201a      	movs	r0, #26
    4bc2:	2201      	movs	r2, #1
    4bc4:	1b5b      	subs	r3, r3, r5
    4bc6:	e7e8      	b.n	4b9a <__aeabi_fdiv+0x1de>
    4bc8:	3b02      	subs	r3, #2
    4bca:	425a      	negs	r2, r3
    4bcc:	4153      	adcs	r3, r2
    4bce:	425b      	negs	r3, r3
    4bd0:	0035      	movs	r5, r6
    4bd2:	2200      	movs	r2, #0
    4bd4:	b2d8      	uxtb	r0, r3
    4bd6:	e773      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4bd8:	0192      	lsls	r2, r2, #6
    4bda:	2000      	movs	r0, #0
    4bdc:	0a52      	lsrs	r2, r2, #9
    4bde:	e76f      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4be0:	431a      	orrs	r2, r3
    4be2:	0252      	lsls	r2, r2, #9
    4be4:	0035      	movs	r5, r6
    4be6:	20ff      	movs	r0, #255	; 0xff
    4be8:	0a52      	lsrs	r2, r2, #9
    4bea:	e769      	b.n	4ac0 <__aeabi_fdiv+0x104>
    4bec:	4644      	mov	r4, r8
    4bee:	e7ad      	b.n	4b4c <__aeabi_fdiv+0x190>
    4bf0:	00005bc4 	.word	0x00005bc4
    4bf4:	00005c04 	.word	0x00005c04
    4bf8:	f7ffffff 	.word	0xf7ffffff

00004bfc <__eqsf2>:
    4bfc:	b570      	push	{r4, r5, r6, lr}
    4bfe:	0042      	lsls	r2, r0, #1
    4c00:	024e      	lsls	r6, r1, #9
    4c02:	004c      	lsls	r4, r1, #1
    4c04:	0245      	lsls	r5, r0, #9
    4c06:	0a6d      	lsrs	r5, r5, #9
    4c08:	0e12      	lsrs	r2, r2, #24
    4c0a:	0fc3      	lsrs	r3, r0, #31
    4c0c:	0a76      	lsrs	r6, r6, #9
    4c0e:	0e24      	lsrs	r4, r4, #24
    4c10:	0fc9      	lsrs	r1, r1, #31
    4c12:	2aff      	cmp	r2, #255	; 0xff
    4c14:	d010      	beq.n	4c38 <__eqsf2+0x3c>
    4c16:	2cff      	cmp	r4, #255	; 0xff
    4c18:	d00c      	beq.n	4c34 <__eqsf2+0x38>
    4c1a:	2001      	movs	r0, #1
    4c1c:	42a2      	cmp	r2, r4
    4c1e:	d10a      	bne.n	4c36 <__eqsf2+0x3a>
    4c20:	42b5      	cmp	r5, r6
    4c22:	d108      	bne.n	4c36 <__eqsf2+0x3a>
    4c24:	428b      	cmp	r3, r1
    4c26:	d00f      	beq.n	4c48 <__eqsf2+0x4c>
    4c28:	2a00      	cmp	r2, #0
    4c2a:	d104      	bne.n	4c36 <__eqsf2+0x3a>
    4c2c:	0028      	movs	r0, r5
    4c2e:	1e43      	subs	r3, r0, #1
    4c30:	4198      	sbcs	r0, r3
    4c32:	e000      	b.n	4c36 <__eqsf2+0x3a>
    4c34:	2001      	movs	r0, #1
    4c36:	bd70      	pop	{r4, r5, r6, pc}
    4c38:	2001      	movs	r0, #1
    4c3a:	2cff      	cmp	r4, #255	; 0xff
    4c3c:	d1fb      	bne.n	4c36 <__eqsf2+0x3a>
    4c3e:	4335      	orrs	r5, r6
    4c40:	d1f9      	bne.n	4c36 <__eqsf2+0x3a>
    4c42:	404b      	eors	r3, r1
    4c44:	0018      	movs	r0, r3
    4c46:	e7f6      	b.n	4c36 <__eqsf2+0x3a>
    4c48:	2000      	movs	r0, #0
    4c4a:	e7f4      	b.n	4c36 <__eqsf2+0x3a>

00004c4c <__gesf2>:
    4c4c:	b530      	push	{r4, r5, lr}
    4c4e:	0042      	lsls	r2, r0, #1
    4c50:	0244      	lsls	r4, r0, #9
    4c52:	024d      	lsls	r5, r1, #9
    4c54:	0fc3      	lsrs	r3, r0, #31
    4c56:	0048      	lsls	r0, r1, #1
    4c58:	0a64      	lsrs	r4, r4, #9
    4c5a:	0e12      	lsrs	r2, r2, #24
    4c5c:	0a6d      	lsrs	r5, r5, #9
    4c5e:	0e00      	lsrs	r0, r0, #24
    4c60:	0fc9      	lsrs	r1, r1, #31
    4c62:	2aff      	cmp	r2, #255	; 0xff
    4c64:	d019      	beq.n	4c9a <__gesf2+0x4e>
    4c66:	28ff      	cmp	r0, #255	; 0xff
    4c68:	d00b      	beq.n	4c82 <__gesf2+0x36>
    4c6a:	2a00      	cmp	r2, #0
    4c6c:	d11e      	bne.n	4cac <__gesf2+0x60>
    4c6e:	2800      	cmp	r0, #0
    4c70:	d10b      	bne.n	4c8a <__gesf2+0x3e>
    4c72:	2d00      	cmp	r5, #0
    4c74:	d027      	beq.n	4cc6 <__gesf2+0x7a>
    4c76:	2c00      	cmp	r4, #0
    4c78:	d134      	bne.n	4ce4 <__gesf2+0x98>
    4c7a:	2900      	cmp	r1, #0
    4c7c:	d02f      	beq.n	4cde <__gesf2+0x92>
    4c7e:	0008      	movs	r0, r1
    4c80:	bd30      	pop	{r4, r5, pc}
    4c82:	2d00      	cmp	r5, #0
    4c84:	d128      	bne.n	4cd8 <__gesf2+0x8c>
    4c86:	2a00      	cmp	r2, #0
    4c88:	d101      	bne.n	4c8e <__gesf2+0x42>
    4c8a:	2c00      	cmp	r4, #0
    4c8c:	d0f5      	beq.n	4c7a <__gesf2+0x2e>
    4c8e:	428b      	cmp	r3, r1
    4c90:	d107      	bne.n	4ca2 <__gesf2+0x56>
    4c92:	2b00      	cmp	r3, #0
    4c94:	d023      	beq.n	4cde <__gesf2+0x92>
    4c96:	0018      	movs	r0, r3
    4c98:	e7f2      	b.n	4c80 <__gesf2+0x34>
    4c9a:	2c00      	cmp	r4, #0
    4c9c:	d11c      	bne.n	4cd8 <__gesf2+0x8c>
    4c9e:	28ff      	cmp	r0, #255	; 0xff
    4ca0:	d014      	beq.n	4ccc <__gesf2+0x80>
    4ca2:	1e58      	subs	r0, r3, #1
    4ca4:	2302      	movs	r3, #2
    4ca6:	4018      	ands	r0, r3
    4ca8:	3801      	subs	r0, #1
    4caa:	e7e9      	b.n	4c80 <__gesf2+0x34>
    4cac:	2800      	cmp	r0, #0
    4cae:	d0f8      	beq.n	4ca2 <__gesf2+0x56>
    4cb0:	428b      	cmp	r3, r1
    4cb2:	d1f6      	bne.n	4ca2 <__gesf2+0x56>
    4cb4:	4282      	cmp	r2, r0
    4cb6:	dcf4      	bgt.n	4ca2 <__gesf2+0x56>
    4cb8:	dbeb      	blt.n	4c92 <__gesf2+0x46>
    4cba:	42ac      	cmp	r4, r5
    4cbc:	d8f1      	bhi.n	4ca2 <__gesf2+0x56>
    4cbe:	2000      	movs	r0, #0
    4cc0:	42ac      	cmp	r4, r5
    4cc2:	d2dd      	bcs.n	4c80 <__gesf2+0x34>
    4cc4:	e7e5      	b.n	4c92 <__gesf2+0x46>
    4cc6:	2c00      	cmp	r4, #0
    4cc8:	d0da      	beq.n	4c80 <__gesf2+0x34>
    4cca:	e7ea      	b.n	4ca2 <__gesf2+0x56>
    4ccc:	2d00      	cmp	r5, #0
    4cce:	d103      	bne.n	4cd8 <__gesf2+0x8c>
    4cd0:	428b      	cmp	r3, r1
    4cd2:	d1e6      	bne.n	4ca2 <__gesf2+0x56>
    4cd4:	2000      	movs	r0, #0
    4cd6:	e7d3      	b.n	4c80 <__gesf2+0x34>
    4cd8:	2002      	movs	r0, #2
    4cda:	4240      	negs	r0, r0
    4cdc:	e7d0      	b.n	4c80 <__gesf2+0x34>
    4cde:	2001      	movs	r0, #1
    4ce0:	4240      	negs	r0, r0
    4ce2:	e7cd      	b.n	4c80 <__gesf2+0x34>
    4ce4:	428b      	cmp	r3, r1
    4ce6:	d0e8      	beq.n	4cba <__gesf2+0x6e>
    4ce8:	e7db      	b.n	4ca2 <__gesf2+0x56>
    4cea:	46c0      	nop			; (mov r8, r8)

00004cec <__lesf2>:
    4cec:	b530      	push	{r4, r5, lr}
    4cee:	0042      	lsls	r2, r0, #1
    4cf0:	0244      	lsls	r4, r0, #9
    4cf2:	024d      	lsls	r5, r1, #9
    4cf4:	0fc3      	lsrs	r3, r0, #31
    4cf6:	0048      	lsls	r0, r1, #1
    4cf8:	0a64      	lsrs	r4, r4, #9
    4cfa:	0e12      	lsrs	r2, r2, #24
    4cfc:	0a6d      	lsrs	r5, r5, #9
    4cfe:	0e00      	lsrs	r0, r0, #24
    4d00:	0fc9      	lsrs	r1, r1, #31
    4d02:	2aff      	cmp	r2, #255	; 0xff
    4d04:	d01a      	beq.n	4d3c <__lesf2+0x50>
    4d06:	28ff      	cmp	r0, #255	; 0xff
    4d08:	d00e      	beq.n	4d28 <__lesf2+0x3c>
    4d0a:	2a00      	cmp	r2, #0
    4d0c:	d11e      	bne.n	4d4c <__lesf2+0x60>
    4d0e:	2800      	cmp	r0, #0
    4d10:	d10e      	bne.n	4d30 <__lesf2+0x44>
    4d12:	2d00      	cmp	r5, #0
    4d14:	d02a      	beq.n	4d6c <__lesf2+0x80>
    4d16:	2c00      	cmp	r4, #0
    4d18:	d00c      	beq.n	4d34 <__lesf2+0x48>
    4d1a:	428b      	cmp	r3, r1
    4d1c:	d01d      	beq.n	4d5a <__lesf2+0x6e>
    4d1e:	1e58      	subs	r0, r3, #1
    4d20:	2302      	movs	r3, #2
    4d22:	4018      	ands	r0, r3
    4d24:	3801      	subs	r0, #1
    4d26:	e010      	b.n	4d4a <__lesf2+0x5e>
    4d28:	2d00      	cmp	r5, #0
    4d2a:	d10d      	bne.n	4d48 <__lesf2+0x5c>
    4d2c:	2a00      	cmp	r2, #0
    4d2e:	d120      	bne.n	4d72 <__lesf2+0x86>
    4d30:	2c00      	cmp	r4, #0
    4d32:	d11e      	bne.n	4d72 <__lesf2+0x86>
    4d34:	2900      	cmp	r1, #0
    4d36:	d023      	beq.n	4d80 <__lesf2+0x94>
    4d38:	0008      	movs	r0, r1
    4d3a:	e006      	b.n	4d4a <__lesf2+0x5e>
    4d3c:	2c00      	cmp	r4, #0
    4d3e:	d103      	bne.n	4d48 <__lesf2+0x5c>
    4d40:	28ff      	cmp	r0, #255	; 0xff
    4d42:	d1ec      	bne.n	4d1e <__lesf2+0x32>
    4d44:	2d00      	cmp	r5, #0
    4d46:	d017      	beq.n	4d78 <__lesf2+0x8c>
    4d48:	2002      	movs	r0, #2
    4d4a:	bd30      	pop	{r4, r5, pc}
    4d4c:	2800      	cmp	r0, #0
    4d4e:	d0e6      	beq.n	4d1e <__lesf2+0x32>
    4d50:	428b      	cmp	r3, r1
    4d52:	d1e4      	bne.n	4d1e <__lesf2+0x32>
    4d54:	4282      	cmp	r2, r0
    4d56:	dce2      	bgt.n	4d1e <__lesf2+0x32>
    4d58:	db04      	blt.n	4d64 <__lesf2+0x78>
    4d5a:	42ac      	cmp	r4, r5
    4d5c:	d8df      	bhi.n	4d1e <__lesf2+0x32>
    4d5e:	2000      	movs	r0, #0
    4d60:	42ac      	cmp	r4, r5
    4d62:	d2f2      	bcs.n	4d4a <__lesf2+0x5e>
    4d64:	2b00      	cmp	r3, #0
    4d66:	d00b      	beq.n	4d80 <__lesf2+0x94>
    4d68:	0018      	movs	r0, r3
    4d6a:	e7ee      	b.n	4d4a <__lesf2+0x5e>
    4d6c:	2c00      	cmp	r4, #0
    4d6e:	d0ec      	beq.n	4d4a <__lesf2+0x5e>
    4d70:	e7d5      	b.n	4d1e <__lesf2+0x32>
    4d72:	428b      	cmp	r3, r1
    4d74:	d1d3      	bne.n	4d1e <__lesf2+0x32>
    4d76:	e7f5      	b.n	4d64 <__lesf2+0x78>
    4d78:	2000      	movs	r0, #0
    4d7a:	428b      	cmp	r3, r1
    4d7c:	d0e5      	beq.n	4d4a <__lesf2+0x5e>
    4d7e:	e7ce      	b.n	4d1e <__lesf2+0x32>
    4d80:	2001      	movs	r0, #1
    4d82:	4240      	negs	r0, r0
    4d84:	e7e1      	b.n	4d4a <__lesf2+0x5e>
    4d86:	46c0      	nop			; (mov r8, r8)

00004d88 <__aeabi_fmul>:
    4d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d8a:	464f      	mov	r7, r9
    4d8c:	4646      	mov	r6, r8
    4d8e:	46d6      	mov	lr, sl
    4d90:	0243      	lsls	r3, r0, #9
    4d92:	0a5b      	lsrs	r3, r3, #9
    4d94:	4699      	mov	r9, r3
    4d96:	0043      	lsls	r3, r0, #1
    4d98:	b5c0      	push	{r6, r7, lr}
    4d9a:	0e1b      	lsrs	r3, r3, #24
    4d9c:	1c0e      	adds	r6, r1, #0
    4d9e:	0fc5      	lsrs	r5, r0, #31
    4da0:	2b00      	cmp	r3, #0
    4da2:	d100      	bne.n	4da6 <__aeabi_fmul+0x1e>
    4da4:	e085      	b.n	4eb2 <__aeabi_fmul+0x12a>
    4da6:	2bff      	cmp	r3, #255	; 0xff
    4da8:	d100      	bne.n	4dac <__aeabi_fmul+0x24>
    4daa:	e08b      	b.n	4ec4 <__aeabi_fmul+0x13c>
    4dac:	464a      	mov	r2, r9
    4dae:	2180      	movs	r1, #128	; 0x80
    4db0:	00d2      	lsls	r2, r2, #3
    4db2:	04c9      	lsls	r1, r1, #19
    4db4:	4311      	orrs	r1, r2
    4db6:	227f      	movs	r2, #127	; 0x7f
    4db8:	4252      	negs	r2, r2
    4dba:	4690      	mov	r8, r2
    4dbc:	4498      	add	r8, r3
    4dbe:	2300      	movs	r3, #0
    4dc0:	4689      	mov	r9, r1
    4dc2:	2700      	movs	r7, #0
    4dc4:	469a      	mov	sl, r3
    4dc6:	0274      	lsls	r4, r6, #9
    4dc8:	0073      	lsls	r3, r6, #1
    4dca:	0a64      	lsrs	r4, r4, #9
    4dcc:	0e1b      	lsrs	r3, r3, #24
    4dce:	0ff6      	lsrs	r6, r6, #31
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	d064      	beq.n	4e9e <__aeabi_fmul+0x116>
    4dd4:	2bff      	cmp	r3, #255	; 0xff
    4dd6:	d01f      	beq.n	4e18 <__aeabi_fmul+0x90>
    4dd8:	2280      	movs	r2, #128	; 0x80
    4dda:	3b7f      	subs	r3, #127	; 0x7f
    4ddc:	00e4      	lsls	r4, r4, #3
    4dde:	04d2      	lsls	r2, r2, #19
    4de0:	4443      	add	r3, r8
    4de2:	2000      	movs	r0, #0
    4de4:	4314      	orrs	r4, r2
    4de6:	1c59      	adds	r1, r3, #1
    4de8:	2f0a      	cmp	r7, #10
    4dea:	dc2b      	bgt.n	4e44 <__aeabi_fmul+0xbc>
    4dec:	4075      	eors	r5, r6
    4dee:	2f02      	cmp	r7, #2
    4df0:	dc22      	bgt.n	4e38 <__aeabi_fmul+0xb0>
    4df2:	3f01      	subs	r7, #1
    4df4:	2f01      	cmp	r7, #1
    4df6:	d900      	bls.n	4dfa <__aeabi_fmul+0x72>
    4df8:	e0bb      	b.n	4f72 <__aeabi_fmul+0x1ea>
    4dfa:	2802      	cmp	r0, #2
    4dfc:	d06b      	beq.n	4ed6 <__aeabi_fmul+0x14e>
    4dfe:	2801      	cmp	r0, #1
    4e00:	d12a      	bne.n	4e58 <__aeabi_fmul+0xd0>
    4e02:	2000      	movs	r0, #0
    4e04:	2200      	movs	r2, #0
    4e06:	05c0      	lsls	r0, r0, #23
    4e08:	07ed      	lsls	r5, r5, #31
    4e0a:	4310      	orrs	r0, r2
    4e0c:	4328      	orrs	r0, r5
    4e0e:	bce0      	pop	{r5, r6, r7}
    4e10:	46ba      	mov	sl, r7
    4e12:	46b1      	mov	r9, r6
    4e14:	46a8      	mov	r8, r5
    4e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e18:	2c00      	cmp	r4, #0
    4e1a:	d064      	beq.n	4ee6 <__aeabi_fmul+0x15e>
    4e1c:	2203      	movs	r2, #3
    4e1e:	4641      	mov	r1, r8
    4e20:	4643      	mov	r3, r8
    4e22:	4317      	orrs	r7, r2
    4e24:	002a      	movs	r2, r5
    4e26:	3101      	adds	r1, #1
    4e28:	33ff      	adds	r3, #255	; 0xff
    4e2a:	4072      	eors	r2, r6
    4e2c:	31ff      	adds	r1, #255	; 0xff
    4e2e:	2f0a      	cmp	r7, #10
    4e30:	dd00      	ble.n	4e34 <__aeabi_fmul+0xac>
    4e32:	e0d7      	b.n	4fe4 <__aeabi_fmul+0x25c>
    4e34:	0015      	movs	r5, r2
    4e36:	2003      	movs	r0, #3
    4e38:	2201      	movs	r2, #1
    4e3a:	40ba      	lsls	r2, r7
    4e3c:	27a6      	movs	r7, #166	; 0xa6
    4e3e:	00ff      	lsls	r7, r7, #3
    4e40:	423a      	tst	r2, r7
    4e42:	d020      	beq.n	4e86 <__aeabi_fmul+0xfe>
    4e44:	4653      	mov	r3, sl
    4e46:	2b02      	cmp	r3, #2
    4e48:	d045      	beq.n	4ed6 <__aeabi_fmul+0x14e>
    4e4a:	2b03      	cmp	r3, #3
    4e4c:	d100      	bne.n	4e50 <__aeabi_fmul+0xc8>
    4e4e:	e0bb      	b.n	4fc8 <__aeabi_fmul+0x240>
    4e50:	4650      	mov	r0, sl
    4e52:	464c      	mov	r4, r9
    4e54:	2801      	cmp	r0, #1
    4e56:	d0d4      	beq.n	4e02 <__aeabi_fmul+0x7a>
    4e58:	000b      	movs	r3, r1
    4e5a:	337f      	adds	r3, #127	; 0x7f
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	dd70      	ble.n	4f42 <__aeabi_fmul+0x1ba>
    4e60:	0762      	lsls	r2, r4, #29
    4e62:	d004      	beq.n	4e6e <__aeabi_fmul+0xe6>
    4e64:	220f      	movs	r2, #15
    4e66:	4022      	ands	r2, r4
    4e68:	2a04      	cmp	r2, #4
    4e6a:	d000      	beq.n	4e6e <__aeabi_fmul+0xe6>
    4e6c:	3404      	adds	r4, #4
    4e6e:	0122      	lsls	r2, r4, #4
    4e70:	d503      	bpl.n	4e7a <__aeabi_fmul+0xf2>
    4e72:	4b63      	ldr	r3, [pc, #396]	; (5000 <__aeabi_fmul+0x278>)
    4e74:	401c      	ands	r4, r3
    4e76:	000b      	movs	r3, r1
    4e78:	3380      	adds	r3, #128	; 0x80
    4e7a:	2bfe      	cmp	r3, #254	; 0xfe
    4e7c:	dc2b      	bgt.n	4ed6 <__aeabi_fmul+0x14e>
    4e7e:	01a2      	lsls	r2, r4, #6
    4e80:	0a52      	lsrs	r2, r2, #9
    4e82:	b2d8      	uxtb	r0, r3
    4e84:	e7bf      	b.n	4e06 <__aeabi_fmul+0x7e>
    4e86:	2790      	movs	r7, #144	; 0x90
    4e88:	00bf      	lsls	r7, r7, #2
    4e8a:	423a      	tst	r2, r7
    4e8c:	d126      	bne.n	4edc <__aeabi_fmul+0x154>
    4e8e:	3fb9      	subs	r7, #185	; 0xb9
    4e90:	3fff      	subs	r7, #255	; 0xff
    4e92:	4217      	tst	r7, r2
    4e94:	d06d      	beq.n	4f72 <__aeabi_fmul+0x1ea>
    4e96:	0035      	movs	r5, r6
    4e98:	46a1      	mov	r9, r4
    4e9a:	4682      	mov	sl, r0
    4e9c:	e7d2      	b.n	4e44 <__aeabi_fmul+0xbc>
    4e9e:	2c00      	cmp	r4, #0
    4ea0:	d141      	bne.n	4f26 <__aeabi_fmul+0x19e>
    4ea2:	2301      	movs	r3, #1
    4ea4:	431f      	orrs	r7, r3
    4ea6:	4643      	mov	r3, r8
    4ea8:	2001      	movs	r0, #1
    4eaa:	1c59      	adds	r1, r3, #1
    4eac:	2f0a      	cmp	r7, #10
    4eae:	dd9d      	ble.n	4dec <__aeabi_fmul+0x64>
    4eb0:	e7c8      	b.n	4e44 <__aeabi_fmul+0xbc>
    4eb2:	464b      	mov	r3, r9
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d127      	bne.n	4f08 <__aeabi_fmul+0x180>
    4eb8:	2300      	movs	r3, #0
    4eba:	4698      	mov	r8, r3
    4ebc:	3301      	adds	r3, #1
    4ebe:	2704      	movs	r7, #4
    4ec0:	469a      	mov	sl, r3
    4ec2:	e780      	b.n	4dc6 <__aeabi_fmul+0x3e>
    4ec4:	464b      	mov	r3, r9
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d118      	bne.n	4efc <__aeabi_fmul+0x174>
    4eca:	23ff      	movs	r3, #255	; 0xff
    4ecc:	4698      	mov	r8, r3
    4ece:	3bfd      	subs	r3, #253	; 0xfd
    4ed0:	2708      	movs	r7, #8
    4ed2:	469a      	mov	sl, r3
    4ed4:	e777      	b.n	4dc6 <__aeabi_fmul+0x3e>
    4ed6:	20ff      	movs	r0, #255	; 0xff
    4ed8:	2200      	movs	r2, #0
    4eda:	e794      	b.n	4e06 <__aeabi_fmul+0x7e>
    4edc:	2280      	movs	r2, #128	; 0x80
    4ede:	2500      	movs	r5, #0
    4ee0:	20ff      	movs	r0, #255	; 0xff
    4ee2:	03d2      	lsls	r2, r2, #15
    4ee4:	e78f      	b.n	4e06 <__aeabi_fmul+0x7e>
    4ee6:	2302      	movs	r3, #2
    4ee8:	431f      	orrs	r7, r3
    4eea:	4643      	mov	r3, r8
    4eec:	1c59      	adds	r1, r3, #1
    4eee:	31ff      	adds	r1, #255	; 0xff
    4ef0:	2f0a      	cmp	r7, #10
    4ef2:	dca7      	bgt.n	4e44 <__aeabi_fmul+0xbc>
    4ef4:	2002      	movs	r0, #2
    4ef6:	33ff      	adds	r3, #255	; 0xff
    4ef8:	4075      	eors	r5, r6
    4efa:	e778      	b.n	4dee <__aeabi_fmul+0x66>
    4efc:	23ff      	movs	r3, #255	; 0xff
    4efe:	4698      	mov	r8, r3
    4f00:	3bfc      	subs	r3, #252	; 0xfc
    4f02:	270c      	movs	r7, #12
    4f04:	469a      	mov	sl, r3
    4f06:	e75e      	b.n	4dc6 <__aeabi_fmul+0x3e>
    4f08:	4648      	mov	r0, r9
    4f0a:	f000 fabb 	bl	5484 <__clzsi2>
    4f0e:	464a      	mov	r2, r9
    4f10:	1f43      	subs	r3, r0, #5
    4f12:	409a      	lsls	r2, r3
    4f14:	2376      	movs	r3, #118	; 0x76
    4f16:	425b      	negs	r3, r3
    4f18:	1a1b      	subs	r3, r3, r0
    4f1a:	4698      	mov	r8, r3
    4f1c:	2300      	movs	r3, #0
    4f1e:	4691      	mov	r9, r2
    4f20:	2700      	movs	r7, #0
    4f22:	469a      	mov	sl, r3
    4f24:	e74f      	b.n	4dc6 <__aeabi_fmul+0x3e>
    4f26:	0020      	movs	r0, r4
    4f28:	f000 faac 	bl	5484 <__clzsi2>
    4f2c:	1f43      	subs	r3, r0, #5
    4f2e:	409c      	lsls	r4, r3
    4f30:	4643      	mov	r3, r8
    4f32:	1a1b      	subs	r3, r3, r0
    4f34:	3b76      	subs	r3, #118	; 0x76
    4f36:	2000      	movs	r0, #0
    4f38:	1c59      	adds	r1, r3, #1
    4f3a:	2f0a      	cmp	r7, #10
    4f3c:	dc00      	bgt.n	4f40 <__aeabi_fmul+0x1b8>
    4f3e:	e755      	b.n	4dec <__aeabi_fmul+0x64>
    4f40:	e780      	b.n	4e44 <__aeabi_fmul+0xbc>
    4f42:	2201      	movs	r2, #1
    4f44:	1ad3      	subs	r3, r2, r3
    4f46:	2b1b      	cmp	r3, #27
    4f48:	dd00      	ble.n	4f4c <__aeabi_fmul+0x1c4>
    4f4a:	e75a      	b.n	4e02 <__aeabi_fmul+0x7a>
    4f4c:	319e      	adds	r1, #158	; 0x9e
    4f4e:	0022      	movs	r2, r4
    4f50:	408c      	lsls	r4, r1
    4f52:	40da      	lsrs	r2, r3
    4f54:	1e63      	subs	r3, r4, #1
    4f56:	419c      	sbcs	r4, r3
    4f58:	4322      	orrs	r2, r4
    4f5a:	0753      	lsls	r3, r2, #29
    4f5c:	d004      	beq.n	4f68 <__aeabi_fmul+0x1e0>
    4f5e:	230f      	movs	r3, #15
    4f60:	4013      	ands	r3, r2
    4f62:	2b04      	cmp	r3, #4
    4f64:	d000      	beq.n	4f68 <__aeabi_fmul+0x1e0>
    4f66:	3204      	adds	r2, #4
    4f68:	0153      	lsls	r3, r2, #5
    4f6a:	d537      	bpl.n	4fdc <__aeabi_fmul+0x254>
    4f6c:	2001      	movs	r0, #1
    4f6e:	2200      	movs	r2, #0
    4f70:	e749      	b.n	4e06 <__aeabi_fmul+0x7e>
    4f72:	0c20      	lsrs	r0, r4, #16
    4f74:	464a      	mov	r2, r9
    4f76:	0424      	lsls	r4, r4, #16
    4f78:	0c24      	lsrs	r4, r4, #16
    4f7a:	0027      	movs	r7, r4
    4f7c:	0c16      	lsrs	r6, r2, #16
    4f7e:	0412      	lsls	r2, r2, #16
    4f80:	0c12      	lsrs	r2, r2, #16
    4f82:	4374      	muls	r4, r6
    4f84:	4357      	muls	r7, r2
    4f86:	4346      	muls	r6, r0
    4f88:	4350      	muls	r0, r2
    4f8a:	0c3a      	lsrs	r2, r7, #16
    4f8c:	1900      	adds	r0, r0, r4
    4f8e:	1812      	adds	r2, r2, r0
    4f90:	4294      	cmp	r4, r2
    4f92:	d903      	bls.n	4f9c <__aeabi_fmul+0x214>
    4f94:	2080      	movs	r0, #128	; 0x80
    4f96:	0240      	lsls	r0, r0, #9
    4f98:	4684      	mov	ip, r0
    4f9a:	4466      	add	r6, ip
    4f9c:	043f      	lsls	r7, r7, #16
    4f9e:	0410      	lsls	r0, r2, #16
    4fa0:	0c3f      	lsrs	r7, r7, #16
    4fa2:	19c0      	adds	r0, r0, r7
    4fa4:	0184      	lsls	r4, r0, #6
    4fa6:	1e67      	subs	r7, r4, #1
    4fa8:	41bc      	sbcs	r4, r7
    4faa:	0c12      	lsrs	r2, r2, #16
    4fac:	0e80      	lsrs	r0, r0, #26
    4fae:	1992      	adds	r2, r2, r6
    4fb0:	4304      	orrs	r4, r0
    4fb2:	0192      	lsls	r2, r2, #6
    4fb4:	4314      	orrs	r4, r2
    4fb6:	0112      	lsls	r2, r2, #4
    4fb8:	d50e      	bpl.n	4fd8 <__aeabi_fmul+0x250>
    4fba:	2301      	movs	r3, #1
    4fbc:	0862      	lsrs	r2, r4, #1
    4fbe:	401c      	ands	r4, r3
    4fc0:	4314      	orrs	r4, r2
    4fc2:	e749      	b.n	4e58 <__aeabi_fmul+0xd0>
    4fc4:	0035      	movs	r5, r6
    4fc6:	46a1      	mov	r9, r4
    4fc8:	2280      	movs	r2, #128	; 0x80
    4fca:	464b      	mov	r3, r9
    4fcc:	03d2      	lsls	r2, r2, #15
    4fce:	431a      	orrs	r2, r3
    4fd0:	0252      	lsls	r2, r2, #9
    4fd2:	20ff      	movs	r0, #255	; 0xff
    4fd4:	0a52      	lsrs	r2, r2, #9
    4fd6:	e716      	b.n	4e06 <__aeabi_fmul+0x7e>
    4fd8:	0019      	movs	r1, r3
    4fda:	e73d      	b.n	4e58 <__aeabi_fmul+0xd0>
    4fdc:	0192      	lsls	r2, r2, #6
    4fde:	2000      	movs	r0, #0
    4fe0:	0a52      	lsrs	r2, r2, #9
    4fe2:	e710      	b.n	4e06 <__aeabi_fmul+0x7e>
    4fe4:	2f0f      	cmp	r7, #15
    4fe6:	d1ed      	bne.n	4fc4 <__aeabi_fmul+0x23c>
    4fe8:	2280      	movs	r2, #128	; 0x80
    4fea:	464b      	mov	r3, r9
    4fec:	03d2      	lsls	r2, r2, #15
    4fee:	4213      	tst	r3, r2
    4ff0:	d0ea      	beq.n	4fc8 <__aeabi_fmul+0x240>
    4ff2:	4214      	tst	r4, r2
    4ff4:	d1e8      	bne.n	4fc8 <__aeabi_fmul+0x240>
    4ff6:	0035      	movs	r5, r6
    4ff8:	20ff      	movs	r0, #255	; 0xff
    4ffa:	4322      	orrs	r2, r4
    4ffc:	e703      	b.n	4e06 <__aeabi_fmul+0x7e>
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	f7ffffff 	.word	0xf7ffffff

00005004 <__aeabi_fsub>:
    5004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5006:	0243      	lsls	r3, r0, #9
    5008:	0045      	lsls	r5, r0, #1
    500a:	0fc4      	lsrs	r4, r0, #31
    500c:	0248      	lsls	r0, r1, #9
    500e:	0a42      	lsrs	r2, r0, #9
    5010:	4694      	mov	ip, r2
    5012:	004a      	lsls	r2, r1, #1
    5014:	0a5e      	lsrs	r6, r3, #9
    5016:	0e2d      	lsrs	r5, r5, #24
    5018:	099b      	lsrs	r3, r3, #6
    501a:	0e12      	lsrs	r2, r2, #24
    501c:	0fc9      	lsrs	r1, r1, #31
    501e:	0980      	lsrs	r0, r0, #6
    5020:	2aff      	cmp	r2, #255	; 0xff
    5022:	d023      	beq.n	506c <__aeabi_fsub+0x68>
    5024:	2701      	movs	r7, #1
    5026:	4079      	eors	r1, r7
    5028:	1aaf      	subs	r7, r5, r2
    502a:	428c      	cmp	r4, r1
    502c:	d00f      	beq.n	504e <__aeabi_fsub+0x4a>
    502e:	2f00      	cmp	r7, #0
    5030:	dc00      	bgt.n	5034 <__aeabi_fsub+0x30>
    5032:	e15d      	b.n	52f0 <__aeabi_fsub+0x2ec>
    5034:	2a00      	cmp	r2, #0
    5036:	d12f      	bne.n	5098 <__aeabi_fsub+0x94>
    5038:	2800      	cmp	r0, #0
    503a:	d100      	bne.n	503e <__aeabi_fsub+0x3a>
    503c:	e090      	b.n	5160 <__aeabi_fsub+0x15c>
    503e:	1e7a      	subs	r2, r7, #1
    5040:	2f01      	cmp	r7, #1
    5042:	d100      	bne.n	5046 <__aeabi_fsub+0x42>
    5044:	e11a      	b.n	527c <__aeabi_fsub+0x278>
    5046:	2fff      	cmp	r7, #255	; 0xff
    5048:	d01c      	beq.n	5084 <__aeabi_fsub+0x80>
    504a:	0017      	movs	r7, r2
    504c:	e029      	b.n	50a2 <__aeabi_fsub+0x9e>
    504e:	2f00      	cmp	r7, #0
    5050:	dc00      	bgt.n	5054 <__aeabi_fsub+0x50>
    5052:	e159      	b.n	5308 <__aeabi_fsub+0x304>
    5054:	2a00      	cmp	r2, #0
    5056:	d052      	beq.n	50fe <__aeabi_fsub+0xfa>
    5058:	2dff      	cmp	r5, #255	; 0xff
    505a:	d013      	beq.n	5084 <__aeabi_fsub+0x80>
    505c:	2280      	movs	r2, #128	; 0x80
    505e:	04d2      	lsls	r2, r2, #19
    5060:	4310      	orrs	r0, r2
    5062:	2f1b      	cmp	r7, #27
    5064:	dc00      	bgt.n	5068 <__aeabi_fsub+0x64>
    5066:	e06a      	b.n	513e <__aeabi_fsub+0x13a>
    5068:	3301      	adds	r3, #1
    506a:	e02b      	b.n	50c4 <__aeabi_fsub+0xc0>
    506c:	2800      	cmp	r0, #0
    506e:	d03b      	beq.n	50e8 <__aeabi_fsub+0xe4>
    5070:	428c      	cmp	r4, r1
    5072:	d04d      	beq.n	5110 <__aeabi_fsub+0x10c>
    5074:	2dff      	cmp	r5, #255	; 0xff
    5076:	d100      	bne.n	507a <__aeabi_fsub+0x76>
    5078:	e08f      	b.n	519a <__aeabi_fsub+0x196>
    507a:	2d00      	cmp	r5, #0
    507c:	d100      	bne.n	5080 <__aeabi_fsub+0x7c>
    507e:	e0ab      	b.n	51d8 <__aeabi_fsub+0x1d4>
    5080:	000c      	movs	r4, r1
    5082:	0003      	movs	r3, r0
    5084:	08db      	lsrs	r3, r3, #3
    5086:	2b00      	cmp	r3, #0
    5088:	d067      	beq.n	515a <__aeabi_fsub+0x156>
    508a:	2280      	movs	r2, #128	; 0x80
    508c:	03d2      	lsls	r2, r2, #15
    508e:	4313      	orrs	r3, r2
    5090:	025b      	lsls	r3, r3, #9
    5092:	20ff      	movs	r0, #255	; 0xff
    5094:	0a5b      	lsrs	r3, r3, #9
    5096:	e022      	b.n	50de <__aeabi_fsub+0xda>
    5098:	2dff      	cmp	r5, #255	; 0xff
    509a:	d0f3      	beq.n	5084 <__aeabi_fsub+0x80>
    509c:	2280      	movs	r2, #128	; 0x80
    509e:	04d2      	lsls	r2, r2, #19
    50a0:	4310      	orrs	r0, r2
    50a2:	2201      	movs	r2, #1
    50a4:	2f1b      	cmp	r7, #27
    50a6:	dc07      	bgt.n	50b8 <__aeabi_fsub+0xb4>
    50a8:	2120      	movs	r1, #32
    50aa:	1bc9      	subs	r1, r1, r7
    50ac:	0002      	movs	r2, r0
    50ae:	4088      	lsls	r0, r1
    50b0:	40fa      	lsrs	r2, r7
    50b2:	1e41      	subs	r1, r0, #1
    50b4:	4188      	sbcs	r0, r1
    50b6:	4302      	orrs	r2, r0
    50b8:	1a9b      	subs	r3, r3, r2
    50ba:	015a      	lsls	r2, r3, #5
    50bc:	d456      	bmi.n	516c <__aeabi_fsub+0x168>
    50be:	2207      	movs	r2, #7
    50c0:	401a      	ands	r2, r3
    50c2:	d04e      	beq.n	5162 <__aeabi_fsub+0x15e>
    50c4:	220f      	movs	r2, #15
    50c6:	401a      	ands	r2, r3
    50c8:	2a04      	cmp	r2, #4
    50ca:	d000      	beq.n	50ce <__aeabi_fsub+0xca>
    50cc:	3304      	adds	r3, #4
    50ce:	015a      	lsls	r2, r3, #5
    50d0:	d547      	bpl.n	5162 <__aeabi_fsub+0x15e>
    50d2:	1c68      	adds	r0, r5, #1
    50d4:	2dfe      	cmp	r5, #254	; 0xfe
    50d6:	d040      	beq.n	515a <__aeabi_fsub+0x156>
    50d8:	019b      	lsls	r3, r3, #6
    50da:	0a5b      	lsrs	r3, r3, #9
    50dc:	b2c0      	uxtb	r0, r0
    50de:	05c0      	lsls	r0, r0, #23
    50e0:	4318      	orrs	r0, r3
    50e2:	07e4      	lsls	r4, r4, #31
    50e4:	4320      	orrs	r0, r4
    50e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50e8:	2701      	movs	r7, #1
    50ea:	4079      	eors	r1, r7
    50ec:	428c      	cmp	r4, r1
    50ee:	d1c1      	bne.n	5074 <__aeabi_fsub+0x70>
    50f0:	2dff      	cmp	r5, #255	; 0xff
    50f2:	d010      	beq.n	5116 <__aeabi_fsub+0x112>
    50f4:	2d00      	cmp	r5, #0
    50f6:	d100      	bne.n	50fa <__aeabi_fsub+0xf6>
    50f8:	e0e7      	b.n	52ca <__aeabi_fsub+0x2c6>
    50fa:	2300      	movs	r3, #0
    50fc:	e7c2      	b.n	5084 <__aeabi_fsub+0x80>
    50fe:	2800      	cmp	r0, #0
    5100:	d02e      	beq.n	5160 <__aeabi_fsub+0x15c>
    5102:	1e7a      	subs	r2, r7, #1
    5104:	2f01      	cmp	r7, #1
    5106:	d07f      	beq.n	5208 <__aeabi_fsub+0x204>
    5108:	2fff      	cmp	r7, #255	; 0xff
    510a:	d0bb      	beq.n	5084 <__aeabi_fsub+0x80>
    510c:	0017      	movs	r7, r2
    510e:	e7a8      	b.n	5062 <__aeabi_fsub+0x5e>
    5110:	2dff      	cmp	r5, #255	; 0xff
    5112:	d000      	beq.n	5116 <__aeabi_fsub+0x112>
    5114:	e083      	b.n	521e <__aeabi_fsub+0x21a>
    5116:	27fe      	movs	r7, #254	; 0xfe
    5118:	1c6a      	adds	r2, r5, #1
    511a:	4217      	tst	r7, r2
    511c:	d000      	beq.n	5120 <__aeabi_fsub+0x11c>
    511e:	e08d      	b.n	523c <__aeabi_fsub+0x238>
    5120:	2d00      	cmp	r5, #0
    5122:	d000      	beq.n	5126 <__aeabi_fsub+0x122>
    5124:	e0ad      	b.n	5282 <__aeabi_fsub+0x27e>
    5126:	2b00      	cmp	r3, #0
    5128:	d100      	bne.n	512c <__aeabi_fsub+0x128>
    512a:	e0d2      	b.n	52d2 <__aeabi_fsub+0x2ce>
    512c:	2800      	cmp	r0, #0
    512e:	d000      	beq.n	5132 <__aeabi_fsub+0x12e>
    5130:	e0d1      	b.n	52d6 <__aeabi_fsub+0x2d2>
    5132:	2500      	movs	r5, #0
    5134:	08db      	lsrs	r3, r3, #3
    5136:	025b      	lsls	r3, r3, #9
    5138:	0a5b      	lsrs	r3, r3, #9
    513a:	b2e8      	uxtb	r0, r5
    513c:	e7cf      	b.n	50de <__aeabi_fsub+0xda>
    513e:	2120      	movs	r1, #32
    5140:	1bc9      	subs	r1, r1, r7
    5142:	0002      	movs	r2, r0
    5144:	4088      	lsls	r0, r1
    5146:	40fa      	lsrs	r2, r7
    5148:	1e41      	subs	r1, r0, #1
    514a:	4188      	sbcs	r0, r1
    514c:	4310      	orrs	r0, r2
    514e:	181b      	adds	r3, r3, r0
    5150:	015a      	lsls	r2, r3, #5
    5152:	d5b4      	bpl.n	50be <__aeabi_fsub+0xba>
    5154:	3501      	adds	r5, #1
    5156:	2dff      	cmp	r5, #255	; 0xff
    5158:	d15a      	bne.n	5210 <__aeabi_fsub+0x20c>
    515a:	20ff      	movs	r0, #255	; 0xff
    515c:	2300      	movs	r3, #0
    515e:	e7be      	b.n	50de <__aeabi_fsub+0xda>
    5160:	003d      	movs	r5, r7
    5162:	08db      	lsrs	r3, r3, #3
    5164:	2dff      	cmp	r5, #255	; 0xff
    5166:	d100      	bne.n	516a <__aeabi_fsub+0x166>
    5168:	e78d      	b.n	5086 <__aeabi_fsub+0x82>
    516a:	e7e4      	b.n	5136 <__aeabi_fsub+0x132>
    516c:	019e      	lsls	r6, r3, #6
    516e:	09b6      	lsrs	r6, r6, #6
    5170:	0030      	movs	r0, r6
    5172:	f000 f987 	bl	5484 <__clzsi2>
    5176:	3805      	subs	r0, #5
    5178:	4086      	lsls	r6, r0
    517a:	4285      	cmp	r5, r0
    517c:	dc1f      	bgt.n	51be <__aeabi_fsub+0x1ba>
    517e:	2220      	movs	r2, #32
    5180:	1b40      	subs	r0, r0, r5
    5182:	3001      	adds	r0, #1
    5184:	1a12      	subs	r2, r2, r0
    5186:	0033      	movs	r3, r6
    5188:	4096      	lsls	r6, r2
    518a:	40c3      	lsrs	r3, r0
    518c:	1e72      	subs	r2, r6, #1
    518e:	4196      	sbcs	r6, r2
    5190:	2500      	movs	r5, #0
    5192:	4333      	orrs	r3, r6
    5194:	075a      	lsls	r2, r3, #29
    5196:	d195      	bne.n	50c4 <__aeabi_fsub+0xc0>
    5198:	e799      	b.n	50ce <__aeabi_fsub+0xca>
    519a:	27fe      	movs	r7, #254	; 0xfe
    519c:	1c6a      	adds	r2, r5, #1
    519e:	4217      	tst	r7, r2
    51a0:	d111      	bne.n	51c6 <__aeabi_fsub+0x1c2>
    51a2:	2d00      	cmp	r5, #0
    51a4:	d15a      	bne.n	525c <__aeabi_fsub+0x258>
    51a6:	2b00      	cmp	r3, #0
    51a8:	d100      	bne.n	51ac <__aeabi_fsub+0x1a8>
    51aa:	e089      	b.n	52c0 <__aeabi_fsub+0x2bc>
    51ac:	2800      	cmp	r0, #0
    51ae:	d0c0      	beq.n	5132 <__aeabi_fsub+0x12e>
    51b0:	1a1a      	subs	r2, r3, r0
    51b2:	0156      	lsls	r6, r2, #5
    51b4:	d400      	bmi.n	51b8 <__aeabi_fsub+0x1b4>
    51b6:	e096      	b.n	52e6 <__aeabi_fsub+0x2e2>
    51b8:	000c      	movs	r4, r1
    51ba:	1ac3      	subs	r3, r0, r3
    51bc:	e7ea      	b.n	5194 <__aeabi_fsub+0x190>
    51be:	4b58      	ldr	r3, [pc, #352]	; (5320 <__aeabi_fsub+0x31c>)
    51c0:	1a2d      	subs	r5, r5, r0
    51c2:	4033      	ands	r3, r6
    51c4:	e7e6      	b.n	5194 <__aeabi_fsub+0x190>
    51c6:	1a1e      	subs	r6, r3, r0
    51c8:	0172      	lsls	r2, r6, #5
    51ca:	d444      	bmi.n	5256 <__aeabi_fsub+0x252>
    51cc:	2e00      	cmp	r6, #0
    51ce:	d1cf      	bne.n	5170 <__aeabi_fsub+0x16c>
    51d0:	2400      	movs	r4, #0
    51d2:	2000      	movs	r0, #0
    51d4:	2300      	movs	r3, #0
    51d6:	e782      	b.n	50de <__aeabi_fsub+0xda>
    51d8:	25ff      	movs	r5, #255	; 0xff
    51da:	2b00      	cmp	r3, #0
    51dc:	d038      	beq.n	5250 <__aeabi_fsub+0x24c>
    51de:	1e6e      	subs	r6, r5, #1
    51e0:	2d01      	cmp	r5, #1
    51e2:	d06a      	beq.n	52ba <__aeabi_fsub+0x2b6>
    51e4:	2dff      	cmp	r5, #255	; 0xff
    51e6:	d100      	bne.n	51ea <__aeabi_fsub+0x1e6>
    51e8:	e74a      	b.n	5080 <__aeabi_fsub+0x7c>
    51ea:	2401      	movs	r4, #1
    51ec:	2e1b      	cmp	r6, #27
    51ee:	dc07      	bgt.n	5200 <__aeabi_fsub+0x1fc>
    51f0:	2520      	movs	r5, #32
    51f2:	1bad      	subs	r5, r5, r6
    51f4:	001c      	movs	r4, r3
    51f6:	40ab      	lsls	r3, r5
    51f8:	40f4      	lsrs	r4, r6
    51fa:	1e5d      	subs	r5, r3, #1
    51fc:	41ab      	sbcs	r3, r5
    51fe:	431c      	orrs	r4, r3
    5200:	1b03      	subs	r3, r0, r4
    5202:	0015      	movs	r5, r2
    5204:	000c      	movs	r4, r1
    5206:	e758      	b.n	50ba <__aeabi_fsub+0xb6>
    5208:	181b      	adds	r3, r3, r0
    520a:	2502      	movs	r5, #2
    520c:	015a      	lsls	r2, r3, #5
    520e:	d533      	bpl.n	5278 <__aeabi_fsub+0x274>
    5210:	2201      	movs	r2, #1
    5212:	4944      	ldr	r1, [pc, #272]	; (5324 <__aeabi_fsub+0x320>)
    5214:	401a      	ands	r2, r3
    5216:	085b      	lsrs	r3, r3, #1
    5218:	400b      	ands	r3, r1
    521a:	4313      	orrs	r3, r2
    521c:	e7ba      	b.n	5194 <__aeabi_fsub+0x190>
    521e:	2d00      	cmp	r5, #0
    5220:	d131      	bne.n	5286 <__aeabi_fsub+0x282>
    5222:	35ff      	adds	r5, #255	; 0xff
    5224:	2b00      	cmp	r3, #0
    5226:	d052      	beq.n	52ce <__aeabi_fsub+0x2ca>
    5228:	1e69      	subs	r1, r5, #1
    522a:	2d01      	cmp	r5, #1
    522c:	d020      	beq.n	5270 <__aeabi_fsub+0x26c>
    522e:	2dff      	cmp	r5, #255	; 0xff
    5230:	d029      	beq.n	5286 <__aeabi_fsub+0x282>
    5232:	291b      	cmp	r1, #27
    5234:	dd36      	ble.n	52a4 <__aeabi_fsub+0x2a0>
    5236:	0015      	movs	r5, r2
    5238:	1c43      	adds	r3, r0, #1
    523a:	e743      	b.n	50c4 <__aeabi_fsub+0xc0>
    523c:	2aff      	cmp	r2, #255	; 0xff
    523e:	d08c      	beq.n	515a <__aeabi_fsub+0x156>
    5240:	181b      	adds	r3, r3, r0
    5242:	085b      	lsrs	r3, r3, #1
    5244:	0015      	movs	r5, r2
    5246:	075a      	lsls	r2, r3, #29
    5248:	d000      	beq.n	524c <__aeabi_fsub+0x248>
    524a:	e73b      	b.n	50c4 <__aeabi_fsub+0xc0>
    524c:	08db      	lsrs	r3, r3, #3
    524e:	e772      	b.n	5136 <__aeabi_fsub+0x132>
    5250:	000c      	movs	r4, r1
    5252:	0003      	movs	r3, r0
    5254:	e785      	b.n	5162 <__aeabi_fsub+0x15e>
    5256:	000c      	movs	r4, r1
    5258:	1ac6      	subs	r6, r0, r3
    525a:	e789      	b.n	5170 <__aeabi_fsub+0x16c>
    525c:	2b00      	cmp	r3, #0
    525e:	d114      	bne.n	528a <__aeabi_fsub+0x286>
    5260:	2800      	cmp	r0, #0
    5262:	d000      	beq.n	5266 <__aeabi_fsub+0x262>
    5264:	e70c      	b.n	5080 <__aeabi_fsub+0x7c>
    5266:	2380      	movs	r3, #128	; 0x80
    5268:	2400      	movs	r4, #0
    526a:	20ff      	movs	r0, #255	; 0xff
    526c:	03db      	lsls	r3, r3, #15
    526e:	e736      	b.n	50de <__aeabi_fsub+0xda>
    5270:	181b      	adds	r3, r3, r0
    5272:	3501      	adds	r5, #1
    5274:	015a      	lsls	r2, r3, #5
    5276:	d4cb      	bmi.n	5210 <__aeabi_fsub+0x20c>
    5278:	3d01      	subs	r5, #1
    527a:	e720      	b.n	50be <__aeabi_fsub+0xba>
    527c:	2501      	movs	r5, #1
    527e:	1a1b      	subs	r3, r3, r0
    5280:	e71b      	b.n	50ba <__aeabi_fsub+0xb6>
    5282:	2b00      	cmp	r3, #0
    5284:	d101      	bne.n	528a <__aeabi_fsub+0x286>
    5286:	0003      	movs	r3, r0
    5288:	e6fc      	b.n	5084 <__aeabi_fsub+0x80>
    528a:	2800      	cmp	r0, #0
    528c:	d100      	bne.n	5290 <__aeabi_fsub+0x28c>
    528e:	e6f9      	b.n	5084 <__aeabi_fsub+0x80>
    5290:	2280      	movs	r2, #128	; 0x80
    5292:	03d2      	lsls	r2, r2, #15
    5294:	4296      	cmp	r6, r2
    5296:	d303      	bcc.n	52a0 <__aeabi_fsub+0x29c>
    5298:	4594      	cmp	ip, r2
    529a:	d201      	bcs.n	52a0 <__aeabi_fsub+0x29c>
    529c:	000c      	movs	r4, r1
    529e:	0003      	movs	r3, r0
    52a0:	08db      	lsrs	r3, r3, #3
    52a2:	e6f2      	b.n	508a <__aeabi_fsub+0x86>
    52a4:	001d      	movs	r5, r3
    52a6:	2620      	movs	r6, #32
    52a8:	40cd      	lsrs	r5, r1
    52aa:	1a71      	subs	r1, r6, r1
    52ac:	408b      	lsls	r3, r1
    52ae:	1e59      	subs	r1, r3, #1
    52b0:	418b      	sbcs	r3, r1
    52b2:	432b      	orrs	r3, r5
    52b4:	181b      	adds	r3, r3, r0
    52b6:	0015      	movs	r5, r2
    52b8:	e74a      	b.n	5150 <__aeabi_fsub+0x14c>
    52ba:	000c      	movs	r4, r1
    52bc:	1ac3      	subs	r3, r0, r3
    52be:	e6fc      	b.n	50ba <__aeabi_fsub+0xb6>
    52c0:	2800      	cmp	r0, #0
    52c2:	d085      	beq.n	51d0 <__aeabi_fsub+0x1cc>
    52c4:	000c      	movs	r4, r1
    52c6:	0003      	movs	r3, r0
    52c8:	e733      	b.n	5132 <__aeabi_fsub+0x12e>
    52ca:	25ff      	movs	r5, #255	; 0xff
    52cc:	e7aa      	b.n	5224 <__aeabi_fsub+0x220>
    52ce:	0003      	movs	r3, r0
    52d0:	e747      	b.n	5162 <__aeabi_fsub+0x15e>
    52d2:	0003      	movs	r3, r0
    52d4:	e72d      	b.n	5132 <__aeabi_fsub+0x12e>
    52d6:	181b      	adds	r3, r3, r0
    52d8:	015a      	lsls	r2, r3, #5
    52da:	d5b7      	bpl.n	524c <__aeabi_fsub+0x248>
    52dc:	4a10      	ldr	r2, [pc, #64]	; (5320 <__aeabi_fsub+0x31c>)
    52de:	3501      	adds	r5, #1
    52e0:	4013      	ands	r3, r2
    52e2:	08db      	lsrs	r3, r3, #3
    52e4:	e727      	b.n	5136 <__aeabi_fsub+0x132>
    52e6:	1e13      	subs	r3, r2, #0
    52e8:	d100      	bne.n	52ec <__aeabi_fsub+0x2e8>
    52ea:	e771      	b.n	51d0 <__aeabi_fsub+0x1cc>
    52ec:	08db      	lsrs	r3, r3, #3
    52ee:	e722      	b.n	5136 <__aeabi_fsub+0x132>
    52f0:	2f00      	cmp	r7, #0
    52f2:	d100      	bne.n	52f6 <__aeabi_fsub+0x2f2>
    52f4:	e751      	b.n	519a <__aeabi_fsub+0x196>
    52f6:	1b56      	subs	r6, r2, r5
    52f8:	2d00      	cmp	r5, #0
    52fa:	d101      	bne.n	5300 <__aeabi_fsub+0x2fc>
    52fc:	0035      	movs	r5, r6
    52fe:	e76c      	b.n	51da <__aeabi_fsub+0x1d6>
    5300:	2480      	movs	r4, #128	; 0x80
    5302:	04e4      	lsls	r4, r4, #19
    5304:	4323      	orrs	r3, r4
    5306:	e770      	b.n	51ea <__aeabi_fsub+0x1e6>
    5308:	2f00      	cmp	r7, #0
    530a:	d100      	bne.n	530e <__aeabi_fsub+0x30a>
    530c:	e703      	b.n	5116 <__aeabi_fsub+0x112>
    530e:	1b51      	subs	r1, r2, r5
    5310:	2d00      	cmp	r5, #0
    5312:	d101      	bne.n	5318 <__aeabi_fsub+0x314>
    5314:	000d      	movs	r5, r1
    5316:	e785      	b.n	5224 <__aeabi_fsub+0x220>
    5318:	2580      	movs	r5, #128	; 0x80
    531a:	04ed      	lsls	r5, r5, #19
    531c:	432b      	orrs	r3, r5
    531e:	e788      	b.n	5232 <__aeabi_fsub+0x22e>
    5320:	fbffffff 	.word	0xfbffffff
    5324:	7dffffff 	.word	0x7dffffff

00005328 <__aeabi_f2iz>:
    5328:	0241      	lsls	r1, r0, #9
    532a:	0042      	lsls	r2, r0, #1
    532c:	0fc3      	lsrs	r3, r0, #31
    532e:	0a49      	lsrs	r1, r1, #9
    5330:	2000      	movs	r0, #0
    5332:	0e12      	lsrs	r2, r2, #24
    5334:	2a7e      	cmp	r2, #126	; 0x7e
    5336:	dd03      	ble.n	5340 <__aeabi_f2iz+0x18>
    5338:	2a9d      	cmp	r2, #157	; 0x9d
    533a:	dd02      	ble.n	5342 <__aeabi_f2iz+0x1a>
    533c:	4a09      	ldr	r2, [pc, #36]	; (5364 <__aeabi_f2iz+0x3c>)
    533e:	1898      	adds	r0, r3, r2
    5340:	4770      	bx	lr
    5342:	2080      	movs	r0, #128	; 0x80
    5344:	0400      	lsls	r0, r0, #16
    5346:	4301      	orrs	r1, r0
    5348:	2a95      	cmp	r2, #149	; 0x95
    534a:	dc07      	bgt.n	535c <__aeabi_f2iz+0x34>
    534c:	2096      	movs	r0, #150	; 0x96
    534e:	1a82      	subs	r2, r0, r2
    5350:	40d1      	lsrs	r1, r2
    5352:	4248      	negs	r0, r1
    5354:	2b00      	cmp	r3, #0
    5356:	d1f3      	bne.n	5340 <__aeabi_f2iz+0x18>
    5358:	0008      	movs	r0, r1
    535a:	e7f1      	b.n	5340 <__aeabi_f2iz+0x18>
    535c:	3a96      	subs	r2, #150	; 0x96
    535e:	4091      	lsls	r1, r2
    5360:	e7f7      	b.n	5352 <__aeabi_f2iz+0x2a>
    5362:	46c0      	nop			; (mov r8, r8)
    5364:	7fffffff 	.word	0x7fffffff

00005368 <__aeabi_i2f>:
    5368:	b570      	push	{r4, r5, r6, lr}
    536a:	2800      	cmp	r0, #0
    536c:	d013      	beq.n	5396 <__aeabi_i2f+0x2e>
    536e:	17c3      	asrs	r3, r0, #31
    5370:	18c5      	adds	r5, r0, r3
    5372:	405d      	eors	r5, r3
    5374:	0fc4      	lsrs	r4, r0, #31
    5376:	0028      	movs	r0, r5
    5378:	f000 f884 	bl	5484 <__clzsi2>
    537c:	239e      	movs	r3, #158	; 0x9e
    537e:	0001      	movs	r1, r0
    5380:	1a1b      	subs	r3, r3, r0
    5382:	2b96      	cmp	r3, #150	; 0x96
    5384:	dc0f      	bgt.n	53a6 <__aeabi_i2f+0x3e>
    5386:	2808      	cmp	r0, #8
    5388:	d034      	beq.n	53f4 <__aeabi_i2f+0x8c>
    538a:	3908      	subs	r1, #8
    538c:	408d      	lsls	r5, r1
    538e:	026d      	lsls	r5, r5, #9
    5390:	0a6d      	lsrs	r5, r5, #9
    5392:	b2d8      	uxtb	r0, r3
    5394:	e002      	b.n	539c <__aeabi_i2f+0x34>
    5396:	2400      	movs	r4, #0
    5398:	2000      	movs	r0, #0
    539a:	2500      	movs	r5, #0
    539c:	05c0      	lsls	r0, r0, #23
    539e:	4328      	orrs	r0, r5
    53a0:	07e4      	lsls	r4, r4, #31
    53a2:	4320      	orrs	r0, r4
    53a4:	bd70      	pop	{r4, r5, r6, pc}
    53a6:	2b99      	cmp	r3, #153	; 0x99
    53a8:	dc16      	bgt.n	53d8 <__aeabi_i2f+0x70>
    53aa:	1f42      	subs	r2, r0, #5
    53ac:	2805      	cmp	r0, #5
    53ae:	d000      	beq.n	53b2 <__aeabi_i2f+0x4a>
    53b0:	4095      	lsls	r5, r2
    53b2:	002a      	movs	r2, r5
    53b4:	4811      	ldr	r0, [pc, #68]	; (53fc <__aeabi_i2f+0x94>)
    53b6:	4002      	ands	r2, r0
    53b8:	076e      	lsls	r6, r5, #29
    53ba:	d009      	beq.n	53d0 <__aeabi_i2f+0x68>
    53bc:	260f      	movs	r6, #15
    53be:	4035      	ands	r5, r6
    53c0:	2d04      	cmp	r5, #4
    53c2:	d005      	beq.n	53d0 <__aeabi_i2f+0x68>
    53c4:	3204      	adds	r2, #4
    53c6:	0155      	lsls	r5, r2, #5
    53c8:	d502      	bpl.n	53d0 <__aeabi_i2f+0x68>
    53ca:	239f      	movs	r3, #159	; 0x9f
    53cc:	4002      	ands	r2, r0
    53ce:	1a5b      	subs	r3, r3, r1
    53d0:	0192      	lsls	r2, r2, #6
    53d2:	0a55      	lsrs	r5, r2, #9
    53d4:	b2d8      	uxtb	r0, r3
    53d6:	e7e1      	b.n	539c <__aeabi_i2f+0x34>
    53d8:	2205      	movs	r2, #5
    53da:	1a12      	subs	r2, r2, r0
    53dc:	0028      	movs	r0, r5
    53de:	40d0      	lsrs	r0, r2
    53e0:	0002      	movs	r2, r0
    53e2:	0008      	movs	r0, r1
    53e4:	301b      	adds	r0, #27
    53e6:	4085      	lsls	r5, r0
    53e8:	0028      	movs	r0, r5
    53ea:	1e45      	subs	r5, r0, #1
    53ec:	41a8      	sbcs	r0, r5
    53ee:	4302      	orrs	r2, r0
    53f0:	0015      	movs	r5, r2
    53f2:	e7de      	b.n	53b2 <__aeabi_i2f+0x4a>
    53f4:	026d      	lsls	r5, r5, #9
    53f6:	2096      	movs	r0, #150	; 0x96
    53f8:	0a6d      	lsrs	r5, r5, #9
    53fa:	e7cf      	b.n	539c <__aeabi_i2f+0x34>
    53fc:	fbffffff 	.word	0xfbffffff

00005400 <__aeabi_ui2f>:
    5400:	b570      	push	{r4, r5, r6, lr}
    5402:	1e04      	subs	r4, r0, #0
    5404:	d00e      	beq.n	5424 <__aeabi_ui2f+0x24>
    5406:	f000 f83d 	bl	5484 <__clzsi2>
    540a:	239e      	movs	r3, #158	; 0x9e
    540c:	0001      	movs	r1, r0
    540e:	1a1b      	subs	r3, r3, r0
    5410:	2b96      	cmp	r3, #150	; 0x96
    5412:	dc0c      	bgt.n	542e <__aeabi_ui2f+0x2e>
    5414:	2808      	cmp	r0, #8
    5416:	d02f      	beq.n	5478 <__aeabi_ui2f+0x78>
    5418:	3908      	subs	r1, #8
    541a:	408c      	lsls	r4, r1
    541c:	0264      	lsls	r4, r4, #9
    541e:	0a64      	lsrs	r4, r4, #9
    5420:	b2d8      	uxtb	r0, r3
    5422:	e001      	b.n	5428 <__aeabi_ui2f+0x28>
    5424:	2000      	movs	r0, #0
    5426:	2400      	movs	r4, #0
    5428:	05c0      	lsls	r0, r0, #23
    542a:	4320      	orrs	r0, r4
    542c:	bd70      	pop	{r4, r5, r6, pc}
    542e:	2b99      	cmp	r3, #153	; 0x99
    5430:	dc16      	bgt.n	5460 <__aeabi_ui2f+0x60>
    5432:	1f42      	subs	r2, r0, #5
    5434:	2805      	cmp	r0, #5
    5436:	d000      	beq.n	543a <__aeabi_ui2f+0x3a>
    5438:	4094      	lsls	r4, r2
    543a:	0022      	movs	r2, r4
    543c:	4810      	ldr	r0, [pc, #64]	; (5480 <__aeabi_ui2f+0x80>)
    543e:	4002      	ands	r2, r0
    5440:	0765      	lsls	r5, r4, #29
    5442:	d009      	beq.n	5458 <__aeabi_ui2f+0x58>
    5444:	250f      	movs	r5, #15
    5446:	402c      	ands	r4, r5
    5448:	2c04      	cmp	r4, #4
    544a:	d005      	beq.n	5458 <__aeabi_ui2f+0x58>
    544c:	3204      	adds	r2, #4
    544e:	0154      	lsls	r4, r2, #5
    5450:	d502      	bpl.n	5458 <__aeabi_ui2f+0x58>
    5452:	239f      	movs	r3, #159	; 0x9f
    5454:	4002      	ands	r2, r0
    5456:	1a5b      	subs	r3, r3, r1
    5458:	0192      	lsls	r2, r2, #6
    545a:	0a54      	lsrs	r4, r2, #9
    545c:	b2d8      	uxtb	r0, r3
    545e:	e7e3      	b.n	5428 <__aeabi_ui2f+0x28>
    5460:	0002      	movs	r2, r0
    5462:	0020      	movs	r0, r4
    5464:	321b      	adds	r2, #27
    5466:	4090      	lsls	r0, r2
    5468:	0002      	movs	r2, r0
    546a:	1e50      	subs	r0, r2, #1
    546c:	4182      	sbcs	r2, r0
    546e:	2005      	movs	r0, #5
    5470:	1a40      	subs	r0, r0, r1
    5472:	40c4      	lsrs	r4, r0
    5474:	4314      	orrs	r4, r2
    5476:	e7e0      	b.n	543a <__aeabi_ui2f+0x3a>
    5478:	0264      	lsls	r4, r4, #9
    547a:	2096      	movs	r0, #150	; 0x96
    547c:	0a64      	lsrs	r4, r4, #9
    547e:	e7d3      	b.n	5428 <__aeabi_ui2f+0x28>
    5480:	fbffffff 	.word	0xfbffffff

00005484 <__clzsi2>:
    5484:	211c      	movs	r1, #28
    5486:	2301      	movs	r3, #1
    5488:	041b      	lsls	r3, r3, #16
    548a:	4298      	cmp	r0, r3
    548c:	d301      	bcc.n	5492 <__clzsi2+0xe>
    548e:	0c00      	lsrs	r0, r0, #16
    5490:	3910      	subs	r1, #16
    5492:	0a1b      	lsrs	r3, r3, #8
    5494:	4298      	cmp	r0, r3
    5496:	d301      	bcc.n	549c <__clzsi2+0x18>
    5498:	0a00      	lsrs	r0, r0, #8
    549a:	3908      	subs	r1, #8
    549c:	091b      	lsrs	r3, r3, #4
    549e:	4298      	cmp	r0, r3
    54a0:	d301      	bcc.n	54a6 <__clzsi2+0x22>
    54a2:	0900      	lsrs	r0, r0, #4
    54a4:	3904      	subs	r1, #4
    54a6:	a202      	add	r2, pc, #8	; (adr r2, 54b0 <__clzsi2+0x2c>)
    54a8:	5c10      	ldrb	r0, [r2, r0]
    54aa:	1840      	adds	r0, r0, r1
    54ac:	4770      	bx	lr
    54ae:	46c0      	nop			; (mov r8, r8)
    54b0:	02020304 	.word	0x02020304
    54b4:	01010101 	.word	0x01010101
	...

000054c0 <memset>:
    54c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54c2:	0005      	movs	r5, r0
    54c4:	0783      	lsls	r3, r0, #30
    54c6:	d049      	beq.n	555c <memset+0x9c>
    54c8:	1e54      	subs	r4, r2, #1
    54ca:	2a00      	cmp	r2, #0
    54cc:	d045      	beq.n	555a <memset+0x9a>
    54ce:	0003      	movs	r3, r0
    54d0:	2603      	movs	r6, #3
    54d2:	b2ca      	uxtb	r2, r1
    54d4:	e002      	b.n	54dc <memset+0x1c>
    54d6:	3501      	adds	r5, #1
    54d8:	3c01      	subs	r4, #1
    54da:	d33e      	bcc.n	555a <memset+0x9a>
    54dc:	3301      	adds	r3, #1
    54de:	702a      	strb	r2, [r5, #0]
    54e0:	4233      	tst	r3, r6
    54e2:	d1f8      	bne.n	54d6 <memset+0x16>
    54e4:	2c03      	cmp	r4, #3
    54e6:	d930      	bls.n	554a <memset+0x8a>
    54e8:	22ff      	movs	r2, #255	; 0xff
    54ea:	400a      	ands	r2, r1
    54ec:	0215      	lsls	r5, r2, #8
    54ee:	18ad      	adds	r5, r5, r2
    54f0:	042a      	lsls	r2, r5, #16
    54f2:	18ad      	adds	r5, r5, r2
    54f4:	2c0f      	cmp	r4, #15
    54f6:	d934      	bls.n	5562 <memset+0xa2>
    54f8:	0027      	movs	r7, r4
    54fa:	3f10      	subs	r7, #16
    54fc:	093f      	lsrs	r7, r7, #4
    54fe:	013e      	lsls	r6, r7, #4
    5500:	46b4      	mov	ip, r6
    5502:	001e      	movs	r6, r3
    5504:	001a      	movs	r2, r3
    5506:	3610      	adds	r6, #16
    5508:	4466      	add	r6, ip
    550a:	6015      	str	r5, [r2, #0]
    550c:	6055      	str	r5, [r2, #4]
    550e:	6095      	str	r5, [r2, #8]
    5510:	60d5      	str	r5, [r2, #12]
    5512:	3210      	adds	r2, #16
    5514:	4296      	cmp	r6, r2
    5516:	d1f8      	bne.n	550a <memset+0x4a>
    5518:	3701      	adds	r7, #1
    551a:	013f      	lsls	r7, r7, #4
    551c:	19db      	adds	r3, r3, r7
    551e:	270f      	movs	r7, #15
    5520:	220c      	movs	r2, #12
    5522:	4027      	ands	r7, r4
    5524:	4022      	ands	r2, r4
    5526:	003c      	movs	r4, r7
    5528:	2a00      	cmp	r2, #0
    552a:	d00e      	beq.n	554a <memset+0x8a>
    552c:	1f3e      	subs	r6, r7, #4
    552e:	08b6      	lsrs	r6, r6, #2
    5530:	00b4      	lsls	r4, r6, #2
    5532:	46a4      	mov	ip, r4
    5534:	001a      	movs	r2, r3
    5536:	1d1c      	adds	r4, r3, #4
    5538:	4464      	add	r4, ip
    553a:	c220      	stmia	r2!, {r5}
    553c:	42a2      	cmp	r2, r4
    553e:	d1fc      	bne.n	553a <memset+0x7a>
    5540:	2403      	movs	r4, #3
    5542:	3601      	adds	r6, #1
    5544:	00b6      	lsls	r6, r6, #2
    5546:	199b      	adds	r3, r3, r6
    5548:	403c      	ands	r4, r7
    554a:	2c00      	cmp	r4, #0
    554c:	d005      	beq.n	555a <memset+0x9a>
    554e:	b2c9      	uxtb	r1, r1
    5550:	191c      	adds	r4, r3, r4
    5552:	7019      	strb	r1, [r3, #0]
    5554:	3301      	adds	r3, #1
    5556:	429c      	cmp	r4, r3
    5558:	d1fb      	bne.n	5552 <memset+0x92>
    555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    555c:	0003      	movs	r3, r0
    555e:	0014      	movs	r4, r2
    5560:	e7c0      	b.n	54e4 <memset+0x24>
    5562:	0027      	movs	r7, r4
    5564:	e7e2      	b.n	552c <memset+0x6c>
    5566:	46c0      	nop			; (mov r8, r8)

00005568 <__libc_init_array>:
    5568:	b570      	push	{r4, r5, r6, lr}
    556a:	4b0d      	ldr	r3, [pc, #52]	; (55a0 <__libc_init_array+0x38>)
    556c:	4d0d      	ldr	r5, [pc, #52]	; (55a4 <__libc_init_array+0x3c>)
    556e:	1b5e      	subs	r6, r3, r5
    5570:	10b6      	asrs	r6, r6, #2
    5572:	42ab      	cmp	r3, r5
    5574:	d005      	beq.n	5582 <__libc_init_array+0x1a>
    5576:	2400      	movs	r4, #0
    5578:	cd08      	ldmia	r5!, {r3}
    557a:	3401      	adds	r4, #1
    557c:	4798      	blx	r3
    557e:	42a6      	cmp	r6, r4
    5580:	d8fa      	bhi.n	5578 <__libc_init_array+0x10>
    5582:	f000 fb5d 	bl	5c40 <_init>
    5586:	4b08      	ldr	r3, [pc, #32]	; (55a8 <__libc_init_array+0x40>)
    5588:	4d08      	ldr	r5, [pc, #32]	; (55ac <__libc_init_array+0x44>)
    558a:	1b5e      	subs	r6, r3, r5
    558c:	10b6      	asrs	r6, r6, #2
    558e:	42ab      	cmp	r3, r5
    5590:	d005      	beq.n	559e <__libc_init_array+0x36>
    5592:	2400      	movs	r4, #0
    5594:	cd08      	ldmia	r5!, {r3}
    5596:	3401      	adds	r4, #1
    5598:	4798      	blx	r3
    559a:	42a6      	cmp	r6, r4
    559c:	d8fa      	bhi.n	5594 <__libc_init_array+0x2c>
    559e:	bd70      	pop	{r4, r5, r6, pc}
    55a0:	00005c4c 	.word	0x00005c4c
    55a4:	00005c4c 	.word	0x00005c4c
    55a8:	00005c54 	.word	0x00005c54
    55ac:	00005c4c 	.word	0x00005c4c

000055b0 <__retarget_lock_acquire_recursive>:
    55b0:	4770      	bx	lr
    55b2:	46c0      	nop			; (mov r8, r8)

000055b4 <__retarget_lock_release_recursive>:
    55b4:	4770      	bx	lr
    55b6:	46c0      	nop			; (mov r8, r8)

000055b8 <memcpy>:
    55b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ba:	0005      	movs	r5, r0
    55bc:	2a0f      	cmp	r2, #15
    55be:	d933      	bls.n	5628 <memcpy+0x70>
    55c0:	2403      	movs	r4, #3
    55c2:	0003      	movs	r3, r0
    55c4:	0026      	movs	r6, r4
    55c6:	430b      	orrs	r3, r1
    55c8:	401e      	ands	r6, r3
    55ca:	421c      	tst	r4, r3
    55cc:	d137      	bne.n	563e <memcpy+0x86>
    55ce:	0015      	movs	r5, r2
    55d0:	3d10      	subs	r5, #16
    55d2:	092d      	lsrs	r5, r5, #4
    55d4:	0003      	movs	r3, r0
    55d6:	000c      	movs	r4, r1
    55d8:	46ac      	mov	ip, r5
    55da:	012f      	lsls	r7, r5, #4
    55dc:	183f      	adds	r7, r7, r0
    55de:	6865      	ldr	r5, [r4, #4]
    55e0:	605d      	str	r5, [r3, #4]
    55e2:	68a5      	ldr	r5, [r4, #8]
    55e4:	609d      	str	r5, [r3, #8]
    55e6:	68e5      	ldr	r5, [r4, #12]
    55e8:	60dd      	str	r5, [r3, #12]
    55ea:	6825      	ldr	r5, [r4, #0]
    55ec:	3410      	adds	r4, #16
    55ee:	601d      	str	r5, [r3, #0]
    55f0:	001d      	movs	r5, r3
    55f2:	3310      	adds	r3, #16
    55f4:	42bd      	cmp	r5, r7
    55f6:	d1f2      	bne.n	55de <memcpy+0x26>
    55f8:	4665      	mov	r5, ip
    55fa:	230f      	movs	r3, #15
    55fc:	240c      	movs	r4, #12
    55fe:	3501      	adds	r5, #1
    5600:	012d      	lsls	r5, r5, #4
    5602:	1949      	adds	r1, r1, r5
    5604:	4013      	ands	r3, r2
    5606:	1945      	adds	r5, r0, r5
    5608:	4214      	tst	r4, r2
    560a:	d01a      	beq.n	5642 <memcpy+0x8a>
    560c:	598c      	ldr	r4, [r1, r6]
    560e:	51ac      	str	r4, [r5, r6]
    5610:	3604      	adds	r6, #4
    5612:	1b9c      	subs	r4, r3, r6
    5614:	2c03      	cmp	r4, #3
    5616:	d8f9      	bhi.n	560c <memcpy+0x54>
    5618:	3b04      	subs	r3, #4
    561a:	089b      	lsrs	r3, r3, #2
    561c:	3301      	adds	r3, #1
    561e:	009b      	lsls	r3, r3, #2
    5620:	18ed      	adds	r5, r5, r3
    5622:	18c9      	adds	r1, r1, r3
    5624:	2303      	movs	r3, #3
    5626:	401a      	ands	r2, r3
    5628:	1e56      	subs	r6, r2, #1
    562a:	2a00      	cmp	r2, #0
    562c:	d006      	beq.n	563c <memcpy+0x84>
    562e:	2300      	movs	r3, #0
    5630:	5ccc      	ldrb	r4, [r1, r3]
    5632:	001a      	movs	r2, r3
    5634:	54ec      	strb	r4, [r5, r3]
    5636:	3301      	adds	r3, #1
    5638:	4296      	cmp	r6, r2
    563a:	d1f9      	bne.n	5630 <memcpy+0x78>
    563c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    563e:	1e56      	subs	r6, r2, #1
    5640:	e7f5      	b.n	562e <memcpy+0x76>
    5642:	001a      	movs	r2, r3
    5644:	e7f0      	b.n	5628 <memcpy+0x70>
    5646:	46c0      	nop			; (mov r8, r8)

00005648 <strlen>:
    5648:	b510      	push	{r4, lr}
    564a:	0783      	lsls	r3, r0, #30
    564c:	d00a      	beq.n	5664 <strlen+0x1c>
    564e:	0003      	movs	r3, r0
    5650:	2103      	movs	r1, #3
    5652:	e002      	b.n	565a <strlen+0x12>
    5654:	3301      	adds	r3, #1
    5656:	420b      	tst	r3, r1
    5658:	d005      	beq.n	5666 <strlen+0x1e>
    565a:	781a      	ldrb	r2, [r3, #0]
    565c:	2a00      	cmp	r2, #0
    565e:	d1f9      	bne.n	5654 <strlen+0xc>
    5660:	1a18      	subs	r0, r3, r0
    5662:	bd10      	pop	{r4, pc}
    5664:	0003      	movs	r3, r0
    5666:	6819      	ldr	r1, [r3, #0]
    5668:	4a0c      	ldr	r2, [pc, #48]	; (569c <strlen+0x54>)
    566a:	4c0d      	ldr	r4, [pc, #52]	; (56a0 <strlen+0x58>)
    566c:	188a      	adds	r2, r1, r2
    566e:	438a      	bics	r2, r1
    5670:	4222      	tst	r2, r4
    5672:	d10f      	bne.n	5694 <strlen+0x4c>
    5674:	6859      	ldr	r1, [r3, #4]
    5676:	4a09      	ldr	r2, [pc, #36]	; (569c <strlen+0x54>)
    5678:	3304      	adds	r3, #4
    567a:	188a      	adds	r2, r1, r2
    567c:	438a      	bics	r2, r1
    567e:	4222      	tst	r2, r4
    5680:	d108      	bne.n	5694 <strlen+0x4c>
    5682:	6859      	ldr	r1, [r3, #4]
    5684:	4a05      	ldr	r2, [pc, #20]	; (569c <strlen+0x54>)
    5686:	3304      	adds	r3, #4
    5688:	188a      	adds	r2, r1, r2
    568a:	438a      	bics	r2, r1
    568c:	4222      	tst	r2, r4
    568e:	d0f1      	beq.n	5674 <strlen+0x2c>
    5690:	e000      	b.n	5694 <strlen+0x4c>
    5692:	3301      	adds	r3, #1
    5694:	781a      	ldrb	r2, [r3, #0]
    5696:	2a00      	cmp	r2, #0
    5698:	d1fb      	bne.n	5692 <strlen+0x4a>
    569a:	e7e1      	b.n	5660 <strlen+0x18>
    569c:	fefefeff 	.word	0xfefefeff
    56a0:	80808080 	.word	0x80808080

000056a4 <register_fini>:
    56a4:	4b03      	ldr	r3, [pc, #12]	; (56b4 <register_fini+0x10>)
    56a6:	b510      	push	{r4, lr}
    56a8:	2b00      	cmp	r3, #0
    56aa:	d002      	beq.n	56b2 <register_fini+0xe>
    56ac:	4802      	ldr	r0, [pc, #8]	; (56b8 <register_fini+0x14>)
    56ae:	f000 f805 	bl	56bc <atexit>
    56b2:	bd10      	pop	{r4, pc}
    56b4:	00000000 	.word	0x00000000
    56b8:	000056cd 	.word	0x000056cd

000056bc <atexit>:
    56bc:	b510      	push	{r4, lr}
    56be:	0001      	movs	r1, r0
    56c0:	2300      	movs	r3, #0
    56c2:	2200      	movs	r2, #0
    56c4:	2000      	movs	r0, #0
    56c6:	f000 f815 	bl	56f4 <__register_exitproc>
    56ca:	bd10      	pop	{r4, pc}

000056cc <__libc_fini_array>:
    56cc:	b570      	push	{r4, r5, r6, lr}
    56ce:	4c07      	ldr	r4, [pc, #28]	; (56ec <__libc_fini_array+0x20>)
    56d0:	4d07      	ldr	r5, [pc, #28]	; (56f0 <__libc_fini_array+0x24>)
    56d2:	1b64      	subs	r4, r4, r5
    56d4:	10a4      	asrs	r4, r4, #2
    56d6:	d005      	beq.n	56e4 <__libc_fini_array+0x18>
    56d8:	3c01      	subs	r4, #1
    56da:	00a3      	lsls	r3, r4, #2
    56dc:	58eb      	ldr	r3, [r5, r3]
    56de:	4798      	blx	r3
    56e0:	2c00      	cmp	r4, #0
    56e2:	d1f9      	bne.n	56d8 <__libc_fini_array+0xc>
    56e4:	f000 fab6 	bl	5c54 <_fini>
    56e8:	bd70      	pop	{r4, r5, r6, pc}
    56ea:	46c0      	nop			; (mov r8, r8)
    56ec:	00005c64 	.word	0x00005c64
    56f0:	00005c60 	.word	0x00005c60

000056f4 <__register_exitproc>:
    56f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56f6:	46d6      	mov	lr, sl
    56f8:	464f      	mov	r7, r9
    56fa:	4646      	mov	r6, r8
    56fc:	4698      	mov	r8, r3
    56fe:	4b22      	ldr	r3, [pc, #136]	; (5788 <__register_exitproc+0x94>)
    5700:	b5c0      	push	{r6, r7, lr}
    5702:	0006      	movs	r6, r0
    5704:	6818      	ldr	r0, [r3, #0]
    5706:	4699      	mov	r9, r3
    5708:	000f      	movs	r7, r1
    570a:	4692      	mov	sl, r2
    570c:	f7ff ff50 	bl	55b0 <__retarget_lock_acquire_recursive>
    5710:	4b1e      	ldr	r3, [pc, #120]	; (578c <__register_exitproc+0x98>)
    5712:	681d      	ldr	r5, [r3, #0]
    5714:	2d00      	cmp	r5, #0
    5716:	d02d      	beq.n	5774 <__register_exitproc+0x80>
    5718:	686c      	ldr	r4, [r5, #4]
    571a:	2c1f      	cmp	r4, #31
    571c:	dc2d      	bgt.n	577a <__register_exitproc+0x86>
    571e:	2e00      	cmp	r6, #0
    5720:	d10e      	bne.n	5740 <__register_exitproc+0x4c>
    5722:	1c63      	adds	r3, r4, #1
    5724:	606b      	str	r3, [r5, #4]
    5726:	464b      	mov	r3, r9
    5728:	3402      	adds	r4, #2
    572a:	00a4      	lsls	r4, r4, #2
    572c:	6818      	ldr	r0, [r3, #0]
    572e:	5167      	str	r7, [r4, r5]
    5730:	f7ff ff40 	bl	55b4 <__retarget_lock_release_recursive>
    5734:	2000      	movs	r0, #0
    5736:	bce0      	pop	{r5, r6, r7}
    5738:	46ba      	mov	sl, r7
    573a:	46b1      	mov	r9, r6
    573c:	46a8      	mov	r8, r5
    573e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5740:	2288      	movs	r2, #136	; 0x88
    5742:	4651      	mov	r1, sl
    5744:	0028      	movs	r0, r5
    5746:	00a3      	lsls	r3, r4, #2
    5748:	18eb      	adds	r3, r5, r3
    574a:	5099      	str	r1, [r3, r2]
    574c:	3a87      	subs	r2, #135	; 0x87
    574e:	40a2      	lsls	r2, r4
    5750:	3089      	adds	r0, #137	; 0x89
    5752:	30ff      	adds	r0, #255	; 0xff
    5754:	6801      	ldr	r1, [r0, #0]
    5756:	4311      	orrs	r1, r2
    5758:	6001      	str	r1, [r0, #0]
    575a:	2184      	movs	r1, #132	; 0x84
    575c:	4640      	mov	r0, r8
    575e:	0049      	lsls	r1, r1, #1
    5760:	5058      	str	r0, [r3, r1]
    5762:	2e02      	cmp	r6, #2
    5764:	d1dd      	bne.n	5722 <__register_exitproc+0x2e>
    5766:	0029      	movs	r1, r5
    5768:	318d      	adds	r1, #141	; 0x8d
    576a:	31ff      	adds	r1, #255	; 0xff
    576c:	680b      	ldr	r3, [r1, #0]
    576e:	4313      	orrs	r3, r2
    5770:	600b      	str	r3, [r1, #0]
    5772:	e7d6      	b.n	5722 <__register_exitproc+0x2e>
    5774:	4d06      	ldr	r5, [pc, #24]	; (5790 <__register_exitproc+0x9c>)
    5776:	601d      	str	r5, [r3, #0]
    5778:	e7ce      	b.n	5718 <__register_exitproc+0x24>
    577a:	464b      	mov	r3, r9
    577c:	6818      	ldr	r0, [r3, #0]
    577e:	f7ff ff19 	bl	55b4 <__retarget_lock_release_recursive>
    5782:	2001      	movs	r0, #1
    5784:	4240      	negs	r0, r0
    5786:	e7d6      	b.n	5736 <__register_exitproc+0x42>
    5788:	200000b8 	.word	0x200000b8
    578c:	200006f8 	.word	0x200006f8
    5790:	200006fc 	.word	0x200006fc
    5794:	000004a0 	.word	0x000004a0
    5798:	00000468 	.word	0x00000468
    579c:	00000470 	.word	0x00000470
    57a0:	00000478 	.word	0x00000478
    57a4:	00000488 	.word	0x00000488
    57a8:	00000480 	.word	0x00000480
    57ac:	00000490 	.word	0x00000490
    57b0:	00000498 	.word	0x00000498
    57b4:	41564e49 	.word	0x41564e49
    57b8:	0044494c 	.word	0x0044494c
    57bc:	20776152 	.word	0x20776152
    57c0:	69442058 	.word	0x69442058
    57c4:	74636572 	.word	0x74636572
    57c8:	206e6f69 	.word	0x206e6f69
    57cc:	65636341 	.word	0x65636341
    57d0:	6172656c 	.word	0x6172656c
    57d4:	6e6f6974 	.word	0x6e6f6974
    57d8:	00000000 	.word	0x00000000
    57dc:	20776152 	.word	0x20776152
    57e0:	69442059 	.word	0x69442059
    57e4:	74636572 	.word	0x74636572
    57e8:	206e6f69 	.word	0x206e6f69
    57ec:	65636341 	.word	0x65636341
    57f0:	6172656c 	.word	0x6172656c
    57f4:	6e6f6974 	.word	0x6e6f6974
    57f8:	00000000 	.word	0x00000000
    57fc:	20776152 	.word	0x20776152
    5800:	6944205a 	.word	0x6944205a
    5804:	74636572 	.word	0x74636572
    5808:	206e6f69 	.word	0x206e6f69
    580c:	65636341 	.word	0x65636341
    5810:	6172656c 	.word	0x6172656c
    5814:	6e6f6974 	.word	0x6e6f6974
    5818:	00000000 	.word	0x00000000
    581c:	20776152 	.word	0x20776152
    5820:	78412058 	.word	0x78412058
    5824:	41207369 	.word	0x41207369
    5828:	6c75676e 	.word	0x6c75676e
    582c:	56207261 	.word	0x56207261
    5830:	636f6c65 	.word	0x636f6c65
    5834:	00797469 	.word	0x00797469
    5838:	20776152 	.word	0x20776152
    583c:	78412059 	.word	0x78412059
    5840:	41207369 	.word	0x41207369
    5844:	6c75676e 	.word	0x6c75676e
    5848:	56207261 	.word	0x56207261
    584c:	636f6c65 	.word	0x636f6c65
    5850:	00797469 	.word	0x00797469
    5854:	20776152 	.word	0x20776152
    5858:	7841205a 	.word	0x7841205a
    585c:	41207369 	.word	0x41207369
    5860:	6c75676e 	.word	0x6c75676e
    5864:	56207261 	.word	0x56207261
    5868:	636f6c65 	.word	0x636f6c65
    586c:	00797469 	.word	0x00797469
    5870:	696c6143 	.word	0x696c6143
    5874:	74617262 	.word	0x74617262
    5878:	58206465 	.word	0x58206465
    587c:	72694420 	.word	0x72694420
    5880:	69746365 	.word	0x69746365
    5884:	41206e6f 	.word	0x41206e6f
    5888:	6c656363 	.word	0x6c656363
    588c:	74617265 	.word	0x74617265
    5890:	006e6f69 	.word	0x006e6f69
    5894:	696c6143 	.word	0x696c6143
    5898:	74617262 	.word	0x74617262
    589c:	59206465 	.word	0x59206465
    58a0:	72694420 	.word	0x72694420
    58a4:	69746365 	.word	0x69746365
    58a8:	41206e6f 	.word	0x41206e6f
    58ac:	6c656363 	.word	0x6c656363
    58b0:	74617265 	.word	0x74617265
    58b4:	006e6f69 	.word	0x006e6f69
    58b8:	696c6143 	.word	0x696c6143
    58bc:	74617262 	.word	0x74617262
    58c0:	5a206465 	.word	0x5a206465
    58c4:	72694420 	.word	0x72694420
    58c8:	69746365 	.word	0x69746365
    58cc:	41206e6f 	.word	0x41206e6f
    58d0:	6c656363 	.word	0x6c656363
    58d4:	74617265 	.word	0x74617265
    58d8:	006e6f69 	.word	0x006e6f69
    58dc:	696c6143 	.word	0x696c6143
    58e0:	74617262 	.word	0x74617262
    58e4:	58206465 	.word	0x58206465
    58e8:	69784120 	.word	0x69784120
    58ec:	6e412073 	.word	0x6e412073
    58f0:	616c7567 	.word	0x616c7567
    58f4:	65562072 	.word	0x65562072
    58f8:	69636f6c 	.word	0x69636f6c
    58fc:	00007974 	.word	0x00007974
    5900:	696c6143 	.word	0x696c6143
    5904:	74617262 	.word	0x74617262
    5908:	59206465 	.word	0x59206465
    590c:	69784120 	.word	0x69784120
    5910:	6e412073 	.word	0x6e412073
    5914:	616c7567 	.word	0x616c7567
    5918:	65562072 	.word	0x65562072
    591c:	69636f6c 	.word	0x69636f6c
    5920:	00007974 	.word	0x00007974
    5924:	696c6143 	.word	0x696c6143
    5928:	74617262 	.word	0x74617262
    592c:	5a206465 	.word	0x5a206465
    5930:	69784120 	.word	0x69784120
    5934:	6e412073 	.word	0x6e412073
    5938:	616c7567 	.word	0x616c7567
    593c:	65562072 	.word	0x65562072
    5940:	69636f6c 	.word	0x69636f6c
    5944:	00007974 	.word	0x00007974
    5948:	75626544 	.word	0x75626544
    594c:	6e492067 	.word	0x6e492067
    5950:	00312074 	.word	0x00312074
    5954:	52504545 	.word	0x52504545
    5958:	4c204d4f 	.word	0x4c204d4f
    595c:	756f7961 	.word	0x756f7961
    5960:	61482074 	.word	0x61482074
    5964:	00006873 	.word	0x00006873
    5968:	65776f50 	.word	0x65776f50
    596c:	79432072 	.word	0x79432072
    5970:	73656c63 	.word	0x73656c63
    5974:	00000000 	.word	0x00000000
    5978:	61736944 	.word	0x61736944
    597c:	20656c62 	.word	0x20656c62
    5980:	7a7a7542 	.word	0x7a7a7542
    5984:	00007265 	.word	0x00007265
    5988:	61736944 	.word	0x61736944
    598c:	20656c62 	.word	0x20656c62
    5990:	0044454c 	.word	0x0044454c
    5994:	61656c43 	.word	0x61656c43
    5998:	6853206e 	.word	0x6853206e
    599c:	6f647475 	.word	0x6f647475
    59a0:	00006e77 	.word	0x00006e77
    59a4:	206e7552 	.word	0x206e7552
    59a8:	6976614e 	.word	0x6976614e
    59ac:	69746167 	.word	0x69746167
    59b0:	50206e6f 	.word	0x50206e6f
    59b4:	65636f72 	.word	0x65636f72
    59b8:	00007373 	.word	0x00007373
    59bc:	206e7552 	.word	0x206e7552
    59c0:	746e6f43 	.word	0x746e6f43
    59c4:	206c6f72 	.word	0x206c6f72
    59c8:	636f7250 	.word	0x636f7250
    59cc:	00737365 	.word	0x00737365
    59d0:	206e7552 	.word	0x206e7552
    59d4:	64697547 	.word	0x64697547
    59d8:	65636e61 	.word	0x65636e61
    59dc:	6f725020 	.word	0x6f725020
    59e0:	73736563 	.word	0x73736563
    59e4:	00000000 	.word	0x00000000
    59e8:	75626544 	.word	0x75626544
    59ec:	6f422067 	.word	0x6f422067
    59f0:	31206c6f 	.word	0x31206c6f
    59f4:	00000000 	.word	0x00000000
    59f8:	75626544 	.word	0x75626544
    59fc:	6f422067 	.word	0x6f422067
    5a00:	32206c6f 	.word	0x32206c6f
    5a04:	00000000 	.word	0x00000000
    5a08:	40000000 	.word	0x40000000
    5a0c:	00000001 	.word	0x00000001
    5a10:	00000e0a 	.word	0x00000e0a
    5a14:	00000e16 	.word	0x00000e16
    5a18:	00000e24 	.word	0x00000e24
    5a1c:	00000e32 	.word	0x00000e32
    5a20:	00000e40 	.word	0x00000e40
    5a24:	00000e8e 	.word	0x00000e8e
    5a28:	00000e96 	.word	0x00000e96
    5a2c:	00000ea0 	.word	0x00000ea0
    5a30:	00000eaa 	.word	0x00000eaa
    5a34:	00000eb4 	.word	0x00000eb4
    5a38:	00000ef2 	.word	0x00000ef2
    5a3c:	00000efe 	.word	0x00000efe
    5a40:	00000f0c 	.word	0x00000f0c
    5a44:	00000f1a 	.word	0x00000f1a
    5a48:	00000f28 	.word	0x00000f28
    5a4c:	00000f76 	.word	0x00000f76
    5a50:	00000f7e 	.word	0x00000f7e
    5a54:	00000f88 	.word	0x00000f88
    5a58:	00000f92 	.word	0x00000f92
    5a5c:	00000f9c 	.word	0x00000f9c
    5a60:	00000fd6 	.word	0x00000fd6
    5a64:	00000fde 	.word	0x00000fde
    5a68:	00000fee 	.word	0x00000fee
    5a6c:	00000ffe 	.word	0x00000ffe
    5a70:	0000100e 	.word	0x0000100e
    5a74:	0000107e 	.word	0x0000107e
    5a78:	00001056 	.word	0x00001056
    5a7c:	00001060 	.word	0x00001060
    5a80:	0000106a 	.word	0x0000106a
    5a84:	00001074 	.word	0x00001074

00005a88 <uart1_descriptor>:
    5a88:	02010302 00000002                       ........

00005a90 <uart2_descriptor>:
    5a90:	04030504 00000002                       ........

00005a98 <uart3_descriptor>:
    5a98:	0a090706 00000002                       ........

00005aa0 <uart4_descriptor>:
    5aa0:	0c0b0908 00000002 80000000 00000001     ................

00005ab0 <dma_spi_desc>:
    5ab0:	08070100                                 .....

00005ab5 <zero>:
    5ab5:	40000000 64000020 44000020 48000020     ...@ ..d ..D ..H
    5ac5:	4c000020 50000020 54000020 5a000020      ..L ..P ..T ..Z
    5ad5:	a0000020 b4000026 7a000026 b4000027      ...&...&..z'...
    5ae5:	7a000026 c0000027 cc000026 7a000026     &..z'...&...&..z
    5af5:	1c000027 30000027 7a000027 5a000027     '...'..0'..z'..Z
    5b05:	30000027 34333231 38373635 43424139     '..0123456789ABC
    5b15:	48474644 4d4c4b4a 5251504e 57565453     DFGHJKLMNPQRSTVW
    5b25:	005a5958 46000000 656c6e69 6c422079     XYZ....Finley Bl
    5b35:	656e6961 47000000 0032434e               aine...GNC2....

00005b44 <language_string>:
    5b44:	04090304                                ....

00005b48 <device_descriptor>:
    5b48:	02000112 400102ef 000e1209 02010200     .......@........
    5b58:	                                         ..

00005b5a <usb_num_endpoints>:
    5b5a:	2e2e0003 2d2d2d2e 002e2e2e 335a0000     .....---......Z3
    5b6a:	33ec0000 33fa0000 34080000 34160000     ...3...3...4...4
    5b7a:	34240000 33600000 00000000 00000000     ..$4..`3........
    5b8a:	00000000 36010000 00060000               .......6......

00005b98 <time_ticks_us_mult>:
    5b98:	00000030                                0...

00005b9c <time_ticks_ms_mult>:
    5b9c:	0000bb80                                ....

00005ba0 <time_ticks_s_mult>:
    5ba0:	02dc6c00                                .l..

00005ba4 <CRC8_LUT_L>:
    5ba4:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

00005bb4 <CRC8_LUT_H>:
    5bb4:	90e07000 5727b7c7 1969f989 deae3e4e     .p....'W..i.N>..
    5bc4:	00004b8a 00004aba 00004ad2 00004af0     .K...J...J...J..
    5bd4:	00004ad2 00004b34 00004ad2 00004af0     .J..4K...J...J..
    5be4:	00004aba 00004aba 00004b34 00004af0     .J...J..4K...J..
    5bf4:	00004ada 00004ada 00004ada 00004b3e     .J...J...J..>K..
    5c04:	00004aba 00004aba 00004ad2 00004bc8     .J...J...J...K..
    5c14:	00004ad2 00004b34 00004ad2 00004bc8     .J..4K...J...K..
    5c24:	00004aba 00004aba 00004b34 00004bc8     .J...J..4K...K..
    5c34:	00004ada 00004ada 00004ada              .J...J...J..

00005c40 <_init>:
    5c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c42:	46c0      	nop			; (mov r8, r8)
    5c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c46:	bc08      	pop	{r3}
    5c48:	469e      	mov	lr, r3
    5c4a:	4770      	bx	lr

00005c4c <__init_array_start>:
    5c4c:	000056a5 	.word	0x000056a5

00005c50 <__frame_dummy_init_array_entry>:
    5c50:	0000012d                                -...

00005c54 <_fini>:
    5c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c56:	46c0      	nop			; (mov r8, r8)
    5c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c5a:	bc08      	pop	{r3}
    5c5c:	469e      	mov	lr, r3
    5c5e:	4770      	bx	lr

00005c60 <__do_global_dtors_aux_fini_array_entry>:
    5c60:	0101 0000                                   ....
