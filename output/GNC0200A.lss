
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a84  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  20000000  00005a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007cc  200000b0  00005b40  000200b0  2**4
                  ALLOC
  3 .stack        00002004  2000087c  0000630c  000200b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c50b  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000656f  00000000  00000000  0003c62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 00007403  00000000  00000000  00042b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000e20  00000000  00000000  00049fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 00001051  00000000  00000000  0004adc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00009fba  00000000  00000000  0004be19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0001c185  00000000  00000000  00055dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b5b68  00000000  00000000  00071f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001e98  00000000  00000000  00127ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  00129958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
    eeprom_read_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}

bool save_global(Global_Variable_IDs id) {
       0:	80 28 00 20 55 01 00 00 51 01 00 00 51 01 00 00     .(. U...Q...Q...
	...
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
    if (!get_address_from_id(type, id, &address, &size)) return false;
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...
    EEPROM_Request request;
    eeprom_write_request(&request, eeprom_address, address, size);
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
    eeprom_wait_until_done(&request);
    return true;
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      5c:	81 41 00 00 51 01 00 00 51 01 00 00 51 01 00 00     .A..Q...Q...Q...
	// send adc read command
	spi_command(desc->sercom, BARO_ADC_READ);
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
	uint8_t data1 = spi_command(desc->sercom, 0);
	uint8_t data2 = spi_command(desc->sercom, 0);
      6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      8c:	e1 2f 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ./..Q...Q...Q...
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	00005a84 	.word	0x00005a84
      d0:	00005a84 	.word	0x00005a84
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	00005a84 	.word	0x00005a84
      f8:	00005a84 	.word	0x00005a84
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	200000b0 	.word	0x200000b0
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	00005a84 	.word	0x00005a84

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	200000b4 	.word	0x200000b4
     14c:	00005a84 	.word	0x00005a84

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	00005a84 	.word	0x00005a84
     1a4:	20000000 	.word	0x20000000
     1a8:	200000b0 	.word	0x200000b0
     1ac:	200000b0 	.word	0x200000b0
     1b0:	2000087c 	.word	0x2000087c
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	000053cd 	.word	0x000053cd
     1c4:	00000000 	.word	0x00000000
     1c8:	00002f6d 	.word	0x00002f6d

000001cc <getGlobalHash>:
uint8_t rxframe[GNCLINK_FRAME_TOTAL_LENGTH];
uint8_t txframe[GNCLINK_FRAME_TOTAL_LENGTH];

extern void SOS();

bool getGlobalHash() {
     1cc:	b510      	push	{r4, lr}
    uint32_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     1ce:	4c06      	ldr	r4, [pc, #24]	; (1e8 <getGlobalHash+0x1c>)
     1d0:	0020      	movs	r0, r4
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <getGlobalHash+0x20>)
     1d4:	4798      	blx	r3
    *payload = __GLOBAL_HASH;
     1d6:	4b06      	ldr	r3, [pc, #24]	; (1f0 <getGlobalHash+0x24>)
     1d8:	6003      	str	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetGlobalHash, GNClink_PacketFlags_Response, 4)) return false;
     1da:	2304      	movs	r3, #4
     1dc:	2202      	movs	r2, #2
     1de:	2101      	movs	r1, #1
     1e0:	0020      	movs	r0, r4
     1e2:	4c04      	ldr	r4, [pc, #16]	; (1f4 <getGlobalHash+0x28>)
     1e4:	47a0      	blx	r4
    return true;
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	200000cc 	.word	0x200000cc
     1ec:	00004289 	.word	0x00004289
     1f0:	6a8dc07e 	.word	0x6a8dc07e
     1f4:	0000428d 	.word	0x0000428d

000001f8 <getValueList>:

bool getValueList() {
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46c6      	mov	lr, r8
     1fc:	b500      	push	{lr}
     1fe:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     200:	4d1a      	ldr	r5, [pc, #104]	; (26c <getValueList+0x74>)
     202:	0028      	movs	r0, r5
     204:	3040      	adds	r0, #64	; 0x40
     206:	4c1a      	ldr	r4, [pc, #104]	; (270 <getValueList+0x78>)
     208:	47a0      	blx	r4
     20a:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     20c:	0028      	movs	r0, r5
     20e:	47a0      	blx	r4
     210:	4680      	mov	r8, r0
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     212:	783e      	ldrb	r6, [r7, #0]
     214:	b2f6      	uxtb	r6, r6
    if (IDCount > (GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1) / 2) {
     216:	2e1d      	cmp	r6, #29
     218:	d825      	bhi.n	266 <getValueList+0x6e>
        // too many IDs, do something...
        return false;
    }

    int payloadIndex = 0;
    for (int index = 0; index < IDCount; ++index) {
     21a:	2400      	movs	r4, #0
    int payloadIndex = 0;
     21c:	2500      	movs	r5, #0
     21e:	e007      	b.n	230 <getValueList+0x38>
            // no more space, do something...
            return false;
        }

        // copy value to payload
        memcpy(&txpayload[payloadIndex], address, size);
     220:	4643      	mov	r3, r8
     222:	1958      	adds	r0, r3, r5
     224:	9900      	ldr	r1, [sp, #0]
     226:	4b13      	ldr	r3, [pc, #76]	; (274 <getValueList+0x7c>)
     228:	4798      	blx	r3
        payloadIndex += size;
     22a:	9b01      	ldr	r3, [sp, #4]
     22c:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     22e:	3401      	adds	r4, #1
     230:	42b4      	cmp	r4, r6
     232:	da11      	bge.n	258 <getValueList+0x60>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     234:	0063      	lsls	r3, r4, #1
     236:	18fb      	adds	r3, r7, r3
     238:	7858      	ldrb	r0, [r3, #1]
        if (!get_global_address_size(ID, &address, &size)) {
     23a:	aa01      	add	r2, sp, #4
     23c:	4669      	mov	r1, sp
     23e:	4b0e      	ldr	r3, [pc, #56]	; (278 <getValueList+0x80>)
     240:	4798      	blx	r3
     242:	2800      	cmp	r0, #0
     244:	d003      	beq.n	24e <getValueList+0x56>
        if (payloadIndex + size > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     246:	9a01      	ldr	r2, [sp, #4]
     248:	1953      	adds	r3, r2, r5
     24a:	2b3b      	cmp	r3, #59	; 0x3b
     24c:	d9e8      	bls.n	220 <getValueList+0x28>
            return false;
     24e:	2000      	movs	r0, #0
    }

    // construct response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
    return true;
}
     250:	b002      	add	sp, #8
     252:	bc80      	pop	{r7}
     254:	46b8      	mov	r8, r7
     256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
     258:	4804      	ldr	r0, [pc, #16]	; (26c <getValueList+0x74>)
     25a:	002b      	movs	r3, r5
     25c:	2202      	movs	r2, #2
     25e:	2102      	movs	r1, #2
     260:	4c06      	ldr	r4, [pc, #24]	; (27c <getValueList+0x84>)
     262:	47a0      	blx	r4
     264:	e7f4      	b.n	250 <getValueList+0x58>
        return false;
     266:	2000      	movs	r0, #0
     268:	e7f2      	b.n	250 <getValueList+0x58>
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	200000cc 	.word	0x200000cc
     270:	00004289 	.word	0x00004289
     274:	0000541d 	.word	0x0000541d
     278:	000006b5 	.word	0x000006b5
     27c:	0000428d 	.word	0x0000428d

00000280 <setValueList>:

bool setValueList() {
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	46c6      	mov	lr, r8
     284:	b500      	push	{lr}
     286:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     288:	4d18      	ldr	r5, [pc, #96]	; (2ec <setValueList+0x6c>)
     28a:	0028      	movs	r0, r5
     28c:	3040      	adds	r0, #64	; 0x40
     28e:	4c18      	ldr	r4, [pc, #96]	; (2f0 <setValueList+0x70>)
     290:	47a0      	blx	r4
     292:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     294:	0028      	movs	r0, r5
     296:	47a0      	blx	r4

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     298:	783b      	ldrb	r3, [r7, #0]
     29a:	b2db      	uxtb	r3, r3
     29c:	4698      	mov	r8, r3

    int payloadIndex = 1;
    for (int index = 0; index < IDCount; ++index) {
     29e:	2600      	movs	r6, #0
    int payloadIndex = 1;
     2a0:	2501      	movs	r5, #1
    for (int index = 0; index < IDCount; ++index) {
     2a2:	e008      	b.n	2b6 <setValueList+0x36>
            // Buffer overrun, do something...
            return false;
        }

        // copy value from payload to globals
        memcpy(address, &rxpayload[payloadIndex + 2], size);
     2a4:	3402      	adds	r4, #2
     2a6:	1939      	adds	r1, r7, r4
     2a8:	9800      	ldr	r0, [sp, #0]
     2aa:	4b12      	ldr	r3, [pc, #72]	; (2f4 <setValueList+0x74>)
     2ac:	4798      	blx	r3
        payloadIndex += size + 2;
     2ae:	9b01      	ldr	r3, [sp, #4]
     2b0:	3302      	adds	r3, #2
     2b2:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     2b4:	3601      	adds	r6, #1
     2b6:	4546      	cmp	r6, r8
     2b8:	da11      	bge.n	2de <setValueList+0x5e>
        Global_Variable_IDs ID = (Global_Variable_IDs)*((uint16_t*)(rxpayload + payloadIndex));
     2ba:	002c      	movs	r4, r5
     2bc:	5d78      	ldrb	r0, [r7, r5]
        if (!get_global_address_size(ID, &address, &size)) {
     2be:	aa01      	add	r2, sp, #4
     2c0:	4669      	mov	r1, sp
     2c2:	4b0d      	ldr	r3, [pc, #52]	; (2f8 <setValueList+0x78>)
     2c4:	4798      	blx	r3
     2c6:	2800      	cmp	r0, #0
     2c8:	d004      	beq.n	2d4 <setValueList+0x54>
        if (payloadIndex + size + 2 > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     2ca:	9a01      	ldr	r2, [sp, #4]
     2cc:	1953      	adds	r3, r2, r5
     2ce:	3302      	adds	r3, #2
     2d0:	2b3b      	cmp	r3, #59	; 0x3b
     2d2:	d9e7      	bls.n	2a4 <setValueList+0x24>
            return false;
     2d4:	2000      	movs	r0, #0
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SetValueList, GNClink_PacketFlags_Response, 0)) return false;
    return true;
}
     2d6:	b002      	add	sp, #8
     2d8:	bc80      	pop	{r7}
     2da:	46b8      	mov	r8, r7
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SetValueList, GNClink_PacketFlags_Response, 0)) return false;
     2de:	4803      	ldr	r0, [pc, #12]	; (2ec <setValueList+0x6c>)
     2e0:	2300      	movs	r3, #0
     2e2:	2202      	movs	r2, #2
     2e4:	2103      	movs	r1, #3
     2e6:	4c05      	ldr	r4, [pc, #20]	; (2fc <setValueList+0x7c>)
     2e8:	47a0      	blx	r4
     2ea:	e7f4      	b.n	2d6 <setValueList+0x56>
     2ec:	200000cc 	.word	0x200000cc
     2f0:	00004289 	.word	0x00004289
     2f4:	0000541d 	.word	0x0000541d
     2f8:	000006b5 	.word	0x000006b5
     2fc:	0000428d 	.word	0x0000428d

00000300 <getValueCount>:

bool getValueCount() {
     300:	b510      	push	{r4, lr}
    uint16_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     302:	4c06      	ldr	r4, [pc, #24]	; (31c <getValueCount+0x1c>)
     304:	0020      	movs	r0, r4
     306:	4b06      	ldr	r3, [pc, #24]	; (320 <getValueCount+0x20>)
     308:	4798      	blx	r3
    *payload = __GLOBAL_ID_END - __GLOBAL_ID_START;
     30a:	2314      	movs	r3, #20
     30c:	8003      	strh	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueCount, GNClink_PacketFlags_Response, 2)) return false;
     30e:	3b12      	subs	r3, #18
     310:	2202      	movs	r2, #2
     312:	2106      	movs	r1, #6
     314:	0020      	movs	r0, r4
     316:	4c03      	ldr	r4, [pc, #12]	; (324 <getValueCount+0x24>)
     318:	47a0      	blx	r4
    return true;
}
     31a:	bd10      	pop	{r4, pc}
     31c:	200000cc 	.word	0x200000cc
     320:	00004289 	.word	0x00004289
     324:	0000428d 	.word	0x0000428d

00000328 <getValueName>:

bool getValueName() {
     328:	b570      	push	{r4, r5, r6, lr}
     32a:	b082      	sub	sp, #8
    uint16_t* rxpayload = (uint16_t*)GNClink_Get_Packet_Payload_Pointer(rxpacket);
     32c:	4e14      	ldr	r6, [pc, #80]	; (380 <getValueName+0x58>)
     32e:	0030      	movs	r0, r6
     330:	3040      	adds	r0, #64	; 0x40
     332:	4d14      	ldr	r5, [pc, #80]	; (384 <getValueName+0x5c>)
     334:	47a8      	blx	r5
     336:	0004      	movs	r4, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     338:	0030      	movs	r0, r6
     33a:	47a8      	blx	r5
     33c:	0005      	movs	r5, r0

    // get variable ID
    uint16_t id = *rxpayload;
     33e:	8824      	ldrh	r4, [r4, #0]

    int length = 0;
     340:	2300      	movs	r3, #0
     342:	9301      	str	r3, [sp, #4]

    __Global_Variable_Types type;
    if (!get_global_type_from_id(id, &type)) return false;
     344:	b2e4      	uxtb	r4, r4
     346:	466b      	mov	r3, sp
     348:	1cd9      	adds	r1, r3, #3
     34a:	0020      	movs	r0, r4
     34c:	4b0e      	ldr	r3, [pc, #56]	; (388 <getValueName+0x60>)
     34e:	4798      	blx	r3
     350:	2800      	cmp	r0, #0
     352:	d101      	bne.n	358 <getValueName+0x30>

    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;

    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
    return true;
}
     354:	b002      	add	sp, #8
     356:	bd70      	pop	{r4, r5, r6, pc}
    *txpayload = (uint8_t*)type;
     358:	466b      	mov	r3, sp
     35a:	3303      	adds	r3, #3
     35c:	781b      	ldrb	r3, [r3, #0]
     35e:	702b      	strb	r3, [r5, #0]
    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;
     360:	1c69      	adds	r1, r5, #1
     362:	233a      	movs	r3, #58	; 0x3a
     364:	aa01      	add	r2, sp, #4
     366:	0020      	movs	r0, r4
     368:	4c08      	ldr	r4, [pc, #32]	; (38c <getValueName+0x64>)
     36a:	47a0      	blx	r4
     36c:	2800      	cmp	r0, #0
     36e:	d0f1      	beq.n	354 <getValueName+0x2c>
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
     370:	9b01      	ldr	r3, [sp, #4]
     372:	3301      	adds	r3, #1
     374:	4802      	ldr	r0, [pc, #8]	; (380 <getValueName+0x58>)
     376:	2202      	movs	r2, #2
     378:	2107      	movs	r1, #7
     37a:	4c05      	ldr	r4, [pc, #20]	; (390 <getValueName+0x68>)
     37c:	47a0      	blx	r4
     37e:	e7e9      	b.n	354 <getValueName+0x2c>
     380:	200000cc 	.word	0x200000cc
     384:	00004289 	.word	0x00004289
     388:	00000679 	.word	0x00000679
     38c:	000006ed 	.word	0x000006ed
     390:	0000428d 	.word	0x0000428d

00000394 <evaluatePacket>:

bool evaluatePacket() {
     394:	b510      	push	{r4, lr}
    // check packet
    if (!GNClink_Check_Packet(rxpacket)) {
     396:	4817      	ldr	r0, [pc, #92]	; (3f4 <evaluatePacket+0x60>)
     398:	4b17      	ldr	r3, [pc, #92]	; (3f8 <evaluatePacket+0x64>)
     39a:	4798      	blx	r3
     39c:	1e04      	subs	r4, r0, #0
     39e:	d006      	beq.n	3ae <evaluatePacket+0x1a>
    // reset_process(&bz);
    // bz_count = (int)(*GNClink_Get_Packet_Payload_Pointer(rxpacket));
    // dispatch_process(&bz);

    // check packet is not response packet
    GNClink_PacketFlags flags = GNClink_Get_Packet_Flags(rxpacket);
     3a0:	4814      	ldr	r0, [pc, #80]	; (3f4 <evaluatePacket+0x60>)
     3a2:	4b16      	ldr	r3, [pc, #88]	; (3fc <evaluatePacket+0x68>)
     3a4:	4798      	blx	r3
    if (flags & GNClink_PacketFlags_Response) return false;
     3a6:	0780      	lsls	r0, r0, #30
     3a8:	d505      	bpl.n	3b6 <evaluatePacket+0x22>
     3aa:	2400      	movs	r4, #0
     3ac:	e001      	b.n	3b2 <evaluatePacket+0x1e>
        SOS();
     3ae:	4b14      	ldr	r3, [pc, #80]	; (400 <evaluatePacket+0x6c>)
     3b0:	4798      	blx	r3
        default:
        return false;
    }

    return false;
}
     3b2:	0020      	movs	r0, r4
     3b4:	bd10      	pop	{r4, pc}
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     3b6:	480f      	ldr	r0, [pc, #60]	; (3f4 <evaluatePacket+0x60>)
     3b8:	4b12      	ldr	r3, [pc, #72]	; (404 <evaluatePacket+0x70>)
     3ba:	4798      	blx	r3
     3bc:	2807      	cmp	r0, #7
     3be:	d817      	bhi.n	3f0 <evaluatePacket+0x5c>
     3c0:	0080      	lsls	r0, r0, #2
     3c2:	4b11      	ldr	r3, [pc, #68]	; (408 <evaluatePacket+0x74>)
     3c4:	581b      	ldr	r3, [r3, r0]
     3c6:	469f      	mov	pc, r3
        return getGlobalHash();
     3c8:	4b10      	ldr	r3, [pc, #64]	; (40c <evaluatePacket+0x78>)
     3ca:	4798      	blx	r3
     3cc:	0004      	movs	r4, r0
     3ce:	e7f0      	b.n	3b2 <evaluatePacket+0x1e>
        return getValueList();
     3d0:	4b0f      	ldr	r3, [pc, #60]	; (410 <evaluatePacket+0x7c>)
     3d2:	4798      	blx	r3
     3d4:	0004      	movs	r4, r0
     3d6:	e7ec      	b.n	3b2 <evaluatePacket+0x1e>
        return setValueList();
     3d8:	4b0e      	ldr	r3, [pc, #56]	; (414 <evaluatePacket+0x80>)
     3da:	4798      	blx	r3
     3dc:	0004      	movs	r4, r0
     3de:	e7e8      	b.n	3b2 <evaluatePacket+0x1e>
        return getValueCount();
     3e0:	4b0d      	ldr	r3, [pc, #52]	; (418 <evaluatePacket+0x84>)
     3e2:	4798      	blx	r3
     3e4:	0004      	movs	r4, r0
     3e6:	e7e4      	b.n	3b2 <evaluatePacket+0x1e>
        return getValueName();
     3e8:	4b0c      	ldr	r3, [pc, #48]	; (41c <evaluatePacket+0x88>)
     3ea:	4798      	blx	r3
     3ec:	0004      	movs	r4, r0
     3ee:	e7e0      	b.n	3b2 <evaluatePacket+0x1e>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     3f0:	2400      	movs	r4, #0
     3f2:	e7de      	b.n	3b2 <evaluatePacket+0x1e>
     3f4:	2000010c 	.word	0x2000010c
     3f8:	000042b9 	.word	0x000042b9
     3fc:	000042ed 	.word	0x000042ed
     400:	00002f49 	.word	0x00002f49
     404:	000042e9 	.word	0x000042e9
     408:	000055f8 	.word	0x000055f8
     40c:	000001cd 	.word	0x000001cd
     410:	000001f9 	.word	0x000001f9
     414:	00000281 	.word	0x00000281
     418:	00000301 	.word	0x00000301
     41c:	00000329 	.word	0x00000329

00000420 <get_packet>:

// returns false if resend is being requested
bool get_packet() {
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b083      	sub	sp, #12
    // set previous received packets to zero to avoid any propagation
    memset(rxpacket, 0, sizeof(rxpacket));
     424:	4834      	ldr	r0, [pc, #208]	; (4f8 <get_packet+0xd8>)
     426:	2240      	movs	r2, #64	; 0x40
     428:	2100      	movs	r1, #0
     42a:	4c34      	ldr	r4, [pc, #208]	; (4fc <get_packet+0xdc>)
     42c:	47a0      	blx	r4
    memset(rxframe, 0, sizeof(rxframe));
     42e:	4834      	ldr	r0, [pc, #208]	; (500 <get_packet+0xe0>)
     430:	2214      	movs	r2, #20
     432:	2100      	movs	r1, #0
     434:	47a0      	blx	r4

    bool receivedFrames[GNCLINK_MAX_FRAMES_PER_PACKET];
    for (int i = 0; i < GNCLINK_MAX_FRAMES_PER_PACKET; ++i) receivedFrames[i] = false;
     436:	2300      	movs	r3, #0
     438:	e003      	b.n	442 <get_packet+0x22>
     43a:	aa01      	add	r2, sp, #4
     43c:	2100      	movs	r1, #0
     43e:	54d1      	strb	r1, [r2, r3]
     440:	3301      	adds	r3, #1
     442:	2b03      	cmp	r3, #3
     444:	ddf9      	ble.n	43a <get_packet+0x1a>
     446:	e02a      	b.n	49e <get_packet+0x7e>
            continue;
        }

        // check if frame is requesting resend
        if (GNClink_Frame_RequestResend(rxframe)) {
            return false;
     448:	2500      	movs	r5, #0
            // packet fully received
            else break;
        }
    }
    return true;
}
     44a:	0028      	movs	r0, r5
     44c:	b003      	add	sp, #12
     44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     450:	3401      	adds	r4, #1
     452:	482b      	ldr	r0, [pc, #172]	; (500 <get_packet+0xe0>)
     454:	4b2b      	ldr	r3, [pc, #172]	; (504 <get_packet+0xe4>)
     456:	4798      	blx	r3
     458:	42a0      	cmp	r0, r4
     45a:	dd07      	ble.n	46c <get_packet+0x4c>
                if (!receivedFrames[i]) payload->resendIndexes[resendCount++] = (uint8_t)i;
     45c:	ab01      	add	r3, sp, #4
     45e:	5d1b      	ldrb	r3, [r3, r4]
     460:	2b00      	cmp	r3, #0
     462:	d1f5      	bne.n	450 <get_packet+0x30>
     464:	19bb      	adds	r3, r7, r6
     466:	705c      	strb	r4, [r3, #1]
     468:	3601      	adds	r6, #1
     46a:	e7f1      	b.n	450 <get_packet+0x30>
            if (resendCount) {
     46c:	2e00      	cmp	r6, #0
     46e:	d0ec      	beq.n	44a <get_packet+0x2a>
                payload->resendCount = (uint8_t)resendCount;
     470:	703e      	strb	r6, [r7, #0]
                GNClink_Construct_RequestResendFrame(txframe);
     472:	4d25      	ldr	r5, [pc, #148]	; (508 <get_packet+0xe8>)
     474:	0028      	movs	r0, r5
     476:	4b25      	ldr	r3, [pc, #148]	; (50c <get_packet+0xec>)
     478:	4798      	blx	r3
                led_on(); // only flash if resend is being performed
     47a:	2480      	movs	r4, #128	; 0x80
     47c:	03e4      	lsls	r4, r4, #15
     47e:	0021      	movs	r1, r4
     480:	2001      	movs	r0, #1
     482:	4b23      	ldr	r3, [pc, #140]	; (510 <get_packet+0xf0>)
     484:	4798      	blx	r3
                serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     486:	2214      	movs	r2, #20
     488:	0029      	movs	r1, r5
     48a:	2000      	movs	r0, #0
     48c:	4b21      	ldr	r3, [pc, #132]	; (514 <get_packet+0xf4>)
     48e:	4798      	blx	r3
                serial_write_wait_until_complete(PORT0);
     490:	2000      	movs	r0, #0
     492:	4b21      	ldr	r3, [pc, #132]	; (518 <get_packet+0xf8>)
     494:	4798      	blx	r3
                led_off();
     496:	0021      	movs	r1, r4
     498:	2001      	movs	r0, #1
     49a:	4b20      	ldr	r3, [pc, #128]	; (51c <get_packet+0xfc>)
     49c:	4798      	blx	r3
        serial_read_start(PORT0, rxframe, GNCLINK_FRAME_TOTAL_LENGTH);
     49e:	4c18      	ldr	r4, [pc, #96]	; (500 <get_packet+0xe0>)
     4a0:	2214      	movs	r2, #20
     4a2:	0021      	movs	r1, r4
     4a4:	2000      	movs	r0, #0
     4a6:	4b1e      	ldr	r3, [pc, #120]	; (520 <get_packet+0x100>)
     4a8:	4798      	blx	r3
        serial_read_wait_until_complete(PORT0); // Consider using _or_timeout in the future
     4aa:	2000      	movs	r0, #0
     4ac:	4b1d      	ldr	r3, [pc, #116]	; (524 <get_packet+0x104>)
     4ae:	4798      	blx	r3
        if (!GNClink_Check_Frame(rxframe)) {
     4b0:	0020      	movs	r0, r4
     4b2:	4b1d      	ldr	r3, [pc, #116]	; (528 <get_packet+0x108>)
     4b4:	4798      	blx	r3
     4b6:	1e05      	subs	r5, r0, #0
     4b8:	d0f1      	beq.n	49e <get_packet+0x7e>
        if (GNClink_Frame_RequestResend(rxframe)) {
     4ba:	4811      	ldr	r0, [pc, #68]	; (500 <get_packet+0xe0>)
     4bc:	4b1b      	ldr	r3, [pc, #108]	; (52c <get_packet+0x10c>)
     4be:	4798      	blx	r3
     4c0:	2800      	cmp	r0, #0
     4c2:	d1c1      	bne.n	448 <get_packet+0x28>
        receivedFrames[GNClink_Get_Frame_Index(rxframe)] = true;
     4c4:	4c0e      	ldr	r4, [pc, #56]	; (500 <get_packet+0xe0>)
     4c6:	0020      	movs	r0, r4
     4c8:	4b0e      	ldr	r3, [pc, #56]	; (504 <get_packet+0xe4>)
     4ca:	4798      	blx	r3
     4cc:	2301      	movs	r3, #1
     4ce:	aa01      	add	r2, sp, #4
     4d0:	5413      	strb	r3, [r2, r0]
        bool moreFrames = true;
     4d2:	466a      	mov	r2, sp
     4d4:	70d3      	strb	r3, [r2, #3]
        GNClink_Reconstruct_Packet_From_Frames(rxframe, rxpacket, &moreFrames);
     4d6:	4908      	ldr	r1, [pc, #32]	; (4f8 <get_packet+0xd8>)
     4d8:	3203      	adds	r2, #3
     4da:	0020      	movs	r0, r4
     4dc:	4b14      	ldr	r3, [pc, #80]	; (530 <get_packet+0x110>)
     4de:	4798      	blx	r3
        if (!moreFrames) {
     4e0:	466b      	mov	r3, sp
     4e2:	78db      	ldrb	r3, [r3, #3]
     4e4:	2b00      	cmp	r3, #0
     4e6:	d1da      	bne.n	49e <get_packet+0x7e>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(txframe);
     4e8:	4807      	ldr	r0, [pc, #28]	; (508 <get_packet+0xe8>)
     4ea:	4b12      	ldr	r3, [pc, #72]	; (534 <get_packet+0x114>)
     4ec:	4798      	blx	r3
     4ee:	0007      	movs	r7, r0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     4f0:	2400      	movs	r4, #0
            int resendCount = 0;
     4f2:	2600      	movs	r6, #0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     4f4:	e7ad      	b.n	452 <get_packet+0x32>
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	2000010c 	.word	0x2000010c
     4fc:	00005325 	.word	0x00005325
     500:	2000014c 	.word	0x2000014c
     504:	000043af 	.word	0x000043af
     508:	20000160 	.word	0x20000160
     50c:	000043b5 	.word	0x000043b5
     510:	00001d01 	.word	0x00001d01
     514:	00000c81 	.word	0x00000c81
     518:	00000d09 	.word	0x00000d09
     51c:	00001d11 	.word	0x00001d11
     520:	00000d69 	.word	0x00000d69
     524:	00000df1 	.word	0x00000df1
     528:	00004379 	.word	0x00004379
     52c:	000043a5 	.word	0x000043a5
     530:	000043d5 	.word	0x000043d5
     534:	000042f1 	.word	0x000042f1

00000538 <send_packet>:

bool send_packet(bool resendFrames) {
     538:	b570      	push	{r4, r5, r6, lr}
     53a:	b084      	sub	sp, #16
     53c:	0005      	movs	r5, r0
    int count = 0;
    bool moreFrames = true;
     53e:	230f      	movs	r3, #15
     540:	446b      	add	r3, sp
     542:	2201      	movs	r2, #1
     544:	701a      	strb	r2, [r3, #0]
    int count = 0;
     546:	2400      	movs	r4, #0
    while (moreFrames) {
     548:	e01a      	b.n	580 <send_packet+0x48>
        // check if frames are being resent
        if (resendFrames) {
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
            // break if all have been sent
            if (count == payload->resendCount) break;
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     54a:	2202      	movs	r2, #2
     54c:	e029      	b.n	5a2 <send_packet+0x6a>
        int frameIndex = count;
     54e:	0023      	movs	r3, r4
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     550:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
        }

        // send frames
        GNClink_Get_Frame(txpacket, txframe, frameFlags, frameIndex, &moreFrames);
     552:	491a      	ldr	r1, [pc, #104]	; (5bc <send_packet+0x84>)
     554:	481a      	ldr	r0, [pc, #104]	; (5c0 <send_packet+0x88>)
     556:	260f      	movs	r6, #15
     558:	446e      	add	r6, sp
     55a:	9600      	str	r6, [sp, #0]
     55c:	4e19      	ldr	r6, [pc, #100]	; (5c4 <send_packet+0x8c>)
     55e:	47b0      	blx	r6
        // send frame
#ifdef COMMS_TEST
        int random_value = rand() % 10;
        if (random_value != 0) {
#endif
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     560:	2d00      	cmp	r5, #0
     562:	d121      	bne.n	5a8 <send_packet+0x70>
        serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     564:	4915      	ldr	r1, [pc, #84]	; (5bc <send_packet+0x84>)
     566:	2214      	movs	r2, #20
     568:	2000      	movs	r0, #0
     56a:	4b17      	ldr	r3, [pc, #92]	; (5c8 <send_packet+0x90>)
     56c:	4798      	blx	r3
        serial_write_wait_until_complete(PORT0);
     56e:	2000      	movs	r0, #0
     570:	4b16      	ldr	r3, [pc, #88]	; (5cc <send_packet+0x94>)
     572:	4798      	blx	r3
        led_off();
     574:	2180      	movs	r1, #128	; 0x80
     576:	03c9      	lsls	r1, r1, #15
     578:	2001      	movs	r0, #1
     57a:	4b15      	ldr	r3, [pc, #84]	; (5d0 <send_packet+0x98>)
     57c:	4798      	blx	r3
#ifdef COMMS_TEST
        }
#endif

        ++count;
     57e:	3401      	adds	r4, #1
    while (moreFrames) {
     580:	230f      	movs	r3, #15
     582:	446b      	add	r3, sp
     584:	781b      	ldrb	r3, [r3, #0]
     586:	2b00      	cmp	r3, #0
     588:	d014      	beq.n	5b4 <send_packet+0x7c>
        if (resendFrames) {
     58a:	2d00      	cmp	r5, #0
     58c:	d0df      	beq.n	54e <send_packet+0x16>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
     58e:	4811      	ldr	r0, [pc, #68]	; (5d4 <send_packet+0x9c>)
     590:	4b11      	ldr	r3, [pc, #68]	; (5d8 <send_packet+0xa0>)
     592:	4798      	blx	r3
            if (count == payload->resendCount) break;
     594:	7803      	ldrb	r3, [r0, #0]
     596:	42a3      	cmp	r3, r4
     598:	d00c      	beq.n	5b4 <send_packet+0x7c>
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     59a:	3b01      	subs	r3, #1
     59c:	42a3      	cmp	r3, r4
     59e:	d0d4      	beq.n	54a <send_packet+0x12>
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     5a0:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
     5a2:	1900      	adds	r0, r0, r4
     5a4:	7843      	ldrb	r3, [r0, #1]
     5a6:	e7d4      	b.n	552 <send_packet+0x1a>
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     5a8:	2180      	movs	r1, #128	; 0x80
     5aa:	03c9      	lsls	r1, r1, #15
     5ac:	2001      	movs	r0, #1
     5ae:	4b0b      	ldr	r3, [pc, #44]	; (5dc <send_packet+0xa4>)
     5b0:	4798      	blx	r3
     5b2:	e7d7      	b.n	564 <send_packet+0x2c>
    }
    return true;
}
     5b4:	2001      	movs	r0, #1
     5b6:	b004      	add	sp, #16
     5b8:	bd70      	pop	{r4, r5, r6, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	20000160 	.word	0x20000160
     5c0:	200000cc 	.word	0x200000cc
     5c4:	000042f5 	.word	0x000042f5
     5c8:	00000c81 	.word	0x00000c81
     5cc:	00000d09 	.word	0x00000d09
     5d0:	00001d11 	.word	0x00001d11
     5d4:	2000014c 	.word	0x2000014c
     5d8:	000042f1 	.word	0x000042f1
     5dc:	00001d01 	.word	0x00001d01

000005e0 <comms_loop>:

bool comms_loop() {
     5e0:	b510      	push	{r4, lr}
    bool run = true;
    while (run) {
     5e2:	e002      	b.n	5ea <comms_loop+0xa>
        // get packet, resend if required
        while (!get_packet()) {
            send_packet(true);
     5e4:	2001      	movs	r0, #1
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <comms_loop+0x24>)
     5e8:	4798      	blx	r3
        while (!get_packet()) {
     5ea:	4b07      	ldr	r3, [pc, #28]	; (608 <comms_loop+0x28>)
     5ec:	4798      	blx	r3
     5ee:	2800      	cmp	r0, #0
     5f0:	d0f8      	beq.n	5e4 <comms_loop+0x4>
        }

        if (evaluatePacket()) {
     5f2:	4b06      	ldr	r3, [pc, #24]	; (60c <comms_loop+0x2c>)
     5f4:	4798      	blx	r3
     5f6:	2800      	cmp	r0, #0
     5f8:	d0f7      	beq.n	5ea <comms_loop+0xa>
            send_packet(false);
     5fa:	2000      	movs	r0, #0
     5fc:	4b01      	ldr	r3, [pc, #4]	; (604 <comms_loop+0x24>)
     5fe:	4798      	blx	r3
     600:	e7f3      	b.n	5ea <comms_loop+0xa>
     602:	46c0      	nop			; (mov r8, r8)
     604:	00000539 	.word	0x00000539
     608:	00000421 	.word	0x00000421
     60c:	00000395 	.word	0x00000395

00000610 <get_address_from_id>:
    switch (type) {
     610:	2804      	cmp	r0, #4
     612:	d011      	beq.n	638 <get_address_from_id+0x28>
     614:	280b      	cmp	r0, #11
     616:	d01c      	beq.n	652 <get_address_from_id+0x42>
     618:	2803      	cmp	r0, #3
     61a:	d001      	beq.n	620 <get_address_from_id+0x10>
}
     61c:	2000      	movs	r0, #0
     61e:	4770      	bx	lr
        if (id < __GLOBAL_I32_ID_START || id >= __GLOBAL_I32_ID_END) return false;
     620:	1e48      	subs	r0, r1, #1
     622:	b2c0      	uxtb	r0, r0
     624:	280c      	cmp	r0, #12
     626:	d8f9      	bhi.n	61c <get_address_from_id+0xc>
        *size = 4;
     628:	2004      	movs	r0, #4
     62a:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_I32_ID_START;
     62c:	3901      	subs	r1, #1
        *address = &(globals.__GLOBAL_I32_START_VARIABLE) + index;
     62e:	4b0f      	ldr	r3, [pc, #60]	; (66c <get_address_from_id+0x5c>)
     630:	0089      	lsls	r1, r1, #2
     632:	185b      	adds	r3, r3, r1
     634:	6013      	str	r3, [r2, #0]
        break;
     636:	e7f2      	b.n	61e <get_address_from_id+0xe>
        if (id < __GLOBAL_U32_ID_START || id >= __GLOBAL_U32_ID_END) return false;
     638:	0008      	movs	r0, r1
     63a:	380e      	subs	r0, #14
     63c:	b2c0      	uxtb	r0, r0
     63e:	2801      	cmp	r0, #1
     640:	d8ec      	bhi.n	61c <get_address_from_id+0xc>
        *size = 4;
     642:	2004      	movs	r0, #4
     644:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U32_ID_START;
     646:	390e      	subs	r1, #14
        *address = &(globals.__GLOBAL_U32_START_VARIABLE) + index;
     648:	4b09      	ldr	r3, [pc, #36]	; (670 <get_address_from_id+0x60>)
     64a:	0089      	lsls	r1, r1, #2
     64c:	185b      	adds	r3, r3, r1
     64e:	6013      	str	r3, [r2, #0]
        break;
     650:	e7e5      	b.n	61e <get_address_from_id+0xe>
        if (id < __GLOBAL_BOOL_ID_START || id >= __GLOBAL_BOOL_ID_END) return false;
     652:	0008      	movs	r0, r1
     654:	3810      	subs	r0, #16
     656:	b2c0      	uxtb	r0, r0
     658:	2804      	cmp	r0, #4
     65a:	d8df      	bhi.n	61c <get_address_from_id+0xc>
        *size = 1;
     65c:	2001      	movs	r0, #1
     65e:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_BOOL_ID_START;
     660:	3910      	subs	r1, #16
        *address = &(globals.__GLOBAL_BOOL_START_VARIABLE) + index;
     662:	4b04      	ldr	r3, [pc, #16]	; (674 <get_address_from_id+0x64>)
     664:	185b      	adds	r3, r3, r1
     666:	6013      	str	r3, [r2, #0]
}
     668:	e7d9      	b.n	61e <get_address_from_id+0xe>
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	20000178 	.word	0x20000178
     670:	200001ac 	.word	0x200001ac
     674:	200001b4 	.word	0x200001b4

00000678 <get_global_type_from_id>:
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     678:	1e43      	subs	r3, r0, #1
     67a:	b2db      	uxtb	r3, r3
     67c:	2b13      	cmp	r3, #19
     67e:	d817      	bhi.n	6b0 <get_global_type_from_id+0x38>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     680:	2800      	cmp	r0, #0
     682:	d009      	beq.n	698 <get_global_type_from_id+0x20>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     684:	280d      	cmp	r0, #13
     686:	d90b      	bls.n	6a0 <get_global_type_from_id+0x28>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     688:	280f      	cmp	r0, #15
     68a:	d90d      	bls.n	6a8 <get_global_type_from_id+0x30>
    if (id - __GLOBAL_BOOL_ID_END < 0) {*type = __BOOL; return true;}
     68c:	2814      	cmp	r0, #20
     68e:	d810      	bhi.n	6b2 <get_global_type_from_id+0x3a>
     690:	230b      	movs	r3, #11
     692:	700b      	strb	r3, [r1, #0]
     694:	2001      	movs	r0, #1
     696:	e00c      	b.n	6b2 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     698:	2301      	movs	r3, #1
     69a:	700b      	strb	r3, [r1, #0]
     69c:	3001      	adds	r0, #1
     69e:	e008      	b.n	6b2 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     6a0:	2303      	movs	r3, #3
     6a2:	700b      	strb	r3, [r1, #0]
     6a4:	2001      	movs	r0, #1
     6a6:	e004      	b.n	6b2 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     6a8:	2304      	movs	r3, #4
     6aa:	700b      	strb	r3, [r1, #0]
     6ac:	2001      	movs	r0, #1
     6ae:	e000      	b.n	6b2 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     6b0:	2000      	movs	r0, #0
}
     6b2:	4770      	bx	lr

000006b4 <get_global_address_size>:
bool get_global_address_size(Global_Variable_IDs id, void** address, int* size) {
     6b4:	b570      	push	{r4, r5, r6, lr}
     6b6:	b082      	sub	sp, #8
     6b8:	0004      	movs	r4, r0
     6ba:	000d      	movs	r5, r1
     6bc:	0016      	movs	r6, r2
    if (!get_global_type_from_id(id, &type)) return false;
     6be:	466b      	mov	r3, sp
     6c0:	1dd9      	adds	r1, r3, #7
     6c2:	4b08      	ldr	r3, [pc, #32]	; (6e4 <get_global_address_size+0x30>)
     6c4:	4798      	blx	r3
     6c6:	2800      	cmp	r0, #0
     6c8:	d102      	bne.n	6d0 <get_global_address_size+0x1c>
}
     6ca:	2000      	movs	r0, #0
     6cc:	b002      	add	sp, #8
     6ce:	bd70      	pop	{r4, r5, r6, pc}
    if (!get_address_from_id(type, id, address, size)) return false;
     6d0:	466b      	mov	r3, sp
     6d2:	79d8      	ldrb	r0, [r3, #7]
     6d4:	0033      	movs	r3, r6
     6d6:	002a      	movs	r2, r5
     6d8:	0021      	movs	r1, r4
     6da:	4c03      	ldr	r4, [pc, #12]	; (6e8 <get_global_address_size+0x34>)
     6dc:	47a0      	blx	r4
     6de:	2800      	cmp	r0, #0
     6e0:	d1f4      	bne.n	6cc <get_global_address_size+0x18>
     6e2:	e7f2      	b.n	6ca <get_global_address_size+0x16>
     6e4:	00000679 	.word	0x00000679
     6e8:	00000611 	.word	0x00000611

000006ec <get_global_name>:
}

bool get_global_name(Global_Variable_IDs id, uint8_t* buffer, int* length, int maxLength) {
     6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ee:	46c6      	mov	lr, r8
     6f0:	b500      	push	{lr}
     6f2:	000d      	movs	r5, r1
     6f4:	0017      	movs	r7, r2
     6f6:	001c      	movs	r4, r3
    bool ret = true;
    if (id >= __GLOBAL_ID_END) {
     6f8:	2814      	cmp	r0, #20
     6fa:	d817      	bhi.n	72c <get_global_name+0x40>
    bool ret = true;
     6fc:	2301      	movs	r3, #1
     6fe:	4698      	mov	r8, r3
        id = 0;
        ret = false;
    }

    *length = MIN_2(maxLength, strlen(global_variable_names[id]) + 1);
     700:	0006      	movs	r6, r0
     702:	4b0c      	ldr	r3, [pc, #48]	; (734 <get_global_name+0x48>)
     704:	0080      	lsls	r0, r0, #2
     706:	58c0      	ldr	r0, [r0, r3]
     708:	4b0b      	ldr	r3, [pc, #44]	; (738 <get_global_name+0x4c>)
     70a:	4798      	blx	r3
     70c:	3001      	adds	r0, #1
     70e:	42a0      	cmp	r0, r4
     710:	d800      	bhi.n	714 <get_global_name+0x28>
     712:	0004      	movs	r4, r0
     714:	603c      	str	r4, [r7, #0]

    memcpy(buffer, global_variable_names[id], *length);
     716:	4b07      	ldr	r3, [pc, #28]	; (734 <get_global_name+0x48>)
     718:	00b6      	lsls	r6, r6, #2
     71a:	58f1      	ldr	r1, [r6, r3]
     71c:	0022      	movs	r2, r4
     71e:	0028      	movs	r0, r5
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <get_global_name+0x50>)
     722:	4798      	blx	r3

    return ret;
}
     724:	4640      	mov	r0, r8
     726:	bc80      	pop	{r7}
     728:	46b8      	mov	r8, r7
     72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = false;
     72c:	2300      	movs	r3, #0
     72e:	4698      	mov	r8, r3
        id = 0;
     730:	2000      	movs	r0, #0
     732:	e7e5      	b.n	700 <get_global_name+0x14>
     734:	20000000 	.word	0x20000000
     738:	000054ad 	.word	0x000054ad
     73c:	0000541d 	.word	0x0000541d

00000740 <init_globals>:

bool init_globals() {
     740:	b570      	push	{r4, r5, r6, lr}
     742:	b08a      	sub	sp, #40	; 0x28
    // load header
    EEPROM_Request request;
    eeprom_read_request(&request, 0, &__eeprom_header, sizeof(__eeprom_header));
     744:	4c1b      	ldr	r4, [pc, #108]	; (7b4 <init_globals+0x74>)
     746:	0022      	movs	r2, r4
     748:	3248      	adds	r2, #72	; 0x48
     74a:	2308      	movs	r3, #8
     74c:	2100      	movs	r1, #0
     74e:	4668      	mov	r0, sp
     750:	4d19      	ldr	r5, [pc, #100]	; (7b8 <init_globals+0x78>)
     752:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     754:	4668      	mov	r0, sp
     756:	4b19      	ldr	r3, [pc, #100]	; (7bc <init_globals+0x7c>)
     758:	4798      	blx	r3
    
    // check and modify header values
    if (__eeprom_header.GlobalHash != __GLOBAL_HASH) {
     75a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
     75c:	4b18      	ldr	r3, [pc, #96]	; (7c0 <init_globals+0x80>)
     75e:	429a      	cmp	r2, r3
     760:	d11c      	bne.n	79c <init_globals+0x5c>
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
        eeprom_wait_until_done(&request);
    }
    
    ++__eeprom_header.StartupCount;
     762:	4c14      	ldr	r4, [pc, #80]	; (7b4 <init_globals+0x74>)
     764:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     766:	3301      	adds	r3, #1
     768:	64e3      	str	r3, [r4, #76]	; 0x4c
    eeprom_write_request(&request, 4, &(__eeprom_header.StartupCount), 4);
     76a:	0022      	movs	r2, r4
     76c:	324c      	adds	r2, #76	; 0x4c
     76e:	2304      	movs	r3, #4
     770:	2104      	movs	r1, #4
     772:	4668      	mov	r0, sp
     774:	4d13      	ldr	r5, [pc, #76]	; (7c4 <init_globals+0x84>)
     776:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     778:	4668      	mov	r0, sp
     77a:	4d10      	ldr	r5, [pc, #64]	; (7bc <init_globals+0x7c>)
     77c:	47a8      	blx	r5

    // load globals
    eeprom_read_request(&request, __EEPROM_GLOBAL_VARIABLES_START_ADDRESS, &globals, sizeof(globals));
     77e:	2348      	movs	r3, #72	; 0x48
     780:	0022      	movs	r2, r4
     782:	2120      	movs	r1, #32
     784:	4668      	mov	r0, sp
     786:	4e0c      	ldr	r6, [pc, #48]	; (7b8 <init_globals+0x78>)
     788:	47b0      	blx	r6
    eeprom_wait_until_done(&request);
     78a:	4668      	mov	r0, sp
     78c:	47a8      	blx	r5

    globals.GlobalHash = __eeprom_header.GlobalHash;
     78e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     790:	6363      	str	r3, [r4, #52]	; 0x34
    globals.StartupCount = __eeprom_header.StartupCount;
     792:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     794:	63a3      	str	r3, [r4, #56]	; 0x38

    return true;
     796:	2001      	movs	r0, #1
     798:	b00a      	add	sp, #40	; 0x28
     79a:	bd70      	pop	{r4, r5, r6, pc}
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
     79c:	4a05      	ldr	r2, [pc, #20]	; (7b4 <init_globals+0x74>)
     79e:	6493      	str	r3, [r2, #72]	; 0x48
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
     7a0:	3248      	adds	r2, #72	; 0x48
     7a2:	2304      	movs	r3, #4
     7a4:	2100      	movs	r1, #0
     7a6:	4668      	mov	r0, sp
     7a8:	4c06      	ldr	r4, [pc, #24]	; (7c4 <init_globals+0x84>)
     7aa:	47a0      	blx	r4
        eeprom_wait_until_done(&request);
     7ac:	4668      	mov	r0, sp
     7ae:	4b03      	ldr	r3, [pc, #12]	; (7bc <init_globals+0x7c>)
     7b0:	4798      	blx	r3
     7b2:	e7d6      	b.n	762 <init_globals+0x22>
     7b4:	20000178 	.word	0x20000178
     7b8:	00000831 	.word	0x00000831
     7bc:	00003ae5 	.word	0x00003ae5
     7c0:	6a8dc07e 	.word	0x6a8dc07e
     7c4:	0000085d 	.word	0x0000085d

000007c8 <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     7c8:	b510      	push	{r4, lr}
     7ca:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     7cc:	2480      	movs	r4, #128	; 0x80
     7ce:	05e4      	lsls	r4, r4, #23
     7d0:	0021      	movs	r1, r4
     7d2:	2001      	movs	r0, #1
     7d4:	4b0b      	ldr	r3, [pc, #44]	; (804 <init_eeprom+0x3c>)
     7d6:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     7d8:	0021      	movs	r1, r4
     7da:	2001      	movs	r0, #1
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <init_eeprom+0x40>)
     7de:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     7e0:	ab02      	add	r3, sp, #8
     7e2:	490a      	ldr	r1, [pc, #40]	; (80c <init_eeprom+0x44>)
     7e4:	680a      	ldr	r2, [r1, #0]
     7e6:	9202      	str	r2, [sp, #8]
     7e8:	7909      	ldrb	r1, [r1, #4]
     7ea:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     7ec:	4808      	ldr	r0, [pc, #32]	; (810 <init_eeprom+0x48>)
     7ee:	2180      	movs	r1, #128	; 0x80
     7f0:	0209      	lsls	r1, r1, #8
     7f2:	9100      	str	r1, [sp, #0]
     7f4:	9b03      	ldr	r3, [sp, #12]
     7f6:	4907      	ldr	r1, [pc, #28]	; (814 <init_eeprom+0x4c>)
     7f8:	4c07      	ldr	r4, [pc, #28]	; (818 <init_eeprom+0x50>)
     7fa:	47a0      	blx	r4

    return true;
}
     7fc:	2001      	movs	r0, #1
     7fe:	b004      	add	sp, #16
     800:	bd10      	pop	{r4, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	00001d01 	.word	0x00001d01
     808:	00001cf1 	.word	0x00001cf1
     80c:	00005828 	.word	0x00005828
     810:	200001c8 	.word	0x200001c8
     814:	42001400 	.word	0x42001400
     818:	000015a1 	.word	0x000015a1

0000081c <check_eeprom>:

bool check_eeprom() {
     81c:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     81e:	4802      	ldr	r0, [pc, #8]	; (828 <check_eeprom+0xc>)
     820:	4b02      	ldr	r3, [pc, #8]	; (82c <check_eeprom+0x10>)
     822:	4798      	blx	r3
}
     824:	bd10      	pop	{r4, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	200001c8 	.word	0x200001c8
     82c:	0000174d 	.word	0x0000174d

00000830 <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     830:	b530      	push	{r4, r5, lr}
     832:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     834:	4d06      	ldr	r5, [pc, #24]	; (850 <eeprom_read_request+0x20>)
     836:	4c07      	ldr	r4, [pc, #28]	; (854 <eeprom_read_request+0x24>)
     838:	9203      	str	r2, [sp, #12]
     83a:	9302      	str	r3, [sp, #8]
     83c:	9101      	str	r1, [sp, #4]
     83e:	2300      	movs	r3, #0
     840:	9300      	str	r3, [sp, #0]
     842:	002a      	movs	r2, r5
     844:	0001      	movs	r1, r0
     846:	0020      	movs	r0, r4
     848:	4c03      	ldr	r4, [pc, #12]	; (858 <eeprom_read_request+0x28>)
     84a:	47a0      	blx	r4
}
     84c:	b005      	add	sp, #20
     84e:	bd30      	pop	{r4, r5, pc}
     850:	200001c8 	.word	0x200001c8
     854:	200002cc 	.word	0x200002cc
     858:	00003ab1 	.word	0x00003ab1

0000085c <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     85c:	b530      	push	{r4, r5, lr}
     85e:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     860:	4d07      	ldr	r5, [pc, #28]	; (880 <eeprom_write_request+0x24>)
     862:	4c08      	ldr	r4, [pc, #32]	; (884 <eeprom_write_request+0x28>)
     864:	9203      	str	r2, [sp, #12]
     866:	9302      	str	r3, [sp, #8]
     868:	9101      	str	r1, [sp, #4]
     86a:	2301      	movs	r3, #1
     86c:	9300      	str	r3, [sp, #0]
     86e:	2300      	movs	r3, #0
     870:	002a      	movs	r2, r5
     872:	0001      	movs	r1, r0
     874:	0020      	movs	r0, r4
     876:	4c04      	ldr	r4, [pc, #16]	; (888 <eeprom_write_request+0x2c>)
     878:	47a0      	blx	r4
     87a:	b005      	add	sp, #20
     87c:	bd30      	pop	{r4, r5, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	200001c8 	.word	0x200001c8
     884:	200002cc 	.word	0x200002cc
     888:	00003ab1 	.word	0x00003ab1

0000088c <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
     88e:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     890:	2480      	movs	r4, #128	; 0x80
     892:	0524      	lsls	r4, r4, #20
     894:	0021      	movs	r1, r4
     896:	2000      	movs	r0, #0
     898:	4e15      	ldr	r6, [pc, #84]	; (8f0 <imu_init+0x64>)
     89a:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     89c:	0021      	movs	r1, r4
     89e:	2000      	movs	r0, #0
     8a0:	4f14      	ldr	r7, [pc, #80]	; (8f4 <imu_init+0x68>)
     8a2:	47b8      	blx	r7
	IMU_OFF_BUS();
     8a4:	2580      	movs	r5, #128	; 0x80
     8a6:	03ad      	lsls	r5, r5, #14
     8a8:	0029      	movs	r1, r5
     8aa:	2000      	movs	r0, #0
     8ac:	4b12      	ldr	r3, [pc, #72]	; (8f8 <imu_init+0x6c>)
     8ae:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     8b0:	0029      	movs	r1, r5
     8b2:	2000      	movs	r0, #0
     8b4:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     8b6:	0029      	movs	r1, r5
     8b8:	2000      	movs	r0, #0
     8ba:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     8bc:	9400      	str	r4, [sp, #0]
     8be:	2300      	movs	r3, #0
     8c0:	466a      	mov	r2, sp
     8c2:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     8c4:	480d      	ldr	r0, [pc, #52]	; (8fc <imu_init+0x70>)
     8c6:	0022      	movs	r2, r4
     8c8:	9b01      	ldr	r3, [sp, #4]
     8ca:	490d      	ldr	r1, [pc, #52]	; (900 <imu_init+0x74>)
     8cc:	4c0d      	ldr	r4, [pc, #52]	; (904 <imu_init+0x78>)
     8ce:	47a0      	blx	r4
     8d0:	1e04      	subs	r4, r0, #0
     8d2:	d107      	bne.n	8e4 <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     8d4:	2180      	movs	r1, #128	; 0x80
     8d6:	0389      	lsls	r1, r1, #14
     8d8:	2000      	movs	r0, #0
     8da:	4b07      	ldr	r3, [pc, #28]	; (8f8 <imu_init+0x6c>)
     8dc:	4798      	blx	r3
    return ret;
}
     8de:	0020      	movs	r0, r4
     8e0:	b003      	add	sp, #12
     8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     8e4:	4805      	ldr	r0, [pc, #20]	; (8fc <imu_init+0x70>)
     8e6:	4b08      	ldr	r3, [pc, #32]	; (908 <imu_init+0x7c>)
     8e8:	4798      	blx	r3
     8ea:	0004      	movs	r4, r0
     8ec:	e7f2      	b.n	8d4 <imu_init+0x48>
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	00001d01 	.word	0x00001d01
     8f4:	00001cf1 	.word	0x00001cf1
     8f8:	00001d11 	.word	0x00001d11
     8fc:	200001d4 	.word	0x200001d4
     900:	42001400 	.word	0x42001400
     904:	00001b21 	.word	0x00001b21
     908:	00001c65 	.word	0x00001c65

0000090c <check_imu>:

bool check_imu() {
     90c:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     90e:	2180      	movs	r1, #128	; 0x80
     910:	0389      	lsls	r1, r1, #14
     912:	2000      	movs	r0, #0
     914:	4b09      	ldr	r3, [pc, #36]	; (93c <check_imu+0x30>)
     916:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     918:	4809      	ldr	r0, [pc, #36]	; (940 <check_imu+0x34>)
     91a:	4b0a      	ldr	r3, [pc, #40]	; (944 <check_imu+0x38>)
     91c:	4798      	blx	r3
     91e:	1e04      	subs	r4, r0, #0
     920:	d106      	bne.n	930 <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     922:	2180      	movs	r1, #128	; 0x80
     924:	0389      	lsls	r1, r1, #14
     926:	2000      	movs	r0, #0
     928:	4b07      	ldr	r3, [pc, #28]	; (948 <check_imu+0x3c>)
     92a:	4798      	blx	r3
    return pass;
}
     92c:	0020      	movs	r0, r4
     92e:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     930:	4803      	ldr	r0, [pc, #12]	; (940 <check_imu+0x34>)
     932:	4b06      	ldr	r3, [pc, #24]	; (94c <check_imu+0x40>)
     934:	4798      	blx	r3
     936:	0004      	movs	r4, r0
     938:	e7f3      	b.n	922 <check_imu+0x16>
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	00001d01 	.word	0x00001d01
     940:	200001d4 	.word	0x200001d4
     944:	00001b91 	.word	0x00001b91
     948:	00001d11 	.word	0x00001d11
     94c:	00001cc1 	.word	0x00001cc1

00000950 <request_imu_data>:

void request_imu_data() {
     950:	b510      	push	{r4, lr}
     952:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     954:	4a09      	ldr	r2, [pc, #36]	; (97c <request_imu_data+0x2c>)
     956:	0011      	movs	r1, r2
     958:	310c      	adds	r1, #12
     95a:	4809      	ldr	r0, [pc, #36]	; (980 <request_imu_data+0x30>)
     95c:	0013      	movs	r3, r2
     95e:	3334      	adds	r3, #52	; 0x34
     960:	9304      	str	r3, [sp, #16]
     962:	230e      	movs	r3, #14
     964:	9303      	str	r3, [sp, #12]
     966:	331f      	adds	r3, #31
     968:	9302      	str	r3, [sp, #8]
     96a:	2300      	movs	r3, #0
     96c:	9301      	str	r3, [sp, #4]
     96e:	9300      	str	r3, [sp, #0]
     970:	3302      	adds	r3, #2
     972:	4c04      	ldr	r4, [pc, #16]	; (984 <request_imu_data+0x34>)
     974:	47a0      	blx	r4
}
     976:	b006      	add	sp, #24
     978:	bd10      	pop	{r4, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	200001d4 	.word	0x200001d4
     980:	200002cc 	.word	0x200002cc
     984:	00003d55 	.word	0x00003d55

00000988 <wait_for_imu_data>:

void wait_for_imu_data() {
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	46c6      	mov	lr, r8
     98c:	b500      	push	{lr}
     98e:	b086      	sub	sp, #24
    imu_icm20948_wait_until_done(&data_request);
     990:	4c8c      	ldr	r4, [pc, #560]	; (bc4 <wait_for_imu_data+0x23c>)
     992:	0020      	movs	r0, r4
     994:	300c      	adds	r0, #12
     996:	4b8c      	ldr	r3, [pc, #560]	; (bc8 <wait_for_imu_data+0x240>)
     998:	4798      	blx	r3

    // float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
    int32_t accel_multiplier = (__G__ * ACCEL_MIN_RANGE_G) >> (15 - accel_fs_sel);
     99a:	6c66      	ldr	r6, [r4, #68]	; 0x44
     99c:	230f      	movs	r3, #15
     99e:	469c      	mov	ip, r3
     9a0:	1b9b      	subs	r3, r3, r6
     9a2:	488a      	ldr	r0, [pc, #552]	; (bcc <wait_for_imu_data+0x244>)
     9a4:	4118      	asrs	r0, r3
    globals.AccelerationXRaw = SWAPI16(raw_data.accel_x) * accel_multiplier;
     9a6:	2234      	movs	r2, #52	; 0x34
     9a8:	5ea3      	ldrsh	r3, [r4, r2]
     9aa:	0219      	lsls	r1, r3, #8
     9ac:	b209      	sxth	r1, r1
     9ae:	b29b      	uxth	r3, r3
     9b0:	0a1b      	lsrs	r3, r3, #8
     9b2:	4319      	orrs	r1, r3
     9b4:	0003      	movs	r3, r0
     9b6:	434b      	muls	r3, r1
     9b8:	4f85      	ldr	r7, [pc, #532]	; (bd0 <wait_for_imu_data+0x248>)
     9ba:	603b      	str	r3, [r7, #0]
    globals.AccelerationYRaw = SWAPI16(raw_data.accel_y) * accel_multiplier;
     9bc:	2236      	movs	r2, #54	; 0x36
     9be:	5ea3      	ldrsh	r3, [r4, r2]
     9c0:	021a      	lsls	r2, r3, #8
     9c2:	b212      	sxth	r2, r2
     9c4:	b29b      	uxth	r3, r3
     9c6:	0a1b      	lsrs	r3, r3, #8
     9c8:	431a      	orrs	r2, r3
     9ca:	0003      	movs	r3, r0
     9cc:	4353      	muls	r3, r2
     9ce:	607b      	str	r3, [r7, #4]
    globals.AccelerationZRaw = SWAPI16(raw_data.accel_z) * accel_multiplier;
     9d0:	2338      	movs	r3, #56	; 0x38
     9d2:	5ee5      	ldrsh	r5, [r4, r3]
     9d4:	022b      	lsls	r3, r5, #8
     9d6:	b21b      	sxth	r3, r3
     9d8:	b2ad      	uxth	r5, r5
     9da:	0a2d      	lsrs	r5, r5, #8
     9dc:	432b      	orrs	r3, r5
     9de:	4698      	mov	r8, r3
     9e0:	4358      	muls	r0, r3
     9e2:	60b8      	str	r0, [r7, #8]

    // float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
    int32_t gyro_multiplier = (GYRO_MIN_RANGE_MICRORADIANS) >> (15 - gyro_fs_sel);
     9e4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
     9e6:	4660      	mov	r0, ip
     9e8:	1b45      	subs	r5, r0, r5
     9ea:	487a      	ldr	r0, [pc, #488]	; (bd4 <wait_for_imu_data+0x24c>)
     9ec:	4128      	asrs	r0, r5
    globals.AngularVelocityXRaw = SWAPI16(raw_data.gyro_x) * gyro_multiplier;
     9ee:	233a      	movs	r3, #58	; 0x3a
     9f0:	5ee5      	ldrsh	r5, [r4, r3]
     9f2:	46ac      	mov	ip, r5
     9f4:	022d      	lsls	r5, r5, #8
     9f6:	b22d      	sxth	r5, r5
     9f8:	4663      	mov	r3, ip
     9fa:	b29b      	uxth	r3, r3
     9fc:	0a1b      	lsrs	r3, r3, #8
     9fe:	431d      	orrs	r5, r3
     a00:	4345      	muls	r5, r0
     a02:	60fd      	str	r5, [r7, #12]
    globals.AngularVelocityYRaw = SWAPI16(raw_data.gyro_y)* gyro_multiplier;
     a04:	253c      	movs	r5, #60	; 0x3c
     a06:	5f63      	ldrsh	r3, [r4, r5]
     a08:	021d      	lsls	r5, r3, #8
     a0a:	b22d      	sxth	r5, r5
     a0c:	b29b      	uxth	r3, r3
     a0e:	0a1b      	lsrs	r3, r3, #8
     a10:	431d      	orrs	r5, r3
     a12:	4345      	muls	r5, r0
     a14:	613d      	str	r5, [r7, #16]
    globals.AngularVelocityZRaw = SWAPI16(raw_data.gyro_z) * gyro_multiplier;
     a16:	233e      	movs	r3, #62	; 0x3e
     a18:	5ee4      	ldrsh	r4, [r4, r3]
     a1a:	0225      	lsls	r5, r4, #8
     a1c:	b22d      	sxth	r5, r5
     a1e:	b2a4      	uxth	r4, r4
     a20:	0a24      	lsrs	r4, r4, #8
     a22:	432c      	orrs	r4, r5
     a24:	4360      	muls	r0, r4
     a26:	6178      	str	r0, [r7, #20]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     a28:	4643      	mov	r3, r8
     a2a:	17d8      	asrs	r0, r3, #31
     a2c:	181b      	adds	r3, r3, r0
     a2e:	4043      	eors	r3, r0
     a30:	b29b      	uxth	r3, r3
     a32:	17d0      	asrs	r0, r2, #31
     a34:	1812      	adds	r2, r2, r0
     a36:	4042      	eors	r2, r0
     a38:	b292      	uxth	r2, r2
     a3a:	17c8      	asrs	r0, r1, #31
     a3c:	1809      	adds	r1, r1, r0
     a3e:	4041      	eors	r1, r0
     a40:	b289      	uxth	r1, r1
     a42:	1c10      	adds	r0, r2, #0
     a44:	428a      	cmp	r2, r1
     a46:	d200      	bcs.n	a4a <wait_for_imu_data+0xc2>
     a48:	1c08      	adds	r0, r1, #0
     a4a:	1c1a      	adds	r2, r3, #0
     a4c:	b281      	uxth	r1, r0
     a4e:	428b      	cmp	r3, r1
     a50:	d200      	bcs.n	a54 <wait_for_imu_data+0xcc>
     a52:	1c02      	adds	r2, r0, #0
     a54:	b212      	sxth	r2, r2
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     a56:	2e03      	cmp	r6, #3
     a58:	d002      	beq.n	a60 <wait_for_imu_data+0xd8>
     a5a:	4b5f      	ldr	r3, [pc, #380]	; (bd8 <wait_for_imu_data+0x250>)
     a5c:	429a      	cmp	r2, r3
     a5e:	dc40      	bgt.n	ae2 <wait_for_imu_data+0x15a>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     a60:	2e00      	cmp	r6, #0
     a62:	d002      	beq.n	a6a <wait_for_imu_data+0xe2>
     a64:	4b5d      	ldr	r3, [pc, #372]	; (bdc <wait_for_imu_data+0x254>)
     a66:	429a      	cmp	r2, r3
     a68:	dd55      	ble.n	b16 <wait_for_imu_data+0x18e>
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     a6a:	4856      	ldr	r0, [pc, #344]	; (bc4 <wait_for_imu_data+0x23c>)
     a6c:	233e      	movs	r3, #62	; 0x3e
     a6e:	5ec2      	ldrsh	r2, [r0, r3]
     a70:	0213      	lsls	r3, r2, #8
     a72:	b21b      	sxth	r3, r3
     a74:	b292      	uxth	r2, r2
     a76:	0a12      	lsrs	r2, r2, #8
     a78:	4313      	orrs	r3, r2
     a7a:	17da      	asrs	r2, r3, #31
     a7c:	189b      	adds	r3, r3, r2
     a7e:	4053      	eors	r3, r2
     a80:	b29b      	uxth	r3, r3
     a82:	223c      	movs	r2, #60	; 0x3c
     a84:	5e81      	ldrsh	r1, [r0, r2]
     a86:	020a      	lsls	r2, r1, #8
     a88:	b212      	sxth	r2, r2
     a8a:	b289      	uxth	r1, r1
     a8c:	0a09      	lsrs	r1, r1, #8
     a8e:	430a      	orrs	r2, r1
     a90:	17d1      	asrs	r1, r2, #31
     a92:	1852      	adds	r2, r2, r1
     a94:	404a      	eors	r2, r1
     a96:	b292      	uxth	r2, r2
     a98:	213a      	movs	r1, #58	; 0x3a
     a9a:	5e40      	ldrsh	r0, [r0, r1]
     a9c:	0201      	lsls	r1, r0, #8
     a9e:	b209      	sxth	r1, r1
     aa0:	b280      	uxth	r0, r0
     aa2:	0a00      	lsrs	r0, r0, #8
     aa4:	4301      	orrs	r1, r0
     aa6:	17c8      	asrs	r0, r1, #31
     aa8:	1809      	adds	r1, r1, r0
     aaa:	4041      	eors	r1, r0
     aac:	b289      	uxth	r1, r1
     aae:	1c10      	adds	r0, r2, #0
     ab0:	428a      	cmp	r2, r1
     ab2:	d200      	bcs.n	ab6 <wait_for_imu_data+0x12e>
     ab4:	1c08      	adds	r0, r1, #0
     ab6:	1c1a      	adds	r2, r3, #0
     ab8:	b281      	uxth	r1, r0
     aba:	428b      	cmp	r3, r1
     abc:	d200      	bcs.n	ac0 <wait_for_imu_data+0x138>
     abe:	1c02      	adds	r2, r0, #0
     ac0:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     ac2:	4b40      	ldr	r3, [pc, #256]	; (bc4 <wait_for_imu_data+0x23c>)
     ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     ac6:	2b03      	cmp	r3, #3
     ac8:	d002      	beq.n	ad0 <wait_for_imu_data+0x148>
     aca:	4943      	ldr	r1, [pc, #268]	; (bd8 <wait_for_imu_data+0x250>)
     acc:	428a      	cmp	r2, r1
     ace:	dc3c      	bgt.n	b4a <wait_for_imu_data+0x1c2>
        ++gyro_fs_sel;
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     ad0:	2b00      	cmp	r3, #0
     ad2:	d002      	beq.n	ada <wait_for_imu_data+0x152>
     ad4:	4941      	ldr	r1, [pc, #260]	; (bdc <wait_for_imu_data+0x254>)
     ad6:	428a      	cmp	r2, r1
     ad8:	dd55      	ble.n	b86 <wait_for_imu_data+0x1fe>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_off();
    }

     ada:	b006      	add	sp, #24
     adc:	bc80      	pop	{r7}
     ade:	46b8      	mov	r8, r7
     ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     ae2:	3601      	adds	r6, #1
     ae4:	4a37      	ldr	r2, [pc, #220]	; (bc4 <wait_for_imu_data+0x23c>)
     ae6:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     ae8:	b2f6      	uxtb	r6, r6
     aea:	0076      	lsls	r6, r6, #1
     aec:	2306      	movs	r3, #6
     aee:	401e      	ands	r6, r3
     af0:	3346      	adds	r3, #70	; 0x46
     af2:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     af4:	0011      	movs	r1, r2
     af6:	3150      	adds	r1, #80	; 0x50
     af8:	4839      	ldr	r0, [pc, #228]	; (be0 <wait_for_imu_data+0x258>)
     afa:	0013      	movs	r3, r2
     afc:	334c      	adds	r3, #76	; 0x4c
     afe:	9304      	str	r3, [sp, #16]
     b00:	2301      	movs	r3, #1
     b02:	9303      	str	r3, [sp, #12]
     b04:	2414      	movs	r4, #20
     b06:	9402      	str	r4, [sp, #8]
     b08:	3c12      	subs	r4, #18
     b0a:	9401      	str	r4, [sp, #4]
     b0c:	9300      	str	r3, [sp, #0]
     b0e:	3301      	adds	r3, #1
     b10:	4c34      	ldr	r4, [pc, #208]	; (be4 <wait_for_imu_data+0x25c>)
     b12:	47a0      	blx	r4
     b14:	e7a9      	b.n	a6a <wait_for_imu_data+0xe2>
        --accel_fs_sel;
     b16:	3e01      	subs	r6, #1
     b18:	4a2a      	ldr	r2, [pc, #168]	; (bc4 <wait_for_imu_data+0x23c>)
     b1a:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     b1c:	b2f6      	uxtb	r6, r6
     b1e:	0076      	lsls	r6, r6, #1
     b20:	2306      	movs	r3, #6
     b22:	401e      	ands	r6, r3
     b24:	3346      	adds	r3, #70	; 0x46
     b26:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     b28:	0011      	movs	r1, r2
     b2a:	3150      	adds	r1, #80	; 0x50
     b2c:	482c      	ldr	r0, [pc, #176]	; (be0 <wait_for_imu_data+0x258>)
     b2e:	0013      	movs	r3, r2
     b30:	334c      	adds	r3, #76	; 0x4c
     b32:	9304      	str	r3, [sp, #16]
     b34:	2301      	movs	r3, #1
     b36:	9303      	str	r3, [sp, #12]
     b38:	2414      	movs	r4, #20
     b3a:	9402      	str	r4, [sp, #8]
     b3c:	3c12      	subs	r4, #18
     b3e:	9401      	str	r4, [sp, #4]
     b40:	9300      	str	r3, [sp, #0]
     b42:	3301      	adds	r3, #1
     b44:	4c27      	ldr	r4, [pc, #156]	; (be4 <wait_for_imu_data+0x25c>)
     b46:	47a0      	blx	r4
     b48:	e78f      	b.n	a6a <wait_for_imu_data+0xe2>
        ++gyro_fs_sel;
     b4a:	3301      	adds	r3, #1
     b4c:	4a1d      	ldr	r2, [pc, #116]	; (bc4 <wait_for_imu_data+0x23c>)
     b4e:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     b50:	b2db      	uxtb	r3, r3
     b52:	005b      	lsls	r3, r3, #1
     b54:	2106      	movs	r1, #6
     b56:	400b      	ands	r3, r1
     b58:	3172      	adds	r1, #114	; 0x72
     b5a:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     b5c:	0011      	movs	r1, r2
     b5e:	317c      	adds	r1, #124	; 0x7c
     b60:	481f      	ldr	r0, [pc, #124]	; (be0 <wait_for_imu_data+0x258>)
     b62:	0013      	movs	r3, r2
     b64:	3378      	adds	r3, #120	; 0x78
     b66:	9304      	str	r3, [sp, #16]
     b68:	2301      	movs	r3, #1
     b6a:	9303      	str	r3, [sp, #12]
     b6c:	9302      	str	r3, [sp, #8]
     b6e:	2402      	movs	r4, #2
     b70:	9401      	str	r4, [sp, #4]
     b72:	9300      	str	r3, [sp, #0]
     b74:	3301      	adds	r3, #1
     b76:	4c1b      	ldr	r4, [pc, #108]	; (be4 <wait_for_imu_data+0x25c>)
     b78:	47a0      	blx	r4
        led_on();
     b7a:	2180      	movs	r1, #128	; 0x80
     b7c:	03c9      	lsls	r1, r1, #15
     b7e:	2001      	movs	r0, #1
     b80:	4b19      	ldr	r3, [pc, #100]	; (be8 <wait_for_imu_data+0x260>)
     b82:	4798      	blx	r3
     b84:	e7a9      	b.n	ada <wait_for_imu_data+0x152>
        --gyro_fs_sel;
     b86:	3b01      	subs	r3, #1
     b88:	4a0e      	ldr	r2, [pc, #56]	; (bc4 <wait_for_imu_data+0x23c>)
     b8a:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     b8c:	b2db      	uxtb	r3, r3
     b8e:	005b      	lsls	r3, r3, #1
     b90:	2106      	movs	r1, #6
     b92:	400b      	ands	r3, r1
     b94:	3172      	adds	r1, #114	; 0x72
     b96:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     b98:	0011      	movs	r1, r2
     b9a:	317c      	adds	r1, #124	; 0x7c
     b9c:	4810      	ldr	r0, [pc, #64]	; (be0 <wait_for_imu_data+0x258>)
     b9e:	0013      	movs	r3, r2
     ba0:	3378      	adds	r3, #120	; 0x78
     ba2:	9304      	str	r3, [sp, #16]
     ba4:	2301      	movs	r3, #1
     ba6:	9303      	str	r3, [sp, #12]
     ba8:	9302      	str	r3, [sp, #8]
     baa:	2402      	movs	r4, #2
     bac:	9401      	str	r4, [sp, #4]
     bae:	9300      	str	r3, [sp, #0]
     bb0:	3301      	adds	r3, #1
     bb2:	4c0c      	ldr	r4, [pc, #48]	; (be4 <wait_for_imu_data+0x25c>)
     bb4:	47a0      	blx	r4
        led_off();
     bb6:	2180      	movs	r1, #128	; 0x80
     bb8:	03c9      	lsls	r1, r1, #15
     bba:	2001      	movs	r0, #1
     bbc:	4b0b      	ldr	r3, [pc, #44]	; (bec <wait_for_imu_data+0x264>)
     bbe:	4798      	blx	r3
     bc0:	e78b      	b.n	ada <wait_for_imu_data+0x152>
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	200001d4 	.word	0x200001d4
     bc8:	00003d91 	.word	0x00003d91
     bcc:	012b4674 	.word	0x012b4674
     bd0:	20000178 	.word	0x20000178
     bd4:	0042943b 	.word	0x0042943b
     bd8:	00007333 	.word	0x00007333
     bdc:	00003333 	.word	0x00003333
     be0:	200002cc 	.word	0x200002cc
     be4:	00003d55 	.word	0x00003d55
     be8:	00001d01 	.word	0x00001d01
     bec:	00001d11 	.word	0x00001d11

00000bf0 <serial_init>:
    .rxtrig = UART4_DMA_RX_TRIGGER,
    .priority = UART4_DMA_PRIORITY
};


bool serial_init() {
     bf0:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

	// init uart
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     bf2:	22c0      	movs	r2, #192	; 0xc0
     bf4:	0092      	lsls	r2, r2, #2
     bf6:	2102      	movs	r1, #2
     bf8:	2000      	movs	r0, #0
     bfa:	4c19      	ldr	r4, [pc, #100]	; (c60 <serial_init+0x70>)
     bfc:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     bfe:	22c0      	movs	r2, #192	; 0xc0
     c00:	0312      	lsls	r2, r2, #12
     c02:	2102      	movs	r1, #2
     c04:	2000      	movs	r0, #0
     c06:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     c08:	22c0      	movs	r2, #192	; 0xc0
     c0a:	0212      	lsls	r2, r2, #8
     c0c:	2102      	movs	r1, #2
     c0e:	2001      	movs	r0, #1
     c10:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     c12:	22c0      	movs	r2, #192	; 0xc0
     c14:	0292      	lsls	r2, r2, #10
     c16:	2102      	movs	r1, #2
     c18:	2001      	movs	r0, #1
     c1a:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     c1c:	2596      	movs	r5, #150	; 0x96
     c1e:	01ad      	lsls	r5, r5, #6
     c20:	002b      	movs	r3, r5
     c22:	2200      	movs	r2, #0
     c24:	2101      	movs	r1, #1
     c26:	480f      	ldr	r0, [pc, #60]	; (c64 <serial_init+0x74>)
     c28:	4c0f      	ldr	r4, [pc, #60]	; (c68 <serial_init+0x78>)
     c2a:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     c2c:	002b      	movs	r3, r5
     c2e:	2201      	movs	r2, #1
     c30:	2103      	movs	r1, #3
     c32:	480e      	ldr	r0, [pc, #56]	; (c6c <serial_init+0x7c>)
     c34:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     c36:	002b      	movs	r3, r5
     c38:	2201      	movs	r2, #1
     c3a:	2103      	movs	r1, #3
     c3c:	480c      	ldr	r0, [pc, #48]	; (c70 <serial_init+0x80>)
     c3e:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     c40:	2396      	movs	r3, #150	; 0x96
     c42:	015b      	lsls	r3, r3, #5
     c44:	2200      	movs	r2, #0
     c46:	2101      	movs	r1, #1
     c48:	480a      	ldr	r0, [pc, #40]	; (c74 <serial_init+0x84>)
     c4a:	47a0      	blx	r4
    
	// init usb
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     c4c:	2180      	movs	r1, #128	; 0x80
     c4e:	20e0      	movs	r0, #224	; 0xe0
     c50:	0049      	lsls	r1, r1, #1
     c52:	00c0      	lsls	r0, r0, #3
     c54:	4b08      	ldr	r3, [pc, #32]	; (c78 <serial_init+0x88>)
     c56:	4798      	blx	r3
	usb_attach();
     c58:	4b08      	ldr	r3, [pc, #32]	; (c7c <serial_init+0x8c>)
     c5a:	4798      	blx	r3
}
     c5c:	bd70      	pop	{r4, r5, r6, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00001d21 	.word	0x00001d21
     c64:	42000800 	.word	0x42000800
     c68:	00002429 	.word	0x00002429
     c6c:	42000c00 	.word	0x42000c00
     c70:	42001800 	.word	0x42001800
     c74:	42001c00 	.word	0x42001c00
     c78:	000040f9 	.word	0x000040f9
     c7c:	00002a8d 	.word	0x00002a8d

00000c80 <serial_write_start>:
    // will kill usb process which would remain running
    rtos_usb_quit();
}


bool serial_write_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     c80:	b570      	push	{r4, r5, r6, lr}
     c82:	000e      	movs	r6, r1
     c84:	0013      	movs	r3, r2
    switch (port) {
     c86:	2804      	cmp	r0, #4
     c88:	d825      	bhi.n	cd6 <serial_write_start+0x56>
     c8a:	0080      	lsls	r0, r0, #2
     c8c:	4d13      	ldr	r5, [pc, #76]	; (cdc <serial_write_start+0x5c>)
     c8e:	582c      	ldr	r4, [r5, r0]
     c90:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_send_buffer(buffer, count);
     c92:	0011      	movs	r1, r2
     c94:	0030      	movs	r0, r6
     c96:	4b12      	ldr	r3, [pc, #72]	; (ce0 <serial_write_start+0x60>)
     c98:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     c9a:	2001      	movs	r0, #1
}
     c9c:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_send_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     c9e:	4911      	ldr	r1, [pc, #68]	; (ce4 <serial_write_start+0x64>)
     ca0:	0032      	movs	r2, r6
     ca2:	4811      	ldr	r0, [pc, #68]	; (ce8 <serial_write_start+0x68>)
     ca4:	4c11      	ldr	r4, [pc, #68]	; (cec <serial_write_start+0x6c>)
     ca6:	47a0      	blx	r4
    return true;
     ca8:	2001      	movs	r0, #1
        break;
     caa:	e7f7      	b.n	c9c <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     cac:	4910      	ldr	r1, [pc, #64]	; (cf0 <serial_write_start+0x70>)
     cae:	0032      	movs	r2, r6
     cb0:	4810      	ldr	r0, [pc, #64]	; (cf4 <serial_write_start+0x74>)
     cb2:	4c0e      	ldr	r4, [pc, #56]	; (cec <serial_write_start+0x6c>)
     cb4:	47a0      	blx	r4
    return true;
     cb6:	2001      	movs	r0, #1
        break;
     cb8:	e7f0      	b.n	c9c <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     cba:	490f      	ldr	r1, [pc, #60]	; (cf8 <serial_write_start+0x78>)
     cbc:	0032      	movs	r2, r6
     cbe:	480f      	ldr	r0, [pc, #60]	; (cfc <serial_write_start+0x7c>)
     cc0:	4c0a      	ldr	r4, [pc, #40]	; (cec <serial_write_start+0x6c>)
     cc2:	47a0      	blx	r4
    return true;
     cc4:	2001      	movs	r0, #1
        break;
     cc6:	e7e9      	b.n	c9c <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     cc8:	490d      	ldr	r1, [pc, #52]	; (d00 <serial_write_start+0x80>)
     cca:	0032      	movs	r2, r6
     ccc:	480d      	ldr	r0, [pc, #52]	; (d04 <serial_write_start+0x84>)
     cce:	4c07      	ldr	r4, [pc, #28]	; (cec <serial_write_start+0x6c>)
     cd0:	47a0      	blx	r4
    return true;
     cd2:	2001      	movs	r0, #1
        break;
     cd4:	e7e2      	b.n	c9c <serial_write_start+0x1c>
    switch (port) {
     cd6:	2000      	movs	r0, #0
     cd8:	e7e0      	b.n	c9c <serial_write_start+0x1c>
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	00005830 	.word	0x00005830
     ce0:	000041a1 	.word	0x000041a1
     ce4:	000058a8 	.word	0x000058a8
     ce8:	42000800 	.word	0x42000800
     cec:	00003f29 	.word	0x00003f29
     cf0:	000058b0 	.word	0x000058b0
     cf4:	42000c00 	.word	0x42000c00
     cf8:	000058b8 	.word	0x000058b8
     cfc:	42001800 	.word	0x42001800
     d00:	000058c0 	.word	0x000058c0
     d04:	42001c00 	.word	0x42001c00

00000d08 <serial_write_wait_until_complete>:

bool serial_write_wait_until_complete(Serial_Port_IDs port) {
     d08:	b510      	push	{r4, lr}
    switch (port) {
     d0a:	2804      	cmp	r0, #4
     d0c:	d81b      	bhi.n	d46 <serial_write_wait_until_complete+0x3e>
     d0e:	0080      	lsls	r0, r0, #2
     d10:	4b0e      	ldr	r3, [pc, #56]	; (d4c <serial_write_wait_until_complete+0x44>)
     d12:	581b      	ldr	r3, [r3, r0]
     d14:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_send_complete();
     d16:	4b0e      	ldr	r3, [pc, #56]	; (d50 <serial_write_wait_until_complete+0x48>)
     d18:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     d1a:	2001      	movs	r0, #1
}
     d1c:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_send_complete(&uart1_descriptor);
     d1e:	480d      	ldr	r0, [pc, #52]	; (d54 <serial_write_wait_until_complete+0x4c>)
     d20:	4b0d      	ldr	r3, [pc, #52]	; (d58 <serial_write_wait_until_complete+0x50>)
     d22:	4798      	blx	r3
    return true;
     d24:	2001      	movs	r0, #1
        break;
     d26:	e7f9      	b.n	d1c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart2_descriptor);
     d28:	480c      	ldr	r0, [pc, #48]	; (d5c <serial_write_wait_until_complete+0x54>)
     d2a:	4b0b      	ldr	r3, [pc, #44]	; (d58 <serial_write_wait_until_complete+0x50>)
     d2c:	4798      	blx	r3
    return true;
     d2e:	2001      	movs	r0, #1
        break;
     d30:	e7f4      	b.n	d1c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart3_descriptor);
     d32:	480b      	ldr	r0, [pc, #44]	; (d60 <serial_write_wait_until_complete+0x58>)
     d34:	4b08      	ldr	r3, [pc, #32]	; (d58 <serial_write_wait_until_complete+0x50>)
     d36:	4798      	blx	r3
    return true;
     d38:	2001      	movs	r0, #1
        break;
     d3a:	e7ef      	b.n	d1c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart4_descriptor);
     d3c:	4809      	ldr	r0, [pc, #36]	; (d64 <serial_write_wait_until_complete+0x5c>)
     d3e:	4b06      	ldr	r3, [pc, #24]	; (d58 <serial_write_wait_until_complete+0x50>)
     d40:	4798      	blx	r3
    return true;
     d42:	2001      	movs	r0, #1
        break;
     d44:	e7ea      	b.n	d1c <serial_write_wait_until_complete+0x14>
    switch (port) {
     d46:	2000      	movs	r0, #0
     d48:	e7e8      	b.n	d1c <serial_write_wait_until_complete+0x14>
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	00005844 	.word	0x00005844
     d50:	000041ed 	.word	0x000041ed
     d54:	000058a8 	.word	0x000058a8
     d58:	00003f99 	.word	0x00003f99
     d5c:	000058b0 	.word	0x000058b0
     d60:	000058b8 	.word	0x000058b8
     d64:	000058c0 	.word	0x000058c0

00000d68 <serial_read_start>:


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     d68:	b570      	push	{r4, r5, r6, lr}
     d6a:	000e      	movs	r6, r1
     d6c:	0013      	movs	r3, r2
    switch (port) {
     d6e:	2804      	cmp	r0, #4
     d70:	d825      	bhi.n	dbe <serial_read_start+0x56>
     d72:	0080      	lsls	r0, r0, #2
     d74:	4d13      	ldr	r5, [pc, #76]	; (dc4 <serial_read_start+0x5c>)
     d76:	582c      	ldr	r4, [r5, r0]
     d78:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_read_buffer(buffer, count);
     d7a:	0011      	movs	r1, r2
     d7c:	0030      	movs	r0, r6
     d7e:	4b12      	ldr	r3, [pc, #72]	; (dc8 <serial_read_start+0x60>)
     d80:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     d82:	2001      	movs	r0, #1
}
     d84:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     d86:	4911      	ldr	r1, [pc, #68]	; (dcc <serial_read_start+0x64>)
     d88:	0032      	movs	r2, r6
     d8a:	4811      	ldr	r0, [pc, #68]	; (dd0 <serial_read_start+0x68>)
     d8c:	4c11      	ldr	r4, [pc, #68]	; (dd4 <serial_read_start+0x6c>)
     d8e:	47a0      	blx	r4
    return true;
     d90:	2001      	movs	r0, #1
        break;
     d92:	e7f7      	b.n	d84 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     d94:	4910      	ldr	r1, [pc, #64]	; (dd8 <serial_read_start+0x70>)
     d96:	0032      	movs	r2, r6
     d98:	4810      	ldr	r0, [pc, #64]	; (ddc <serial_read_start+0x74>)
     d9a:	4c0e      	ldr	r4, [pc, #56]	; (dd4 <serial_read_start+0x6c>)
     d9c:	47a0      	blx	r4
    return true;
     d9e:	2001      	movs	r0, #1
        break;
     da0:	e7f0      	b.n	d84 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     da2:	490f      	ldr	r1, [pc, #60]	; (de0 <serial_read_start+0x78>)
     da4:	0032      	movs	r2, r6
     da6:	480f      	ldr	r0, [pc, #60]	; (de4 <serial_read_start+0x7c>)
     da8:	4c0a      	ldr	r4, [pc, #40]	; (dd4 <serial_read_start+0x6c>)
     daa:	47a0      	blx	r4
    return true;
     dac:	2001      	movs	r0, #1
        break;
     dae:	e7e9      	b.n	d84 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     db0:	490d      	ldr	r1, [pc, #52]	; (de8 <serial_read_start+0x80>)
     db2:	0032      	movs	r2, r6
     db4:	480d      	ldr	r0, [pc, #52]	; (dec <serial_read_start+0x84>)
     db6:	4c07      	ldr	r4, [pc, #28]	; (dd4 <serial_read_start+0x6c>)
     db8:	47a0      	blx	r4
    return true;
     dba:	2001      	movs	r0, #1
        break;
     dbc:	e7e2      	b.n	d84 <serial_read_start+0x1c>
    switch (port) {
     dbe:	2000      	movs	r0, #0
     dc0:	e7e0      	b.n	d84 <serial_read_start+0x1c>
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	00005858 	.word	0x00005858
     dc8:	00004209 	.word	0x00004209
     dcc:	000058a8 	.word	0x000058a8
     dd0:	42000800 	.word	0x42000800
     dd4:	00003fa9 	.word	0x00003fa9
     dd8:	000058b0 	.word	0x000058b0
     ddc:	42000c00 	.word	0x42000c00
     de0:	000058b8 	.word	0x000058b8
     de4:	42001800 	.word	0x42001800
     de8:	000058c0 	.word	0x000058c0
     dec:	42001c00 	.word	0x42001c00

00000df0 <serial_read_wait_until_complete>:

bool serial_read_wait_until_complete(Serial_Port_IDs port) {
     df0:	b510      	push	{r4, lr}
    switch (port) {
     df2:	2804      	cmp	r0, #4
     df4:	d81b      	bhi.n	e2e <serial_read_wait_until_complete+0x3e>
     df6:	0080      	lsls	r0, r0, #2
     df8:	4b0e      	ldr	r3, [pc, #56]	; (e34 <serial_read_wait_until_complete+0x44>)
     dfa:	581b      	ldr	r3, [r3, r0]
     dfc:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete();
     dfe:	4b0e      	ldr	r3, [pc, #56]	; (e38 <serial_read_wait_until_complete+0x48>)
     e00:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     e02:	2001      	movs	r0, #1
}
     e04:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete(&uart1_descriptor);
     e06:	480d      	ldr	r0, [pc, #52]	; (e3c <serial_read_wait_until_complete+0x4c>)
     e08:	4b0d      	ldr	r3, [pc, #52]	; (e40 <serial_read_wait_until_complete+0x50>)
     e0a:	4798      	blx	r3
    return true;
     e0c:	2001      	movs	r0, #1
        break;
     e0e:	e7f9      	b.n	e04 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart2_descriptor);
     e10:	480c      	ldr	r0, [pc, #48]	; (e44 <serial_read_wait_until_complete+0x54>)
     e12:	4b0b      	ldr	r3, [pc, #44]	; (e40 <serial_read_wait_until_complete+0x50>)
     e14:	4798      	blx	r3
    return true;
     e16:	2001      	movs	r0, #1
        break;
     e18:	e7f4      	b.n	e04 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart3_descriptor);
     e1a:	480b      	ldr	r0, [pc, #44]	; (e48 <serial_read_wait_until_complete+0x58>)
     e1c:	4b08      	ldr	r3, [pc, #32]	; (e40 <serial_read_wait_until_complete+0x50>)
     e1e:	4798      	blx	r3
    return true;
     e20:	2001      	movs	r0, #1
        break;
     e22:	e7ef      	b.n	e04 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart4_descriptor);
     e24:	4809      	ldr	r0, [pc, #36]	; (e4c <serial_read_wait_until_complete+0x5c>)
     e26:	4b06      	ldr	r3, [pc, #24]	; (e40 <serial_read_wait_until_complete+0x50>)
     e28:	4798      	blx	r3
    return true;
     e2a:	2001      	movs	r0, #1
        break;
     e2c:	e7ea      	b.n	e04 <serial_read_wait_until_complete+0x14>
    switch (port) {
     e2e:	2000      	movs	r0, #0
     e30:	e7e8      	b.n	e04 <serial_read_wait_until_complete+0x14>
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	0000586c 	.word	0x0000586c
     e38:	00004241 	.word	0x00004241
     e3c:	000058a8 	.word	0x000058a8
     e40:	00004019 	.word	0x00004019
     e44:	000058b0 	.word	0x000058b0
     e48:	000058b8 	.word	0x000058b8
     e4c:	000058c0 	.word	0x000058c0

00000e50 <serial_read_wait_until_complete_or_timeout>:

bool serial_read_wait_until_complete_or_timeout(Serial_Port_IDs port, uint32_t timeout_ms) {
     e50:	b510      	push	{r4, lr}
    switch (port) {
     e52:	2804      	cmp	r0, #4
     e54:	d827      	bhi.n	ea6 <serial_read_wait_until_complete_or_timeout+0x56>
     e56:	0080      	lsls	r0, r0, #2
     e58:	4b14      	ldr	r3, [pc, #80]	; (eac <serial_read_wait_until_complete_or_timeout+0x5c>)
     e5a:	581b      	ldr	r3, [r3, r0]
     e5c:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete(); // USB doesn't time out
     e5e:	4b14      	ldr	r3, [pc, #80]	; (eb0 <serial_read_wait_until_complete_or_timeout+0x60>)
     e60:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     e62:	2001      	movs	r0, #1
}
     e64:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete_or_timeout(&uart1_descriptor, timeout_ms * time_ticks_ms_mult);
     e66:	4b13      	ldr	r3, [pc, #76]	; (eb4 <serial_read_wait_until_complete_or_timeout+0x64>)
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	4359      	muls	r1, r3
     e6c:	4812      	ldr	r0, [pc, #72]	; (eb8 <serial_read_wait_until_complete_or_timeout+0x68>)
     e6e:	4b13      	ldr	r3, [pc, #76]	; (ebc <serial_read_wait_until_complete_or_timeout+0x6c>)
     e70:	4798      	blx	r3
    return true;
     e72:	2001      	movs	r0, #1
        break;
     e74:	e7f6      	b.n	e64 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart2_descriptor, timeout_ms * time_ticks_ms_mult);
     e76:	4b0f      	ldr	r3, [pc, #60]	; (eb4 <serial_read_wait_until_complete_or_timeout+0x64>)
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	4359      	muls	r1, r3
     e7c:	4810      	ldr	r0, [pc, #64]	; (ec0 <serial_read_wait_until_complete_or_timeout+0x70>)
     e7e:	4b0f      	ldr	r3, [pc, #60]	; (ebc <serial_read_wait_until_complete_or_timeout+0x6c>)
     e80:	4798      	blx	r3
    return true;
     e82:	2001      	movs	r0, #1
        break;
     e84:	e7ee      	b.n	e64 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart3_descriptor, timeout_ms * time_ticks_ms_mult);
     e86:	4b0b      	ldr	r3, [pc, #44]	; (eb4 <serial_read_wait_until_complete_or_timeout+0x64>)
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	4359      	muls	r1, r3
     e8c:	480d      	ldr	r0, [pc, #52]	; (ec4 <serial_read_wait_until_complete_or_timeout+0x74>)
     e8e:	4b0b      	ldr	r3, [pc, #44]	; (ebc <serial_read_wait_until_complete_or_timeout+0x6c>)
     e90:	4798      	blx	r3
    return true;
     e92:	2001      	movs	r0, #1
        break;
     e94:	e7e6      	b.n	e64 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart4_descriptor, timeout_ms * time_ticks_ms_mult);
     e96:	4b07      	ldr	r3, [pc, #28]	; (eb4 <serial_read_wait_until_complete_or_timeout+0x64>)
     e98:	681b      	ldr	r3, [r3, #0]
     e9a:	4359      	muls	r1, r3
     e9c:	480a      	ldr	r0, [pc, #40]	; (ec8 <serial_read_wait_until_complete_or_timeout+0x78>)
     e9e:	4b07      	ldr	r3, [pc, #28]	; (ebc <serial_read_wait_until_complete_or_timeout+0x6c>)
     ea0:	4798      	blx	r3
    return true;
     ea2:	2001      	movs	r0, #1
        break;
     ea4:	e7de      	b.n	e64 <serial_read_wait_until_complete_or_timeout+0x14>
    switch (port) {
     ea6:	2000      	movs	r0, #0
     ea8:	e7dc      	b.n	e64 <serial_read_wait_until_complete_or_timeout+0x14>
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	00005880 	.word	0x00005880
     eb0:	00004241 	.word	0x00004241
     eb4:	000059bc 	.word	0x000059bc
     eb8:	000058a8 	.word	0x000058a8
     ebc:	00004029 	.word	0x00004029
     ec0:	000058b0 	.word	0x000058b0
     ec4:	000058b8 	.word	0x000058b8
     ec8:	000058c0 	.word	0x000058c0

00000ecc <serial_flush>:

bool serial_flush(Serial_Port_IDs port) {
     ecc:	b510      	push	{r4, lr}
    switch (port) {
     ece:	2804      	cmp	r0, #4
     ed0:	d803      	bhi.n	eda <serial_flush+0xe>
     ed2:	0080      	lsls	r0, r0, #2
     ed4:	4b0d      	ldr	r3, [pc, #52]	; (f0c <serial_flush+0x40>)
     ed6:	581b      	ldr	r3, [r3, r0]
     ed8:	469f      	mov	pc, r3
     eda:	2000      	movs	r0, #0
     edc:	e014      	b.n	f08 <serial_flush+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_flush(UART1_SERCOM);
     ede:	480c      	ldr	r0, [pc, #48]	; (f10 <serial_flush+0x44>)
     ee0:	4b0c      	ldr	r3, [pc, #48]	; (f14 <serial_flush+0x48>)
     ee2:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     ee4:	2001      	movs	r0, #1
        break;
     ee6:	e00f      	b.n	f08 <serial_flush+0x3c>
        uart_flush(UART2_SERCOM);
     ee8:	480b      	ldr	r0, [pc, #44]	; (f18 <serial_flush+0x4c>)
     eea:	4b0a      	ldr	r3, [pc, #40]	; (f14 <serial_flush+0x48>)
     eec:	4798      	blx	r3
    return true;
     eee:	2001      	movs	r0, #1
        break;
     ef0:	e00a      	b.n	f08 <serial_flush+0x3c>
        uart_flush(UART3_SERCOM);
     ef2:	480a      	ldr	r0, [pc, #40]	; (f1c <serial_flush+0x50>)
     ef4:	4b07      	ldr	r3, [pc, #28]	; (f14 <serial_flush+0x48>)
     ef6:	4798      	blx	r3
    return true;
     ef8:	2001      	movs	r0, #1
        break;
     efa:	e005      	b.n	f08 <serial_flush+0x3c>
        uart_flush(UART4_SERCOM);
     efc:	4808      	ldr	r0, [pc, #32]	; (f20 <serial_flush+0x54>)
     efe:	4b05      	ldr	r3, [pc, #20]	; (f14 <serial_flush+0x48>)
     f00:	4798      	blx	r3
    return true;
     f02:	2001      	movs	r0, #1
        break;
     f04:	e000      	b.n	f08 <serial_flush+0x3c>
    return true;
     f06:	2001      	movs	r0, #1
     f08:	bd10      	pop	{r4, pc}
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	00005894 	.word	0x00005894
     f10:	42000800 	.word	0x42000800
     f14:	00002485 	.word	0x00002485
     f18:	42000c00 	.word	0x42000c00
     f1c:	42001800 	.word	0x42001800
     f20:	42001c00 	.word	0x42001c00

00000f24 <buzzer>:

void shutdown() {
	serial_quit();
}

void buzzer() {
     f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f26:	46ce      	mov	lr, r9
     f28:	4647      	mov	r7, r8
     f2a:	b580      	push	{r7, lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     f2c:	2106      	movs	r1, #6
     f2e:	482a      	ldr	r0, [pc, #168]	; (fd8 <buzzer+0xb4>)
     f30:	4b2a      	ldr	r3, [pc, #168]	; (fdc <buzzer+0xb8>)
     f32:	4798      	blx	r3
     f34:	2800      	cmp	r0, #0
     f36:	d019      	beq.n	f6c <buzzer+0x48>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     f38:	4929      	ldr	r1, [pc, #164]	; (fe0 <buzzer+0xbc>)
     f3a:	4827      	ldr	r0, [pc, #156]	; (fd8 <buzzer+0xb4>)
     f3c:	4b29      	ldr	r3, [pc, #164]	; (fe4 <buzzer+0xc0>)
     f3e:	4798      	blx	r3
     f40:	2800      	cmp	r0, #0
     f42:	d016      	beq.n	f72 <buzzer+0x4e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     f44:	2200      	movs	r2, #0
     f46:	2101      	movs	r1, #1
     f48:	4823      	ldr	r0, [pc, #140]	; (fd8 <buzzer+0xb4>)
     f4a:	4b27      	ldr	r3, [pc, #156]	; (fe8 <buzzer+0xc4>)
     f4c:	4798      	blx	r3
     f4e:	2800      	cmp	r0, #0
     f50:	d012      	beq.n	f78 <buzzer+0x54>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     f52:	4821      	ldr	r0, [pc, #132]	; (fd8 <buzzer+0xb4>)
     f54:	4b25      	ldr	r3, [pc, #148]	; (fec <buzzer+0xc8>)
     f56:	4798      	blx	r3
     f58:	2800      	cmp	r0, #0
     f5a:	d010      	beq.n	f7e <buzzer+0x5a>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
     f5c:	2280      	movs	r2, #128	; 0x80
     f5e:	0412      	lsls	r2, r2, #16
     f60:	2104      	movs	r1, #4
     f62:	2001      	movs	r0, #1
     f64:	4b22      	ldr	r3, [pc, #136]	; (ff0 <buzzer+0xcc>)
     f66:	4798      	blx	r3
	
	for (int i = 0; i < 2; ++i) {
     f68:	2500      	movs	r5, #0
     f6a:	e02e      	b.n	fca <buzzer+0xa6>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     f6c:	4b21      	ldr	r3, [pc, #132]	; (ff4 <buzzer+0xd0>)
     f6e:	4798      	blx	r3
     f70:	e7e2      	b.n	f38 <buzzer+0x14>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     f72:	4b20      	ldr	r3, [pc, #128]	; (ff4 <buzzer+0xd0>)
     f74:	4798      	blx	r3
     f76:	e7e5      	b.n	f44 <buzzer+0x20>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     f78:	4b1e      	ldr	r3, [pc, #120]	; (ff4 <buzzer+0xd0>)
     f7a:	4798      	blx	r3
     f7c:	e7e9      	b.n	f52 <buzzer+0x2e>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     f7e:	4b1d      	ldr	r3, [pc, #116]	; (ff4 <buzzer+0xd0>)
     f80:	4798      	blx	r3
     f82:	e7eb      	b.n	f5c <buzzer+0x38>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
     f84:	4b14      	ldr	r3, [pc, #80]	; (fd8 <buzzer+0xb4>)
     f86:	4698      	mov	r8, r3
     f88:	22fc      	movs	r2, #252	; 0xfc
     f8a:	0592      	lsls	r2, r2, #22
     f8c:	2101      	movs	r1, #1
     f8e:	0018      	movs	r0, r3
     f90:	4f15      	ldr	r7, [pc, #84]	; (fe8 <buzzer+0xc4>)
     f92:	47b8      	blx	r7
		led_on();
     f94:	2680      	movs	r6, #128	; 0x80
     f96:	03f6      	lsls	r6, r6, #15
     f98:	0031      	movs	r1, r6
     f9a:	2001      	movs	r0, #1
     f9c:	4b16      	ldr	r3, [pc, #88]	; (ff8 <buzzer+0xd4>)
     f9e:	4798      	blx	r3
		rtos_delay_ms(75);
     fa0:	4b16      	ldr	r3, [pc, #88]	; (ffc <buzzer+0xd8>)
     fa2:	681a      	ldr	r2, [r3, #0]
     fa4:	0093      	lsls	r3, r2, #2
     fa6:	189b      	adds	r3, r3, r2
     fa8:	011c      	lsls	r4, r3, #4
     faa:	1ae4      	subs	r4, r4, r3
     fac:	0020      	movs	r0, r4
     fae:	4b14      	ldr	r3, [pc, #80]	; (1000 <buzzer+0xdc>)
     fb0:	4699      	mov	r9, r3
     fb2:	4798      	blx	r3
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
     fb4:	2200      	movs	r2, #0
     fb6:	2101      	movs	r1, #1
     fb8:	4640      	mov	r0, r8
     fba:	47b8      	blx	r7
		led_off();
     fbc:	0031      	movs	r1, r6
     fbe:	2001      	movs	r0, #1
     fc0:	4b10      	ldr	r3, [pc, #64]	; (1004 <buzzer+0xe0>)
     fc2:	4798      	blx	r3
		rtos_delay_ms(75);
     fc4:	0020      	movs	r0, r4
     fc6:	47c8      	blx	r9
	for (int i = 0; i < 2; ++i) {
     fc8:	3501      	adds	r5, #1
     fca:	2d01      	cmp	r5, #1
     fcc:	ddda      	ble.n	f84 <buzzer+0x60>
	// 	led_on();
	// 	rtos_delay_ms(200);
	// 	led_off();
	// 	rtos_delay_ms(200);
	// }
     fce:	bcc0      	pop	{r6, r7}
     fd0:	46b9      	mov	r9, r7
     fd2:	46b0      	mov	r8, r6
     fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	42003c00 	.word	0x42003c00
     fdc:	00001d6d 	.word	0x00001d6d
     fe0:	45309000 	.word	0x45309000
     fe4:	00001ed1 	.word	0x00001ed1
     fe8:	00001f5d 	.word	0x00001f5d
     fec:	00001e41 	.word	0x00001e41
     ff0:	00001d21 	.word	0x00001d21
     ff4:	00002f49 	.word	0x00002f49
     ff8:	00001d01 	.word	0x00001d01
     ffc:	000059bc 	.word	0x000059bc
    1000:	000034a9 	.word	0x000034a9
    1004:	00001d11 	.word	0x00001d11

00001008 <selftest>:
bool selftest() {
    1008:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
    100a:	4b0a      	ldr	r3, [pc, #40]	; (1034 <selftest+0x2c>)
    100c:	4798      	blx	r3
    100e:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
    1010:	4809      	ldr	r0, [pc, #36]	; (1038 <selftest+0x30>)
    1012:	4b0a      	ldr	r3, [pc, #40]	; (103c <selftest+0x34>)
    1014:	4798      	blx	r3
    1016:	1e05      	subs	r5, r0, #0
    1018:	d000      	beq.n	101c <selftest+0x14>
    101a:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
    101c:	4b08      	ldr	r3, [pc, #32]	; (1040 <selftest+0x38>)
    101e:	4798      	blx	r3
    1020:	1e04      	subs	r4, r0, #0
    1022:	d000      	beq.n	1026 <selftest+0x1e>
    1024:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
    1026:	4807      	ldr	r0, [pc, #28]	; (1044 <selftest+0x3c>)
    1028:	4b07      	ldr	r3, [pc, #28]	; (1048 <selftest+0x40>)
    102a:	4798      	blx	r3
    102c:	2800      	cmp	r0, #0
    102e:	d000      	beq.n	1032 <selftest+0x2a>
    1030:	0020      	movs	r0, r4
}
    1032:	bd70      	pop	{r4, r5, r6, pc}
    1034:	0000090d 	.word	0x0000090d
    1038:	20000328 	.word	0x20000328
    103c:	0000137d 	.word	0x0000137d
    1040:	0000081d 	.word	0x0000081d
    1044:	20000344 	.word	0x20000344
    1048:	00001811 	.word	0x00001811

0000104c <init>:
bool init() {
    104c:	b570      	push	{r4, r5, r6, lr}
    104e:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
    1050:	22c0      	movs	r2, #192	; 0xc0
    1052:	0412      	lsls	r2, r2, #16
    1054:	2102      	movs	r1, #2
    1056:	2000      	movs	r0, #0
    1058:	4c35      	ldr	r4, [pc, #212]	; (1130 <init+0xe4>)
    105a:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
    105c:	2280      	movs	r2, #128	; 0x80
    105e:	0352      	lsls	r2, r2, #13
    1060:	2103      	movs	r1, #3
    1062:	2000      	movs	r0, #0
    1064:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
    1066:	2480      	movs	r4, #128	; 0x80
    1068:	0564      	lsls	r4, r4, #21
    106a:	0021      	movs	r1, r4
    106c:	2000      	movs	r0, #0
    106e:	4e31      	ldr	r6, [pc, #196]	; (1134 <init+0xe8>)
    1070:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
    1072:	2580      	movs	r5, #128	; 0x80
    1074:	062d      	lsls	r5, r5, #24
    1076:	0029      	movs	r1, r5
    1078:	2001      	movs	r0, #1
    107a:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
    107c:	0021      	movs	r1, r4
    107e:	2000      	movs	r0, #0
    1080:	4c2d      	ldr	r4, [pc, #180]	; (1138 <init+0xec>)
    1082:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
    1084:	0029      	movs	r1, r5
    1086:	2001      	movs	r0, #1
    1088:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    108a:	4b2c      	ldr	r3, [pc, #176]	; (113c <init+0xf0>)
    108c:	9301      	str	r3, [sp, #4]
    108e:	2300      	movs	r3, #0
    1090:	9300      	str	r3, [sp, #0]
    1092:	3302      	adds	r3, #2
    1094:	2200      	movs	r2, #0
    1096:	2100      	movs	r1, #0
    1098:	4829      	ldr	r0, [pc, #164]	; (1140 <init+0xf4>)
    109a:	4c2a      	ldr	r4, [pc, #168]	; (1144 <init+0xf8>)
    109c:	47a0      	blx	r4
    109e:	2800      	cmp	r0, #0
    10a0:	d039      	beq.n	1116 <init+0xca>
	dma_init();
    10a2:	4b29      	ldr	r3, [pc, #164]	; (1148 <init+0xfc>)
    10a4:	4798      	blx	r3
	if (!serial_init()) SOS();
    10a6:	4b29      	ldr	r3, [pc, #164]	; (114c <init+0x100>)
    10a8:	4798      	blx	r3
    10aa:	2800      	cmp	r0, #0
    10ac:	d036      	beq.n	111c <init+0xd0>
	if (!imu_init()) SOS();
    10ae:	4b28      	ldr	r3, [pc, #160]	; (1150 <init+0x104>)
    10b0:	4798      	blx	r3
    10b2:	2800      	cmp	r0, #0
    10b4:	d035      	beq.n	1122 <init+0xd6>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
    10b6:	ab02      	add	r3, sp, #8
    10b8:	2280      	movs	r2, #128	; 0x80
    10ba:	0552      	lsls	r2, r2, #21
    10bc:	9202      	str	r2, [sp, #8]
    10be:	2100      	movs	r1, #0
    10c0:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    10c2:	4824      	ldr	r0, [pc, #144]	; (1154 <init+0x108>)
    10c4:	9b03      	ldr	r3, [sp, #12]
    10c6:	491e      	ldr	r1, [pc, #120]	; (1140 <init+0xf4>)
    10c8:	4c23      	ldr	r4, [pc, #140]	; (1158 <init+0x10c>)
    10ca:	47a0      	blx	r4
    10cc:	2800      	cmp	r0, #0
    10ce:	d02b      	beq.n	1128 <init+0xdc>
	init_eeprom();
    10d0:	4b22      	ldr	r3, [pc, #136]	; (115c <init+0x110>)
    10d2:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
    10d4:	ab02      	add	r3, sp, #8
    10d6:	4c22      	ldr	r4, [pc, #136]	; (1160 <init+0x114>)
    10d8:	6822      	ldr	r2, [r4, #0]
    10da:	9202      	str	r2, [sp, #8]
    10dc:	7921      	ldrb	r1, [r4, #4]
    10de:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
    10e0:	4d17      	ldr	r5, [pc, #92]	; (1140 <init+0xf4>)
    10e2:	4820      	ldr	r0, [pc, #128]	; (1164 <init+0x118>)
    10e4:	2107      	movs	r1, #7
    10e6:	9101      	str	r1, [sp, #4]
    10e8:	2180      	movs	r1, #128	; 0x80
    10ea:	03c9      	lsls	r1, r1, #15
    10ec:	9100      	str	r1, [sp, #0]
    10ee:	9b03      	ldr	r3, [sp, #12]
    10f0:	0029      	movs	r1, r5
    10f2:	4e1d      	ldr	r6, [pc, #116]	; (1168 <init+0x11c>)
    10f4:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
    10f6:	2280      	movs	r2, #128	; 0x80
    10f8:	2190      	movs	r1, #144	; 0x90
    10fa:	481c      	ldr	r0, [pc, #112]	; (116c <init+0x120>)
    10fc:	3408      	adds	r4, #8
    10fe:	9400      	str	r4, [sp, #0]
    1100:	002b      	movs	r3, r5
    1102:	0092      	lsls	r2, r2, #2
    1104:	0109      	lsls	r1, r1, #4
    1106:	4c1a      	ldr	r4, [pc, #104]	; (1170 <init+0x124>)
    1108:	47a0      	blx	r4
	init_globals();
    110a:	4b1a      	ldr	r3, [pc, #104]	; (1174 <init+0x128>)
    110c:	4798      	blx	r3
	return selftest();
    110e:	4b1a      	ldr	r3, [pc, #104]	; (1178 <init+0x12c>)
    1110:	4798      	blx	r3
}
    1112:	b004      	add	sp, #16
    1114:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    1116:	4b19      	ldr	r3, [pc, #100]	; (117c <init+0x130>)
    1118:	4798      	blx	r3
    111a:	e7c2      	b.n	10a2 <init+0x56>
	if (!serial_init()) SOS();
    111c:	4b17      	ldr	r3, [pc, #92]	; (117c <init+0x130>)
    111e:	4798      	blx	r3
    1120:	e7c5      	b.n	10ae <init+0x62>
	if (!imu_init()) SOS();
    1122:	4b16      	ldr	r3, [pc, #88]	; (117c <init+0x130>)
    1124:	4798      	blx	r3
    1126:	e7c6      	b.n	10b6 <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    1128:	4b14      	ldr	r3, [pc, #80]	; (117c <init+0x130>)
    112a:	4798      	blx	r3
    112c:	e7d0      	b.n	10d0 <init+0x84>
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	00001d21 	.word	0x00001d21
    1134:	00001d01 	.word	0x00001d01
    1138:	00001cf1 	.word	0x00001cf1
    113c:	005b8d80 	.word	0x005b8d80
    1140:	42001400 	.word	0x42001400
    1144:	00002185 	.word	0x00002185
    1148:	0000146d 	.word	0x0000146d
    114c:	00000bf1 	.word	0x00000bf1
    1150:	0000088d 	.word	0x0000088d
    1154:	20000328 	.word	0x20000328
    1158:	000013f9 	.word	0x000013f9
    115c:	000007c9 	.word	0x000007c9
    1160:	000058c8 	.word	0x000058c8
    1164:	20000344 	.word	0x20000344
    1168:	00001789 	.word	0x00001789
    116c:	200002cc 	.word	0x200002cc
    1170:	0000374d 	.word	0x0000374d
    1174:	00000741 	.word	0x00000741
    1178:	00001009 	.word	0x00001009
    117c:	00002f49 	.word	0x00002f49

00001180 <main>:
int main(void) {
    1180:	b530      	push	{r4, r5, lr}
    1182:	b083      	sub	sp, #12
	if (!init()) SOS();
    1184:	4b14      	ldr	r3, [pc, #80]	; (11d8 <main+0x58>)
    1186:	4798      	blx	r3
    1188:	2800      	cmp	r0, #0
    118a:	d022      	beq.n	11d2 <main+0x52>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
    118c:	2380      	movs	r3, #128	; 0x80
    118e:	2280      	movs	r2, #128	; 0x80
    1190:	4912      	ldr	r1, [pc, #72]	; (11dc <main+0x5c>)
    1192:	4c13      	ldr	r4, [pc, #76]	; (11e0 <main+0x60>)
    1194:	005b      	lsls	r3, r3, #1
    1196:	0112      	lsls	r2, r2, #4
    1198:	0020      	movs	r0, r4
    119a:	4d12      	ldr	r5, [pc, #72]	; (11e4 <main+0x64>)
    119c:	47a8      	blx	r5
	dispatch_process(&bz);
    119e:	0020      	movs	r0, r4
    11a0:	4b11      	ldr	r3, [pc, #68]	; (11e8 <main+0x68>)
    11a2:	4798      	blx	r3
	start_navigation();
    11a4:	4b11      	ldr	r3, [pc, #68]	; (11ec <main+0x6c>)
    11a6:	4798      	blx	r3
	volatile fp32_t testvalue1 = FP32_FROM_MILLI(10);
    11a8:	4b11      	ldr	r3, [pc, #68]	; (11f0 <main+0x70>)
    11aa:	9301      	str	r3, [sp, #4]
	volatile fp32_t testvalue2 = FP32_FROM_INT(14);
    11ac:	23e0      	movs	r3, #224	; 0xe0
    11ae:	031b      	lsls	r3, r3, #12
    11b0:	9300      	str	r3, [sp, #0]
	testvalue1 = fp_multiply(testvalue1, testvalue2);
    11b2:	9801      	ldr	r0, [sp, #4]
    11b4:	9900      	ldr	r1, [sp, #0]
    11b6:	4b0f      	ldr	r3, [pc, #60]	; (11f4 <main+0x74>)
    11b8:	4798      	blx	r3
    11ba:	9001      	str	r0, [sp, #4]
	globals.DebugBool1 = false;
    11bc:	4b0e      	ldr	r3, [pc, #56]	; (11f8 <main+0x78>)
    11be:	223f      	movs	r2, #63	; 0x3f
    11c0:	2100      	movs	r1, #0
    11c2:	5499      	strb	r1, [r3, r2]
	comms_loop();
    11c4:	4b0d      	ldr	r3, [pc, #52]	; (11fc <main+0x7c>)
    11c6:	4798      	blx	r3
		rtos_delay_ms(1);
    11c8:	4b0d      	ldr	r3, [pc, #52]	; (1200 <main+0x80>)
    11ca:	6818      	ldr	r0, [r3, #0]
    11cc:	4b0d      	ldr	r3, [pc, #52]	; (1204 <main+0x84>)
    11ce:	4798      	blx	r3
	while (1) {
    11d0:	e7fa      	b.n	11c8 <main+0x48>
	if (!init()) SOS();
    11d2:	4b0d      	ldr	r3, [pc, #52]	; (1208 <main+0x88>)
    11d4:	4798      	blx	r3
    11d6:	e7d9      	b.n	118c <main+0xc>
    11d8:	0000104d 	.word	0x0000104d
    11dc:	00000f25 	.word	0x00000f25
    11e0:	20000278 	.word	0x20000278
    11e4:	00003009 	.word	0x00003009
    11e8:	000030f1 	.word	0x000030f1
    11ec:	00001231 	.word	0x00001231
    11f0:	0000028f 	.word	0x0000028f
    11f4:	00004405 	.word	0x00004405
    11f8:	20000178 	.word	0x20000178
    11fc:	000005e1 	.word	0x000005e1
    1200:	000059bc 	.word	0x000059bc
    1204:	000034a9 	.word	0x000034a9
    1208:	00002f49 	.word	0x00002f49

0000120c <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
    120c:	b510      	push	{r4, lr}
	while (1) {
        // led_on();
		request_imu_data();
    120e:	4b04      	ldr	r3, [pc, #16]	; (1220 <navigation+0x14>)
    1210:	4798      	blx	r3
		wait_for_imu_data();
    1212:	4b04      	ldr	r3, [pc, #16]	; (1224 <navigation+0x18>)
    1214:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(1);
    1216:	4b04      	ldr	r3, [pc, #16]	; (1228 <navigation+0x1c>)
    1218:	6818      	ldr	r0, [r3, #0]
    121a:	4b04      	ldr	r3, [pc, #16]	; (122c <navigation+0x20>)
    121c:	4798      	blx	r3
	while (1) {
    121e:	e7f6      	b.n	120e <navigation+0x2>
    1220:	00000951 	.word	0x00000951
    1224:	00000989 	.word	0x00000989
    1228:	000059bc 	.word	0x000059bc
    122c:	000034a9 	.word	0x000034a9

00001230 <start_navigation>:
	}
}

void start_navigation() {
    1230:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
    1232:	23c0      	movs	r3, #192	; 0xc0
    1234:	22b0      	movs	r2, #176	; 0xb0
    1236:	4905      	ldr	r1, [pc, #20]	; (124c <start_navigation+0x1c>)
    1238:	4c05      	ldr	r4, [pc, #20]	; (1250 <start_navigation+0x20>)
    123a:	009b      	lsls	r3, r3, #2
    123c:	0112      	lsls	r2, r2, #4
    123e:	0020      	movs	r0, r4
    1240:	4d04      	ldr	r5, [pc, #16]	; (1254 <start_navigation+0x24>)
    1242:	47a8      	blx	r5
    dispatch_process(&navigation_process);
    1244:	0020      	movs	r0, r4
    1246:	4b04      	ldr	r3, [pc, #16]	; (1258 <start_navigation+0x28>)
    1248:	4798      	blx	r3
    124a:	bd70      	pop	{r4, r5, r6, pc}
    124c:	0000120d 	.word	0x0000120d
    1250:	200002a0 	.word	0x200002a0
    1254:	00003009 	.word	0x00003009
    1258:	000030f1 	.word	0x000030f1

0000125c <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
    125c:	b570      	push	{r4, r5, r6, lr}
    125e:	0004      	movs	r4, r0
    1260:	000e      	movs	r6, r1
    1262:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
    1264:	7d03      	ldrb	r3, [r0, #20]
    1266:	7d42      	ldrb	r2, [r0, #21]
    1268:	0212      	lsls	r2, r2, #8
    126a:	431a      	orrs	r2, r3
    126c:	7d83      	ldrb	r3, [r0, #22]
    126e:	041b      	lsls	r3, r3, #16
    1270:	4313      	orrs	r3, r2
    1272:	7dc1      	ldrb	r1, [r0, #23]
    1274:	0609      	lsls	r1, r1, #24
    1276:	4319      	orrs	r1, r3
    1278:	7e00      	ldrb	r0, [r0, #24]
    127a:	4b11      	ldr	r3, [pc, #68]	; (12c0 <baro_send_command+0x64>)
    127c:	4798      	blx	r3
	spi_command(desc->sercom, command);
    127e:	7c23      	ldrb	r3, [r4, #16]
    1280:	7c62      	ldrb	r2, [r4, #17]
    1282:	0212      	lsls	r2, r2, #8
    1284:	431a      	orrs	r2, r3
    1286:	7ca3      	ldrb	r3, [r4, #18]
    1288:	041b      	lsls	r3, r3, #16
    128a:	4313      	orrs	r3, r2
    128c:	7ce0      	ldrb	r0, [r4, #19]
    128e:	0600      	lsls	r0, r0, #24
    1290:	4318      	orrs	r0, r3
    1292:	0031      	movs	r1, r6
    1294:	4b0b      	ldr	r3, [pc, #44]	; (12c4 <baro_send_command+0x68>)
    1296:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1298:	7d23      	ldrb	r3, [r4, #20]
    129a:	7d62      	ldrb	r2, [r4, #21]
    129c:	0212      	lsls	r2, r2, #8
    129e:	431a      	orrs	r2, r3
    12a0:	7da3      	ldrb	r3, [r4, #22]
    12a2:	041b      	lsls	r3, r3, #16
    12a4:	4313      	orrs	r3, r2
    12a6:	7de1      	ldrb	r1, [r4, #23]
    12a8:	0609      	lsls	r1, r1, #24
    12aa:	4319      	orrs	r1, r3
    12ac:	7e20      	ldrb	r0, [r4, #24]
    12ae:	4b06      	ldr	r3, [pc, #24]	; (12c8 <baro_send_command+0x6c>)
    12b0:	4798      	blx	r3
	delay_us(delay);
    12b2:	0068      	lsls	r0, r5, #1
    12b4:	1940      	adds	r0, r0, r5
    12b6:	0040      	lsls	r0, r0, #1
    12b8:	4b04      	ldr	r3, [pc, #16]	; (12cc <baro_send_command+0x70>)
    12ba:	4798      	blx	r3
}
    12bc:	bd70      	pop	{r4, r5, r6, pc}
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	00001d11 	.word	0x00001d11
    12c4:	000021ed 	.word	0x000021ed
    12c8:	00001d01 	.word	0x00001d01
    12cc:	000022d1 	.word	0x000022d1

000012d0 <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
    12d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12d2:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    12d4:	26a0      	movs	r6, #160	; 0xa0
    12d6:	e047      	b.n	1368 <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
    12d8:	7d23      	ldrb	r3, [r4, #20]
    12da:	7d62      	ldrb	r2, [r4, #21]
    12dc:	0212      	lsls	r2, r2, #8
    12de:	431a      	orrs	r2, r3
    12e0:	7da3      	ldrb	r3, [r4, #22]
    12e2:	041b      	lsls	r3, r3, #16
    12e4:	4313      	orrs	r3, r2
    12e6:	7de1      	ldrb	r1, [r4, #23]
    12e8:	0609      	lsls	r1, r1, #24
    12ea:	4319      	orrs	r1, r3
    12ec:	7e20      	ldrb	r0, [r4, #24]
    12ee:	4b20      	ldr	r3, [pc, #128]	; (1370 <baro_read_prom+0xa0>)
    12f0:	4798      	blx	r3
		spi_command(desc->sercom, addr);
    12f2:	7c23      	ldrb	r3, [r4, #16]
    12f4:	7c62      	ldrb	r2, [r4, #17]
    12f6:	0212      	lsls	r2, r2, #8
    12f8:	431a      	orrs	r2, r3
    12fa:	7ca3      	ldrb	r3, [r4, #18]
    12fc:	041b      	lsls	r3, r3, #16
    12fe:	4313      	orrs	r3, r2
    1300:	7ce0      	ldrb	r0, [r4, #19]
    1302:	0600      	lsls	r0, r0, #24
    1304:	4318      	orrs	r0, r3
    1306:	0031      	movs	r1, r6
    1308:	4f1a      	ldr	r7, [pc, #104]	; (1374 <baro_read_prom+0xa4>)
    130a:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
    130c:	7c23      	ldrb	r3, [r4, #16]
    130e:	7c62      	ldrb	r2, [r4, #17]
    1310:	0212      	lsls	r2, r2, #8
    1312:	431a      	orrs	r2, r3
    1314:	7ca3      	ldrb	r3, [r4, #18]
    1316:	041b      	lsls	r3, r3, #16
    1318:	4313      	orrs	r3, r2
    131a:	7ce0      	ldrb	r0, [r4, #19]
    131c:	0600      	lsls	r0, r0, #24
    131e:	4318      	orrs	r0, r3
    1320:	2100      	movs	r1, #0
    1322:	47b8      	blx	r7
    1324:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
    1326:	7c23      	ldrb	r3, [r4, #16]
    1328:	7c62      	ldrb	r2, [r4, #17]
    132a:	0212      	lsls	r2, r2, #8
    132c:	431a      	orrs	r2, r3
    132e:	7ca3      	ldrb	r3, [r4, #18]
    1330:	041b      	lsls	r3, r3, #16
    1332:	4313      	orrs	r3, r2
    1334:	7ce0      	ldrb	r0, [r4, #19]
    1336:	0600      	lsls	r0, r0, #24
    1338:	4318      	orrs	r0, r3
    133a:	2100      	movs	r1, #0
    133c:	47b8      	blx	r7
    133e:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
    1340:	7d23      	ldrb	r3, [r4, #20]
    1342:	7d62      	ldrb	r2, [r4, #21]
    1344:	0212      	lsls	r2, r2, #8
    1346:	431a      	orrs	r2, r3
    1348:	7da3      	ldrb	r3, [r4, #22]
    134a:	041b      	lsls	r3, r3, #16
    134c:	4313      	orrs	r3, r2
    134e:	7de1      	ldrb	r1, [r4, #23]
    1350:	0609      	lsls	r1, r1, #24
    1352:	4319      	orrs	r1, r3
    1354:	7e20      	ldrb	r0, [r4, #24]
    1356:	4b08      	ldr	r3, [pc, #32]	; (1378 <baro_read_prom+0xa8>)
    1358:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
    135a:	0033      	movs	r3, r6
    135c:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
    135e:	022d      	lsls	r5, r5, #8
    1360:	433d      	orrs	r5, r7
    1362:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    1364:	3602      	adds	r6, #2
    1366:	b2f6      	uxtb	r6, r6
    1368:	2eae      	cmp	r6, #174	; 0xae
    136a:	d9b5      	bls.n	12d8 <baro_read_prom+0x8>
}
    136c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	00001d11 	.word	0x00001d11
    1374:	000021ed 	.word	0x000021ed
    1378:	00001d01 	.word	0x00001d01

0000137c <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
    137c:	b530      	push	{r4, r5, lr}
    137e:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
    1380:	7b83      	ldrb	r3, [r0, #14]
    1382:	7bc5      	ldrb	r5, [r0, #15]
    1384:	022d      	lsls	r5, r5, #8
    1386:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
    1388:	23ff      	movs	r3, #255	; 0xff
    138a:	002a      	movs	r2, r5
    138c:	439a      	bics	r2, r3
    138e:	0013      	movs	r3, r2
    1390:	2200      	movs	r2, #0
    1392:	7382      	strb	r2, [r0, #14]
    1394:	0a1b      	lsrs	r3, r3, #8
    1396:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
    1398:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
    139a:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
    139c:	e014      	b.n	13c8 <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    139e:	1042      	asrs	r2, r0, #1
    13a0:	0052      	lsls	r2, r2, #1
    13a2:	5aa2      	ldrh	r2, [r4, r2]
    13a4:	0a12      	lsrs	r2, r2, #8
    13a6:	e018      	b.n	13da <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    13a8:	005b      	lsls	r3, r3, #1
    13aa:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
    13ac:	3201      	adds	r2, #1
    13ae:	2a07      	cmp	r2, #7
    13b0:	dc09      	bgt.n	13c6 <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    13b2:	b219      	sxth	r1, r3
    13b4:	2900      	cmp	r1, #0
    13b6:	daf7      	bge.n	13a8 <baro_check+0x2c>
    13b8:	0059      	lsls	r1, r3, #1
    13ba:	23c0      	movs	r3, #192	; 0xc0
    13bc:	019b      	lsls	r3, r3, #6
    13be:	404b      	eors	r3, r1
    13c0:	b21b      	sxth	r3, r3
    13c2:	b29b      	uxth	r3, r3
    13c4:	e7f2      	b.n	13ac <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
    13c6:	3001      	adds	r0, #1
    13c8:	280f      	cmp	r0, #15
    13ca:	dc09      	bgt.n	13e0 <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    13cc:	07c2      	lsls	r2, r0, #31
    13ce:	d5e6      	bpl.n	139e <baro_check+0x22>
    13d0:	1042      	asrs	r2, r0, #1
    13d2:	0052      	lsls	r2, r2, #1
    13d4:	5aa1      	ldrh	r1, [r4, r2]
    13d6:	22ff      	movs	r2, #255	; 0xff
    13d8:	400a      	ands	r2, r1
		n_rem ^= byte;
    13da:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
    13dc:	2200      	movs	r2, #0
    13de:	e7e6      	b.n	13ae <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
    13e0:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
    13e2:	73a5      	strb	r5, [r4, #14]
    13e4:	0a2a      	lsrs	r2, r5, #8
    13e6:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
    13e8:	200f      	movs	r0, #15
    13ea:	4028      	ands	r0, r5
    13ec:	1ac0      	subs	r0, r0, r3
    13ee:	4243      	negs	r3, r0
    13f0:	4158      	adcs	r0, r3
    13f2:	b2c0      	uxtb	r0, r0
}
    13f4:	bd30      	pop	{r4, r5, pc}
	...

000013f8 <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    13f8:	b570      	push	{r4, r5, r6, lr}
    13fa:	b082      	sub	sp, #8
    13fc:	0005      	movs	r5, r0
    13fe:	000c      	movs	r4, r1
    1400:	9200      	str	r2, [sp, #0]
    1402:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    1404:	0008      	movs	r0, r1
    1406:	4b0e      	ldr	r3, [pc, #56]	; (1440 <baro_init+0x48>)
    1408:	4798      	blx	r3
    140a:	1e06      	subs	r6, r0, #0
    140c:	d102      	bne.n	1414 <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
    140e:	0030      	movs	r0, r6
    1410:	b002      	add	sp, #8
    1412:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
    1414:	742c      	strb	r4, [r5, #16]
    1416:	0a23      	lsrs	r3, r4, #8
    1418:	746b      	strb	r3, [r5, #17]
    141a:	0c23      	lsrs	r3, r4, #16
    141c:	74ab      	strb	r3, [r5, #18]
    141e:	0e24      	lsrs	r4, r4, #24
    1420:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
    1422:	0028      	movs	r0, r5
    1424:	3014      	adds	r0, #20
    1426:	2205      	movs	r2, #5
    1428:	4669      	mov	r1, sp
    142a:	4b06      	ldr	r3, [pc, #24]	; (1444 <baro_init+0x4c>)
    142c:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
    142e:	4a06      	ldr	r2, [pc, #24]	; (1448 <baro_init+0x50>)
    1430:	211e      	movs	r1, #30
    1432:	0028      	movs	r0, r5
    1434:	4b05      	ldr	r3, [pc, #20]	; (144c <baro_init+0x54>)
    1436:	4798      	blx	r3
	baro_read_prom(desc);
    1438:	0028      	movs	r0, r5
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <baro_init+0x58>)
    143c:	4798      	blx	r3
	return true;
    143e:	e7e6      	b.n	140e <baro_init+0x16>
    1440:	00001ffd 	.word	0x00001ffd
    1444:	0000541d 	.word	0x0000541d
    1448:	00000bb8 	.word	0x00000bb8
    144c:	0000125d 	.word	0x0000125d
    1450:	000012d1 	.word	0x000012d1

00001454 <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
    1454:	280b      	cmp	r0, #11
    1456:	d804      	bhi.n	1462 <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
    1458:	4a03      	ldr	r2, [pc, #12]	; (1468 <dma_set_channel+0x14>)
    145a:	233f      	movs	r3, #63	; 0x3f
    145c:	54d0      	strb	r0, [r2, r3]
		return true;
    145e:	2001      	movs	r0, #1
	}
	else return false;
}
    1460:	4770      	bx	lr
	else return false;
    1462:	2000      	movs	r0, #0
    1464:	e7fc      	b.n	1460 <dma_set_channel+0xc>
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	41004800 	.word	0x41004800

0000146c <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
    146c:	4b07      	ldr	r3, [pc, #28]	; (148c <dma_init+0x20>)
    146e:	695a      	ldr	r2, [r3, #20]
    1470:	2120      	movs	r1, #32
    1472:	430a      	orrs	r2, r1
    1474:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
    1476:	69da      	ldr	r2, [r3, #28]
    1478:	430a      	orrs	r2, r1
    147a:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
    147c:	4a04      	ldr	r2, [pc, #16]	; (1490 <dma_init+0x24>)
    147e:	4b05      	ldr	r3, [pc, #20]	; (1494 <dma_init+0x28>)
    1480:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
    1482:	4a05      	ldr	r2, [pc, #20]	; (1498 <dma_init+0x2c>)
    1484:	639a      	str	r2, [r3, #56]	; 0x38
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
    1486:	4a05      	ldr	r2, [pc, #20]	; (149c <dma_init+0x30>)
    1488:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
    148a:	4770      	bx	lr
    148c:	40000400 	.word	0x40000400
    1490:	200003f8 	.word	0x200003f8
    1494:	41004800 	.word	0x41004800
    1498:	20000358 	.word	0x20000358
    149c:	00000f02 	.word	0x00000f02

000014a0 <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
    14a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a2:	ac05      	add	r4, sp, #20
    14a4:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
    14a6:	2b02      	cmp	r3, #2
    14a8:	d82d      	bhi.n	1506 <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    14aa:	2900      	cmp	r1, #0
    14ac:	d023      	beq.n	14f6 <dma_create_descriptor+0x56>
    14ae:	2480      	movs	r4, #128	; 0x80
    14b0:	00e4      	lsls	r4, r4, #3
    14b2:	2a00      	cmp	r2, #0
    14b4:	d021      	beq.n	14fa <dma_create_descriptor+0x5a>
    14b6:	2580      	movs	r5, #128	; 0x80
    14b8:	012d      	lsls	r5, r5, #4
    14ba:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
    14bc:	021d      	lsls	r5, r3, #8
    14be:	27c0      	movs	r7, #192	; 0xc0
    14c0:	00bf      	lsls	r7, r7, #2
    14c2:	403d      	ands	r5, r7
    14c4:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
    14c6:	2501      	movs	r5, #1
    14c8:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
    14ca:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
    14cc:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    14ce:	2900      	cmp	r1, #0
    14d0:	d015      	beq.n	14fe <dma_create_descriptor+0x5e>
    14d2:	1c59      	adds	r1, r3, #1
    14d4:	4371      	muls	r1, r6
    14d6:	9c06      	ldr	r4, [sp, #24]
    14d8:	46a4      	mov	ip, r4
    14da:	4461      	add	r1, ip
    14dc:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    14de:	2a00      	cmp	r2, #0
    14e0:	d00f      	beq.n	1502 <dma_create_descriptor+0x62>
    14e2:	3301      	adds	r3, #1
    14e4:	4373      	muls	r3, r6
    14e6:	9a07      	ldr	r2, [sp, #28]
    14e8:	4694      	mov	ip, r2
    14ea:	4463      	add	r3, ip
    14ec:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
    14ee:	9b08      	ldr	r3, [sp, #32]
    14f0:	60c3      	str	r3, [r0, #12]
	
	return true;
    14f2:	2001      	movs	r0, #1
}
    14f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    14f6:	2400      	movs	r4, #0
    14f8:	e7db      	b.n	14b2 <dma_create_descriptor+0x12>
    14fa:	2500      	movs	r5, #0
    14fc:	e7dd      	b.n	14ba <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    14fe:	9906      	ldr	r1, [sp, #24]
    1500:	e7ec      	b.n	14dc <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    1502:	9b07      	ldr	r3, [sp, #28]
    1504:	e7f2      	b.n	14ec <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
    1506:	2000      	movs	r0, #0
    1508:	e7f4      	b.n	14f4 <dma_create_descriptor+0x54>
	...

0000150c <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
    150c:	b570      	push	{r4, r5, r6, lr}
    150e:	000c      	movs	r4, r1
    1510:	0015      	movs	r5, r2
    1512:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
    1514:	4b0e      	ldr	r3, [pc, #56]	; (1550 <dma_init_channel+0x44>)
    1516:	4798      	blx	r3
    1518:	2800      	cmp	r0, #0
    151a:	d012      	beq.n	1542 <dma_init_channel+0x36>
	if (priority > 3) return false;
    151c:	2e03      	cmp	r6, #3
    151e:	d811      	bhi.n	1544 <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
    1520:	2c03      	cmp	r4, #3
    1522:	d811      	bhi.n	1548 <dma_init_channel+0x3c>
    1524:	2c01      	cmp	r4, #1
    1526:	d011      	beq.n	154c <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1528:	05a4      	lsls	r4, r4, #22
    152a:	23c0      	movs	r3, #192	; 0xc0
    152c:	041b      	lsls	r3, r3, #16
    152e:	401c      	ands	r4, r3
    1530:	022d      	lsls	r5, r5, #8
    1532:	23fc      	movs	r3, #252	; 0xfc
    1534:	019b      	lsls	r3, r3, #6
    1536:	401d      	ands	r5, r3
    1538:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
    153a:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    153c:	4334      	orrs	r4, r6
    153e:	4a05      	ldr	r2, [pc, #20]	; (1554 <dma_init_channel+0x48>)
    1540:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
    1542:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
    1544:	2000      	movs	r0, #0
    1546:	e7fc      	b.n	1542 <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
    1548:	2000      	movs	r0, #0
    154a:	e7fa      	b.n	1542 <dma_init_channel+0x36>
    154c:	2000      	movs	r0, #0
    154e:	e7f8      	b.n	1542 <dma_init_channel+0x36>
    1550:	00001455 	.word	0x00001455
    1554:	41004800 	.word	0x41004800

00001558 <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
    1558:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    155a:	4b07      	ldr	r3, [pc, #28]	; (1578 <dma_enable_channel+0x20>)
    155c:	4798      	blx	r3
    155e:	2800      	cmp	r0, #0
    1560:	d009      	beq.n	1576 <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
    1562:	4a06      	ldr	r2, [pc, #24]	; (157c <dma_enable_channel+0x24>)
    1564:	234e      	movs	r3, #78	; 0x4e
    1566:	2102      	movs	r1, #2
    1568:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
    156a:	313e      	adds	r1, #62	; 0x3e
    156c:	5c53      	ldrb	r3, [r2, r1]
    156e:	2402      	movs	r4, #2
    1570:	4323      	orrs	r3, r4
    1572:	b2db      	uxtb	r3, r3
    1574:	5453      	strb	r3, [r2, r1]
	return true;
}
    1576:	bd10      	pop	{r4, pc}
    1578:	00001455 	.word	0x00001455
    157c:	41004800 	.word	0x41004800

00001580 <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
    1580:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    1582:	4b05      	ldr	r3, [pc, #20]	; (1598 <dma_disable_channel+0x18>)
    1584:	4798      	blx	r3
    1586:	2800      	cmp	r0, #0
    1588:	d005      	beq.n	1596 <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
    158a:	4904      	ldr	r1, [pc, #16]	; (159c <dma_disable_channel+0x1c>)
    158c:	2240      	movs	r2, #64	; 0x40
    158e:	5c8b      	ldrb	r3, [r1, r2]
    1590:	2402      	movs	r4, #2
    1592:	43a3      	bics	r3, r4
    1594:	548b      	strb	r3, [r1, r2]
	return true;
}
    1596:	bd10      	pop	{r4, pc}
    1598:	00001455 	.word	0x00001455
    159c:	41004800 	.word	0x41004800

000015a0 <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
    15a0:	b530      	push	{r4, r5, lr}
    15a2:	b083      	sub	sp, #12
    15a4:	0004      	movs	r4, r0
    15a6:	9200      	str	r2, [sp, #0]
    15a8:	9301      	str	r3, [sp, #4]
    15aa:	ab06      	add	r3, sp, #24
    15ac:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
    15ae:	7001      	strb	r1, [r0, #0]
    15b0:	0a0b      	lsrs	r3, r1, #8
    15b2:	7043      	strb	r3, [r0, #1]
    15b4:	0c0b      	lsrs	r3, r1, #16
    15b6:	7083      	strb	r3, [r0, #2]
    15b8:	0e09      	lsrs	r1, r1, #24
    15ba:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    15bc:	3004      	adds	r0, #4
    15be:	2205      	movs	r2, #5
    15c0:	4669      	mov	r1, sp
    15c2:	4b10      	ldr	r3, [pc, #64]	; (1604 <eeprom_init+0x64>)
    15c4:	4798      	blx	r3
	desc->size = size;
    15c6:	7265      	strb	r5, [r4, #9]
    15c8:	0a2d      	lsrs	r5, r5, #8
    15ca:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    15cc:	7923      	ldrb	r3, [r4, #4]
    15ce:	7962      	ldrb	r2, [r4, #5]
    15d0:	0212      	lsls	r2, r2, #8
    15d2:	431a      	orrs	r2, r3
    15d4:	79a3      	ldrb	r3, [r4, #6]
    15d6:	041b      	lsls	r3, r3, #16
    15d8:	4313      	orrs	r3, r2
    15da:	79e1      	ldrb	r1, [r4, #7]
    15dc:	0609      	lsls	r1, r1, #24
    15de:	4319      	orrs	r1, r3
    15e0:	7a20      	ldrb	r0, [r4, #8]
    15e2:	4b09      	ldr	r3, [pc, #36]	; (1608 <eeprom_init+0x68>)
    15e4:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    15e6:	7923      	ldrb	r3, [r4, #4]
    15e8:	7962      	ldrb	r2, [r4, #5]
    15ea:	0212      	lsls	r2, r2, #8
    15ec:	431a      	orrs	r2, r3
    15ee:	79a3      	ldrb	r3, [r4, #6]
    15f0:	041b      	lsls	r3, r3, #16
    15f2:	4313      	orrs	r3, r2
    15f4:	79e1      	ldrb	r1, [r4, #7]
    15f6:	0609      	lsls	r1, r1, #24
    15f8:	4319      	orrs	r1, r3
    15fa:	7a20      	ldrb	r0, [r4, #8]
    15fc:	4b03      	ldr	r3, [pc, #12]	; (160c <eeprom_init+0x6c>)
    15fe:	4798      	blx	r3
}
    1600:	b003      	add	sp, #12
    1602:	bd30      	pop	{r4, r5, pc}
    1604:	0000541d 	.word	0x0000541d
    1608:	00001cf1 	.word	0x00001cf1
    160c:	00001d01 	.word	0x00001d01

00001610 <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
    1610:	b510      	push	{r4, lr}
    1612:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1614:	7903      	ldrb	r3, [r0, #4]
    1616:	7942      	ldrb	r2, [r0, #5]
    1618:	0212      	lsls	r2, r2, #8
    161a:	431a      	orrs	r2, r3
    161c:	7983      	ldrb	r3, [r0, #6]
    161e:	041b      	lsls	r3, r3, #16
    1620:	4313      	orrs	r3, r2
    1622:	79c1      	ldrb	r1, [r0, #7]
    1624:	0609      	lsls	r1, r1, #24
    1626:	4319      	orrs	r1, r3
    1628:	7a00      	ldrb	r0, [r0, #8]
    162a:	4b0e      	ldr	r3, [pc, #56]	; (1664 <eeprom_write_enable+0x54>)
    162c:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
    162e:	7823      	ldrb	r3, [r4, #0]
    1630:	7862      	ldrb	r2, [r4, #1]
    1632:	0212      	lsls	r2, r2, #8
    1634:	431a      	orrs	r2, r3
    1636:	78a3      	ldrb	r3, [r4, #2]
    1638:	041b      	lsls	r3, r3, #16
    163a:	4313      	orrs	r3, r2
    163c:	78e0      	ldrb	r0, [r4, #3]
    163e:	0600      	lsls	r0, r0, #24
    1640:	4318      	orrs	r0, r3
    1642:	2106      	movs	r1, #6
    1644:	4b08      	ldr	r3, [pc, #32]	; (1668 <eeprom_write_enable+0x58>)
    1646:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1648:	7923      	ldrb	r3, [r4, #4]
    164a:	7962      	ldrb	r2, [r4, #5]
    164c:	0212      	lsls	r2, r2, #8
    164e:	431a      	orrs	r2, r3
    1650:	79a3      	ldrb	r3, [r4, #6]
    1652:	041b      	lsls	r3, r3, #16
    1654:	4313      	orrs	r3, r2
    1656:	79e1      	ldrb	r1, [r4, #7]
    1658:	0609      	lsls	r1, r1, #24
    165a:	4319      	orrs	r1, r3
    165c:	7a20      	ldrb	r0, [r4, #8]
    165e:	4b03      	ldr	r3, [pc, #12]	; (166c <eeprom_write_enable+0x5c>)
    1660:	4798      	blx	r3
}
    1662:	bd10      	pop	{r4, pc}
    1664:	00001d11 	.word	0x00001d11
    1668:	000021ed 	.word	0x000021ed
    166c:	00001d01 	.word	0x00001d01

00001670 <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
    1670:	b510      	push	{r4, lr}
    1672:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1674:	7903      	ldrb	r3, [r0, #4]
    1676:	7942      	ldrb	r2, [r0, #5]
    1678:	0212      	lsls	r2, r2, #8
    167a:	431a      	orrs	r2, r3
    167c:	7983      	ldrb	r3, [r0, #6]
    167e:	041b      	lsls	r3, r3, #16
    1680:	4313      	orrs	r3, r2
    1682:	79c1      	ldrb	r1, [r0, #7]
    1684:	0609      	lsls	r1, r1, #24
    1686:	4319      	orrs	r1, r3
    1688:	7a00      	ldrb	r0, [r0, #8]
    168a:	4b0e      	ldr	r3, [pc, #56]	; (16c4 <eeprom_write_disable+0x54>)
    168c:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
    168e:	7823      	ldrb	r3, [r4, #0]
    1690:	7862      	ldrb	r2, [r4, #1]
    1692:	0212      	lsls	r2, r2, #8
    1694:	431a      	orrs	r2, r3
    1696:	78a3      	ldrb	r3, [r4, #2]
    1698:	041b      	lsls	r3, r3, #16
    169a:	4313      	orrs	r3, r2
    169c:	78e0      	ldrb	r0, [r4, #3]
    169e:	0600      	lsls	r0, r0, #24
    16a0:	4318      	orrs	r0, r3
    16a2:	2104      	movs	r1, #4
    16a4:	4b08      	ldr	r3, [pc, #32]	; (16c8 <eeprom_write_disable+0x58>)
    16a6:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    16a8:	7923      	ldrb	r3, [r4, #4]
    16aa:	7962      	ldrb	r2, [r4, #5]
    16ac:	0212      	lsls	r2, r2, #8
    16ae:	431a      	orrs	r2, r3
    16b0:	79a3      	ldrb	r3, [r4, #6]
    16b2:	041b      	lsls	r3, r3, #16
    16b4:	4313      	orrs	r3, r2
    16b6:	79e1      	ldrb	r1, [r4, #7]
    16b8:	0609      	lsls	r1, r1, #24
    16ba:	4319      	orrs	r1, r3
    16bc:	7a20      	ldrb	r0, [r4, #8]
    16be:	4b03      	ldr	r3, [pc, #12]	; (16cc <eeprom_write_disable+0x5c>)
    16c0:	4798      	blx	r3
}
    16c2:	bd10      	pop	{r4, pc}
    16c4:	00001d11 	.word	0x00001d11
    16c8:	000021ed 	.word	0x000021ed
    16cc:	00001d01 	.word	0x00001d01

000016d0 <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
    16d0:	b570      	push	{r4, r5, r6, lr}
    16d2:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    16d4:	7903      	ldrb	r3, [r0, #4]
    16d6:	7942      	ldrb	r2, [r0, #5]
    16d8:	0212      	lsls	r2, r2, #8
    16da:	431a      	orrs	r2, r3
    16dc:	7983      	ldrb	r3, [r0, #6]
    16de:	041b      	lsls	r3, r3, #16
    16e0:	4313      	orrs	r3, r2
    16e2:	79c1      	ldrb	r1, [r0, #7]
    16e4:	0609      	lsls	r1, r1, #24
    16e6:	4319      	orrs	r1, r3
    16e8:	7a00      	ldrb	r0, [r0, #8]
    16ea:	4b15      	ldr	r3, [pc, #84]	; (1740 <eeprom_read_status+0x70>)
    16ec:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
    16ee:	7823      	ldrb	r3, [r4, #0]
    16f0:	7862      	ldrb	r2, [r4, #1]
    16f2:	0212      	lsls	r2, r2, #8
    16f4:	431a      	orrs	r2, r3
    16f6:	78a3      	ldrb	r3, [r4, #2]
    16f8:	041b      	lsls	r3, r3, #16
    16fa:	4313      	orrs	r3, r2
    16fc:	78e0      	ldrb	r0, [r4, #3]
    16fe:	0600      	lsls	r0, r0, #24
    1700:	4318      	orrs	r0, r3
    1702:	2105      	movs	r1, #5
    1704:	4d0f      	ldr	r5, [pc, #60]	; (1744 <eeprom_read_status+0x74>)
    1706:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
    1708:	7823      	ldrb	r3, [r4, #0]
    170a:	7862      	ldrb	r2, [r4, #1]
    170c:	0212      	lsls	r2, r2, #8
    170e:	431a      	orrs	r2, r3
    1710:	78a3      	ldrb	r3, [r4, #2]
    1712:	041b      	lsls	r3, r3, #16
    1714:	4313      	orrs	r3, r2
    1716:	78e0      	ldrb	r0, [r4, #3]
    1718:	0600      	lsls	r0, r0, #24
    171a:	4318      	orrs	r0, r3
    171c:	2100      	movs	r1, #0
    171e:	47a8      	blx	r5
    1720:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
    1722:	7923      	ldrb	r3, [r4, #4]
    1724:	7962      	ldrb	r2, [r4, #5]
    1726:	0212      	lsls	r2, r2, #8
    1728:	431a      	orrs	r2, r3
    172a:	79a3      	ldrb	r3, [r4, #6]
    172c:	041b      	lsls	r3, r3, #16
    172e:	4313      	orrs	r3, r2
    1730:	79e1      	ldrb	r1, [r4, #7]
    1732:	0609      	lsls	r1, r1, #24
    1734:	4319      	orrs	r1, r3
    1736:	7a20      	ldrb	r0, [r4, #8]
    1738:	4b03      	ldr	r3, [pc, #12]	; (1748 <eeprom_read_status+0x78>)
    173a:	4798      	blx	r3
}
    173c:	0028      	movs	r0, r5
    173e:	bd70      	pop	{r4, r5, r6, pc}
    1740:	00001d11 	.word	0x00001d11
    1744:	000021ed 	.word	0x000021ed
    1748:	00001d01 	.word	0x00001d01

0000174c <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
    174c:	b510      	push	{r4, lr}
    174e:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
    1750:	4b0a      	ldr	r3, [pc, #40]	; (177c <eeprom_check+0x30>)
    1752:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
    1754:	0020      	movs	r0, r4
    1756:	4b0a      	ldr	r3, [pc, #40]	; (1780 <eeprom_check+0x34>)
    1758:	4798      	blx	r3
    175a:	0780      	lsls	r0, r0, #30
    175c:	d401      	bmi.n	1762 <eeprom_check+0x16>
    175e:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
    1760:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
    1762:	0020      	movs	r0, r4
    1764:	4b07      	ldr	r3, [pc, #28]	; (1784 <eeprom_check+0x38>)
    1766:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1768:	0020      	movs	r0, r4
    176a:	4b05      	ldr	r3, [pc, #20]	; (1780 <eeprom_check+0x34>)
    176c:	4798      	blx	r3
    176e:	0780      	lsls	r0, r0, #30
    1770:	d401      	bmi.n	1776 <eeprom_check+0x2a>
	return true;
    1772:	2001      	movs	r0, #1
    1774:	e7f4      	b.n	1760 <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1776:	2000      	movs	r0, #0
    1778:	e7f2      	b.n	1760 <eeprom_check+0x14>
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	00001611 	.word	0x00001611
    1780:	000016d1 	.word	0x000016d1
    1784:	00001671 	.word	0x00001671

00001788 <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
    1788:	b570      	push	{r4, r5, r6, lr}
    178a:	b082      	sub	sp, #8
    178c:	0004      	movs	r4, r0
    178e:	9200      	str	r2, [sp, #0]
    1790:	9301      	str	r3, [sp, #4]
    1792:	ab06      	add	r3, sp, #24
    1794:	cb20      	ldmia	r3!, {r5}
    1796:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
    1798:	7001      	strb	r1, [r0, #0]
    179a:	0a0b      	lsrs	r3, r1, #8
    179c:	7043      	strb	r3, [r0, #1]
    179e:	0c0b      	lsrs	r3, r1, #16
    17a0:	7083      	strb	r3, [r0, #2]
    17a2:	0e09      	lsrs	r1, r1, #24
    17a4:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    17a6:	3008      	adds	r0, #8
    17a8:	2205      	movs	r2, #5
    17aa:	4669      	mov	r1, sp
    17ac:	4b15      	ldr	r3, [pc, #84]	; (1804 <flash_init+0x7c>)
    17ae:	4798      	blx	r3
	desc->size = size;
    17b0:	7125      	strb	r5, [r4, #4]
    17b2:	0a2b      	lsrs	r3, r5, #8
    17b4:	7163      	strb	r3, [r4, #5]
    17b6:	0c2b      	lsrs	r3, r5, #16
    17b8:	71a3      	strb	r3, [r4, #6]
    17ba:	0e2d      	lsrs	r5, r5, #24
    17bc:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
    17be:	221f      	movs	r2, #31
    17c0:	4032      	ands	r2, r6
    17c2:	7b63      	ldrb	r3, [r4, #13]
    17c4:	211f      	movs	r1, #31
    17c6:	438b      	bics	r3, r1
    17c8:	4313      	orrs	r3, r2
    17ca:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    17cc:	7a23      	ldrb	r3, [r4, #8]
    17ce:	7a62      	ldrb	r2, [r4, #9]
    17d0:	0212      	lsls	r2, r2, #8
    17d2:	431a      	orrs	r2, r3
    17d4:	7aa3      	ldrb	r3, [r4, #10]
    17d6:	041b      	lsls	r3, r3, #16
    17d8:	4313      	orrs	r3, r2
    17da:	7ae1      	ldrb	r1, [r4, #11]
    17dc:	0609      	lsls	r1, r1, #24
    17de:	4319      	orrs	r1, r3
    17e0:	7b20      	ldrb	r0, [r4, #12]
    17e2:	4b09      	ldr	r3, [pc, #36]	; (1808 <flash_init+0x80>)
    17e4:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    17e6:	7a23      	ldrb	r3, [r4, #8]
    17e8:	7a62      	ldrb	r2, [r4, #9]
    17ea:	0212      	lsls	r2, r2, #8
    17ec:	431a      	orrs	r2, r3
    17ee:	7aa3      	ldrb	r3, [r4, #10]
    17f0:	041b      	lsls	r3, r3, #16
    17f2:	4313      	orrs	r3, r2
    17f4:	7ae1      	ldrb	r1, [r4, #11]
    17f6:	0609      	lsls	r1, r1, #24
    17f8:	4319      	orrs	r1, r3
    17fa:	7b20      	ldrb	r0, [r4, #12]
    17fc:	4b03      	ldr	r3, [pc, #12]	; (180c <flash_init+0x84>)
    17fe:	4798      	blx	r3
}
    1800:	b002      	add	sp, #8
    1802:	bd70      	pop	{r4, r5, r6, pc}
    1804:	0000541d 	.word	0x0000541d
    1808:	00001cf1 	.word	0x00001cf1
    180c:	00001d01 	.word	0x00001d01

00001810 <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
    1810:	b530      	push	{r4, r5, lr}
    1812:	b083      	sub	sp, #12
    1814:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1816:	7a03      	ldrb	r3, [r0, #8]
    1818:	7a42      	ldrb	r2, [r0, #9]
    181a:	0212      	lsls	r2, r2, #8
    181c:	431a      	orrs	r2, r3
    181e:	7a83      	ldrb	r3, [r0, #10]
    1820:	041b      	lsls	r3, r3, #16
    1822:	4313      	orrs	r3, r2
    1824:	7ac1      	ldrb	r1, [r0, #11]
    1826:	0609      	lsls	r1, r1, #24
    1828:	4319      	orrs	r1, r3
    182a:	7b00      	ldrb	r0, [r0, #12]
    182c:	4b24      	ldr	r3, [pc, #144]	; (18c0 <flash_check+0xb0>)
    182e:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    1830:	7823      	ldrb	r3, [r4, #0]
    1832:	7862      	ldrb	r2, [r4, #1]
    1834:	0212      	lsls	r2, r2, #8
    1836:	431a      	orrs	r2, r3
    1838:	78a3      	ldrb	r3, [r4, #2]
    183a:	041b      	lsls	r3, r3, #16
    183c:	4313      	orrs	r3, r2
    183e:	78e0      	ldrb	r0, [r4, #3]
    1840:	0600      	lsls	r0, r0, #24
    1842:	4318      	orrs	r0, r3
    1844:	219f      	movs	r1, #159	; 0x9f
    1846:	4b1f      	ldr	r3, [pc, #124]	; (18c4 <flash_check+0xb4>)
    1848:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    184a:	2500      	movs	r5, #0
    184c:	e00f      	b.n	186e <flash_check+0x5e>
    184e:	7823      	ldrb	r3, [r4, #0]
    1850:	7862      	ldrb	r2, [r4, #1]
    1852:	0212      	lsls	r2, r2, #8
    1854:	431a      	orrs	r2, r3
    1856:	78a3      	ldrb	r3, [r4, #2]
    1858:	041b      	lsls	r3, r3, #16
    185a:	4313      	orrs	r3, r2
    185c:	78e0      	ldrb	r0, [r4, #3]
    185e:	0600      	lsls	r0, r0, #24
    1860:	4318      	orrs	r0, r3
    1862:	2100      	movs	r1, #0
    1864:	4b17      	ldr	r3, [pc, #92]	; (18c4 <flash_check+0xb4>)
    1866:	4798      	blx	r3
    1868:	ab01      	add	r3, sp, #4
    186a:	5558      	strb	r0, [r3, r5]
    186c:	3501      	adds	r5, #1
    186e:	2d02      	cmp	r5, #2
    1870:	dded      	ble.n	184e <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    1872:	7a23      	ldrb	r3, [r4, #8]
    1874:	7a62      	ldrb	r2, [r4, #9]
    1876:	0212      	lsls	r2, r2, #8
    1878:	431a      	orrs	r2, r3
    187a:	7aa3      	ldrb	r3, [r4, #10]
    187c:	041b      	lsls	r3, r3, #16
    187e:	4313      	orrs	r3, r2
    1880:	7ae1      	ldrb	r1, [r4, #11]
    1882:	0609      	lsls	r1, r1, #24
    1884:	4319      	orrs	r1, r3
    1886:	7b20      	ldrb	r0, [r4, #12]
    1888:	4b0f      	ldr	r3, [pc, #60]	; (18c8 <flash_check+0xb8>)
    188a:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    188c:	ab01      	add	r3, sp, #4
    188e:	781b      	ldrb	r3, [r3, #0]
    1890:	2b1f      	cmp	r3, #31
    1892:	d10e      	bne.n	18b2 <flash_check+0xa2>
    1894:	ab01      	add	r3, sp, #4
    1896:	785a      	ldrb	r2, [r3, #1]
    1898:	7b63      	ldrb	r3, [r4, #13]
    189a:	06db      	lsls	r3, r3, #27
    189c:	0edb      	lsrs	r3, r3, #27
    189e:	2180      	movs	r1, #128	; 0x80
    18a0:	430b      	orrs	r3, r1
    18a2:	429a      	cmp	r2, r3
    18a4:	d108      	bne.n	18b8 <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    18a6:	ab01      	add	r3, sp, #4
    18a8:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    18aa:	2b01      	cmp	r3, #1
    18ac:	d006      	beq.n	18bc <flash_check+0xac>
	else return false;
    18ae:	2000      	movs	r0, #0
    18b0:	e000      	b.n	18b4 <flash_check+0xa4>
    18b2:	2000      	movs	r0, #0
}
    18b4:	b003      	add	sp, #12
    18b6:	bd30      	pop	{r4, r5, pc}
	else return false;
    18b8:	2000      	movs	r0, #0
    18ba:	e7fb      	b.n	18b4 <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    18bc:	2001      	movs	r0, #1
    18be:	e7f9      	b.n	18b4 <flash_check+0xa4>
    18c0:	00001d11 	.word	0x00001d11
    18c4:	000021ed 	.word	0x000021ed
    18c8:	00001d01 	.word	0x00001d01

000018cc <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    18cc:	b570      	push	{r4, r5, r6, lr}
    18ce:	0004      	movs	r4, r0
    18d0:	000e      	movs	r6, r1
    18d2:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    18d4:	7902      	ldrb	r2, [r0, #4]
    18d6:	7943      	ldrb	r3, [r0, #5]
    18d8:	021b      	lsls	r3, r3, #8
    18da:	4313      	orrs	r3, r2
    18dc:	7982      	ldrb	r2, [r0, #6]
    18de:	0412      	lsls	r2, r2, #16
    18e0:	431a      	orrs	r2, r3
    18e2:	79c1      	ldrb	r1, [r0, #7]
    18e4:	0609      	lsls	r1, r1, #24
    18e6:	4311      	orrs	r1, r2
    18e8:	7a00      	ldrb	r0, [r0, #8]
    18ea:	4b15      	ldr	r3, [pc, #84]	; (1940 <imu_icm20948_write_byte+0x74>)
    18ec:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    18ee:	217f      	movs	r1, #127	; 0x7f
    18f0:	4031      	ands	r1, r6
    18f2:	7823      	ldrb	r3, [r4, #0]
    18f4:	7862      	ldrb	r2, [r4, #1]
    18f6:	0212      	lsls	r2, r2, #8
    18f8:	431a      	orrs	r2, r3
    18fa:	78a3      	ldrb	r3, [r4, #2]
    18fc:	041b      	lsls	r3, r3, #16
    18fe:	4313      	orrs	r3, r2
    1900:	78e0      	ldrb	r0, [r4, #3]
    1902:	0600      	lsls	r0, r0, #24
    1904:	4318      	orrs	r0, r3
    1906:	4e0f      	ldr	r6, [pc, #60]	; (1944 <imu_icm20948_write_byte+0x78>)
    1908:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    190a:	7823      	ldrb	r3, [r4, #0]
    190c:	7862      	ldrb	r2, [r4, #1]
    190e:	0212      	lsls	r2, r2, #8
    1910:	431a      	orrs	r2, r3
    1912:	78a3      	ldrb	r3, [r4, #2]
    1914:	041b      	lsls	r3, r3, #16
    1916:	4313      	orrs	r3, r2
    1918:	78e0      	ldrb	r0, [r4, #3]
    191a:	0600      	lsls	r0, r0, #24
    191c:	4318      	orrs	r0, r3
    191e:	0029      	movs	r1, r5
    1920:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1922:	7923      	ldrb	r3, [r4, #4]
    1924:	7962      	ldrb	r2, [r4, #5]
    1926:	0212      	lsls	r2, r2, #8
    1928:	431a      	orrs	r2, r3
    192a:	79a3      	ldrb	r3, [r4, #6]
    192c:	041b      	lsls	r3, r3, #16
    192e:	4313      	orrs	r3, r2
    1930:	79e1      	ldrb	r1, [r4, #7]
    1932:	0609      	lsls	r1, r1, #24
    1934:	4319      	orrs	r1, r3
    1936:	7a20      	ldrb	r0, [r4, #8]
    1938:	4b03      	ldr	r3, [pc, #12]	; (1948 <imu_icm20948_write_byte+0x7c>)
    193a:	4798      	blx	r3
}
    193c:	bd70      	pop	{r4, r5, r6, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	00001d11 	.word	0x00001d11
    1944:	000021ed 	.word	0x000021ed
    1948:	00001d01 	.word	0x00001d01

0000194c <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    194c:	b570      	push	{r4, r5, r6, lr}
    194e:	0004      	movs	r4, r0
    1950:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1952:	7903      	ldrb	r3, [r0, #4]
    1954:	7942      	ldrb	r2, [r0, #5]
    1956:	0212      	lsls	r2, r2, #8
    1958:	431a      	orrs	r2, r3
    195a:	7983      	ldrb	r3, [r0, #6]
    195c:	041b      	lsls	r3, r3, #16
    195e:	4313      	orrs	r3, r2
    1960:	79c1      	ldrb	r1, [r0, #7]
    1962:	0609      	lsls	r1, r1, #24
    1964:	4319      	orrs	r1, r3
    1966:	7a00      	ldrb	r0, [r0, #8]
    1968:	4b16      	ldr	r3, [pc, #88]	; (19c4 <imu_icm20948_read_byte+0x78>)
    196a:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    196c:	2180      	movs	r1, #128	; 0x80
    196e:	4249      	negs	r1, r1
    1970:	4329      	orrs	r1, r5
    1972:	b2c9      	uxtb	r1, r1
    1974:	7823      	ldrb	r3, [r4, #0]
    1976:	7862      	ldrb	r2, [r4, #1]
    1978:	0212      	lsls	r2, r2, #8
    197a:	431a      	orrs	r2, r3
    197c:	78a3      	ldrb	r3, [r4, #2]
    197e:	041b      	lsls	r3, r3, #16
    1980:	4313      	orrs	r3, r2
    1982:	78e0      	ldrb	r0, [r4, #3]
    1984:	0600      	lsls	r0, r0, #24
    1986:	4318      	orrs	r0, r3
    1988:	4d0f      	ldr	r5, [pc, #60]	; (19c8 <imu_icm20948_read_byte+0x7c>)
    198a:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    198c:	7823      	ldrb	r3, [r4, #0]
    198e:	7862      	ldrb	r2, [r4, #1]
    1990:	0212      	lsls	r2, r2, #8
    1992:	431a      	orrs	r2, r3
    1994:	78a3      	ldrb	r3, [r4, #2]
    1996:	041b      	lsls	r3, r3, #16
    1998:	4313      	orrs	r3, r2
    199a:	78e0      	ldrb	r0, [r4, #3]
    199c:	0600      	lsls	r0, r0, #24
    199e:	4318      	orrs	r0, r3
    19a0:	2100      	movs	r1, #0
    19a2:	47a8      	blx	r5
    19a4:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    19a6:	7923      	ldrb	r3, [r4, #4]
    19a8:	7962      	ldrb	r2, [r4, #5]
    19aa:	0212      	lsls	r2, r2, #8
    19ac:	431a      	orrs	r2, r3
    19ae:	79a3      	ldrb	r3, [r4, #6]
    19b0:	041b      	lsls	r3, r3, #16
    19b2:	4313      	orrs	r3, r2
    19b4:	79e1      	ldrb	r1, [r4, #7]
    19b6:	0609      	lsls	r1, r1, #24
    19b8:	4319      	orrs	r1, r3
    19ba:	7a20      	ldrb	r0, [r4, #8]
    19bc:	4b03      	ldr	r3, [pc, #12]	; (19cc <imu_icm20948_read_byte+0x80>)
    19be:	4798      	blx	r3
	return out;
}
    19c0:	0028      	movs	r0, r5
    19c2:	bd70      	pop	{r4, r5, r6, pc}
    19c4:	00001d11 	.word	0x00001d11
    19c8:	000021ed 	.word	0x000021ed
    19cc:	00001d01 	.word	0x00001d01

000019d0 <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    19d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19d2:	46c6      	mov	lr, r8
    19d4:	b500      	push	{lr}
    19d6:	0004      	movs	r4, r0
    19d8:	000d      	movs	r5, r1
    19da:	0017      	movs	r7, r2
    19dc:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    19de:	7902      	ldrb	r2, [r0, #4]
    19e0:	7943      	ldrb	r3, [r0, #5]
    19e2:	021b      	lsls	r3, r3, #8
    19e4:	4313      	orrs	r3, r2
    19e6:	7982      	ldrb	r2, [r0, #6]
    19e8:	0412      	lsls	r2, r2, #16
    19ea:	431a      	orrs	r2, r3
    19ec:	79c1      	ldrb	r1, [r0, #7]
    19ee:	0609      	lsls	r1, r1, #24
    19f0:	4311      	orrs	r1, r2
    19f2:	7a00      	ldrb	r0, [r0, #8]
    19f4:	4b19      	ldr	r3, [pc, #100]	; (1a5c <imu_icm20948_write+0x8c>)
    19f6:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    19f8:	217f      	movs	r1, #127	; 0x7f
    19fa:	4029      	ands	r1, r5
    19fc:	7823      	ldrb	r3, [r4, #0]
    19fe:	7862      	ldrb	r2, [r4, #1]
    1a00:	0212      	lsls	r2, r2, #8
    1a02:	431a      	orrs	r2, r3
    1a04:	78a3      	ldrb	r3, [r4, #2]
    1a06:	041b      	lsls	r3, r3, #16
    1a08:	4313      	orrs	r3, r2
    1a0a:	78e0      	ldrb	r0, [r4, #3]
    1a0c:	0600      	lsls	r0, r0, #24
    1a0e:	4318      	orrs	r0, r3
    1a10:	4b13      	ldr	r3, [pc, #76]	; (1a60 <imu_icm20948_write+0x90>)
    1a12:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1a14:	2600      	movs	r6, #0
    1a16:	e00e      	b.n	1a36 <imu_icm20948_write+0x66>
		spi_command(desc->sercom, data[i]);
    1a18:	4643      	mov	r3, r8
    1a1a:	5d99      	ldrb	r1, [r3, r6]
    1a1c:	7822      	ldrb	r2, [r4, #0]
    1a1e:	7863      	ldrb	r3, [r4, #1]
    1a20:	021b      	lsls	r3, r3, #8
    1a22:	4313      	orrs	r3, r2
    1a24:	78a5      	ldrb	r5, [r4, #2]
    1a26:	042d      	lsls	r5, r5, #16
    1a28:	431d      	orrs	r5, r3
    1a2a:	78e0      	ldrb	r0, [r4, #3]
    1a2c:	0600      	lsls	r0, r0, #24
    1a2e:	4328      	orrs	r0, r5
    1a30:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <imu_icm20948_write+0x90>)
    1a32:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    1a34:	3601      	adds	r6, #1
    1a36:	42be      	cmp	r6, r7
    1a38:	dbee      	blt.n	1a18 <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1a3a:	7923      	ldrb	r3, [r4, #4]
    1a3c:	7962      	ldrb	r2, [r4, #5]
    1a3e:	0212      	lsls	r2, r2, #8
    1a40:	431a      	orrs	r2, r3
    1a42:	79a3      	ldrb	r3, [r4, #6]
    1a44:	041b      	lsls	r3, r3, #16
    1a46:	4313      	orrs	r3, r2
    1a48:	79e1      	ldrb	r1, [r4, #7]
    1a4a:	0609      	lsls	r1, r1, #24
    1a4c:	4319      	orrs	r1, r3
    1a4e:	7a20      	ldrb	r0, [r4, #8]
    1a50:	4b04      	ldr	r3, [pc, #16]	; (1a64 <imu_icm20948_write+0x94>)
    1a52:	4798      	blx	r3
}
    1a54:	bc80      	pop	{r7}
    1a56:	46b8      	mov	r8, r7
    1a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	00001d11 	.word	0x00001d11
    1a60:	000021ed 	.word	0x000021ed
    1a64:	00001d01 	.word	0x00001d01

00001a68 <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a6a:	46c6      	mov	lr, r8
    1a6c:	b500      	push	{lr}
    1a6e:	0004      	movs	r4, r0
    1a70:	000d      	movs	r5, r1
    1a72:	0017      	movs	r7, r2
    1a74:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1a76:	7903      	ldrb	r3, [r0, #4]
    1a78:	7942      	ldrb	r2, [r0, #5]
    1a7a:	0212      	lsls	r2, r2, #8
    1a7c:	431a      	orrs	r2, r3
    1a7e:	7983      	ldrb	r3, [r0, #6]
    1a80:	041b      	lsls	r3, r3, #16
    1a82:	4313      	orrs	r3, r2
    1a84:	79c1      	ldrb	r1, [r0, #7]
    1a86:	0609      	lsls	r1, r1, #24
    1a88:	4319      	orrs	r1, r3
    1a8a:	7a00      	ldrb	r0, [r0, #8]
    1a8c:	4b1b      	ldr	r3, [pc, #108]	; (1afc <imu_icm20948_read+0x94>)
    1a8e:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1a90:	2180      	movs	r1, #128	; 0x80
    1a92:	4249      	negs	r1, r1
    1a94:	4329      	orrs	r1, r5
    1a96:	b2c9      	uxtb	r1, r1
    1a98:	7823      	ldrb	r3, [r4, #0]
    1a9a:	7862      	ldrb	r2, [r4, #1]
    1a9c:	0212      	lsls	r2, r2, #8
    1a9e:	431a      	orrs	r2, r3
    1aa0:	78a3      	ldrb	r3, [r4, #2]
    1aa2:	041b      	lsls	r3, r3, #16
    1aa4:	4313      	orrs	r3, r2
    1aa6:	78e0      	ldrb	r0, [r4, #3]
    1aa8:	0600      	lsls	r0, r0, #24
    1aaa:	4318      	orrs	r0, r3
    1aac:	4b14      	ldr	r3, [pc, #80]	; (1b00 <imu_icm20948_read+0x98>)
    1aae:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1ab0:	2500      	movs	r5, #0
    1ab2:	e010      	b.n	1ad6 <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    1ab4:	4643      	mov	r3, r8
    1ab6:	195e      	adds	r6, r3, r5
    1ab8:	7823      	ldrb	r3, [r4, #0]
    1aba:	7862      	ldrb	r2, [r4, #1]
    1abc:	0212      	lsls	r2, r2, #8
    1abe:	431a      	orrs	r2, r3
    1ac0:	78a3      	ldrb	r3, [r4, #2]
    1ac2:	041b      	lsls	r3, r3, #16
    1ac4:	4313      	orrs	r3, r2
    1ac6:	78e0      	ldrb	r0, [r4, #3]
    1ac8:	0600      	lsls	r0, r0, #24
    1aca:	4318      	orrs	r0, r3
    1acc:	2100      	movs	r1, #0
    1ace:	4b0c      	ldr	r3, [pc, #48]	; (1b00 <imu_icm20948_read+0x98>)
    1ad0:	4798      	blx	r3
    1ad2:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    1ad4:	3501      	adds	r5, #1
    1ad6:	42bd      	cmp	r5, r7
    1ad8:	dbec      	blt.n	1ab4 <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1ada:	7923      	ldrb	r3, [r4, #4]
    1adc:	7962      	ldrb	r2, [r4, #5]
    1ade:	0212      	lsls	r2, r2, #8
    1ae0:	431a      	orrs	r2, r3
    1ae2:	79a3      	ldrb	r3, [r4, #6]
    1ae4:	041b      	lsls	r3, r3, #16
    1ae6:	4313      	orrs	r3, r2
    1ae8:	79e1      	ldrb	r1, [r4, #7]
    1aea:	0609      	lsls	r1, r1, #24
    1aec:	4319      	orrs	r1, r3
    1aee:	7a20      	ldrb	r0, [r4, #8]
    1af0:	4b04      	ldr	r3, [pc, #16]	; (1b04 <imu_icm20948_read+0x9c>)
    1af2:	4798      	blx	r3
}
    1af4:	bc80      	pop	{r7}
    1af6:	46b8      	mov	r8, r7
    1af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	00001d11 	.word	0x00001d11
    1b00:	000021ed 	.word	0x000021ed
    1b04:	00001d01 	.word	0x00001d01

00001b08 <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    1b08:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    1b0a:	2903      	cmp	r1, #3
    1b0c:	d900      	bls.n	1b10 <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    1b0e:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    1b10:	0109      	lsls	r1, r1, #4
    1b12:	b2ca      	uxtb	r2, r1
    1b14:	217f      	movs	r1, #127	; 0x7f
    1b16:	4b01      	ldr	r3, [pc, #4]	; (1b1c <imu_icm20948_user_bank+0x14>)
    1b18:	4798      	blx	r3
}
    1b1a:	e7f8      	b.n	1b0e <imu_icm20948_user_bank+0x6>
    1b1c:	000018cd 	.word	0x000018cd

00001b20 <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    1b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b22:	b083      	sub	sp, #12
    1b24:	0005      	movs	r5, r0
    1b26:	000c      	movs	r4, r1
    1b28:	9200      	str	r2, [sp, #0]
    1b2a:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    1b2c:	0008      	movs	r0, r1
    1b2e:	4b13      	ldr	r3, [pc, #76]	; (1b7c <imu_icm20948_init+0x5c>)
    1b30:	4798      	blx	r3
    1b32:	1e06      	subs	r6, r0, #0
    1b34:	d102      	bne.n	1b3c <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    1b36:	0030      	movs	r0, r6
    1b38:	b003      	add	sp, #12
    1b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    1b3c:	702c      	strb	r4, [r5, #0]
    1b3e:	0a23      	lsrs	r3, r4, #8
    1b40:	706b      	strb	r3, [r5, #1]
    1b42:	0c23      	lsrs	r3, r4, #16
    1b44:	70ab      	strb	r3, [r5, #2]
    1b46:	0e24      	lsrs	r4, r4, #24
    1b48:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    1b4a:	1d28      	adds	r0, r5, #4
    1b4c:	2205      	movs	r2, #5
    1b4e:	4669      	mov	r1, sp
    1b50:	4b0b      	ldr	r3, [pc, #44]	; (1b80 <imu_icm20948_init+0x60>)
    1b52:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    1b54:	2280      	movs	r2, #128	; 0x80
    1b56:	2106      	movs	r1, #6
    1b58:	0028      	movs	r0, r5
    1b5a:	4c0a      	ldr	r4, [pc, #40]	; (1b84 <imu_icm20948_init+0x64>)
    1b5c:	47a0      	blx	r4
	delay_ms(11);
    1b5e:	480a      	ldr	r0, [pc, #40]	; (1b88 <imu_icm20948_init+0x68>)
    1b60:	4f0a      	ldr	r7, [pc, #40]	; (1b8c <imu_icm20948_init+0x6c>)
    1b62:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    1b64:	2210      	movs	r2, #16
    1b66:	2103      	movs	r1, #3
    1b68:	0028      	movs	r0, r5
    1b6a:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    1b6c:	2201      	movs	r2, #1
    1b6e:	2106      	movs	r1, #6
    1b70:	0028      	movs	r0, r5
    1b72:	47a0      	blx	r4
	delay_us(80);
    1b74:	20f0      	movs	r0, #240	; 0xf0
    1b76:	0040      	lsls	r0, r0, #1
    1b78:	47b8      	blx	r7
	return true;
    1b7a:	e7dc      	b.n	1b36 <imu_icm20948_init+0x16>
    1b7c:	00001ffd 	.word	0x00001ffd
    1b80:	0000541d 	.word	0x0000541d
    1b84:	000018cd 	.word	0x000018cd
    1b88:	000101d0 	.word	0x000101d0
    1b8c:	000022d1 	.word	0x000022d1

00001b90 <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1b90:	b510      	push	{r4, lr}
    1b92:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    1b94:	2100      	movs	r1, #0
    1b96:	4b06      	ldr	r3, [pc, #24]	; (1bb0 <imu_icm20948_check+0x20>)
    1b98:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    1b9a:	2100      	movs	r1, #0
    1b9c:	0020      	movs	r0, r4
    1b9e:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <imu_icm20948_check+0x24>)
    1ba0:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    1ba2:	28ea      	cmp	r0, #234	; 0xea
    1ba4:	d001      	beq.n	1baa <imu_icm20948_check+0x1a>
	else return false;
    1ba6:	2000      	movs	r0, #0
}
    1ba8:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    1baa:	38e9      	subs	r0, #233	; 0xe9
    1bac:	e7fc      	b.n	1ba8 <imu_icm20948_check+0x18>
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	00001b09 	.word	0x00001b09
    1bb4:	0000194d 	.word	0x0000194d

00001bb8 <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bba:	0004      	movs	r4, r0
    1bbc:	000f      	movs	r7, r1
    1bbe:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1bc0:	2103      	movs	r1, #3
    1bc2:	4b0b      	ldr	r3, [pc, #44]	; (1bf0 <mag_icm20948_write_byte+0x38>)
    1bc4:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    1bc6:	220c      	movs	r2, #12
    1bc8:	2103      	movs	r1, #3
    1bca:	0020      	movs	r0, r4
    1bcc:	4d09      	ldr	r5, [pc, #36]	; (1bf4 <mag_icm20948_write_byte+0x3c>)
    1bce:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    1bd0:	003a      	movs	r2, r7
    1bd2:	2104      	movs	r1, #4
    1bd4:	0020      	movs	r0, r4
    1bd6:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    1bd8:	0032      	movs	r2, r6
    1bda:	2106      	movs	r1, #6
    1bdc:	0020      	movs	r0, r4
    1bde:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    1be0:	2281      	movs	r2, #129	; 0x81
    1be2:	2105      	movs	r1, #5
    1be4:	0020      	movs	r0, r4
    1be6:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    1be8:	4803      	ldr	r0, [pc, #12]	; (1bf8 <mag_icm20948_write_byte+0x40>)
    1bea:	4b04      	ldr	r3, [pc, #16]	; (1bfc <mag_icm20948_write_byte+0x44>)
    1bec:	4798      	blx	r3
}
    1bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bf0:	00001b09 	.word	0x00001b09
    1bf4:	000018cd 	.word	0x000018cd
    1bf8:	0000ea60 	.word	0x0000ea60
    1bfc:	000022d1 	.word	0x000022d1

00001c00 <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c02:	46c6      	mov	lr, r8
    1c04:	b500      	push	{lr}
    1c06:	b082      	sub	sp, #8
    1c08:	0004      	movs	r4, r0
    1c0a:	000f      	movs	r7, r1
    1c0c:	0015      	movs	r5, r2
    1c0e:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1c10:	2103      	movs	r1, #3
    1c12:	4e0f      	ldr	r6, [pc, #60]	; (1c50 <mag_icm20948_read+0x50>)
    1c14:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    1c16:	ab01      	add	r3, sp, #4
    1c18:	228c      	movs	r2, #140	; 0x8c
    1c1a:	701a      	strb	r2, [r3, #0]
    1c1c:	705f      	strb	r7, [r3, #1]
    1c1e:	3a0d      	subs	r2, #13
    1c20:	3aff      	subs	r2, #255	; 0xff
    1c22:	432a      	orrs	r2, r5
    1c24:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    1c26:	2203      	movs	r2, #3
    1c28:	2103      	movs	r1, #3
    1c2a:	0020      	movs	r0, r4
    1c2c:	4f09      	ldr	r7, [pc, #36]	; (1c54 <mag_icm20948_read+0x54>)
    1c2e:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    1c30:	4809      	ldr	r0, [pc, #36]	; (1c58 <mag_icm20948_read+0x58>)
    1c32:	4b0a      	ldr	r3, [pc, #40]	; (1c5c <mag_icm20948_read+0x5c>)
    1c34:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1c36:	2100      	movs	r1, #0
    1c38:	0020      	movs	r0, r4
    1c3a:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    1c3c:	4643      	mov	r3, r8
    1c3e:	002a      	movs	r2, r5
    1c40:	213b      	movs	r1, #59	; 0x3b
    1c42:	0020      	movs	r0, r4
    1c44:	4c06      	ldr	r4, [pc, #24]	; (1c60 <mag_icm20948_read+0x60>)
    1c46:	47a0      	blx	r4
}
    1c48:	b002      	add	sp, #8
    1c4a:	bc80      	pop	{r7}
    1c4c:	46b8      	mov	r8, r7
    1c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c50:	00001b09 	.word	0x00001b09
    1c54:	000019d1 	.word	0x000019d1
    1c58:	00001770 	.word	0x00001770
    1c5c:	000022d1 	.word	0x000022d1
    1c60:	00001a69 	.word	0x00001a69

00001c64 <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    1c64:	b570      	push	{r4, r5, r6, lr}
    1c66:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1c68:	2100      	movs	r1, #0
    1c6a:	4e10      	ldr	r6, [pc, #64]	; (1cac <mag_icm20948_init+0x48>)
    1c6c:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    1c6e:	2220      	movs	r2, #32
    1c70:	2103      	movs	r1, #3
    1c72:	0020      	movs	r0, r4
    1c74:	4d0e      	ldr	r5, [pc, #56]	; (1cb0 <mag_icm20948_init+0x4c>)
    1c76:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1c78:	2103      	movs	r1, #3
    1c7a:	0020      	movs	r0, r4
    1c7c:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    1c7e:	2207      	movs	r2, #7
    1c80:	2101      	movs	r1, #1
    1c82:	0020      	movs	r0, r4
    1c84:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    1c86:	2201      	movs	r2, #1
    1c88:	2102      	movs	r1, #2
    1c8a:	0020      	movs	r0, r4
    1c8c:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    1c8e:	4809      	ldr	r0, [pc, #36]	; (1cb4 <mag_icm20948_init+0x50>)
    1c90:	4b09      	ldr	r3, [pc, #36]	; (1cb8 <mag_icm20948_init+0x54>)
    1c92:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    1c94:	2201      	movs	r2, #1
    1c96:	2132      	movs	r1, #50	; 0x32
    1c98:	0020      	movs	r0, r4
    1c9a:	4d08      	ldr	r5, [pc, #32]	; (1cbc <mag_icm20948_init+0x58>)
    1c9c:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    1c9e:	2208      	movs	r2, #8
    1ca0:	2131      	movs	r1, #49	; 0x31
    1ca2:	0020      	movs	r0, r4
    1ca4:	47a8      	blx	r5
	
	return true;
}
    1ca6:	2001      	movs	r0, #1
    1ca8:	bd70      	pop	{r4, r5, r6, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	00001b09 	.word	0x00001b09
    1cb0:	000018cd 	.word	0x000018cd
    1cb4:	00001770 	.word	0x00001770
    1cb8:	000022d1 	.word	0x000022d1
    1cbc:	00001bb9 	.word	0x00001bb9

00001cc0 <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1cc0:	b530      	push	{r4, r5, lr}
    1cc2:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    1cc4:	ac01      	add	r4, sp, #4
    1cc6:	0023      	movs	r3, r4
    1cc8:	2202      	movs	r2, #2
    1cca:	2100      	movs	r1, #0
    1ccc:	4d07      	ldr	r5, [pc, #28]	; (1cec <mag_icm20948_check+0x2c>)
    1cce:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1cd0:	7823      	ldrb	r3, [r4, #0]
    1cd2:	2b48      	cmp	r3, #72	; 0x48
    1cd4:	d104      	bne.n	1ce0 <mag_icm20948_check+0x20>
    1cd6:	7863      	ldrb	r3, [r4, #1]
    1cd8:	2b09      	cmp	r3, #9
    1cda:	d004      	beq.n	1ce6 <mag_icm20948_check+0x26>
	else return false;
    1cdc:	2000      	movs	r0, #0
    1cde:	e000      	b.n	1ce2 <mag_icm20948_check+0x22>
    1ce0:	2000      	movs	r0, #0
    1ce2:	b003      	add	sp, #12
    1ce4:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1ce6:	2001      	movs	r0, #1
    1ce8:	e7fb      	b.n	1ce2 <mag_icm20948_check+0x22>
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	00001c01 	.word	0x00001c01

00001cf0 <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    1cf0:	01c0      	lsls	r0, r0, #7
    1cf2:	4b02      	ldr	r3, [pc, #8]	; (1cfc <port_set_output+0xc>)
    1cf4:	469c      	mov	ip, r3
    1cf6:	4460      	add	r0, ip
    1cf8:	6081      	str	r1, [r0, #8]
}
    1cfa:	4770      	bx	lr
    1cfc:	41004400 	.word	0x41004400

00001d00 <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    1d00:	01c0      	lsls	r0, r0, #7
    1d02:	4b02      	ldr	r3, [pc, #8]	; (1d0c <port_set+0xc>)
    1d04:	469c      	mov	ip, r3
    1d06:	4460      	add	r0, ip
    1d08:	6181      	str	r1, [r0, #24]
}
    1d0a:	4770      	bx	lr
    1d0c:	41004400 	.word	0x41004400

00001d10 <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    1d10:	01c0      	lsls	r0, r0, #7
    1d12:	4b02      	ldr	r3, [pc, #8]	; (1d1c <port_clear+0xc>)
    1d14:	469c      	mov	ip, r3
    1d16:	4460      	add	r0, ip
    1d18:	6141      	str	r1, [r0, #20]
}
    1d1a:	4770      	bx	lr
    1d1c:	41004400 	.word	0x41004400

00001d20 <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    1d20:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    1d22:	060b      	lsls	r3, r1, #24
    1d24:	21f0      	movs	r1, #240	; 0xf0
    1d26:	0509      	lsls	r1, r1, #20
    1d28:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    1d2a:	490e      	ldr	r1, [pc, #56]	; (1d64 <port_wrconfig+0x44>)
    1d2c:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    1d2e:	0413      	lsls	r3, r2, #16
    1d30:	0c1c      	lsrs	r4, r3, #16
    1d32:	2b00      	cmp	r3, #0
    1d34:	d005      	beq.n	1d42 <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    1d36:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1d38:	01c3      	lsls	r3, r0, #7
    1d3a:	4c0b      	ldr	r4, [pc, #44]	; (1d68 <port_wrconfig+0x48>)
    1d3c:	46a4      	mov	ip, r4
    1d3e:	4463      	add	r3, ip
    1d40:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    1d42:	2380      	movs	r3, #128	; 0x80
    1d44:	025b      	lsls	r3, r3, #9
    1d46:	429a      	cmp	r2, r3
    1d48:	d30b      	bcc.n	1d62 <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    1d4a:	0c09      	lsrs	r1, r1, #16
    1d4c:	0409      	lsls	r1, r1, #16
    1d4e:	2380      	movs	r3, #128	; 0x80
    1d50:	061b      	lsls	r3, r3, #24
    1d52:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    1d54:	0c12      	lsrs	r2, r2, #16
    1d56:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1d58:	01c0      	lsls	r0, r0, #7
    1d5a:	4b03      	ldr	r3, [pc, #12]	; (1d68 <port_wrconfig+0x48>)
    1d5c:	469c      	mov	ip, r3
    1d5e:	4460      	add	r0, ip
    1d60:	6282      	str	r2, [r0, #40]	; 0x28
	}
    1d62:	bd10      	pop	{r4, pc}
    1d64:	50010000 	.word	0x50010000
    1d68:	41004400 	.word	0x41004400

00001d6c <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    1d6c:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    1d6e:	4c2a      	ldr	r4, [pc, #168]	; (1e18 <pwm_init_tc+0xac>)
    1d70:	42a0      	cmp	r0, r4
    1d72:	d03c      	beq.n	1dee <pwm_init_tc+0x82>
    1d74:	d90f      	bls.n	1d96 <pwm_init_tc+0x2a>
    1d76:	4c29      	ldr	r4, [pc, #164]	; (1e1c <pwm_init_tc+0xb0>)
    1d78:	42a0      	cmp	r0, r4
    1d7a:	d042      	beq.n	1e02 <pwm_init_tc+0x96>
    1d7c:	4c28      	ldr	r4, [pc, #160]	; (1e20 <pwm_init_tc+0xb4>)
    1d7e:	42a0      	cmp	r0, r4
    1d80:	d11b      	bne.n	1dba <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    1d82:	4a28      	ldr	r2, [pc, #160]	; (1e24 <pwm_init_tc+0xb8>)
    1d84:	6a14      	ldr	r4, [r2, #32]
    1d86:	2380      	movs	r3, #128	; 0x80
    1d88:	021b      	lsls	r3, r3, #8
    1d8a:	4323      	orrs	r3, r4
    1d8c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1d8e:	4b26      	ldr	r3, [pc, #152]	; (1e28 <pwm_init_tc+0xbc>)
    1d90:	4a26      	ldr	r2, [pc, #152]	; (1e2c <pwm_init_tc+0xc0>)
    1d92:	805a      	strh	r2, [r3, #2]
		break;
    1d94:	e01c      	b.n	1dd0 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1d96:	4c26      	ldr	r4, [pc, #152]	; (1e30 <pwm_init_tc+0xc4>)
    1d98:	42a0      	cmp	r0, r4
    1d9a:	d010      	beq.n	1dbe <pwm_init_tc+0x52>
    1d9c:	4c25      	ldr	r4, [pc, #148]	; (1e34 <pwm_init_tc+0xc8>)
    1d9e:	42a0      	cmp	r0, r4
    1da0:	d109      	bne.n	1db6 <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    1da2:	4a20      	ldr	r2, [pc, #128]	; (1e24 <pwm_init_tc+0xb8>)
    1da4:	6a14      	ldr	r4, [r2, #32]
    1da6:	2380      	movs	r3, #128	; 0x80
    1da8:	015b      	lsls	r3, r3, #5
    1daa:	4323      	orrs	r3, r4
    1dac:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1dae:	4b1e      	ldr	r3, [pc, #120]	; (1e28 <pwm_init_tc+0xbc>)
    1db0:	4a21      	ldr	r2, [pc, #132]	; (1e38 <pwm_init_tc+0xcc>)
    1db2:	805a      	strh	r2, [r3, #2]
		break;
    1db4:	e00c      	b.n	1dd0 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1db6:	2000      	movs	r0, #0
    1db8:	e018      	b.n	1dec <pwm_init_tc+0x80>
    1dba:	2000      	movs	r0, #0
    1dbc:	e016      	b.n	1dec <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    1dbe:	4a19      	ldr	r2, [pc, #100]	; (1e24 <pwm_init_tc+0xb8>)
    1dc0:	6a14      	ldr	r4, [r2, #32]
    1dc2:	2380      	movs	r3, #128	; 0x80
    1dc4:	011b      	lsls	r3, r3, #4
    1dc6:	4323      	orrs	r3, r4
    1dc8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    1dca:	4b17      	ldr	r3, [pc, #92]	; (1e28 <pwm_init_tc+0xbc>)
    1dcc:	4a1b      	ldr	r2, [pc, #108]	; (1e3c <pwm_init_tc+0xd0>)
    1dce:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1dd0:	4b15      	ldr	r3, [pc, #84]	; (1e28 <pwm_init_tc+0xbc>)
    1dd2:	785b      	ldrb	r3, [r3, #1]
    1dd4:	b25b      	sxtb	r3, r3
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	dbfa      	blt.n	1dd0 <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    1dda:	020b      	lsls	r3, r1, #8
    1ddc:	22e0      	movs	r2, #224	; 0xe0
    1dde:	00d2      	lsls	r2, r2, #3
    1de0:	4013      	ands	r3, r2
    1de2:	2244      	movs	r2, #68	; 0x44
    1de4:	4313      	orrs	r3, r2
    1de6:	b29b      	uxth	r3, r3
    1de8:	8003      	strh	r3, [r0, #0]
	
	return true;
    1dea:	2001      	movs	r0, #1
}
    1dec:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    1dee:	4a0d      	ldr	r2, [pc, #52]	; (1e24 <pwm_init_tc+0xb8>)
    1df0:	6a14      	ldr	r4, [r2, #32]
    1df2:	2380      	movs	r3, #128	; 0x80
    1df4:	019b      	lsls	r3, r3, #6
    1df6:	4323      	orrs	r3, r4
    1df8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1dfa:	4b0b      	ldr	r3, [pc, #44]	; (1e28 <pwm_init_tc+0xbc>)
    1dfc:	4a0e      	ldr	r2, [pc, #56]	; (1e38 <pwm_init_tc+0xcc>)
    1dfe:	805a      	strh	r2, [r3, #2]
		break;
    1e00:	e7e6      	b.n	1dd0 <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    1e02:	4a08      	ldr	r2, [pc, #32]	; (1e24 <pwm_init_tc+0xb8>)
    1e04:	6a14      	ldr	r4, [r2, #32]
    1e06:	2380      	movs	r3, #128	; 0x80
    1e08:	01db      	lsls	r3, r3, #7
    1e0a:	4323      	orrs	r3, r4
    1e0c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1e0e:	4b06      	ldr	r3, [pc, #24]	; (1e28 <pwm_init_tc+0xbc>)
    1e10:	4a06      	ldr	r2, [pc, #24]	; (1e2c <pwm_init_tc+0xc0>)
    1e12:	805a      	strh	r2, [r3, #2]
		break;
    1e14:	e7dc      	b.n	1dd0 <pwm_init_tc+0x64>
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	42003400 	.word	0x42003400
    1e1c:	42003800 	.word	0x42003800
    1e20:	42003c00 	.word	0x42003c00
    1e24:	40000400 	.word	0x40000400
    1e28:	40000c00 	.word	0x40000c00
    1e2c:	0000401d 	.word	0x0000401d
    1e30:	42002c00 	.word	0x42002c00
    1e34:	42003000 	.word	0x42003000
    1e38:	0000401c 	.word	0x0000401c
    1e3c:	0000401b 	.word	0x0000401b

00001e40 <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    1e40:	4a0f      	ldr	r2, [pc, #60]	; (1e80 <pwm_enable_tc+0x40>)
    1e42:	4290      	cmp	r0, r2
    1e44:	d010      	beq.n	1e68 <pwm_enable_tc+0x28>
    1e46:	d807      	bhi.n	1e58 <pwm_enable_tc+0x18>
    1e48:	4a0e      	ldr	r2, [pc, #56]	; (1e84 <pwm_enable_tc+0x44>)
    1e4a:	4290      	cmp	r0, r2
    1e4c:	d00c      	beq.n	1e68 <pwm_enable_tc+0x28>
    1e4e:	4a0e      	ldr	r2, [pc, #56]	; (1e88 <pwm_enable_tc+0x48>)
    1e50:	4290      	cmp	r0, r2
    1e52:	d009      	beq.n	1e68 <pwm_enable_tc+0x28>
    1e54:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    1e56:	4770      	bx	lr
	switch ((uint32_t)tc) {
    1e58:	4a0c      	ldr	r2, [pc, #48]	; (1e8c <pwm_enable_tc+0x4c>)
    1e5a:	4290      	cmp	r0, r2
    1e5c:	d004      	beq.n	1e68 <pwm_enable_tc+0x28>
    1e5e:	4a0c      	ldr	r2, [pc, #48]	; (1e90 <pwm_enable_tc+0x50>)
    1e60:	4290      	cmp	r0, r2
    1e62:	d001      	beq.n	1e68 <pwm_enable_tc+0x28>
    1e64:	2000      	movs	r0, #0
    1e66:	e7f6      	b.n	1e56 <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    1e68:	8803      	ldrh	r3, [r0, #0]
    1e6a:	2202      	movs	r2, #2
    1e6c:	4313      	orrs	r3, r2
    1e6e:	b29b      	uxth	r3, r3
    1e70:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1e72:	7bc3      	ldrb	r3, [r0, #15]
    1e74:	b25b      	sxtb	r3, r3
    1e76:	2b00      	cmp	r3, #0
    1e78:	dbfb      	blt.n	1e72 <pwm_enable_tc+0x32>
	return true;
    1e7a:	2001      	movs	r0, #1
    1e7c:	e7eb      	b.n	1e56 <pwm_enable_tc+0x16>
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	42003400 	.word	0x42003400
    1e84:	42002c00 	.word	0x42002c00
    1e88:	42003000 	.word	0x42003000
    1e8c:	42003800 	.word	0x42003800
    1e90:	42003c00 	.word	0x42003c00

00001e94 <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    1e94:	2307      	movs	r3, #7
    1e96:	4018      	ands	r0, r3
	switch (prescaler) {
    1e98:	2807      	cmp	r0, #7
    1e9a:	d813      	bhi.n	1ec4 <pwm_get_div_val+0x30>
    1e9c:	0080      	lsls	r0, r0, #2
    1e9e:	4b0b      	ldr	r3, [pc, #44]	; (1ecc <pwm_get_div_val+0x38>)
    1ea0:	581b      	ldr	r3, [r3, r0]
    1ea2:	469f      	mov	pc, r3
    1ea4:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    1ea6:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    1ea8:	2004      	movs	r0, #4
    1eaa:	e7fc      	b.n	1ea6 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    1eac:	2008      	movs	r0, #8
    1eae:	e7fa      	b.n	1ea6 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    1eb0:	2010      	movs	r0, #16
    1eb2:	e7f8      	b.n	1ea6 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    1eb4:	2040      	movs	r0, #64	; 0x40
    1eb6:	e7f6      	b.n	1ea6 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    1eb8:	2080      	movs	r0, #128	; 0x80
    1eba:	0040      	lsls	r0, r0, #1
    1ebc:	e7f3      	b.n	1ea6 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    1ebe:	2080      	movs	r0, #128	; 0x80
    1ec0:	00c0      	lsls	r0, r0, #3
    1ec2:	e7f0      	b.n	1ea6 <pwm_get_div_val+0x12>
	return 0;
    1ec4:	2000      	movs	r0, #0
    1ec6:	e7ee      	b.n	1ea6 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    1ec8:	2002      	movs	r0, #2
    1eca:	e7ec      	b.n	1ea6 <pwm_get_div_val+0x12>
    1ecc:	000058d8 	.word	0x000058d8

00001ed0 <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    1ed0:	b570      	push	{r4, r5, r6, lr}
    1ed2:	0004      	movs	r4, r0
    1ed4:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    1ed6:	4a16      	ldr	r2, [pc, #88]	; (1f30 <pwm_set_frequency_tc+0x60>)
    1ed8:	4290      	cmp	r0, r2
    1eda:	d010      	beq.n	1efe <pwm_set_frequency_tc+0x2e>
    1edc:	d807      	bhi.n	1eee <pwm_set_frequency_tc+0x1e>
    1ede:	4a15      	ldr	r2, [pc, #84]	; (1f34 <pwm_set_frequency_tc+0x64>)
    1ee0:	4290      	cmp	r0, r2
    1ee2:	d00c      	beq.n	1efe <pwm_set_frequency_tc+0x2e>
    1ee4:	4a14      	ldr	r2, [pc, #80]	; (1f38 <pwm_set_frequency_tc+0x68>)
    1ee6:	4290      	cmp	r0, r2
    1ee8:	d009      	beq.n	1efe <pwm_set_frequency_tc+0x2e>
    1eea:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    1eec:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    1eee:	4a13      	ldr	r2, [pc, #76]	; (1f3c <pwm_set_frequency_tc+0x6c>)
    1ef0:	4290      	cmp	r0, r2
    1ef2:	d004      	beq.n	1efe <pwm_set_frequency_tc+0x2e>
    1ef4:	4a12      	ldr	r2, [pc, #72]	; (1f40 <pwm_set_frequency_tc+0x70>)
    1ef6:	4290      	cmp	r0, r2
    1ef8:	d001      	beq.n	1efe <pwm_set_frequency_tc+0x2e>
    1efa:	2000      	movs	r0, #0
    1efc:	e7f6      	b.n	1eec <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    1efe:	8823      	ldrh	r3, [r4, #0]
    1f00:	0a1b      	lsrs	r3, r3, #8
    1f02:	2007      	movs	r0, #7
    1f04:	4018      	ands	r0, r3
    1f06:	4b0f      	ldr	r3, [pc, #60]	; (1f44 <pwm_set_frequency_tc+0x74>)
    1f08:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    1f0a:	4b0f      	ldr	r3, [pc, #60]	; (1f48 <pwm_set_frequency_tc+0x78>)
    1f0c:	4798      	blx	r3
    1f0e:	4b0f      	ldr	r3, [pc, #60]	; (1f4c <pwm_set_frequency_tc+0x7c>)
    1f10:	1c29      	adds	r1, r5, #0
    1f12:	4798      	blx	r3
    1f14:	1c01      	adds	r1, r0, #0
    1f16:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <pwm_set_frequency_tc+0x80>)
    1f18:	480e      	ldr	r0, [pc, #56]	; (1f54 <pwm_set_frequency_tc+0x84>)
    1f1a:	4798      	blx	r3
    1f1c:	4b0e      	ldr	r3, [pc, #56]	; (1f58 <pwm_set_frequency_tc+0x88>)
    1f1e:	4798      	blx	r3
	if (per > 0xFF) return false;
    1f20:	28ff      	cmp	r0, #255	; 0xff
    1f22:	d803      	bhi.n	1f2c <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    1f24:	b2c0      	uxtb	r0, r0
    1f26:	7520      	strb	r0, [r4, #20]
	return true;
    1f28:	2001      	movs	r0, #1
    1f2a:	e7df      	b.n	1eec <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    1f2c:	2000      	movs	r0, #0
    1f2e:	e7dd      	b.n	1eec <pwm_set_frequency_tc+0x1c>
    1f30:	42003400 	.word	0x42003400
    1f34:	42002c00 	.word	0x42002c00
    1f38:	42003000 	.word	0x42003000
    1f3c:	42003800 	.word	0x42003800
    1f40:	42003c00 	.word	0x42003c00
    1f44:	00001e95 	.word	0x00001e95
    1f48:	000051cd 	.word	0x000051cd
    1f4c:	00004bed 	.word	0x00004bed
    1f50:	00004821 	.word	0x00004821
    1f54:	4c371b00 	.word	0x4c371b00
    1f58:	000044ed 	.word	0x000044ed

00001f5c <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    1f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f5e:	0004      	movs	r4, r0
    1f60:	000e      	movs	r6, r1
    1f62:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    1f64:	4a1b      	ldr	r2, [pc, #108]	; (1fd4 <pwm_set_duty_tc+0x78>)
    1f66:	4290      	cmp	r0, r2
    1f68:	d010      	beq.n	1f8c <pwm_set_duty_tc+0x30>
    1f6a:	d807      	bhi.n	1f7c <pwm_set_duty_tc+0x20>
    1f6c:	4a1a      	ldr	r2, [pc, #104]	; (1fd8 <pwm_set_duty_tc+0x7c>)
    1f6e:	4290      	cmp	r0, r2
    1f70:	d00c      	beq.n	1f8c <pwm_set_duty_tc+0x30>
    1f72:	4a1a      	ldr	r2, [pc, #104]	; (1fdc <pwm_set_duty_tc+0x80>)
    1f74:	4290      	cmp	r0, r2
    1f76:	d009      	beq.n	1f8c <pwm_set_duty_tc+0x30>
    1f78:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    1f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    1f7c:	4a18      	ldr	r2, [pc, #96]	; (1fe0 <pwm_set_duty_tc+0x84>)
    1f7e:	4290      	cmp	r0, r2
    1f80:	d004      	beq.n	1f8c <pwm_set_duty_tc+0x30>
    1f82:	4a18      	ldr	r2, [pc, #96]	; (1fe4 <pwm_set_duty_tc+0x88>)
    1f84:	4290      	cmp	r0, r2
    1f86:	d001      	beq.n	1f8c <pwm_set_duty_tc+0x30>
    1f88:	2000      	movs	r0, #0
    1f8a:	e7f6      	b.n	1f7a <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1f8c:	4b16      	ldr	r3, [pc, #88]	; (1fe8 <pwm_set_duty_tc+0x8c>)
    1f8e:	2100      	movs	r1, #0
    1f90:	1c28      	adds	r0, r5, #0
    1f92:	4798      	blx	r3
    1f94:	2800      	cmp	r0, #0
    1f96:	d11b      	bne.n	1fd0 <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    1f98:	4b14      	ldr	r3, [pc, #80]	; (1fec <pwm_set_duty_tc+0x90>)
    1f9a:	21fe      	movs	r1, #254	; 0xfe
    1f9c:	0589      	lsls	r1, r1, #22
    1f9e:	1c28      	adds	r0, r5, #0
    1fa0:	4798      	blx	r3
    1fa2:	2800      	cmp	r0, #0
    1fa4:	d001      	beq.n	1faa <pwm_set_duty_tc+0x4e>
    1fa6:	25fe      	movs	r5, #254	; 0xfe
    1fa8:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    1faa:	7d27      	ldrb	r7, [r4, #20]
    1fac:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    1fae:	4b10      	ldr	r3, [pc, #64]	; (1ff0 <pwm_set_duty_tc+0x94>)
    1fb0:	0038      	movs	r0, r7
    1fb2:	4798      	blx	r3
    1fb4:	4b0f      	ldr	r3, [pc, #60]	; (1ff4 <pwm_set_duty_tc+0x98>)
    1fb6:	1c29      	adds	r1, r5, #0
    1fb8:	4798      	blx	r3
    1fba:	4b0f      	ldr	r3, [pc, #60]	; (1ff8 <pwm_set_duty_tc+0x9c>)
    1fbc:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    1fbe:	003b      	movs	r3, r7
    1fc0:	4287      	cmp	r7, r0
    1fc2:	d300      	bcc.n	1fc6 <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    1fc4:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    1fc6:	b2db      	uxtb	r3, r3
    1fc8:	19a4      	adds	r4, r4, r6
    1fca:	7623      	strb	r3, [r4, #24]
	return true;
    1fcc:	2001      	movs	r0, #1
    1fce:	e7d4      	b.n	1f7a <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1fd0:	2500      	movs	r5, #0
    1fd2:	e7e1      	b.n	1f98 <pwm_set_duty_tc+0x3c>
    1fd4:	42003400 	.word	0x42003400
    1fd8:	42002c00 	.word	0x42002c00
    1fdc:	42003000 	.word	0x42003000
    1fe0:	42003800 	.word	0x42003800
    1fe4:	42003c00 	.word	0x42003c00
    1fe8:	00004441 	.word	0x00004441
    1fec:	00004469 	.word	0x00004469
    1ff0:	000051cd 	.word	0x000051cd
    1ff4:	00004bed 	.word	0x00004bed
    1ff8:	000044ed 	.word	0x000044ed

00001ffc <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    1ffc:	4b11      	ldr	r3, [pc, #68]	; (2044 <STACK_SIZE+0x44>)
    1ffe:	4298      	cmp	r0, r3
    2000:	d017      	beq.n	2032 <STACK_SIZE+0x32>
    2002:	d80c      	bhi.n	201e <STACK_SIZE+0x1e>
    2004:	4b10      	ldr	r3, [pc, #64]	; (2048 <STACK_SIZE+0x48>)
    2006:	4298      	cmp	r0, r3
    2008:	d015      	beq.n	2036 <STACK_SIZE+0x36>
    200a:	4b10      	ldr	r3, [pc, #64]	; (204c <STACK_SIZE+0x4c>)
    200c:	4298      	cmp	r0, r3
    200e:	d014      	beq.n	203a <STACK_SIZE+0x3a>
    2010:	4b0f      	ldr	r3, [pc, #60]	; (2050 <STACK_SIZE+0x50>)
    2012:	4298      	cmp	r0, r3
    2014:	d001      	beq.n	201a <STACK_SIZE+0x1a>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    2016:	2000      	movs	r0, #0
		break;
	}
}
    2018:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    201a:	2001      	movs	r0, #1
    201c:	e7fc      	b.n	2018 <STACK_SIZE+0x18>
    201e:	4b0d      	ldr	r3, [pc, #52]	; (2054 <STACK_SIZE+0x54>)
    2020:	4298      	cmp	r0, r3
    2022:	d00c      	beq.n	203e <STACK_SIZE+0x3e>
    2024:	4b0c      	ldr	r3, [pc, #48]	; (2058 <STACK_SIZE+0x58>)
    2026:	4298      	cmp	r0, r3
    2028:	d001      	beq.n	202e <STACK_SIZE+0x2e>
		return false;
    202a:	2000      	movs	r0, #0
    202c:	e7f4      	b.n	2018 <STACK_SIZE+0x18>
	switch ((uint32_t)sercom) {
    202e:	2001      	movs	r0, #1
    2030:	e7f2      	b.n	2018 <STACK_SIZE+0x18>
    2032:	2001      	movs	r0, #1
    2034:	e7f0      	b.n	2018 <STACK_SIZE+0x18>
    2036:	2001      	movs	r0, #1
    2038:	e7ee      	b.n	2018 <STACK_SIZE+0x18>
    203a:	2001      	movs	r0, #1
    203c:	e7ec      	b.n	2018 <STACK_SIZE+0x18>
    203e:	2001      	movs	r0, #1
    2040:	e7ea      	b.n	2018 <STACK_SIZE+0x18>
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	42001400 	.word	0x42001400
    2048:	42000c00 	.word	0x42000c00
    204c:	42001000 	.word	0x42001000
    2050:	42000800 	.word	0x42000800
    2054:	42001800 	.word	0x42001800
    2058:	42001c00 	.word	0x42001c00

0000205c <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    205c:	4b29      	ldr	r3, [pc, #164]	; (2104 <sercom_init+0xa8>)
    205e:	4298      	cmp	r0, r3
    2060:	d03d      	beq.n	20de <sercom_init+0x82>
    2062:	d822      	bhi.n	20aa <sercom_init+0x4e>
    2064:	4b28      	ldr	r3, [pc, #160]	; (2108 <sercom_init+0xac>)
    2066:	4298      	cmp	r0, r3
    2068:	d030      	beq.n	20cc <sercom_init+0x70>
    206a:	4b28      	ldr	r3, [pc, #160]	; (210c <sercom_init+0xb0>)
    206c:	4298      	cmp	r0, r3
    206e:	d108      	bne.n	2082 <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    2070:	4a27      	ldr	r2, [pc, #156]	; (2110 <sercom_init+0xb4>)
    2072:	6a13      	ldr	r3, [r2, #32]
    2074:	2110      	movs	r1, #16
    2076:	430b      	orrs	r3, r1
    2078:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    207a:	4b26      	ldr	r3, [pc, #152]	; (2114 <sercom_init+0xb8>)
    207c:	4a26      	ldr	r2, [pc, #152]	; (2118 <sercom_init+0xbc>)
    207e:	805a      	strh	r2, [r3, #2]
		break;
    2080:	e00a      	b.n	2098 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    2082:	4b26      	ldr	r3, [pc, #152]	; (211c <sercom_init+0xc0>)
    2084:	4298      	cmp	r0, r3
    2086:	d10e      	bne.n	20a6 <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    2088:	4a21      	ldr	r2, [pc, #132]	; (2110 <sercom_init+0xb4>)
    208a:	6a13      	ldr	r3, [r2, #32]
    208c:	2104      	movs	r1, #4
    208e:	430b      	orrs	r3, r1
    2090:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    2092:	4b20      	ldr	r3, [pc, #128]	; (2114 <sercom_init+0xb8>)
    2094:	4a22      	ldr	r2, [pc, #136]	; (2120 <sercom_init+0xc4>)
    2096:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2098:	4b1e      	ldr	r3, [pc, #120]	; (2114 <sercom_init+0xb8>)
    209a:	785b      	ldrb	r3, [r3, #1]
    209c:	b25b      	sxtb	r3, r3
    209e:	2b00      	cmp	r3, #0
    20a0:	dbfa      	blt.n	2098 <sercom_init+0x3c>
	
	return true;
    20a2:	2001      	movs	r0, #1
    20a4:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    20a6:	2000      	movs	r0, #0
    20a8:	e7fc      	b.n	20a4 <sercom_init+0x48>
    20aa:	4b1e      	ldr	r3, [pc, #120]	; (2124 <sercom_init+0xc8>)
    20ac:	4298      	cmp	r0, r3
    20ae:	d01f      	beq.n	20f0 <sercom_init+0x94>
    20b0:	4b1d      	ldr	r3, [pc, #116]	; (2128 <sercom_init+0xcc>)
    20b2:	4298      	cmp	r0, r3
    20b4:	d108      	bne.n	20c8 <sercom_init+0x6c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    20b6:	4a16      	ldr	r2, [pc, #88]	; (2110 <sercom_init+0xb4>)
    20b8:	6a13      	ldr	r3, [r2, #32]
    20ba:	2180      	movs	r1, #128	; 0x80
    20bc:	430b      	orrs	r3, r1
    20be:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    20c0:	4b14      	ldr	r3, [pc, #80]	; (2114 <sercom_init+0xb8>)
    20c2:	4a1a      	ldr	r2, [pc, #104]	; (212c <sercom_init+0xd0>)
    20c4:	805a      	strh	r2, [r3, #2]
		break;
    20c6:	e7e7      	b.n	2098 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    20c8:	2000      	movs	r0, #0
    20ca:	e7eb      	b.n	20a4 <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    20cc:	4a10      	ldr	r2, [pc, #64]	; (2110 <sercom_init+0xb4>)
    20ce:	6a13      	ldr	r3, [r2, #32]
    20d0:	2108      	movs	r1, #8
    20d2:	430b      	orrs	r3, r1
    20d4:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    20d6:	4b0f      	ldr	r3, [pc, #60]	; (2114 <sercom_init+0xb8>)
    20d8:	4a15      	ldr	r2, [pc, #84]	; (2130 <sercom_init+0xd4>)
    20da:	805a      	strh	r2, [r3, #2]
		break;
    20dc:	e7dc      	b.n	2098 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    20de:	4a0c      	ldr	r2, [pc, #48]	; (2110 <sercom_init+0xb4>)
    20e0:	6a13      	ldr	r3, [r2, #32]
    20e2:	2120      	movs	r1, #32
    20e4:	430b      	orrs	r3, r1
    20e6:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    20e8:	4b0a      	ldr	r3, [pc, #40]	; (2114 <sercom_init+0xb8>)
    20ea:	4a12      	ldr	r2, [pc, #72]	; (2134 <sercom_init+0xd8>)
    20ec:	805a      	strh	r2, [r3, #2]
		break;
    20ee:	e7d3      	b.n	2098 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    20f0:	4a07      	ldr	r2, [pc, #28]	; (2110 <sercom_init+0xb4>)
    20f2:	6a13      	ldr	r3, [r2, #32]
    20f4:	2140      	movs	r1, #64	; 0x40
    20f6:	430b      	orrs	r3, r1
    20f8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    20fa:	4b06      	ldr	r3, [pc, #24]	; (2114 <sercom_init+0xb8>)
    20fc:	4a0e      	ldr	r2, [pc, #56]	; (2138 <sercom_init+0xdc>)
    20fe:	805a      	strh	r2, [r3, #2]
		break;
    2100:	e7ca      	b.n	2098 <sercom_init+0x3c>
    2102:	46c0      	nop			; (mov r8, r8)
    2104:	42001400 	.word	0x42001400
    2108:	42000c00 	.word	0x42000c00
    210c:	42001000 	.word	0x42001000
    2110:	40000400 	.word	0x40000400
    2114:	40000c00 	.word	0x40000c00
    2118:	00004016 	.word	0x00004016
    211c:	42000800 	.word	0x42000800
    2120:	00004014 	.word	0x00004014
    2124:	42001800 	.word	0x42001800
    2128:	42001c00 	.word	0x42001c00
    212c:	00004019 	.word	0x00004019
    2130:	00004015 	.word	0x00004015
    2134:	00004017 	.word	0x00004017
    2138:	00004018 	.word	0x00004018

0000213c <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    213c:	b570      	push	{r4, r5, r6, lr}
    213e:	0006      	movs	r6, r0
    2140:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    2142:	4b0a      	ldr	r3, [pc, #40]	; (216c <spi_set_baud+0x30>)
    2144:	4798      	blx	r3
    2146:	1e04      	subs	r4, r0, #0
    2148:	d00e      	beq.n	2168 <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    214a:	0068      	lsls	r0, r5, #1
    214c:	4b08      	ldr	r3, [pc, #32]	; (2170 <spi_set_baud+0x34>)
    214e:	4798      	blx	r3
    2150:	1c01      	adds	r1, r0, #0
    2152:	4b08      	ldr	r3, [pc, #32]	; (2174 <spi_set_baud+0x38>)
    2154:	4808      	ldr	r0, [pc, #32]	; (2178 <spi_set_baud+0x3c>)
    2156:	4798      	blx	r3
    2158:	4b08      	ldr	r3, [pc, #32]	; (217c <spi_set_baud+0x40>)
    215a:	21fe      	movs	r1, #254	; 0xfe
    215c:	0589      	lsls	r1, r1, #22
    215e:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    2160:	4b07      	ldr	r3, [pc, #28]	; (2180 <spi_set_baud+0x44>)
    2162:	4798      	blx	r3
    2164:	b2c0      	uxtb	r0, r0
    2166:	7330      	strb	r0, [r6, #12]
	return true;
}
    2168:	0020      	movs	r0, r4
    216a:	bd70      	pop	{r4, r5, r6, pc}
    216c:	00001ffd 	.word	0x00001ffd
    2170:	00005265 	.word	0x00005265
    2174:	00004821 	.word	0x00004821
    2178:	4c371b00 	.word	0x4c371b00
    217c:	00004e69 	.word	0x00004e69
    2180:	000044ed 	.word	0x000044ed

00002184 <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    2184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2186:	46ce      	mov	lr, r9
    2188:	4647      	mov	r7, r8
    218a:	b580      	push	{r7, lr}
    218c:	0004      	movs	r4, r0
    218e:	000d      	movs	r5, r1
    2190:	0017      	movs	r7, r2
    2192:	001e      	movs	r6, r3
    2194:	ab08      	add	r3, sp, #32
    2196:	781b      	ldrb	r3, [r3, #0]
    2198:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    219a:	4b12      	ldr	r3, [pc, #72]	; (21e4 <spi_init+0x60>)
    219c:	4798      	blx	r3
    219e:	4680      	mov	r8, r0
    21a0:	2800      	cmp	r0, #0
    21a2:	d104      	bne.n	21ae <spi_init+0x2a>
}
    21a4:	4640      	mov	r0, r8
    21a6:	bcc0      	pop	{r6, r7}
    21a8:	46b9      	mov	r9, r7
    21aa:	46b0      	mov	r8, r6
    21ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    21ae:	076d      	lsls	r5, r5, #29
    21b0:	073f      	lsls	r7, r7, #28
    21b2:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    21b4:	0536      	lsls	r6, r6, #20
    21b6:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    21b8:	464b      	mov	r3, r9
    21ba:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    21bc:	431d      	orrs	r5, r3
    21be:	230c      	movs	r3, #12
    21c0:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    21c2:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    21c4:	2380      	movs	r3, #128	; 0x80
    21c6:	029b      	lsls	r3, r3, #10
    21c8:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    21ca:	9909      	ldr	r1, [sp, #36]	; 0x24
    21cc:	0020      	movs	r0, r4
    21ce:	4b06      	ldr	r3, [pc, #24]	; (21e8 <spi_init+0x64>)
    21d0:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    21d2:	6823      	ldr	r3, [r4, #0]
    21d4:	2202      	movs	r2, #2
    21d6:	4313      	orrs	r3, r2
    21d8:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    21da:	69e3      	ldr	r3, [r4, #28]
    21dc:	079b      	lsls	r3, r3, #30
    21de:	d4fc      	bmi.n	21da <spi_init+0x56>
    21e0:	e7e0      	b.n	21a4 <spi_init+0x20>
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	0000205d 	.word	0x0000205d
    21e8:	0000213d 	.word	0x0000213d

000021ec <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    21ec:	7e03      	ldrb	r3, [r0, #24]
    21ee:	07db      	lsls	r3, r3, #31
    21f0:	d5fc      	bpl.n	21ec <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    21f2:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    21f4:	7e03      	ldrb	r3, [r0, #24]
    21f6:	079b      	lsls	r3, r3, #30
    21f8:	d5fc      	bpl.n	21f4 <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    21fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
    21fc:	b2c0      	uxtb	r0, r0
}
    21fe:	4770      	bx	lr

00002200 <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    2200:	e000      	b.n	2204 <spi_flush+0x4>
    2202:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2204:	7e03      	ldrb	r3, [r0, #24]
    2206:	075b      	lsls	r3, r3, #29
    2208:	d4fb      	bmi.n	2202 <spi_flush+0x2>
    220a:	4770      	bx	lr

0000220c <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    220c:	4a27      	ldr	r2, [pc, #156]	; (22ac <set_clock_48m+0xa0>)
    220e:	6853      	ldr	r3, [r2, #4]
    2210:	2102      	movs	r1, #2
    2212:	430b      	orrs	r3, r1
    2214:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    2216:	4a26      	ldr	r2, [pc, #152]	; (22b0 <set_clock_48m+0xa4>)
    2218:	4b26      	ldr	r3, [pc, #152]	; (22b4 <set_clock_48m+0xa8>)
    221a:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    221c:	8a93      	ldrh	r3, [r2, #20]
    221e:	430b      	orrs	r3, r1
    2220:	b29b      	uxth	r3, r3
    2222:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    2224:	4b22      	ldr	r3, [pc, #136]	; (22b0 <set_clock_48m+0xa4>)
    2226:	68db      	ldr	r3, [r3, #12]
    2228:	079b      	lsls	r3, r3, #30
    222a:	d5fb      	bpl.n	2224 <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    222c:	4b22      	ldr	r3, [pc, #136]	; (22b8 <set_clock_48m+0xac>)
    222e:	2202      	movs	r2, #2
    2230:	32ff      	adds	r2, #255	; 0xff
    2232:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    2234:	4a21      	ldr	r2, [pc, #132]	; (22bc <set_clock_48m+0xb0>)
    2236:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2238:	4b1f      	ldr	r3, [pc, #124]	; (22b8 <set_clock_48m+0xac>)
    223a:	785b      	ldrb	r3, [r3, #1]
    223c:	b25b      	sxtb	r3, r3
    223e:	2b00      	cmp	r3, #0
    2240:	dbfa      	blt.n	2238 <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    2242:	4b1d      	ldr	r3, [pc, #116]	; (22b8 <set_clock_48m+0xac>)
    2244:	2282      	movs	r2, #130	; 0x82
    2246:	01d2      	lsls	r2, r2, #7
    2248:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    224a:	4b19      	ldr	r3, [pc, #100]	; (22b0 <set_clock_48m+0xa4>)
    224c:	68db      	ldr	r3, [r3, #12]
    224e:	06db      	lsls	r3, r3, #27
    2250:	d5fb      	bpl.n	224a <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    2252:	4b17      	ldr	r3, [pc, #92]	; (22b0 <set_clock_48m+0xa4>)
    2254:	2202      	movs	r2, #2
    2256:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2258:	4b15      	ldr	r3, [pc, #84]	; (22b0 <set_clock_48m+0xa4>)
    225a:	68db      	ldr	r3, [r3, #12]
    225c:	06db      	lsls	r3, r3, #27
    225e:	d5fb      	bpl.n	2258 <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    2260:	4b13      	ldr	r3, [pc, #76]	; (22b0 <set_clock_48m+0xa4>)
    2262:	4a17      	ldr	r2, [pc, #92]	; (22c0 <set_clock_48m+0xb4>)
    2264:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2266:	4b12      	ldr	r3, [pc, #72]	; (22b0 <set_clock_48m+0xa4>)
    2268:	68db      	ldr	r3, [r3, #12]
    226a:	06db      	lsls	r3, r3, #27
    226c:	d5fb      	bpl.n	2266 <set_clock_48m+0x5a>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    226e:	4b15      	ldr	r3, [pc, #84]	; (22c4 <set_clock_48m+0xb8>)
    2270:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    2272:	4b0f      	ldr	r3, [pc, #60]	; (22b0 <set_clock_48m+0xa4>)
    2274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2276:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2278:	4b0d      	ldr	r3, [pc, #52]	; (22b0 <set_clock_48m+0xa4>)
    227a:	68db      	ldr	r3, [r3, #12]
    227c:	06db      	lsls	r3, r3, #27
    227e:	d5fb      	bpl.n	2278 <set_clock_48m+0x6c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    2280:	4a0b      	ldr	r2, [pc, #44]	; (22b0 <set_clock_48m+0xa4>)
    2282:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2284:	4910      	ldr	r1, [pc, #64]	; (22c8 <set_clock_48m+0xbc>)
    2286:	430b      	orrs	r3, r1
    2288:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    228a:	4b09      	ldr	r3, [pc, #36]	; (22b0 <set_clock_48m+0xa4>)
    228c:	68db      	ldr	r3, [r3, #12]
    228e:	061b      	lsls	r3, r3, #24
    2290:	d5fb      	bpl.n	228a <set_clock_48m+0x7e>
    2292:	4b07      	ldr	r3, [pc, #28]	; (22b0 <set_clock_48m+0xa4>)
    2294:	68db      	ldr	r3, [r3, #12]
    2296:	065b      	lsls	r3, r3, #25
    2298:	d5f7      	bpl.n	228a <set_clock_48m+0x7e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    229a:	4b07      	ldr	r3, [pc, #28]	; (22b8 <set_clock_48m+0xac>)
    229c:	4a0b      	ldr	r2, [pc, #44]	; (22cc <set_clock_48m+0xc0>)
    229e:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    22a0:	4b05      	ldr	r3, [pc, #20]	; (22b8 <set_clock_48m+0xac>)
    22a2:	785b      	ldrb	r3, [r3, #1]
    22a4:	b25b      	sxtb	r3, r3
    22a6:	2b00      	cmp	r3, #0
    22a8:	dbfa      	blt.n	22a0 <set_clock_48m+0x94>
}
    22aa:	4770      	bx	lr
    22ac:	41004000 	.word	0x41004000
    22b0:	40000800 	.word	0x40000800
    22b4:	0000040c 	.word	0x0000040c
    22b8:	40000c00 	.word	0x40000c00
    22bc:	00030501 	.word	0x00030501
    22c0:	7dff05b9 	.word	0x7dff05b9
    22c4:	00806020 	.word	0x00806020
    22c8:	00000806 	.word	0x00000806
    22cc:	00030700 	.word	0x00030700

000022d0 <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    22d0:	3801      	subs	r0, #1
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	46c0      	nop			; (mov r8, r8)
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	46c0      	nop			; (mov r8, r8)
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	d1f8      	bne.n	22d0 <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    22de:	4770      	bx	lr

000022e0 <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    22e0:	4a14      	ldr	r2, [pc, #80]	; (2334 <init_timer+0x54>)
    22e2:	6a11      	ldr	r1, [r2, #32]
    22e4:	2380      	movs	r3, #128	; 0x80
    22e6:	015b      	lsls	r3, r3, #5
    22e8:	430b      	orrs	r3, r1
    22ea:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    22ec:	4b12      	ldr	r3, [pc, #72]	; (2338 <init_timer+0x58>)
    22ee:	4a13      	ldr	r2, [pc, #76]	; (233c <init_timer+0x5c>)
    22f0:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    22f2:	4b11      	ldr	r3, [pc, #68]	; (2338 <init_timer+0x58>)
    22f4:	785b      	ldrb	r3, [r3, #1]
    22f6:	b25b      	sxtb	r3, r3
    22f8:	2b00      	cmp	r3, #0
    22fa:	dbfa      	blt.n	22f2 <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    22fc:	4b10      	ldr	r3, [pc, #64]	; (2340 <init_timer+0x60>)
    22fe:	2208      	movs	r2, #8
    2300:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2302:	4b0f      	ldr	r3, [pc, #60]	; (2340 <init_timer+0x60>)
    2304:	7bdb      	ldrb	r3, [r3, #15]
    2306:	b25b      	sxtb	r3, r3
    2308:	2b00      	cmp	r3, #0
    230a:	dbfa      	blt.n	2302 <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    230c:	4a0c      	ldr	r2, [pc, #48]	; (2340 <init_timer+0x60>)
    230e:	8813      	ldrh	r3, [r2, #0]
    2310:	2102      	movs	r1, #2
    2312:	430b      	orrs	r3, r1
    2314:	b29b      	uxth	r3, r3
    2316:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2318:	4b09      	ldr	r3, [pc, #36]	; (2340 <init_timer+0x60>)
    231a:	7bdb      	ldrb	r3, [r3, #15]
    231c:	b25b      	sxtb	r3, r3
    231e:	2b00      	cmp	r3, #0
    2320:	dbfa      	blt.n	2318 <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    2322:	4b07      	ldr	r3, [pc, #28]	; (2340 <init_timer+0x60>)
    2324:	4a07      	ldr	r2, [pc, #28]	; (2344 <init_timer+0x64>)
    2326:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2328:	4b05      	ldr	r3, [pc, #20]	; (2340 <init_timer+0x60>)
    232a:	7bdb      	ldrb	r3, [r3, #15]
    232c:	b25b      	sxtb	r3, r3
    232e:	2b00      	cmp	r3, #0
    2330:	dbfa      	blt.n	2328 <init_timer+0x48>
}
    2332:	4770      	bx	lr
    2334:	40000400 	.word	0x40000400
    2338:	40000c00 	.word	0x40000c00
    233c:	0000401c 	.word	0x0000401c
    2340:	42003000 	.word	0x42003000
    2344:	00004010 	.word	0x00004010

00002348 <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    2348:	4b01      	ldr	r3, [pc, #4]	; (2350 <read_timer_20ns+0x8>)
    234a:	6918      	ldr	r0, [r3, #16]
}
    234c:	4770      	bx	lr
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	42003000 	.word	0x42003000

00002354 <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    2354:	4b04      	ldr	r3, [pc, #16]	; (2368 <init_timer_interrupt+0x14>)
    2356:	2210      	movs	r2, #16
    2358:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    235a:	4b03      	ldr	r3, [pc, #12]	; (2368 <init_timer_interrupt+0x14>)
    235c:	7bdb      	ldrb	r3, [r3, #15]
    235e:	b25b      	sxtb	r3, r3
    2360:	2b00      	cmp	r3, #0
    2362:	dbfa      	blt.n	235a <init_timer_interrupt+0x6>
}
    2364:	4770      	bx	lr
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	42003000 	.word	0x42003000

0000236c <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    236c:	4b02      	ldr	r3, [pc, #8]	; (2378 <timer_enable_interrupt+0xc>)
    236e:	2280      	movs	r2, #128	; 0x80
    2370:	0312      	lsls	r2, r2, #12
    2372:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    2374:	4770      	bx	lr
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	e000e100 	.word	0xe000e100

0000237c <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    237c:	4a04      	ldr	r2, [pc, #16]	; (2390 <timer_disable_interrupt+0x14>)
    237e:	2380      	movs	r3, #128	; 0x80
    2380:	2180      	movs	r1, #128	; 0x80
    2382:	0309      	lsls	r1, r1, #12
    2384:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2386:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    238a:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    238e:	4770      	bx	lr
    2390:	e000e100 	.word	0xe000e100

00002394 <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    2394:	4b04      	ldr	r3, [pc, #16]	; (23a8 <timer_clear_interrupt+0x14>)
    2396:	2210      	movs	r2, #16
    2398:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    239a:	4a04      	ldr	r2, [pc, #16]	; (23ac <timer_clear_interrupt+0x18>)
    239c:	23c0      	movs	r3, #192	; 0xc0
    239e:	005b      	lsls	r3, r3, #1
    23a0:	2180      	movs	r1, #128	; 0x80
    23a2:	0309      	lsls	r1, r1, #12
    23a4:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    23a6:	4770      	bx	lr
    23a8:	42003000 	.word	0x42003000
    23ac:	e000e100 	.word	0xe000e100

000023b0 <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    23b0:	4a02      	ldr	r2, [pc, #8]	; (23bc <timer_set_interrupt_time+0xc>)
    23b2:	6993      	ldr	r3, [r2, #24]
    23b4:	4303      	orrs	r3, r0
    23b6:	6193      	str	r3, [r2, #24]
    23b8:	4770      	bx	lr
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	42003000 	.word	0x42003000

000023c0 <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    23c0:	b570      	push	{r4, r5, r6, lr}
    23c2:	0006      	movs	r6, r0
    23c4:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    23c6:	4b10      	ldr	r3, [pc, #64]	; (2408 <uart_set_baud+0x48>)
    23c8:	4798      	blx	r3
    23ca:	1e04      	subs	r4, r0, #0
    23cc:	d018      	beq.n	2400 <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    23ce:	4b0f      	ldr	r3, [pc, #60]	; (240c <uart_set_baud+0x4c>)
    23d0:	429d      	cmp	r5, r3
    23d2:	d817      	bhi.n	2404 <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    23d4:	4b0e      	ldr	r3, [pc, #56]	; (2410 <uart_set_baud+0x50>)
    23d6:	0028      	movs	r0, r5
    23d8:	4798      	blx	r3
    23da:	4b0e      	ldr	r3, [pc, #56]	; (2414 <uart_set_baud+0x54>)
    23dc:	490e      	ldr	r1, [pc, #56]	; (2418 <uart_set_baud+0x58>)
    23de:	4798      	blx	r3
    23e0:	4d0e      	ldr	r5, [pc, #56]	; (241c <uart_set_baud+0x5c>)
    23e2:	2183      	movs	r1, #131	; 0x83
    23e4:	05c9      	lsls	r1, r1, #23
    23e6:	47a8      	blx	r5
    23e8:	1c01      	adds	r1, r0, #0
    23ea:	4b0d      	ldr	r3, [pc, #52]	; (2420 <uart_set_baud+0x60>)
    23ec:	20fe      	movs	r0, #254	; 0xfe
    23ee:	0580      	lsls	r0, r0, #22
    23f0:	4798      	blx	r3
    23f2:	218f      	movs	r1, #143	; 0x8f
    23f4:	05c9      	lsls	r1, r1, #23
    23f6:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    23f8:	4b0a      	ldr	r3, [pc, #40]	; (2424 <uart_set_baud+0x64>)
    23fa:	4798      	blx	r3
    23fc:	b280      	uxth	r0, r0
    23fe:	81b0      	strh	r0, [r6, #12]
    return true;
}
    2400:	0020      	movs	r0, r4
    2402:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    2404:	2400      	movs	r4, #0
    2406:	e7fb      	b.n	2400 <uart_set_baud+0x40>
    2408:	00001ffd 	.word	0x00001ffd
    240c:	002dc6c0 	.word	0x002dc6c0
    2410:	00005265 	.word	0x00005265
    2414:	00004821 	.word	0x00004821
    2418:	4c371b00 	.word	0x4c371b00
    241c:	00004bed 	.word	0x00004bed
    2420:	00004e69 	.word	0x00004e69
    2424:	000044ed 	.word	0x000044ed

00002428 <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    2428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    242a:	0004      	movs	r4, r0
    242c:	000e      	movs	r6, r1
    242e:	0017      	movs	r7, r2
    2430:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    2432:	4b11      	ldr	r3, [pc, #68]	; (2478 <uart_init+0x50>)
    2434:	4798      	blx	r3
    2436:	2800      	cmp	r0, #0
    2438:	d01c      	beq.n	2474 <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    243a:	0536      	lsls	r6, r6, #20
    243c:	23c0      	movs	r3, #192	; 0xc0
    243e:	039b      	lsls	r3, r3, #14
    2440:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    2442:	043f      	lsls	r7, r7, #16
    2444:	22c0      	movs	r2, #192	; 0xc0
    2446:	0292      	lsls	r2, r2, #10
    2448:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    244a:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    244c:	4b0b      	ldr	r3, [pc, #44]	; (247c <uart_init+0x54>)
    244e:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    2450:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    2452:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    2454:	69e2      	ldr	r2, [r4, #28]
    2456:	0752      	lsls	r2, r2, #29
    2458:	d4fc      	bmi.n	2454 <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    245a:	0029      	movs	r1, r5
    245c:	0020      	movs	r0, r4
    245e:	4b08      	ldr	r3, [pc, #32]	; (2480 <uart_init+0x58>)
    2460:	4798      	blx	r3
    2462:	2800      	cmp	r0, #0
    2464:	d006      	beq.n	2474 <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    2466:	6823      	ldr	r3, [r4, #0]
    2468:	2202      	movs	r2, #2
    246a:	4313      	orrs	r3, r2
    246c:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    246e:	69e3      	ldr	r3, [r4, #28]
    2470:	079b      	lsls	r3, r3, #30
    2472:	d4fc      	bmi.n	246e <uart_init+0x46>
}
    2474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	0000205d 	.word	0x0000205d
    247c:	40000004 	.word	0x40000004
    2480:	000023c1 	.word	0x000023c1

00002484 <uart_flush>:

void uart_flush(sercom_registers_t* sercom) {
    while (sercom->USART_INT.SERCOM_INTFLAG & SERCOM_USART_INT_INTFLAG_RXC_Msk) sercom->USART_INT.SERCOM_DATA;
    2484:	e000      	b.n	2488 <uart_flush+0x4>
    2486:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2488:	7e03      	ldrb	r3, [r0, #24]
    248a:	075b      	lsls	r3, r3, #29
    248c:	d4fb      	bmi.n	2486 <uart_flush+0x2>
}
    248e:	4770      	bx	lr

00002490 <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    2490:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    2492:	4b10      	ldr	r3, [pc, #64]	; (24d4 <usb_ep0_in_multi+0x44>)
    2494:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    2496:	2c40      	cmp	r4, #64	; 0x40
    2498:	d900      	bls.n	249c <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    249a:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    249c:	0026      	movs	r6, r4
    249e:	4b0d      	ldr	r3, [pc, #52]	; (24d4 <usb_ep0_in_multi+0x44>)
    24a0:	1d1d      	adds	r5, r3, #4
    24a2:	6c59      	ldr	r1, [r3, #68]	; 0x44
    24a4:	0022      	movs	r2, r4
    24a6:	0028      	movs	r0, r5
    24a8:	4b0b      	ldr	r3, [pc, #44]	; (24d8 <usb_ep0_in_multi+0x48>)
    24aa:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    24ac:	2300      	movs	r3, #0
    24ae:	0022      	movs	r2, r4
    24b0:	0029      	movs	r1, r5
    24b2:	2080      	movs	r0, #128	; 0x80
    24b4:	4d09      	ldr	r5, [pc, #36]	; (24dc <usb_ep0_in_multi+0x4c>)
    24b6:	47a8      	blx	r5

	if (tsize == 0) {
    24b8:	2c00      	cmp	r4, #0
    24ba:	d007      	beq.n	24cc <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    24bc:	4b05      	ldr	r3, [pc, #20]	; (24d4 <usb_ep0_in_multi+0x44>)
    24be:	881a      	ldrh	r2, [r3, #0]
    24c0:	1b12      	subs	r2, r2, r4
    24c2:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    24c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    24c6:	1992      	adds	r2, r2, r6
    24c8:	645a      	str	r2, [r3, #68]	; 0x44
}
    24ca:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    24cc:	4b04      	ldr	r3, [pc, #16]	; (24e0 <usb_ep0_in_multi+0x50>)
    24ce:	4798      	blx	r3
    24d0:	e7f4      	b.n	24bc <usb_ep0_in_multi+0x2c>
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	20000498 	.word	0x20000498
    24d8:	0000541d 	.word	0x0000541d
    24dc:	000029a1 	.word	0x000029a1
    24e0:	00002aa9 	.word	0x00002aa9

000024e4 <usb_handle_setup>:

void usb_handle_setup(void){
    24e4:	b510      	push	{r4, lr}
    24e6:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    24e8:	4b40      	ldr	r3, [pc, #256]	; (25ec <usb_handle_setup+0x108>)
    24ea:	2248      	movs	r2, #72	; 0x48
    24ec:	5c9b      	ldrb	r3, [r3, r2]
    24ee:	3218      	adds	r2, #24
    24f0:	421a      	tst	r2, r3
    24f2:	d177      	bne.n	25e4 <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    24f4:	4b3e      	ldr	r3, [pc, #248]	; (25f0 <usb_handle_setup+0x10c>)
    24f6:	785b      	ldrb	r3, [r3, #1]
    24f8:	2b0b      	cmp	r3, #11
    24fa:	d870      	bhi.n	25de <usb_handle_setup+0xfa>
    24fc:	009b      	lsls	r3, r3, #2
    24fe:	4a3d      	ldr	r2, [pc, #244]	; (25f4 <usb_handle_setup+0x110>)
    2500:	58d3      	ldr	r3, [r2, r3]
    2502:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    2504:	4b39      	ldr	r3, [pc, #228]	; (25ec <usb_handle_setup+0x108>)
    2506:	2200      	movs	r2, #0
    2508:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    250a:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    250c:	2002      	movs	r0, #2
    250e:	4b3a      	ldr	r3, [pc, #232]	; (25f8 <usb_handle_setup+0x114>)
    2510:	4798      	blx	r3
				return usb_ep0_out();
    2512:	4b3a      	ldr	r3, [pc, #232]	; (25fc <usb_handle_setup+0x118>)
    2514:	4798      	blx	r3
    2516:	e067      	b.n	25e8 <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    2518:	2000      	movs	r0, #0
    251a:	4b37      	ldr	r3, [pc, #220]	; (25f8 <usb_handle_setup+0x114>)
    251c:	4798      	blx	r3
				return usb_ep0_out();
    251e:	4b37      	ldr	r3, [pc, #220]	; (25fc <usb_handle_setup+0x118>)
    2520:	4798      	blx	r3
    2522:	e061      	b.n	25e8 <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    2524:	2000      	movs	r0, #0
    2526:	4b34      	ldr	r3, [pc, #208]	; (25f8 <usb_handle_setup+0x114>)
    2528:	4798      	blx	r3
				return usb_ep0_out();
    252a:	4b34      	ldr	r3, [pc, #208]	; (25fc <usb_handle_setup+0x118>)
    252c:	4798      	blx	r3
    252e:	e05b      	b.n	25e8 <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    2530:	4b2f      	ldr	r3, [pc, #188]	; (25f0 <usb_handle_setup+0x10c>)
    2532:	8859      	ldrh	r1, [r3, #2]
    2534:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    2536:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    2538:	2300      	movs	r3, #0
    253a:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    253c:	aa01      	add	r2, sp, #4
    253e:	4b30      	ldr	r3, [pc, #192]	; (2600 <usb_handle_setup+0x11c>)
    2540:	4798      	blx	r3

				if (size && descriptor){
    2542:	2800      	cmp	r0, #0
    2544:	d019      	beq.n	257a <usb_handle_setup+0x96>
    2546:	9901      	ldr	r1, [sp, #4]
    2548:	2900      	cmp	r1, #0
    254a:	d016      	beq.n	257a <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    254c:	4a28      	ldr	r2, [pc, #160]	; (25f0 <usb_handle_setup+0x10c>)
    254e:	88d2      	ldrh	r2, [r2, #6]
    2550:	4282      	cmp	r2, r0
    2552:	d300      	bcc.n	2556 <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2554:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    2556:	4b2b      	ldr	r3, [pc, #172]	; (2604 <usb_handle_setup+0x120>)
    2558:	4299      	cmp	r1, r3
    255a:	d005      	beq.n	2568 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    255c:	4b23      	ldr	r3, [pc, #140]	; (25ec <usb_handle_setup+0x108>)
    255e:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    2560:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    2562:	4b29      	ldr	r3, [pc, #164]	; (2608 <usb_handle_setup+0x124>)
    2564:	4798      	blx	r3
					}

					return;
    2566:	e03f      	b.n	25e8 <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    2568:	4920      	ldr	r1, [pc, #128]	; (25ec <usb_handle_setup+0x108>)
    256a:	2300      	movs	r3, #0
    256c:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    256e:	3104      	adds	r1, #4
    2570:	3301      	adds	r3, #1
    2572:	2080      	movs	r0, #128	; 0x80
    2574:	4c25      	ldr	r4, [pc, #148]	; (260c <usb_handle_setup+0x128>)
    2576:	47a0      	blx	r4
    2578:	e036      	b.n	25e8 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    257a:	4b25      	ldr	r3, [pc, #148]	; (2610 <usb_handle_setup+0x12c>)
    257c:	4798      	blx	r3
    257e:	e033      	b.n	25e8 <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    2580:	4b1a      	ldr	r3, [pc, #104]	; (25ec <usb_handle_setup+0x108>)
    2582:	2250      	movs	r2, #80	; 0x50
    2584:	5c9a      	ldrb	r2, [r3, r2]
    2586:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    2588:	2001      	movs	r0, #1
    258a:	4b1b      	ldr	r3, [pc, #108]	; (25f8 <usb_handle_setup+0x114>)
    258c:	4798      	blx	r3
				return usb_ep0_out();
    258e:	4b1b      	ldr	r3, [pc, #108]	; (25fc <usb_handle_setup+0x118>)
    2590:	4798      	blx	r3
    2592:	e029      	b.n	25e8 <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    2594:	4b16      	ldr	r3, [pc, #88]	; (25f0 <usb_handle_setup+0x10c>)
    2596:	7898      	ldrb	r0, [r3, #2]
    2598:	4b1e      	ldr	r3, [pc, #120]	; (2614 <usb_handle_setup+0x130>)
    259a:	4798      	blx	r3
    259c:	2800      	cmp	r0, #0
    259e:	d00b      	beq.n	25b8 <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    25a0:	2000      	movs	r0, #0
    25a2:	4b15      	ldr	r3, [pc, #84]	; (25f8 <usb_handle_setup+0x114>)
    25a4:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    25a6:	4b11      	ldr	r3, [pc, #68]	; (25ec <usb_handle_setup+0x108>)
    25a8:	001a      	movs	r2, r3
    25aa:	3248      	adds	r2, #72	; 0x48
    25ac:	7891      	ldrb	r1, [r2, #2]
    25ae:	2250      	movs	r2, #80	; 0x50
    25b0:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    25b2:	4b12      	ldr	r3, [pc, #72]	; (25fc <usb_handle_setup+0x118>)
    25b4:	4798      	blx	r3
    25b6:	e017      	b.n	25e8 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    25b8:	4b15      	ldr	r3, [pc, #84]	; (2610 <usb_handle_setup+0x12c>)
    25ba:	4798      	blx	r3
    25bc:	e014      	b.n	25e8 <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    25be:	4b0c      	ldr	r3, [pc, #48]	; (25f0 <usb_handle_setup+0x10c>)
    25c0:	8859      	ldrh	r1, [r3, #2]
    25c2:	8898      	ldrh	r0, [r3, #4]
    25c4:	4b14      	ldr	r3, [pc, #80]	; (2618 <usb_handle_setup+0x134>)
    25c6:	4798      	blx	r3
    25c8:	2800      	cmp	r0, #0
    25ca:	d005      	beq.n	25d8 <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    25cc:	2000      	movs	r0, #0
    25ce:	4b0a      	ldr	r3, [pc, #40]	; (25f8 <usb_handle_setup+0x114>)
    25d0:	4798      	blx	r3
					return usb_ep0_out();
    25d2:	4b0a      	ldr	r3, [pc, #40]	; (25fc <usb_handle_setup+0x118>)
    25d4:	4798      	blx	r3
    25d6:	e007      	b.n	25e8 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    25d8:	4b0d      	ldr	r3, [pc, #52]	; (2610 <usb_handle_setup+0x12c>)
    25da:	4798      	blx	r3
    25dc:	e004      	b.n	25e8 <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    25de:	4b0c      	ldr	r3, [pc, #48]	; (2610 <usb_handle_setup+0x12c>)
    25e0:	4798      	blx	r3
    25e2:	e001      	b.n	25e8 <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    25e4:	4b0d      	ldr	r3, [pc, #52]	; (261c <usb_handle_setup+0x138>)
    25e6:	4798      	blx	r3
}
    25e8:	b002      	add	sp, #8
    25ea:	bd10      	pop	{r4, pc}
    25ec:	20000498 	.word	0x20000498
    25f0:	200004e0 	.word	0x200004e0
    25f4:	000058f8 	.word	0x000058f8
    25f8:	00002ac1 	.word	0x00002ac1
    25fc:	00002aa9 	.word	0x00002aa9
    2600:	00002e41 	.word	0x00002e41
    2604:	2000049c 	.word	0x2000049c
    2608:	00002491 	.word	0x00002491
    260c:	000029a1 	.word	0x000029a1
    2610:	00002ad9 	.word	0x00002ad9
    2614:	00002e05 	.word	0x00002e05
    2618:	00002e1d 	.word	0x00002e1d
    261c:	00002cf5 	.word	0x00002cf5

00002620 <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    2620:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    2622:	4b05      	ldr	r3, [pc, #20]	; (2638 <usb_handle_control_out_complete+0x18>)
    2624:	2248      	movs	r2, #72	; 0x48
    2626:	5c9b      	ldrb	r3, [r3, r2]
    2628:	3218      	adds	r2, #24
    262a:	421a      	tst	r2, r3
    262c:	d100      	bne.n	2630 <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    262e:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    2630:	4b02      	ldr	r3, [pc, #8]	; (263c <usb_handle_control_out_complete+0x1c>)
    2632:	4798      	blx	r3
}
    2634:	e7fb      	b.n	262e <usb_handle_control_out_complete+0xe>
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	20000498 	.word	0x20000498
    263c:	00002e03 	.word	0x00002e03

00002640 <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    2640:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    2642:	4b0d      	ldr	r3, [pc, #52]	; (2678 <usb_handle_control_in_complete+0x38>)
    2644:	2248      	movs	r2, #72	; 0x48
    2646:	5c9b      	ldrb	r3, [r3, r2]
    2648:	3218      	adds	r2, #24
    264a:	421a      	tst	r2, r3
    264c:	d110      	bne.n	2670 <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    264e:	4b0b      	ldr	r3, [pc, #44]	; (267c <usb_handle_control_in_complete+0x3c>)
    2650:	785b      	ldrb	r3, [r3, #1]
    2652:	2b05      	cmp	r3, #5
    2654:	d002      	beq.n	265c <usb_handle_control_in_complete+0x1c>
    2656:	2b06      	cmp	r3, #6
    2658:	d007      	beq.n	266a <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    265a:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    265c:	4b07      	ldr	r3, [pc, #28]	; (267c <usb_handle_control_in_complete+0x3c>)
    265e:	789b      	ldrb	r3, [r3, #2]
    2660:	207f      	movs	r0, #127	; 0x7f
    2662:	4018      	ands	r0, r3
    2664:	4b06      	ldr	r3, [pc, #24]	; (2680 <usb_handle_control_in_complete+0x40>)
    2666:	4798      	blx	r3
				return;
    2668:	e7f7      	b.n	265a <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    266a:	4b06      	ldr	r3, [pc, #24]	; (2684 <usb_handle_control_in_complete+0x44>)
    266c:	4798      	blx	r3
				return;
    266e:	e7f4      	b.n	265a <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    2670:	4b05      	ldr	r3, [pc, #20]	; (2688 <usb_handle_control_in_complete+0x48>)
    2672:	4798      	blx	r3
    2674:	e7f1      	b.n	265a <usb_handle_control_in_complete+0x1a>
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	20000498 	.word	0x20000498
    267c:	200004e0 	.word	0x200004e0
    2680:	000027ed 	.word	0x000027ed
    2684:	00002491 	.word	0x00002491
    2688:	00002e01 	.word	0x00002e01

0000268c <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    268c:	b570      	push	{r4, r5, r6, lr}
    268e:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    2690:	4b0b      	ldr	r3, [pc, #44]	; (26c0 <usb_string_to_descriptor+0x34>)
    2692:	4798      	blx	r3
    2694:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    2696:	281f      	cmp	r0, #31
    2698:	d900      	bls.n	269c <usb_string_to_descriptor+0x10>
    269a:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    269c:	1c43      	adds	r3, r0, #1
    269e:	005b      	lsls	r3, r3, #1
    26a0:	4a08      	ldr	r2, [pc, #32]	; (26c4 <usb_string_to_descriptor+0x38>)
    26a2:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    26a4:	2303      	movs	r3, #3
    26a6:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    26a8:	2200      	movs	r2, #0
    26aa:	e005      	b.n	26b8 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    26ac:	5cb1      	ldrb	r1, [r6, r2]
    26ae:	4b05      	ldr	r3, [pc, #20]	; (26c4 <usb_string_to_descriptor+0x38>)
    26b0:	0054      	lsls	r4, r2, #1
    26b2:	191b      	adds	r3, r3, r4
    26b4:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    26b6:	3201      	adds	r2, #1
    26b8:	4290      	cmp	r0, r2
    26ba:	dcf7      	bgt.n	26ac <usb_string_to_descriptor+0x20>
	}
	return desc;
    26bc:	4802      	ldr	r0, [pc, #8]	; (26c8 <usb_string_to_descriptor+0x3c>)
}
    26be:	bd70      	pop	{r4, r5, r6, pc}
    26c0:	000054ad 	.word	0x000054ad
    26c4:	20000498 	.word	0x20000498
    26c8:	2000049c 	.word	0x2000049c

000026cc <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    26cc:	4a12      	ldr	r2, [pc, #72]	; (2718 <usb_reset+0x4c>)
    26ce:	4b13      	ldr	r3, [pc, #76]	; (271c <usb_reset+0x50>)
    26d0:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    26d2:	685a      	ldr	r2, [r3, #4]
    26d4:	4812      	ldr	r0, [pc, #72]	; (2720 <usb_reset+0x54>)
    26d6:	4002      	ands	r2, r0
    26d8:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    26da:	6859      	ldr	r1, [r3, #4]
    26dc:	22c0      	movs	r2, #192	; 0xc0
    26de:	0592      	lsls	r2, r2, #22
    26e0:	4311      	orrs	r1, r2
    26e2:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    26e4:	490f      	ldr	r1, [pc, #60]	; (2724 <usb_reset+0x58>)
    26e6:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    26e8:	6959      	ldr	r1, [r3, #20]
    26ea:	4001      	ands	r1, r0
    26ec:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    26ee:	6959      	ldr	r1, [r3, #20]
    26f0:	430a      	orrs	r2, r1
    26f2:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    26f4:	695a      	ldr	r2, [r3, #20]
    26f6:	0052      	lsls	r2, r2, #1
    26f8:	0852      	lsrs	r2, r2, #1
    26fa:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    26fc:	6959      	ldr	r1, [r3, #20]
    26fe:	2280      	movs	r2, #128	; 0x80
    2700:	0612      	lsls	r2, r2, #24
    2702:	430a      	orrs	r2, r1
    2704:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    2706:	4b08      	ldr	r3, [pc, #32]	; (2728 <usb_reset+0x5c>)
    2708:	220a      	movs	r2, #10
    270a:	32ff      	adds	r2, #255	; 0xff
    270c:	2110      	movs	r1, #16
    270e:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    2710:	3a09      	subs	r2, #9
    2712:	3101      	adds	r1, #1
    2714:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    2716:	4770      	bx	lr
    2718:	200004ec 	.word	0x200004ec
    271c:	20000578 	.word	0x20000578
    2720:	8fffffff 	.word	0x8fffffff
    2724:	2000049c 	.word	0x2000049c
    2728:	41005000 	.word	0x41005000

0000272c <usb_init>:
void usb_init(){
    272c:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    272e:	4a26      	ldr	r2, [pc, #152]	; (27c8 <usb_init+0x9c>)
    2730:	69d3      	ldr	r3, [r2, #28]
    2732:	2120      	movs	r1, #32
    2734:	430b      	orrs	r3, r1
    2736:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    2738:	4b24      	ldr	r3, [pc, #144]	; (27cc <usb_init+0xa0>)
    273a:	4a25      	ldr	r2, [pc, #148]	; (27d0 <usb_init+0xa4>)
    273c:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    273e:	4b25      	ldr	r3, [pc, #148]	; (27d4 <usb_init+0xa8>)
    2740:	2201      	movs	r2, #1
    2742:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    2744:	4b23      	ldr	r3, [pc, #140]	; (27d4 <usb_init+0xa8>)
    2746:	789b      	ldrb	r3, [r3, #2]
    2748:	07db      	lsls	r3, r3, #31
    274a:	d4fb      	bmi.n	2744 <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    274c:	4b21      	ldr	r3, [pc, #132]	; (27d4 <usb_init+0xa8>)
    274e:	2202      	movs	r2, #2
    2750:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    2752:	4b20      	ldr	r3, [pc, #128]	; (27d4 <usb_init+0xa8>)
    2754:	789b      	ldrb	r3, [r3, #2]
    2756:	079b      	lsls	r3, r3, #30
    2758:	d4fb      	bmi.n	2752 <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    275a:	4b1f      	ldr	r3, [pc, #124]	; (27d8 <usb_init+0xac>)
    275c:	685b      	ldr	r3, [r3, #4]
    275e:	035b      	lsls	r3, r3, #13
    2760:	22f8      	movs	r2, #248	; 0xf8
    2762:	0292      	lsls	r2, r2, #10
    2764:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    2766:	2b1f      	cmp	r3, #31
    2768:	d028      	beq.n	27bc <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    276a:	4a1b      	ldr	r2, [pc, #108]	; (27d8 <usb_init+0xac>)
    276c:	6851      	ldr	r1, [r2, #4]
    276e:	0489      	lsls	r1, r1, #18
    2770:	22f8      	movs	r2, #248	; 0xf8
    2772:	03d2      	lsls	r2, r2, #15
    2774:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    2776:	291f      	cmp	r1, #31
    2778:	d022      	beq.n	27c0 <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    277a:	4a17      	ldr	r2, [pc, #92]	; (27d8 <usb_init+0xac>)
    277c:	6852      	ldr	r2, [r2, #4]
    277e:	05d2      	lsls	r2, r2, #23
    2780:	20e0      	movs	r0, #224	; 0xe0
    2782:	0480      	lsls	r0, r0, #18
    2784:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    2786:	2a07      	cmp	r2, #7
    2788:	d01c      	beq.n	27c4 <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    278a:	019b      	lsls	r3, r3, #6
    278c:	20f8      	movs	r0, #248	; 0xf8
    278e:	00c0      	lsls	r0, r0, #3
    2790:	4003      	ands	r3, r0
    2792:	201f      	movs	r0, #31
    2794:	4001      	ands	r1, r0
    2796:	430b      	orrs	r3, r1
    2798:	0312      	lsls	r2, r2, #12
    279a:	4313      	orrs	r3, r2
    279c:	4d0d      	ldr	r5, [pc, #52]	; (27d4 <usb_init+0xa8>)
    279e:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    27a0:	4b0e      	ldr	r3, [pc, #56]	; (27dc <usb_init+0xb0>)
    27a2:	781a      	ldrb	r2, [r3, #0]
    27a4:	0112      	lsls	r2, r2, #4
    27a6:	4c0e      	ldr	r4, [pc, #56]	; (27e0 <usb_init+0xb4>)
    27a8:	2100      	movs	r1, #0
    27aa:	0020      	movs	r0, r4
    27ac:	4b0d      	ldr	r3, [pc, #52]	; (27e4 <usb_init+0xb8>)
    27ae:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    27b0:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    27b2:	2308      	movs	r3, #8
    27b4:	832b      	strh	r3, [r5, #24]
	usb_reset();
    27b6:	4b0c      	ldr	r3, [pc, #48]	; (27e8 <usb_init+0xbc>)
    27b8:	4798      	blx	r3
}
    27ba:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    27bc:	3b1a      	subs	r3, #26
    27be:	e7d4      	b.n	276a <usb_init+0x3e>
		pad_transp = 29;
    27c0:	3902      	subs	r1, #2
    27c2:	e7da      	b.n	277a <usb_init+0x4e>
		pad_trim = 3;
    27c4:	3a04      	subs	r2, #4
    27c6:	e7e0      	b.n	278a <usb_init+0x5e>
    27c8:	40000400 	.word	0x40000400
    27cc:	40000c00 	.word	0x40000c00
    27d0:	00004006 	.word	0x00004006
    27d4:	41005000 	.word	0x41005000
    27d8:	00806020 	.word	0x00806020
    27dc:	0000597a 	.word	0x0000597a
    27e0:	20000578 	.word	0x20000578
    27e4:	00005325 	.word	0x00005325
    27e8:	000026cd 	.word	0x000026cd

000027ec <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    27ec:	2380      	movs	r3, #128	; 0x80
    27ee:	425b      	negs	r3, r3
    27f0:	4318      	orrs	r0, r3
    27f2:	b2c0      	uxtb	r0, r0
    27f4:	4b01      	ldr	r3, [pc, #4]	; (27fc <usb_set_address+0x10>)
    27f6:	7298      	strb	r0, [r3, #10]
}
    27f8:	4770      	bx	lr
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	41005000 	.word	0x41005000

00002800 <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    2800:	b530      	push	{r4, r5, lr}
    2802:	0003      	movs	r3, r0
	if (ep & 0x80) {
    2804:	b240      	sxtb	r0, r0
    2806:	2800      	cmp	r0, #0
    2808:	db24      	blt.n	2854 <usb_enable_ep+0x54>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    280a:	203f      	movs	r0, #63	; 0x3f
    280c:	4018      	ands	r0, r3
    280e:	4b49      	ldr	r3, [pc, #292]	; (2934 <usb_enable_ep+0x134>)
    2810:	0144      	lsls	r4, r0, #5
    2812:	191b      	adds	r3, r3, r4
    2814:	685c      	ldr	r4, [r3, #4]
    2816:	4d48      	ldr	r5, [pc, #288]	; (2938 <usb_enable_ep+0x138>)
    2818:	402c      	ands	r4, r5
    281a:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    281c:	685b      	ldr	r3, [r3, #4]
    281e:	2a08      	cmp	r2, #8
    2820:	d95f      	bls.n	28e2 <usb_enable_ep+0xe2>
    2822:	2a10      	cmp	r2, #16
    2824:	d800      	bhi.n	2828 <usb_enable_ep+0x28>
    2826:	e072      	b.n	290e <usb_enable_ep+0x10e>
    2828:	2a20      	cmp	r2, #32
    282a:	d800      	bhi.n	282e <usb_enable_ep+0x2e>
    282c:	e072      	b.n	2914 <usb_enable_ep+0x114>
    282e:	2a40      	cmp	r2, #64	; 0x40
    2830:	d800      	bhi.n	2834 <usb_enable_ep+0x34>
    2832:	e072      	b.n	291a <usb_enable_ep+0x11a>
    2834:	2a80      	cmp	r2, #128	; 0x80
    2836:	d800      	bhi.n	283a <usb_enable_ep+0x3a>
    2838:	e072      	b.n	2920 <usb_enable_ep+0x120>
    283a:	2480      	movs	r4, #128	; 0x80
    283c:	0064      	lsls	r4, r4, #1
    283e:	42a2      	cmp	r2, r4
    2840:	d800      	bhi.n	2844 <usb_enable_ep+0x44>
    2842:	e070      	b.n	2926 <usb_enable_ep+0x126>
    2844:	3401      	adds	r4, #1
    2846:	34ff      	adds	r4, #255	; 0xff
    2848:	42a2      	cmp	r2, r4
    284a:	d900      	bls.n	284e <usb_enable_ep+0x4e>
    284c:	e06e      	b.n	292c <usb_enable_ep+0x12c>
    284e:	22c0      	movs	r2, #192	; 0xc0
    2850:	05d2      	lsls	r2, r2, #23
    2852:	e047      	b.n	28e4 <usb_enable_ep+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2854:	203f      	movs	r0, #63	; 0x3f
    2856:	4003      	ands	r3, r0
    2858:	4836      	ldr	r0, [pc, #216]	; (2934 <usb_enable_ep+0x134>)
    285a:	015c      	lsls	r4, r3, #5
    285c:	1900      	adds	r0, r0, r4
    285e:	6944      	ldr	r4, [r0, #20]
    2860:	4d35      	ldr	r5, [pc, #212]	; (2938 <usb_enable_ep+0x138>)
    2862:	402c      	ands	r4, r5
    2864:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2866:	6940      	ldr	r0, [r0, #20]
    2868:	2a08      	cmp	r2, #8
    286a:	d912      	bls.n	2892 <usb_enable_ep+0x92>
    286c:	2a10      	cmp	r2, #16
    286e:	d926      	bls.n	28be <usb_enable_ep+0xbe>
    2870:	2a20      	cmp	r2, #32
    2872:	d927      	bls.n	28c4 <usb_enable_ep+0xc4>
    2874:	2a40      	cmp	r2, #64	; 0x40
    2876:	d928      	bls.n	28ca <usb_enable_ep+0xca>
    2878:	2a80      	cmp	r2, #128	; 0x80
    287a:	d929      	bls.n	28d0 <usb_enable_ep+0xd0>
    287c:	2480      	movs	r4, #128	; 0x80
    287e:	0064      	lsls	r4, r4, #1
    2880:	42a2      	cmp	r2, r4
    2882:	d928      	bls.n	28d6 <usb_enable_ep+0xd6>
    2884:	3401      	adds	r4, #1
    2886:	34ff      	adds	r4, #255	; 0xff
    2888:	42a2      	cmp	r2, r4
    288a:	d827      	bhi.n	28dc <usb_enable_ep+0xdc>
    288c:	22c0      	movs	r2, #192	; 0xc0
    288e:	05d2      	lsls	r2, r2, #23
    2890:	e000      	b.n	2894 <usb_enable_ep+0x94>
    2892:	2200      	movs	r2, #0
    2894:	4310      	orrs	r0, r2
    2896:	4a27      	ldr	r2, [pc, #156]	; (2934 <usb_enable_ep+0x134>)
    2898:	015c      	lsls	r4, r3, #5
    289a:	1912      	adds	r2, r2, r4
    289c:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    289e:	4c27      	ldr	r4, [pc, #156]	; (293c <usb_enable_ep+0x13c>)
    28a0:	3308      	adds	r3, #8
    28a2:	015b      	lsls	r3, r3, #5
    28a4:	5d1a      	ldrb	r2, [r3, r4]
    28a6:	3101      	adds	r1, #1
    28a8:	b2c9      	uxtb	r1, r1
    28aa:	0109      	lsls	r1, r1, #4
    28ac:	2070      	movs	r0, #112	; 0x70
    28ae:	4001      	ands	r1, r0
    28b0:	430a      	orrs	r2, r1
    28b2:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    28b4:	46a4      	mov	ip, r4
    28b6:	4463      	add	r3, ip
    28b8:	22a2      	movs	r2, #162	; 0xa2
    28ba:	711a      	strb	r2, [r3, #4]
    28bc:	e026      	b.n	290c <usb_enable_ep+0x10c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    28be:	2280      	movs	r2, #128	; 0x80
    28c0:	0552      	lsls	r2, r2, #21
    28c2:	e7e7      	b.n	2894 <usb_enable_ep+0x94>
    28c4:	2280      	movs	r2, #128	; 0x80
    28c6:	0592      	lsls	r2, r2, #22
    28c8:	e7e4      	b.n	2894 <usb_enable_ep+0x94>
    28ca:	22c0      	movs	r2, #192	; 0xc0
    28cc:	0592      	lsls	r2, r2, #22
    28ce:	e7e1      	b.n	2894 <usb_enable_ep+0x94>
    28d0:	2280      	movs	r2, #128	; 0x80
    28d2:	05d2      	lsls	r2, r2, #23
    28d4:	e7de      	b.n	2894 <usb_enable_ep+0x94>
    28d6:	22a0      	movs	r2, #160	; 0xa0
    28d8:	05d2      	lsls	r2, r2, #23
    28da:	e7db      	b.n	2894 <usb_enable_ep+0x94>
    28dc:	22e0      	movs	r2, #224	; 0xe0
    28de:	05d2      	lsls	r2, r2, #23
    28e0:	e7d8      	b.n	2894 <usb_enable_ep+0x94>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    28e2:	2200      	movs	r2, #0
    28e4:	431a      	orrs	r2, r3
    28e6:	4b13      	ldr	r3, [pc, #76]	; (2934 <usb_enable_ep+0x134>)
    28e8:	0144      	lsls	r4, r0, #5
    28ea:	191b      	adds	r3, r3, r4
    28ec:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    28ee:	4a13      	ldr	r2, [pc, #76]	; (293c <usb_enable_ep+0x13c>)
    28f0:	3008      	adds	r0, #8
    28f2:	0140      	lsls	r0, r0, #5
    28f4:	5c83      	ldrb	r3, [r0, r2]
    28f6:	3101      	adds	r1, #1
    28f8:	2407      	movs	r4, #7
    28fa:	4021      	ands	r1, r4
    28fc:	430b      	orrs	r3, r1
    28fe:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    2900:	4694      	mov	ip, r2
    2902:	4460      	add	r0, ip
    2904:	2340      	movs	r3, #64	; 0x40
    2906:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    2908:	3b2f      	subs	r3, #47	; 0x2f
    290a:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    290c:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    290e:	2280      	movs	r2, #128	; 0x80
    2910:	0552      	lsls	r2, r2, #21
    2912:	e7e7      	b.n	28e4 <usb_enable_ep+0xe4>
    2914:	2280      	movs	r2, #128	; 0x80
    2916:	0592      	lsls	r2, r2, #22
    2918:	e7e4      	b.n	28e4 <usb_enable_ep+0xe4>
    291a:	22c0      	movs	r2, #192	; 0xc0
    291c:	0592      	lsls	r2, r2, #22
    291e:	e7e1      	b.n	28e4 <usb_enable_ep+0xe4>
    2920:	2280      	movs	r2, #128	; 0x80
    2922:	05d2      	lsls	r2, r2, #23
    2924:	e7de      	b.n	28e4 <usb_enable_ep+0xe4>
    2926:	22a0      	movs	r2, #160	; 0xa0
    2928:	05d2      	lsls	r2, r2, #23
    292a:	e7db      	b.n	28e4 <usb_enable_ep+0xe4>
    292c:	22e0      	movs	r2, #224	; 0xe0
    292e:	05d2      	lsls	r2, r2, #23
    2930:	e7d8      	b.n	28e4 <usb_enable_ep+0xe4>
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	20000578 	.word	0x20000578
    2938:	8fffffff 	.word	0x8fffffff
    293c:	41005000 	.word	0x41005000

00002940 <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    2940:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    2942:	4d12      	ldr	r5, [pc, #72]	; (298c <usb_ep_start_out+0x4c>)
    2944:	0144      	lsls	r4, r0, #5
    2946:	192b      	adds	r3, r5, r4
    2948:	685e      	ldr	r6, [r3, #4]
    294a:	4f11      	ldr	r7, [pc, #68]	; (2990 <usb_ep_start_out+0x50>)
    294c:	403e      	ands	r6, r7
    294e:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    2950:	685e      	ldr	r6, [r3, #4]
    2952:	0392      	lsls	r2, r2, #14
    2954:	4f0f      	ldr	r7, [pc, #60]	; (2994 <usb_ep_start_out+0x54>)
    2956:	403a      	ands	r2, r7
    2958:	4316      	orrs	r6, r2
    295a:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    295c:	685a      	ldr	r2, [r3, #4]
    295e:	0b92      	lsrs	r2, r2, #14
    2960:	0392      	lsls	r2, r2, #14
    2962:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    2964:	685a      	ldr	r2, [r3, #4]
    2966:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    2968:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    296a:	3008      	adds	r0, #8
    296c:	0140      	lsls	r0, r0, #5
    296e:	4b0a      	ldr	r3, [pc, #40]	; (2998 <usb_ep_start_out+0x58>)
    2970:	469c      	mov	ip, r3
    2972:	4460      	add	r0, ip
    2974:	2305      	movs	r3, #5
    2976:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    2978:	4b08      	ldr	r3, [pc, #32]	; (299c <usb_ep_start_out+0x5c>)
    297a:	469c      	mov	ip, r3
    297c:	4464      	add	r4, ip
    297e:	2301      	movs	r3, #1
    2980:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    2982:	333f      	adds	r3, #63	; 0x3f
    2984:	7103      	strb	r3, [r0, #4]
	return 0;
}
    2986:	2000      	movs	r0, #0
    2988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	20000578 	.word	0x20000578
    2990:	f0003fff 	.word	0xf0003fff
    2994:	0fffc000 	.word	0x0fffc000
    2998:	41005000 	.word	0x41005000
    299c:	41005109 	.word	0x41005109

000029a0 <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    29a0:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    29a2:	243f      	movs	r4, #63	; 0x3f
    29a4:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    29a6:	4c15      	ldr	r4, [pc, #84]	; (29fc <usb_ep_start_in+0x5c>)
    29a8:	0146      	lsls	r6, r0, #5
    29aa:	19a4      	adds	r4, r4, r6
    29ac:	6965      	ldr	r5, [r4, #20]
    29ae:	006d      	lsls	r5, r5, #1
    29b0:	086d      	lsrs	r5, r5, #1
    29b2:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    29b4:	6965      	ldr	r5, [r4, #20]
    29b6:	07db      	lsls	r3, r3, #31
    29b8:	431d      	orrs	r5, r3
    29ba:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    29bc:	6963      	ldr	r3, [r4, #20]
    29be:	4d10      	ldr	r5, [pc, #64]	; (2a00 <usb_ep_start_in+0x60>)
    29c0:	402b      	ands	r3, r5
    29c2:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    29c4:	6963      	ldr	r3, [r4, #20]
    29c6:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    29c8:	6963      	ldr	r3, [r4, #20]
    29ca:	0b9b      	lsrs	r3, r3, #14
    29cc:	039b      	lsls	r3, r3, #14
    29ce:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    29d0:	6963      	ldr	r3, [r4, #20]
    29d2:	0492      	lsls	r2, r2, #18
    29d4:	0c92      	lsrs	r2, r2, #18
    29d6:	4313      	orrs	r3, r2
    29d8:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    29da:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    29dc:	3008      	adds	r0, #8
    29de:	0140      	lsls	r0, r0, #5
    29e0:	4b08      	ldr	r3, [pc, #32]	; (2a04 <usb_ep_start_in+0x64>)
    29e2:	469c      	mov	ip, r3
    29e4:	4460      	add	r0, ip
    29e6:	230a      	movs	r3, #10
    29e8:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    29ea:	4b07      	ldr	r3, [pc, #28]	; (2a08 <usb_ep_start_in+0x68>)
    29ec:	469c      	mov	ip, r3
    29ee:	4466      	add	r6, ip
    29f0:	2302      	movs	r3, #2
    29f2:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    29f4:	337e      	adds	r3, #126	; 0x7e
    29f6:	7143      	strb	r3, [r0, #5]
	return 0;
}
    29f8:	2000      	movs	r0, #0
    29fa:	bd70      	pop	{r4, r5, r6, pc}
    29fc:	20000578 	.word	0x20000578
    2a00:	f0003fff 	.word	0xf0003fff
    2a04:	41005000 	.word	0x41005000
    2a08:	41005109 	.word	0x41005109

00002a0c <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    2a0c:	b243      	sxtb	r3, r0
    2a0e:	2b00      	cmp	r3, #0
    2a10:	db0a      	blt.n	2a28 <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    2a12:	233f      	movs	r3, #63	; 0x3f
    2a14:	4003      	ands	r3, r0
    2a16:	3308      	adds	r3, #8
    2a18:	015b      	lsls	r3, r3, #5
    2a1a:	4a09      	ldr	r2, [pc, #36]	; (2a40 <usb_ep_pending+0x34>)
    2a1c:	4694      	mov	ip, r2
    2a1e:	4463      	add	r3, ip
    2a20:	79d8      	ldrb	r0, [r3, #7]
    2a22:	2301      	movs	r3, #1
    2a24:	4018      	ands	r0, r3
	}
}
    2a26:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    2a28:	233f      	movs	r3, #63	; 0x3f
    2a2a:	4003      	ands	r3, r0
    2a2c:	3308      	adds	r3, #8
    2a2e:	015b      	lsls	r3, r3, #5
    2a30:	4a03      	ldr	r2, [pc, #12]	; (2a40 <usb_ep_pending+0x34>)
    2a32:	4694      	mov	ip, r2
    2a34:	4463      	add	r3, ip
    2a36:	79db      	ldrb	r3, [r3, #7]
    2a38:	085b      	lsrs	r3, r3, #1
    2a3a:	2001      	movs	r0, #1
    2a3c:	4018      	ands	r0, r3
    2a3e:	e7f2      	b.n	2a26 <usb_ep_pending+0x1a>
    2a40:	41005000 	.word	0x41005000

00002a44 <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    2a44:	b243      	sxtb	r3, r0
    2a46:	2b00      	cmp	r3, #0
    2a48:	db09      	blt.n	2a5e <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    2a4a:	233f      	movs	r3, #63	; 0x3f
    2a4c:	4003      	ands	r3, r0
    2a4e:	3308      	adds	r3, #8
    2a50:	015b      	lsls	r3, r3, #5
    2a52:	4a08      	ldr	r2, [pc, #32]	; (2a74 <usb_ep_handled+0x30>)
    2a54:	4694      	mov	ip, r2
    2a56:	4463      	add	r3, ip
    2a58:	2201      	movs	r2, #1
    2a5a:	71da      	strb	r2, [r3, #7]
	}
}
    2a5c:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    2a5e:	233f      	movs	r3, #63	; 0x3f
    2a60:	4003      	ands	r3, r0
    2a62:	3308      	adds	r3, #8
    2a64:	015b      	lsls	r3, r3, #5
    2a66:	4a03      	ldr	r2, [pc, #12]	; (2a74 <usb_ep_handled+0x30>)
    2a68:	4694      	mov	ip, r2
    2a6a:	4463      	add	r3, ip
    2a6c:	2202      	movs	r2, #2
    2a6e:	71da      	strb	r2, [r3, #7]
    2a70:	e7f4      	b.n	2a5c <usb_ep_handled+0x18>
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	41005000 	.word	0x41005000

00002a78 <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    2a78:	4b03      	ldr	r3, [pc, #12]	; (2a88 <usb_ep_out_length+0x10>)
    2a7a:	0140      	lsls	r0, r0, #5
    2a7c:	181b      	adds	r3, r3, r0
    2a7e:	6858      	ldr	r0, [r3, #4]
    2a80:	0480      	lsls	r0, r0, #18
    2a82:	0c80      	lsrs	r0, r0, #18
}
    2a84:	4770      	bx	lr
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	20000578 	.word	0x20000578

00002a8c <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a8c:	4b04      	ldr	r3, [pc, #16]	; (2aa0 <usb_attach+0x14>)
    2a8e:	2280      	movs	r2, #128	; 0x80
    2a90:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    2a92:	4a04      	ldr	r2, [pc, #16]	; (2aa4 <usb_attach+0x18>)
    2a94:	8913      	ldrh	r3, [r2, #8]
    2a96:	2101      	movs	r1, #1
    2a98:	438b      	bics	r3, r1
    2a9a:	8113      	strh	r3, [r2, #8]
}
    2a9c:	4770      	bx	lr
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	e000e100 	.word	0xe000e100
    2aa4:	41005000 	.word	0x41005000

00002aa8 <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    2aa8:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    2aaa:	4903      	ldr	r1, [pc, #12]	; (2ab8 <usb_ep0_out+0x10>)
    2aac:	2240      	movs	r2, #64	; 0x40
    2aae:	2000      	movs	r0, #0
    2ab0:	4b02      	ldr	r3, [pc, #8]	; (2abc <usb_ep0_out+0x14>)
    2ab2:	4798      	blx	r3
}
    2ab4:	bd10      	pop	{r4, pc}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	200004ec 	.word	0x200004ec
    2abc:	00002941 	.word	0x00002941

00002ac0 <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    2ac0:	b510      	push	{r4, lr}
    2ac2:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2ac4:	4902      	ldr	r1, [pc, #8]	; (2ad0 <usb_ep0_in+0x10>)
    2ac6:	2301      	movs	r3, #1
    2ac8:	2080      	movs	r0, #128	; 0x80
    2aca:	4c02      	ldr	r4, [pc, #8]	; (2ad4 <usb_ep0_in+0x14>)
    2acc:	47a0      	blx	r4
}
    2ace:	bd10      	pop	{r4, pc}
    2ad0:	2000049c 	.word	0x2000049c
    2ad4:	000029a1 	.word	0x000029a1

00002ad8 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    2ad8:	4a02      	ldr	r2, [pc, #8]	; (2ae4 <usb_ep0_stall+0xc>)
    2ada:	2306      	movs	r3, #6
    2adc:	33ff      	adds	r3, #255	; 0xff
    2ade:	2130      	movs	r1, #48	; 0x30
    2ae0:	54d1      	strb	r1, [r2, r3]
}
    2ae2:	4770      	bx	lr
    2ae4:	41005000 	.word	0x41005000

00002ae8 <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    2ae8:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    2aea:	4b25      	ldr	r3, [pc, #148]	; (2b80 <usb_handle_function+0x98>)
    2aec:	8c1c      	ldrh	r4, [r3, #32]
    2aee:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    2af0:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    2af2:	071b      	lsls	r3, r3, #28
    2af4:	d410      	bmi.n	2b18 <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    2af6:	07e3      	lsls	r3, r4, #31
    2af8:	d50c      	bpl.n	2b14 <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    2afa:	4921      	ldr	r1, [pc, #132]	; (2b80 <usb_handle_function+0x98>)
    2afc:	2208      	movs	r2, #8
    2afe:	32ff      	adds	r2, #255	; 0xff
    2b00:	5c8b      	ldrb	r3, [r1, r2]
    2b02:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    2b04:	2013      	movs	r0, #19
    2b06:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    2b08:	06db      	lsls	r3, r3, #27
    2b0a:	d40d      	bmi.n	2b28 <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    2b0c:	07eb      	lsls	r3, r5, #31
    2b0e:	d413      	bmi.n	2b38 <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    2b10:	07ad      	lsls	r5, r5, #30
    2b12:	d414      	bmi.n	2b3e <usb_handle_function+0x56>
void usb_handle_function() {
    2b14:	2301      	movs	r3, #1
    2b16:	e016      	b.n	2b46 <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    2b18:	4b19      	ldr	r3, [pc, #100]	; (2b80 <usb_handle_function+0x98>)
    2b1a:	2208      	movs	r2, #8
    2b1c:	839a      	strh	r2, [r3, #28]
		usb_reset();
    2b1e:	4b19      	ldr	r3, [pc, #100]	; (2b84 <usb_handle_function+0x9c>)
    2b20:	4798      	blx	r3
		usb_cb_reset();
    2b22:	4b19      	ldr	r3, [pc, #100]	; (2b88 <usb_handle_function+0xa0>)
    2b24:	4798      	blx	r3
		goto usb_handle_function_end;
    2b26:	e026      	b.n	2b76 <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    2b28:	4818      	ldr	r0, [pc, #96]	; (2b8c <usb_handle_function+0xa4>)
    2b2a:	4919      	ldr	r1, [pc, #100]	; (2b90 <usb_handle_function+0xa8>)
    2b2c:	3aff      	subs	r2, #255	; 0xff
    2b2e:	4b19      	ldr	r3, [pc, #100]	; (2b94 <usb_handle_function+0xac>)
    2b30:	4798      	blx	r3
			usb_handle_setup();
    2b32:	4b19      	ldr	r3, [pc, #100]	; (2b98 <usb_handle_function+0xb0>)
    2b34:	4798      	blx	r3
    2b36:	e7e9      	b.n	2b0c <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    2b38:	4b18      	ldr	r3, [pc, #96]	; (2b9c <usb_handle_function+0xb4>)
    2b3a:	4798      	blx	r3
    2b3c:	e7e8      	b.n	2b10 <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    2b3e:	4b18      	ldr	r3, [pc, #96]	; (2ba0 <usb_handle_function+0xb8>)
    2b40:	4798      	blx	r3
    2b42:	e7e7      	b.n	2b14 <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    2b44:	3301      	adds	r3, #1
    2b46:	4a17      	ldr	r2, [pc, #92]	; (2ba4 <usb_handle_function+0xbc>)
    2b48:	7812      	ldrb	r2, [r2, #0]
    2b4a:	429a      	cmp	r2, r3
    2b4c:	dd11      	ble.n	2b72 <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    2b4e:	2201      	movs	r2, #1
    2b50:	409a      	lsls	r2, r3
    2b52:	4214      	tst	r4, r2
    2b54:	d0f6      	beq.n	2b44 <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    2b56:	001a      	movs	r2, r3
    2b58:	3208      	adds	r2, #8
    2b5a:	0152      	lsls	r2, r2, #5
    2b5c:	4908      	ldr	r1, [pc, #32]	; (2b80 <usb_handle_function+0x98>)
    2b5e:	468c      	mov	ip, r1
    2b60:	4462      	add	r2, ip
    2b62:	79d1      	ldrb	r1, [r2, #7]
    2b64:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    2b66:	015a      	lsls	r2, r3, #5
    2b68:	480f      	ldr	r0, [pc, #60]	; (2ba8 <usb_handle_function+0xc0>)
    2b6a:	4684      	mov	ip, r0
    2b6c:	4462      	add	r2, ip
    2b6e:	7011      	strb	r1, [r2, #0]
    2b70:	e7e8      	b.n	2b44 <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    2b72:	4b0e      	ldr	r3, [pc, #56]	; (2bac <usb_handle_function+0xc4>)
    2b74:	4798      	blx	r3
    2b76:	4b0e      	ldr	r3, [pc, #56]	; (2bb0 <usb_handle_function+0xc8>)
    2b78:	2280      	movs	r2, #128	; 0x80
    2b7a:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    2b7c:	bd70      	pop	{r4, r5, r6, pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	41005000 	.word	0x41005000
    2b84:	000026cd 	.word	0x000026cd
    2b88:	00002cf1 	.word	0x00002cf1
    2b8c:	200004e0 	.word	0x200004e0
    2b90:	200004ec 	.word	0x200004ec
    2b94:	0000541d 	.word	0x0000541d
    2b98:	000024e5 	.word	0x000024e5
    2b9c:	00002621 	.word	0x00002621
    2ba0:	00002641 	.word	0x00002641
    2ba4:	0000597a 	.word	0x0000597a
    2ba8:	41005108 	.word	0x41005108
    2bac:	00002dc1 	.word	0x00002dc1
    2bb0:	e000e100 	.word	0xe000e100

00002bb4 <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    2bb4:	b510      	push	{r4, lr}
    2bb6:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    2bb8:	2000      	movs	r0, #0
    2bba:	e01c      	b.n	2bf6 <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    2bbc:	0082      	lsls	r2, r0, #2
    2bbe:	1812      	adds	r2, r2, r0
    2bc0:	17d4      	asrs	r4, r2, #31
    2bc2:	2307      	movs	r3, #7
    2bc4:	0019      	movs	r1, r3
    2bc6:	4021      	ands	r1, r4
    2bc8:	1889      	adds	r1, r1, r2
    2bca:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    2bcc:	0f64      	lsrs	r4, r4, #29
    2bce:	1912      	adds	r2, r2, r4
    2bd0:	4013      	ands	r3, r2
    2bd2:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    2bd4:	4a0c      	ldr	r2, [pc, #48]	; (2c08 <samd_serial_number_string_descriptor+0x54>)
    2bd6:	5c8a      	ldrb	r2, [r1, r2]
    2bd8:	411a      	asrs	r2, r3
    2bda:	4c0c      	ldr	r4, [pc, #48]	; (2c0c <samd_serial_number_string_descriptor+0x58>)
    2bdc:	5d09      	ldrb	r1, [r1, r4]
    2bde:	2408      	movs	r4, #8
    2be0:	1ae3      	subs	r3, r4, r3
    2be2:	4099      	lsls	r1, r3
    2be4:	000b      	movs	r3, r1
    2be6:	4313      	orrs	r3, r2
    2be8:	221f      	movs	r2, #31
    2bea:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    2bec:	4a08      	ldr	r2, [pc, #32]	; (2c10 <samd_serial_number_string_descriptor+0x5c>)
    2bee:	5cd2      	ldrb	r2, [r2, r3]
    2bf0:	ab01      	add	r3, sp, #4
    2bf2:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    2bf4:	3001      	adds	r0, #1
    2bf6:	2819      	cmp	r0, #25
    2bf8:	dde0      	ble.n	2bbc <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    2bfa:	a801      	add	r0, sp, #4
    2bfc:	2300      	movs	r3, #0
    2bfe:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    2c00:	4b04      	ldr	r3, [pc, #16]	; (2c14 <samd_serial_number_string_descriptor+0x60>)
    2c02:	4798      	blx	r3
}
    2c04:	b008      	add	sp, #32
    2c06:	bd10      	pop	{r4, pc}
    2c08:	0080a00c 	.word	0x0080a00c
    2c0c:	0080a00d 	.word	0x0080a00d
    2c10:	00005928 	.word	0x00005928
    2c14:	0000268d 	.word	0x0000268d

00002c18 <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    2c18:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    2c1a:	2208      	movs	r2, #8
    2c1c:	2103      	movs	r1, #3
    2c1e:	2081      	movs	r0, #129	; 0x81
    2c20:	4c09      	ldr	r4, [pc, #36]	; (2c48 <usb_serial_init+0x30>)
    2c22:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2c24:	2220      	movs	r2, #32
    2c26:	2102      	movs	r1, #2
    2c28:	2002      	movs	r0, #2
    2c2a:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2c2c:	2220      	movs	r2, #32
    2c2e:	2102      	movs	r1, #2
    2c30:	2082      	movs	r0, #130	; 0x82
    2c32:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2c34:	4c05      	ldr	r4, [pc, #20]	; (2c4c <usb_serial_init+0x34>)
    2c36:	2220      	movs	r2, #32
    2c38:	0021      	movs	r1, r4
    2c3a:	2002      	movs	r0, #2
    2c3c:	4b04      	ldr	r3, [pc, #16]	; (2c50 <usb_serial_init+0x38>)
    2c3e:	4798      	blx	r3
	
	usb_tx_busy = false;
    2c40:	2320      	movs	r3, #32
    2c42:	2200      	movs	r2, #0
    2c44:	54e2      	strb	r2, [r4, r3]
}
    2c46:	bd10      	pop	{r4, pc}
    2c48:	00002801 	.word	0x00002801
    2c4c:	2000052c 	.word	0x2000052c
    2c50:	00002941 	.word	0x00002941

00002c54 <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    2c54:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    2c56:	2002      	movs	r0, #2
    2c58:	4b02      	ldr	r3, [pc, #8]	; (2c64 <usb_serial_out_completion+0x10>)
    2c5a:	4798      	blx	r3
    2c5c:	4b02      	ldr	r3, [pc, #8]	; (2c68 <usb_serial_out_completion+0x14>)
    2c5e:	6258      	str	r0, [r3, #36]	; 0x24
}
    2c60:	bd10      	pop	{r4, pc}
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	00002a79 	.word	0x00002a79
    2c68:	2000052c 	.word	0x2000052c

00002c6c <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    2c6c:	4b02      	ldr	r3, [pc, #8]	; (2c78 <usb_serial_in_completion+0xc>)
    2c6e:	2220      	movs	r2, #32
    2c70:	2100      	movs	r1, #0
    2c72:	5499      	strb	r1, [r3, r2]
}
    2c74:	4770      	bx	lr
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	2000052c 	.word	0x2000052c

00002c7c <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    2c7c:	b570      	push	{r4, r5, r6, lr}
    2c7e:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    2c80:	2920      	cmp	r1, #32
    2c82:	dd00      	ble.n	2c86 <usb_serial_send_buffer+0xa>
    2c84:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    2c86:	4d09      	ldr	r5, [pc, #36]	; (2cac <usb_serial_send_buffer+0x30>)
    2c88:	002e      	movs	r6, r5
    2c8a:	3628      	adds	r6, #40	; 0x28
    2c8c:	0022      	movs	r2, r4
    2c8e:	0001      	movs	r1, r0
    2c90:	0030      	movs	r0, r6
    2c92:	4b07      	ldr	r3, [pc, #28]	; (2cb0 <usb_serial_send_buffer+0x34>)
    2c94:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    2c96:	2300      	movs	r3, #0
    2c98:	0022      	movs	r2, r4
    2c9a:	0031      	movs	r1, r6
    2c9c:	2082      	movs	r0, #130	; 0x82
    2c9e:	4e05      	ldr	r6, [pc, #20]	; (2cb4 <usb_serial_send_buffer+0x38>)
    2ca0:	47b0      	blx	r6
	usb_tx_busy = true;
    2ca2:	2320      	movs	r3, #32
    2ca4:	2201      	movs	r2, #1
    2ca6:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    2ca8:	0020      	movs	r0, r4
    2caa:	bd70      	pop	{r4, r5, r6, pc}
    2cac:	2000052c 	.word	0x2000052c
    2cb0:	0000541d 	.word	0x0000541d
    2cb4:	000029a1 	.word	0x000029a1

00002cb8 <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    2cb8:	b570      	push	{r4, r5, r6, lr}
    2cba:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    2cbc:	4b09      	ldr	r3, [pc, #36]	; (2ce4 <usb_serial_read_buffer+0x2c>)
    2cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2cc0:	4299      	cmp	r1, r3
    2cc2:	d901      	bls.n	2cc8 <usb_serial_read_buffer+0x10>
    2cc4:	4b07      	ldr	r3, [pc, #28]	; (2ce4 <usb_serial_read_buffer+0x2c>)
    2cc6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    2cc8:	4d06      	ldr	r5, [pc, #24]	; (2ce4 <usb_serial_read_buffer+0x2c>)
    2cca:	0022      	movs	r2, r4
    2ccc:	0029      	movs	r1, r5
    2cce:	4b06      	ldr	r3, [pc, #24]	; (2ce8 <usb_serial_read_buffer+0x30>)
    2cd0:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2cd2:	2220      	movs	r2, #32
    2cd4:	0029      	movs	r1, r5
    2cd6:	2002      	movs	r0, #2
    2cd8:	4b04      	ldr	r3, [pc, #16]	; (2cec <usb_serial_read_buffer+0x34>)
    2cda:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    2cdc:	2300      	movs	r3, #0
    2cde:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    2ce0:	0020      	movs	r0, r4
    2ce2:	bd70      	pop	{r4, r5, r6, pc}
    2ce4:	2000052c 	.word	0x2000052c
    2ce8:	0000541d 	.word	0x0000541d
    2cec:	00002941 	.word	0x00002941

00002cf0 <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    2cf0:	4770      	bx	lr
	...

00002cf4 <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    2cf4:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    2cf6:	4b2a      	ldr	r3, [pc, #168]	; (2da0 <usb_cb_control_setup+0xac>)
    2cf8:	781a      	ldrb	r2, [r3, #0]
    2cfa:	2360      	movs	r3, #96	; 0x60
    2cfc:	4013      	ands	r3, r2
    2cfe:	2b20      	cmp	r3, #32
    2d00:	d000      	beq.n	2d04 <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    2d02:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    2d04:	4b26      	ldr	r3, [pc, #152]	; (2da0 <usb_cb_control_setup+0xac>)
    2d06:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    2d08:	231f      	movs	r3, #31
    2d0a:	4013      	ands	r3, r2
    2d0c:	2b01      	cmp	r3, #1
    2d0e:	d144      	bne.n	2d9a <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    2d10:	2900      	cmp	r1, #0
    2d12:	d1f6      	bne.n	2d02 <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    2d14:	4b22      	ldr	r3, [pc, #136]	; (2da0 <usb_cb_control_setup+0xac>)
    2d16:	785b      	ldrb	r3, [r3, #1]
    2d18:	2b22      	cmp	r3, #34	; 0x22
    2d1a:	d031      	beq.n	2d80 <usb_cb_control_setup+0x8c>
    2d1c:	d80c      	bhi.n	2d38 <usb_cb_control_setup+0x44>
    2d1e:	2b20      	cmp	r3, #32
    2d20:	d026      	beq.n	2d70 <usb_cb_control_setup+0x7c>
    2d22:	2b21      	cmp	r3, #33	; 0x21
    2d24:	d136      	bne.n	2d94 <usb_cb_control_setup+0xa0>
    2d26:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2d28:	2b06      	cmp	r3, #6
    2d2a:	d823      	bhi.n	2d74 <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    2d2c:	4a1d      	ldr	r2, [pc, #116]	; (2da4 <usb_cb_control_setup+0xb0>)
    2d2e:	5cd1      	ldrb	r1, [r2, r3]
    2d30:	4a1d      	ldr	r2, [pc, #116]	; (2da8 <usb_cb_control_setup+0xb4>)
    2d32:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2d34:	3301      	adds	r3, #1
    2d36:	e7f7      	b.n	2d28 <usb_cb_control_setup+0x34>
    2d38:	2b23      	cmp	r3, #35	; 0x23
    2d3a:	d12b      	bne.n	2d94 <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    2d3c:	2000      	movs	r0, #0
    2d3e:	4b1b      	ldr	r3, [pc, #108]	; (2dac <usb_cb_control_setup+0xb8>)
    2d40:	4798      	blx	r3
					usb_ep0_out();
    2d42:	4b1b      	ldr	r3, [pc, #108]	; (2db0 <usb_cb_control_setup+0xbc>)
    2d44:	4798      	blx	r3
					break;
    2d46:	e7dc      	b.n	2d02 <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    2d48:	4b16      	ldr	r3, [pc, #88]	; (2da4 <usb_cb_control_setup+0xb0>)
    2d4a:	491a      	ldr	r1, [pc, #104]	; (2db4 <usb_cb_control_setup+0xc0>)
    2d4c:	5c89      	ldrb	r1, [r1, r2]
    2d4e:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    2d50:	3201      	adds	r2, #1
    2d52:	4b13      	ldr	r3, [pc, #76]	; (2da0 <usb_cb_control_setup+0xac>)
    2d54:	7999      	ldrb	r1, [r3, #6]
    2d56:	79db      	ldrb	r3, [r3, #7]
    2d58:	021b      	lsls	r3, r3, #8
    2d5a:	430b      	orrs	r3, r1
    2d5c:	4293      	cmp	r3, r2
    2d5e:	dd01      	ble.n	2d64 <usb_cb_control_setup+0x70>
    2d60:	2a06      	cmp	r2, #6
    2d62:	d9f1      	bls.n	2d48 <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    2d64:	2000      	movs	r0, #0
    2d66:	4b11      	ldr	r3, [pc, #68]	; (2dac <usb_cb_control_setup+0xb8>)
    2d68:	4798      	blx	r3
					usb_ep0_out();
    2d6a:	4b11      	ldr	r3, [pc, #68]	; (2db0 <usb_cb_control_setup+0xbc>)
    2d6c:	4798      	blx	r3
					break;
    2d6e:	e7c8      	b.n	2d02 <usb_cb_control_setup+0xe>
    2d70:	2200      	movs	r2, #0
    2d72:	e7ee      	b.n	2d52 <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    2d74:	2007      	movs	r0, #7
    2d76:	4b0d      	ldr	r3, [pc, #52]	; (2dac <usb_cb_control_setup+0xb8>)
    2d78:	4798      	blx	r3
					usb_ep0_out();
    2d7a:	4b0d      	ldr	r3, [pc, #52]	; (2db0 <usb_cb_control_setup+0xbc>)
    2d7c:	4798      	blx	r3
					break;
    2d7e:	e7c0      	b.n	2d02 <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    2d80:	4b07      	ldr	r3, [pc, #28]	; (2da0 <usb_cb_control_setup+0xac>)
    2d82:	789a      	ldrb	r2, [r3, #2]
    2d84:	4b0c      	ldr	r3, [pc, #48]	; (2db8 <usb_cb_control_setup+0xc4>)
    2d86:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    2d88:	2000      	movs	r0, #0
    2d8a:	4b08      	ldr	r3, [pc, #32]	; (2dac <usb_cb_control_setup+0xb8>)
    2d8c:	4798      	blx	r3
					usb_ep0_out();
    2d8e:	4b08      	ldr	r3, [pc, #32]	; (2db0 <usb_cb_control_setup+0xbc>)
    2d90:	4798      	blx	r3
					break;
    2d92:	e7b6      	b.n	2d02 <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    2d94:	4b09      	ldr	r3, [pc, #36]	; (2dbc <usb_cb_control_setup+0xc8>)
    2d96:	4798      	blx	r3
					break;
    2d98:	e7b3      	b.n	2d02 <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    2d9a:	4b08      	ldr	r3, [pc, #32]	; (2dbc <usb_cb_control_setup+0xc8>)
    2d9c:	4798      	blx	r3
}
    2d9e:	e7b0      	b.n	2d02 <usb_cb_control_setup+0xe>
    2da0:	200004e0 	.word	0x200004e0
    2da4:	20000054 	.word	0x20000054
    2da8:	2000049c 	.word	0x2000049c
    2dac:	00002ac1 	.word	0x00002ac1
    2db0:	00002aa9 	.word	0x00002aa9
    2db4:	200004ec 	.word	0x200004ec
    2db8:	20000574 	.word	0x20000574
    2dbc:	00002ad9 	.word	0x00002ad9

00002dc0 <usb_cb_completion>:

void usb_cb_completion(void) {
    2dc0:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    2dc2:	2002      	movs	r0, #2
    2dc4:	4b0a      	ldr	r3, [pc, #40]	; (2df0 <usb_cb_completion+0x30>)
    2dc6:	4798      	blx	r3
    2dc8:	2800      	cmp	r0, #0
    2dca:	d105      	bne.n	2dd8 <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    2dcc:	2082      	movs	r0, #130	; 0x82
    2dce:	4b08      	ldr	r3, [pc, #32]	; (2df0 <usb_cb_completion+0x30>)
    2dd0:	4798      	blx	r3
    2dd2:	2800      	cmp	r0, #0
    2dd4:	d106      	bne.n	2de4 <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    2dd6:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    2dd8:	2002      	movs	r0, #2
    2dda:	4b06      	ldr	r3, [pc, #24]	; (2df4 <usb_cb_completion+0x34>)
    2ddc:	4798      	blx	r3
		usb_serial_out_completion();
    2dde:	4b06      	ldr	r3, [pc, #24]	; (2df8 <usb_cb_completion+0x38>)
    2de0:	4798      	blx	r3
    2de2:	e7f3      	b.n	2dcc <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    2de4:	2082      	movs	r0, #130	; 0x82
    2de6:	4b03      	ldr	r3, [pc, #12]	; (2df4 <usb_cb_completion+0x34>)
    2de8:	4798      	blx	r3
		usb_serial_in_completion();
    2dea:	4b04      	ldr	r3, [pc, #16]	; (2dfc <usb_cb_completion+0x3c>)
    2dec:	4798      	blx	r3
}
    2dee:	e7f2      	b.n	2dd6 <usb_cb_completion+0x16>
    2df0:	00002a0d 	.word	0x00002a0d
    2df4:	00002a45 	.word	0x00002a45
    2df8:	00002c55 	.word	0x00002c55
    2dfc:	00002c6d 	.word	0x00002c6d

00002e00 <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    2e00:	4770      	bx	lr

00002e02 <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    2e02:	4770      	bx	lr

00002e04 <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    2e04:	b510      	push	{r4, lr}
	if (config <= 1) {
    2e06:	2801      	cmp	r0, #1
    2e08:	d901      	bls.n	2e0e <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    2e0a:	2000      	movs	r0, #0
}
    2e0c:	bd10      	pop	{r4, pc}
		usb_serial_init();
    2e0e:	4b02      	ldr	r3, [pc, #8]	; (2e18 <usb_cb_set_configuration+0x14>)
    2e10:	4798      	blx	r3
		return true;
    2e12:	2001      	movs	r0, #1
    2e14:	e7fa      	b.n	2e0c <usb_cb_set_configuration+0x8>
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	00002c19 	.word	0x00002c19

00002e1c <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    2e1c:	2800      	cmp	r0, #0
    2e1e:	d003      	beq.n	2e28 <usb_cb_set_interface+0xc>
    2e20:	2801      	cmp	r0, #1
    2e22:	d005      	beq.n	2e30 <usb_cb_set_interface+0x14>
    2e24:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    2e26:	4770      	bx	lr
		if (altsetting == 0) return true;
    2e28:	2900      	cmp	r1, #0
    2e2a:	d005      	beq.n	2e38 <usb_cb_set_interface+0x1c>
	return false;
    2e2c:	2000      	movs	r0, #0
    2e2e:	e7fa      	b.n	2e26 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2e30:	2900      	cmp	r1, #0
    2e32:	d003      	beq.n	2e3c <usb_cb_set_interface+0x20>
	return false;
    2e34:	2000      	movs	r0, #0
    2e36:	e7f6      	b.n	2e26 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2e38:	2001      	movs	r0, #1
    2e3a:	e7f4      	b.n	2e26 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2e3c:	2001      	movs	r0, #1
    2e3e:	e7f2      	b.n	2e26 <usb_cb_set_interface+0xa>

00002e40 <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    2e40:	b510      	push	{r4, lr}
    2e42:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    2e44:	2802      	cmp	r0, #2
    2e46:	d028      	beq.n	2e9a <usb_cb_get_descriptor+0x5a>
    2e48:	2803      	cmp	r0, #3
    2e4a:	d008      	beq.n	2e5e <usb_cb_get_descriptor+0x1e>
    2e4c:	2801      	cmp	r0, #1
    2e4e:	d003      	beq.n	2e58 <usb_cb_get_descriptor+0x18>
    2e50:	2000      	movs	r0, #0
    2e52:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    2e54:	6023      	str	r3, [r4, #0]
	return size;
    2e56:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    2e58:	3011      	adds	r0, #17
		address = &device_descriptor;
    2e5a:	4b11      	ldr	r3, [pc, #68]	; (2ea0 <usb_cb_get_descriptor+0x60>)
    2e5c:	e7fa      	b.n	2e54 <usb_cb_get_descriptor+0x14>
		switch (index) {
    2e5e:	2902      	cmp	r1, #2
    2e60:	d00f      	beq.n	2e82 <usb_cb_get_descriptor+0x42>
    2e62:	d808      	bhi.n	2e76 <usb_cb_get_descriptor+0x36>
    2e64:	2900      	cmp	r1, #0
    2e66:	d015      	beq.n	2e94 <usb_cb_get_descriptor+0x54>
    2e68:	2901      	cmp	r1, #1
    2e6a:	d10f      	bne.n	2e8c <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    2e6c:	480d      	ldr	r0, [pc, #52]	; (2ea4 <usb_cb_get_descriptor+0x64>)
    2e6e:	4b0e      	ldr	r3, [pc, #56]	; (2ea8 <usb_cb_get_descriptor+0x68>)
    2e70:	4798      	blx	r3
    2e72:	0003      	movs	r3, r0
			break;
    2e74:	e00f      	b.n	2e96 <usb_cb_get_descriptor+0x56>
    2e76:	2903      	cmp	r1, #3
    2e78:	d108      	bne.n	2e8c <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    2e7a:	4b0c      	ldr	r3, [pc, #48]	; (2eac <usb_cb_get_descriptor+0x6c>)
    2e7c:	4798      	blx	r3
    2e7e:	0003      	movs	r3, r0
			break;
    2e80:	e009      	b.n	2e96 <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    2e82:	480b      	ldr	r0, [pc, #44]	; (2eb0 <usb_cb_get_descriptor+0x70>)
    2e84:	4b08      	ldr	r3, [pc, #32]	; (2ea8 <usb_cb_get_descriptor+0x68>)
    2e86:	4798      	blx	r3
    2e88:	0003      	movs	r3, r0
			break;
    2e8a:	e004      	b.n	2e96 <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    2e8c:	2300      	movs	r3, #0
    2e8e:	6023      	str	r3, [r4, #0]
			return 0;
    2e90:	2000      	movs	r0, #0
    2e92:	e7e0      	b.n	2e56 <usb_cb_get_descriptor+0x16>
    2e94:	4b07      	ldr	r3, [pc, #28]	; (2eb4 <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    2e96:	7818      	ldrb	r0, [r3, #0]
		break;
    2e98:	e7dc      	b.n	2e54 <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    2e9a:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    2e9c:	4b06      	ldr	r3, [pc, #24]	; (2eb8 <usb_cb_get_descriptor+0x78>)
    2e9e:	e7d9      	b.n	2e54 <usb_cb_get_descriptor+0x14>
    2ea0:	00005968 	.word	0x00005968
    2ea4:	0000594c 	.word	0x0000594c
    2ea8:	0000268d 	.word	0x0000268d
    2eac:	00002bb5 	.word	0x00002bb5
    2eb0:	0000595c 	.word	0x0000595c
    2eb4:	00005964 	.word	0x00005964
    2eb8:	2000005c 	.word	0x2000005c

00002ebc <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    2ebc:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    2ebe:	4b07      	ldr	r3, [pc, #28]	; (2edc <rtos_init+0x20>)
    2ec0:	4798      	blx	r3
	#endif
	
	time_init();
    2ec2:	4b07      	ldr	r3, [pc, #28]	; (2ee0 <rtos_init+0x24>)
    2ec4:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    2ec6:	2180      	movs	r1, #128	; 0x80
    2ec8:	03c9      	lsls	r1, r1, #15
    2eca:	2001      	movs	r0, #1
    2ecc:	4b05      	ldr	r3, [pc, #20]	; (2ee4 <rtos_init+0x28>)
    2ece:	4798      	blx	r3
	#endif
	
	init_process_queue();
    2ed0:	4b05      	ldr	r3, [pc, #20]	; (2ee8 <rtos_init+0x2c>)
    2ed2:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    2ed4:	4b05      	ldr	r3, [pc, #20]	; (2eec <rtos_init+0x30>)
    2ed6:	4798      	blx	r3
	#endif
	
	return true;
}
    2ed8:	2001      	movs	r0, #1
    2eda:	bd10      	pop	{r4, pc}
    2edc:	0000220d 	.word	0x0000220d
    2ee0:	000022e1 	.word	0x000022e1
    2ee4:	00001cf1 	.word	0x00001cf1
    2ee8:	000030dd 	.word	0x000030dd
    2eec:	00002355 	.word	0x00002355

00002ef0 <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    2ef0:	b570      	push	{r4, r5, r6, lr}
    2ef2:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    2ef4:	e011      	b.n	2f1a <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    2ef6:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    2ef8:	2680      	movs	r6, #128	; 0x80
    2efa:	03f6      	lsls	r6, r6, #15
    2efc:	0031      	movs	r1, r6
    2efe:	2001      	movs	r0, #1
    2f00:	4b0c      	ldr	r3, [pc, #48]	; (2f34 <morse+0x44>)
    2f02:	4798      	blx	r3
		delay_ms(delay);
    2f04:	480c      	ldr	r0, [pc, #48]	; (2f38 <morse+0x48>)
    2f06:	4368      	muls	r0, r5
    2f08:	4d0c      	ldr	r5, [pc, #48]	; (2f3c <morse+0x4c>)
    2f0a:	47a8      	blx	r5
		led_off();
    2f0c:	0031      	movs	r1, r6
    2f0e:	2001      	movs	r0, #1
    2f10:	4b0b      	ldr	r3, [pc, #44]	; (2f40 <morse+0x50>)
    2f12:	4798      	blx	r3
		delay_ms(100);
    2f14:	480b      	ldr	r0, [pc, #44]	; (2f44 <morse+0x54>)
    2f16:	47a8      	blx	r5
		++c;
    2f18:	3401      	adds	r4, #1
	while (*c != '\0') {
    2f1a:	7823      	ldrb	r3, [r4, #0]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d007      	beq.n	2f30 <morse+0x40>
		if (*c == '.') delay = 100;
    2f20:	2b2e      	cmp	r3, #46	; 0x2e
    2f22:	d0e8      	beq.n	2ef6 <morse+0x6>
		else if (*c == '-') delay = 200;
    2f24:	2b2d      	cmp	r3, #45	; 0x2d
    2f26:	d001      	beq.n	2f2c <morse+0x3c>
		int delay = 0;
    2f28:	2500      	movs	r5, #0
    2f2a:	e7e5      	b.n	2ef8 <morse+0x8>
		else if (*c == '-') delay = 200;
    2f2c:	25c8      	movs	r5, #200	; 0xc8
    2f2e:	e7e3      	b.n	2ef8 <morse+0x8>
	}
}
    2f30:	bd70      	pop	{r4, r5, r6, pc}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	00001d01 	.word	0x00001d01
    2f38:	00001770 	.word	0x00001770
    2f3c:	000022d1 	.word	0x000022d1
    2f40:	00001d11 	.word	0x00001d11
    2f44:	000927c0 	.word	0x000927c0

00002f48 <SOS>:

void SOS() {
    2f48:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2f4a:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    2f4c:	4803      	ldr	r0, [pc, #12]	; (2f5c <SOS+0x14>)
    2f4e:	4b04      	ldr	r3, [pc, #16]	; (2f60 <SOS+0x18>)
    2f50:	4798      	blx	r3
		delay_ms(600);
    2f52:	4804      	ldr	r0, [pc, #16]	; (2f64 <SOS+0x1c>)
    2f54:	4b04      	ldr	r3, [pc, #16]	; (2f68 <SOS+0x20>)
    2f56:	4798      	blx	r3
	while(1) {
    2f58:	e7f8      	b.n	2f4c <SOS+0x4>
    2f5a:	46c0      	nop			; (mov r8, r8)
    2f5c:	0000597c 	.word	0x0000597c
    2f60:	00002ef1 	.word	0x00002ef1
    2f64:	0036ee80 	.word	0x0036ee80
    2f68:	000022d1 	.word	0x000022d1

00002f6c <rtos_main>:
int rtos_main(void) {
    2f6c:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    2f6e:	4b13      	ldr	r3, [pc, #76]	; (2fbc <rtos_main+0x50>)
    2f70:	4798      	blx	r3
	mainproc = &_mainproc;
    2f72:	4c13      	ldr	r4, [pc, #76]	; (2fc0 <rtos_main+0x54>)
    2f74:	1d20      	adds	r0, r4, #4
    2f76:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    2f78:	2380      	movs	r3, #128	; 0x80
    2f7a:	22c0      	movs	r2, #192	; 0xc0
    2f7c:	4911      	ldr	r1, [pc, #68]	; (2fc4 <rtos_main+0x58>)
    2f7e:	00db      	lsls	r3, r3, #3
    2f80:	0092      	lsls	r2, r2, #2
    2f82:	4d11      	ldr	r5, [pc, #68]	; (2fc8 <rtos_main+0x5c>)
    2f84:	47a8      	blx	r5
	dispatch_process(mainproc);
    2f86:	6820      	ldr	r0, [r4, #0]
    2f88:	4b10      	ldr	r3, [pc, #64]	; (2fcc <rtos_main+0x60>)
    2f8a:	4798      	blx	r3
	while (process_count) {
    2f8c:	e001      	b.n	2f92 <rtos_main+0x26>
		dispatch_process(lastproc);
    2f8e:	4b0f      	ldr	r3, [pc, #60]	; (2fcc <rtos_main+0x60>)
    2f90:	4798      	blx	r3
	while (process_count) {
    2f92:	4b0f      	ldr	r3, [pc, #60]	; (2fd0 <rtos_main+0x64>)
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	2b00      	cmp	r3, #0
    2f98:	d003      	beq.n	2fa2 <rtos_main+0x36>
		if (!(lastproc = next_process())) break;
    2f9a:	4b0e      	ldr	r3, [pc, #56]	; (2fd4 <rtos_main+0x68>)
    2f9c:	4798      	blx	r3
    2f9e:	2800      	cmp	r0, #0
    2fa0:	d1f5      	bne.n	2f8e <rtos_main+0x22>
	if (process_count) SOS();
    2fa2:	4b0b      	ldr	r3, [pc, #44]	; (2fd0 <rtos_main+0x64>)
    2fa4:	681b      	ldr	r3, [r3, #0]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d106      	bne.n	2fb8 <rtos_main+0x4c>
	led_on();
    2faa:	2180      	movs	r1, #128	; 0x80
    2fac:	03c9      	lsls	r1, r1, #15
    2fae:	2001      	movs	r0, #1
    2fb0:	4b09      	ldr	r3, [pc, #36]	; (2fd8 <rtos_main+0x6c>)
    2fb2:	4798      	blx	r3
}
    2fb4:	2000      	movs	r0, #0
    2fb6:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    2fb8:	4b08      	ldr	r3, [pc, #32]	; (2fdc <rtos_main+0x70>)
    2fba:	4798      	blx	r3
    2fbc:	00002ebd 	.word	0x00002ebd
    2fc0:	200005f8 	.word	0x200005f8
    2fc4:	00001181 	.word	0x00001181
    2fc8:	00003009 	.word	0x00003009
    2fcc:	000030f1 	.word	0x000030f1
    2fd0:	20000630 	.word	0x20000630
    2fd4:	000031a5 	.word	0x000031a5
    2fd8:	00001d01 	.word	0x00001d01
    2fdc:	00002f49 	.word	0x00002f49

00002fe0 <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    2fe0:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    2fe2:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <TC4_Handler+0x18>)
    2fe4:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    2fe6:	4b05      	ldr	r3, [pc, #20]	; (2ffc <TC4_Handler+0x1c>)
    2fe8:	681c      	ldr	r4, [r3, #0]
    2fea:	4b05      	ldr	r3, [pc, #20]	; (3000 <TC4_Handler+0x20>)
    2fec:	4798      	blx	r3
    2fee:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    2ff0:	2001      	movs	r0, #1
    2ff2:	4b04      	ldr	r3, [pc, #16]	; (3004 <TC4_Handler+0x24>)
    2ff4:	4798      	blx	r3
}
    2ff6:	bd10      	pop	{r4, pc}
    2ff8:	00002395 	.word	0x00002395
    2ffc:	20000624 	.word	0x20000624
    3000:	00002349 	.word	0x00002349
    3004:	00003315 	.word	0x00003315

00003008 <init_process>:
Process* current_process;

//uint32_t process_pc;


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    3008:	b510      	push	{r4, lr}
    300a:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    300c:	4807      	ldr	r0, [pc, #28]	; (302c <init_process+0x24>)
    300e:	1a82      	subs	r2, r0, r2
    3010:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    3012:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    3014:	1e4b      	subs	r3, r1, #1
    3016:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    3018:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    301a:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    301c:	4b04      	ldr	r3, [pc, #16]	; (3030 <init_process+0x28>)
    301e:	4798      	blx	r3
    3020:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    3022:	2300      	movs	r3, #0
    3024:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    3026:	2224      	movs	r2, #36	; 0x24
    3028:	54a3      	strb	r3, [r4, r2]
	#endif
}
    302a:	bd10      	pop	{r4, pc}
    302c:	20002880 	.word	0x20002880
    3030:	00002349 	.word	0x00002349

00003034 <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    3034:	b5f0      	push	{r4, r5, r6, r7, lr}
    3036:	465f      	mov	r7, fp
    3038:	4656      	mov	r6, sl
    303a:	464d      	mov	r5, r9
    303c:	4644      	mov	r4, r8
    303e:	b4f0      	push	{r4, r5, r6, r7}
    3040:	b083      	sub	sp, #12
    3042:	9001      	str	r0, [sp, #4]
    3044:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    3046:	2324      	movs	r3, #36	; 0x24
    3048:	5cc3      	ldrb	r3, [r0, r3]
    304a:	2b00      	cmp	r3, #0
    304c:	d124      	bne.n	3098 <switch_process+0x64>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    304e:	4b1c      	ldr	r3, [pc, #112]	; (30c0 <switch_process+0x8c>)
    3050:	9a01      	ldr	r2, [sp, #4]
    3052:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    3054:	2303      	movs	r3, #3
    3056:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    3058:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    305a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    305e:	2302      	movs	r3, #2
    3060:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3064:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3068:	b662      	cpsie	i
	USE_PSP();
	
	__enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    306a:	9201      	str	r2, [sp, #4]
    306c:	6813      	ldr	r3, [r2, #0]
    306e:	3301      	adds	r3, #1
    3070:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    3072:	b672      	cpsid	i
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3074:	2300      	movs	r3, #0
    3076:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    307a:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    307e:	3324      	adds	r3, #36	; 0x24
    3080:	9a01      	ldr	r2, [sp, #4]
    3082:	5cd3      	ldrb	r3, [r2, r3]
    3084:	2b00      	cmp	r3, #0
    3086:	d118      	bne.n	30ba <switch_process+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
    3088:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    308a:	b003      	add	sp, #12
    308c:	bcf0      	pop	{r4, r5, r6, r7}
    308e:	46bb      	mov	fp, r7
    3090:	46b2      	mov	sl, r6
    3092:	46a9      	mov	r9, r5
    3094:	46a0      	mov	r8, r4
    3096:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    3098:	4b0a      	ldr	r3, [pc, #40]	; (30c4 <switch_process+0x90>)
    309a:	4798      	blx	r3
    309c:	4b0a      	ldr	r3, [pc, #40]	; (30c8 <switch_process+0x94>)
    309e:	681a      	ldr	r2, [r3, #0]
    30a0:	0153      	lsls	r3, r2, #5
    30a2:	1a9b      	subs	r3, r3, r2
    30a4:	009b      	lsls	r3, r3, #2
    30a6:	189b      	adds	r3, r3, r2
    30a8:	00db      	lsls	r3, r3, #3
    30aa:	18c0      	adds	r0, r0, r3
    30ac:	4b07      	ldr	r3, [pc, #28]	; (30cc <switch_process+0x98>)
    30ae:	4798      	blx	r3
		preempt_clear_interrupts();
    30b0:	4b07      	ldr	r3, [pc, #28]	; (30d0 <switch_process+0x9c>)
    30b2:	4798      	blx	r3
		preempt_enable_interrupts();
    30b4:	4b07      	ldr	r3, [pc, #28]	; (30d4 <switch_process+0xa0>)
    30b6:	4798      	blx	r3
    30b8:	e7c9      	b.n	304e <switch_process+0x1a>
		preempt_disable_interrupts();
    30ba:	4b07      	ldr	r3, [pc, #28]	; (30d8 <switch_process+0xa4>)
    30bc:	4798      	blx	r3
    30be:	e7e3      	b.n	3088 <switch_process+0x54>
    30c0:	20000624 	.word	0x20000624
    30c4:	00002349 	.word	0x00002349
    30c8:	000059b8 	.word	0x000059b8
    30cc:	000023b1 	.word	0x000023b1
    30d0:	00002395 	.word	0x00002395
    30d4:	0000236d 	.word	0x0000236d
    30d8:	0000237d 	.word	0x0000237d

000030dc <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    30dc:	4b03      	ldr	r3, [pc, #12]	; (30ec <init_process_queue+0x10>)
    30de:	2200      	movs	r2, #0
    30e0:	605a      	str	r2, [r3, #4]
    30e2:	609a      	str	r2, [r3, #8]
	current_process = 0;
    30e4:	601a      	str	r2, [r3, #0]
	process_count = 0;
    30e6:	60da      	str	r2, [r3, #12]
}
    30e8:	4770      	bx	lr
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	20000624 	.word	0x20000624

000030f0 <dispatch_process>:

bool dispatch_process(Process* process) {
    30f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30f2:	464f      	mov	r7, r9
    30f4:	4646      	mov	r6, r8
    30f6:	b4c0      	push	{r6, r7}
    30f8:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    30fa:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    30fc:	6983      	ldr	r3, [r0, #24]
    30fe:	2b03      	cmp	r3, #3
    3100:	d049      	beq.n	3196 <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    3102:	4b26      	ldr	r3, [pc, #152]	; (319c <dispatch_process+0xac>)
    3104:	68db      	ldr	r3, [r3, #12]
    3106:	2b0f      	cmp	r3, #15
    3108:	dd04      	ble.n	3114 <dispatch_process+0x24>
    310a:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    310c:	bcc0      	pop	{r6, r7}
    310e:	46b9      	mov	r9, r7
    3110:	46b0      	mov	r8, r6
    3112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    3114:	4b22      	ldr	r3, [pc, #136]	; (31a0 <dispatch_process+0xb0>)
    3116:	4798      	blx	r3
    3118:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    311a:	464b      	mov	r3, r9
    311c:	699b      	ldr	r3, [r3, #24]
    311e:	2b00      	cmp	r3, #0
    3120:	d007      	beq.n	3132 <dispatch_process+0x42>
    3122:	464b      	mov	r3, r9
    3124:	695f      	ldr	r7, [r3, #20]
    3126:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    3128:	4b1c      	ldr	r3, [pc, #112]	; (319c <dispatch_process+0xac>)
    312a:	685b      	ldr	r3, [r3, #4]
    312c:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    312e:	2500      	movs	r5, #0
    3130:	e00c      	b.n	314c <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    3132:	2700      	movs	r7, #0
    3134:	e7f8      	b.n	3128 <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    3136:	3110      	adds	r1, #16
    3138:	e00e      	b.n	3158 <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    313a:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    313c:	42ba      	cmp	r2, r7
    313e:	dd16      	ble.n	316e <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    3140:	4a16      	ldr	r2, [pc, #88]	; (319c <dispatch_process+0xac>)
    3142:	009e      	lsls	r6, r3, #2
    3144:	1993      	adds	r3, r2, r6
    3146:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    3148:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    314a:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    314c:	4a13      	ldr	r2, [pc, #76]	; (319c <dispatch_process+0xac>)
    314e:	68d6      	ldr	r6, [r2, #12]
    3150:	42ae      	cmp	r6, r5
    3152:	dd0c      	ble.n	316e <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    3154:	1e59      	subs	r1, r3, #1
    3156:	d4ee      	bmi.n	3136 <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    3158:	4a10      	ldr	r2, [pc, #64]	; (319c <dispatch_process+0xac>)
    315a:	0088      	lsls	r0, r1, #2
    315c:	1812      	adds	r2, r2, r0
    315e:	6910      	ldr	r0, [r2, #16]
    3160:	6982      	ldr	r2, [r0, #24]
    3162:	2a00      	cmp	r2, #0
    3164:	d0e9      	beq.n	313a <dispatch_process+0x4a>
    3166:	6942      	ldr	r2, [r0, #20]
    3168:	4644      	mov	r4, r8
    316a:	1b12      	subs	r2, r2, r4
    316c:	e7e6      	b.n	313c <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    316e:	4a0b      	ldr	r2, [pc, #44]	; (319c <dispatch_process+0xac>)
    3170:	009b      	lsls	r3, r3, #2
    3172:	18d3      	adds	r3, r2, r3
    3174:	4649      	mov	r1, r9
    3176:	6119      	str	r1, [r3, #16]
	++process_count;
    3178:	1c73      	adds	r3, r6, #1
    317a:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    317c:	4666      	mov	r6, ip
    317e:	3601      	adds	r6, #1
    3180:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    3182:	17f1      	asrs	r1, r6, #31
    3184:	0f09      	lsrs	r1, r1, #28
    3186:	1876      	adds	r6, r6, r1
    3188:	230f      	movs	r3, #15
    318a:	4033      	ands	r3, r6
    318c:	1a5b      	subs	r3, r3, r1
    318e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    3190:	b662      	cpsie	i
	return true;
    3192:	2001      	movs	r0, #1
    3194:	e7ba      	b.n	310c <dispatch_process+0x1c>
		return false;
    3196:	2000      	movs	r0, #0
    3198:	e7b8      	b.n	310c <dispatch_process+0x1c>
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	20000624 	.word	0x20000624
    31a0:	00002349 	.word	0x00002349

000031a4 <next_process>:

Process* next_process() {
    31a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31a6:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    31a8:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    31aa:	4b57      	ldr	r3, [pc, #348]	; (3308 <next_process+0x164>)
    31ac:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    31ae:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    31b0:	e015      	b.n	31de <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    31b2:	6823      	ldr	r3, [r4, #0]
    31b4:	781b      	ldrb	r3, [r3, #0]
    31b6:	e03d      	b.n	3234 <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    31b8:	6823      	ldr	r3, [r4, #0]
    31ba:	881b      	ldrh	r3, [r3, #0]
    31bc:	e03a      	b.n	3234 <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    31be:	6863      	ldr	r3, [r4, #4]
    31c0:	42bb      	cmp	r3, r7
    31c2:	d041      	beq.n	3248 <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    31c4:	466b      	mov	r3, sp
    31c6:	3307      	adds	r3, #7
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	2b00      	cmp	r3, #0
    31cc:	d163      	bne.n	3296 <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    31ce:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    31d0:	17f3      	asrs	r3, r6, #31
    31d2:	0f1b      	lsrs	r3, r3, #28
    31d4:	18f6      	adds	r6, r6, r3
    31d6:	220f      	movs	r2, #15
    31d8:	4016      	ands	r6, r2
    31da:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    31dc:	3501      	adds	r5, #1
    31de:	4b4a      	ldr	r3, [pc, #296]	; (3308 <next_process+0x164>)
    31e0:	68db      	ldr	r3, [r3, #12]
    31e2:	42ab      	cmp	r3, r5
    31e4:	dd59      	ble.n	329a <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    31e6:	4b48      	ldr	r3, [pc, #288]	; (3308 <next_process+0x164>)
    31e8:	00b2      	lsls	r2, r6, #2
    31ea:	189a      	adds	r2, r3, r2
    31ec:	6912      	ldr	r2, [r2, #16]
    31ee:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    31f0:	6993      	ldr	r3, [r2, #24]
    31f2:	2b02      	cmp	r3, #2
    31f4:	d151      	bne.n	329a <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    31f6:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    31f8:	466b      	mov	r3, sp
    31fa:	2200      	movs	r2, #0
    31fc:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    31fe:	68e3      	ldr	r3, [r4, #12]
    3200:	2b00      	cmp	r3, #0
    3202:	d001      	beq.n	3208 <next_process+0x64>
    3204:	68e3      	ldr	r3, [r4, #12]
    3206:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    3208:	4b3f      	ldr	r3, [pc, #252]	; (3308 <next_process+0x164>)
    320a:	681a      	ldr	r2, [r3, #0]
    320c:	6993      	ldr	r3, [r2, #24]
    320e:	2b01      	cmp	r3, #1
    3210:	d043      	beq.n	329a <next_process+0xf6>
			if (data->mask) {
    3212:	68a3      	ldr	r3, [r4, #8]
    3214:	2b00      	cmp	r3, #0
    3216:	d00f      	beq.n	3238 <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    3218:	68a1      	ldr	r1, [r4, #8]
    321a:	23ff      	movs	r3, #255	; 0xff
    321c:	400b      	ands	r3, r1
    321e:	68a1      	ldr	r1, [r4, #8]
    3220:	428b      	cmp	r3, r1
    3222:	d0c6      	beq.n	31b2 <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    3224:	68a3      	ldr	r3, [r4, #8]
    3226:	041b      	lsls	r3, r3, #16
    3228:	0c1b      	lsrs	r3, r3, #16
    322a:	68a1      	ldr	r1, [r4, #8]
    322c:	428b      	cmp	r3, r1
    322e:	d0c3      	beq.n	31b8 <next_process+0x14>
				else variable = *(data->variable);
    3230:	6823      	ldr	r3, [r4, #0]
    3232:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    3234:	68a7      	ldr	r7, [r4, #8]
    3236:	401f      	ands	r7, r3
			switch (data->condition) {
    3238:	7c23      	ldrb	r3, [r4, #16]
    323a:	b2db      	uxtb	r3, r3
    323c:	2b06      	cmp	r3, #6
    323e:	d861      	bhi.n	3304 <next_process+0x160>
    3240:	009b      	lsls	r3, r3, #2
    3242:	4932      	ldr	r1, [pc, #200]	; (330c <next_process+0x168>)
    3244:	58cb      	ldr	r3, [r1, r3]
    3246:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    3248:	466b      	mov	r3, sp
    324a:	2101      	movs	r1, #1
    324c:	71d9      	strb	r1, [r3, #7]
    324e:	e7b9      	b.n	31c4 <next_process+0x20>
				if (variable != data->value) unblocked = true;
    3250:	6863      	ldr	r3, [r4, #4]
    3252:	42bb      	cmp	r3, r7
    3254:	d0b6      	beq.n	31c4 <next_process+0x20>
    3256:	466b      	mov	r3, sp
    3258:	2101      	movs	r1, #1
    325a:	71d9      	strb	r1, [r3, #7]
    325c:	e7b2      	b.n	31c4 <next_process+0x20>
				if (variable > data->value) unblocked = true;
    325e:	6863      	ldr	r3, [r4, #4]
    3260:	42bb      	cmp	r3, r7
    3262:	d2af      	bcs.n	31c4 <next_process+0x20>
    3264:	466b      	mov	r3, sp
    3266:	2101      	movs	r1, #1
    3268:	71d9      	strb	r1, [r3, #7]
    326a:	e7ab      	b.n	31c4 <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    326c:	6863      	ldr	r3, [r4, #4]
    326e:	42bb      	cmp	r3, r7
    3270:	d8a8      	bhi.n	31c4 <next_process+0x20>
    3272:	466b      	mov	r3, sp
    3274:	2101      	movs	r1, #1
    3276:	71d9      	strb	r1, [r3, #7]
    3278:	e7a4      	b.n	31c4 <next_process+0x20>
				if (variable < data->value) unblocked = true;
    327a:	6863      	ldr	r3, [r4, #4]
    327c:	42bb      	cmp	r3, r7
    327e:	d9a1      	bls.n	31c4 <next_process+0x20>
    3280:	466b      	mov	r3, sp
    3282:	2101      	movs	r1, #1
    3284:	71d9      	strb	r1, [r3, #7]
    3286:	e79d      	b.n	31c4 <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    3288:	6863      	ldr	r3, [r4, #4]
    328a:	42bb      	cmp	r3, r7
    328c:	d39a      	bcc.n	31c4 <next_process+0x20>
    328e:	466b      	mov	r3, sp
    3290:	2101      	movs	r1, #1
    3292:	71d9      	strb	r1, [r3, #7]
    3294:	e796      	b.n	31c4 <next_process+0x20>
				current_process->status = Process_State_Running;
    3296:	2301      	movs	r3, #1
    3298:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    329a:	4b1b      	ldr	r3, [pc, #108]	; (3308 <next_process+0x164>)
    329c:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    329e:	0028      	movs	r0, r5
    32a0:	e015      	b.n	32ce <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    32a2:	4919      	ldr	r1, [pc, #100]	; (3308 <next_process+0x164>)
    32a4:	688e      	ldr	r6, [r1, #8]
    32a6:	1986      	adds	r6, r0, r6
    32a8:	1e73      	subs	r3, r6, #1
    32aa:	17df      	asrs	r7, r3, #31
    32ac:	0f3f      	lsrs	r7, r7, #28
    32ae:	19db      	adds	r3, r3, r7
    32b0:	220f      	movs	r2, #15
    32b2:	4013      	ands	r3, r2
    32b4:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    32b6:	17f7      	asrs	r7, r6, #31
    32b8:	0f3f      	lsrs	r7, r7, #28
    32ba:	19f6      	adds	r6, r6, r7
    32bc:	4032      	ands	r2, r6
    32be:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    32c0:	009b      	lsls	r3, r3, #2
    32c2:	18cb      	adds	r3, r1, r3
    32c4:	691b      	ldr	r3, [r3, #16]
    32c6:	0092      	lsls	r2, r2, #2
    32c8:	1889      	adds	r1, r1, r2
    32ca:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    32cc:	3801      	subs	r0, #1
    32ce:	2800      	cmp	r0, #0
    32d0:	dce7      	bgt.n	32a2 <next_process+0xfe>
	}

	--process_count;
    32d2:	490d      	ldr	r1, [pc, #52]	; (3308 <next_process+0x164>)
    32d4:	1e63      	subs	r3, r4, #1
    32d6:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    32d8:	688b      	ldr	r3, [r1, #8]
    32da:	3301      	adds	r3, #1
    32dc:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    32de:	17d8      	asrs	r0, r3, #31
    32e0:	0f00      	lsrs	r0, r0, #28
    32e2:	181b      	adds	r3, r3, r0
    32e4:	220f      	movs	r2, #15
    32e6:	4013      	ands	r3, r2
    32e8:	1a1b      	subs	r3, r3, r0
    32ea:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    32ec:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    32ee:	42ac      	cmp	r4, r5
    32f0:	d103      	bne.n	32fa <next_process+0x156>
	
	return current_process;
    32f2:	4b05      	ldr	r3, [pc, #20]	; (3308 <next_process+0x164>)
    32f4:	6818      	ldr	r0, [r3, #0]
}
    32f6:	b003      	add	sp, #12
    32f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    32fa:	4b03      	ldr	r3, [pc, #12]	; (3308 <next_process+0x164>)
    32fc:	6818      	ldr	r0, [r3, #0]
    32fe:	4b04      	ldr	r3, [pc, #16]	; (3310 <next_process+0x16c>)
    3300:	4798      	blx	r3
    3302:	e7f6      	b.n	32f2 <next_process+0x14e>
			switch (data->condition) {
    3304:	2000      	movs	r0, #0
    3306:	e7f6      	b.n	32f6 <next_process+0x152>
    3308:	20000624 	.word	0x20000624
    330c:	00005988 	.word	0x00005988
    3310:	00003035 	.word	0x00003035

00003314 <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    3314:	b5f0      	push	{r4, r5, r6, r7, lr}
    3316:	465f      	mov	r7, fp
    3318:	4656      	mov	r6, sl
    331a:	464d      	mov	r5, r9
    331c:	4644      	mov	r4, r8
    331e:	b4f0      	push	{r4, r5, r6, r7}
    3320:	b083      	sub	sp, #12
    3322:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3324:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    3328:	2b00      	cmp	r3, #0
    332a:	d01c      	beq.n	3366 <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    332c:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    332e:	4b0f      	ldr	r3, [pc, #60]	; (336c <yield_process+0x58>)
    3330:	9301      	str	r3, [sp, #4]
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    3336:	2208      	movs	r2, #8
    3338:	4252      	negs	r2, r2
    333a:	446a      	add	r2, sp
    333c:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    333e:	685a      	ldr	r2, [r3, #4]
    3340:	3a04      	subs	r2, #4
    3342:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    3344:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    3346:	3204      	adds	r2, #4
    3348:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    334a:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    334c:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    334e:	9b01      	ldr	r3, [sp, #4]
    3350:	681b      	ldr	r3, [r3, #0]
    3352:	2203      	movs	r2, #3
    3354:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    3356:	b662      	cpsie	i
	
	__enable_irq();
}
    3358:	b003      	add	sp, #12
    335a:	bcf0      	pop	{r4, r5, r6, r7}
    335c:	46bb      	mov	fp, r7
    335e:	46b2      	mov	sl, r6
    3360:	46a9      	mov	r9, r5
    3362:	46a0      	mov	r8, r4
    3364:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    3366:	4b02      	ldr	r3, [pc, #8]	; (3370 <yield_process+0x5c>)
    3368:	4798      	blx	r3
    336a:	e7df      	b.n	332c <yield_process+0x18>
    336c:	20000624 	.word	0x20000624
    3370:	00002f49 	.word	0x00002f49

00003374 <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    3374:	b5f0      	push	{r4, r5, r6, r7, lr}
    3376:	464f      	mov	r7, r9
    3378:	4646      	mov	r6, r8
    337a:	b4c0      	push	{r6, r7}
    337c:	b08b      	sub	sp, #44	; 0x2c
    337e:	4681      	mov	r9, r0
    3380:	000f      	movs	r7, r1
    3382:	4690      	mov	r8, r2
    3384:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    3386:	4e0f      	ldr	r6, [pc, #60]	; (33c4 <wait_until+0x50>)
    3388:	6834      	ldr	r4, [r6, #0]
    338a:	4b0f      	ldr	r3, [pc, #60]	; (33c8 <wait_until+0x54>)
    338c:	4798      	blx	r3
    338e:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3390:	ac05      	add	r4, sp, #20
    3392:	464b      	mov	r3, r9
    3394:	9305      	str	r3, [sp, #20]
    3396:	9706      	str	r7, [sp, #24]
    3398:	4643      	mov	r3, r8
    339a:	9307      	str	r3, [sp, #28]
    339c:	2300      	movs	r3, #0
    339e:	9308      	str	r3, [sp, #32]
    33a0:	7425      	strb	r5, [r4, #16]
    33a2:	466b      	mov	r3, sp
    33a4:	001a      	movs	r2, r3
    33a6:	cc23      	ldmia	r4!, {r0, r1, r5}
    33a8:	c223      	stmia	r2!, {r0, r1, r5}
    33aa:	cc03      	ldmia	r4!, {r0, r1}
    33ac:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    33ae:	6832      	ldr	r2, [r6, #0]
    33b0:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    33b2:	2002      	movs	r0, #2
    33b4:	4b05      	ldr	r3, [pc, #20]	; (33cc <wait_until+0x58>)
    33b6:	4798      	blx	r3
}
    33b8:	b00b      	add	sp, #44	; 0x2c
    33ba:	bcc0      	pop	{r6, r7}
    33bc:	46b9      	mov	r9, r7
    33be:	46b0      	mov	r8, r6
    33c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	20000624 	.word	0x20000624
    33c8:	00002349 	.word	0x00002349
    33cc:	00003315 	.word	0x00003315

000033d0 <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    33d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33d2:	464f      	mov	r7, r9
    33d4:	4646      	mov	r6, r8
    33d6:	b4c0      	push	{r6, r7}
    33d8:	b08b      	sub	sp, #44	; 0x2c
    33da:	4681      	mov	r9, r0
    33dc:	000f      	movs	r7, r1
    33de:	4690      	mov	r8, r2
    33e0:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    33e2:	4e0f      	ldr	r6, [pc, #60]	; (3420 <wait_until_callback+0x50>)
    33e4:	6834      	ldr	r4, [r6, #0]
    33e6:	4b0f      	ldr	r3, [pc, #60]	; (3424 <wait_until_callback+0x54>)
    33e8:	4798      	blx	r3
    33ea:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    33ec:	ac05      	add	r4, sp, #20
    33ee:	464b      	mov	r3, r9
    33f0:	9305      	str	r3, [sp, #20]
    33f2:	9706      	str	r7, [sp, #24]
    33f4:	4643      	mov	r3, r8
    33f6:	9307      	str	r3, [sp, #28]
    33f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    33fa:	9308      	str	r3, [sp, #32]
    33fc:	7425      	strb	r5, [r4, #16]
    33fe:	466b      	mov	r3, sp
    3400:	001a      	movs	r2, r3
    3402:	cc23      	ldmia	r4!, {r0, r1, r5}
    3404:	c223      	stmia	r2!, {r0, r1, r5}
    3406:	cc03      	ldmia	r4!, {r0, r1}
    3408:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    340a:	6832      	ldr	r2, [r6, #0]
    340c:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    340e:	2002      	movs	r0, #2
    3410:	4b05      	ldr	r3, [pc, #20]	; (3428 <wait_until_callback+0x58>)
    3412:	4798      	blx	r3
}
    3414:	b00b      	add	sp, #44	; 0x2c
    3416:	bcc0      	pop	{r6, r7}
    3418:	46b9      	mov	r9, r7
    341a:	46b0      	mov	r8, r6
    341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	20000624 	.word	0x20000624
    3424:	00002349 	.word	0x00002349
    3428:	00003315 	.word	0x00003315

0000342c <wait_until_callback_preserve_deadline>:

void wait_until_callback_preserve_deadline(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    342c:	b530      	push	{r4, r5, lr}
    342e:	b08b      	sub	sp, #44	; 0x2c
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3430:	ac05      	add	r4, sp, #20
    3432:	9005      	str	r0, [sp, #20]
    3434:	9106      	str	r1, [sp, #24]
    3436:	9207      	str	r2, [sp, #28]
    3438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    343a:	9208      	str	r2, [sp, #32]
    343c:	7423      	strb	r3, [r4, #16]
    343e:	466b      	mov	r3, sp
    3440:	001a      	movs	r2, r3
    3442:	cc23      	ldmia	r4!, {r0, r1, r5}
    3444:	c223      	stmia	r2!, {r0, r1, r5}
    3446:	cc03      	ldmia	r4!, {r0, r1}
    3448:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    344a:	4a04      	ldr	r2, [pc, #16]	; (345c <wait_until_callback_preserve_deadline+0x30>)
    344c:	6812      	ldr	r2, [r2, #0]
    344e:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3450:	2002      	movs	r0, #2
    3452:	4b03      	ldr	r3, [pc, #12]	; (3460 <wait_until_callback_preserve_deadline+0x34>)
    3454:	4798      	blx	r3
    3456:	b00b      	add	sp, #44	; 0x2c
    3458:	bd30      	pop	{r4, r5, pc}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	20000624 	.word	0x20000624
    3460:	00003315 	.word	0x00003315

00003464 <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    3464:	b500      	push	{lr}
    3466:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    3468:	4b0c      	ldr	r3, [pc, #48]	; (349c <rtos_delay_callback+0x38>)
    346a:	4798      	blx	r3
    346c:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    346e:	4b0c      	ldr	r3, [pc, #48]	; (34a0 <rtos_delay_callback+0x3c>)
    3470:	681a      	ldr	r2, [r3, #0]
    3472:	6953      	ldr	r3, [r2, #20]
    3474:	9901      	ldr	r1, [sp, #4]
    3476:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    3478:	490a      	ldr	r1, [pc, #40]	; (34a4 <rtos_delay_callback+0x40>)
    347a:	6809      	ldr	r1, [r1, #0]
    347c:	4299      	cmp	r1, r3
    347e:	dc07      	bgt.n	3490 <rtos_delay_callback+0x2c>
    3480:	4908      	ldr	r1, [pc, #32]	; (34a4 <rtos_delay_callback+0x40>)
    3482:	6808      	ldr	r0, [r1, #0]
    3484:	4907      	ldr	r1, [pc, #28]	; (34a4 <rtos_delay_callback+0x40>)
    3486:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    3488:	2b00      	cmp	r3, #0
    348a:	dd03      	ble.n	3494 <rtos_delay_callback+0x30>
}
    348c:	b003      	add	sp, #12
    348e:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    3490:	0018      	movs	r0, r3
    3492:	e7f7      	b.n	3484 <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    3494:	2301      	movs	r3, #1
    3496:	6193      	str	r3, [r2, #24]
}
    3498:	e7f8      	b.n	348c <rtos_delay_callback+0x28>
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	00002349 	.word	0x00002349
    34a0:	20000624 	.word	0x20000624
    34a4:	200000a4 	.word	0x200000a4

000034a8 <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    34a8:	b570      	push	{r4, r5, r6, lr}
    34aa:	b086      	sub	sp, #24
    34ac:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    34ae:	4b09      	ldr	r3, [pc, #36]	; (34d4 <rtos_delay_ctick+0x2c>)
    34b0:	4798      	blx	r3
    34b2:	4b09      	ldr	r3, [pc, #36]	; (34d8 <rtos_delay_ctick+0x30>)
    34b4:	681d      	ldr	r5, [r3, #0]
    34b6:	1900      	adds	r0, r0, r4
    34b8:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    34ba:	aa01      	add	r2, sp, #4
    34bc:	4b07      	ldr	r3, [pc, #28]	; (34dc <rtos_delay_ctick+0x34>)
    34be:	0011      	movs	r1, r2
    34c0:	cb51      	ldmia	r3!, {r0, r4, r6}
    34c2:	c151      	stmia	r1!, {r0, r4, r6}
    34c4:	cb11      	ldmia	r3!, {r0, r4}
    34c6:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    34c8:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    34ca:	2002      	movs	r0, #2
    34cc:	4b04      	ldr	r3, [pc, #16]	; (34e0 <rtos_delay_ctick+0x38>)
    34ce:	4798      	blx	r3
    34d0:	b006      	add	sp, #24
    34d2:	bd70      	pop	{r4, r5, r6, pc}
    34d4:	00002349 	.word	0x00002349
    34d8:	20000624 	.word	0x20000624
    34dc:	000059a4 	.word	0x000059a4
    34e0:	00003315 	.word	0x00003315

000034e4 <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    34e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    34e6:	4b16      	ldr	r3, [pc, #88]	; (3540 <busmanager_process_wait_callback+0x5c>)
    34e8:	681b      	ldr	r3, [r3, #0]
    34ea:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    34ec:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    34ee:	2500      	movs	r5, #0
    34f0:	e00b      	b.n	350a <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    34f2:	4b13      	ldr	r3, [pc, #76]	; (3540 <busmanager_process_wait_callback+0x5c>)
    34f4:	681b      	ldr	r3, [r3, #0]
    34f6:	2201      	movs	r2, #1
    34f8:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    34fa:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    34fc:	17e3      	asrs	r3, r4, #31
    34fe:	0f5b      	lsrs	r3, r3, #29
    3500:	18e4      	adds	r4, r4, r3
    3502:	2207      	movs	r2, #7
    3504:	4014      	ands	r4, r2
    3506:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    3508:	3501      	adds	r5, #1
    350a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    350c:	42ab      	cmp	r3, r5
    350e:	dd15      	ble.n	353c <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    3510:	1ca3      	adds	r3, r4, #2
    3512:	009b      	lsls	r3, r3, #2
    3514:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    3516:	7d1a      	ldrb	r2, [r3, #20]
    3518:	2a00      	cmp	r2, #0
    351a:	d0ee      	beq.n	34fa <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    351c:	7c1a      	ldrb	r2, [r3, #16]
    351e:	7c59      	ldrb	r1, [r3, #17]
    3520:	0209      	lsls	r1, r1, #8
    3522:	4311      	orrs	r1, r2
    3524:	7c9a      	ldrb	r2, [r3, #18]
    3526:	0412      	lsls	r2, r2, #16
    3528:	430a      	orrs	r2, r1
    352a:	7cdf      	ldrb	r7, [r3, #19]
    352c:	063f      	lsls	r7, r7, #24
    352e:	4317      	orrs	r7, r2
    3530:	4b04      	ldr	r3, [pc, #16]	; (3544 <busmanager_process_wait_callback+0x60>)
    3532:	4798      	blx	r3
    3534:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    3536:	2f00      	cmp	r7, #0
    3538:	dcdf      	bgt.n	34fa <busmanager_process_wait_callback+0x16>
    353a:	e7da      	b.n	34f2 <busmanager_process_wait_callback+0xe>
	}
}
    353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	20000624 	.word	0x20000624
    3544:	00002349 	.word	0x00002349

00003548 <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    3548:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    354a:	780c      	ldrb	r4, [r1, #0]
    354c:	784d      	ldrb	r5, [r1, #1]
    354e:	022d      	lsls	r5, r5, #8
    3550:	4325      	orrs	r5, r4
    3552:	788c      	ldrb	r4, [r1, #2]
    3554:	0424      	lsls	r4, r4, #16
    3556:	432c      	orrs	r4, r5
    3558:	78cf      	ldrb	r7, [r1, #3]
    355a:	063f      	lsls	r7, r7, #24
    355c:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    355e:	2601      	movs	r6, #1
    3560:	e000      	b.n	3564 <set_matching_id_status+0x1c>
    3562:	3601      	adds	r6, #1
    3564:	6b01      	ldr	r1, [r0, #48]	; 0x30
    3566:	42b1      	cmp	r1, r6
    3568:	dd17      	ble.n	359a <set_matching_id_status+0x52>
		++queue_pointer;
    356a:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    356c:	17d1      	asrs	r1, r2, #31
    356e:	0f49      	lsrs	r1, r1, #29
    3570:	1852      	adds	r2, r2, r1
    3572:	2407      	movs	r4, #7
    3574:	4022      	ands	r2, r4
    3576:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    3578:	1c91      	adds	r1, r2, #2
    357a:	0089      	lsls	r1, r1, #2
    357c:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    357e:	782c      	ldrb	r4, [r5, #0]
    3580:	7869      	ldrb	r1, [r5, #1]
    3582:	0209      	lsls	r1, r1, #8
    3584:	4321      	orrs	r1, r4
    3586:	78ac      	ldrb	r4, [r5, #2]
    3588:	0424      	lsls	r4, r4, #16
    358a:	430c      	orrs	r4, r1
    358c:	78e9      	ldrb	r1, [r5, #3]
    358e:	0609      	lsls	r1, r1, #24
    3590:	4321      	orrs	r1, r4
    3592:	42b9      	cmp	r1, r7
    3594:	d1e5      	bne.n	3562 <set_matching_id_status+0x1a>
    3596:	756b      	strb	r3, [r5, #21]
    3598:	e7e3      	b.n	3562 <set_matching_id_status+0x1a>
}
    359a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000359c <busmanager_process_function>:

void busmanager_process_function() {
    359c:	b5f0      	push	{r4, r5, r6, r7, lr}
    359e:	46ce      	mov	lr, r9
    35a0:	4647      	mov	r7, r8
    35a2:	b580      	push	{r7, lr}
    35a4:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    35a6:	4b62      	ldr	r3, [pc, #392]	; (3730 <busmanager_process_function+0x194>)
    35a8:	681b      	ldr	r3, [r3, #0]
    35aa:	6a1f      	ldr	r7, [r3, #32]
    35ac:	e05d      	b.n	366a <busmanager_process_function+0xce>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    35ae:	0038      	movs	r0, r7
    35b0:	3030      	adds	r0, #48	; 0x30
    35b2:	2201      	movs	r2, #1
    35b4:	3302      	adds	r3, #2
    35b6:	4252      	negs	r2, r2
    35b8:	2100      	movs	r1, #0
    35ba:	4c5e      	ldr	r4, [pc, #376]	; (3734 <busmanager_process_function+0x198>)
    35bc:	47a0      	blx	r4
    35be:	e057      	b.n	3670 <busmanager_process_function+0xd4>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    35c0:	7d2b      	ldrb	r3, [r5, #20]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d158      	bne.n	3678 <busmanager_process_function+0xdc>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    35c6:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    35c8:	17e3      	asrs	r3, r4, #31
    35ca:	0f5b      	lsrs	r3, r3, #29
    35cc:	18e4      	adds	r4, r4, r3
    35ce:	2207      	movs	r2, #7
    35d0:	4014      	ands	r4, r2
    35d2:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    35d4:	2301      	movs	r3, #1
    35d6:	469c      	mov	ip, r3
    35d8:	44e1      	add	r9, ip
    35da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    35dc:	454b      	cmp	r3, r9
    35de:	dd09      	ble.n	35f4 <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    35e0:	1ca3      	adds	r3, r4, #2
    35e2:	009b      	lsls	r3, r3, #2
    35e4:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    35e6:	2315      	movs	r3, #21
    35e8:	56eb      	ldrsb	r3, [r5, r3]
    35ea:	2b00      	cmp	r3, #0
    35ec:	d1e8      	bne.n	35c0 <busmanager_process_function+0x24>
    35ee:	7d2b      	ldrb	r3, [r5, #20]
    35f0:	2b00      	cmp	r3, #0
    35f2:	d1e5      	bne.n	35c0 <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    35f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    35f6:	4549      	cmp	r1, r9
    35f8:	d05e      	beq.n	36b8 <busmanager_process_function+0x11c>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    35fa:	2315      	movs	r3, #21
    35fc:	56eb      	ldrsb	r3, [r5, r3]
    35fe:	2b02      	cmp	r3, #2
    3600:	d02f      	beq.n	3662 <busmanager_process_function+0xc6>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    3602:	7b2a      	ldrb	r2, [r5, #12]
    3604:	7b6b      	ldrb	r3, [r5, #13]
    3606:	021b      	lsls	r3, r3, #8
    3608:	4313      	orrs	r3, r2
    360a:	7baa      	ldrb	r2, [r5, #14]
    360c:	0412      	lsls	r2, r2, #16
    360e:	431a      	orrs	r2, r3
    3610:	7beb      	ldrb	r3, [r5, #15]
    3612:	061b      	lsls	r3, r3, #24
    3614:	4313      	orrs	r3, r2
    3616:	d059      	beq.n	36cc <busmanager_process_function+0x130>
				SOS();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    3618:	7b2b      	ldrb	r3, [r5, #12]
    361a:	7b6a      	ldrb	r2, [r5, #13]
    361c:	0212      	lsls	r2, r2, #8
    361e:	431a      	orrs	r2, r3
    3620:	7bab      	ldrb	r3, [r5, #14]
    3622:	041b      	lsls	r3, r3, #16
    3624:	4313      	orrs	r3, r2
    3626:	7bec      	ldrb	r4, [r5, #15]
    3628:	0624      	lsls	r4, r4, #24
    362a:	431c      	orrs	r4, r3
    362c:	7a2b      	ldrb	r3, [r5, #8]
    362e:	7a6a      	ldrb	r2, [r5, #9]
    3630:	0212      	lsls	r2, r2, #8
    3632:	431a      	orrs	r2, r3
    3634:	7aab      	ldrb	r3, [r5, #10]
    3636:	041b      	lsls	r3, r3, #16
    3638:	4313      	orrs	r3, r2
    363a:	7aea      	ldrb	r2, [r5, #11]
    363c:	0612      	lsls	r2, r2, #24
    363e:	431a      	orrs	r2, r3
    3640:	6879      	ldr	r1, [r7, #4]
    3642:	792b      	ldrb	r3, [r5, #4]
    3644:	7968      	ldrb	r0, [r5, #5]
    3646:	0200      	lsls	r0, r0, #8
    3648:	4318      	orrs	r0, r3
    364a:	79ab      	ldrb	r3, [r5, #6]
    364c:	041b      	lsls	r3, r3, #16
    364e:	4303      	orrs	r3, r0
    3650:	79e8      	ldrb	r0, [r5, #7]
    3652:	0600      	lsls	r0, r0, #24
    3654:	4318      	orrs	r0, r3
    3656:	002b      	movs	r3, r5
    3658:	47a0      	blx	r4
    365a:	2800      	cmp	r0, #0
    365c:	d001      	beq.n	3662 <busmanager_process_function+0xc6>
				current_request->status = BusManager_Request_Complete;
    365e:	2302      	movs	r3, #2
    3660:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    3662:	2315      	movs	r3, #21
    3664:	56eb      	ldrsb	r3, [r5, r3]
    3666:	2b02      	cmp	r3, #2
    3668:	d033      	beq.n	36d2 <busmanager_process_function+0x136>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    366c:	2b00      	cmp	r3, #0
    366e:	d09e      	beq.n	35ae <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    3670:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    3672:	2300      	movs	r3, #0
    3674:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3676:	e7b0      	b.n	35da <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    3678:	7c2a      	ldrb	r2, [r5, #16]
    367a:	7c6b      	ldrb	r3, [r5, #17]
    367c:	021b      	lsls	r3, r3, #8
    367e:	4313      	orrs	r3, r2
    3680:	7caa      	ldrb	r2, [r5, #18]
    3682:	0412      	lsls	r2, r2, #16
    3684:	431a      	orrs	r2, r3
    3686:	7ceb      	ldrb	r3, [r5, #19]
    3688:	061b      	lsls	r3, r3, #24
    368a:	4313      	orrs	r3, r2
    368c:	4698      	mov	r8, r3
    368e:	4b2a      	ldr	r3, [pc, #168]	; (3738 <busmanager_process_function+0x19c>)
    3690:	4798      	blx	r3
    3692:	4643      	mov	r3, r8
    3694:	1a18      	subs	r0, r3, r0
    3696:	2800      	cmp	r0, #0
    3698:	dd06      	ble.n	36a8 <busmanager_process_function+0x10c>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    369a:	2301      	movs	r3, #1
    369c:	0022      	movs	r2, r4
    369e:	0029      	movs	r1, r5
    36a0:	0038      	movs	r0, r7
    36a2:	4e26      	ldr	r6, [pc, #152]	; (373c <busmanager_process_function+0x1a0>)
    36a4:	47b0      	blx	r6
			if (unblocked) break;
    36a6:	e78e      	b.n	35c6 <busmanager_process_function+0x2a>
					current_request->busy = false;
    36a8:	2300      	movs	r3, #0
    36aa:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    36ac:	0022      	movs	r2, r4
    36ae:	0029      	movs	r1, r5
    36b0:	0038      	movs	r0, r7
    36b2:	4c22      	ldr	r4, [pc, #136]	; (373c <busmanager_process_function+0x1a0>)
    36b4:	47a0      	blx	r4
			if (unblocked) break;
    36b6:	e79d      	b.n	35f4 <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    36b8:	0038      	movs	r0, r7
    36ba:	3030      	adds	r0, #48	; 0x30
    36bc:	2201      	movs	r2, #1
    36be:	4b20      	ldr	r3, [pc, #128]	; (3740 <busmanager_process_function+0x1a4>)
    36c0:	9300      	str	r3, [sp, #0]
    36c2:	2301      	movs	r3, #1
    36c4:	4252      	negs	r2, r2
    36c6:	4c1f      	ldr	r4, [pc, #124]	; (3744 <busmanager_process_function+0x1a8>)
    36c8:	47a0      	blx	r4
			continue;
    36ca:	e7ce      	b.n	366a <busmanager_process_function+0xce>
				SOS();
    36cc:	4b1e      	ldr	r3, [pc, #120]	; (3748 <busmanager_process_function+0x1ac>)
    36ce:	4798      	blx	r3
    36d0:	e7a2      	b.n	3618 <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    36d2:	7d2b      	ldrb	r3, [r5, #20]
    36d4:	2b00      	cmp	r3, #0
    36d6:	d1c8      	bne.n	366a <busmanager_process_function+0xce>
			current_request->status = BusManager_Request_CompleteNotBusy;
    36d8:	3303      	adds	r3, #3
    36da:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    36dc:	e017      	b.n	370e <busmanager_process_function+0x172>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    36de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    36e0:	4449      	add	r1, r9
    36e2:	1e4b      	subs	r3, r1, #1
    36e4:	17d8      	asrs	r0, r3, #31
    36e6:	0f40      	lsrs	r0, r0, #29
    36e8:	181b      	adds	r3, r3, r0
    36ea:	2207      	movs	r2, #7
    36ec:	4013      	ands	r3, r2
    36ee:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    36f0:	17c8      	asrs	r0, r1, #31
    36f2:	0f40      	lsrs	r0, r0, #29
    36f4:	1809      	adds	r1, r1, r0
    36f6:	400a      	ands	r2, r1
    36f8:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    36fa:	3302      	adds	r3, #2
    36fc:	009b      	lsls	r3, r3, #2
    36fe:	59d9      	ldr	r1, [r3, r7]
    3700:	3202      	adds	r2, #2
    3702:	0093      	lsls	r3, r2, #2
    3704:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    3706:	2301      	movs	r3, #1
    3708:	425b      	negs	r3, r3
    370a:	469c      	mov	ip, r3
    370c:	44e1      	add	r9, ip
    370e:	464b      	mov	r3, r9
    3710:	2b00      	cmp	r3, #0
    3712:	dce4      	bgt.n	36de <busmanager_process_function+0x142>
			}

			--(data->request_count);
    3714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3716:	3b01      	subs	r3, #1
    3718:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    371c:	3301      	adds	r3, #1
    371e:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3720:	17d9      	asrs	r1, r3, #31
    3722:	0f49      	lsrs	r1, r1, #29
    3724:	185b      	adds	r3, r3, r1
    3726:	2207      	movs	r2, #7
    3728:	4013      	ands	r3, r2
    372a:	1a5b      	subs	r3, r3, r1
    372c:	62bb      	str	r3, [r7, #40]	; 0x28
    372e:	e79c      	b.n	366a <busmanager_process_function+0xce>
    3730:	20000624 	.word	0x20000624
    3734:	00003375 	.word	0x00003375
    3738:	00002349 	.word	0x00002349
    373c:	00003549 	.word	0x00003549
    3740:	000034e5 	.word	0x000034e5
    3744:	000033d1 	.word	0x000033d1
    3748:	00002f49 	.word	0x00002f49

0000374c <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    374c:	b570      	push	{r4, r5, r6, lr}
    374e:	0004      	movs	r4, r0
    3750:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    3752:	480a      	ldr	r0, [pc, #40]	; (377c <busmanager_new_process+0x30>)
    3754:	0013      	movs	r3, r2
    3756:	000a      	movs	r2, r1
    3758:	0001      	movs	r1, r0
    375a:	0020      	movs	r0, r4
    375c:	4e08      	ldr	r6, [pc, #32]	; (3780 <busmanager_new_process+0x34>)
    375e:	47b0      	blx	r6
	proc->data.sercom = sercom;
    3760:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    3762:	9b04      	ldr	r3, [sp, #16]
    3764:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    3766:	2300      	movs	r3, #0
    3768:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    376a:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    376c:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    376e:	0023      	movs	r3, r4
    3770:	3328      	adds	r3, #40	; 0x28
    3772:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    3774:	0020      	movs	r0, r4
    3776:	4b03      	ldr	r3, [pc, #12]	; (3784 <busmanager_new_process+0x38>)
    3778:	4798      	blx	r3
}
    377a:	bd70      	pop	{r4, r5, r6, pc}
    377c:	0000359d 	.word	0x0000359d
    3780:	00003009 	.word	0x00003009
    3784:	000030f1 	.word	0x000030f1

00003788 <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    3788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    378a:	0004      	movs	r4, r0
    378c:	000d      	movs	r5, r1
    378e:	9806      	ldr	r0, [sp, #24]
    3790:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    3792:	2600      	movs	r6, #0
    3794:	702a      	strb	r2, [r5, #0]
    3796:	0a17      	lsrs	r7, r2, #8
    3798:	706f      	strb	r7, [r5, #1]
    379a:	0c17      	lsrs	r7, r2, #16
    379c:	70af      	strb	r7, [r5, #2]
    379e:	0e12      	lsrs	r2, r2, #24
    37a0:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    37a2:	712b      	strb	r3, [r5, #4]
    37a4:	0a1a      	lsrs	r2, r3, #8
    37a6:	716a      	strb	r2, [r5, #5]
    37a8:	0c1a      	lsrs	r2, r3, #16
    37aa:	71aa      	strb	r2, [r5, #6]
    37ac:	0e1b      	lsrs	r3, r3, #24
    37ae:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    37b0:	7228      	strb	r0, [r5, #8]
    37b2:	0a03      	lsrs	r3, r0, #8
    37b4:	726b      	strb	r3, [r5, #9]
    37b6:	0c03      	lsrs	r3, r0, #16
    37b8:	72ab      	strb	r3, [r5, #10]
    37ba:	0e00      	lsrs	r0, r0, #24
    37bc:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    37be:	7329      	strb	r1, [r5, #12]
    37c0:	0a0b      	lsrs	r3, r1, #8
    37c2:	736b      	strb	r3, [r5, #13]
    37c4:	0c0b      	lsrs	r3, r1, #16
    37c6:	73ab      	strb	r3, [r5, #14]
    37c8:	0e09      	lsrs	r1, r1, #24
    37ca:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    37cc:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    37ce:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    37d0:	e007      	b.n	37e2 <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    37d2:	0020      	movs	r0, r4
    37d4:	3058      	adds	r0, #88	; 0x58
    37d6:	2201      	movs	r2, #1
    37d8:	2301      	movs	r3, #1
    37da:	4252      	negs	r2, r2
    37dc:	2108      	movs	r1, #8
    37de:	4e0b      	ldr	r6, [pc, #44]	; (380c <busmanager_request_transaction+0x84>)
    37e0:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    37e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    37e4:	2b08      	cmp	r3, #8
    37e6:	d0f4      	beq.n	37d2 <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    37e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    37ea:	0011      	movs	r1, r2
    37ec:	310c      	adds	r1, #12
    37ee:	0089      	lsls	r1, r1, #2
    37f0:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    37f2:	3301      	adds	r3, #1
    37f4:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    37f6:	3201      	adds	r2, #1
    37f8:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    37fa:	17d1      	asrs	r1, r2, #31
    37fc:	0f49      	lsrs	r1, r1, #29
    37fe:	1853      	adds	r3, r2, r1
    3800:	2207      	movs	r2, #7
    3802:	4013      	ands	r3, r2
    3804:	1a5b      	subs	r3, r3, r1
    3806:	6563      	str	r3, [r4, #84]	; 0x54
    3808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00003375 	.word	0x00003375

00003810 <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    3810:	b5f0      	push	{r4, r5, r6, r7, lr}
    3812:	46de      	mov	lr, fp
    3814:	4657      	mov	r7, sl
    3816:	464e      	mov	r6, r9
    3818:	4645      	mov	r5, r8
    381a:	b5e0      	push	{r5, r6, r7, lr}
    381c:	b089      	sub	sp, #36	; 0x24
    381e:	0004      	movs	r4, r0
    3820:	000e      	movs	r6, r1
    3822:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    3824:	ab07      	add	r3, sp, #28
    3826:	2003      	movs	r0, #3
    3828:	4682      	mov	sl, r0
    382a:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    382c:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    382e:	2115      	movs	r1, #21
    3830:	a802      	add	r0, sp, #8
    3832:	4684      	mov	ip, r0
    3834:	4461      	add	r1, ip
    3836:	0a10      	lsrs	r0, r2, #8
    3838:	7008      	strb	r0, [r1, #0]
    383a:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    383c:	7822      	ldrb	r2, [r4, #0]
    383e:	7861      	ldrb	r1, [r4, #1]
    3840:	0209      	lsls	r1, r1, #8
    3842:	4311      	orrs	r1, r2
    3844:	78a2      	ldrb	r2, [r4, #2]
    3846:	0412      	lsls	r2, r2, #16
    3848:	430a      	orrs	r2, r1
    384a:	78e5      	ldrb	r5, [r4, #3]
    384c:	062d      	lsls	r5, r5, #24
    384e:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3850:	9604      	str	r6, [sp, #16]
    3852:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3854:	2128      	movs	r1, #40	; 0x28
    3856:	4689      	mov	r9, r1
    3858:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    385a:	0100      	lsls	r0, r0, #4
    385c:	4e24      	ldr	r6, [pc, #144]	; (38f0 <dma_eeprom_read+0xe0>)
    385e:	1980      	adds	r0, r0, r6
    3860:	4924      	ldr	r1, [pc, #144]	; (38f4 <dma_eeprom_read+0xe4>)
    3862:	468b      	mov	fp, r1
    3864:	9103      	str	r1, [sp, #12]
    3866:	4649      	mov	r1, r9
    3868:	9102      	str	r1, [sp, #8]
    386a:	9301      	str	r3, [sp, #4]
    386c:	4651      	mov	r1, sl
    386e:	9100      	str	r1, [sp, #0]
    3870:	2300      	movs	r3, #0
    3872:	2200      	movs	r2, #0
    3874:	3902      	subs	r1, #2
    3876:	4f20      	ldr	r7, [pc, #128]	; (38f8 <dma_eeprom_read+0xe8>)
    3878:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    387a:	466b      	mov	r3, sp
    387c:	8a9b      	ldrh	r3, [r3, #20]
    387e:	4698      	mov	r8, r3
    3880:	2300      	movs	r3, #0
    3882:	9303      	str	r3, [sp, #12]
    3884:	4649      	mov	r1, r9
    3886:	9102      	str	r1, [sp, #8]
    3888:	4b1c      	ldr	r3, [pc, #112]	; (38fc <dma_eeprom_read+0xec>)
    388a:	9301      	str	r3, [sp, #4]
    388c:	4641      	mov	r1, r8
    388e:	9100      	str	r1, [sp, #0]
    3890:	2300      	movs	r3, #0
    3892:	2200      	movs	r2, #0
    3894:	2100      	movs	r1, #0
    3896:	4658      	mov	r0, fp
    3898:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    389a:	9a04      	ldr	r2, [sp, #16]
    389c:	7850      	ldrb	r0, [r2, #1]
    389e:	0100      	lsls	r0, r0, #4
    38a0:	1980      	adds	r0, r0, r6
    38a2:	4917      	ldr	r1, [pc, #92]	; (3900 <dma_eeprom_read+0xf0>)
    38a4:	468b      	mov	fp, r1
    38a6:	9103      	str	r1, [sp, #12]
    38a8:	4b16      	ldr	r3, [pc, #88]	; (3904 <dma_eeprom_read+0xf4>)
    38aa:	9302      	str	r3, [sp, #8]
    38ac:	4649      	mov	r1, r9
    38ae:	9101      	str	r1, [sp, #4]
    38b0:	4651      	mov	r1, sl
    38b2:	9100      	str	r1, [sp, #0]
    38b4:	2300      	movs	r3, #0
    38b6:	2200      	movs	r2, #0
    38b8:	2100      	movs	r1, #0
    38ba:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    38bc:	2300      	movs	r3, #0
    38be:	9303      	str	r3, [sp, #12]
    38c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38c2:	9302      	str	r3, [sp, #8]
    38c4:	464b      	mov	r3, r9
    38c6:	9301      	str	r3, [sp, #4]
    38c8:	4643      	mov	r3, r8
    38ca:	9300      	str	r3, [sp, #0]
    38cc:	2300      	movs	r3, #0
    38ce:	2201      	movs	r2, #1
    38d0:	2100      	movs	r1, #0
    38d2:	4658      	mov	r0, fp
    38d4:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    38d6:	1d21      	adds	r1, r4, #4
    38d8:	9a04      	ldr	r2, [sp, #16]
    38da:	0028      	movs	r0, r5
    38dc:	4b0a      	ldr	r3, [pc, #40]	; (3908 <dma_eeprom_read+0xf8>)
    38de:	4798      	blx	r3
}
    38e0:	b009      	add	sp, #36	; 0x24
    38e2:	bcf0      	pop	{r4, r5, r6, r7}
    38e4:	46bb      	mov	fp, r7
    38e6:	46b2      	mov	sl, r6
    38e8:	46a9      	mov	r9, r5
    38ea:	46a0      	mov	r8, r4
    38ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38ee:	46c0      	nop			; (mov r8, r8)
    38f0:	200003f8 	.word	0x200003f8
    38f4:	20000690 	.word	0x20000690
    38f8:	000014a1 	.word	0x000014a1
    38fc:	000058d5 	.word	0x000058d5
    3900:	20000680 	.word	0x20000680
    3904:	200002c8 	.word	0x200002c8
    3908:	00003da5 	.word	0x00003da5

0000390c <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    390c:	b5f0      	push	{r4, r5, r6, r7, lr}
    390e:	46de      	mov	lr, fp
    3910:	4657      	mov	r7, sl
    3912:	464e      	mov	r6, r9
    3914:	4645      	mov	r5, r8
    3916:	b5e0      	push	{r5, r6, r7, lr}
    3918:	b089      	sub	sp, #36	; 0x24
    391a:	0004      	movs	r4, r0
    391c:	000e      	movs	r6, r1
    391e:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    3920:	ab07      	add	r3, sp, #28
    3922:	2102      	movs	r1, #2
    3924:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    3926:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    3928:	3113      	adds	r1, #19
    392a:	a802      	add	r0, sp, #8
    392c:	4684      	mov	ip, r0
    392e:	4461      	add	r1, ip
    3930:	0a10      	lsrs	r0, r2, #8
    3932:	7008      	strb	r0, [r1, #0]
    3934:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    3936:	7822      	ldrb	r2, [r4, #0]
    3938:	7861      	ldrb	r1, [r4, #1]
    393a:	0209      	lsls	r1, r1, #8
    393c:	4311      	orrs	r1, r2
    393e:	78a2      	ldrb	r2, [r4, #2]
    3940:	0412      	lsls	r2, r2, #16
    3942:	430a      	orrs	r2, r1
    3944:	78e5      	ldrb	r5, [r4, #3]
    3946:	062d      	lsls	r5, r5, #24
    3948:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    394a:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    394c:	2228      	movs	r2, #40	; 0x28
    394e:	4690      	mov	r8, r2
    3950:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3952:	0100      	lsls	r0, r0, #4
    3954:	4a25      	ldr	r2, [pc, #148]	; (39ec <dma_eeprom_write+0xe0>)
    3956:	4691      	mov	r9, r2
    3958:	4448      	add	r0, r9
    395a:	4a25      	ldr	r2, [pc, #148]	; (39f0 <dma_eeprom_write+0xe4>)
    395c:	4693      	mov	fp, r2
    395e:	9203      	str	r2, [sp, #12]
    3960:	4642      	mov	r2, r8
    3962:	9202      	str	r2, [sp, #8]
    3964:	9301      	str	r3, [sp, #4]
    3966:	2203      	movs	r2, #3
    3968:	9200      	str	r2, [sp, #0]
    396a:	2300      	movs	r3, #0
    396c:	2200      	movs	r2, #0
    396e:	2101      	movs	r1, #1
    3970:	4f20      	ldr	r7, [pc, #128]	; (39f4 <dma_eeprom_write+0xe8>)
    3972:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3974:	466b      	mov	r3, sp
    3976:	8a9b      	ldrh	r3, [r3, #20]
    3978:	469a      	mov	sl, r3
    397a:	2300      	movs	r3, #0
    397c:	9303      	str	r3, [sp, #12]
    397e:	4641      	mov	r1, r8
    3980:	9102      	str	r1, [sp, #8]
    3982:	9912      	ldr	r1, [sp, #72]	; 0x48
    3984:	9101      	str	r1, [sp, #4]
    3986:	4651      	mov	r1, sl
    3988:	9100      	str	r1, [sp, #0]
    398a:	2200      	movs	r2, #0
    398c:	2101      	movs	r1, #1
    398e:	4658      	mov	r0, fp
    3990:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3992:	7870      	ldrb	r0, [r6, #1]
    3994:	0100      	lsls	r0, r0, #4
    3996:	4448      	add	r0, r9
    3998:	4917      	ldr	r1, [pc, #92]	; (39f8 <dma_eeprom_write+0xec>)
    399a:	4689      	mov	r9, r1
    399c:	9103      	str	r1, [sp, #12]
    399e:	4917      	ldr	r1, [pc, #92]	; (39fc <dma_eeprom_write+0xf0>)
    39a0:	468b      	mov	fp, r1
    39a2:	9102      	str	r1, [sp, #8]
    39a4:	4641      	mov	r1, r8
    39a6:	9101      	str	r1, [sp, #4]
    39a8:	2203      	movs	r2, #3
    39aa:	9200      	str	r2, [sp, #0]
    39ac:	2300      	movs	r3, #0
    39ae:	2200      	movs	r2, #0
    39b0:	2100      	movs	r1, #0
    39b2:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    39b4:	2300      	movs	r3, #0
    39b6:	9303      	str	r3, [sp, #12]
    39b8:	465b      	mov	r3, fp
    39ba:	9302      	str	r3, [sp, #8]
    39bc:	4643      	mov	r3, r8
    39be:	9301      	str	r3, [sp, #4]
    39c0:	4653      	mov	r3, sl
    39c2:	9300      	str	r3, [sp, #0]
    39c4:	2300      	movs	r3, #0
    39c6:	2200      	movs	r2, #0
    39c8:	2100      	movs	r1, #0
    39ca:	4648      	mov	r0, r9
    39cc:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    39ce:	0020      	movs	r0, r4
    39d0:	4b0b      	ldr	r3, [pc, #44]	; (3a00 <dma_eeprom_write+0xf4>)
    39d2:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    39d4:	1d21      	adds	r1, r4, #4
    39d6:	0032      	movs	r2, r6
    39d8:	0028      	movs	r0, r5
    39da:	4b0a      	ldr	r3, [pc, #40]	; (3a04 <dma_eeprom_write+0xf8>)
    39dc:	4798      	blx	r3
}
    39de:	b009      	add	sp, #36	; 0x24
    39e0:	bcf0      	pop	{r4, r5, r6, r7}
    39e2:	46bb      	mov	fp, r7
    39e4:	46b2      	mov	sl, r6
    39e6:	46a9      	mov	r9, r5
    39e8:	46a0      	mov	r8, r4
    39ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39ec:	200003f8 	.word	0x200003f8
    39f0:	20000690 	.word	0x20000690
    39f4:	000014a1 	.word	0x000014a1
    39f8:	20000680 	.word	0x20000680
    39fc:	200002c8 	.word	0x200002c8
    3a00:	00001611 	.word	0x00001611
    3a04:	00003da5 	.word	0x00003da5

00003a08 <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    3a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a0a:	b083      	sub	sp, #12
    3a0c:	0014      	movs	r4, r2
    3a0e:	001d      	movs	r5, r3
	switch (request->type) {
    3a10:	2324      	movs	r3, #36	; 0x24
    3a12:	5cd3      	ldrb	r3, [r2, r3]
    3a14:	2b00      	cmp	r3, #0
    3a16:	d004      	beq.n	3a22 <dma_eeprom_process_request+0x1a>
    3a18:	2b01      	cmp	r3, #1
    3a1a:	d00a      	beq.n	3a32 <dma_eeprom_process_request+0x2a>
    3a1c:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    3a1e:	b003      	add	sp, #12
    3a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    3a22:	69d3      	ldr	r3, [r2, #28]
    3a24:	6992      	ldr	r2, [r2, #24]
    3a26:	6a24      	ldr	r4, [r4, #32]
    3a28:	9400      	str	r4, [sp, #0]
    3a2a:	4c1a      	ldr	r4, [pc, #104]	; (3a94 <dma_eeprom_process_request+0x8c>)
    3a2c:	47a0      	blx	r4
	return true;
    3a2e:	2001      	movs	r0, #1
		break;
    3a30:	e7f5      	b.n	3a1e <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    3a32:	6992      	ldr	r2, [r2, #24]
    3a34:	69e6      	ldr	r6, [r4, #28]
    3a36:	1993      	adds	r3, r2, r6
    3a38:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    3a3a:	233f      	movs	r3, #63	; 0x3f
    3a3c:	0017      	movs	r7, r2
    3a3e:	439f      	bics	r7, r3
    3a40:	003b      	movs	r3, r7
    3a42:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    3a44:	459c      	cmp	ip, r3
    3a46:	d300      	bcc.n	3a4a <dma_eeprom_process_request+0x42>
    3a48:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    3a4a:	6a23      	ldr	r3, [r4, #32]
    3a4c:	9300      	str	r3, [sp, #0]
    3a4e:	0033      	movs	r3, r6
    3a50:	4f11      	ldr	r7, [pc, #68]	; (3a98 <dma_eeprom_process_request+0x90>)
    3a52:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    3a54:	4b11      	ldr	r3, [pc, #68]	; (3a9c <dma_eeprom_process_request+0x94>)
    3a56:	4798      	blx	r3
    3a58:	4b11      	ldr	r3, [pc, #68]	; (3aa0 <dma_eeprom_process_request+0x98>)
    3a5a:	4798      	blx	r3
    3a5c:	4b11      	ldr	r3, [pc, #68]	; (3aa4 <dma_eeprom_process_request+0x9c>)
    3a5e:	4912      	ldr	r1, [pc, #72]	; (3aa8 <dma_eeprom_process_request+0xa0>)
    3a60:	4798      	blx	r3
    3a62:	4b12      	ldr	r3, [pc, #72]	; (3aac <dma_eeprom_process_request+0xa4>)
    3a64:	4798      	blx	r3
    3a66:	7428      	strb	r0, [r5, #16]
    3a68:	0a03      	lsrs	r3, r0, #8
    3a6a:	746b      	strb	r3, [r5, #17]
    3a6c:	0c03      	lsrs	r3, r0, #16
    3a6e:	74ab      	strb	r3, [r5, #18]
    3a70:	0e00      	lsrs	r0, r0, #24
    3a72:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    3a74:	2301      	movs	r3, #1
    3a76:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    3a78:	69e3      	ldr	r3, [r4, #28]
    3a7a:	1b9b      	subs	r3, r3, r6
    3a7c:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    3a7e:	d101      	bne.n	3a84 <dma_eeprom_process_request+0x7c>
	return true;
    3a80:	2001      	movs	r0, #1
    3a82:	e7cc      	b.n	3a1e <dma_eeprom_process_request+0x16>
				request->address += count;
    3a84:	69a3      	ldr	r3, [r4, #24]
    3a86:	199b      	adds	r3, r3, r6
    3a88:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    3a8a:	6a23      	ldr	r3, [r4, #32]
    3a8c:	199b      	adds	r3, r3, r6
    3a8e:	6223      	str	r3, [r4, #32]
				return false;
    3a90:	2000      	movs	r0, #0
    3a92:	e7c4      	b.n	3a1e <dma_eeprom_process_request+0x16>
    3a94:	00003811 	.word	0x00003811
    3a98:	0000390d 	.word	0x0000390d
    3a9c:	00002349 	.word	0x00002349
    3aa0:	00005265 	.word	0x00005265
    3aa4:	0000451d 	.word	0x0000451d
    3aa8:	486a6000 	.word	0x486a6000
    3aac:	000044ed 	.word	0x000044ed

00003ab0 <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    3ab0:	b530      	push	{r4, r5, lr}
    3ab2:	b083      	sub	sp, #12
    3ab4:	0014      	movs	r4, r2
    3ab6:	001a      	movs	r2, r3
    3ab8:	ab06      	add	r3, sp, #24
    3aba:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3abc:	2324      	movs	r3, #36	; 0x24
    3abe:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    3ac0:	9b07      	ldr	r3, [sp, #28]
    3ac2:	618b      	str	r3, [r1, #24]
	request->count = count;
    3ac4:	9b08      	ldr	r3, [sp, #32]
    3ac6:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3aca:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    3acc:	4b03      	ldr	r3, [pc, #12]	; (3adc <eeprom_request+0x2c>)
    3ace:	9301      	str	r3, [sp, #4]
    3ad0:	9100      	str	r1, [sp, #0]
    3ad2:	0023      	movs	r3, r4
    3ad4:	4c02      	ldr	r4, [pc, #8]	; (3ae0 <eeprom_request+0x30>)
    3ad6:	47a0      	blx	r4
}
    3ad8:	b003      	add	sp, #12
    3ada:	bd30      	pop	{r4, r5, pc}
    3adc:	00003a09 	.word	0x00003a09
    3ae0:	00003789 	.word	0x00003789

00003ae4 <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    3ae4:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3ae6:	3015      	adds	r0, #21
    3ae8:	2300      	movs	r3, #0
    3aea:	22ff      	movs	r2, #255	; 0xff
    3aec:	2103      	movs	r1, #3
    3aee:	4c01      	ldr	r4, [pc, #4]	; (3af4 <eeprom_wait_until_done+0x10>)
    3af0:	47a0      	blx	r4
    3af2:	bd10      	pop	{r4, pc}
    3af4:	00003375 	.word	0x00003375

00003af8 <dma_imu_icm20948_read>:
void dma_imu_icm20948_read(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* writeback) {
    3af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3afa:	46de      	mov	lr, fp
    3afc:	4657      	mov	r7, sl
    3afe:	464e      	mov	r6, r9
    3b00:	4645      	mov	r5, r8
    3b02:	b5e0      	push	{r5, r6, r7, lr}
    3b04:	b087      	sub	sp, #28
    3b06:	0004      	movs	r4, r0
    3b08:	000e      	movs	r6, r1
    3b0a:	9304      	str	r3, [sp, #16]
    3b0c:	2317      	movs	r3, #23
    3b0e:	446b      	add	r3, sp
    3b10:	701a      	strb	r2, [r3, #0]
	address |= IMU_READ_MASK;
    3b12:	b2d1      	uxtb	r1, r2
    3b14:	2280      	movs	r2, #128	; 0x80
    3b16:	4252      	negs	r2, r2
    3b18:	430a      	orrs	r2, r1
    3b1a:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3b1c:	7802      	ldrb	r2, [r0, #0]
    3b1e:	7841      	ldrb	r1, [r0, #1]
    3b20:	0209      	lsls	r1, r1, #8
    3b22:	4311      	orrs	r1, r2
    3b24:	7882      	ldrb	r2, [r0, #2]
    3b26:	0412      	lsls	r2, r2, #16
    3b28:	430a      	orrs	r2, r1
    3b2a:	78c5      	ldrb	r5, [r0, #3]
    3b2c:	062d      	lsls	r5, r5, #24
    3b2e:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3b30:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3b32:	2228      	movs	r2, #40	; 0x28
    3b34:	4691      	mov	r9, r2
    3b36:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3b38:	0100      	lsls	r0, r0, #4
    3b3a:	4a24      	ldr	r2, [pc, #144]	; (3bcc <dma_imu_icm20948_read+0xd4>)
    3b3c:	4692      	mov	sl, r2
    3b3e:	4450      	add	r0, sl
    3b40:	4a23      	ldr	r2, [pc, #140]	; (3bd0 <dma_imu_icm20948_read+0xd8>)
    3b42:	4693      	mov	fp, r2
    3b44:	9203      	str	r2, [sp, #12]
    3b46:	464a      	mov	r2, r9
    3b48:	9202      	str	r2, [sp, #8]
    3b4a:	9301      	str	r3, [sp, #4]
    3b4c:	2201      	movs	r2, #1
    3b4e:	9200      	str	r2, [sp, #0]
    3b50:	2300      	movs	r3, #0
    3b52:	2200      	movs	r2, #0
    3b54:	2100      	movs	r1, #0
    3b56:	4f1f      	ldr	r7, [pc, #124]	; (3bd4 <dma_imu_icm20948_read+0xdc>)
    3b58:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3b5a:	466b      	mov	r3, sp
    3b5c:	8a1b      	ldrh	r3, [r3, #16]
    3b5e:	4698      	mov	r8, r3
    3b60:	2300      	movs	r3, #0
    3b62:	9303      	str	r3, [sp, #12]
    3b64:	4649      	mov	r1, r9
    3b66:	9102      	str	r1, [sp, #8]
    3b68:	4b1b      	ldr	r3, [pc, #108]	; (3bd8 <dma_imu_icm20948_read+0xe0>)
    3b6a:	9301      	str	r3, [sp, #4]
    3b6c:	4641      	mov	r1, r8
    3b6e:	9100      	str	r1, [sp, #0]
    3b70:	2300      	movs	r3, #0
    3b72:	2200      	movs	r2, #0
    3b74:	2100      	movs	r1, #0
    3b76:	4658      	mov	r0, fp
    3b78:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3b7a:	7870      	ldrb	r0, [r6, #1]
    3b7c:	0100      	lsls	r0, r0, #4
    3b7e:	4450      	add	r0, sl
    3b80:	4916      	ldr	r1, [pc, #88]	; (3bdc <dma_imu_icm20948_read+0xe4>)
    3b82:	468b      	mov	fp, r1
    3b84:	9103      	str	r1, [sp, #12]
    3b86:	4b16      	ldr	r3, [pc, #88]	; (3be0 <dma_imu_icm20948_read+0xe8>)
    3b88:	9302      	str	r3, [sp, #8]
    3b8a:	4649      	mov	r1, r9
    3b8c:	9101      	str	r1, [sp, #4]
    3b8e:	2201      	movs	r2, #1
    3b90:	9200      	str	r2, [sp, #0]
    3b92:	2300      	movs	r3, #0
    3b94:	2200      	movs	r2, #0
    3b96:	2100      	movs	r1, #0
    3b98:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3b9a:	2300      	movs	r3, #0
    3b9c:	9303      	str	r3, [sp, #12]
    3b9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ba0:	9302      	str	r3, [sp, #8]
    3ba2:	464b      	mov	r3, r9
    3ba4:	9301      	str	r3, [sp, #4]
    3ba6:	4643      	mov	r3, r8
    3ba8:	9300      	str	r3, [sp, #0]
    3baa:	2300      	movs	r3, #0
    3bac:	2201      	movs	r2, #1
    3bae:	2100      	movs	r1, #0
    3bb0:	4658      	mov	r0, fp
    3bb2:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3bb4:	1d21      	adds	r1, r4, #4
    3bb6:	0032      	movs	r2, r6
    3bb8:	0028      	movs	r0, r5
    3bba:	4b0a      	ldr	r3, [pc, #40]	; (3be4 <dma_imu_icm20948_read+0xec>)
    3bbc:	4798      	blx	r3
}
    3bbe:	b007      	add	sp, #28
    3bc0:	bcf0      	pop	{r4, r5, r6, r7}
    3bc2:	46bb      	mov	fp, r7
    3bc4:	46b2      	mov	sl, r6
    3bc6:	46a9      	mov	r9, r5
    3bc8:	46a0      	mov	r8, r4
    3bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bcc:	200003f8 	.word	0x200003f8
    3bd0:	20000690 	.word	0x20000690
    3bd4:	000014a1 	.word	0x000014a1
    3bd8:	000058d5 	.word	0x000058d5
    3bdc:	20000680 	.word	0x20000680
    3be0:	200002c8 	.word	0x200002c8
    3be4:	00003da5 	.word	0x00003da5

00003be8 <dma_imu_icm20948_write>:
void dma_imu_icm20948_write(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* data) {
    3be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bea:	46de      	mov	lr, fp
    3bec:	4657      	mov	r7, sl
    3bee:	464e      	mov	r6, r9
    3bf0:	4645      	mov	r5, r8
    3bf2:	b5e0      	push	{r5, r6, r7, lr}
    3bf4:	b087      	sub	sp, #28
    3bf6:	0004      	movs	r4, r0
    3bf8:	000e      	movs	r6, r1
    3bfa:	9304      	str	r3, [sp, #16]
    3bfc:	2317      	movs	r3, #23
    3bfe:	446b      	add	r3, sp
    3c00:	701a      	strb	r2, [r3, #0]
	address &= IMU_WRITE_MASK;
    3c02:	b2d1      	uxtb	r1, r2
    3c04:	227f      	movs	r2, #127	; 0x7f
    3c06:	400a      	ands	r2, r1
    3c08:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3c0a:	7802      	ldrb	r2, [r0, #0]
    3c0c:	7841      	ldrb	r1, [r0, #1]
    3c0e:	0209      	lsls	r1, r1, #8
    3c10:	4311      	orrs	r1, r2
    3c12:	7882      	ldrb	r2, [r0, #2]
    3c14:	0412      	lsls	r2, r2, #16
    3c16:	430a      	orrs	r2, r1
    3c18:	78c5      	ldrb	r5, [r0, #3]
    3c1a:	062d      	lsls	r5, r5, #24
    3c1c:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3c1e:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3c20:	2228      	movs	r2, #40	; 0x28
    3c22:	4690      	mov	r8, r2
    3c24:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3c26:	0100      	lsls	r0, r0, #4
    3c28:	4a24      	ldr	r2, [pc, #144]	; (3cbc <dma_imu_icm20948_write+0xd4>)
    3c2a:	4691      	mov	r9, r2
    3c2c:	4448      	add	r0, r9
    3c2e:	4a24      	ldr	r2, [pc, #144]	; (3cc0 <dma_imu_icm20948_write+0xd8>)
    3c30:	4693      	mov	fp, r2
    3c32:	9203      	str	r2, [sp, #12]
    3c34:	4642      	mov	r2, r8
    3c36:	9202      	str	r2, [sp, #8]
    3c38:	9301      	str	r3, [sp, #4]
    3c3a:	2201      	movs	r2, #1
    3c3c:	9200      	str	r2, [sp, #0]
    3c3e:	2300      	movs	r3, #0
    3c40:	2200      	movs	r2, #0
    3c42:	2100      	movs	r1, #0
    3c44:	4f1f      	ldr	r7, [pc, #124]	; (3cc4 <dma_imu_icm20948_write+0xdc>)
    3c46:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3c48:	466b      	mov	r3, sp
    3c4a:	8a1b      	ldrh	r3, [r3, #16]
    3c4c:	469a      	mov	sl, r3
    3c4e:	2300      	movs	r3, #0
    3c50:	9303      	str	r3, [sp, #12]
    3c52:	4641      	mov	r1, r8
    3c54:	9102      	str	r1, [sp, #8]
    3c56:	9910      	ldr	r1, [sp, #64]	; 0x40
    3c58:	9101      	str	r1, [sp, #4]
    3c5a:	4651      	mov	r1, sl
    3c5c:	9100      	str	r1, [sp, #0]
    3c5e:	2200      	movs	r2, #0
    3c60:	2101      	movs	r1, #1
    3c62:	4658      	mov	r0, fp
    3c64:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3c66:	7870      	ldrb	r0, [r6, #1]
    3c68:	0100      	lsls	r0, r0, #4
    3c6a:	4448      	add	r0, r9
    3c6c:	4916      	ldr	r1, [pc, #88]	; (3cc8 <dma_imu_icm20948_write+0xe0>)
    3c6e:	4689      	mov	r9, r1
    3c70:	9103      	str	r1, [sp, #12]
    3c72:	4916      	ldr	r1, [pc, #88]	; (3ccc <dma_imu_icm20948_write+0xe4>)
    3c74:	468b      	mov	fp, r1
    3c76:	9102      	str	r1, [sp, #8]
    3c78:	4641      	mov	r1, r8
    3c7a:	9101      	str	r1, [sp, #4]
    3c7c:	2201      	movs	r2, #1
    3c7e:	9200      	str	r2, [sp, #0]
    3c80:	2300      	movs	r3, #0
    3c82:	2200      	movs	r2, #0
    3c84:	2100      	movs	r1, #0
    3c86:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3c88:	2300      	movs	r3, #0
    3c8a:	9303      	str	r3, [sp, #12]
    3c8c:	465b      	mov	r3, fp
    3c8e:	9302      	str	r3, [sp, #8]
    3c90:	4643      	mov	r3, r8
    3c92:	9301      	str	r3, [sp, #4]
    3c94:	4653      	mov	r3, sl
    3c96:	9300      	str	r3, [sp, #0]
    3c98:	2300      	movs	r3, #0
    3c9a:	2200      	movs	r2, #0
    3c9c:	2100      	movs	r1, #0
    3c9e:	4648      	mov	r0, r9
    3ca0:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3ca2:	1d21      	adds	r1, r4, #4
    3ca4:	0032      	movs	r2, r6
    3ca6:	0028      	movs	r0, r5
    3ca8:	4b09      	ldr	r3, [pc, #36]	; (3cd0 <dma_imu_icm20948_write+0xe8>)
    3caa:	4798      	blx	r3
}
    3cac:	b007      	add	sp, #28
    3cae:	bcf0      	pop	{r4, r5, r6, r7}
    3cb0:	46bb      	mov	fp, r7
    3cb2:	46b2      	mov	sl, r6
    3cb4:	46a9      	mov	r9, r5
    3cb6:	46a0      	mov	r8, r4
    3cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	200003f8 	.word	0x200003f8
    3cc0:	20000690 	.word	0x20000690
    3cc4:	000014a1 	.word	0x000014a1
    3cc8:	20000680 	.word	0x20000680
    3ccc:	200002c8 	.word	0x200002c8
    3cd0:	00003da5 	.word	0x00003da5

00003cd4 <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    3cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cd6:	b085      	sub	sp, #20
    3cd8:	0005      	movs	r5, r0
    3cda:	000e      	movs	r6, r1
    3cdc:	0014      	movs	r4, r2
	IMU_ON_BUS();
    3cde:	2180      	movs	r1, #128	; 0x80
    3ce0:	0389      	lsls	r1, r1, #14
    3ce2:	2000      	movs	r0, #0
    3ce4:	4b17      	ldr	r3, [pc, #92]	; (3d44 <dma_imu_icm20948_process_request+0x70>)
    3ce6:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    3ce8:	2325      	movs	r3, #37	; 0x25
    3cea:	5ce3      	ldrb	r3, [r4, r3]
    3cec:	011b      	lsls	r3, r3, #4
    3cee:	220f      	movs	r2, #15
    3cf0:	446a      	add	r2, sp
    3cf2:	7013      	strb	r3, [r2, #0]
	dma_imu_icm20948_write(imudesc, dmadesc, REG_BANK_SEL, 1, &bank);
    3cf4:	9200      	str	r2, [sp, #0]
    3cf6:	2301      	movs	r3, #1
    3cf8:	227f      	movs	r2, #127	; 0x7f
    3cfa:	0031      	movs	r1, r6
    3cfc:	0028      	movs	r0, r5
    3cfe:	4f12      	ldr	r7, [pc, #72]	; (3d48 <dma_imu_icm20948_process_request+0x74>)
    3d00:	47b8      	blx	r7
	switch (request->type) {
    3d02:	2324      	movs	r3, #36	; 0x24
    3d04:	5ce3      	ldrb	r3, [r4, r3]
    3d06:	2b00      	cmp	r3, #0
    3d08:	d009      	beq.n	3d1e <dma_imu_icm20948_process_request+0x4a>
    3d0a:	2b01      	cmp	r3, #1
    3d0c:	d010      	beq.n	3d30 <dma_imu_icm20948_process_request+0x5c>
	IMU_OFF_BUS();
    3d0e:	2180      	movs	r1, #128	; 0x80
    3d10:	0389      	lsls	r1, r1, #14
    3d12:	2000      	movs	r0, #0
    3d14:	4b0d      	ldr	r3, [pc, #52]	; (3d4c <dma_imu_icm20948_process_request+0x78>)
    3d16:	4798      	blx	r3
}
    3d18:	2001      	movs	r0, #1
    3d1a:	b005      	add	sp, #20
    3d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dma_imu_icm20948_read(imudesc, dmadesc, request->address, request->count, request->data);
    3d1e:	69e3      	ldr	r3, [r4, #28]
    3d20:	7e22      	ldrb	r2, [r4, #24]
    3d22:	6a21      	ldr	r1, [r4, #32]
    3d24:	9100      	str	r1, [sp, #0]
    3d26:	0031      	movs	r1, r6
    3d28:	0028      	movs	r0, r5
    3d2a:	4c09      	ldr	r4, [pc, #36]	; (3d50 <dma_imu_icm20948_process_request+0x7c>)
    3d2c:	47a0      	blx	r4
		break;
    3d2e:	e7ee      	b.n	3d0e <dma_imu_icm20948_process_request+0x3a>
		dma_imu_icm20948_write(imudesc, dmadesc, request->address, request->count, request->data);
    3d30:	69e3      	ldr	r3, [r4, #28]
    3d32:	7e22      	ldrb	r2, [r4, #24]
    3d34:	6a21      	ldr	r1, [r4, #32]
    3d36:	9100      	str	r1, [sp, #0]
    3d38:	0031      	movs	r1, r6
    3d3a:	0028      	movs	r0, r5
    3d3c:	4c02      	ldr	r4, [pc, #8]	; (3d48 <dma_imu_icm20948_process_request+0x74>)
    3d3e:	47a0      	blx	r4
		break;
    3d40:	e7e5      	b.n	3d0e <dma_imu_icm20948_process_request+0x3a>
    3d42:	46c0      	nop			; (mov r8, r8)
    3d44:	00001d01 	.word	0x00001d01
    3d48:	00003be9 	.word	0x00003be9
    3d4c:	00001d11 	.word	0x00001d11
    3d50:	00003af9 	.word	0x00003af9

00003d54 <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    3d54:	b570      	push	{r4, r5, r6, lr}
    3d56:	b082      	sub	sp, #8
    3d58:	0014      	movs	r4, r2
    3d5a:	001a      	movs	r2, r3
    3d5c:	ab06      	add	r3, sp, #24
    3d5e:	781e      	ldrb	r6, [r3, #0]
    3d60:	ab07      	add	r3, sp, #28
    3d62:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3d64:	2324      	movs	r3, #36	; 0x24
    3d66:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    3d68:	9b08      	ldr	r3, [sp, #32]
    3d6a:	618b      	str	r3, [r1, #24]
	request->count = count;
    3d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d6e:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3d72:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    3d74:	2325      	movs	r3, #37	; 0x25
    3d76:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    3d78:	4b03      	ldr	r3, [pc, #12]	; (3d88 <imu_icm20948_request+0x34>)
    3d7a:	9301      	str	r3, [sp, #4]
    3d7c:	9100      	str	r1, [sp, #0]
    3d7e:	0023      	movs	r3, r4
    3d80:	4c02      	ldr	r4, [pc, #8]	; (3d8c <imu_icm20948_request+0x38>)
    3d82:	47a0      	blx	r4
}
    3d84:	b002      	add	sp, #8
    3d86:	bd70      	pop	{r4, r5, r6, pc}
    3d88:	00003cd5 	.word	0x00003cd5
    3d8c:	00003789 	.word	0x00003789

00003d90 <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    3d90:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3d92:	3015      	adds	r0, #21
    3d94:	2300      	movs	r3, #0
    3d96:	22ff      	movs	r2, #255	; 0xff
    3d98:	2103      	movs	r1, #3
    3d9a:	4c01      	ldr	r4, [pc, #4]	; (3da0 <imu_icm20948_wait_until_done+0x10>)
    3d9c:	47a0      	blx	r4
}
    3d9e:	bd10      	pop	{r4, pc}
    3da0:	00003375 	.word	0x00003375

00003da4 <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    3da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3da6:	0007      	movs	r7, r0
    3da8:	000d      	movs	r5, r1
    3daa:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    3dac:	7810      	ldrb	r0, [r2, #0]
    3dae:	4e1c      	ldr	r6, [pc, #112]	; (3e20 <dma_spi_transaction+0x7c>)
    3db0:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3db2:	7860      	ldrb	r0, [r4, #1]
    3db4:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    3db6:	0038      	movs	r0, r7
    3db8:	4b1a      	ldr	r3, [pc, #104]	; (3e24 <dma_spi_transaction+0x80>)
    3dba:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    3dbc:	7923      	ldrb	r3, [r4, #4]
    3dbe:	78e2      	ldrb	r2, [r4, #3]
    3dc0:	7820      	ldrb	r0, [r4, #0]
    3dc2:	2102      	movs	r1, #2
    3dc4:	4f18      	ldr	r7, [pc, #96]	; (3e28 <dma_spi_transaction+0x84>)
    3dc6:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    3dc8:	7923      	ldrb	r3, [r4, #4]
    3dca:	78a2      	ldrb	r2, [r4, #2]
    3dcc:	7860      	ldrb	r0, [r4, #1]
    3dce:	2102      	movs	r1, #2
    3dd0:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    3dd2:	782b      	ldrb	r3, [r5, #0]
    3dd4:	786a      	ldrb	r2, [r5, #1]
    3dd6:	0212      	lsls	r2, r2, #8
    3dd8:	431a      	orrs	r2, r3
    3dda:	78ab      	ldrb	r3, [r5, #2]
    3ddc:	041b      	lsls	r3, r3, #16
    3dde:	4313      	orrs	r3, r2
    3de0:	78e9      	ldrb	r1, [r5, #3]
    3de2:	0609      	lsls	r1, r1, #24
    3de4:	4319      	orrs	r1, r3
    3de6:	7928      	ldrb	r0, [r5, #4]
    3de8:	4b10      	ldr	r3, [pc, #64]	; (3e2c <dma_spi_transaction+0x88>)
    3dea:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    3dec:	7820      	ldrb	r0, [r4, #0]
    3dee:	4f10      	ldr	r7, [pc, #64]	; (3e30 <dma_spi_transaction+0x8c>)
    3df0:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    3df2:	7860      	ldrb	r0, [r4, #1]
    3df4:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    3df6:	7860      	ldrb	r0, [r4, #1]
    3df8:	4b0e      	ldr	r3, [pc, #56]	; (3e34 <dma_spi_transaction+0x90>)
    3dfa:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    3dfc:	7820      	ldrb	r0, [r4, #0]
    3dfe:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3e00:	7860      	ldrb	r0, [r4, #1]
    3e02:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    3e04:	782b      	ldrb	r3, [r5, #0]
    3e06:	786a      	ldrb	r2, [r5, #1]
    3e08:	0212      	lsls	r2, r2, #8
    3e0a:	431a      	orrs	r2, r3
    3e0c:	78ab      	ldrb	r3, [r5, #2]
    3e0e:	041b      	lsls	r3, r3, #16
    3e10:	4313      	orrs	r3, r2
    3e12:	78e9      	ldrb	r1, [r5, #3]
    3e14:	0609      	lsls	r1, r1, #24
    3e16:	4319      	orrs	r1, r3
    3e18:	7928      	ldrb	r0, [r5, #4]
    3e1a:	4b07      	ldr	r3, [pc, #28]	; (3e38 <dma_spi_transaction+0x94>)
    3e1c:	4798      	blx	r3
    3e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e20:	00001581 	.word	0x00001581
    3e24:	00002201 	.word	0x00002201
    3e28:	0000150d 	.word	0x0000150d
    3e2c:	00001d11 	.word	0x00001d11
    3e30:	00001559 	.word	0x00001559
    3e34:	00003ea9 	.word	0x00003ea9
    3e38:	00001d01 	.word	0x00001d01

00003e3c <rtos_dma_wait_until_end_callback>:
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3e3c:	4b03      	ldr	r3, [pc, #12]	; (3e4c <rtos_dma_wait_until_end_callback+0x10>)
    3e3e:	681b      	ldr	r3, [r3, #0]
    3e40:	6a1b      	ldr	r3, [r3, #32]
    3e42:	7819      	ldrb	r1, [r3, #0]
    3e44:	4a02      	ldr	r2, [pc, #8]	; (3e50 <rtos_dma_wait_until_end_callback+0x14>)
    3e46:	233f      	movs	r3, #63	; 0x3f
    3e48:	54d1      	strb	r1, [r2, r3]
}
    3e4a:	4770      	bx	lr
    3e4c:	20000624 	.word	0x20000624
    3e50:	41004800 	.word	0x41004800

00003e54 <rtos_dma_wait_until_end_or_timeout_callback>:
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_callback);
	current_process->data = data;
}

void rtos_dma_wait_until_end_or_timeout_callback() {
    3e54:	b510      	push	{r4, lr}
    3e56:	b082      	sub	sp, #8
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3e58:	4c0f      	ldr	r4, [pc, #60]	; (3e98 <rtos_dma_wait_until_end_or_timeout_callback+0x44>)
    3e5a:	6823      	ldr	r3, [r4, #0]
    3e5c:	6a1b      	ldr	r3, [r3, #32]
    3e5e:	7819      	ldrb	r1, [r3, #0]
    3e60:	4a0e      	ldr	r2, [pc, #56]	; (3e9c <rtos_dma_wait_until_end_or_timeout_callback+0x48>)
    3e62:	233f      	movs	r3, #63	; 0x3f
    3e64:	54d1      	strb	r1, [r2, r3]

	// Check whether timeout has occured
	volatile uint32_t time = time_read_ticks();
    3e66:	4b0e      	ldr	r3, [pc, #56]	; (3ea0 <rtos_dma_wait_until_end_or_timeout_callback+0x4c>)
    3e68:	4798      	blx	r3
    3e6a:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    3e6c:	6822      	ldr	r2, [r4, #0]
    3e6e:	6953      	ldr	r3, [r2, #20]
    3e70:	9901      	ldr	r1, [sp, #4]
    3e72:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    3e74:	490b      	ldr	r1, [pc, #44]	; (3ea4 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    3e76:	6809      	ldr	r1, [r1, #0]
    3e78:	4299      	cmp	r1, r3
    3e7a:	dc07      	bgt.n	3e8c <rtos_dma_wait_until_end_or_timeout_callback+0x38>
    3e7c:	4909      	ldr	r1, [pc, #36]	; (3ea4 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    3e7e:	6808      	ldr	r0, [r1, #0]
    3e80:	4908      	ldr	r1, [pc, #32]	; (3ea4 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    3e82:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    3e84:	2b00      	cmp	r3, #0
    3e86:	dd03      	ble.n	3e90 <rtos_dma_wait_until_end_or_timeout_callback+0x3c>
}
    3e88:	b002      	add	sp, #8
    3e8a:	bd10      	pop	{r4, pc}
	min = (t < min) ? t : min;
    3e8c:	0018      	movs	r0, r3
    3e8e:	e7f7      	b.n	3e80 <rtos_dma_wait_until_end_or_timeout_callback+0x2c>
	if (t <= 0) current_process->status = Process_State_Running;
    3e90:	2301      	movs	r3, #1
    3e92:	6193      	str	r3, [r2, #24]
}
    3e94:	e7f8      	b.n	3e88 <rtos_dma_wait_until_end_or_timeout_callback+0x34>
    3e96:	46c0      	nop			; (mov r8, r8)
    3e98:	20000624 	.word	0x20000624
    3e9c:	41004800 	.word	0x41004800
    3ea0:	00002349 	.word	0x00002349
    3ea4:	200000a8 	.word	0x200000a8

00003ea8 <rtos_dma_wait_until_end>:
void rtos_dma_wait_until_end(int channel) {
    3ea8:	b570      	push	{r4, r5, r6, lr}
    3eaa:	b084      	sub	sp, #16
    3eac:	9003      	str	r0, [sp, #12]
	void* data = current_process->data;
    3eae:	4c08      	ldr	r4, [pc, #32]	; (3ed0 <rtos_dma_wait_until_end+0x28>)
    3eb0:	6823      	ldr	r3, [r4, #0]
    3eb2:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    3eb4:	aa03      	add	r2, sp, #12
    3eb6:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    3eb8:	4b06      	ldr	r3, [pc, #24]	; (3ed4 <rtos_dma_wait_until_end+0x2c>)
    3eba:	9300      	str	r3, [sp, #0]
    3ebc:	2300      	movs	r3, #0
    3ebe:	2202      	movs	r2, #2
    3ec0:	2102      	movs	r1, #2
    3ec2:	4805      	ldr	r0, [pc, #20]	; (3ed8 <rtos_dma_wait_until_end+0x30>)
    3ec4:	4e05      	ldr	r6, [pc, #20]	; (3edc <rtos_dma_wait_until_end+0x34>)
    3ec6:	47b0      	blx	r6
	current_process->data = data;
    3ec8:	6823      	ldr	r3, [r4, #0]
    3eca:	621d      	str	r5, [r3, #32]
}
    3ecc:	b004      	add	sp, #16
    3ece:	bd70      	pop	{r4, r5, r6, pc}
    3ed0:	20000624 	.word	0x20000624
    3ed4:	00003e3d 	.word	0x00003e3d
    3ed8:	4100484e 	.word	0x4100484e
    3edc:	000033d1 	.word	0x000033d1

00003ee0 <rtos_dma_wait_until_end_or_timeout>:

void rtos_dma_wait_until_end_or_timeout(int channel, uint32_t timeout_ticks) {
    3ee0:	b570      	push	{r4, r5, r6, lr}
    3ee2:	b084      	sub	sp, #16
    3ee4:	9003      	str	r0, [sp, #12]
    3ee6:	000c      	movs	r4, r1
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + timeout_ticks;
    3ee8:	4b0a      	ldr	r3, [pc, #40]	; (3f14 <rtos_dma_wait_until_end_or_timeout+0x34>)
    3eea:	4798      	blx	r3
    3eec:	4d0a      	ldr	r5, [pc, #40]	; (3f18 <rtos_dma_wait_until_end_or_timeout+0x38>)
    3eee:	682b      	ldr	r3, [r5, #0]
    3ef0:	1900      	adds	r0, r0, r4
    3ef2:	6158      	str	r0, [r3, #20]

	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    3ef4:	6a1c      	ldr	r4, [r3, #32]
	current_process->data = &channel;
    3ef6:	aa03      	add	r2, sp, #12
    3ef8:	621a      	str	r2, [r3, #32]
	wait_until_callback_preserve_deadline(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    3efa:	4b08      	ldr	r3, [pc, #32]	; (3f1c <rtos_dma_wait_until_end_or_timeout+0x3c>)
    3efc:	9300      	str	r3, [sp, #0]
    3efe:	2300      	movs	r3, #0
    3f00:	2202      	movs	r2, #2
    3f02:	2102      	movs	r1, #2
    3f04:	4806      	ldr	r0, [pc, #24]	; (3f20 <rtos_dma_wait_until_end_or_timeout+0x40>)
    3f06:	4e07      	ldr	r6, [pc, #28]	; (3f24 <rtos_dma_wait_until_end_or_timeout+0x44>)
    3f08:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_or_timeout_callback);
		
	current_process->data = data;
    3f0a:	682b      	ldr	r3, [r5, #0]
    3f0c:	621c      	str	r4, [r3, #32]
    3f0e:	b004      	add	sp, #16
    3f10:	bd70      	pop	{r4, r5, r6, pc}
    3f12:	46c0      	nop			; (mov r8, r8)
    3f14:	00002349 	.word	0x00002349
    3f18:	20000624 	.word	0x20000624
    3f1c:	00003e55 	.word	0x00003e55
    3f20:	4100484e 	.word	0x4100484e
    3f24:	0000342d 	.word	0x0000342d

00003f28 <rtos_uart_start_send_buffer>:
#include "rtos_uart.h"
#include "Drivers/sercom.h"
#include "rtos_dma.h"

bool rtos_uart_start_send_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f2a:	b087      	sub	sp, #28
    3f2c:	0005      	movs	r5, r0
    3f2e:	000c      	movs	r4, r1
    3f30:	0016      	movs	r6, r2
    3f32:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3f34:	4b12      	ldr	r3, [pc, #72]	; (3f80 <rtos_uart_start_send_buffer+0x58>)
    3f36:	4798      	blx	r3
    3f38:	1e07      	subs	r7, r0, #0
    3f3a:	d102      	bne.n	3f42 <rtos_uart_start_send_buffer+0x1a>
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->txchannel);

    return true;
}
    3f3c:	0038      	movs	r0, r7
    3f3e:	b007      	add	sp, #28
    3f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3f42:	7820      	ldrb	r0, [r4, #0]
    buffer, &(sercom->USART_INT.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
    3f44:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3f46:	0100      	lsls	r0, r0, #4
    3f48:	4b0e      	ldr	r3, [pc, #56]	; (3f84 <rtos_uart_start_send_buffer+0x5c>)
    3f4a:	18c0      	adds	r0, r0, r3
    3f4c:	2300      	movs	r3, #0
    3f4e:	9303      	str	r3, [sp, #12]
    3f50:	9502      	str	r5, [sp, #8]
    3f52:	9601      	str	r6, [sp, #4]
    3f54:	466b      	mov	r3, sp
    3f56:	8a9e      	ldrh	r6, [r3, #20]
    3f58:	9600      	str	r6, [sp, #0]
    3f5a:	2300      	movs	r3, #0
    3f5c:	2200      	movs	r2, #0
    3f5e:	2101      	movs	r1, #1
    3f60:	4d09      	ldr	r5, [pc, #36]	; (3f88 <rtos_uart_start_send_buffer+0x60>)
    3f62:	47a8      	blx	r5
	dma_disable_channel(dmadesc->txchannel);
    3f64:	7820      	ldrb	r0, [r4, #0]
    3f66:	4b09      	ldr	r3, [pc, #36]	; (3f8c <rtos_uart_start_send_buffer+0x64>)
    3f68:	4798      	blx	r3
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    3f6a:	7923      	ldrb	r3, [r4, #4]
    3f6c:	78e2      	ldrb	r2, [r4, #3]
    3f6e:	7820      	ldrb	r0, [r4, #0]
    3f70:	2102      	movs	r1, #2
    3f72:	4d07      	ldr	r5, [pc, #28]	; (3f90 <rtos_uart_start_send_buffer+0x68>)
    3f74:	47a8      	blx	r5
	dma_enable_channel(dmadesc->txchannel);
    3f76:	7820      	ldrb	r0, [r4, #0]
    3f78:	4b06      	ldr	r3, [pc, #24]	; (3f94 <rtos_uart_start_send_buffer+0x6c>)
    3f7a:	4798      	blx	r3
    return true;
    3f7c:	e7de      	b.n	3f3c <rtos_uart_start_send_buffer+0x14>
    3f7e:	46c0      	nop			; (mov r8, r8)
    3f80:	00001ffd 	.word	0x00001ffd
    3f84:	200003f8 	.word	0x200003f8
    3f88:	000014a1 	.word	0x000014a1
    3f8c:	00001581 	.word	0x00001581
    3f90:	0000150d 	.word	0x0000150d
    3f94:	00001559 	.word	0x00001559

00003f98 <rtos_uart_wait_until_send_complete>:

void rtos_uart_wait_until_send_complete(DMA_Descriptor* dmadesc) {
    3f98:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->txchannel);
    3f9a:	7800      	ldrb	r0, [r0, #0]
    3f9c:	4b01      	ldr	r3, [pc, #4]	; (3fa4 <rtos_uart_wait_until_send_complete+0xc>)
    3f9e:	4798      	blx	r3
}
    3fa0:	bd10      	pop	{r4, pc}
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	00003ea9 	.word	0x00003ea9

00003fa8 <rtos_uart_start_read_buffer>:


bool rtos_uart_start_read_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3faa:	b087      	sub	sp, #28
    3fac:	0005      	movs	r5, r0
    3fae:	000c      	movs	r4, r1
    3fb0:	0016      	movs	r6, r2
    3fb2:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3fb4:	4b12      	ldr	r3, [pc, #72]	; (4000 <rtos_uart_start_read_buffer+0x58>)
    3fb6:	4798      	blx	r3
    3fb8:	1e07      	subs	r7, r0, #0
    3fba:	d102      	bne.n	3fc2 <rtos_uart_start_read_buffer+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
}
    3fbc:	0038      	movs	r0, r7
    3fbe:	b007      	add	sp, #28
    3fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3fc2:	7860      	ldrb	r0, [r4, #1]
    &(sercom->USART_INT.SERCOM_DATA), buffer, DMA_NEXTDESCRIPTOR_NONE);
    3fc4:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3fc6:	0100      	lsls	r0, r0, #4
    3fc8:	4b0e      	ldr	r3, [pc, #56]	; (4004 <rtos_uart_start_read_buffer+0x5c>)
    3fca:	18c0      	adds	r0, r0, r3
    3fcc:	2300      	movs	r3, #0
    3fce:	9303      	str	r3, [sp, #12]
    3fd0:	9602      	str	r6, [sp, #8]
    3fd2:	9501      	str	r5, [sp, #4]
    3fd4:	466b      	mov	r3, sp
    3fd6:	8a9e      	ldrh	r6, [r3, #20]
    3fd8:	9600      	str	r6, [sp, #0]
    3fda:	2300      	movs	r3, #0
    3fdc:	2201      	movs	r2, #1
    3fde:	2100      	movs	r1, #0
    3fe0:	4d09      	ldr	r5, [pc, #36]	; (4008 <rtos_uart_start_read_buffer+0x60>)
    3fe2:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    3fe4:	7860      	ldrb	r0, [r4, #1]
    3fe6:	4b09      	ldr	r3, [pc, #36]	; (400c <rtos_uart_start_read_buffer+0x64>)
    3fe8:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    3fea:	7923      	ldrb	r3, [r4, #4]
    3fec:	78a2      	ldrb	r2, [r4, #2]
    3fee:	7860      	ldrb	r0, [r4, #1]
    3ff0:	2102      	movs	r1, #2
    3ff2:	4d07      	ldr	r5, [pc, #28]	; (4010 <rtos_uart_start_read_buffer+0x68>)
    3ff4:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    3ff6:	7860      	ldrb	r0, [r4, #1]
    3ff8:	4b06      	ldr	r3, [pc, #24]	; (4014 <rtos_uart_start_read_buffer+0x6c>)
    3ffa:	4798      	blx	r3
    return true;
    3ffc:	e7de      	b.n	3fbc <rtos_uart_start_read_buffer+0x14>
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	00001ffd 	.word	0x00001ffd
    4004:	200003f8 	.word	0x200003f8
    4008:	000014a1 	.word	0x000014a1
    400c:	00001581 	.word	0x00001581
    4010:	0000150d 	.word	0x0000150d
    4014:	00001559 	.word	0x00001559

00004018 <rtos_uart_wait_until_read_complete>:

void rtos_uart_wait_until_read_complete(DMA_Descriptor* dmadesc) {
    4018:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->rxchannel);
    401a:	7840      	ldrb	r0, [r0, #1]
    401c:	4b01      	ldr	r3, [pc, #4]	; (4024 <rtos_uart_wait_until_read_complete+0xc>)
    401e:	4798      	blx	r3
}
    4020:	bd10      	pop	{r4, pc}
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	00003ea9 	.word	0x00003ea9

00004028 <rtos_uart_wait_until_read_complete_or_timeout>:

void rtos_uart_wait_until_read_complete_or_timeout(DMA_Descriptor* dmadesc, uint32_t timeout_ticks) {
    4028:	b510      	push	{r4, lr}
    402a:	0004      	movs	r4, r0
    rtos_dma_wait_until_end_or_timeout(dmadesc->rxchannel, timeout_ticks);
    402c:	7840      	ldrb	r0, [r0, #1]
    402e:	4b03      	ldr	r3, [pc, #12]	; (403c <rtos_uart_wait_until_read_complete_or_timeout+0x14>)
    4030:	4798      	blx	r3

    dma_enable_channel(dmadesc->rxchannel);
    4032:	7860      	ldrb	r0, [r4, #1]
    4034:	4b02      	ldr	r3, [pc, #8]	; (4040 <rtos_uart_wait_until_read_complete_or_timeout+0x18>)
    4036:	4798      	blx	r3
    4038:	bd10      	pop	{r4, pc}
    403a:	46c0      	nop			; (mov r8, r8)
    403c:	00003ee1 	.word	0x00003ee1
    4040:	00001559 	.word	0x00001559

00004044 <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    4044:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    4046:	4b25      	ldr	r3, [pc, #148]	; (40dc <usb_proc_loop+0x98>)
    4048:	2200      	movs	r2, #0
    404a:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    404c:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    404e:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    4050:	70da      	strb	r2, [r3, #3]
    4052:	e00f      	b.n	4074 <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    4054:	4c21      	ldr	r4, [pc, #132]	; (40dc <usb_proc_loop+0x98>)
    4056:	68e0      	ldr	r0, [r4, #12]
    4058:	18c0      	adds	r0, r0, r3
    405a:	4b21      	ldr	r3, [pc, #132]	; (40e0 <usb_proc_loop+0x9c>)
    405c:	4798      	blx	r3
    405e:	68a3      	ldr	r3, [r4, #8]
    4060:	181b      	adds	r3, r3, r0
    4062:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    4064:	4b1d      	ldr	r3, [pc, #116]	; (40dc <usb_proc_loop+0x98>)
    4066:	78db      	ldrb	r3, [r3, #3]
    4068:	2b00      	cmp	r3, #0
    406a:	d003      	beq.n	4074 <usb_proc_loop+0x30>
    406c:	4b1d      	ldr	r3, [pc, #116]	; (40e4 <usb_proc_loop+0xa0>)
    406e:	681b      	ldr	r3, [r3, #0]
    4070:	2b00      	cmp	r3, #0
    4072:	d11f      	bne.n	40b4 <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    4074:	4c19      	ldr	r4, [pc, #100]	; (40dc <usb_proc_loop+0x98>)
    4076:	2301      	movs	r3, #1
    4078:	22ff      	movs	r2, #255	; 0xff
    407a:	2100      	movs	r1, #0
    407c:	0020      	movs	r0, r4
    407e:	4d1a      	ldr	r5, [pc, #104]	; (40e8 <usb_proc_loop+0xa4>)
    4080:	47a8      	blx	r5
		usb_interrupt = false;
    4082:	2300      	movs	r3, #0
    4084:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    4086:	7863      	ldrb	r3, [r4, #1]
    4088:	2b00      	cmp	r3, #0
    408a:	d125      	bne.n	40d8 <usb_proc_loop+0x94>
		usb_handle_function();
    408c:	4b17      	ldr	r3, [pc, #92]	; (40ec <usb_proc_loop+0xa8>)
    408e:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    4090:	4b12      	ldr	r3, [pc, #72]	; (40dc <usb_proc_loop+0x98>)
    4092:	789b      	ldrb	r3, [r3, #2]
    4094:	2b00      	cmp	r3, #0
    4096:	d0e5      	beq.n	4064 <usb_proc_loop+0x20>
    4098:	4b15      	ldr	r3, [pc, #84]	; (40f0 <usb_proc_loop+0xac>)
    409a:	781b      	ldrb	r3, [r3, #0]
    409c:	2b00      	cmp	r3, #0
    409e:	d1e1      	bne.n	4064 <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    40a0:	4b0e      	ldr	r3, [pc, #56]	; (40dc <usb_proc_loop+0x98>)
    40a2:	685a      	ldr	r2, [r3, #4]
    40a4:	689b      	ldr	r3, [r3, #8]
    40a6:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    40a8:	429a      	cmp	r2, r3
    40aa:	d1d3      	bne.n	4054 <usb_proc_loop+0x10>
    40ac:	4b0b      	ldr	r3, [pc, #44]	; (40dc <usb_proc_loop+0x98>)
    40ae:	2200      	movs	r2, #0
    40b0:	709a      	strb	r2, [r3, #2]
    40b2:	e7d7      	b.n	4064 <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    40b4:	4b0b      	ldr	r3, [pc, #44]	; (40e4 <usb_proc_loop+0xa0>)
    40b6:	6819      	ldr	r1, [r3, #0]
    40b8:	4c08      	ldr	r4, [pc, #32]	; (40dc <usb_proc_loop+0x98>)
    40ba:	6920      	ldr	r0, [r4, #16]
    40bc:	6963      	ldr	r3, [r4, #20]
    40be:	18c0      	adds	r0, r0, r3
    40c0:	4b0c      	ldr	r3, [pc, #48]	; (40f4 <usb_proc_loop+0xb0>)
    40c2:	4798      	blx	r3
    40c4:	6963      	ldr	r3, [r4, #20]
    40c6:	18c0      	adds	r0, r0, r3
    40c8:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    40ca:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    40cc:	4298      	cmp	r0, r3
    40ce:	d1d1      	bne.n	4074 <usb_proc_loop+0x30>
    40d0:	4b02      	ldr	r3, [pc, #8]	; (40dc <usb_proc_loop+0x98>)
    40d2:	2200      	movs	r2, #0
    40d4:	70da      	strb	r2, [r3, #3]
    40d6:	e7cd      	b.n	4074 <usb_proc_loop+0x30>
		}
	}
}
    40d8:	bd70      	pop	{r4, r5, r6, pc}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	200006a0 	.word	0x200006a0
    40e0:	00002c7d 	.word	0x00002c7d
    40e4:	20000550 	.word	0x20000550
    40e8:	00003375 	.word	0x00003375
    40ec:	00002ae9 	.word	0x00002ae9
    40f0:	2000054c 	.word	0x2000054c
    40f4:	00002cb9 	.word	0x00002cb9

000040f8 <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    40f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40fa:	46ce      	mov	lr, r9
    40fc:	4647      	mov	r7, r8
    40fe:	b580      	push	{r7, lr}
    4100:	0006      	movs	r6, r0
    4102:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4104:	4f15      	ldr	r7, [pc, #84]	; (415c <rtos_usb_init+0x64>)
    4106:	2580      	movs	r5, #128	; 0x80
    4108:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    410a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    410e:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    4112:	22c0      	movs	r2, #192	; 0xc0
    4114:	0492      	lsls	r2, r2, #18
    4116:	2106      	movs	r1, #6
    4118:	2000      	movs	r0, #0
    411a:	4b11      	ldr	r3, [pc, #68]	; (4160 <rtos_usb_init+0x68>)
    411c:	4798      	blx	r3
	usb_init();
    411e:	4b11      	ldr	r3, [pc, #68]	; (4164 <rtos_usb_init+0x6c>)
    4120:	4798      	blx	r3
	usb_attach();
    4122:	4b11      	ldr	r3, [pc, #68]	; (4168 <rtos_usb_init+0x70>)
    4124:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    4126:	4911      	ldr	r1, [pc, #68]	; (416c <rtos_usb_init+0x74>)
    4128:	4c11      	ldr	r4, [pc, #68]	; (4170 <rtos_usb_init+0x78>)
    412a:	231c      	movs	r3, #28
    412c:	4699      	mov	r9, r3
    412e:	44a1      	add	r9, r4
    4130:	4643      	mov	r3, r8
    4132:	0032      	movs	r2, r6
    4134:	4648      	mov	r0, r9
    4136:	4e0f      	ldr	r6, [pc, #60]	; (4174 <rtos_usb_init+0x7c>)
    4138:	47b0      	blx	r6
	dispatch_process(&usbproc);
    413a:	4648      	mov	r0, r9
    413c:	4b0e      	ldr	r3, [pc, #56]	; (4178 <rtos_usb_init+0x80>)
    413e:	4798      	blx	r3
	wait_until_started(&usbproc);
    4140:	2201      	movs	r2, #1
    4142:	0020      	movs	r0, r4
    4144:	3034      	adds	r0, #52	; 0x34
    4146:	2301      	movs	r3, #1
    4148:	4252      	negs	r2, r2
    414a:	2100      	movs	r1, #0
    414c:	4c0b      	ldr	r4, [pc, #44]	; (417c <rtos_usb_init+0x84>)
    414e:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4150:	603d      	str	r5, [r7, #0]
}
    4152:	bcc0      	pop	{r6, r7}
    4154:	46b9      	mov	r9, r7
    4156:	46b0      	mov	r8, r6
    4158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    415a:	46c0      	nop			; (mov r8, r8)
    415c:	e000e100 	.word	0xe000e100
    4160:	00001d21 	.word	0x00001d21
    4164:	0000272d 	.word	0x0000272d
    4168:	00002a8d 	.word	0x00002a8d
    416c:	00004045 	.word	0x00004045
    4170:	200006a0 	.word	0x200006a0
    4174:	00003009 	.word	0x00003009
    4178:	000030f1 	.word	0x000030f1
    417c:	00003375 	.word	0x00003375

00004180 <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4180:	2380      	movs	r3, #128	; 0x80
    4182:	4a05      	ldr	r2, [pc, #20]	; (4198 <USB_Handler+0x18>)
    4184:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    4186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    418a:	f3bf 8f6f 	isb	sy

void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);
	
	usb_interrupt = true;
    418e:	4b03      	ldr	r3, [pc, #12]	; (419c <USB_Handler+0x1c>)
    4190:	2201      	movs	r2, #1
    4192:	701a      	strb	r2, [r3, #0]
}
    4194:	4770      	bx	lr
    4196:	46c0      	nop			; (mov r8, r8)
    4198:	e000e100 	.word	0xe000e100
    419c:	200006a0 	.word	0x200006a0

000041a0 <rtos_usb_start_send_buffer>:
	usb_quit = true;
	join_process(&usbproc);
}


void rtos_usb_start_send_buffer(uint8_t* buffer, int count) {
    41a0:	b570      	push	{r4, r5, r6, lr}
    41a2:	0005      	movs	r5, r0
    41a4:	000e      	movs	r6, r1
	// if send operation is currently in progress wait until it finishes
	if (usb_send_status) wait_until_false(&usb_send_status);
    41a6:	4b0d      	ldr	r3, [pc, #52]	; (41dc <rtos_usb_start_send_buffer+0x3c>)
    41a8:	789b      	ldrb	r3, [r3, #2]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d10e      	bne.n	41cc <rtos_usb_start_send_buffer+0x2c>
	usb_send_buffer = buffer;
    41ae:	4c0b      	ldr	r4, [pc, #44]	; (41dc <rtos_usb_start_send_buffer+0x3c>)
    41b0:	60e5      	str	r5, [r4, #12]
	usb_send_buffer_count = count;
    41b2:	6066      	str	r6, [r4, #4]
	usb_send_bytes_sent = 0;
    41b4:	2300      	movs	r3, #0
    41b6:	60a3      	str	r3, [r4, #8]
	usb_send_status = true;
    41b8:	3301      	adds	r3, #1
    41ba:	70a3      	strb	r3, [r4, #2]
	// start send
	usb_send_bytes_sent += usb_serial_send_buffer(buffer, count);
    41bc:	0031      	movs	r1, r6
    41be:	0028      	movs	r0, r5
    41c0:	4b07      	ldr	r3, [pc, #28]	; (41e0 <rtos_usb_start_send_buffer+0x40>)
    41c2:	4798      	blx	r3
    41c4:	68a3      	ldr	r3, [r4, #8]
    41c6:	181b      	adds	r3, r3, r0
    41c8:	60a3      	str	r3, [r4, #8]
}
    41ca:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_send_status) wait_until_false(&usb_send_status);
    41cc:	4805      	ldr	r0, [pc, #20]	; (41e4 <rtos_usb_start_send_buffer+0x44>)
    41ce:	2300      	movs	r3, #0
    41d0:	22ff      	movs	r2, #255	; 0xff
    41d2:	2100      	movs	r1, #0
    41d4:	4c04      	ldr	r4, [pc, #16]	; (41e8 <rtos_usb_start_send_buffer+0x48>)
    41d6:	47a0      	blx	r4
    41d8:	e7e9      	b.n	41ae <rtos_usb_start_send_buffer+0xe>
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	200006a0 	.word	0x200006a0
    41e0:	00002c7d 	.word	0x00002c7d
    41e4:	200006a2 	.word	0x200006a2
    41e8:	00003375 	.word	0x00003375

000041ec <rtos_usb_wait_until_send_complete>:

int rtos_usb_wait_until_send_complete() {
    41ec:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_send_status);
    41ee:	4c04      	ldr	r4, [pc, #16]	; (4200 <rtos_usb_wait_until_send_complete+0x14>)
    41f0:	1ca0      	adds	r0, r4, #2
    41f2:	2300      	movs	r3, #0
    41f4:	22ff      	movs	r2, #255	; 0xff
    41f6:	2100      	movs	r1, #0
    41f8:	4d02      	ldr	r5, [pc, #8]	; (4204 <rtos_usb_wait_until_send_complete+0x18>)
    41fa:	47a8      	blx	r5
	return usb_send_bytes_sent;
    41fc:	68a0      	ldr	r0, [r4, #8]
}
    41fe:	bd70      	pop	{r4, r5, r6, pc}
    4200:	200006a0 	.word	0x200006a0
    4204:	00003375 	.word	0x00003375

00004208 <rtos_usb_start_read_buffer>:


void rtos_usb_start_read_buffer(uint8_t* buffer, int count) {
    4208:	b570      	push	{r4, r5, r6, lr}
    420a:	0005      	movs	r5, r0
    420c:	000c      	movs	r4, r1
	// if read operation is currently in progress wait until it finishes
	if (usb_read_status) wait_until_false(&usb_read_status);
    420e:	4b09      	ldr	r3, [pc, #36]	; (4234 <rtos_usb_start_read_buffer+0x2c>)
    4210:	78db      	ldrb	r3, [r3, #3]
    4212:	2b00      	cmp	r3, #0
    4214:	d107      	bne.n	4226 <rtos_usb_start_read_buffer+0x1e>
	usb_read_buffer = buffer;
    4216:	4b07      	ldr	r3, [pc, #28]	; (4234 <rtos_usb_start_read_buffer+0x2c>)
    4218:	611d      	str	r5, [r3, #16]
	usb_read_buffer_count = count;
    421a:	619c      	str	r4, [r3, #24]
	usb_read_bytes_read = 0;
    421c:	2200      	movs	r2, #0
    421e:	615a      	str	r2, [r3, #20]
	usb_read_status = true;
    4220:	3201      	adds	r2, #1
    4222:	70da      	strb	r2, [r3, #3]
}
    4224:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_read_status) wait_until_false(&usb_read_status);
    4226:	4804      	ldr	r0, [pc, #16]	; (4238 <rtos_usb_start_read_buffer+0x30>)
    4228:	2300      	movs	r3, #0
    422a:	22ff      	movs	r2, #255	; 0xff
    422c:	2100      	movs	r1, #0
    422e:	4e03      	ldr	r6, [pc, #12]	; (423c <rtos_usb_start_read_buffer+0x34>)
    4230:	47b0      	blx	r6
    4232:	e7f0      	b.n	4216 <rtos_usb_start_read_buffer+0xe>
    4234:	200006a0 	.word	0x200006a0
    4238:	200006a3 	.word	0x200006a3
    423c:	00003375 	.word	0x00003375

00004240 <rtos_usb_wait_until_read_complete>:

int rtos_usb_wait_until_read_complete() {
    4240:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_read_status);
    4242:	4c04      	ldr	r4, [pc, #16]	; (4254 <rtos_usb_wait_until_read_complete+0x14>)
    4244:	1ce0      	adds	r0, r4, #3
    4246:	2300      	movs	r3, #0
    4248:	22ff      	movs	r2, #255	; 0xff
    424a:	2100      	movs	r1, #0
    424c:	4d02      	ldr	r5, [pc, #8]	; (4258 <rtos_usb_wait_until_read_complete+0x18>)
    424e:	47a8      	blx	r5
	return usb_read_bytes_read;
    4250:	6960      	ldr	r0, [r4, #20]
}
    4252:	bd70      	pop	{r4, r5, r6, pc}
    4254:	200006a0 	.word	0x200006a0
    4258:	00003375 	.word	0x00003375

0000425c <CRC8>:
#include "gnclink.h"

const uint8_t CRC8_LUT_L[] = { 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D };
const uint8_t CRC8_LUT_H[] = { 0x00, 0x70, 0xE0, 0x90, 0xC7, 0xB7, 0x27, 0x57, 0x89, 0xF9, 0x69, 0x19, 0x4E, 0x3E, 0xAE, 0xDE };

uint8_t CRC8(uint8_t* data, int length) {
    425c:	b570      	push	{r4, r5, r6, lr}
    425e:	0006      	movs	r6, r0
	uint8_t crc = 0;
	for (int index = 0; index < length; ++index) {
    4260:	2400      	movs	r4, #0
	uint8_t crc = 0;
    4262:	2000      	movs	r0, #0
	for (int index = 0; index < length; ++index) {
    4264:	e00a      	b.n	427c <CRC8+0x20>
		crc ^= data[index];
    4266:	5d33      	ldrb	r3, [r6, r4]
    4268:	4043      	eors	r3, r0
		crc = CRC8_LUT_L[crc & 0xF] ^ CRC8_LUT_H[crc >> 4];
    426a:	250f      	movs	r5, #15
    426c:	401d      	ands	r5, r3
    426e:	4a05      	ldr	r2, [pc, #20]	; (4284 <CRC8+0x28>)
    4270:	5d50      	ldrb	r0, [r2, r5]
    4272:	091b      	lsrs	r3, r3, #4
    4274:	18d2      	adds	r2, r2, r3
    4276:	7c13      	ldrb	r3, [r2, #16]
    4278:	4058      	eors	r0, r3
	for (int index = 0; index < length; ++index) {
    427a:	3401      	adds	r4, #1
    427c:	428c      	cmp	r4, r1
    427e:	dbf2      	blt.n	4266 <CRC8+0xa>
	}
	return crc;
}
    4280:	bd70      	pop	{r4, r5, r6, pc}
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	000059c4 	.word	0x000059c4

00004288 <GNClink_Get_Packet_Payload_Pointer>:

uint8_t* GNClink_Get_Packet_Payload_Pointer(uint8_t* packetPointer) {
	return packetPointer + GNCLINK_PACKET_HEADER_LENGTH;
    4288:	3004      	adds	r0, #4
}
    428a:	4770      	bx	lr

0000428c <GNClink_Construct_Packet>:

bool GNClink_Construct_Packet(uint8_t* packetPointer, GNClink_PacketType packetType, GNClink_PacketFlags packetFlags, int payloadSize) {
    428c:	b570      	push	{r4, r5, r6, lr}
    428e:	000c      	movs	r4, r1
	// validate inputs
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    4290:	2b3b      	cmp	r3, #59	; 0x3b
    4292:	d80c      	bhi.n	42ae <GNClink_Construct_Packet+0x22>

	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;
	// get pointer to footer
	GNClink_PacketFooter* footer = (GNClink_PacketFooter*)(packetPointer + GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    4294:	1d19      	adds	r1, r3, #4
    4296:	1845      	adds	r5, r0, r1

	// populate header
	header->magic = GNCLINK_PACKET_MAGIC;
    4298:	26ac      	movs	r6, #172	; 0xac
    429a:	7006      	strb	r6, [r0, #0]
	header->packetType = packetType;
    429c:	7044      	strb	r4, [r0, #1]
	header->packetFlags = packetFlags;
    429e:	7082      	strb	r2, [r0, #2]
	header->packetLength = payloadSize + GNCLINK_PACKET_HEADER_LENGTH + GNCLINK_PACKET_FOOTER_LENGTH;
    42a0:	3305      	adds	r3, #5
    42a2:	70c3      	strb	r3, [r0, #3]

	// populate footer
	footer->crc = CRC8(packetPointer, GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    42a4:	4b03      	ldr	r3, [pc, #12]	; (42b4 <GNClink_Construct_Packet+0x28>)
    42a6:	4798      	blx	r3
    42a8:	7028      	strb	r0, [r5, #0]

	return true;
    42aa:	2001      	movs	r0, #1
}
    42ac:	bd70      	pop	{r4, r5, r6, pc}
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    42ae:	2000      	movs	r0, #0
    42b0:	e7fc      	b.n	42ac <GNClink_Construct_Packet+0x20>
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	0000425d 	.word	0x0000425d

000042b8 <GNClink_Check_Packet>:

bool GNClink_Check_Packet(uint8_t* packetPointer) {
    42b8:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	// check magic
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    42ba:	7803      	ldrb	r3, [r0, #0]
    42bc:	2bac      	cmp	r3, #172	; 0xac
    42be:	d10a      	bne.n	42d6 <GNClink_Check_Packet+0x1e>

	// check packet length
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    42c0:	78c1      	ldrb	r1, [r0, #3]
    42c2:	1f4b      	subs	r3, r1, #5
    42c4:	b2db      	uxtb	r3, r3
    42c6:	2b3b      	cmp	r3, #59	; 0x3b
    42c8:	d807      	bhi.n	42da <GNClink_Check_Packet+0x22>

	// check CRC
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    42ca:	4b06      	ldr	r3, [pc, #24]	; (42e4 <GNClink_Check_Packet+0x2c>)
    42cc:	4798      	blx	r3
    42ce:	2800      	cmp	r0, #0
    42d0:	d105      	bne.n	42de <GNClink_Check_Packet+0x26>

	// all checks passed, return true
	return true;
    42d2:	3001      	adds	r0, #1
    42d4:	e000      	b.n	42d8 <GNClink_Check_Packet+0x20>
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    42d6:	2000      	movs	r0, #0
}
    42d8:	bd10      	pop	{r4, pc}
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    42da:	2000      	movs	r0, #0
    42dc:	e7fc      	b.n	42d8 <GNClink_Check_Packet+0x20>
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    42de:	2000      	movs	r0, #0
    42e0:	e7fa      	b.n	42d8 <GNClink_Check_Packet+0x20>
    42e2:	46c0      	nop			; (mov r8, r8)
    42e4:	0000425d 	.word	0x0000425d

000042e8 <GNClink_Get_Packet_Type>:

GNClink_PacketType GNClink_Get_Packet_Type(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetType;
    42e8:	7840      	ldrb	r0, [r0, #1]
}
    42ea:	4770      	bx	lr

000042ec <GNClink_Get_Packet_Flags>:

GNClink_PacketFlags GNClink_Get_Packet_Flags(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetFlags;
    42ec:	7880      	ldrb	r0, [r0, #2]
}
    42ee:	4770      	bx	lr

000042f0 <GNClink_Get_Frame_Payload_Pointer>:


uint8_t* GNClink_Get_Frame_Payload_Pointer(uint8_t* framePointer) {
	return framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    42f0:	3003      	adds	r0, #3
}
    42f2:	4770      	bx	lr

000042f4 <GNClink_Get_Frame>:

bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    42f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42f6:	000e      	movs	r6, r1
	// get pointer to packet header
	GNClink_PacketHeader* packetHeader = (GNClink_PacketHeader*)packetPointer;

	// check packet length
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    42f8:	78c1      	ldrb	r1, [r0, #3]
    42fa:	1f4c      	subs	r4, r1, #5
    42fc:	b2e4      	uxtb	r4, r4
    42fe:	2c3b      	cmp	r4, #59	; 0x3b
    4300:	d832      	bhi.n	4368 <GNClink_Get_Frame+0x74>

	// calculate number of frames for packet
	int frameCount = (packetHeader->packetLength + GNCLINK_FRAME_PAYLOAD_LENGTH - 1) / GNCLINK_FRAME_PAYLOAD_LENGTH;
    4302:	310f      	adds	r1, #15
    4304:	1109      	asrs	r1, r1, #4
	*moreFrames = frameIndex < frameCount - 1;
    4306:	1e4d      	subs	r5, r1, #1
    4308:	2401      	movs	r4, #1
    430a:	429d      	cmp	r5, r3
    430c:	dc00      	bgt.n	4310 <GNClink_Get_Frame+0x1c>
    430e:	2400      	movs	r4, #0
    4310:	9d06      	ldr	r5, [sp, #24]
    4312:	702c      	strb	r4, [r5, #0]

	// check index is valid
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    4314:	2b00      	cmp	r3, #0
    4316:	db29      	blt.n	436c <GNClink_Get_Frame+0x78>
    4318:	4299      	cmp	r1, r3
    431a:	dd29      	ble.n	4370 <GNClink_Get_Frame+0x7c>
	// get pointer to frame header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    431c:	1cf7      	adds	r7, r6, #3

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    431e:	24ae      	movs	r4, #174	; 0xae
    4320:	7034      	strb	r4, [r6, #0]
	header->index = frameIndex;
    4322:	7073      	strb	r3, [r6, #1]
	header->flags = flags;
    4324:	70b2      	strb	r2, [r6, #2]
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    4326:	1c5c      	adds	r4, r3, #1
    4328:	428c      	cmp	r4, r1
    432a:	d00c      	beq.n	4346 <GNClink_Get_Frame+0x52>
bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    432c:	2200      	movs	r2, #0

	// populate payload
	int i = 0;
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    432e:	2a0f      	cmp	r2, #15
    4330:	dc11      	bgt.n	4356 <GNClink_Get_Frame+0x62>
    4332:	78c5      	ldrb	r5, [r0, #3]
    4334:	011c      	lsls	r4, r3, #4
    4336:	1b2d      	subs	r5, r5, r4
    4338:	4295      	cmp	r5, r2
    433a:	dd0c      	ble.n	4356 <GNClink_Get_Frame+0x62>
		payload[i] = packetPointer[i + GNCLINK_FRAME_PAYLOAD_LENGTH * frameIndex];
    433c:	18a4      	adds	r4, r4, r2
    433e:	5d01      	ldrb	r1, [r0, r4]
    4340:	54b9      	strb	r1, [r7, r2]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4342:	3201      	adds	r2, #1
    4344:	e7f3      	b.n	432e <GNClink_Get_Frame+0x3a>
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    4346:	2102      	movs	r1, #2
    4348:	430a      	orrs	r2, r1
    434a:	70b2      	strb	r2, [r6, #2]
    434c:	e7ee      	b.n	432c <GNClink_Get_Frame+0x38>
	}
	// populate the rest with zeros
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
		payload[i] = 0;
    434e:	18bb      	adds	r3, r7, r2
    4350:	2100      	movs	r1, #0
    4352:	7019      	strb	r1, [r3, #0]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4354:	3201      	adds	r2, #1
    4356:	2a0f      	cmp	r2, #15
    4358:	ddf9      	ble.n	434e <GNClink_Get_Frame+0x5a>
	}

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    435a:	2113      	movs	r1, #19
    435c:	0030      	movs	r0, r6
    435e:	4b05      	ldr	r3, [pc, #20]	; (4374 <GNClink_Get_Frame+0x80>)
    4360:	4798      	blx	r3
    4362:	74f0      	strb	r0, [r6, #19]

	return true;
    4364:	2001      	movs	r0, #1
    4366:	e000      	b.n	436a <GNClink_Get_Frame+0x76>
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4368:	2000      	movs	r0, #0
}
    436a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    436c:	2000      	movs	r0, #0
    436e:	e7fc      	b.n	436a <GNClink_Get_Frame+0x76>
    4370:	2000      	movs	r0, #0
    4372:	e7fa      	b.n	436a <GNClink_Get_Frame+0x76>
    4374:	0000425d 	.word	0x0000425d

00004378 <GNClink_Check_Frame>:

bool GNClink_Check_Frame(uint8_t* framePointer) {
    4378:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	// check magic
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    437a:	7803      	ldrb	r3, [r0, #0]
    437c:	2bae      	cmp	r3, #174	; 0xae
    437e:	d109      	bne.n	4394 <GNClink_Check_Frame+0x1c>

	// check index
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4380:	7843      	ldrb	r3, [r0, #1]
    4382:	2b03      	cmp	r3, #3
    4384:	d808      	bhi.n	4398 <GNClink_Check_Frame+0x20>

	// check CRC
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4386:	2114      	movs	r1, #20
    4388:	4b05      	ldr	r3, [pc, #20]	; (43a0 <GNClink_Check_Frame+0x28>)
    438a:	4798      	blx	r3
    438c:	2800      	cmp	r0, #0
    438e:	d105      	bne.n	439c <GNClink_Check_Frame+0x24>

	// all checks passed, return true
	return true;
    4390:	3001      	adds	r0, #1
    4392:	e000      	b.n	4396 <GNClink_Check_Frame+0x1e>
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4394:	2000      	movs	r0, #0
}
    4396:	bd10      	pop	{r4, pc}
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4398:	2000      	movs	r0, #0
    439a:	e7fc      	b.n	4396 <GNClink_Check_Frame+0x1e>
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    439c:	2000      	movs	r0, #0
    439e:	e7fa      	b.n	4396 <GNClink_Check_Frame+0x1e>
    43a0:	0000425d 	.word	0x0000425d

000043a4 <GNClink_Frame_RequestResend>:

bool GNClink_Frame_RequestResend(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (header->flags & GNClink_FrameFlags_RequestResend) != 0;
    43a4:	7883      	ldrb	r3, [r0, #2]
    43a6:	089b      	lsrs	r3, r3, #2
    43a8:	2001      	movs	r0, #1
    43aa:	4018      	ands	r0, r3
}
    43ac:	4770      	bx	lr

000043ae <GNClink_Get_Frame_Index>:

int GNClink_Get_Frame_Index(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (int)header->index;
    43ae:	7840      	ldrb	r0, [r0, #1]
}
    43b0:	4770      	bx	lr
	...

000043b4 <GNClink_Construct_RequestResendFrame>:

void GNClink_Construct_RequestResendFrame(uint8_t* framePointer) {
    43b4:	b510      	push	{r4, lr}
    43b6:	0004      	movs	r4, r0
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    43b8:	23ae      	movs	r3, #174	; 0xae
    43ba:	7003      	strb	r3, [r0, #0]
	header->index = 0;
    43bc:	2300      	movs	r3, #0
    43be:	7043      	strb	r3, [r0, #1]
	header->flags = GNClink_FrameFlags_RequestResend;
    43c0:	3304      	adds	r3, #4
    43c2:	7083      	strb	r3, [r0, #2]

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    43c4:	2113      	movs	r1, #19
    43c6:	4b02      	ldr	r3, [pc, #8]	; (43d0 <GNClink_Construct_RequestResendFrame+0x1c>)
    43c8:	4798      	blx	r3
    43ca:	74e0      	strb	r0, [r4, #19]
}
    43cc:	bd10      	pop	{r4, pc}
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	0000425d 	.word	0x0000425d

000043d4 <GNClink_Reconstruct_Packet_From_Frames>:


bool GNClink_Reconstruct_Packet_From_Frames(uint8_t* framePointer, uint8_t* packetPointer, bool* moreFrames) {
    43d4:	b530      	push	{r4, r5, lr}
	// get pointer to frame footer
	//GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    43d6:	2400      	movs	r4, #0
    43d8:	2c0f      	cmp	r4, #15
    43da:	dc09      	bgt.n	43f0 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
    43dc:	7843      	ldrb	r3, [r0, #1]
    43de:	011b      	lsls	r3, r3, #4
    43e0:	191b      	adds	r3, r3, r4
    43e2:	2b3f      	cmp	r3, #63	; 0x3f
    43e4:	dc04      	bgt.n	43f0 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
		packetPointer[i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH] = payload[i];
    43e6:	1905      	adds	r5, r0, r4
    43e8:	78ed      	ldrb	r5, [r5, #3]
    43ea:	54cd      	strb	r5, [r1, r3]
	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    43ec:	3401      	adds	r4, #1
    43ee:	e7f3      	b.n	43d8 <GNClink_Reconstruct_Packet_From_Frames+0x4>
	}

	*moreFrames = (header->flags & GNClink_FrameFlags_TransactionEnd) == 0;
    43f0:	7883      	ldrb	r3, [r0, #2]
    43f2:	085b      	lsrs	r3, r3, #1
    43f4:	2101      	movs	r1, #1
    43f6:	404b      	eors	r3, r1
    43f8:	2101      	movs	r1, #1
    43fa:	400b      	ands	r3, r1
    43fc:	7013      	strb	r3, [r2, #0]

	return true;
    43fe:	2001      	movs	r0, #1
    4400:	bd30      	pop	{r4, r5, pc}
	...

00004404 <fp_multiply>:
#include <fixedpoint_defs.h>

fp32_t fp_multiply(fp32_t a, fp32_t b) {
    4404:	b510      	push	{r4, lr}
    4406:	000a      	movs	r2, r1
    fp_long c = (fp_long)a * b;
    4408:	17c1      	asrs	r1, r0, #31
    440a:	17d3      	asrs	r3, r2, #31
    440c:	4c02      	ldr	r4, [pc, #8]	; (4418 <fp_multiply+0x14>)
    440e:	47a0      	blx	r4
    return c >> 16;
    4410:	0409      	lsls	r1, r1, #16
    4412:	0c00      	lsrs	r0, r0, #16
    4414:	4308      	orrs	r0, r1
    4416:	bd10      	pop	{r4, pc}
    4418:	00004491 	.word	0x00004491

0000441c <__aeabi_cfrcmple>:
    441c:	4684      	mov	ip, r0
    441e:	0008      	movs	r0, r1
    4420:	4661      	mov	r1, ip
    4422:	e7ff      	b.n	4424 <__aeabi_cfcmpeq>

00004424 <__aeabi_cfcmpeq>:
    4424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4426:	f000 fb93 	bl	4b50 <__lesf2>
    442a:	2800      	cmp	r0, #0
    442c:	d401      	bmi.n	4432 <__aeabi_cfcmpeq+0xe>
    442e:	2100      	movs	r1, #0
    4430:	42c8      	cmn	r0, r1
    4432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004434 <__aeabi_fcmpeq>:
    4434:	b510      	push	{r4, lr}
    4436:	f000 fb13 	bl	4a60 <__eqsf2>
    443a:	4240      	negs	r0, r0
    443c:	3001      	adds	r0, #1
    443e:	bd10      	pop	{r4, pc}

00004440 <__aeabi_fcmplt>:
    4440:	b510      	push	{r4, lr}
    4442:	f000 fb85 	bl	4b50 <__lesf2>
    4446:	2800      	cmp	r0, #0
    4448:	db01      	blt.n	444e <__aeabi_fcmplt+0xe>
    444a:	2000      	movs	r0, #0
    444c:	bd10      	pop	{r4, pc}
    444e:	2001      	movs	r0, #1
    4450:	bd10      	pop	{r4, pc}
    4452:	46c0      	nop			; (mov r8, r8)

00004454 <__aeabi_fcmple>:
    4454:	b510      	push	{r4, lr}
    4456:	f000 fb7b 	bl	4b50 <__lesf2>
    445a:	2800      	cmp	r0, #0
    445c:	dd01      	ble.n	4462 <__aeabi_fcmple+0xe>
    445e:	2000      	movs	r0, #0
    4460:	bd10      	pop	{r4, pc}
    4462:	2001      	movs	r0, #1
    4464:	bd10      	pop	{r4, pc}
    4466:	46c0      	nop			; (mov r8, r8)

00004468 <__aeabi_fcmpgt>:
    4468:	b510      	push	{r4, lr}
    446a:	f000 fb21 	bl	4ab0 <__gesf2>
    446e:	2800      	cmp	r0, #0
    4470:	dc01      	bgt.n	4476 <__aeabi_fcmpgt+0xe>
    4472:	2000      	movs	r0, #0
    4474:	bd10      	pop	{r4, pc}
    4476:	2001      	movs	r0, #1
    4478:	bd10      	pop	{r4, pc}
    447a:	46c0      	nop			; (mov r8, r8)

0000447c <__aeabi_fcmpge>:
    447c:	b510      	push	{r4, lr}
    447e:	f000 fb17 	bl	4ab0 <__gesf2>
    4482:	2800      	cmp	r0, #0
    4484:	da01      	bge.n	448a <__aeabi_fcmpge+0xe>
    4486:	2000      	movs	r0, #0
    4488:	bd10      	pop	{r4, pc}
    448a:	2001      	movs	r0, #1
    448c:	bd10      	pop	{r4, pc}
    448e:	46c0      	nop			; (mov r8, r8)

00004490 <__aeabi_lmul>:
    4490:	b5f0      	push	{r4, r5, r6, r7, lr}
    4492:	46ce      	mov	lr, r9
    4494:	4699      	mov	r9, r3
    4496:	0c03      	lsrs	r3, r0, #16
    4498:	469c      	mov	ip, r3
    449a:	0413      	lsls	r3, r2, #16
    449c:	4647      	mov	r7, r8
    449e:	0c1b      	lsrs	r3, r3, #16
    44a0:	001d      	movs	r5, r3
    44a2:	000e      	movs	r6, r1
    44a4:	4661      	mov	r1, ip
    44a6:	0404      	lsls	r4, r0, #16
    44a8:	0c24      	lsrs	r4, r4, #16
    44aa:	b580      	push	{r7, lr}
    44ac:	0007      	movs	r7, r0
    44ae:	0c10      	lsrs	r0, r2, #16
    44b0:	434b      	muls	r3, r1
    44b2:	4365      	muls	r5, r4
    44b4:	4341      	muls	r1, r0
    44b6:	4360      	muls	r0, r4
    44b8:	0c2c      	lsrs	r4, r5, #16
    44ba:	18c0      	adds	r0, r0, r3
    44bc:	1824      	adds	r4, r4, r0
    44be:	468c      	mov	ip, r1
    44c0:	42a3      	cmp	r3, r4
    44c2:	d903      	bls.n	44cc <__aeabi_lmul+0x3c>
    44c4:	2380      	movs	r3, #128	; 0x80
    44c6:	025b      	lsls	r3, r3, #9
    44c8:	4698      	mov	r8, r3
    44ca:	44c4      	add	ip, r8
    44cc:	4649      	mov	r1, r9
    44ce:	4379      	muls	r1, r7
    44d0:	4356      	muls	r6, r2
    44d2:	0c23      	lsrs	r3, r4, #16
    44d4:	042d      	lsls	r5, r5, #16
    44d6:	0c2d      	lsrs	r5, r5, #16
    44d8:	1989      	adds	r1, r1, r6
    44da:	4463      	add	r3, ip
    44dc:	0424      	lsls	r4, r4, #16
    44de:	1960      	adds	r0, r4, r5
    44e0:	18c9      	adds	r1, r1, r3
    44e2:	bcc0      	pop	{r6, r7}
    44e4:	46b9      	mov	r9, r7
    44e6:	46b0      	mov	r8, r6
    44e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44ea:	46c0      	nop			; (mov r8, r8)

000044ec <__aeabi_f2uiz>:
    44ec:	219e      	movs	r1, #158	; 0x9e
    44ee:	b510      	push	{r4, lr}
    44f0:	05c9      	lsls	r1, r1, #23
    44f2:	1c04      	adds	r4, r0, #0
    44f4:	f7ff ffc2 	bl	447c <__aeabi_fcmpge>
    44f8:	2800      	cmp	r0, #0
    44fa:	d103      	bne.n	4504 <__aeabi_f2uiz+0x18>
    44fc:	1c20      	adds	r0, r4, #0
    44fe:	f000 fe45 	bl	518c <__aeabi_f2iz>
    4502:	bd10      	pop	{r4, pc}
    4504:	219e      	movs	r1, #158	; 0x9e
    4506:	1c20      	adds	r0, r4, #0
    4508:	05c9      	lsls	r1, r1, #23
    450a:	f000 fcad 	bl	4e68 <__aeabi_fsub>
    450e:	f000 fe3d 	bl	518c <__aeabi_f2iz>
    4512:	2380      	movs	r3, #128	; 0x80
    4514:	061b      	lsls	r3, r3, #24
    4516:	469c      	mov	ip, r3
    4518:	4460      	add	r0, ip
    451a:	e7f2      	b.n	4502 <__aeabi_f2uiz+0x16>

0000451c <__aeabi_fadd>:
    451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    451e:	0243      	lsls	r3, r0, #9
    4520:	0045      	lsls	r5, r0, #1
    4522:	0fc4      	lsrs	r4, r0, #31
    4524:	0248      	lsls	r0, r1, #9
    4526:	0a42      	lsrs	r2, r0, #9
    4528:	4694      	mov	ip, r2
    452a:	004a      	lsls	r2, r1, #1
    452c:	0a5f      	lsrs	r7, r3, #9
    452e:	0e2d      	lsrs	r5, r5, #24
    4530:	099b      	lsrs	r3, r3, #6
    4532:	0e12      	lsrs	r2, r2, #24
    4534:	0fc9      	lsrs	r1, r1, #31
    4536:	0980      	lsrs	r0, r0, #6
    4538:	428c      	cmp	r4, r1
    453a:	d022      	beq.n	4582 <__aeabi_fadd+0x66>
    453c:	1aae      	subs	r6, r5, r2
    453e:	2e00      	cmp	r6, #0
    4540:	dd0d      	ble.n	455e <__aeabi_fadd+0x42>
    4542:	2a00      	cmp	r2, #0
    4544:	d12d      	bne.n	45a2 <__aeabi_fadd+0x86>
    4546:	2800      	cmp	r0, #0
    4548:	d100      	bne.n	454c <__aeabi_fadd+0x30>
    454a:	e083      	b.n	4654 <__aeabi_fadd+0x138>
    454c:	1e72      	subs	r2, r6, #1
    454e:	2e01      	cmp	r6, #1
    4550:	d100      	bne.n	4554 <__aeabi_fadd+0x38>
    4552:	e11b      	b.n	478c <__aeabi_fadd+0x270>
    4554:	2eff      	cmp	r6, #255	; 0xff
    4556:	d100      	bne.n	455a <__aeabi_fadd+0x3e>
    4558:	e0a2      	b.n	46a0 <__aeabi_fadd+0x184>
    455a:	0016      	movs	r6, r2
    455c:	e027      	b.n	45ae <__aeabi_fadd+0x92>
    455e:	2e00      	cmp	r6, #0
    4560:	d048      	beq.n	45f4 <__aeabi_fadd+0xd8>
    4562:	1b56      	subs	r6, r2, r5
    4564:	2d00      	cmp	r5, #0
    4566:	d000      	beq.n	456a <__aeabi_fadd+0x4e>
    4568:	e0c1      	b.n	46ee <__aeabi_fadd+0x1d2>
    456a:	2b00      	cmp	r3, #0
    456c:	d100      	bne.n	4570 <__aeabi_fadd+0x54>
    456e:	e0f7      	b.n	4760 <__aeabi_fadd+0x244>
    4570:	1e74      	subs	r4, r6, #1
    4572:	2e01      	cmp	r6, #1
    4574:	d100      	bne.n	4578 <__aeabi_fadd+0x5c>
    4576:	e12d      	b.n	47d4 <__aeabi_fadd+0x2b8>
    4578:	2eff      	cmp	r6, #255	; 0xff
    457a:	d100      	bne.n	457e <__aeabi_fadd+0x62>
    457c:	e08e      	b.n	469c <__aeabi_fadd+0x180>
    457e:	0026      	movs	r6, r4
    4580:	e0ba      	b.n	46f8 <__aeabi_fadd+0x1dc>
    4582:	1aa9      	subs	r1, r5, r2
    4584:	2900      	cmp	r1, #0
    4586:	dc00      	bgt.n	458a <__aeabi_fadd+0x6e>
    4588:	e08c      	b.n	46a4 <__aeabi_fadd+0x188>
    458a:	2a00      	cmp	r2, #0
    458c:	d046      	beq.n	461c <__aeabi_fadd+0x100>
    458e:	2dff      	cmp	r5, #255	; 0xff
    4590:	d100      	bne.n	4594 <__aeabi_fadd+0x78>
    4592:	e085      	b.n	46a0 <__aeabi_fadd+0x184>
    4594:	2280      	movs	r2, #128	; 0x80
    4596:	04d2      	lsls	r2, r2, #19
    4598:	4310      	orrs	r0, r2
    459a:	291b      	cmp	r1, #27
    459c:	dd49      	ble.n	4632 <__aeabi_fadd+0x116>
    459e:	3301      	adds	r3, #1
    45a0:	e016      	b.n	45d0 <__aeabi_fadd+0xb4>
    45a2:	2dff      	cmp	r5, #255	; 0xff
    45a4:	d100      	bne.n	45a8 <__aeabi_fadd+0x8c>
    45a6:	e07b      	b.n	46a0 <__aeabi_fadd+0x184>
    45a8:	2280      	movs	r2, #128	; 0x80
    45aa:	04d2      	lsls	r2, r2, #19
    45ac:	4310      	orrs	r0, r2
    45ae:	2201      	movs	r2, #1
    45b0:	2e1b      	cmp	r6, #27
    45b2:	dc07      	bgt.n	45c4 <__aeabi_fadd+0xa8>
    45b4:	2120      	movs	r1, #32
    45b6:	1b89      	subs	r1, r1, r6
    45b8:	0002      	movs	r2, r0
    45ba:	4088      	lsls	r0, r1
    45bc:	40f2      	lsrs	r2, r6
    45be:	1e41      	subs	r1, r0, #1
    45c0:	4188      	sbcs	r0, r1
    45c2:	4302      	orrs	r2, r0
    45c4:	1a9b      	subs	r3, r3, r2
    45c6:	015a      	lsls	r2, r3, #5
    45c8:	d451      	bmi.n	466e <__aeabi_fadd+0x152>
    45ca:	2207      	movs	r2, #7
    45cc:	401a      	ands	r2, r3
    45ce:	d042      	beq.n	4656 <__aeabi_fadd+0x13a>
    45d0:	220f      	movs	r2, #15
    45d2:	401a      	ands	r2, r3
    45d4:	2a04      	cmp	r2, #4
    45d6:	d000      	beq.n	45da <__aeabi_fadd+0xbe>
    45d8:	3304      	adds	r3, #4
    45da:	015a      	lsls	r2, r3, #5
    45dc:	d53b      	bpl.n	4656 <__aeabi_fadd+0x13a>
    45de:	1c68      	adds	r0, r5, #1
    45e0:	2dfe      	cmp	r5, #254	; 0xfe
    45e2:	d034      	beq.n	464e <__aeabi_fadd+0x132>
    45e4:	019b      	lsls	r3, r3, #6
    45e6:	0a5b      	lsrs	r3, r3, #9
    45e8:	b2c0      	uxtb	r0, r0
    45ea:	05c0      	lsls	r0, r0, #23
    45ec:	4318      	orrs	r0, r3
    45ee:	07e4      	lsls	r4, r4, #31
    45f0:	4320      	orrs	r0, r4
    45f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45f4:	26fe      	movs	r6, #254	; 0xfe
    45f6:	1c6a      	adds	r2, r5, #1
    45f8:	4216      	tst	r6, r2
    45fa:	d000      	beq.n	45fe <__aeabi_fadd+0xe2>
    45fc:	e08b      	b.n	4716 <__aeabi_fadd+0x1fa>
    45fe:	2d00      	cmp	r5, #0
    4600:	d000      	beq.n	4604 <__aeabi_fadd+0xe8>
    4602:	e0b1      	b.n	4768 <__aeabi_fadd+0x24c>
    4604:	2b00      	cmp	r3, #0
    4606:	d100      	bne.n	460a <__aeabi_fadd+0xee>
    4608:	e0df      	b.n	47ca <__aeabi_fadd+0x2ae>
    460a:	2800      	cmp	r0, #0
    460c:	d069      	beq.n	46e2 <__aeabi_fadd+0x1c6>
    460e:	1a1a      	subs	r2, r3, r0
    4610:	0156      	lsls	r6, r2, #5
    4612:	d400      	bmi.n	4616 <__aeabi_fadd+0xfa>
    4614:	e0fb      	b.n	480e <__aeabi_fadd+0x2f2>
    4616:	000c      	movs	r4, r1
    4618:	1ac3      	subs	r3, r0, r3
    461a:	e03c      	b.n	4696 <__aeabi_fadd+0x17a>
    461c:	2800      	cmp	r0, #0
    461e:	d100      	bne.n	4622 <__aeabi_fadd+0x106>
    4620:	e0b7      	b.n	4792 <__aeabi_fadd+0x276>
    4622:	1e4a      	subs	r2, r1, #1
    4624:	2901      	cmp	r1, #1
    4626:	d100      	bne.n	462a <__aeabi_fadd+0x10e>
    4628:	e0aa      	b.n	4780 <__aeabi_fadd+0x264>
    462a:	29ff      	cmp	r1, #255	; 0xff
    462c:	d038      	beq.n	46a0 <__aeabi_fadd+0x184>
    462e:	0011      	movs	r1, r2
    4630:	e7b3      	b.n	459a <__aeabi_fadd+0x7e>
    4632:	0002      	movs	r2, r0
    4634:	2620      	movs	r6, #32
    4636:	40ca      	lsrs	r2, r1
    4638:	1a71      	subs	r1, r6, r1
    463a:	4088      	lsls	r0, r1
    463c:	1e41      	subs	r1, r0, #1
    463e:	4188      	sbcs	r0, r1
    4640:	4310      	orrs	r0, r2
    4642:	181b      	adds	r3, r3, r0
    4644:	015a      	lsls	r2, r3, #5
    4646:	d5c0      	bpl.n	45ca <__aeabi_fadd+0xae>
    4648:	3501      	adds	r5, #1
    464a:	2dff      	cmp	r5, #255	; 0xff
    464c:	d16c      	bne.n	4728 <__aeabi_fadd+0x20c>
    464e:	20ff      	movs	r0, #255	; 0xff
    4650:	2300      	movs	r3, #0
    4652:	e7ca      	b.n	45ea <__aeabi_fadd+0xce>
    4654:	0035      	movs	r5, r6
    4656:	08db      	lsrs	r3, r3, #3
    4658:	2dff      	cmp	r5, #255	; 0xff
    465a:	d144      	bne.n	46e6 <__aeabi_fadd+0x1ca>
    465c:	2b00      	cmp	r3, #0
    465e:	d0f6      	beq.n	464e <__aeabi_fadd+0x132>
    4660:	2280      	movs	r2, #128	; 0x80
    4662:	03d2      	lsls	r2, r2, #15
    4664:	4313      	orrs	r3, r2
    4666:	025b      	lsls	r3, r3, #9
    4668:	20ff      	movs	r0, #255	; 0xff
    466a:	0a5b      	lsrs	r3, r3, #9
    466c:	e7bd      	b.n	45ea <__aeabi_fadd+0xce>
    466e:	019e      	lsls	r6, r3, #6
    4670:	09b6      	lsrs	r6, r6, #6
    4672:	0030      	movs	r0, r6
    4674:	f000 fe38 	bl	52e8 <__clzsi2>
    4678:	3805      	subs	r0, #5
    467a:	4086      	lsls	r6, r0
    467c:	4285      	cmp	r5, r0
    467e:	dc20      	bgt.n	46c2 <__aeabi_fadd+0x1a6>
    4680:	2220      	movs	r2, #32
    4682:	1b40      	subs	r0, r0, r5
    4684:	3001      	adds	r0, #1
    4686:	1a12      	subs	r2, r2, r0
    4688:	0033      	movs	r3, r6
    468a:	4096      	lsls	r6, r2
    468c:	40c3      	lsrs	r3, r0
    468e:	1e72      	subs	r2, r6, #1
    4690:	4196      	sbcs	r6, r2
    4692:	2500      	movs	r5, #0
    4694:	4333      	orrs	r3, r6
    4696:	075a      	lsls	r2, r3, #29
    4698:	d19a      	bne.n	45d0 <__aeabi_fadd+0xb4>
    469a:	e79e      	b.n	45da <__aeabi_fadd+0xbe>
    469c:	000c      	movs	r4, r1
    469e:	0003      	movs	r3, r0
    46a0:	08db      	lsrs	r3, r3, #3
    46a2:	e7db      	b.n	465c <__aeabi_fadd+0x140>
    46a4:	2900      	cmp	r1, #0
    46a6:	d010      	beq.n	46ca <__aeabi_fadd+0x1ae>
    46a8:	1b51      	subs	r1, r2, r5
    46aa:	2d00      	cmp	r5, #0
    46ac:	d143      	bne.n	4736 <__aeabi_fadd+0x21a>
    46ae:	2b00      	cmp	r3, #0
    46b0:	d100      	bne.n	46b4 <__aeabi_fadd+0x198>
    46b2:	e093      	b.n	47dc <__aeabi_fadd+0x2c0>
    46b4:	1e4d      	subs	r5, r1, #1
    46b6:	2901      	cmp	r1, #1
    46b8:	d062      	beq.n	4780 <__aeabi_fadd+0x264>
    46ba:	29ff      	cmp	r1, #255	; 0xff
    46bc:	d0ef      	beq.n	469e <__aeabi_fadd+0x182>
    46be:	0029      	movs	r1, r5
    46c0:	e03e      	b.n	4740 <__aeabi_fadd+0x224>
    46c2:	4b55      	ldr	r3, [pc, #340]	; (4818 <__aeabi_fadd+0x2fc>)
    46c4:	1a2d      	subs	r5, r5, r0
    46c6:	4033      	ands	r3, r6
    46c8:	e7e5      	b.n	4696 <__aeabi_fadd+0x17a>
    46ca:	21fe      	movs	r1, #254	; 0xfe
    46cc:	1c6a      	adds	r2, r5, #1
    46ce:	4211      	tst	r1, r2
    46d0:	d13b      	bne.n	474a <__aeabi_fadd+0x22e>
    46d2:	2d00      	cmp	r5, #0
    46d4:	d16a      	bne.n	47ac <__aeabi_fadd+0x290>
    46d6:	2b00      	cmp	r3, #0
    46d8:	d100      	bne.n	46dc <__aeabi_fadd+0x1c0>
    46da:	e08e      	b.n	47fa <__aeabi_fadd+0x2de>
    46dc:	2800      	cmp	r0, #0
    46de:	d000      	beq.n	46e2 <__aeabi_fadd+0x1c6>
    46e0:	e08d      	b.n	47fe <__aeabi_fadd+0x2e2>
    46e2:	2500      	movs	r5, #0
    46e4:	08db      	lsrs	r3, r3, #3
    46e6:	025b      	lsls	r3, r3, #9
    46e8:	0a5b      	lsrs	r3, r3, #9
    46ea:	b2e8      	uxtb	r0, r5
    46ec:	e77d      	b.n	45ea <__aeabi_fadd+0xce>
    46ee:	2aff      	cmp	r2, #255	; 0xff
    46f0:	d0d4      	beq.n	469c <__aeabi_fadd+0x180>
    46f2:	2480      	movs	r4, #128	; 0x80
    46f4:	04e4      	lsls	r4, r4, #19
    46f6:	4323      	orrs	r3, r4
    46f8:	2401      	movs	r4, #1
    46fa:	2e1b      	cmp	r6, #27
    46fc:	dc07      	bgt.n	470e <__aeabi_fadd+0x1f2>
    46fe:	2520      	movs	r5, #32
    4700:	1bad      	subs	r5, r5, r6
    4702:	001c      	movs	r4, r3
    4704:	40ab      	lsls	r3, r5
    4706:	40f4      	lsrs	r4, r6
    4708:	1e5d      	subs	r5, r3, #1
    470a:	41ab      	sbcs	r3, r5
    470c:	431c      	orrs	r4, r3
    470e:	1b03      	subs	r3, r0, r4
    4710:	0015      	movs	r5, r2
    4712:	000c      	movs	r4, r1
    4714:	e757      	b.n	45c6 <__aeabi_fadd+0xaa>
    4716:	1a1e      	subs	r6, r3, r0
    4718:	0172      	lsls	r2, r6, #5
    471a:	d42e      	bmi.n	477a <__aeabi_fadd+0x25e>
    471c:	2e00      	cmp	r6, #0
    471e:	d1a8      	bne.n	4672 <__aeabi_fadd+0x156>
    4720:	2400      	movs	r4, #0
    4722:	2000      	movs	r0, #0
    4724:	2300      	movs	r3, #0
    4726:	e760      	b.n	45ea <__aeabi_fadd+0xce>
    4728:	2201      	movs	r2, #1
    472a:	493c      	ldr	r1, [pc, #240]	; (481c <__aeabi_fadd+0x300>)
    472c:	401a      	ands	r2, r3
    472e:	085b      	lsrs	r3, r3, #1
    4730:	400b      	ands	r3, r1
    4732:	4313      	orrs	r3, r2
    4734:	e7af      	b.n	4696 <__aeabi_fadd+0x17a>
    4736:	2aff      	cmp	r2, #255	; 0xff
    4738:	d0b1      	beq.n	469e <__aeabi_fadd+0x182>
    473a:	2580      	movs	r5, #128	; 0x80
    473c:	04ed      	lsls	r5, r5, #19
    473e:	432b      	orrs	r3, r5
    4740:	291b      	cmp	r1, #27
    4742:	dd28      	ble.n	4796 <__aeabi_fadd+0x27a>
    4744:	0015      	movs	r5, r2
    4746:	1c43      	adds	r3, r0, #1
    4748:	e742      	b.n	45d0 <__aeabi_fadd+0xb4>
    474a:	2aff      	cmp	r2, #255	; 0xff
    474c:	d100      	bne.n	4750 <__aeabi_fadd+0x234>
    474e:	e77e      	b.n	464e <__aeabi_fadd+0x132>
    4750:	181b      	adds	r3, r3, r0
    4752:	085b      	lsrs	r3, r3, #1
    4754:	0015      	movs	r5, r2
    4756:	075a      	lsls	r2, r3, #29
    4758:	d000      	beq.n	475c <__aeabi_fadd+0x240>
    475a:	e739      	b.n	45d0 <__aeabi_fadd+0xb4>
    475c:	08db      	lsrs	r3, r3, #3
    475e:	e7c2      	b.n	46e6 <__aeabi_fadd+0x1ca>
    4760:	000c      	movs	r4, r1
    4762:	0035      	movs	r5, r6
    4764:	0003      	movs	r3, r0
    4766:	e776      	b.n	4656 <__aeabi_fadd+0x13a>
    4768:	2b00      	cmp	r3, #0
    476a:	d13a      	bne.n	47e2 <__aeabi_fadd+0x2c6>
    476c:	2800      	cmp	r0, #0
    476e:	d195      	bne.n	469c <__aeabi_fadd+0x180>
    4770:	2380      	movs	r3, #128	; 0x80
    4772:	2400      	movs	r4, #0
    4774:	20ff      	movs	r0, #255	; 0xff
    4776:	03db      	lsls	r3, r3, #15
    4778:	e737      	b.n	45ea <__aeabi_fadd+0xce>
    477a:	000c      	movs	r4, r1
    477c:	1ac6      	subs	r6, r0, r3
    477e:	e778      	b.n	4672 <__aeabi_fadd+0x156>
    4780:	181b      	adds	r3, r3, r0
    4782:	2502      	movs	r5, #2
    4784:	015a      	lsls	r2, r3, #5
    4786:	d4cf      	bmi.n	4728 <__aeabi_fadd+0x20c>
    4788:	3d01      	subs	r5, #1
    478a:	e71e      	b.n	45ca <__aeabi_fadd+0xae>
    478c:	2501      	movs	r5, #1
    478e:	1a1b      	subs	r3, r3, r0
    4790:	e719      	b.n	45c6 <__aeabi_fadd+0xaa>
    4792:	000d      	movs	r5, r1
    4794:	e75f      	b.n	4656 <__aeabi_fadd+0x13a>
    4796:	001d      	movs	r5, r3
    4798:	2620      	movs	r6, #32
    479a:	40cd      	lsrs	r5, r1
    479c:	1a71      	subs	r1, r6, r1
    479e:	408b      	lsls	r3, r1
    47a0:	1e59      	subs	r1, r3, #1
    47a2:	418b      	sbcs	r3, r1
    47a4:	432b      	orrs	r3, r5
    47a6:	181b      	adds	r3, r3, r0
    47a8:	0015      	movs	r5, r2
    47aa:	e74b      	b.n	4644 <__aeabi_fadd+0x128>
    47ac:	2b00      	cmp	r3, #0
    47ae:	d100      	bne.n	47b2 <__aeabi_fadd+0x296>
    47b0:	e775      	b.n	469e <__aeabi_fadd+0x182>
    47b2:	2800      	cmp	r0, #0
    47b4:	d100      	bne.n	47b8 <__aeabi_fadd+0x29c>
    47b6:	e773      	b.n	46a0 <__aeabi_fadd+0x184>
    47b8:	2280      	movs	r2, #128	; 0x80
    47ba:	03d2      	lsls	r2, r2, #15
    47bc:	4297      	cmp	r7, r2
    47be:	d302      	bcc.n	47c6 <__aeabi_fadd+0x2aa>
    47c0:	4594      	cmp	ip, r2
    47c2:	d200      	bcs.n	47c6 <__aeabi_fadd+0x2aa>
    47c4:	0003      	movs	r3, r0
    47c6:	08db      	lsrs	r3, r3, #3
    47c8:	e74a      	b.n	4660 <__aeabi_fadd+0x144>
    47ca:	2800      	cmp	r0, #0
    47cc:	d0a8      	beq.n	4720 <__aeabi_fadd+0x204>
    47ce:	000c      	movs	r4, r1
    47d0:	0003      	movs	r3, r0
    47d2:	e786      	b.n	46e2 <__aeabi_fadd+0x1c6>
    47d4:	000c      	movs	r4, r1
    47d6:	1ac3      	subs	r3, r0, r3
    47d8:	3501      	adds	r5, #1
    47da:	e6f4      	b.n	45c6 <__aeabi_fadd+0xaa>
    47dc:	000d      	movs	r5, r1
    47de:	0003      	movs	r3, r0
    47e0:	e739      	b.n	4656 <__aeabi_fadd+0x13a>
    47e2:	2800      	cmp	r0, #0
    47e4:	d100      	bne.n	47e8 <__aeabi_fadd+0x2cc>
    47e6:	e75b      	b.n	46a0 <__aeabi_fadd+0x184>
    47e8:	2280      	movs	r2, #128	; 0x80
    47ea:	03d2      	lsls	r2, r2, #15
    47ec:	4297      	cmp	r7, r2
    47ee:	d3ea      	bcc.n	47c6 <__aeabi_fadd+0x2aa>
    47f0:	4594      	cmp	ip, r2
    47f2:	d2e8      	bcs.n	47c6 <__aeabi_fadd+0x2aa>
    47f4:	000c      	movs	r4, r1
    47f6:	0003      	movs	r3, r0
    47f8:	e7e5      	b.n	47c6 <__aeabi_fadd+0x2aa>
    47fa:	0003      	movs	r3, r0
    47fc:	e771      	b.n	46e2 <__aeabi_fadd+0x1c6>
    47fe:	181b      	adds	r3, r3, r0
    4800:	015a      	lsls	r2, r3, #5
    4802:	d5ab      	bpl.n	475c <__aeabi_fadd+0x240>
    4804:	4a04      	ldr	r2, [pc, #16]	; (4818 <__aeabi_fadd+0x2fc>)
    4806:	3501      	adds	r5, #1
    4808:	4013      	ands	r3, r2
    480a:	08db      	lsrs	r3, r3, #3
    480c:	e76b      	b.n	46e6 <__aeabi_fadd+0x1ca>
    480e:	1e13      	subs	r3, r2, #0
    4810:	d086      	beq.n	4720 <__aeabi_fadd+0x204>
    4812:	08db      	lsrs	r3, r3, #3
    4814:	e767      	b.n	46e6 <__aeabi_fadd+0x1ca>
    4816:	46c0      	nop			; (mov r8, r8)
    4818:	fbffffff 	.word	0xfbffffff
    481c:	7dffffff 	.word	0x7dffffff

00004820 <__aeabi_fdiv>:
    4820:	b5f0      	push	{r4, r5, r6, r7, lr}
    4822:	464f      	mov	r7, r9
    4824:	4646      	mov	r6, r8
    4826:	46d6      	mov	lr, sl
    4828:	0244      	lsls	r4, r0, #9
    482a:	b5c0      	push	{r6, r7, lr}
    482c:	0047      	lsls	r7, r0, #1
    482e:	1c0e      	adds	r6, r1, #0
    4830:	0a64      	lsrs	r4, r4, #9
    4832:	0e3f      	lsrs	r7, r7, #24
    4834:	0fc5      	lsrs	r5, r0, #31
    4836:	2f00      	cmp	r7, #0
    4838:	d03c      	beq.n	48b4 <__aeabi_fdiv+0x94>
    483a:	2fff      	cmp	r7, #255	; 0xff
    483c:	d042      	beq.n	48c4 <__aeabi_fdiv+0xa4>
    483e:	2300      	movs	r3, #0
    4840:	2280      	movs	r2, #128	; 0x80
    4842:	4699      	mov	r9, r3
    4844:	469a      	mov	sl, r3
    4846:	00e4      	lsls	r4, r4, #3
    4848:	04d2      	lsls	r2, r2, #19
    484a:	4314      	orrs	r4, r2
    484c:	3f7f      	subs	r7, #127	; 0x7f
    484e:	0273      	lsls	r3, r6, #9
    4850:	0a5b      	lsrs	r3, r3, #9
    4852:	4698      	mov	r8, r3
    4854:	0073      	lsls	r3, r6, #1
    4856:	0e1b      	lsrs	r3, r3, #24
    4858:	0ff6      	lsrs	r6, r6, #31
    485a:	2b00      	cmp	r3, #0
    485c:	d01b      	beq.n	4896 <__aeabi_fdiv+0x76>
    485e:	2bff      	cmp	r3, #255	; 0xff
    4860:	d013      	beq.n	488a <__aeabi_fdiv+0x6a>
    4862:	4642      	mov	r2, r8
    4864:	2180      	movs	r1, #128	; 0x80
    4866:	00d2      	lsls	r2, r2, #3
    4868:	04c9      	lsls	r1, r1, #19
    486a:	4311      	orrs	r1, r2
    486c:	4688      	mov	r8, r1
    486e:	2000      	movs	r0, #0
    4870:	3b7f      	subs	r3, #127	; 0x7f
    4872:	0029      	movs	r1, r5
    4874:	1aff      	subs	r7, r7, r3
    4876:	464b      	mov	r3, r9
    4878:	4071      	eors	r1, r6
    487a:	b2c9      	uxtb	r1, r1
    487c:	2b0f      	cmp	r3, #15
    487e:	d900      	bls.n	4882 <__aeabi_fdiv+0x62>
    4880:	e0b5      	b.n	49ee <__aeabi_fdiv+0x1ce>
    4882:	4a74      	ldr	r2, [pc, #464]	; (4a54 <__aeabi_fdiv+0x234>)
    4884:	009b      	lsls	r3, r3, #2
    4886:	58d3      	ldr	r3, [r2, r3]
    4888:	469f      	mov	pc, r3
    488a:	4643      	mov	r3, r8
    488c:	2b00      	cmp	r3, #0
    488e:	d13f      	bne.n	4910 <__aeabi_fdiv+0xf0>
    4890:	3fff      	subs	r7, #255	; 0xff
    4892:	3302      	adds	r3, #2
    4894:	e003      	b.n	489e <__aeabi_fdiv+0x7e>
    4896:	4643      	mov	r3, r8
    4898:	2b00      	cmp	r3, #0
    489a:	d12d      	bne.n	48f8 <__aeabi_fdiv+0xd8>
    489c:	2301      	movs	r3, #1
    489e:	0029      	movs	r1, r5
    48a0:	464a      	mov	r2, r9
    48a2:	4071      	eors	r1, r6
    48a4:	b2c9      	uxtb	r1, r1
    48a6:	431a      	orrs	r2, r3
    48a8:	2a0e      	cmp	r2, #14
    48aa:	d838      	bhi.n	491e <__aeabi_fdiv+0xfe>
    48ac:	486a      	ldr	r0, [pc, #424]	; (4a58 <__aeabi_fdiv+0x238>)
    48ae:	0092      	lsls	r2, r2, #2
    48b0:	5882      	ldr	r2, [r0, r2]
    48b2:	4697      	mov	pc, r2
    48b4:	2c00      	cmp	r4, #0
    48b6:	d113      	bne.n	48e0 <__aeabi_fdiv+0xc0>
    48b8:	2304      	movs	r3, #4
    48ba:	4699      	mov	r9, r3
    48bc:	3b03      	subs	r3, #3
    48be:	2700      	movs	r7, #0
    48c0:	469a      	mov	sl, r3
    48c2:	e7c4      	b.n	484e <__aeabi_fdiv+0x2e>
    48c4:	2c00      	cmp	r4, #0
    48c6:	d105      	bne.n	48d4 <__aeabi_fdiv+0xb4>
    48c8:	2308      	movs	r3, #8
    48ca:	4699      	mov	r9, r3
    48cc:	3b06      	subs	r3, #6
    48ce:	27ff      	movs	r7, #255	; 0xff
    48d0:	469a      	mov	sl, r3
    48d2:	e7bc      	b.n	484e <__aeabi_fdiv+0x2e>
    48d4:	230c      	movs	r3, #12
    48d6:	4699      	mov	r9, r3
    48d8:	3b09      	subs	r3, #9
    48da:	27ff      	movs	r7, #255	; 0xff
    48dc:	469a      	mov	sl, r3
    48de:	e7b6      	b.n	484e <__aeabi_fdiv+0x2e>
    48e0:	0020      	movs	r0, r4
    48e2:	f000 fd01 	bl	52e8 <__clzsi2>
    48e6:	2776      	movs	r7, #118	; 0x76
    48e8:	1f43      	subs	r3, r0, #5
    48ea:	409c      	lsls	r4, r3
    48ec:	2300      	movs	r3, #0
    48ee:	427f      	negs	r7, r7
    48f0:	4699      	mov	r9, r3
    48f2:	469a      	mov	sl, r3
    48f4:	1a3f      	subs	r7, r7, r0
    48f6:	e7aa      	b.n	484e <__aeabi_fdiv+0x2e>
    48f8:	4640      	mov	r0, r8
    48fa:	f000 fcf5 	bl	52e8 <__clzsi2>
    48fe:	4642      	mov	r2, r8
    4900:	1f43      	subs	r3, r0, #5
    4902:	409a      	lsls	r2, r3
    4904:	2376      	movs	r3, #118	; 0x76
    4906:	425b      	negs	r3, r3
    4908:	1a1b      	subs	r3, r3, r0
    490a:	4690      	mov	r8, r2
    490c:	2000      	movs	r0, #0
    490e:	e7b0      	b.n	4872 <__aeabi_fdiv+0x52>
    4910:	2303      	movs	r3, #3
    4912:	464a      	mov	r2, r9
    4914:	431a      	orrs	r2, r3
    4916:	4691      	mov	r9, r2
    4918:	2003      	movs	r0, #3
    491a:	33fc      	adds	r3, #252	; 0xfc
    491c:	e7a9      	b.n	4872 <__aeabi_fdiv+0x52>
    491e:	000d      	movs	r5, r1
    4920:	20ff      	movs	r0, #255	; 0xff
    4922:	2200      	movs	r2, #0
    4924:	05c0      	lsls	r0, r0, #23
    4926:	07ed      	lsls	r5, r5, #31
    4928:	4310      	orrs	r0, r2
    492a:	4328      	orrs	r0, r5
    492c:	bce0      	pop	{r5, r6, r7}
    492e:	46ba      	mov	sl, r7
    4930:	46b1      	mov	r9, r6
    4932:	46a8      	mov	r8, r5
    4934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4936:	000d      	movs	r5, r1
    4938:	2000      	movs	r0, #0
    493a:	2200      	movs	r2, #0
    493c:	e7f2      	b.n	4924 <__aeabi_fdiv+0x104>
    493e:	4653      	mov	r3, sl
    4940:	2b02      	cmp	r3, #2
    4942:	d0ed      	beq.n	4920 <__aeabi_fdiv+0x100>
    4944:	2b03      	cmp	r3, #3
    4946:	d033      	beq.n	49b0 <__aeabi_fdiv+0x190>
    4948:	46a0      	mov	r8, r4
    494a:	2b01      	cmp	r3, #1
    494c:	d105      	bne.n	495a <__aeabi_fdiv+0x13a>
    494e:	2000      	movs	r0, #0
    4950:	2200      	movs	r2, #0
    4952:	e7e7      	b.n	4924 <__aeabi_fdiv+0x104>
    4954:	0035      	movs	r5, r6
    4956:	2803      	cmp	r0, #3
    4958:	d07a      	beq.n	4a50 <__aeabi_fdiv+0x230>
    495a:	003b      	movs	r3, r7
    495c:	337f      	adds	r3, #127	; 0x7f
    495e:	2b00      	cmp	r3, #0
    4960:	dd2d      	ble.n	49be <__aeabi_fdiv+0x19e>
    4962:	4642      	mov	r2, r8
    4964:	0752      	lsls	r2, r2, #29
    4966:	d007      	beq.n	4978 <__aeabi_fdiv+0x158>
    4968:	220f      	movs	r2, #15
    496a:	4641      	mov	r1, r8
    496c:	400a      	ands	r2, r1
    496e:	2a04      	cmp	r2, #4
    4970:	d002      	beq.n	4978 <__aeabi_fdiv+0x158>
    4972:	2204      	movs	r2, #4
    4974:	4694      	mov	ip, r2
    4976:	44e0      	add	r8, ip
    4978:	4642      	mov	r2, r8
    497a:	0112      	lsls	r2, r2, #4
    497c:	d505      	bpl.n	498a <__aeabi_fdiv+0x16a>
    497e:	4642      	mov	r2, r8
    4980:	4b36      	ldr	r3, [pc, #216]	; (4a5c <__aeabi_fdiv+0x23c>)
    4982:	401a      	ands	r2, r3
    4984:	003b      	movs	r3, r7
    4986:	4690      	mov	r8, r2
    4988:	3380      	adds	r3, #128	; 0x80
    498a:	2bfe      	cmp	r3, #254	; 0xfe
    498c:	dcc8      	bgt.n	4920 <__aeabi_fdiv+0x100>
    498e:	4642      	mov	r2, r8
    4990:	0192      	lsls	r2, r2, #6
    4992:	0a52      	lsrs	r2, r2, #9
    4994:	b2d8      	uxtb	r0, r3
    4996:	e7c5      	b.n	4924 <__aeabi_fdiv+0x104>
    4998:	2280      	movs	r2, #128	; 0x80
    499a:	2500      	movs	r5, #0
    499c:	20ff      	movs	r0, #255	; 0xff
    499e:	03d2      	lsls	r2, r2, #15
    49a0:	e7c0      	b.n	4924 <__aeabi_fdiv+0x104>
    49a2:	2280      	movs	r2, #128	; 0x80
    49a4:	03d2      	lsls	r2, r2, #15
    49a6:	4214      	tst	r4, r2
    49a8:	d002      	beq.n	49b0 <__aeabi_fdiv+0x190>
    49aa:	4643      	mov	r3, r8
    49ac:	4213      	tst	r3, r2
    49ae:	d049      	beq.n	4a44 <__aeabi_fdiv+0x224>
    49b0:	2280      	movs	r2, #128	; 0x80
    49b2:	03d2      	lsls	r2, r2, #15
    49b4:	4322      	orrs	r2, r4
    49b6:	0252      	lsls	r2, r2, #9
    49b8:	20ff      	movs	r0, #255	; 0xff
    49ba:	0a52      	lsrs	r2, r2, #9
    49bc:	e7b2      	b.n	4924 <__aeabi_fdiv+0x104>
    49be:	2201      	movs	r2, #1
    49c0:	1ad3      	subs	r3, r2, r3
    49c2:	2b1b      	cmp	r3, #27
    49c4:	dcc3      	bgt.n	494e <__aeabi_fdiv+0x12e>
    49c6:	4642      	mov	r2, r8
    49c8:	40da      	lsrs	r2, r3
    49ca:	4643      	mov	r3, r8
    49cc:	379e      	adds	r7, #158	; 0x9e
    49ce:	40bb      	lsls	r3, r7
    49d0:	1e59      	subs	r1, r3, #1
    49d2:	418b      	sbcs	r3, r1
    49d4:	431a      	orrs	r2, r3
    49d6:	0753      	lsls	r3, r2, #29
    49d8:	d004      	beq.n	49e4 <__aeabi_fdiv+0x1c4>
    49da:	230f      	movs	r3, #15
    49dc:	4013      	ands	r3, r2
    49de:	2b04      	cmp	r3, #4
    49e0:	d000      	beq.n	49e4 <__aeabi_fdiv+0x1c4>
    49e2:	3204      	adds	r2, #4
    49e4:	0153      	lsls	r3, r2, #5
    49e6:	d529      	bpl.n	4a3c <__aeabi_fdiv+0x21c>
    49e8:	2001      	movs	r0, #1
    49ea:	2200      	movs	r2, #0
    49ec:	e79a      	b.n	4924 <__aeabi_fdiv+0x104>
    49ee:	4642      	mov	r2, r8
    49f0:	0163      	lsls	r3, r4, #5
    49f2:	0155      	lsls	r5, r2, #5
    49f4:	42ab      	cmp	r3, r5
    49f6:	d215      	bcs.n	4a24 <__aeabi_fdiv+0x204>
    49f8:	201b      	movs	r0, #27
    49fa:	2200      	movs	r2, #0
    49fc:	3f01      	subs	r7, #1
    49fe:	2601      	movs	r6, #1
    4a00:	001c      	movs	r4, r3
    4a02:	0052      	lsls	r2, r2, #1
    4a04:	005b      	lsls	r3, r3, #1
    4a06:	2c00      	cmp	r4, #0
    4a08:	db01      	blt.n	4a0e <__aeabi_fdiv+0x1ee>
    4a0a:	429d      	cmp	r5, r3
    4a0c:	d801      	bhi.n	4a12 <__aeabi_fdiv+0x1f2>
    4a0e:	1b5b      	subs	r3, r3, r5
    4a10:	4332      	orrs	r2, r6
    4a12:	3801      	subs	r0, #1
    4a14:	2800      	cmp	r0, #0
    4a16:	d1f3      	bne.n	4a00 <__aeabi_fdiv+0x1e0>
    4a18:	1e58      	subs	r0, r3, #1
    4a1a:	4183      	sbcs	r3, r0
    4a1c:	4313      	orrs	r3, r2
    4a1e:	4698      	mov	r8, r3
    4a20:	000d      	movs	r5, r1
    4a22:	e79a      	b.n	495a <__aeabi_fdiv+0x13a>
    4a24:	201a      	movs	r0, #26
    4a26:	2201      	movs	r2, #1
    4a28:	1b5b      	subs	r3, r3, r5
    4a2a:	e7e8      	b.n	49fe <__aeabi_fdiv+0x1de>
    4a2c:	3b02      	subs	r3, #2
    4a2e:	425a      	negs	r2, r3
    4a30:	4153      	adcs	r3, r2
    4a32:	425b      	negs	r3, r3
    4a34:	0035      	movs	r5, r6
    4a36:	2200      	movs	r2, #0
    4a38:	b2d8      	uxtb	r0, r3
    4a3a:	e773      	b.n	4924 <__aeabi_fdiv+0x104>
    4a3c:	0192      	lsls	r2, r2, #6
    4a3e:	2000      	movs	r0, #0
    4a40:	0a52      	lsrs	r2, r2, #9
    4a42:	e76f      	b.n	4924 <__aeabi_fdiv+0x104>
    4a44:	431a      	orrs	r2, r3
    4a46:	0252      	lsls	r2, r2, #9
    4a48:	0035      	movs	r5, r6
    4a4a:	20ff      	movs	r0, #255	; 0xff
    4a4c:	0a52      	lsrs	r2, r2, #9
    4a4e:	e769      	b.n	4924 <__aeabi_fdiv+0x104>
    4a50:	4644      	mov	r4, r8
    4a52:	e7ad      	b.n	49b0 <__aeabi_fdiv+0x190>
    4a54:	000059e4 	.word	0x000059e4
    4a58:	00005a24 	.word	0x00005a24
    4a5c:	f7ffffff 	.word	0xf7ffffff

00004a60 <__eqsf2>:
    4a60:	b570      	push	{r4, r5, r6, lr}
    4a62:	0042      	lsls	r2, r0, #1
    4a64:	024e      	lsls	r6, r1, #9
    4a66:	004c      	lsls	r4, r1, #1
    4a68:	0245      	lsls	r5, r0, #9
    4a6a:	0a6d      	lsrs	r5, r5, #9
    4a6c:	0e12      	lsrs	r2, r2, #24
    4a6e:	0fc3      	lsrs	r3, r0, #31
    4a70:	0a76      	lsrs	r6, r6, #9
    4a72:	0e24      	lsrs	r4, r4, #24
    4a74:	0fc9      	lsrs	r1, r1, #31
    4a76:	2aff      	cmp	r2, #255	; 0xff
    4a78:	d010      	beq.n	4a9c <__eqsf2+0x3c>
    4a7a:	2cff      	cmp	r4, #255	; 0xff
    4a7c:	d00c      	beq.n	4a98 <__eqsf2+0x38>
    4a7e:	2001      	movs	r0, #1
    4a80:	42a2      	cmp	r2, r4
    4a82:	d10a      	bne.n	4a9a <__eqsf2+0x3a>
    4a84:	42b5      	cmp	r5, r6
    4a86:	d108      	bne.n	4a9a <__eqsf2+0x3a>
    4a88:	428b      	cmp	r3, r1
    4a8a:	d00f      	beq.n	4aac <__eqsf2+0x4c>
    4a8c:	2a00      	cmp	r2, #0
    4a8e:	d104      	bne.n	4a9a <__eqsf2+0x3a>
    4a90:	0028      	movs	r0, r5
    4a92:	1e43      	subs	r3, r0, #1
    4a94:	4198      	sbcs	r0, r3
    4a96:	e000      	b.n	4a9a <__eqsf2+0x3a>
    4a98:	2001      	movs	r0, #1
    4a9a:	bd70      	pop	{r4, r5, r6, pc}
    4a9c:	2001      	movs	r0, #1
    4a9e:	2cff      	cmp	r4, #255	; 0xff
    4aa0:	d1fb      	bne.n	4a9a <__eqsf2+0x3a>
    4aa2:	4335      	orrs	r5, r6
    4aa4:	d1f9      	bne.n	4a9a <__eqsf2+0x3a>
    4aa6:	404b      	eors	r3, r1
    4aa8:	0018      	movs	r0, r3
    4aaa:	e7f6      	b.n	4a9a <__eqsf2+0x3a>
    4aac:	2000      	movs	r0, #0
    4aae:	e7f4      	b.n	4a9a <__eqsf2+0x3a>

00004ab0 <__gesf2>:
    4ab0:	b530      	push	{r4, r5, lr}
    4ab2:	0042      	lsls	r2, r0, #1
    4ab4:	0244      	lsls	r4, r0, #9
    4ab6:	024d      	lsls	r5, r1, #9
    4ab8:	0fc3      	lsrs	r3, r0, #31
    4aba:	0048      	lsls	r0, r1, #1
    4abc:	0a64      	lsrs	r4, r4, #9
    4abe:	0e12      	lsrs	r2, r2, #24
    4ac0:	0a6d      	lsrs	r5, r5, #9
    4ac2:	0e00      	lsrs	r0, r0, #24
    4ac4:	0fc9      	lsrs	r1, r1, #31
    4ac6:	2aff      	cmp	r2, #255	; 0xff
    4ac8:	d019      	beq.n	4afe <__gesf2+0x4e>
    4aca:	28ff      	cmp	r0, #255	; 0xff
    4acc:	d00b      	beq.n	4ae6 <__gesf2+0x36>
    4ace:	2a00      	cmp	r2, #0
    4ad0:	d11e      	bne.n	4b10 <__gesf2+0x60>
    4ad2:	2800      	cmp	r0, #0
    4ad4:	d10b      	bne.n	4aee <__gesf2+0x3e>
    4ad6:	2d00      	cmp	r5, #0
    4ad8:	d027      	beq.n	4b2a <__gesf2+0x7a>
    4ada:	2c00      	cmp	r4, #0
    4adc:	d134      	bne.n	4b48 <__gesf2+0x98>
    4ade:	2900      	cmp	r1, #0
    4ae0:	d02f      	beq.n	4b42 <__gesf2+0x92>
    4ae2:	0008      	movs	r0, r1
    4ae4:	bd30      	pop	{r4, r5, pc}
    4ae6:	2d00      	cmp	r5, #0
    4ae8:	d128      	bne.n	4b3c <__gesf2+0x8c>
    4aea:	2a00      	cmp	r2, #0
    4aec:	d101      	bne.n	4af2 <__gesf2+0x42>
    4aee:	2c00      	cmp	r4, #0
    4af0:	d0f5      	beq.n	4ade <__gesf2+0x2e>
    4af2:	428b      	cmp	r3, r1
    4af4:	d107      	bne.n	4b06 <__gesf2+0x56>
    4af6:	2b00      	cmp	r3, #0
    4af8:	d023      	beq.n	4b42 <__gesf2+0x92>
    4afa:	0018      	movs	r0, r3
    4afc:	e7f2      	b.n	4ae4 <__gesf2+0x34>
    4afe:	2c00      	cmp	r4, #0
    4b00:	d11c      	bne.n	4b3c <__gesf2+0x8c>
    4b02:	28ff      	cmp	r0, #255	; 0xff
    4b04:	d014      	beq.n	4b30 <__gesf2+0x80>
    4b06:	1e58      	subs	r0, r3, #1
    4b08:	2302      	movs	r3, #2
    4b0a:	4018      	ands	r0, r3
    4b0c:	3801      	subs	r0, #1
    4b0e:	e7e9      	b.n	4ae4 <__gesf2+0x34>
    4b10:	2800      	cmp	r0, #0
    4b12:	d0f8      	beq.n	4b06 <__gesf2+0x56>
    4b14:	428b      	cmp	r3, r1
    4b16:	d1f6      	bne.n	4b06 <__gesf2+0x56>
    4b18:	4282      	cmp	r2, r0
    4b1a:	dcf4      	bgt.n	4b06 <__gesf2+0x56>
    4b1c:	dbeb      	blt.n	4af6 <__gesf2+0x46>
    4b1e:	42ac      	cmp	r4, r5
    4b20:	d8f1      	bhi.n	4b06 <__gesf2+0x56>
    4b22:	2000      	movs	r0, #0
    4b24:	42ac      	cmp	r4, r5
    4b26:	d2dd      	bcs.n	4ae4 <__gesf2+0x34>
    4b28:	e7e5      	b.n	4af6 <__gesf2+0x46>
    4b2a:	2c00      	cmp	r4, #0
    4b2c:	d0da      	beq.n	4ae4 <__gesf2+0x34>
    4b2e:	e7ea      	b.n	4b06 <__gesf2+0x56>
    4b30:	2d00      	cmp	r5, #0
    4b32:	d103      	bne.n	4b3c <__gesf2+0x8c>
    4b34:	428b      	cmp	r3, r1
    4b36:	d1e6      	bne.n	4b06 <__gesf2+0x56>
    4b38:	2000      	movs	r0, #0
    4b3a:	e7d3      	b.n	4ae4 <__gesf2+0x34>
    4b3c:	2002      	movs	r0, #2
    4b3e:	4240      	negs	r0, r0
    4b40:	e7d0      	b.n	4ae4 <__gesf2+0x34>
    4b42:	2001      	movs	r0, #1
    4b44:	4240      	negs	r0, r0
    4b46:	e7cd      	b.n	4ae4 <__gesf2+0x34>
    4b48:	428b      	cmp	r3, r1
    4b4a:	d0e8      	beq.n	4b1e <__gesf2+0x6e>
    4b4c:	e7db      	b.n	4b06 <__gesf2+0x56>
    4b4e:	46c0      	nop			; (mov r8, r8)

00004b50 <__lesf2>:
    4b50:	b530      	push	{r4, r5, lr}
    4b52:	0042      	lsls	r2, r0, #1
    4b54:	0244      	lsls	r4, r0, #9
    4b56:	024d      	lsls	r5, r1, #9
    4b58:	0fc3      	lsrs	r3, r0, #31
    4b5a:	0048      	lsls	r0, r1, #1
    4b5c:	0a64      	lsrs	r4, r4, #9
    4b5e:	0e12      	lsrs	r2, r2, #24
    4b60:	0a6d      	lsrs	r5, r5, #9
    4b62:	0e00      	lsrs	r0, r0, #24
    4b64:	0fc9      	lsrs	r1, r1, #31
    4b66:	2aff      	cmp	r2, #255	; 0xff
    4b68:	d01a      	beq.n	4ba0 <__lesf2+0x50>
    4b6a:	28ff      	cmp	r0, #255	; 0xff
    4b6c:	d00e      	beq.n	4b8c <__lesf2+0x3c>
    4b6e:	2a00      	cmp	r2, #0
    4b70:	d11e      	bne.n	4bb0 <__lesf2+0x60>
    4b72:	2800      	cmp	r0, #0
    4b74:	d10e      	bne.n	4b94 <__lesf2+0x44>
    4b76:	2d00      	cmp	r5, #0
    4b78:	d02a      	beq.n	4bd0 <__lesf2+0x80>
    4b7a:	2c00      	cmp	r4, #0
    4b7c:	d00c      	beq.n	4b98 <__lesf2+0x48>
    4b7e:	428b      	cmp	r3, r1
    4b80:	d01d      	beq.n	4bbe <__lesf2+0x6e>
    4b82:	1e58      	subs	r0, r3, #1
    4b84:	2302      	movs	r3, #2
    4b86:	4018      	ands	r0, r3
    4b88:	3801      	subs	r0, #1
    4b8a:	e010      	b.n	4bae <__lesf2+0x5e>
    4b8c:	2d00      	cmp	r5, #0
    4b8e:	d10d      	bne.n	4bac <__lesf2+0x5c>
    4b90:	2a00      	cmp	r2, #0
    4b92:	d120      	bne.n	4bd6 <__lesf2+0x86>
    4b94:	2c00      	cmp	r4, #0
    4b96:	d11e      	bne.n	4bd6 <__lesf2+0x86>
    4b98:	2900      	cmp	r1, #0
    4b9a:	d023      	beq.n	4be4 <__lesf2+0x94>
    4b9c:	0008      	movs	r0, r1
    4b9e:	e006      	b.n	4bae <__lesf2+0x5e>
    4ba0:	2c00      	cmp	r4, #0
    4ba2:	d103      	bne.n	4bac <__lesf2+0x5c>
    4ba4:	28ff      	cmp	r0, #255	; 0xff
    4ba6:	d1ec      	bne.n	4b82 <__lesf2+0x32>
    4ba8:	2d00      	cmp	r5, #0
    4baa:	d017      	beq.n	4bdc <__lesf2+0x8c>
    4bac:	2002      	movs	r0, #2
    4bae:	bd30      	pop	{r4, r5, pc}
    4bb0:	2800      	cmp	r0, #0
    4bb2:	d0e6      	beq.n	4b82 <__lesf2+0x32>
    4bb4:	428b      	cmp	r3, r1
    4bb6:	d1e4      	bne.n	4b82 <__lesf2+0x32>
    4bb8:	4282      	cmp	r2, r0
    4bba:	dce2      	bgt.n	4b82 <__lesf2+0x32>
    4bbc:	db04      	blt.n	4bc8 <__lesf2+0x78>
    4bbe:	42ac      	cmp	r4, r5
    4bc0:	d8df      	bhi.n	4b82 <__lesf2+0x32>
    4bc2:	2000      	movs	r0, #0
    4bc4:	42ac      	cmp	r4, r5
    4bc6:	d2f2      	bcs.n	4bae <__lesf2+0x5e>
    4bc8:	2b00      	cmp	r3, #0
    4bca:	d00b      	beq.n	4be4 <__lesf2+0x94>
    4bcc:	0018      	movs	r0, r3
    4bce:	e7ee      	b.n	4bae <__lesf2+0x5e>
    4bd0:	2c00      	cmp	r4, #0
    4bd2:	d0ec      	beq.n	4bae <__lesf2+0x5e>
    4bd4:	e7d5      	b.n	4b82 <__lesf2+0x32>
    4bd6:	428b      	cmp	r3, r1
    4bd8:	d1d3      	bne.n	4b82 <__lesf2+0x32>
    4bda:	e7f5      	b.n	4bc8 <__lesf2+0x78>
    4bdc:	2000      	movs	r0, #0
    4bde:	428b      	cmp	r3, r1
    4be0:	d0e5      	beq.n	4bae <__lesf2+0x5e>
    4be2:	e7ce      	b.n	4b82 <__lesf2+0x32>
    4be4:	2001      	movs	r0, #1
    4be6:	4240      	negs	r0, r0
    4be8:	e7e1      	b.n	4bae <__lesf2+0x5e>
    4bea:	46c0      	nop			; (mov r8, r8)

00004bec <__aeabi_fmul>:
    4bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bee:	464f      	mov	r7, r9
    4bf0:	4646      	mov	r6, r8
    4bf2:	46d6      	mov	lr, sl
    4bf4:	0243      	lsls	r3, r0, #9
    4bf6:	0a5b      	lsrs	r3, r3, #9
    4bf8:	4699      	mov	r9, r3
    4bfa:	0043      	lsls	r3, r0, #1
    4bfc:	b5c0      	push	{r6, r7, lr}
    4bfe:	0e1b      	lsrs	r3, r3, #24
    4c00:	1c0e      	adds	r6, r1, #0
    4c02:	0fc5      	lsrs	r5, r0, #31
    4c04:	2b00      	cmp	r3, #0
    4c06:	d100      	bne.n	4c0a <__aeabi_fmul+0x1e>
    4c08:	e085      	b.n	4d16 <__aeabi_fmul+0x12a>
    4c0a:	2bff      	cmp	r3, #255	; 0xff
    4c0c:	d100      	bne.n	4c10 <__aeabi_fmul+0x24>
    4c0e:	e08b      	b.n	4d28 <__aeabi_fmul+0x13c>
    4c10:	464a      	mov	r2, r9
    4c12:	2180      	movs	r1, #128	; 0x80
    4c14:	00d2      	lsls	r2, r2, #3
    4c16:	04c9      	lsls	r1, r1, #19
    4c18:	4311      	orrs	r1, r2
    4c1a:	227f      	movs	r2, #127	; 0x7f
    4c1c:	4252      	negs	r2, r2
    4c1e:	4690      	mov	r8, r2
    4c20:	4498      	add	r8, r3
    4c22:	2300      	movs	r3, #0
    4c24:	4689      	mov	r9, r1
    4c26:	2700      	movs	r7, #0
    4c28:	469a      	mov	sl, r3
    4c2a:	0274      	lsls	r4, r6, #9
    4c2c:	0073      	lsls	r3, r6, #1
    4c2e:	0a64      	lsrs	r4, r4, #9
    4c30:	0e1b      	lsrs	r3, r3, #24
    4c32:	0ff6      	lsrs	r6, r6, #31
    4c34:	2b00      	cmp	r3, #0
    4c36:	d064      	beq.n	4d02 <__aeabi_fmul+0x116>
    4c38:	2bff      	cmp	r3, #255	; 0xff
    4c3a:	d01f      	beq.n	4c7c <__aeabi_fmul+0x90>
    4c3c:	2280      	movs	r2, #128	; 0x80
    4c3e:	3b7f      	subs	r3, #127	; 0x7f
    4c40:	00e4      	lsls	r4, r4, #3
    4c42:	04d2      	lsls	r2, r2, #19
    4c44:	4443      	add	r3, r8
    4c46:	2000      	movs	r0, #0
    4c48:	4314      	orrs	r4, r2
    4c4a:	1c59      	adds	r1, r3, #1
    4c4c:	2f0a      	cmp	r7, #10
    4c4e:	dc2b      	bgt.n	4ca8 <__aeabi_fmul+0xbc>
    4c50:	4075      	eors	r5, r6
    4c52:	2f02      	cmp	r7, #2
    4c54:	dc22      	bgt.n	4c9c <__aeabi_fmul+0xb0>
    4c56:	3f01      	subs	r7, #1
    4c58:	2f01      	cmp	r7, #1
    4c5a:	d900      	bls.n	4c5e <__aeabi_fmul+0x72>
    4c5c:	e0bb      	b.n	4dd6 <__aeabi_fmul+0x1ea>
    4c5e:	2802      	cmp	r0, #2
    4c60:	d06b      	beq.n	4d3a <__aeabi_fmul+0x14e>
    4c62:	2801      	cmp	r0, #1
    4c64:	d12a      	bne.n	4cbc <__aeabi_fmul+0xd0>
    4c66:	2000      	movs	r0, #0
    4c68:	2200      	movs	r2, #0
    4c6a:	05c0      	lsls	r0, r0, #23
    4c6c:	07ed      	lsls	r5, r5, #31
    4c6e:	4310      	orrs	r0, r2
    4c70:	4328      	orrs	r0, r5
    4c72:	bce0      	pop	{r5, r6, r7}
    4c74:	46ba      	mov	sl, r7
    4c76:	46b1      	mov	r9, r6
    4c78:	46a8      	mov	r8, r5
    4c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c7c:	2c00      	cmp	r4, #0
    4c7e:	d064      	beq.n	4d4a <__aeabi_fmul+0x15e>
    4c80:	2203      	movs	r2, #3
    4c82:	4641      	mov	r1, r8
    4c84:	4643      	mov	r3, r8
    4c86:	4317      	orrs	r7, r2
    4c88:	002a      	movs	r2, r5
    4c8a:	3101      	adds	r1, #1
    4c8c:	33ff      	adds	r3, #255	; 0xff
    4c8e:	4072      	eors	r2, r6
    4c90:	31ff      	adds	r1, #255	; 0xff
    4c92:	2f0a      	cmp	r7, #10
    4c94:	dd00      	ble.n	4c98 <__aeabi_fmul+0xac>
    4c96:	e0d7      	b.n	4e48 <__aeabi_fmul+0x25c>
    4c98:	0015      	movs	r5, r2
    4c9a:	2003      	movs	r0, #3
    4c9c:	2201      	movs	r2, #1
    4c9e:	40ba      	lsls	r2, r7
    4ca0:	27a6      	movs	r7, #166	; 0xa6
    4ca2:	00ff      	lsls	r7, r7, #3
    4ca4:	423a      	tst	r2, r7
    4ca6:	d020      	beq.n	4cea <__aeabi_fmul+0xfe>
    4ca8:	4653      	mov	r3, sl
    4caa:	2b02      	cmp	r3, #2
    4cac:	d045      	beq.n	4d3a <__aeabi_fmul+0x14e>
    4cae:	2b03      	cmp	r3, #3
    4cb0:	d100      	bne.n	4cb4 <__aeabi_fmul+0xc8>
    4cb2:	e0bb      	b.n	4e2c <__aeabi_fmul+0x240>
    4cb4:	4650      	mov	r0, sl
    4cb6:	464c      	mov	r4, r9
    4cb8:	2801      	cmp	r0, #1
    4cba:	d0d4      	beq.n	4c66 <__aeabi_fmul+0x7a>
    4cbc:	000b      	movs	r3, r1
    4cbe:	337f      	adds	r3, #127	; 0x7f
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	dd70      	ble.n	4da6 <__aeabi_fmul+0x1ba>
    4cc4:	0762      	lsls	r2, r4, #29
    4cc6:	d004      	beq.n	4cd2 <__aeabi_fmul+0xe6>
    4cc8:	220f      	movs	r2, #15
    4cca:	4022      	ands	r2, r4
    4ccc:	2a04      	cmp	r2, #4
    4cce:	d000      	beq.n	4cd2 <__aeabi_fmul+0xe6>
    4cd0:	3404      	adds	r4, #4
    4cd2:	0122      	lsls	r2, r4, #4
    4cd4:	d503      	bpl.n	4cde <__aeabi_fmul+0xf2>
    4cd6:	4b63      	ldr	r3, [pc, #396]	; (4e64 <__aeabi_fmul+0x278>)
    4cd8:	401c      	ands	r4, r3
    4cda:	000b      	movs	r3, r1
    4cdc:	3380      	adds	r3, #128	; 0x80
    4cde:	2bfe      	cmp	r3, #254	; 0xfe
    4ce0:	dc2b      	bgt.n	4d3a <__aeabi_fmul+0x14e>
    4ce2:	01a2      	lsls	r2, r4, #6
    4ce4:	0a52      	lsrs	r2, r2, #9
    4ce6:	b2d8      	uxtb	r0, r3
    4ce8:	e7bf      	b.n	4c6a <__aeabi_fmul+0x7e>
    4cea:	2790      	movs	r7, #144	; 0x90
    4cec:	00bf      	lsls	r7, r7, #2
    4cee:	423a      	tst	r2, r7
    4cf0:	d126      	bne.n	4d40 <__aeabi_fmul+0x154>
    4cf2:	3fb9      	subs	r7, #185	; 0xb9
    4cf4:	3fff      	subs	r7, #255	; 0xff
    4cf6:	4217      	tst	r7, r2
    4cf8:	d06d      	beq.n	4dd6 <__aeabi_fmul+0x1ea>
    4cfa:	0035      	movs	r5, r6
    4cfc:	46a1      	mov	r9, r4
    4cfe:	4682      	mov	sl, r0
    4d00:	e7d2      	b.n	4ca8 <__aeabi_fmul+0xbc>
    4d02:	2c00      	cmp	r4, #0
    4d04:	d141      	bne.n	4d8a <__aeabi_fmul+0x19e>
    4d06:	2301      	movs	r3, #1
    4d08:	431f      	orrs	r7, r3
    4d0a:	4643      	mov	r3, r8
    4d0c:	2001      	movs	r0, #1
    4d0e:	1c59      	adds	r1, r3, #1
    4d10:	2f0a      	cmp	r7, #10
    4d12:	dd9d      	ble.n	4c50 <__aeabi_fmul+0x64>
    4d14:	e7c8      	b.n	4ca8 <__aeabi_fmul+0xbc>
    4d16:	464b      	mov	r3, r9
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d127      	bne.n	4d6c <__aeabi_fmul+0x180>
    4d1c:	2300      	movs	r3, #0
    4d1e:	4698      	mov	r8, r3
    4d20:	3301      	adds	r3, #1
    4d22:	2704      	movs	r7, #4
    4d24:	469a      	mov	sl, r3
    4d26:	e780      	b.n	4c2a <__aeabi_fmul+0x3e>
    4d28:	464b      	mov	r3, r9
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d118      	bne.n	4d60 <__aeabi_fmul+0x174>
    4d2e:	23ff      	movs	r3, #255	; 0xff
    4d30:	4698      	mov	r8, r3
    4d32:	3bfd      	subs	r3, #253	; 0xfd
    4d34:	2708      	movs	r7, #8
    4d36:	469a      	mov	sl, r3
    4d38:	e777      	b.n	4c2a <__aeabi_fmul+0x3e>
    4d3a:	20ff      	movs	r0, #255	; 0xff
    4d3c:	2200      	movs	r2, #0
    4d3e:	e794      	b.n	4c6a <__aeabi_fmul+0x7e>
    4d40:	2280      	movs	r2, #128	; 0x80
    4d42:	2500      	movs	r5, #0
    4d44:	20ff      	movs	r0, #255	; 0xff
    4d46:	03d2      	lsls	r2, r2, #15
    4d48:	e78f      	b.n	4c6a <__aeabi_fmul+0x7e>
    4d4a:	2302      	movs	r3, #2
    4d4c:	431f      	orrs	r7, r3
    4d4e:	4643      	mov	r3, r8
    4d50:	1c59      	adds	r1, r3, #1
    4d52:	31ff      	adds	r1, #255	; 0xff
    4d54:	2f0a      	cmp	r7, #10
    4d56:	dca7      	bgt.n	4ca8 <__aeabi_fmul+0xbc>
    4d58:	2002      	movs	r0, #2
    4d5a:	33ff      	adds	r3, #255	; 0xff
    4d5c:	4075      	eors	r5, r6
    4d5e:	e778      	b.n	4c52 <__aeabi_fmul+0x66>
    4d60:	23ff      	movs	r3, #255	; 0xff
    4d62:	4698      	mov	r8, r3
    4d64:	3bfc      	subs	r3, #252	; 0xfc
    4d66:	270c      	movs	r7, #12
    4d68:	469a      	mov	sl, r3
    4d6a:	e75e      	b.n	4c2a <__aeabi_fmul+0x3e>
    4d6c:	4648      	mov	r0, r9
    4d6e:	f000 fabb 	bl	52e8 <__clzsi2>
    4d72:	464a      	mov	r2, r9
    4d74:	1f43      	subs	r3, r0, #5
    4d76:	409a      	lsls	r2, r3
    4d78:	2376      	movs	r3, #118	; 0x76
    4d7a:	425b      	negs	r3, r3
    4d7c:	1a1b      	subs	r3, r3, r0
    4d7e:	4698      	mov	r8, r3
    4d80:	2300      	movs	r3, #0
    4d82:	4691      	mov	r9, r2
    4d84:	2700      	movs	r7, #0
    4d86:	469a      	mov	sl, r3
    4d88:	e74f      	b.n	4c2a <__aeabi_fmul+0x3e>
    4d8a:	0020      	movs	r0, r4
    4d8c:	f000 faac 	bl	52e8 <__clzsi2>
    4d90:	1f43      	subs	r3, r0, #5
    4d92:	409c      	lsls	r4, r3
    4d94:	4643      	mov	r3, r8
    4d96:	1a1b      	subs	r3, r3, r0
    4d98:	3b76      	subs	r3, #118	; 0x76
    4d9a:	2000      	movs	r0, #0
    4d9c:	1c59      	adds	r1, r3, #1
    4d9e:	2f0a      	cmp	r7, #10
    4da0:	dc00      	bgt.n	4da4 <__aeabi_fmul+0x1b8>
    4da2:	e755      	b.n	4c50 <__aeabi_fmul+0x64>
    4da4:	e780      	b.n	4ca8 <__aeabi_fmul+0xbc>
    4da6:	2201      	movs	r2, #1
    4da8:	1ad3      	subs	r3, r2, r3
    4daa:	2b1b      	cmp	r3, #27
    4dac:	dd00      	ble.n	4db0 <__aeabi_fmul+0x1c4>
    4dae:	e75a      	b.n	4c66 <__aeabi_fmul+0x7a>
    4db0:	319e      	adds	r1, #158	; 0x9e
    4db2:	0022      	movs	r2, r4
    4db4:	408c      	lsls	r4, r1
    4db6:	40da      	lsrs	r2, r3
    4db8:	1e63      	subs	r3, r4, #1
    4dba:	419c      	sbcs	r4, r3
    4dbc:	4322      	orrs	r2, r4
    4dbe:	0753      	lsls	r3, r2, #29
    4dc0:	d004      	beq.n	4dcc <__aeabi_fmul+0x1e0>
    4dc2:	230f      	movs	r3, #15
    4dc4:	4013      	ands	r3, r2
    4dc6:	2b04      	cmp	r3, #4
    4dc8:	d000      	beq.n	4dcc <__aeabi_fmul+0x1e0>
    4dca:	3204      	adds	r2, #4
    4dcc:	0153      	lsls	r3, r2, #5
    4dce:	d537      	bpl.n	4e40 <__aeabi_fmul+0x254>
    4dd0:	2001      	movs	r0, #1
    4dd2:	2200      	movs	r2, #0
    4dd4:	e749      	b.n	4c6a <__aeabi_fmul+0x7e>
    4dd6:	0c20      	lsrs	r0, r4, #16
    4dd8:	464a      	mov	r2, r9
    4dda:	0424      	lsls	r4, r4, #16
    4ddc:	0c24      	lsrs	r4, r4, #16
    4dde:	0027      	movs	r7, r4
    4de0:	0c16      	lsrs	r6, r2, #16
    4de2:	0412      	lsls	r2, r2, #16
    4de4:	0c12      	lsrs	r2, r2, #16
    4de6:	4374      	muls	r4, r6
    4de8:	4357      	muls	r7, r2
    4dea:	4346      	muls	r6, r0
    4dec:	4350      	muls	r0, r2
    4dee:	0c3a      	lsrs	r2, r7, #16
    4df0:	1900      	adds	r0, r0, r4
    4df2:	1812      	adds	r2, r2, r0
    4df4:	4294      	cmp	r4, r2
    4df6:	d903      	bls.n	4e00 <__aeabi_fmul+0x214>
    4df8:	2080      	movs	r0, #128	; 0x80
    4dfa:	0240      	lsls	r0, r0, #9
    4dfc:	4684      	mov	ip, r0
    4dfe:	4466      	add	r6, ip
    4e00:	043f      	lsls	r7, r7, #16
    4e02:	0410      	lsls	r0, r2, #16
    4e04:	0c3f      	lsrs	r7, r7, #16
    4e06:	19c0      	adds	r0, r0, r7
    4e08:	0184      	lsls	r4, r0, #6
    4e0a:	1e67      	subs	r7, r4, #1
    4e0c:	41bc      	sbcs	r4, r7
    4e0e:	0c12      	lsrs	r2, r2, #16
    4e10:	0e80      	lsrs	r0, r0, #26
    4e12:	1992      	adds	r2, r2, r6
    4e14:	4304      	orrs	r4, r0
    4e16:	0192      	lsls	r2, r2, #6
    4e18:	4314      	orrs	r4, r2
    4e1a:	0112      	lsls	r2, r2, #4
    4e1c:	d50e      	bpl.n	4e3c <__aeabi_fmul+0x250>
    4e1e:	2301      	movs	r3, #1
    4e20:	0862      	lsrs	r2, r4, #1
    4e22:	401c      	ands	r4, r3
    4e24:	4314      	orrs	r4, r2
    4e26:	e749      	b.n	4cbc <__aeabi_fmul+0xd0>
    4e28:	0035      	movs	r5, r6
    4e2a:	46a1      	mov	r9, r4
    4e2c:	2280      	movs	r2, #128	; 0x80
    4e2e:	464b      	mov	r3, r9
    4e30:	03d2      	lsls	r2, r2, #15
    4e32:	431a      	orrs	r2, r3
    4e34:	0252      	lsls	r2, r2, #9
    4e36:	20ff      	movs	r0, #255	; 0xff
    4e38:	0a52      	lsrs	r2, r2, #9
    4e3a:	e716      	b.n	4c6a <__aeabi_fmul+0x7e>
    4e3c:	0019      	movs	r1, r3
    4e3e:	e73d      	b.n	4cbc <__aeabi_fmul+0xd0>
    4e40:	0192      	lsls	r2, r2, #6
    4e42:	2000      	movs	r0, #0
    4e44:	0a52      	lsrs	r2, r2, #9
    4e46:	e710      	b.n	4c6a <__aeabi_fmul+0x7e>
    4e48:	2f0f      	cmp	r7, #15
    4e4a:	d1ed      	bne.n	4e28 <__aeabi_fmul+0x23c>
    4e4c:	2280      	movs	r2, #128	; 0x80
    4e4e:	464b      	mov	r3, r9
    4e50:	03d2      	lsls	r2, r2, #15
    4e52:	4213      	tst	r3, r2
    4e54:	d0ea      	beq.n	4e2c <__aeabi_fmul+0x240>
    4e56:	4214      	tst	r4, r2
    4e58:	d1e8      	bne.n	4e2c <__aeabi_fmul+0x240>
    4e5a:	0035      	movs	r5, r6
    4e5c:	20ff      	movs	r0, #255	; 0xff
    4e5e:	4322      	orrs	r2, r4
    4e60:	e703      	b.n	4c6a <__aeabi_fmul+0x7e>
    4e62:	46c0      	nop			; (mov r8, r8)
    4e64:	f7ffffff 	.word	0xf7ffffff

00004e68 <__aeabi_fsub>:
    4e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e6a:	0243      	lsls	r3, r0, #9
    4e6c:	0045      	lsls	r5, r0, #1
    4e6e:	0fc4      	lsrs	r4, r0, #31
    4e70:	0248      	lsls	r0, r1, #9
    4e72:	0a42      	lsrs	r2, r0, #9
    4e74:	4694      	mov	ip, r2
    4e76:	004a      	lsls	r2, r1, #1
    4e78:	0a5e      	lsrs	r6, r3, #9
    4e7a:	0e2d      	lsrs	r5, r5, #24
    4e7c:	099b      	lsrs	r3, r3, #6
    4e7e:	0e12      	lsrs	r2, r2, #24
    4e80:	0fc9      	lsrs	r1, r1, #31
    4e82:	0980      	lsrs	r0, r0, #6
    4e84:	2aff      	cmp	r2, #255	; 0xff
    4e86:	d023      	beq.n	4ed0 <__aeabi_fsub+0x68>
    4e88:	2701      	movs	r7, #1
    4e8a:	4079      	eors	r1, r7
    4e8c:	1aaf      	subs	r7, r5, r2
    4e8e:	428c      	cmp	r4, r1
    4e90:	d00f      	beq.n	4eb2 <__aeabi_fsub+0x4a>
    4e92:	2f00      	cmp	r7, #0
    4e94:	dc00      	bgt.n	4e98 <__aeabi_fsub+0x30>
    4e96:	e15d      	b.n	5154 <__aeabi_fsub+0x2ec>
    4e98:	2a00      	cmp	r2, #0
    4e9a:	d12f      	bne.n	4efc <__aeabi_fsub+0x94>
    4e9c:	2800      	cmp	r0, #0
    4e9e:	d100      	bne.n	4ea2 <__aeabi_fsub+0x3a>
    4ea0:	e090      	b.n	4fc4 <__aeabi_fsub+0x15c>
    4ea2:	1e7a      	subs	r2, r7, #1
    4ea4:	2f01      	cmp	r7, #1
    4ea6:	d100      	bne.n	4eaa <__aeabi_fsub+0x42>
    4ea8:	e11a      	b.n	50e0 <__aeabi_fsub+0x278>
    4eaa:	2fff      	cmp	r7, #255	; 0xff
    4eac:	d01c      	beq.n	4ee8 <__aeabi_fsub+0x80>
    4eae:	0017      	movs	r7, r2
    4eb0:	e029      	b.n	4f06 <__aeabi_fsub+0x9e>
    4eb2:	2f00      	cmp	r7, #0
    4eb4:	dc00      	bgt.n	4eb8 <__aeabi_fsub+0x50>
    4eb6:	e159      	b.n	516c <__aeabi_fsub+0x304>
    4eb8:	2a00      	cmp	r2, #0
    4eba:	d052      	beq.n	4f62 <__aeabi_fsub+0xfa>
    4ebc:	2dff      	cmp	r5, #255	; 0xff
    4ebe:	d013      	beq.n	4ee8 <__aeabi_fsub+0x80>
    4ec0:	2280      	movs	r2, #128	; 0x80
    4ec2:	04d2      	lsls	r2, r2, #19
    4ec4:	4310      	orrs	r0, r2
    4ec6:	2f1b      	cmp	r7, #27
    4ec8:	dc00      	bgt.n	4ecc <__aeabi_fsub+0x64>
    4eca:	e06a      	b.n	4fa2 <__aeabi_fsub+0x13a>
    4ecc:	3301      	adds	r3, #1
    4ece:	e02b      	b.n	4f28 <__aeabi_fsub+0xc0>
    4ed0:	2800      	cmp	r0, #0
    4ed2:	d03b      	beq.n	4f4c <__aeabi_fsub+0xe4>
    4ed4:	428c      	cmp	r4, r1
    4ed6:	d04d      	beq.n	4f74 <__aeabi_fsub+0x10c>
    4ed8:	2dff      	cmp	r5, #255	; 0xff
    4eda:	d100      	bne.n	4ede <__aeabi_fsub+0x76>
    4edc:	e08f      	b.n	4ffe <__aeabi_fsub+0x196>
    4ede:	2d00      	cmp	r5, #0
    4ee0:	d100      	bne.n	4ee4 <__aeabi_fsub+0x7c>
    4ee2:	e0ab      	b.n	503c <__aeabi_fsub+0x1d4>
    4ee4:	000c      	movs	r4, r1
    4ee6:	0003      	movs	r3, r0
    4ee8:	08db      	lsrs	r3, r3, #3
    4eea:	2b00      	cmp	r3, #0
    4eec:	d067      	beq.n	4fbe <__aeabi_fsub+0x156>
    4eee:	2280      	movs	r2, #128	; 0x80
    4ef0:	03d2      	lsls	r2, r2, #15
    4ef2:	4313      	orrs	r3, r2
    4ef4:	025b      	lsls	r3, r3, #9
    4ef6:	20ff      	movs	r0, #255	; 0xff
    4ef8:	0a5b      	lsrs	r3, r3, #9
    4efa:	e022      	b.n	4f42 <__aeabi_fsub+0xda>
    4efc:	2dff      	cmp	r5, #255	; 0xff
    4efe:	d0f3      	beq.n	4ee8 <__aeabi_fsub+0x80>
    4f00:	2280      	movs	r2, #128	; 0x80
    4f02:	04d2      	lsls	r2, r2, #19
    4f04:	4310      	orrs	r0, r2
    4f06:	2201      	movs	r2, #1
    4f08:	2f1b      	cmp	r7, #27
    4f0a:	dc07      	bgt.n	4f1c <__aeabi_fsub+0xb4>
    4f0c:	2120      	movs	r1, #32
    4f0e:	1bc9      	subs	r1, r1, r7
    4f10:	0002      	movs	r2, r0
    4f12:	4088      	lsls	r0, r1
    4f14:	40fa      	lsrs	r2, r7
    4f16:	1e41      	subs	r1, r0, #1
    4f18:	4188      	sbcs	r0, r1
    4f1a:	4302      	orrs	r2, r0
    4f1c:	1a9b      	subs	r3, r3, r2
    4f1e:	015a      	lsls	r2, r3, #5
    4f20:	d456      	bmi.n	4fd0 <__aeabi_fsub+0x168>
    4f22:	2207      	movs	r2, #7
    4f24:	401a      	ands	r2, r3
    4f26:	d04e      	beq.n	4fc6 <__aeabi_fsub+0x15e>
    4f28:	220f      	movs	r2, #15
    4f2a:	401a      	ands	r2, r3
    4f2c:	2a04      	cmp	r2, #4
    4f2e:	d000      	beq.n	4f32 <__aeabi_fsub+0xca>
    4f30:	3304      	adds	r3, #4
    4f32:	015a      	lsls	r2, r3, #5
    4f34:	d547      	bpl.n	4fc6 <__aeabi_fsub+0x15e>
    4f36:	1c68      	adds	r0, r5, #1
    4f38:	2dfe      	cmp	r5, #254	; 0xfe
    4f3a:	d040      	beq.n	4fbe <__aeabi_fsub+0x156>
    4f3c:	019b      	lsls	r3, r3, #6
    4f3e:	0a5b      	lsrs	r3, r3, #9
    4f40:	b2c0      	uxtb	r0, r0
    4f42:	05c0      	lsls	r0, r0, #23
    4f44:	4318      	orrs	r0, r3
    4f46:	07e4      	lsls	r4, r4, #31
    4f48:	4320      	orrs	r0, r4
    4f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f4c:	2701      	movs	r7, #1
    4f4e:	4079      	eors	r1, r7
    4f50:	428c      	cmp	r4, r1
    4f52:	d1c1      	bne.n	4ed8 <__aeabi_fsub+0x70>
    4f54:	2dff      	cmp	r5, #255	; 0xff
    4f56:	d010      	beq.n	4f7a <__aeabi_fsub+0x112>
    4f58:	2d00      	cmp	r5, #0
    4f5a:	d100      	bne.n	4f5e <__aeabi_fsub+0xf6>
    4f5c:	e0e7      	b.n	512e <__aeabi_fsub+0x2c6>
    4f5e:	2300      	movs	r3, #0
    4f60:	e7c2      	b.n	4ee8 <__aeabi_fsub+0x80>
    4f62:	2800      	cmp	r0, #0
    4f64:	d02e      	beq.n	4fc4 <__aeabi_fsub+0x15c>
    4f66:	1e7a      	subs	r2, r7, #1
    4f68:	2f01      	cmp	r7, #1
    4f6a:	d07f      	beq.n	506c <__aeabi_fsub+0x204>
    4f6c:	2fff      	cmp	r7, #255	; 0xff
    4f6e:	d0bb      	beq.n	4ee8 <__aeabi_fsub+0x80>
    4f70:	0017      	movs	r7, r2
    4f72:	e7a8      	b.n	4ec6 <__aeabi_fsub+0x5e>
    4f74:	2dff      	cmp	r5, #255	; 0xff
    4f76:	d000      	beq.n	4f7a <__aeabi_fsub+0x112>
    4f78:	e083      	b.n	5082 <__aeabi_fsub+0x21a>
    4f7a:	27fe      	movs	r7, #254	; 0xfe
    4f7c:	1c6a      	adds	r2, r5, #1
    4f7e:	4217      	tst	r7, r2
    4f80:	d000      	beq.n	4f84 <__aeabi_fsub+0x11c>
    4f82:	e08d      	b.n	50a0 <__aeabi_fsub+0x238>
    4f84:	2d00      	cmp	r5, #0
    4f86:	d000      	beq.n	4f8a <__aeabi_fsub+0x122>
    4f88:	e0ad      	b.n	50e6 <__aeabi_fsub+0x27e>
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d100      	bne.n	4f90 <__aeabi_fsub+0x128>
    4f8e:	e0d2      	b.n	5136 <__aeabi_fsub+0x2ce>
    4f90:	2800      	cmp	r0, #0
    4f92:	d000      	beq.n	4f96 <__aeabi_fsub+0x12e>
    4f94:	e0d1      	b.n	513a <__aeabi_fsub+0x2d2>
    4f96:	2500      	movs	r5, #0
    4f98:	08db      	lsrs	r3, r3, #3
    4f9a:	025b      	lsls	r3, r3, #9
    4f9c:	0a5b      	lsrs	r3, r3, #9
    4f9e:	b2e8      	uxtb	r0, r5
    4fa0:	e7cf      	b.n	4f42 <__aeabi_fsub+0xda>
    4fa2:	2120      	movs	r1, #32
    4fa4:	1bc9      	subs	r1, r1, r7
    4fa6:	0002      	movs	r2, r0
    4fa8:	4088      	lsls	r0, r1
    4faa:	40fa      	lsrs	r2, r7
    4fac:	1e41      	subs	r1, r0, #1
    4fae:	4188      	sbcs	r0, r1
    4fb0:	4310      	orrs	r0, r2
    4fb2:	181b      	adds	r3, r3, r0
    4fb4:	015a      	lsls	r2, r3, #5
    4fb6:	d5b4      	bpl.n	4f22 <__aeabi_fsub+0xba>
    4fb8:	3501      	adds	r5, #1
    4fba:	2dff      	cmp	r5, #255	; 0xff
    4fbc:	d15a      	bne.n	5074 <__aeabi_fsub+0x20c>
    4fbe:	20ff      	movs	r0, #255	; 0xff
    4fc0:	2300      	movs	r3, #0
    4fc2:	e7be      	b.n	4f42 <__aeabi_fsub+0xda>
    4fc4:	003d      	movs	r5, r7
    4fc6:	08db      	lsrs	r3, r3, #3
    4fc8:	2dff      	cmp	r5, #255	; 0xff
    4fca:	d100      	bne.n	4fce <__aeabi_fsub+0x166>
    4fcc:	e78d      	b.n	4eea <__aeabi_fsub+0x82>
    4fce:	e7e4      	b.n	4f9a <__aeabi_fsub+0x132>
    4fd0:	019e      	lsls	r6, r3, #6
    4fd2:	09b6      	lsrs	r6, r6, #6
    4fd4:	0030      	movs	r0, r6
    4fd6:	f000 f987 	bl	52e8 <__clzsi2>
    4fda:	3805      	subs	r0, #5
    4fdc:	4086      	lsls	r6, r0
    4fde:	4285      	cmp	r5, r0
    4fe0:	dc1f      	bgt.n	5022 <__aeabi_fsub+0x1ba>
    4fe2:	2220      	movs	r2, #32
    4fe4:	1b40      	subs	r0, r0, r5
    4fe6:	3001      	adds	r0, #1
    4fe8:	1a12      	subs	r2, r2, r0
    4fea:	0033      	movs	r3, r6
    4fec:	4096      	lsls	r6, r2
    4fee:	40c3      	lsrs	r3, r0
    4ff0:	1e72      	subs	r2, r6, #1
    4ff2:	4196      	sbcs	r6, r2
    4ff4:	2500      	movs	r5, #0
    4ff6:	4333      	orrs	r3, r6
    4ff8:	075a      	lsls	r2, r3, #29
    4ffa:	d195      	bne.n	4f28 <__aeabi_fsub+0xc0>
    4ffc:	e799      	b.n	4f32 <__aeabi_fsub+0xca>
    4ffe:	27fe      	movs	r7, #254	; 0xfe
    5000:	1c6a      	adds	r2, r5, #1
    5002:	4217      	tst	r7, r2
    5004:	d111      	bne.n	502a <__aeabi_fsub+0x1c2>
    5006:	2d00      	cmp	r5, #0
    5008:	d15a      	bne.n	50c0 <__aeabi_fsub+0x258>
    500a:	2b00      	cmp	r3, #0
    500c:	d100      	bne.n	5010 <__aeabi_fsub+0x1a8>
    500e:	e089      	b.n	5124 <__aeabi_fsub+0x2bc>
    5010:	2800      	cmp	r0, #0
    5012:	d0c0      	beq.n	4f96 <__aeabi_fsub+0x12e>
    5014:	1a1a      	subs	r2, r3, r0
    5016:	0156      	lsls	r6, r2, #5
    5018:	d400      	bmi.n	501c <__aeabi_fsub+0x1b4>
    501a:	e096      	b.n	514a <__aeabi_fsub+0x2e2>
    501c:	000c      	movs	r4, r1
    501e:	1ac3      	subs	r3, r0, r3
    5020:	e7ea      	b.n	4ff8 <__aeabi_fsub+0x190>
    5022:	4b58      	ldr	r3, [pc, #352]	; (5184 <__aeabi_fsub+0x31c>)
    5024:	1a2d      	subs	r5, r5, r0
    5026:	4033      	ands	r3, r6
    5028:	e7e6      	b.n	4ff8 <__aeabi_fsub+0x190>
    502a:	1a1e      	subs	r6, r3, r0
    502c:	0172      	lsls	r2, r6, #5
    502e:	d444      	bmi.n	50ba <__aeabi_fsub+0x252>
    5030:	2e00      	cmp	r6, #0
    5032:	d1cf      	bne.n	4fd4 <__aeabi_fsub+0x16c>
    5034:	2400      	movs	r4, #0
    5036:	2000      	movs	r0, #0
    5038:	2300      	movs	r3, #0
    503a:	e782      	b.n	4f42 <__aeabi_fsub+0xda>
    503c:	25ff      	movs	r5, #255	; 0xff
    503e:	2b00      	cmp	r3, #0
    5040:	d038      	beq.n	50b4 <__aeabi_fsub+0x24c>
    5042:	1e6e      	subs	r6, r5, #1
    5044:	2d01      	cmp	r5, #1
    5046:	d06a      	beq.n	511e <__aeabi_fsub+0x2b6>
    5048:	2dff      	cmp	r5, #255	; 0xff
    504a:	d100      	bne.n	504e <__aeabi_fsub+0x1e6>
    504c:	e74a      	b.n	4ee4 <__aeabi_fsub+0x7c>
    504e:	2401      	movs	r4, #1
    5050:	2e1b      	cmp	r6, #27
    5052:	dc07      	bgt.n	5064 <__aeabi_fsub+0x1fc>
    5054:	2520      	movs	r5, #32
    5056:	1bad      	subs	r5, r5, r6
    5058:	001c      	movs	r4, r3
    505a:	40ab      	lsls	r3, r5
    505c:	40f4      	lsrs	r4, r6
    505e:	1e5d      	subs	r5, r3, #1
    5060:	41ab      	sbcs	r3, r5
    5062:	431c      	orrs	r4, r3
    5064:	1b03      	subs	r3, r0, r4
    5066:	0015      	movs	r5, r2
    5068:	000c      	movs	r4, r1
    506a:	e758      	b.n	4f1e <__aeabi_fsub+0xb6>
    506c:	181b      	adds	r3, r3, r0
    506e:	2502      	movs	r5, #2
    5070:	015a      	lsls	r2, r3, #5
    5072:	d533      	bpl.n	50dc <__aeabi_fsub+0x274>
    5074:	2201      	movs	r2, #1
    5076:	4944      	ldr	r1, [pc, #272]	; (5188 <__aeabi_fsub+0x320>)
    5078:	401a      	ands	r2, r3
    507a:	085b      	lsrs	r3, r3, #1
    507c:	400b      	ands	r3, r1
    507e:	4313      	orrs	r3, r2
    5080:	e7ba      	b.n	4ff8 <__aeabi_fsub+0x190>
    5082:	2d00      	cmp	r5, #0
    5084:	d131      	bne.n	50ea <__aeabi_fsub+0x282>
    5086:	35ff      	adds	r5, #255	; 0xff
    5088:	2b00      	cmp	r3, #0
    508a:	d052      	beq.n	5132 <__aeabi_fsub+0x2ca>
    508c:	1e69      	subs	r1, r5, #1
    508e:	2d01      	cmp	r5, #1
    5090:	d020      	beq.n	50d4 <__aeabi_fsub+0x26c>
    5092:	2dff      	cmp	r5, #255	; 0xff
    5094:	d029      	beq.n	50ea <__aeabi_fsub+0x282>
    5096:	291b      	cmp	r1, #27
    5098:	dd36      	ble.n	5108 <__aeabi_fsub+0x2a0>
    509a:	0015      	movs	r5, r2
    509c:	1c43      	adds	r3, r0, #1
    509e:	e743      	b.n	4f28 <__aeabi_fsub+0xc0>
    50a0:	2aff      	cmp	r2, #255	; 0xff
    50a2:	d08c      	beq.n	4fbe <__aeabi_fsub+0x156>
    50a4:	181b      	adds	r3, r3, r0
    50a6:	085b      	lsrs	r3, r3, #1
    50a8:	0015      	movs	r5, r2
    50aa:	075a      	lsls	r2, r3, #29
    50ac:	d000      	beq.n	50b0 <__aeabi_fsub+0x248>
    50ae:	e73b      	b.n	4f28 <__aeabi_fsub+0xc0>
    50b0:	08db      	lsrs	r3, r3, #3
    50b2:	e772      	b.n	4f9a <__aeabi_fsub+0x132>
    50b4:	000c      	movs	r4, r1
    50b6:	0003      	movs	r3, r0
    50b8:	e785      	b.n	4fc6 <__aeabi_fsub+0x15e>
    50ba:	000c      	movs	r4, r1
    50bc:	1ac6      	subs	r6, r0, r3
    50be:	e789      	b.n	4fd4 <__aeabi_fsub+0x16c>
    50c0:	2b00      	cmp	r3, #0
    50c2:	d114      	bne.n	50ee <__aeabi_fsub+0x286>
    50c4:	2800      	cmp	r0, #0
    50c6:	d000      	beq.n	50ca <__aeabi_fsub+0x262>
    50c8:	e70c      	b.n	4ee4 <__aeabi_fsub+0x7c>
    50ca:	2380      	movs	r3, #128	; 0x80
    50cc:	2400      	movs	r4, #0
    50ce:	20ff      	movs	r0, #255	; 0xff
    50d0:	03db      	lsls	r3, r3, #15
    50d2:	e736      	b.n	4f42 <__aeabi_fsub+0xda>
    50d4:	181b      	adds	r3, r3, r0
    50d6:	3501      	adds	r5, #1
    50d8:	015a      	lsls	r2, r3, #5
    50da:	d4cb      	bmi.n	5074 <__aeabi_fsub+0x20c>
    50dc:	3d01      	subs	r5, #1
    50de:	e720      	b.n	4f22 <__aeabi_fsub+0xba>
    50e0:	2501      	movs	r5, #1
    50e2:	1a1b      	subs	r3, r3, r0
    50e4:	e71b      	b.n	4f1e <__aeabi_fsub+0xb6>
    50e6:	2b00      	cmp	r3, #0
    50e8:	d101      	bne.n	50ee <__aeabi_fsub+0x286>
    50ea:	0003      	movs	r3, r0
    50ec:	e6fc      	b.n	4ee8 <__aeabi_fsub+0x80>
    50ee:	2800      	cmp	r0, #0
    50f0:	d100      	bne.n	50f4 <__aeabi_fsub+0x28c>
    50f2:	e6f9      	b.n	4ee8 <__aeabi_fsub+0x80>
    50f4:	2280      	movs	r2, #128	; 0x80
    50f6:	03d2      	lsls	r2, r2, #15
    50f8:	4296      	cmp	r6, r2
    50fa:	d303      	bcc.n	5104 <__aeabi_fsub+0x29c>
    50fc:	4594      	cmp	ip, r2
    50fe:	d201      	bcs.n	5104 <__aeabi_fsub+0x29c>
    5100:	000c      	movs	r4, r1
    5102:	0003      	movs	r3, r0
    5104:	08db      	lsrs	r3, r3, #3
    5106:	e6f2      	b.n	4eee <__aeabi_fsub+0x86>
    5108:	001d      	movs	r5, r3
    510a:	2620      	movs	r6, #32
    510c:	40cd      	lsrs	r5, r1
    510e:	1a71      	subs	r1, r6, r1
    5110:	408b      	lsls	r3, r1
    5112:	1e59      	subs	r1, r3, #1
    5114:	418b      	sbcs	r3, r1
    5116:	432b      	orrs	r3, r5
    5118:	181b      	adds	r3, r3, r0
    511a:	0015      	movs	r5, r2
    511c:	e74a      	b.n	4fb4 <__aeabi_fsub+0x14c>
    511e:	000c      	movs	r4, r1
    5120:	1ac3      	subs	r3, r0, r3
    5122:	e6fc      	b.n	4f1e <__aeabi_fsub+0xb6>
    5124:	2800      	cmp	r0, #0
    5126:	d085      	beq.n	5034 <__aeabi_fsub+0x1cc>
    5128:	000c      	movs	r4, r1
    512a:	0003      	movs	r3, r0
    512c:	e733      	b.n	4f96 <__aeabi_fsub+0x12e>
    512e:	25ff      	movs	r5, #255	; 0xff
    5130:	e7aa      	b.n	5088 <__aeabi_fsub+0x220>
    5132:	0003      	movs	r3, r0
    5134:	e747      	b.n	4fc6 <__aeabi_fsub+0x15e>
    5136:	0003      	movs	r3, r0
    5138:	e72d      	b.n	4f96 <__aeabi_fsub+0x12e>
    513a:	181b      	adds	r3, r3, r0
    513c:	015a      	lsls	r2, r3, #5
    513e:	d5b7      	bpl.n	50b0 <__aeabi_fsub+0x248>
    5140:	4a10      	ldr	r2, [pc, #64]	; (5184 <__aeabi_fsub+0x31c>)
    5142:	3501      	adds	r5, #1
    5144:	4013      	ands	r3, r2
    5146:	08db      	lsrs	r3, r3, #3
    5148:	e727      	b.n	4f9a <__aeabi_fsub+0x132>
    514a:	1e13      	subs	r3, r2, #0
    514c:	d100      	bne.n	5150 <__aeabi_fsub+0x2e8>
    514e:	e771      	b.n	5034 <__aeabi_fsub+0x1cc>
    5150:	08db      	lsrs	r3, r3, #3
    5152:	e722      	b.n	4f9a <__aeabi_fsub+0x132>
    5154:	2f00      	cmp	r7, #0
    5156:	d100      	bne.n	515a <__aeabi_fsub+0x2f2>
    5158:	e751      	b.n	4ffe <__aeabi_fsub+0x196>
    515a:	1b56      	subs	r6, r2, r5
    515c:	2d00      	cmp	r5, #0
    515e:	d101      	bne.n	5164 <__aeabi_fsub+0x2fc>
    5160:	0035      	movs	r5, r6
    5162:	e76c      	b.n	503e <__aeabi_fsub+0x1d6>
    5164:	2480      	movs	r4, #128	; 0x80
    5166:	04e4      	lsls	r4, r4, #19
    5168:	4323      	orrs	r3, r4
    516a:	e770      	b.n	504e <__aeabi_fsub+0x1e6>
    516c:	2f00      	cmp	r7, #0
    516e:	d100      	bne.n	5172 <__aeabi_fsub+0x30a>
    5170:	e703      	b.n	4f7a <__aeabi_fsub+0x112>
    5172:	1b51      	subs	r1, r2, r5
    5174:	2d00      	cmp	r5, #0
    5176:	d101      	bne.n	517c <__aeabi_fsub+0x314>
    5178:	000d      	movs	r5, r1
    517a:	e785      	b.n	5088 <__aeabi_fsub+0x220>
    517c:	2580      	movs	r5, #128	; 0x80
    517e:	04ed      	lsls	r5, r5, #19
    5180:	432b      	orrs	r3, r5
    5182:	e788      	b.n	5096 <__aeabi_fsub+0x22e>
    5184:	fbffffff 	.word	0xfbffffff
    5188:	7dffffff 	.word	0x7dffffff

0000518c <__aeabi_f2iz>:
    518c:	0241      	lsls	r1, r0, #9
    518e:	0042      	lsls	r2, r0, #1
    5190:	0fc3      	lsrs	r3, r0, #31
    5192:	0a49      	lsrs	r1, r1, #9
    5194:	2000      	movs	r0, #0
    5196:	0e12      	lsrs	r2, r2, #24
    5198:	2a7e      	cmp	r2, #126	; 0x7e
    519a:	dd03      	ble.n	51a4 <__aeabi_f2iz+0x18>
    519c:	2a9d      	cmp	r2, #157	; 0x9d
    519e:	dd02      	ble.n	51a6 <__aeabi_f2iz+0x1a>
    51a0:	4a09      	ldr	r2, [pc, #36]	; (51c8 <__aeabi_f2iz+0x3c>)
    51a2:	1898      	adds	r0, r3, r2
    51a4:	4770      	bx	lr
    51a6:	2080      	movs	r0, #128	; 0x80
    51a8:	0400      	lsls	r0, r0, #16
    51aa:	4301      	orrs	r1, r0
    51ac:	2a95      	cmp	r2, #149	; 0x95
    51ae:	dc07      	bgt.n	51c0 <__aeabi_f2iz+0x34>
    51b0:	2096      	movs	r0, #150	; 0x96
    51b2:	1a82      	subs	r2, r0, r2
    51b4:	40d1      	lsrs	r1, r2
    51b6:	4248      	negs	r0, r1
    51b8:	2b00      	cmp	r3, #0
    51ba:	d1f3      	bne.n	51a4 <__aeabi_f2iz+0x18>
    51bc:	0008      	movs	r0, r1
    51be:	e7f1      	b.n	51a4 <__aeabi_f2iz+0x18>
    51c0:	3a96      	subs	r2, #150	; 0x96
    51c2:	4091      	lsls	r1, r2
    51c4:	e7f7      	b.n	51b6 <__aeabi_f2iz+0x2a>
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	7fffffff 	.word	0x7fffffff

000051cc <__aeabi_i2f>:
    51cc:	b570      	push	{r4, r5, r6, lr}
    51ce:	2800      	cmp	r0, #0
    51d0:	d013      	beq.n	51fa <__aeabi_i2f+0x2e>
    51d2:	17c3      	asrs	r3, r0, #31
    51d4:	18c5      	adds	r5, r0, r3
    51d6:	405d      	eors	r5, r3
    51d8:	0fc4      	lsrs	r4, r0, #31
    51da:	0028      	movs	r0, r5
    51dc:	f000 f884 	bl	52e8 <__clzsi2>
    51e0:	239e      	movs	r3, #158	; 0x9e
    51e2:	0001      	movs	r1, r0
    51e4:	1a1b      	subs	r3, r3, r0
    51e6:	2b96      	cmp	r3, #150	; 0x96
    51e8:	dc0f      	bgt.n	520a <__aeabi_i2f+0x3e>
    51ea:	2808      	cmp	r0, #8
    51ec:	d034      	beq.n	5258 <__aeabi_i2f+0x8c>
    51ee:	3908      	subs	r1, #8
    51f0:	408d      	lsls	r5, r1
    51f2:	026d      	lsls	r5, r5, #9
    51f4:	0a6d      	lsrs	r5, r5, #9
    51f6:	b2d8      	uxtb	r0, r3
    51f8:	e002      	b.n	5200 <__aeabi_i2f+0x34>
    51fa:	2400      	movs	r4, #0
    51fc:	2000      	movs	r0, #0
    51fe:	2500      	movs	r5, #0
    5200:	05c0      	lsls	r0, r0, #23
    5202:	4328      	orrs	r0, r5
    5204:	07e4      	lsls	r4, r4, #31
    5206:	4320      	orrs	r0, r4
    5208:	bd70      	pop	{r4, r5, r6, pc}
    520a:	2b99      	cmp	r3, #153	; 0x99
    520c:	dc16      	bgt.n	523c <__aeabi_i2f+0x70>
    520e:	1f42      	subs	r2, r0, #5
    5210:	2805      	cmp	r0, #5
    5212:	d000      	beq.n	5216 <__aeabi_i2f+0x4a>
    5214:	4095      	lsls	r5, r2
    5216:	002a      	movs	r2, r5
    5218:	4811      	ldr	r0, [pc, #68]	; (5260 <__aeabi_i2f+0x94>)
    521a:	4002      	ands	r2, r0
    521c:	076e      	lsls	r6, r5, #29
    521e:	d009      	beq.n	5234 <__aeabi_i2f+0x68>
    5220:	260f      	movs	r6, #15
    5222:	4035      	ands	r5, r6
    5224:	2d04      	cmp	r5, #4
    5226:	d005      	beq.n	5234 <__aeabi_i2f+0x68>
    5228:	3204      	adds	r2, #4
    522a:	0155      	lsls	r5, r2, #5
    522c:	d502      	bpl.n	5234 <__aeabi_i2f+0x68>
    522e:	239f      	movs	r3, #159	; 0x9f
    5230:	4002      	ands	r2, r0
    5232:	1a5b      	subs	r3, r3, r1
    5234:	0192      	lsls	r2, r2, #6
    5236:	0a55      	lsrs	r5, r2, #9
    5238:	b2d8      	uxtb	r0, r3
    523a:	e7e1      	b.n	5200 <__aeabi_i2f+0x34>
    523c:	2205      	movs	r2, #5
    523e:	1a12      	subs	r2, r2, r0
    5240:	0028      	movs	r0, r5
    5242:	40d0      	lsrs	r0, r2
    5244:	0002      	movs	r2, r0
    5246:	0008      	movs	r0, r1
    5248:	301b      	adds	r0, #27
    524a:	4085      	lsls	r5, r0
    524c:	0028      	movs	r0, r5
    524e:	1e45      	subs	r5, r0, #1
    5250:	41a8      	sbcs	r0, r5
    5252:	4302      	orrs	r2, r0
    5254:	0015      	movs	r5, r2
    5256:	e7de      	b.n	5216 <__aeabi_i2f+0x4a>
    5258:	026d      	lsls	r5, r5, #9
    525a:	2096      	movs	r0, #150	; 0x96
    525c:	0a6d      	lsrs	r5, r5, #9
    525e:	e7cf      	b.n	5200 <__aeabi_i2f+0x34>
    5260:	fbffffff 	.word	0xfbffffff

00005264 <__aeabi_ui2f>:
    5264:	b570      	push	{r4, r5, r6, lr}
    5266:	1e04      	subs	r4, r0, #0
    5268:	d00e      	beq.n	5288 <__aeabi_ui2f+0x24>
    526a:	f000 f83d 	bl	52e8 <__clzsi2>
    526e:	239e      	movs	r3, #158	; 0x9e
    5270:	0001      	movs	r1, r0
    5272:	1a1b      	subs	r3, r3, r0
    5274:	2b96      	cmp	r3, #150	; 0x96
    5276:	dc0c      	bgt.n	5292 <__aeabi_ui2f+0x2e>
    5278:	2808      	cmp	r0, #8
    527a:	d02f      	beq.n	52dc <__aeabi_ui2f+0x78>
    527c:	3908      	subs	r1, #8
    527e:	408c      	lsls	r4, r1
    5280:	0264      	lsls	r4, r4, #9
    5282:	0a64      	lsrs	r4, r4, #9
    5284:	b2d8      	uxtb	r0, r3
    5286:	e001      	b.n	528c <__aeabi_ui2f+0x28>
    5288:	2000      	movs	r0, #0
    528a:	2400      	movs	r4, #0
    528c:	05c0      	lsls	r0, r0, #23
    528e:	4320      	orrs	r0, r4
    5290:	bd70      	pop	{r4, r5, r6, pc}
    5292:	2b99      	cmp	r3, #153	; 0x99
    5294:	dc16      	bgt.n	52c4 <__aeabi_ui2f+0x60>
    5296:	1f42      	subs	r2, r0, #5
    5298:	2805      	cmp	r0, #5
    529a:	d000      	beq.n	529e <__aeabi_ui2f+0x3a>
    529c:	4094      	lsls	r4, r2
    529e:	0022      	movs	r2, r4
    52a0:	4810      	ldr	r0, [pc, #64]	; (52e4 <__aeabi_ui2f+0x80>)
    52a2:	4002      	ands	r2, r0
    52a4:	0765      	lsls	r5, r4, #29
    52a6:	d009      	beq.n	52bc <__aeabi_ui2f+0x58>
    52a8:	250f      	movs	r5, #15
    52aa:	402c      	ands	r4, r5
    52ac:	2c04      	cmp	r4, #4
    52ae:	d005      	beq.n	52bc <__aeabi_ui2f+0x58>
    52b0:	3204      	adds	r2, #4
    52b2:	0154      	lsls	r4, r2, #5
    52b4:	d502      	bpl.n	52bc <__aeabi_ui2f+0x58>
    52b6:	239f      	movs	r3, #159	; 0x9f
    52b8:	4002      	ands	r2, r0
    52ba:	1a5b      	subs	r3, r3, r1
    52bc:	0192      	lsls	r2, r2, #6
    52be:	0a54      	lsrs	r4, r2, #9
    52c0:	b2d8      	uxtb	r0, r3
    52c2:	e7e3      	b.n	528c <__aeabi_ui2f+0x28>
    52c4:	0002      	movs	r2, r0
    52c6:	0020      	movs	r0, r4
    52c8:	321b      	adds	r2, #27
    52ca:	4090      	lsls	r0, r2
    52cc:	0002      	movs	r2, r0
    52ce:	1e50      	subs	r0, r2, #1
    52d0:	4182      	sbcs	r2, r0
    52d2:	2005      	movs	r0, #5
    52d4:	1a40      	subs	r0, r0, r1
    52d6:	40c4      	lsrs	r4, r0
    52d8:	4314      	orrs	r4, r2
    52da:	e7e0      	b.n	529e <__aeabi_ui2f+0x3a>
    52dc:	0264      	lsls	r4, r4, #9
    52de:	2096      	movs	r0, #150	; 0x96
    52e0:	0a64      	lsrs	r4, r4, #9
    52e2:	e7d3      	b.n	528c <__aeabi_ui2f+0x28>
    52e4:	fbffffff 	.word	0xfbffffff

000052e8 <__clzsi2>:
    52e8:	211c      	movs	r1, #28
    52ea:	2301      	movs	r3, #1
    52ec:	041b      	lsls	r3, r3, #16
    52ee:	4298      	cmp	r0, r3
    52f0:	d301      	bcc.n	52f6 <__clzsi2+0xe>
    52f2:	0c00      	lsrs	r0, r0, #16
    52f4:	3910      	subs	r1, #16
    52f6:	0a1b      	lsrs	r3, r3, #8
    52f8:	4298      	cmp	r0, r3
    52fa:	d301      	bcc.n	5300 <__clzsi2+0x18>
    52fc:	0a00      	lsrs	r0, r0, #8
    52fe:	3908      	subs	r1, #8
    5300:	091b      	lsrs	r3, r3, #4
    5302:	4298      	cmp	r0, r3
    5304:	d301      	bcc.n	530a <__clzsi2+0x22>
    5306:	0900      	lsrs	r0, r0, #4
    5308:	3904      	subs	r1, #4
    530a:	a202      	add	r2, pc, #8	; (adr r2, 5314 <__clzsi2+0x2c>)
    530c:	5c10      	ldrb	r0, [r2, r0]
    530e:	1840      	adds	r0, r0, r1
    5310:	4770      	bx	lr
    5312:	46c0      	nop			; (mov r8, r8)
    5314:	02020304 	.word	0x02020304
    5318:	01010101 	.word	0x01010101
	...

00005324 <memset>:
    5324:	b5f0      	push	{r4, r5, r6, r7, lr}
    5326:	0005      	movs	r5, r0
    5328:	0783      	lsls	r3, r0, #30
    532a:	d049      	beq.n	53c0 <memset+0x9c>
    532c:	1e54      	subs	r4, r2, #1
    532e:	2a00      	cmp	r2, #0
    5330:	d045      	beq.n	53be <memset+0x9a>
    5332:	0003      	movs	r3, r0
    5334:	2603      	movs	r6, #3
    5336:	b2ca      	uxtb	r2, r1
    5338:	e002      	b.n	5340 <memset+0x1c>
    533a:	3501      	adds	r5, #1
    533c:	3c01      	subs	r4, #1
    533e:	d33e      	bcc.n	53be <memset+0x9a>
    5340:	3301      	adds	r3, #1
    5342:	702a      	strb	r2, [r5, #0]
    5344:	4233      	tst	r3, r6
    5346:	d1f8      	bne.n	533a <memset+0x16>
    5348:	2c03      	cmp	r4, #3
    534a:	d930      	bls.n	53ae <memset+0x8a>
    534c:	22ff      	movs	r2, #255	; 0xff
    534e:	400a      	ands	r2, r1
    5350:	0215      	lsls	r5, r2, #8
    5352:	18ad      	adds	r5, r5, r2
    5354:	042a      	lsls	r2, r5, #16
    5356:	18ad      	adds	r5, r5, r2
    5358:	2c0f      	cmp	r4, #15
    535a:	d934      	bls.n	53c6 <memset+0xa2>
    535c:	0027      	movs	r7, r4
    535e:	3f10      	subs	r7, #16
    5360:	093f      	lsrs	r7, r7, #4
    5362:	013e      	lsls	r6, r7, #4
    5364:	46b4      	mov	ip, r6
    5366:	001e      	movs	r6, r3
    5368:	001a      	movs	r2, r3
    536a:	3610      	adds	r6, #16
    536c:	4466      	add	r6, ip
    536e:	6015      	str	r5, [r2, #0]
    5370:	6055      	str	r5, [r2, #4]
    5372:	6095      	str	r5, [r2, #8]
    5374:	60d5      	str	r5, [r2, #12]
    5376:	3210      	adds	r2, #16
    5378:	4296      	cmp	r6, r2
    537a:	d1f8      	bne.n	536e <memset+0x4a>
    537c:	3701      	adds	r7, #1
    537e:	013f      	lsls	r7, r7, #4
    5380:	19db      	adds	r3, r3, r7
    5382:	270f      	movs	r7, #15
    5384:	220c      	movs	r2, #12
    5386:	4027      	ands	r7, r4
    5388:	4022      	ands	r2, r4
    538a:	003c      	movs	r4, r7
    538c:	2a00      	cmp	r2, #0
    538e:	d00e      	beq.n	53ae <memset+0x8a>
    5390:	1f3e      	subs	r6, r7, #4
    5392:	08b6      	lsrs	r6, r6, #2
    5394:	00b4      	lsls	r4, r6, #2
    5396:	46a4      	mov	ip, r4
    5398:	001a      	movs	r2, r3
    539a:	1d1c      	adds	r4, r3, #4
    539c:	4464      	add	r4, ip
    539e:	c220      	stmia	r2!, {r5}
    53a0:	42a2      	cmp	r2, r4
    53a2:	d1fc      	bne.n	539e <memset+0x7a>
    53a4:	2403      	movs	r4, #3
    53a6:	3601      	adds	r6, #1
    53a8:	00b6      	lsls	r6, r6, #2
    53aa:	199b      	adds	r3, r3, r6
    53ac:	403c      	ands	r4, r7
    53ae:	2c00      	cmp	r4, #0
    53b0:	d005      	beq.n	53be <memset+0x9a>
    53b2:	b2c9      	uxtb	r1, r1
    53b4:	191c      	adds	r4, r3, r4
    53b6:	7019      	strb	r1, [r3, #0]
    53b8:	3301      	adds	r3, #1
    53ba:	429c      	cmp	r4, r3
    53bc:	d1fb      	bne.n	53b6 <memset+0x92>
    53be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53c0:	0003      	movs	r3, r0
    53c2:	0014      	movs	r4, r2
    53c4:	e7c0      	b.n	5348 <memset+0x24>
    53c6:	0027      	movs	r7, r4
    53c8:	e7e2      	b.n	5390 <memset+0x6c>
    53ca:	46c0      	nop			; (mov r8, r8)

000053cc <__libc_init_array>:
    53cc:	b570      	push	{r4, r5, r6, lr}
    53ce:	4b0d      	ldr	r3, [pc, #52]	; (5404 <__libc_init_array+0x38>)
    53d0:	4d0d      	ldr	r5, [pc, #52]	; (5408 <__libc_init_array+0x3c>)
    53d2:	1b5e      	subs	r6, r3, r5
    53d4:	10b6      	asrs	r6, r6, #2
    53d6:	42ab      	cmp	r3, r5
    53d8:	d005      	beq.n	53e6 <__libc_init_array+0x1a>
    53da:	2400      	movs	r4, #0
    53dc:	cd08      	ldmia	r5!, {r3}
    53de:	3401      	adds	r4, #1
    53e0:	4798      	blx	r3
    53e2:	42a6      	cmp	r6, r4
    53e4:	d8fa      	bhi.n	53dc <__libc_init_array+0x10>
    53e6:	f000 fb3b 	bl	5a60 <_init>
    53ea:	4b08      	ldr	r3, [pc, #32]	; (540c <__libc_init_array+0x40>)
    53ec:	4d08      	ldr	r5, [pc, #32]	; (5410 <__libc_init_array+0x44>)
    53ee:	1b5e      	subs	r6, r3, r5
    53f0:	10b6      	asrs	r6, r6, #2
    53f2:	42ab      	cmp	r3, r5
    53f4:	d005      	beq.n	5402 <__libc_init_array+0x36>
    53f6:	2400      	movs	r4, #0
    53f8:	cd08      	ldmia	r5!, {r3}
    53fa:	3401      	adds	r4, #1
    53fc:	4798      	blx	r3
    53fe:	42a6      	cmp	r6, r4
    5400:	d8fa      	bhi.n	53f8 <__libc_init_array+0x2c>
    5402:	bd70      	pop	{r4, r5, r6, pc}
    5404:	00005a6c 	.word	0x00005a6c
    5408:	00005a6c 	.word	0x00005a6c
    540c:	00005a74 	.word	0x00005a74
    5410:	00005a6c 	.word	0x00005a6c

00005414 <__retarget_lock_acquire_recursive>:
    5414:	4770      	bx	lr
    5416:	46c0      	nop			; (mov r8, r8)

00005418 <__retarget_lock_release_recursive>:
    5418:	4770      	bx	lr
    541a:	46c0      	nop			; (mov r8, r8)

0000541c <memcpy>:
    541c:	b5f0      	push	{r4, r5, r6, r7, lr}
    541e:	0005      	movs	r5, r0
    5420:	2a0f      	cmp	r2, #15
    5422:	d933      	bls.n	548c <memcpy+0x70>
    5424:	2403      	movs	r4, #3
    5426:	0003      	movs	r3, r0
    5428:	0026      	movs	r6, r4
    542a:	430b      	orrs	r3, r1
    542c:	401e      	ands	r6, r3
    542e:	421c      	tst	r4, r3
    5430:	d137      	bne.n	54a2 <memcpy+0x86>
    5432:	0015      	movs	r5, r2
    5434:	3d10      	subs	r5, #16
    5436:	092d      	lsrs	r5, r5, #4
    5438:	0003      	movs	r3, r0
    543a:	000c      	movs	r4, r1
    543c:	46ac      	mov	ip, r5
    543e:	012f      	lsls	r7, r5, #4
    5440:	183f      	adds	r7, r7, r0
    5442:	6865      	ldr	r5, [r4, #4]
    5444:	605d      	str	r5, [r3, #4]
    5446:	68a5      	ldr	r5, [r4, #8]
    5448:	609d      	str	r5, [r3, #8]
    544a:	68e5      	ldr	r5, [r4, #12]
    544c:	60dd      	str	r5, [r3, #12]
    544e:	6825      	ldr	r5, [r4, #0]
    5450:	3410      	adds	r4, #16
    5452:	601d      	str	r5, [r3, #0]
    5454:	001d      	movs	r5, r3
    5456:	3310      	adds	r3, #16
    5458:	42bd      	cmp	r5, r7
    545a:	d1f2      	bne.n	5442 <memcpy+0x26>
    545c:	4665      	mov	r5, ip
    545e:	230f      	movs	r3, #15
    5460:	240c      	movs	r4, #12
    5462:	3501      	adds	r5, #1
    5464:	012d      	lsls	r5, r5, #4
    5466:	1949      	adds	r1, r1, r5
    5468:	4013      	ands	r3, r2
    546a:	1945      	adds	r5, r0, r5
    546c:	4214      	tst	r4, r2
    546e:	d01a      	beq.n	54a6 <memcpy+0x8a>
    5470:	598c      	ldr	r4, [r1, r6]
    5472:	51ac      	str	r4, [r5, r6]
    5474:	3604      	adds	r6, #4
    5476:	1b9c      	subs	r4, r3, r6
    5478:	2c03      	cmp	r4, #3
    547a:	d8f9      	bhi.n	5470 <memcpy+0x54>
    547c:	3b04      	subs	r3, #4
    547e:	089b      	lsrs	r3, r3, #2
    5480:	3301      	adds	r3, #1
    5482:	009b      	lsls	r3, r3, #2
    5484:	18ed      	adds	r5, r5, r3
    5486:	18c9      	adds	r1, r1, r3
    5488:	2303      	movs	r3, #3
    548a:	401a      	ands	r2, r3
    548c:	1e56      	subs	r6, r2, #1
    548e:	2a00      	cmp	r2, #0
    5490:	d006      	beq.n	54a0 <memcpy+0x84>
    5492:	2300      	movs	r3, #0
    5494:	5ccc      	ldrb	r4, [r1, r3]
    5496:	001a      	movs	r2, r3
    5498:	54ec      	strb	r4, [r5, r3]
    549a:	3301      	adds	r3, #1
    549c:	4296      	cmp	r6, r2
    549e:	d1f9      	bne.n	5494 <memcpy+0x78>
    54a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54a2:	1e56      	subs	r6, r2, #1
    54a4:	e7f5      	b.n	5492 <memcpy+0x76>
    54a6:	001a      	movs	r2, r3
    54a8:	e7f0      	b.n	548c <memcpy+0x70>
    54aa:	46c0      	nop			; (mov r8, r8)

000054ac <strlen>:
    54ac:	b510      	push	{r4, lr}
    54ae:	0783      	lsls	r3, r0, #30
    54b0:	d00a      	beq.n	54c8 <strlen+0x1c>
    54b2:	0003      	movs	r3, r0
    54b4:	2103      	movs	r1, #3
    54b6:	e002      	b.n	54be <strlen+0x12>
    54b8:	3301      	adds	r3, #1
    54ba:	420b      	tst	r3, r1
    54bc:	d005      	beq.n	54ca <strlen+0x1e>
    54be:	781a      	ldrb	r2, [r3, #0]
    54c0:	2a00      	cmp	r2, #0
    54c2:	d1f9      	bne.n	54b8 <strlen+0xc>
    54c4:	1a18      	subs	r0, r3, r0
    54c6:	bd10      	pop	{r4, pc}
    54c8:	0003      	movs	r3, r0
    54ca:	6819      	ldr	r1, [r3, #0]
    54cc:	4a0c      	ldr	r2, [pc, #48]	; (5500 <strlen+0x54>)
    54ce:	4c0d      	ldr	r4, [pc, #52]	; (5504 <strlen+0x58>)
    54d0:	188a      	adds	r2, r1, r2
    54d2:	438a      	bics	r2, r1
    54d4:	4222      	tst	r2, r4
    54d6:	d10f      	bne.n	54f8 <strlen+0x4c>
    54d8:	6859      	ldr	r1, [r3, #4]
    54da:	4a09      	ldr	r2, [pc, #36]	; (5500 <strlen+0x54>)
    54dc:	3304      	adds	r3, #4
    54de:	188a      	adds	r2, r1, r2
    54e0:	438a      	bics	r2, r1
    54e2:	4222      	tst	r2, r4
    54e4:	d108      	bne.n	54f8 <strlen+0x4c>
    54e6:	6859      	ldr	r1, [r3, #4]
    54e8:	4a05      	ldr	r2, [pc, #20]	; (5500 <strlen+0x54>)
    54ea:	3304      	adds	r3, #4
    54ec:	188a      	adds	r2, r1, r2
    54ee:	438a      	bics	r2, r1
    54f0:	4222      	tst	r2, r4
    54f2:	d0f1      	beq.n	54d8 <strlen+0x2c>
    54f4:	e000      	b.n	54f8 <strlen+0x4c>
    54f6:	3301      	adds	r3, #1
    54f8:	781a      	ldrb	r2, [r3, #0]
    54fa:	2a00      	cmp	r2, #0
    54fc:	d1fb      	bne.n	54f6 <strlen+0x4a>
    54fe:	e7e1      	b.n	54c4 <strlen+0x18>
    5500:	fefefeff 	.word	0xfefefeff
    5504:	80808080 	.word	0x80808080

00005508 <register_fini>:
    5508:	4b03      	ldr	r3, [pc, #12]	; (5518 <register_fini+0x10>)
    550a:	b510      	push	{r4, lr}
    550c:	2b00      	cmp	r3, #0
    550e:	d002      	beq.n	5516 <register_fini+0xe>
    5510:	4802      	ldr	r0, [pc, #8]	; (551c <register_fini+0x14>)
    5512:	f000 f805 	bl	5520 <atexit>
    5516:	bd10      	pop	{r4, pc}
    5518:	00000000 	.word	0x00000000
    551c:	00005531 	.word	0x00005531

00005520 <atexit>:
    5520:	b510      	push	{r4, lr}
    5522:	0001      	movs	r1, r0
    5524:	2300      	movs	r3, #0
    5526:	2200      	movs	r2, #0
    5528:	2000      	movs	r0, #0
    552a:	f000 f815 	bl	5558 <__register_exitproc>
    552e:	bd10      	pop	{r4, pc}

00005530 <__libc_fini_array>:
    5530:	b570      	push	{r4, r5, r6, lr}
    5532:	4c07      	ldr	r4, [pc, #28]	; (5550 <__libc_fini_array+0x20>)
    5534:	4d07      	ldr	r5, [pc, #28]	; (5554 <__libc_fini_array+0x24>)
    5536:	1b64      	subs	r4, r4, r5
    5538:	10a4      	asrs	r4, r4, #2
    553a:	d005      	beq.n	5548 <__libc_fini_array+0x18>
    553c:	3c01      	subs	r4, #1
    553e:	00a3      	lsls	r3, r4, #2
    5540:	58eb      	ldr	r3, [r5, r3]
    5542:	4798      	blx	r3
    5544:	2c00      	cmp	r4, #0
    5546:	d1f9      	bne.n	553c <__libc_fini_array+0xc>
    5548:	f000 fa94 	bl	5a74 <_fini>
    554c:	bd70      	pop	{r4, r5, r6, pc}
    554e:	46c0      	nop			; (mov r8, r8)
    5550:	00005a84 	.word	0x00005a84
    5554:	00005a80 	.word	0x00005a80

00005558 <__register_exitproc>:
    5558:	b5f0      	push	{r4, r5, r6, r7, lr}
    555a:	46d6      	mov	lr, sl
    555c:	464f      	mov	r7, r9
    555e:	4646      	mov	r6, r8
    5560:	4698      	mov	r8, r3
    5562:	4b22      	ldr	r3, [pc, #136]	; (55ec <__register_exitproc+0x94>)
    5564:	b5c0      	push	{r6, r7, lr}
    5566:	0006      	movs	r6, r0
    5568:	6818      	ldr	r0, [r3, #0]
    556a:	4699      	mov	r9, r3
    556c:	000f      	movs	r7, r1
    556e:	4692      	mov	sl, r2
    5570:	f7ff ff50 	bl	5414 <__retarget_lock_acquire_recursive>
    5574:	4b1e      	ldr	r3, [pc, #120]	; (55f0 <__register_exitproc+0x98>)
    5576:	681d      	ldr	r5, [r3, #0]
    5578:	2d00      	cmp	r5, #0
    557a:	d02d      	beq.n	55d8 <__register_exitproc+0x80>
    557c:	686c      	ldr	r4, [r5, #4]
    557e:	2c1f      	cmp	r4, #31
    5580:	dc2d      	bgt.n	55de <__register_exitproc+0x86>
    5582:	2e00      	cmp	r6, #0
    5584:	d10e      	bne.n	55a4 <__register_exitproc+0x4c>
    5586:	1c63      	adds	r3, r4, #1
    5588:	606b      	str	r3, [r5, #4]
    558a:	464b      	mov	r3, r9
    558c:	3402      	adds	r4, #2
    558e:	00a4      	lsls	r4, r4, #2
    5590:	6818      	ldr	r0, [r3, #0]
    5592:	5167      	str	r7, [r4, r5]
    5594:	f7ff ff40 	bl	5418 <__retarget_lock_release_recursive>
    5598:	2000      	movs	r0, #0
    559a:	bce0      	pop	{r5, r6, r7}
    559c:	46ba      	mov	sl, r7
    559e:	46b1      	mov	r9, r6
    55a0:	46a8      	mov	r8, r5
    55a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55a4:	2288      	movs	r2, #136	; 0x88
    55a6:	4651      	mov	r1, sl
    55a8:	0028      	movs	r0, r5
    55aa:	00a3      	lsls	r3, r4, #2
    55ac:	18eb      	adds	r3, r5, r3
    55ae:	5099      	str	r1, [r3, r2]
    55b0:	3a87      	subs	r2, #135	; 0x87
    55b2:	40a2      	lsls	r2, r4
    55b4:	3089      	adds	r0, #137	; 0x89
    55b6:	30ff      	adds	r0, #255	; 0xff
    55b8:	6801      	ldr	r1, [r0, #0]
    55ba:	4311      	orrs	r1, r2
    55bc:	6001      	str	r1, [r0, #0]
    55be:	2184      	movs	r1, #132	; 0x84
    55c0:	4640      	mov	r0, r8
    55c2:	0049      	lsls	r1, r1, #1
    55c4:	5058      	str	r0, [r3, r1]
    55c6:	2e02      	cmp	r6, #2
    55c8:	d1dd      	bne.n	5586 <__register_exitproc+0x2e>
    55ca:	0029      	movs	r1, r5
    55cc:	318d      	adds	r1, #141	; 0x8d
    55ce:	31ff      	adds	r1, #255	; 0xff
    55d0:	680b      	ldr	r3, [r1, #0]
    55d2:	4313      	orrs	r3, r2
    55d4:	600b      	str	r3, [r1, #0]
    55d6:	e7d6      	b.n	5586 <__register_exitproc+0x2e>
    55d8:	4d06      	ldr	r5, [pc, #24]	; (55f4 <__register_exitproc+0x9c>)
    55da:	601d      	str	r5, [r3, #0]
    55dc:	e7ce      	b.n	557c <__register_exitproc+0x24>
    55de:	464b      	mov	r3, r9
    55e0:	6818      	ldr	r0, [r3, #0]
    55e2:	f7ff ff19 	bl	5418 <__retarget_lock_release_recursive>
    55e6:	2001      	movs	r0, #1
    55e8:	4240      	negs	r0, r0
    55ea:	e7d6      	b.n	559a <__register_exitproc+0x42>
    55ec:	200000ac 	.word	0x200000ac
    55f0:	200006e8 	.word	0x200006e8
    55f4:	200006ec 	.word	0x200006ec
    55f8:	000003f0 	.word	0x000003f0
    55fc:	000003c8 	.word	0x000003c8
    5600:	000003d0 	.word	0x000003d0
    5604:	000003d8 	.word	0x000003d8
    5608:	000003f0 	.word	0x000003f0
    560c:	000003f0 	.word	0x000003f0
    5610:	000003e0 	.word	0x000003e0
    5614:	000003e8 	.word	0x000003e8
    5618:	41564e49 	.word	0x41564e49
    561c:	0044494c 	.word	0x0044494c
    5620:	20776152 	.word	0x20776152
    5624:	69442058 	.word	0x69442058
    5628:	74636572 	.word	0x74636572
    562c:	206e6f69 	.word	0x206e6f69
    5630:	65636341 	.word	0x65636341
    5634:	6172656c 	.word	0x6172656c
    5638:	6e6f6974 	.word	0x6e6f6974
    563c:	00000000 	.word	0x00000000
    5640:	20776152 	.word	0x20776152
    5644:	69442059 	.word	0x69442059
    5648:	74636572 	.word	0x74636572
    564c:	206e6f69 	.word	0x206e6f69
    5650:	65636341 	.word	0x65636341
    5654:	6172656c 	.word	0x6172656c
    5658:	6e6f6974 	.word	0x6e6f6974
    565c:	00000000 	.word	0x00000000
    5660:	20776152 	.word	0x20776152
    5664:	6944205a 	.word	0x6944205a
    5668:	74636572 	.word	0x74636572
    566c:	206e6f69 	.word	0x206e6f69
    5670:	65636341 	.word	0x65636341
    5674:	6172656c 	.word	0x6172656c
    5678:	6e6f6974 	.word	0x6e6f6974
    567c:	00000000 	.word	0x00000000
    5680:	20776152 	.word	0x20776152
    5684:	78412058 	.word	0x78412058
    5688:	41207369 	.word	0x41207369
    568c:	6c75676e 	.word	0x6c75676e
    5690:	56207261 	.word	0x56207261
    5694:	636f6c65 	.word	0x636f6c65
    5698:	00797469 	.word	0x00797469
    569c:	20776152 	.word	0x20776152
    56a0:	78412059 	.word	0x78412059
    56a4:	41207369 	.word	0x41207369
    56a8:	6c75676e 	.word	0x6c75676e
    56ac:	56207261 	.word	0x56207261
    56b0:	636f6c65 	.word	0x636f6c65
    56b4:	00797469 	.word	0x00797469
    56b8:	20776152 	.word	0x20776152
    56bc:	7841205a 	.word	0x7841205a
    56c0:	41207369 	.word	0x41207369
    56c4:	6c75676e 	.word	0x6c75676e
    56c8:	56207261 	.word	0x56207261
    56cc:	636f6c65 	.word	0x636f6c65
    56d0:	00797469 	.word	0x00797469
    56d4:	696c6143 	.word	0x696c6143
    56d8:	74617262 	.word	0x74617262
    56dc:	58206465 	.word	0x58206465
    56e0:	72694420 	.word	0x72694420
    56e4:	69746365 	.word	0x69746365
    56e8:	41206e6f 	.word	0x41206e6f
    56ec:	6c656363 	.word	0x6c656363
    56f0:	74617265 	.word	0x74617265
    56f4:	006e6f69 	.word	0x006e6f69
    56f8:	696c6143 	.word	0x696c6143
    56fc:	74617262 	.word	0x74617262
    5700:	59206465 	.word	0x59206465
    5704:	72694420 	.word	0x72694420
    5708:	69746365 	.word	0x69746365
    570c:	41206e6f 	.word	0x41206e6f
    5710:	6c656363 	.word	0x6c656363
    5714:	74617265 	.word	0x74617265
    5718:	006e6f69 	.word	0x006e6f69
    571c:	696c6143 	.word	0x696c6143
    5720:	74617262 	.word	0x74617262
    5724:	5a206465 	.word	0x5a206465
    5728:	72694420 	.word	0x72694420
    572c:	69746365 	.word	0x69746365
    5730:	41206e6f 	.word	0x41206e6f
    5734:	6c656363 	.word	0x6c656363
    5738:	74617265 	.word	0x74617265
    573c:	006e6f69 	.word	0x006e6f69
    5740:	696c6143 	.word	0x696c6143
    5744:	74617262 	.word	0x74617262
    5748:	58206465 	.word	0x58206465
    574c:	69784120 	.word	0x69784120
    5750:	6e412073 	.word	0x6e412073
    5754:	616c7567 	.word	0x616c7567
    5758:	65562072 	.word	0x65562072
    575c:	69636f6c 	.word	0x69636f6c
    5760:	00007974 	.word	0x00007974
    5764:	696c6143 	.word	0x696c6143
    5768:	74617262 	.word	0x74617262
    576c:	59206465 	.word	0x59206465
    5770:	69784120 	.word	0x69784120
    5774:	6e412073 	.word	0x6e412073
    5778:	616c7567 	.word	0x616c7567
    577c:	65562072 	.word	0x65562072
    5780:	69636f6c 	.word	0x69636f6c
    5784:	00007974 	.word	0x00007974
    5788:	696c6143 	.word	0x696c6143
    578c:	74617262 	.word	0x74617262
    5790:	5a206465 	.word	0x5a206465
    5794:	69784120 	.word	0x69784120
    5798:	6e412073 	.word	0x6e412073
    579c:	616c7567 	.word	0x616c7567
    57a0:	65562072 	.word	0x65562072
    57a4:	69636f6c 	.word	0x69636f6c
    57a8:	00007974 	.word	0x00007974
    57ac:	75626544 	.word	0x75626544
    57b0:	6e492067 	.word	0x6e492067
    57b4:	00312074 	.word	0x00312074
    57b8:	52504545 	.word	0x52504545
    57bc:	4c204d4f 	.word	0x4c204d4f
    57c0:	756f7961 	.word	0x756f7961
    57c4:	61482074 	.word	0x61482074
    57c8:	00006873 	.word	0x00006873
    57cc:	65776f50 	.word	0x65776f50
    57d0:	79432072 	.word	0x79432072
    57d4:	73656c63 	.word	0x73656c63
    57d8:	00000000 	.word	0x00000000
    57dc:	61736944 	.word	0x61736944
    57e0:	20656c62 	.word	0x20656c62
    57e4:	7a7a7542 	.word	0x7a7a7542
    57e8:	00007265 	.word	0x00007265
    57ec:	61736944 	.word	0x61736944
    57f0:	20656c62 	.word	0x20656c62
    57f4:	0044454c 	.word	0x0044454c
    57f8:	61656c43 	.word	0x61656c43
    57fc:	6853206e 	.word	0x6853206e
    5800:	6f647475 	.word	0x6f647475
    5804:	00006e77 	.word	0x00006e77
    5808:	75626544 	.word	0x75626544
    580c:	6f422067 	.word	0x6f422067
    5810:	31206c6f 	.word	0x31206c6f
    5814:	00000000 	.word	0x00000000
    5818:	75626544 	.word	0x75626544
    581c:	6f422067 	.word	0x6f422067
    5820:	32206c6f 	.word	0x32206c6f
    5824:	00000000 	.word	0x00000000
    5828:	40000000 	.word	0x40000000
    582c:	00000001 	.word	0x00000001
    5830:	00000c92 	.word	0x00000c92
    5834:	00000c9e 	.word	0x00000c9e
    5838:	00000cac 	.word	0x00000cac
    583c:	00000cba 	.word	0x00000cba
    5840:	00000cc8 	.word	0x00000cc8
    5844:	00000d16 	.word	0x00000d16
    5848:	00000d1e 	.word	0x00000d1e
    584c:	00000d28 	.word	0x00000d28
    5850:	00000d32 	.word	0x00000d32
    5854:	00000d3c 	.word	0x00000d3c
    5858:	00000d7a 	.word	0x00000d7a
    585c:	00000d86 	.word	0x00000d86
    5860:	00000d94 	.word	0x00000d94
    5864:	00000da2 	.word	0x00000da2
    5868:	00000db0 	.word	0x00000db0
    586c:	00000dfe 	.word	0x00000dfe
    5870:	00000e06 	.word	0x00000e06
    5874:	00000e10 	.word	0x00000e10
    5878:	00000e1a 	.word	0x00000e1a
    587c:	00000e24 	.word	0x00000e24
    5880:	00000e5e 	.word	0x00000e5e
    5884:	00000e66 	.word	0x00000e66
    5888:	00000e76 	.word	0x00000e76
    588c:	00000e86 	.word	0x00000e86
    5890:	00000e96 	.word	0x00000e96
    5894:	00000f06 	.word	0x00000f06
    5898:	00000ede 	.word	0x00000ede
    589c:	00000ee8 	.word	0x00000ee8
    58a0:	00000ef2 	.word	0x00000ef2
    58a4:	00000efc 	.word	0x00000efc

000058a8 <uart1_descriptor>:
    58a8:	02010302 00000002                       ........

000058b0 <uart2_descriptor>:
    58b0:	04030504 00000002                       ........

000058b8 <uart3_descriptor>:
    58b8:	0a090706 00000002                       ........

000058c0 <uart4_descriptor>:
    58c0:	0c0b0908 00000002 80000000 00000001     ................

000058d0 <dma_spi_desc>:
    58d0:	08070100                                 .....

000058d5 <zero>:
    58d5:	a4000000 c800001e a800001e ac00001e     ................
    58e5:	b000001e b400001e b800001e be00001e     ................
    58f5:	0400001e 18000025 de000025 18000025     ....%...%...%...
    5905:	de000025 24000025 30000025 de000025     %...%..$%..0%...
    5915:	80000025 94000025 de000025 be000025     %...%...%...%...
    5925:	30000025 34333231 38373635 43424139     %..0123456789ABC
    5935:	48474644 4d4c4b4a 5251504e 57565453     DFGHJKLMNPQRSTVW
    5945:	005a5958 46000000 656c6e69 6c422079     XYZ....Finley Bl
    5955:	656e6961 47000000 0032434e               aine...GNC2....

00005964 <language_string>:
    5964:	04090304                                ....

00005968 <device_descriptor>:
    5968:	02000112 400102ef 000e1209 02010200     .......@........
    5978:	                                         ..

0000597a <usb_num_endpoints>:
    597a:	2e2e0003 2d2d2d2e 002e2e2e 31be0000     .....---.......1
    598a:	32500000 325e0000 326c0000 327a0000     ..P2..^2..l2..z2
    599a:	32880000 31c40000 00000000 00000000     ...2...1........
    59aa:	00000000 34650000 00060000               ......e4......

000059b8 <time_ticks_us_mult>:
    59b8:	00000030                                0...

000059bc <time_ticks_ms_mult>:
    59bc:	0000bb80                                ....

000059c0 <time_ticks_s_mult>:
    59c0:	02dc6c00                                .l..

000059c4 <CRC8_LUT_L>:
    59c4:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

000059d4 <CRC8_LUT_H>:
    59d4:	90e07000 5727b7c7 1969f989 deae3e4e     .p....'W..i.N>..
    59e4:	000049ee 0000491e 00004936 00004954     .I...I..6I..TI..
    59f4:	00004936 00004998 00004936 00004954     6I...I..6I..TI..
    5a04:	0000491e 0000491e 00004998 00004954     .I...I...I..TI..
    5a14:	0000493e 0000493e 0000493e 000049a2     >I..>I..>I...I..
    5a24:	0000491e 0000491e 00004936 00004a2c     .I...I..6I..,J..
    5a34:	00004936 00004998 00004936 00004a2c     6I...I..6I..,J..
    5a44:	0000491e 0000491e 00004998 00004a2c     .I...I...I..,J..
    5a54:	0000493e 0000493e 0000493e              >I..>I..>I..

00005a60 <_init>:
    5a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a62:	46c0      	nop			; (mov r8, r8)
    5a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5a66:	bc08      	pop	{r3}
    5a68:	469e      	mov	lr, r3
    5a6a:	4770      	bx	lr

00005a6c <__init_array_start>:
    5a6c:	00005509 	.word	0x00005509

00005a70 <__frame_dummy_init_array_entry>:
    5a70:	0000012d                                -...

00005a74 <_fini>:
    5a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a76:	46c0      	nop			; (mov r8, r8)
    5a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5a7a:	bc08      	pop	{r3}
    5a7c:	469e      	mov	lr, r3
    5a7e:	4770      	bx	lr

00005a80 <__do_global_dtors_aux_fini_array_entry>:
    5a80:	0101 0000                                   ....
