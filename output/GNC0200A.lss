
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006460  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000100  20000000  00006460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008fc  20000100  00006560  00020100  2**4
                  ALLOC
  3 .stack        00002004  200009fc  00006e5c  00020100  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e029  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00006994  00000000  00000000  0003e19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 00007ba8  00000000  00000000  00044b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000f18  00000000  00000000  0004c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 00001101  00000000  00000000  0004d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  0000a503  00000000  00000000  0004e6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0001d5f0  00000000  00000000  00058bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b6325  00000000  00000000  000761ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  000020d0  00000000  00000000  0012c514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  0012e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
    if (!get_address_from_id(type, id, &address, &size)) return false;
    memcpy(address, value, size);
    return true;
}

bool get_global(Global_Variable_IDs id, void* value) {
       0:	00 2a 00 20 55 01 00 00 51 01 00 00 51 01 00 00     .*. U...Q...Q...
	...
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
    if (!get_address_from_id(type, id, &address, &size)) return false;
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...
    memcpy(value, address, size);
    return true;
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
	// send adc read command
	spi_command(desc->sercom, BARO_ADC_READ);
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	uint8_t data1 = spi_command(desc->sercom, 0);
      5c:	ad 47 00 00 51 01 00 00 dd 2b 00 00 f9 2b 00 00     .G..Q....+...+..
	uint8_t data2 = spi_command(desc->sercom, 0);
      6c:	51 01 00 00 51 01 00 00 15 2c 00 00 31 2c 00 00     Q...Q....,..1,..
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      8c:	9d 37 00 00 51 01 00 00 51 01 00 00 51 01 00 00     .7..Q...Q...Q...
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	00006460 	.word	0x00006460
      d0:	00006460 	.word	0x00006460
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	00006460 	.word	0x00006460
      f8:	00006460 	.word	0x00006460
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	20000100 	.word	0x20000100
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	00006460 	.word	0x00006460

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	20000104 	.word	0x20000104
     14c:	00006460 	.word	0x00006460

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	00006460 	.word	0x00006460
     1a4:	20000000 	.word	0x20000000
     1a8:	20000100 	.word	0x20000100
     1ac:	20000100 	.word	0x20000100
     1b0:	200009fc 	.word	0x200009fc
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	00005b25 	.word	0x00005b25
     1c4:	00000000 	.word	0x00000000
     1c8:	00003729 	.word	0x00003729

000001cc <init_comms>:

uint8_t rxframe_buffer[GNCLINK_FRAME_TOTAL_LENGTH * 2];

extern void SOS();

bool init_comms() {
     1cc:	b510      	push	{r4, lr}
    // Start infinite receive buffer only if not usb vcp
    if (!serial_is_usb_vcp(comms_port)) {
     1ce:	2004      	movs	r0, #4
     1d0:	4b05      	ldr	r3, [pc, #20]	; (1e8 <init_comms+0x1c>)
     1d2:	4798      	blx	r3
     1d4:	2800      	cmp	r0, #0
     1d6:	d000      	beq.n	1da <init_comms+0xe>
	    if (!serial_read_start_infinite(comms_port, rxframe_buffer, sizeof(rxframe_buffer))) return false;
    }

    return true;
}
     1d8:	bd10      	pop	{r4, pc}
	    if (!serial_read_start_infinite(comms_port, rxframe_buffer, sizeof(rxframe_buffer))) return false;
     1da:	4904      	ldr	r1, [pc, #16]	; (1ec <init_comms+0x20>)
     1dc:	222a      	movs	r2, #42	; 0x2a
     1de:	3004      	adds	r0, #4
     1e0:	4b03      	ldr	r3, [pc, #12]	; (1f0 <init_comms+0x24>)
     1e2:	4798      	blx	r3
     1e4:	e7f8      	b.n	1d8 <init_comms+0xc>
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	000012ed 	.word	0x000012ed
     1ec:	2000011c 	.word	0x2000011c
     1f0:	00001195 	.word	0x00001195

000001f4 <getGlobalHash>:


bool getGlobalHash() {
     1f4:	b510      	push	{r4, lr}
    uint32_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     1f6:	4c06      	ldr	r4, [pc, #24]	; (210 <getGlobalHash+0x1c>)
     1f8:	0020      	movs	r0, r4
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <getGlobalHash+0x20>)
     1fc:	4798      	blx	r3
    *payload = __GLOBAL_HASH;
     1fe:	4b06      	ldr	r3, [pc, #24]	; (218 <getGlobalHash+0x24>)
     200:	6003      	str	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetGlobalHash, GNClink_PacketFlags_Response, 4)) return false;
     202:	2304      	movs	r3, #4
     204:	2202      	movs	r2, #2
     206:	2101      	movs	r1, #1
     208:	0020      	movs	r0, r4
     20a:	4c04      	ldr	r4, [pc, #16]	; (21c <getGlobalHash+0x28>)
     20c:	47a0      	blx	r4
    return true;
}
     20e:	bd10      	pop	{r4, pc}
     210:	20000148 	.word	0x20000148
     214:	000048b5 	.word	0x000048b5
     218:	5006f37a 	.word	0x5006f37a
     21c:	000048b9 	.word	0x000048b9

00000220 <getValueList>:

bool getValueList() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	46c6      	mov	lr, r8
     224:	b500      	push	{lr}
     226:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     228:	4c1a      	ldr	r4, [pc, #104]	; (294 <getValueList+0x74>)
     22a:	0020      	movs	r0, r4
     22c:	306c      	adds	r0, #108	; 0x6c
     22e:	4d1a      	ldr	r5, [pc, #104]	; (298 <getValueList+0x78>)
     230:	47a8      	blx	r5
     232:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     234:	0020      	movs	r0, r4
     236:	302c      	adds	r0, #44	; 0x2c
     238:	47a8      	blx	r5
     23a:	4680      	mov	r8, r0
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     23c:	783e      	ldrb	r6, [r7, #0]
     23e:	b2f6      	uxtb	r6, r6
    if (IDCount > (GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1) / 2) {
     240:	2e1d      	cmp	r6, #29
     242:	d825      	bhi.n	290 <getValueList+0x70>
        // too many IDs, do something...
        return false;
    }

    int payloadIndex = 0;
    for (int index = 0; index < IDCount; ++index) {
     244:	2400      	movs	r4, #0
    int payloadIndex = 0;
     246:	2500      	movs	r5, #0
     248:	e007      	b.n	25a <getValueList+0x3a>
            // no more space, do something...
            return false;
        }

        // copy value to payload
        memcpy(&txpayload[payloadIndex], address, size);
     24a:	4643      	mov	r3, r8
     24c:	1958      	adds	r0, r3, r5
     24e:	9900      	ldr	r1, [sp, #0]
     250:	4b12      	ldr	r3, [pc, #72]	; (29c <getValueList+0x7c>)
     252:	4798      	blx	r3
        payloadIndex += size;
     254:	9b01      	ldr	r3, [sp, #4]
     256:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     258:	3401      	adds	r4, #1
     25a:	42b4      	cmp	r4, r6
     25c:	da11      	bge.n	282 <getValueList+0x62>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     25e:	0063      	lsls	r3, r4, #1
     260:	18fb      	adds	r3, r7, r3
     262:	7858      	ldrb	r0, [r3, #1]
        if (!get_global_address_size(ID, &address, &size)) {
     264:	aa01      	add	r2, sp, #4
     266:	4669      	mov	r1, sp
     268:	4b0d      	ldr	r3, [pc, #52]	; (2a0 <getValueList+0x80>)
     26a:	4798      	blx	r3
     26c:	2800      	cmp	r0, #0
     26e:	d003      	beq.n	278 <getValueList+0x58>
        if (payloadIndex + size > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     270:	9a01      	ldr	r2, [sp, #4]
     272:	1953      	adds	r3, r2, r5
     274:	2b3b      	cmp	r3, #59	; 0x3b
     276:	d9e8      	bls.n	24a <getValueList+0x2a>
            return false;
     278:	2000      	movs	r0, #0
    }

    // construct response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
    return true;
}
     27a:	b002      	add	sp, #8
     27c:	bc80      	pop	{r7}
     27e:	46b8      	mov	r8, r7
     280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
     282:	4808      	ldr	r0, [pc, #32]	; (2a4 <getValueList+0x84>)
     284:	002b      	movs	r3, r5
     286:	2202      	movs	r2, #2
     288:	2102      	movs	r1, #2
     28a:	4c07      	ldr	r4, [pc, #28]	; (2a8 <getValueList+0x88>)
     28c:	47a0      	blx	r4
     28e:	e7f4      	b.n	27a <getValueList+0x5a>
        return false;
     290:	2000      	movs	r0, #0
     292:	e7f2      	b.n	27a <getValueList+0x5a>
     294:	2000011c 	.word	0x2000011c
     298:	000048b5 	.word	0x000048b5
     29c:	00005b75 	.word	0x00005b75
     2a0:	00000865 	.word	0x00000865
     2a4:	20000148 	.word	0x20000148
     2a8:	000048b9 	.word	0x000048b9

000002ac <setValueList>:

bool setValueList() {
     2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ae:	46c6      	mov	lr, r8
     2b0:	b500      	push	{lr}
     2b2:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     2b4:	4c19      	ldr	r4, [pc, #100]	; (31c <setValueList+0x70>)
     2b6:	0020      	movs	r0, r4
     2b8:	306c      	adds	r0, #108	; 0x6c
     2ba:	4d19      	ldr	r5, [pc, #100]	; (320 <setValueList+0x74>)
     2bc:	47a8      	blx	r5
     2be:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     2c0:	0020      	movs	r0, r4
     2c2:	302c      	adds	r0, #44	; 0x2c
     2c4:	47a8      	blx	r5

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     2c6:	783b      	ldrb	r3, [r7, #0]
     2c8:	b2db      	uxtb	r3, r3
     2ca:	4698      	mov	r8, r3

    int payloadIndex = 1;
    for (int index = 0; index < IDCount; ++index) {
     2cc:	2600      	movs	r6, #0
    int payloadIndex = 1;
     2ce:	2501      	movs	r5, #1
    for (int index = 0; index < IDCount; ++index) {
     2d0:	e008      	b.n	2e4 <setValueList+0x38>
            // Buffer overrun, do something...
            return false;
        }

        // copy value from payload to globals
        memcpy(address, &rxpayload[payloadIndex + 2], size);
     2d2:	3402      	adds	r4, #2
     2d4:	1939      	adds	r1, r7, r4
     2d6:	9800      	ldr	r0, [sp, #0]
     2d8:	4b12      	ldr	r3, [pc, #72]	; (324 <setValueList+0x78>)
     2da:	4798      	blx	r3
        payloadIndex += size + 2;
     2dc:	9b01      	ldr	r3, [sp, #4]
     2de:	3302      	adds	r3, #2
     2e0:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     2e2:	3601      	adds	r6, #1
     2e4:	4546      	cmp	r6, r8
     2e6:	da11      	bge.n	30c <setValueList+0x60>
        Global_Variable_IDs ID = (Global_Variable_IDs)*((uint16_t*)(rxpayload + payloadIndex));
     2e8:	002c      	movs	r4, r5
     2ea:	5d78      	ldrb	r0, [r7, r5]
        if (!get_global_address_size(ID, &address, &size)) {
     2ec:	aa01      	add	r2, sp, #4
     2ee:	4669      	mov	r1, sp
     2f0:	4b0d      	ldr	r3, [pc, #52]	; (328 <setValueList+0x7c>)
     2f2:	4798      	blx	r3
     2f4:	2800      	cmp	r0, #0
     2f6:	d004      	beq.n	302 <setValueList+0x56>
        if (payloadIndex + size + 2 > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     2f8:	9a01      	ldr	r2, [sp, #4]
     2fa:	1953      	adds	r3, r2, r5
     2fc:	3302      	adds	r3, #2
     2fe:	2b3b      	cmp	r3, #59	; 0x3b
     300:	d9e7      	bls.n	2d2 <setValueList+0x26>
            return false;
     302:	2000      	movs	r0, #0
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SetValueList, GNClink_PacketFlags_Response, 0)) return false;
    return true;
}
     304:	b002      	add	sp, #8
     306:	bc80      	pop	{r7}
     308:	46b8      	mov	r8, r7
     30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SetValueList, GNClink_PacketFlags_Response, 0)) return false;
     30c:	4807      	ldr	r0, [pc, #28]	; (32c <setValueList+0x80>)
     30e:	2300      	movs	r3, #0
     310:	2202      	movs	r2, #2
     312:	2103      	movs	r1, #3
     314:	4c06      	ldr	r4, [pc, #24]	; (330 <setValueList+0x84>)
     316:	47a0      	blx	r4
     318:	e7f4      	b.n	304 <setValueList+0x58>
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	2000011c 	.word	0x2000011c
     320:	000048b5 	.word	0x000048b5
     324:	00005b75 	.word	0x00005b75
     328:	00000865 	.word	0x00000865
     32c:	20000148 	.word	0x20000148
     330:	000048b9 	.word	0x000048b9

00000334 <loadValueList>:

bool loadValueList() {
     334:	b570      	push	{r4, r5, r6, lr}
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     336:	4c0f      	ldr	r4, [pc, #60]	; (374 <loadValueList+0x40>)
     338:	0020      	movs	r0, r4
     33a:	306c      	adds	r0, #108	; 0x6c
     33c:	4e0e      	ldr	r6, [pc, #56]	; (378 <loadValueList+0x44>)
     33e:	47b0      	blx	r6
     340:	0005      	movs	r5, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     342:	0020      	movs	r0, r4
     344:	302c      	adds	r0, #44	; 0x2c
     346:	47b0      	blx	r6
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     348:	782e      	ldrb	r6, [r5, #0]
     34a:	b2f6      	uxtb	r6, r6

    for (int index = 0; index < IDCount; ++index) {
     34c:	2400      	movs	r4, #0
     34e:	e000      	b.n	352 <loadValueList+0x1e>
     350:	3401      	adds	r4, #1
     352:	42b4      	cmp	r4, r6
     354:	da07      	bge.n	366 <loadValueList+0x32>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     356:	0063      	lsls	r3, r4, #1
     358:	18eb      	adds	r3, r5, r3
     35a:	7858      	ldrb	r0, [r3, #1]

        if (!load_global(ID)) {
     35c:	4b07      	ldr	r3, [pc, #28]	; (37c <loadValueList+0x48>)
     35e:	4798      	blx	r3
     360:	2800      	cmp	r0, #0
     362:	d1f5      	bne.n	350 <loadValueList+0x1c>
     364:	e005      	b.n	372 <loadValueList+0x3e>
            return false;
        }
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_LoadValueList, GNClink_PacketFlags_Response, 0)) return false;
     366:	4806      	ldr	r0, [pc, #24]	; (380 <loadValueList+0x4c>)
     368:	2300      	movs	r3, #0
     36a:	2202      	movs	r2, #2
     36c:	2105      	movs	r1, #5
     36e:	4c05      	ldr	r4, [pc, #20]	; (384 <loadValueList+0x50>)
     370:	47a0      	blx	r4
    return true;
}
     372:	bd70      	pop	{r4, r5, r6, pc}
     374:	2000011c 	.word	0x2000011c
     378:	000048b5 	.word	0x000048b5
     37c:	0000089d 	.word	0x0000089d
     380:	20000148 	.word	0x20000148
     384:	000048b9 	.word	0x000048b9

00000388 <saveValueList>:

bool saveValueList() {
     388:	b570      	push	{r4, r5, r6, lr}
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     38a:	4c0f      	ldr	r4, [pc, #60]	; (3c8 <saveValueList+0x40>)
     38c:	0020      	movs	r0, r4
     38e:	306c      	adds	r0, #108	; 0x6c
     390:	4e0e      	ldr	r6, [pc, #56]	; (3cc <saveValueList+0x44>)
     392:	47b0      	blx	r6
     394:	0005      	movs	r5, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     396:	0020      	movs	r0, r4
     398:	302c      	adds	r0, #44	; 0x2c
     39a:	47b0      	blx	r6
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     39c:	782e      	ldrb	r6, [r5, #0]
     39e:	b2f6      	uxtb	r6, r6

    for (int index = 0; index < IDCount; ++index) {
     3a0:	2400      	movs	r4, #0
     3a2:	e000      	b.n	3a6 <saveValueList+0x1e>
     3a4:	3401      	adds	r4, #1
     3a6:	42b4      	cmp	r4, r6
     3a8:	da07      	bge.n	3ba <saveValueList+0x32>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     3aa:	0063      	lsls	r3, r4, #1
     3ac:	18eb      	adds	r3, r5, r3
     3ae:	7858      	ldrb	r0, [r3, #1]

        if (!save_global(ID)) {
     3b0:	4b07      	ldr	r3, [pc, #28]	; (3d0 <saveValueList+0x48>)
     3b2:	4798      	blx	r3
     3b4:	2800      	cmp	r0, #0
     3b6:	d1f5      	bne.n	3a4 <saveValueList+0x1c>
     3b8:	e005      	b.n	3c6 <saveValueList+0x3e>
            return false;
        }
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SaveValueList, GNClink_PacketFlags_Response, 0)) return false;
     3ba:	4806      	ldr	r0, [pc, #24]	; (3d4 <saveValueList+0x4c>)
     3bc:	2300      	movs	r3, #0
     3be:	2202      	movs	r2, #2
     3c0:	2104      	movs	r1, #4
     3c2:	4c05      	ldr	r4, [pc, #20]	; (3d8 <saveValueList+0x50>)
     3c4:	47a0      	blx	r4
    return true;
}
     3c6:	bd70      	pop	{r4, r5, r6, pc}
     3c8:	2000011c 	.word	0x2000011c
     3cc:	000048b5 	.word	0x000048b5
     3d0:	000008fd 	.word	0x000008fd
     3d4:	20000148 	.word	0x20000148
     3d8:	000048b9 	.word	0x000048b9

000003dc <getValueCount>:

bool getValueCount() {
     3dc:	b510      	push	{r4, lr}
    uint16_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     3de:	4c06      	ldr	r4, [pc, #24]	; (3f8 <getValueCount+0x1c>)
     3e0:	0020      	movs	r0, r4
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <getValueCount+0x20>)
     3e4:	4798      	blx	r3
    *payload = __GLOBAL_ID_END - __GLOBAL_ID_START;
     3e6:	2328      	movs	r3, #40	; 0x28
     3e8:	8003      	strh	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueCount, GNClink_PacketFlags_Response, 2)) return false;
     3ea:	3b26      	subs	r3, #38	; 0x26
     3ec:	2202      	movs	r2, #2
     3ee:	2106      	movs	r1, #6
     3f0:	0020      	movs	r0, r4
     3f2:	4c03      	ldr	r4, [pc, #12]	; (400 <getValueCount+0x24>)
     3f4:	47a0      	blx	r4
    return true;
}
     3f6:	bd10      	pop	{r4, pc}
     3f8:	20000148 	.word	0x20000148
     3fc:	000048b5 	.word	0x000048b5
     400:	000048b9 	.word	0x000048b9

00000404 <getValueName>:

bool getValueName() {
     404:	b570      	push	{r4, r5, r6, lr}
     406:	b082      	sub	sp, #8
    uint16_t* rxpayload = (uint16_t*)GNClink_Get_Packet_Payload_Pointer(rxpacket);
     408:	4c15      	ldr	r4, [pc, #84]	; (460 <getValueName+0x5c>)
     40a:	0020      	movs	r0, r4
     40c:	306c      	adds	r0, #108	; 0x6c
     40e:	4e15      	ldr	r6, [pc, #84]	; (464 <getValueName+0x60>)
     410:	47b0      	blx	r6
     412:	0005      	movs	r5, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     414:	0020      	movs	r0, r4
     416:	302c      	adds	r0, #44	; 0x2c
     418:	47b0      	blx	r6
     41a:	0006      	movs	r6, r0

    // get variable ID
    uint16_t id = *rxpayload;
     41c:	882c      	ldrh	r4, [r5, #0]

    int length = 0;
     41e:	2300      	movs	r3, #0
     420:	9301      	str	r3, [sp, #4]

    __Global_Variable_Types type;
    if (!get_global_type_from_id(id, &type)) return false;
     422:	b2e4      	uxtb	r4, r4
     424:	466b      	mov	r3, sp
     426:	1cd9      	adds	r1, r3, #3
     428:	0020      	movs	r0, r4
     42a:	4b0f      	ldr	r3, [pc, #60]	; (468 <getValueName+0x64>)
     42c:	4798      	blx	r3
     42e:	2800      	cmp	r0, #0
     430:	d101      	bne.n	436 <getValueName+0x32>

    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;

    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
    return true;
}
     432:	b002      	add	sp, #8
     434:	bd70      	pop	{r4, r5, r6, pc}
    *txpayload = (uint8_t*)type;
     436:	466b      	mov	r3, sp
     438:	3303      	adds	r3, #3
     43a:	781b      	ldrb	r3, [r3, #0]
     43c:	7033      	strb	r3, [r6, #0]
    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;
     43e:	1c71      	adds	r1, r6, #1
     440:	233a      	movs	r3, #58	; 0x3a
     442:	aa01      	add	r2, sp, #4
     444:	0020      	movs	r0, r4
     446:	4c09      	ldr	r4, [pc, #36]	; (46c <getValueName+0x68>)
     448:	47a0      	blx	r4
     44a:	2800      	cmp	r0, #0
     44c:	d0f1      	beq.n	432 <getValueName+0x2e>
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
     44e:	9b01      	ldr	r3, [sp, #4]
     450:	3301      	adds	r3, #1
     452:	4807      	ldr	r0, [pc, #28]	; (470 <getValueName+0x6c>)
     454:	2202      	movs	r2, #2
     456:	2107      	movs	r1, #7
     458:	4c06      	ldr	r4, [pc, #24]	; (474 <getValueName+0x70>)
     45a:	47a0      	blx	r4
     45c:	e7e9      	b.n	432 <getValueName+0x2e>
     45e:	46c0      	nop			; (mov r8, r8)
     460:	2000011c 	.word	0x2000011c
     464:	000048b5 	.word	0x000048b5
     468:	0000081d 	.word	0x0000081d
     46c:	0000095d 	.word	0x0000095d
     470:	20000148 	.word	0x20000148
     474:	000048b9 	.word	0x000048b9

00000478 <evaluatePacket>:

bool evaluatePacket() {
     478:	b510      	push	{r4, lr}
    // check packet
    if (!GNClink_Check_Packet(rxpacket)) {
     47a:	4816      	ldr	r0, [pc, #88]	; (4d4 <evaluatePacket+0x5c>)
     47c:	4b16      	ldr	r3, [pc, #88]	; (4d8 <evaluatePacket+0x60>)
     47e:	4798      	blx	r3
     480:	2800      	cmp	r0, #0
     482:	d100      	bne.n	486 <evaluatePacket+0xe>
        default:
        return false;
    }

    return false;
}
     484:	bd10      	pop	{r4, pc}
    GNClink_PacketFlags flags = GNClink_Get_Packet_Flags(rxpacket);
     486:	4813      	ldr	r0, [pc, #76]	; (4d4 <evaluatePacket+0x5c>)
     488:	4b14      	ldr	r3, [pc, #80]	; (4dc <evaluatePacket+0x64>)
     48a:	4798      	blx	r3
    if (flags & GNClink_PacketFlags_Response) return false;
     48c:	0780      	lsls	r0, r0, #30
     48e:	d501      	bpl.n	494 <evaluatePacket+0x1c>
     490:	2000      	movs	r0, #0
     492:	e7f7      	b.n	484 <evaluatePacket+0xc>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     494:	480f      	ldr	r0, [pc, #60]	; (4d4 <evaluatePacket+0x5c>)
     496:	4b12      	ldr	r3, [pc, #72]	; (4e0 <evaluatePacket+0x68>)
     498:	4798      	blx	r3
     49a:	2807      	cmp	r0, #7
     49c:	d818      	bhi.n	4d0 <evaluatePacket+0x58>
     49e:	0080      	lsls	r0, r0, #2
     4a0:	4b10      	ldr	r3, [pc, #64]	; (4e4 <evaluatePacket+0x6c>)
     4a2:	581b      	ldr	r3, [r3, r0]
     4a4:	469f      	mov	pc, r3
        return getGlobalHash();
     4a6:	4b10      	ldr	r3, [pc, #64]	; (4e8 <evaluatePacket+0x70>)
     4a8:	4798      	blx	r3
     4aa:	e7eb      	b.n	484 <evaluatePacket+0xc>
        return getValueList();
     4ac:	4b0f      	ldr	r3, [pc, #60]	; (4ec <evaluatePacket+0x74>)
     4ae:	4798      	blx	r3
     4b0:	e7e8      	b.n	484 <evaluatePacket+0xc>
        return setValueList();
     4b2:	4b0f      	ldr	r3, [pc, #60]	; (4f0 <evaluatePacket+0x78>)
     4b4:	4798      	blx	r3
     4b6:	e7e5      	b.n	484 <evaluatePacket+0xc>
        return loadValueList();
     4b8:	4b0e      	ldr	r3, [pc, #56]	; (4f4 <evaluatePacket+0x7c>)
     4ba:	4798      	blx	r3
     4bc:	e7e2      	b.n	484 <evaluatePacket+0xc>
        return saveValueList();
     4be:	4b0e      	ldr	r3, [pc, #56]	; (4f8 <evaluatePacket+0x80>)
     4c0:	4798      	blx	r3
     4c2:	e7df      	b.n	484 <evaluatePacket+0xc>
        return getValueCount();
     4c4:	4b0d      	ldr	r3, [pc, #52]	; (4fc <evaluatePacket+0x84>)
     4c6:	4798      	blx	r3
     4c8:	e7dc      	b.n	484 <evaluatePacket+0xc>
        return getValueName();
     4ca:	4b0d      	ldr	r3, [pc, #52]	; (500 <evaluatePacket+0x88>)
     4cc:	4798      	blx	r3
     4ce:	e7d9      	b.n	484 <evaluatePacket+0xc>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     4d0:	2000      	movs	r0, #0
     4d2:	e7d7      	b.n	484 <evaluatePacket+0xc>
     4d4:	20000188 	.word	0x20000188
     4d8:	000048e5 	.word	0x000048e5
     4dc:	00004919 	.word	0x00004919
     4e0:	00004915 	.word	0x00004915
     4e4:	00005d50 	.word	0x00005d50
     4e8:	000001f5 	.word	0x000001f5
     4ec:	00000221 	.word	0x00000221
     4f0:	000002ad 	.word	0x000002ad
     4f4:	00000335 	.word	0x00000335
     4f8:	00000389 	.word	0x00000389
     4fc:	000003dd 	.word	0x000003dd
     500:	00000405 	.word	0x00000405

00000504 <get_frame>:

bool get_frame() { // false if frame fails
     504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Receive normally if port is VCP
    if (serial_is_usb_vcp(comms_port)) {
     506:	2004      	movs	r0, #4
     508:	4b22      	ldr	r3, [pc, #136]	; (594 <get_frame+0x90>)
     50a:	4798      	blx	r3
     50c:	1e07      	subs	r7, r0, #0
     50e:	d00e      	beq.n	52e <get_frame+0x2a>
        // receive data
        serial_read_start(comms_port, rxframe, GNCLINK_FRAME_TOTAL_LENGTH);
     510:	4c21      	ldr	r4, [pc, #132]	; (598 <get_frame+0x94>)
     512:	2215      	movs	r2, #21
     514:	0021      	movs	r1, r4
     516:	2004      	movs	r0, #4
     518:	4b20      	ldr	r3, [pc, #128]	; (59c <get_frame+0x98>)
     51a:	4798      	blx	r3
        // wait until data arrives
        serial_read_wait_until_complete(comms_port); // Consider using _or_timeout in the future
     51c:	2004      	movs	r0, #4
     51e:	4b20      	ldr	r3, [pc, #128]	; (5a0 <get_frame+0x9c>)
     520:	4798      	blx	r3

        // check frame
        if (!GNClink_Check_Frame(rxframe)) {
     522:	0020      	movs	r0, r4
     524:	4b1f      	ldr	r3, [pc, #124]	; (5a4 <get_frame+0xa0>)
     526:	4798      	blx	r3
     528:	0006      	movs	r6, r0
                return true;
            }
        }
        return false;
    }
}
     52a:	0030      	movs	r0, r6
     52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rtos_delay_ms(10);
     52e:	4b1e      	ldr	r3, [pc, #120]	; (5a8 <get_frame+0xa4>)
     530:	681b      	ldr	r3, [r3, #0]
     532:	0098      	lsls	r0, r3, #2
     534:	18c0      	adds	r0, r0, r3
     536:	0040      	lsls	r0, r0, #1
     538:	4b1c      	ldr	r3, [pc, #112]	; (5ac <get_frame+0xa8>)
     53a:	4798      	blx	r3
        for (int i = 0; i < sizeof(rxframe_buffer); ++i) {
     53c:	2500      	movs	r5, #0
     53e:	e01e      	b.n	57e <get_frame+0x7a>
                    rxframe[j] = rxframe_buffer[(i + j) % sizeof(rxframe_buffer)];
     540:	1928      	adds	r0, r5, r4
     542:	4b1b      	ldr	r3, [pc, #108]	; (5b0 <get_frame+0xac>)
     544:	212a      	movs	r1, #42	; 0x2a
     546:	4798      	blx	r3
     548:	4b1a      	ldr	r3, [pc, #104]	; (5b4 <get_frame+0xb0>)
     54a:	5c59      	ldrb	r1, [r3, r1]
     54c:	4b1a      	ldr	r3, [pc, #104]	; (5b8 <get_frame+0xb4>)
     54e:	191b      	adds	r3, r3, r4
     550:	222c      	movs	r2, #44	; 0x2c
     552:	5499      	strb	r1, [r3, r2]
                for (int j = 0; j < GNCLINK_FRAME_TOTAL_LENGTH; ++j) {
     554:	3401      	adds	r4, #1
     556:	2c14      	cmp	r4, #20
     558:	d9f2      	bls.n	540 <get_frame+0x3c>
                if (!GNClink_Check_Frame(rxframe)) {
     55a:	480f      	ldr	r0, [pc, #60]	; (598 <get_frame+0x94>)
     55c:	4b11      	ldr	r3, [pc, #68]	; (5a4 <get_frame+0xa0>)
     55e:	4798      	blx	r3
     560:	1e06      	subs	r6, r0, #0
     562:	d00b      	beq.n	57c <get_frame+0x78>
                for (int j = 0; j < GNCLINK_FRAME_TOTAL_LENGTH; ++j) {
     564:	2400      	movs	r4, #0
     566:	2c14      	cmp	r4, #20
     568:	d8df      	bhi.n	52a <get_frame+0x26>
                    rxframe_buffer[(i + j) % sizeof(rxframe_buffer)] = 0; // reset read frame to zero
     56a:	1928      	adds	r0, r5, r4
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <get_frame+0xac>)
     56e:	212a      	movs	r1, #42	; 0x2a
     570:	4798      	blx	r3
     572:	4b10      	ldr	r3, [pc, #64]	; (5b4 <get_frame+0xb0>)
     574:	2200      	movs	r2, #0
     576:	545a      	strb	r2, [r3, r1]
                for (int j = 0; j < GNCLINK_FRAME_TOTAL_LENGTH; ++j) {
     578:	3401      	adds	r4, #1
     57a:	e7f4      	b.n	566 <get_frame+0x62>
        for (int i = 0; i < sizeof(rxframe_buffer); ++i) {
     57c:	3501      	adds	r5, #1
     57e:	2d29      	cmp	r5, #41	; 0x29
     580:	d805      	bhi.n	58e <get_frame+0x8a>
            if (rxframe_buffer[i] == GNCLINK_FRAME_MAGIC) {
     582:	4b0c      	ldr	r3, [pc, #48]	; (5b4 <get_frame+0xb0>)
     584:	5d5b      	ldrb	r3, [r3, r5]
     586:	2bae      	cmp	r3, #174	; 0xae
     588:	d1f8      	bne.n	57c <get_frame+0x78>
                for (int j = 0; j < GNCLINK_FRAME_TOTAL_LENGTH; ++j) {
     58a:	2400      	movs	r4, #0
     58c:	e7e3      	b.n	556 <get_frame+0x52>
        return false;
     58e:	003e      	movs	r6, r7
     590:	e7cb      	b.n	52a <get_frame+0x26>
     592:	46c0      	nop			; (mov r8, r8)
     594:	000012ed 	.word	0x000012ed
     598:	200001c8 	.word	0x200001c8
     59c:	000010ad 	.word	0x000010ad
     5a0:	00001135 	.word	0x00001135
     5a4:	000049a9 	.word	0x000049a9
     5a8:	00006398 	.word	0x00006398
     5ac:	00003c61 	.word	0x00003c61
     5b0:	00004b69 	.word	0x00004b69
     5b4:	2000011c 	.word	0x2000011c
     5b8:	2000019c 	.word	0x2000019c

000005bc <get_packet>:

// returns false if resend is being requested
bool get_packet() {
     5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5be:	b083      	sub	sp, #12
    // set previous received packets to zero to avoid any propagation
    memset(rxpacket, 0, sizeof(rxpacket));
     5c0:	482f      	ldr	r0, [pc, #188]	; (680 <get_packet+0xc4>)
     5c2:	2240      	movs	r2, #64	; 0x40
     5c4:	2100      	movs	r1, #0
     5c6:	4c2f      	ldr	r4, [pc, #188]	; (684 <get_packet+0xc8>)
     5c8:	47a0      	blx	r4
    memset(rxframe, 0, sizeof(rxframe));
     5ca:	482f      	ldr	r0, [pc, #188]	; (688 <get_packet+0xcc>)
     5cc:	2215      	movs	r2, #21
     5ce:	2100      	movs	r1, #0
     5d0:	47a0      	blx	r4

    bool receivedFrames[GNCLINK_MAX_FRAMES_PER_PACKET];
    for (int i = 0; i < GNCLINK_MAX_FRAMES_PER_PACKET; ++i) receivedFrames[i] = false;
     5d2:	2300      	movs	r3, #0
     5d4:	e003      	b.n	5de <get_packet+0x22>
     5d6:	aa01      	add	r2, sp, #4
     5d8:	2100      	movs	r1, #0
     5da:	54d1      	strb	r1, [r2, r3]
     5dc:	3301      	adds	r3, #1
     5de:	2b03      	cmp	r3, #3
     5e0:	ddf9      	ble.n	5d6 <get_packet+0x1a>
     5e2:	e02a      	b.n	63a <get_packet+0x7e>

        while (!get_frame()); // receive frame

        // check if frame is requesting resend
        if (GNClink_Frame_RequestResend(rxframe)) {
            return false;
     5e4:	2400      	movs	r4, #0
            // packet fully received
            else break;
        }
    }
    return true;
}
     5e6:	0020      	movs	r0, r4
     5e8:	b003      	add	sp, #12
     5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     5ec:	3501      	adds	r5, #1
     5ee:	4826      	ldr	r0, [pc, #152]	; (688 <get_packet+0xcc>)
     5f0:	4b26      	ldr	r3, [pc, #152]	; (68c <get_packet+0xd0>)
     5f2:	4798      	blx	r3
     5f4:	42a8      	cmp	r0, r5
     5f6:	dd07      	ble.n	608 <get_packet+0x4c>
                if (!receivedFrames[i]) payload->resendIndexes[resendCount++] = (uint8_t)i;
     5f8:	ab01      	add	r3, sp, #4
     5fa:	5d5b      	ldrb	r3, [r3, r5]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d1f5      	bne.n	5ec <get_packet+0x30>
     600:	19bb      	adds	r3, r7, r6
     602:	705d      	strb	r5, [r3, #1]
     604:	3601      	adds	r6, #1
     606:	e7f1      	b.n	5ec <get_packet+0x30>
            if (resendCount) {
     608:	2e00      	cmp	r6, #0
     60a:	d0ec      	beq.n	5e6 <get_packet+0x2a>
                payload->resendCount = (uint8_t)resendCount;
     60c:	703e      	strb	r6, [r7, #0]
                GNClink_Construct_RequestResendFrame(txframe);
     60e:	4d20      	ldr	r5, [pc, #128]	; (690 <get_packet+0xd4>)
     610:	0028      	movs	r0, r5
     612:	4b20      	ldr	r3, [pc, #128]	; (694 <get_packet+0xd8>)
     614:	4798      	blx	r3
                led_on(); // only flash if resend is being performed
     616:	2480      	movs	r4, #128	; 0x80
     618:	03e4      	lsls	r4, r4, #15
     61a:	0021      	movs	r1, r4
     61c:	2001      	movs	r0, #1
     61e:	4b1e      	ldr	r3, [pc, #120]	; (698 <get_packet+0xdc>)
     620:	4798      	blx	r3
                serial_write_start(comms_port, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     622:	2215      	movs	r2, #21
     624:	0029      	movs	r1, r5
     626:	2004      	movs	r0, #4
     628:	4b1c      	ldr	r3, [pc, #112]	; (69c <get_packet+0xe0>)
     62a:	4798      	blx	r3
                serial_write_wait_until_complete(comms_port);
     62c:	2004      	movs	r0, #4
     62e:	4b1c      	ldr	r3, [pc, #112]	; (6a0 <get_packet+0xe4>)
     630:	4798      	blx	r3
                led_off();
     632:	0021      	movs	r1, r4
     634:	2001      	movs	r0, #1
     636:	4b1b      	ldr	r3, [pc, #108]	; (6a4 <get_packet+0xe8>)
     638:	4798      	blx	r3
        while (!get_frame()); // receive frame
     63a:	4b1b      	ldr	r3, [pc, #108]	; (6a8 <get_packet+0xec>)
     63c:	4798      	blx	r3
     63e:	1e04      	subs	r4, r0, #0
     640:	d0fb      	beq.n	63a <get_packet+0x7e>
        if (GNClink_Frame_RequestResend(rxframe)) {
     642:	4811      	ldr	r0, [pc, #68]	; (688 <get_packet+0xcc>)
     644:	4b19      	ldr	r3, [pc, #100]	; (6ac <get_packet+0xf0>)
     646:	4798      	blx	r3
     648:	2800      	cmp	r0, #0
     64a:	d1cb      	bne.n	5e4 <get_packet+0x28>
        receivedFrames[GNClink_Get_Frame_Index(rxframe)] = true;
     64c:	4d0e      	ldr	r5, [pc, #56]	; (688 <get_packet+0xcc>)
     64e:	0028      	movs	r0, r5
     650:	4b0e      	ldr	r3, [pc, #56]	; (68c <get_packet+0xd0>)
     652:	4798      	blx	r3
     654:	2301      	movs	r3, #1
     656:	aa01      	add	r2, sp, #4
     658:	5413      	strb	r3, [r2, r0]
        bool moreFrames = true;
     65a:	466a      	mov	r2, sp
     65c:	70d3      	strb	r3, [r2, #3]
        GNClink_Reconstruct_Packet_From_Frames(rxframe, rxpacket, &moreFrames);
     65e:	4908      	ldr	r1, [pc, #32]	; (680 <get_packet+0xc4>)
     660:	3203      	adds	r2, #3
     662:	0028      	movs	r0, r5
     664:	4b12      	ldr	r3, [pc, #72]	; (6b0 <get_packet+0xf4>)
     666:	4798      	blx	r3
        if (!moreFrames) {
     668:	466b      	mov	r3, sp
     66a:	78db      	ldrb	r3, [r3, #3]
     66c:	2b00      	cmp	r3, #0
     66e:	d1e4      	bne.n	63a <get_packet+0x7e>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(txframe);
     670:	4807      	ldr	r0, [pc, #28]	; (690 <get_packet+0xd4>)
     672:	4b10      	ldr	r3, [pc, #64]	; (6b4 <get_packet+0xf8>)
     674:	4798      	blx	r3
     676:	0007      	movs	r7, r0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     678:	2500      	movs	r5, #0
            int resendCount = 0;
     67a:	2600      	movs	r6, #0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     67c:	e7b7      	b.n	5ee <get_packet+0x32>
     67e:	46c0      	nop			; (mov r8, r8)
     680:	20000188 	.word	0x20000188
     684:	00005a7d 	.word	0x00005a7d
     688:	200001c8 	.word	0x200001c8
     68c:	000049eb 	.word	0x000049eb
     690:	200001e0 	.word	0x200001e0
     694:	000049f1 	.word	0x000049f1
     698:	000023cd 	.word	0x000023cd
     69c:	00000fc5 	.word	0x00000fc5
     6a0:	0000104d 	.word	0x0000104d
     6a4:	000023dd 	.word	0x000023dd
     6a8:	00000505 	.word	0x00000505
     6ac:	000049e1 	.word	0x000049e1
     6b0:	00004a15 	.word	0x00004a15
     6b4:	0000491d 	.word	0x0000491d

000006b8 <send_packet>:

bool send_packet(bool resendFrames) {
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	b084      	sub	sp, #16
     6bc:	0005      	movs	r5, r0
    int count = 0;
    bool moreFrames = true;
     6be:	230f      	movs	r3, #15
     6c0:	446b      	add	r3, sp
     6c2:	2201      	movs	r2, #1
     6c4:	701a      	strb	r2, [r3, #0]
    int count = 0;
     6c6:	2400      	movs	r4, #0
    while (moreFrames) {
     6c8:	e01a      	b.n	700 <send_packet+0x48>
        // check if frames are being resent
        if (resendFrames) {
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
            // break if all have been sent
            if (count == payload->resendCount) break;
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     6ca:	2202      	movs	r2, #2
     6cc:	e029      	b.n	722 <send_packet+0x6a>
        int frameIndex = count;
     6ce:	0023      	movs	r3, r4
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     6d0:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
        }

        // send frames
        GNClink_Get_Frame(txpacket, txframe, frameFlags, frameIndex, &moreFrames);
     6d2:	491a      	ldr	r1, [pc, #104]	; (73c <send_packet+0x84>)
     6d4:	481a      	ldr	r0, [pc, #104]	; (740 <send_packet+0x88>)
     6d6:	260f      	movs	r6, #15
     6d8:	446e      	add	r6, sp
     6da:	9600      	str	r6, [sp, #0]
     6dc:	4e19      	ldr	r6, [pc, #100]	; (744 <send_packet+0x8c>)
     6de:	47b0      	blx	r6
        // send frame
#ifdef COMMS_TEST
        int random_value = rand() % 10;
        if (random_value != 0) {
#endif
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     6e0:	2d00      	cmp	r5, #0
     6e2:	d121      	bne.n	728 <send_packet+0x70>
        serial_write_start(comms_port, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     6e4:	4915      	ldr	r1, [pc, #84]	; (73c <send_packet+0x84>)
     6e6:	2215      	movs	r2, #21
     6e8:	2004      	movs	r0, #4
     6ea:	4b17      	ldr	r3, [pc, #92]	; (748 <send_packet+0x90>)
     6ec:	4798      	blx	r3
        serial_write_wait_until_complete(comms_port);
     6ee:	2004      	movs	r0, #4
     6f0:	4b16      	ldr	r3, [pc, #88]	; (74c <send_packet+0x94>)
     6f2:	4798      	blx	r3
        led_off();
     6f4:	2180      	movs	r1, #128	; 0x80
     6f6:	03c9      	lsls	r1, r1, #15
     6f8:	2001      	movs	r0, #1
     6fa:	4b15      	ldr	r3, [pc, #84]	; (750 <send_packet+0x98>)
     6fc:	4798      	blx	r3
#ifdef COMMS_TEST
        }
#endif

        ++count;
     6fe:	3401      	adds	r4, #1
    while (moreFrames) {
     700:	230f      	movs	r3, #15
     702:	446b      	add	r3, sp
     704:	781b      	ldrb	r3, [r3, #0]
     706:	2b00      	cmp	r3, #0
     708:	d014      	beq.n	734 <send_packet+0x7c>
        if (resendFrames) {
     70a:	2d00      	cmp	r5, #0
     70c:	d0df      	beq.n	6ce <send_packet+0x16>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
     70e:	4811      	ldr	r0, [pc, #68]	; (754 <send_packet+0x9c>)
     710:	4b11      	ldr	r3, [pc, #68]	; (758 <send_packet+0xa0>)
     712:	4798      	blx	r3
            if (count == payload->resendCount) break;
     714:	7803      	ldrb	r3, [r0, #0]
     716:	42a3      	cmp	r3, r4
     718:	d00c      	beq.n	734 <send_packet+0x7c>
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     71a:	3b01      	subs	r3, #1
     71c:	42a3      	cmp	r3, r4
     71e:	d0d4      	beq.n	6ca <send_packet+0x12>
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     720:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
     722:	1900      	adds	r0, r0, r4
     724:	7843      	ldrb	r3, [r0, #1]
     726:	e7d4      	b.n	6d2 <send_packet+0x1a>
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     728:	2180      	movs	r1, #128	; 0x80
     72a:	03c9      	lsls	r1, r1, #15
     72c:	2001      	movs	r0, #1
     72e:	4b0b      	ldr	r3, [pc, #44]	; (75c <send_packet+0xa4>)
     730:	4798      	blx	r3
     732:	e7d7      	b.n	6e4 <send_packet+0x2c>
    }
    return true;
}
     734:	2001      	movs	r0, #1
     736:	b004      	add	sp, #16
     738:	bd70      	pop	{r4, r5, r6, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	200001e0 	.word	0x200001e0
     740:	20000148 	.word	0x20000148
     744:	00004921 	.word	0x00004921
     748:	00000fc5 	.word	0x00000fc5
     74c:	0000104d 	.word	0x0000104d
     750:	000023dd 	.word	0x000023dd
     754:	200001c8 	.word	0x200001c8
     758:	0000491d 	.word	0x0000491d
     75c:	000023cd 	.word	0x000023cd

00000760 <comms_loop>:

bool comms_loop() {
     760:	b510      	push	{r4, lr}
    bool run = true;
    while (run) {
     762:	e002      	b.n	76a <comms_loop+0xa>
        // get packet, resend if required
        while (!get_packet()) {
            send_packet(true);
     764:	2001      	movs	r0, #1
     766:	4b07      	ldr	r3, [pc, #28]	; (784 <comms_loop+0x24>)
     768:	4798      	blx	r3
        while (!get_packet()) {
     76a:	4b07      	ldr	r3, [pc, #28]	; (788 <comms_loop+0x28>)
     76c:	4798      	blx	r3
     76e:	2800      	cmp	r0, #0
     770:	d0f8      	beq.n	764 <comms_loop+0x4>
        }

        if (evaluatePacket()) {
     772:	4b06      	ldr	r3, [pc, #24]	; (78c <comms_loop+0x2c>)
     774:	4798      	blx	r3
     776:	2800      	cmp	r0, #0
     778:	d0f7      	beq.n	76a <comms_loop+0xa>
            send_packet(false);
     77a:	2000      	movs	r0, #0
     77c:	4b01      	ldr	r3, [pc, #4]	; (784 <comms_loop+0x24>)
     77e:	4798      	blx	r3
     780:	e7f3      	b.n	76a <comms_loop+0xa>
     782:	46c0      	nop			; (mov r8, r8)
     784:	000006b9 	.word	0x000006b9
     788:	000005bd 	.word	0x000005bd
     78c:	00000479 	.word	0x00000479

00000790 <get_address_from_id>:
    switch (type) {
     790:	2808      	cmp	r0, #8
     792:	d02b      	beq.n	7ec <get_address_from_id+0x5c>
     794:	d810      	bhi.n	7b8 <get_address_from_id+0x28>
     796:	2803      	cmp	r0, #3
     798:	d01c      	beq.n	7d4 <get_address_from_id+0x44>
     79a:	2804      	cmp	r0, #4
     79c:	d133      	bne.n	806 <get_address_from_id+0x76>
        if (id < __GLOBAL_U32_ID_START || id >= __GLOBAL_U32_ID_END) return false;
     79e:	0008      	movs	r0, r1
     7a0:	380e      	subs	r0, #14
     7a2:	b2c0      	uxtb	r0, r0
     7a4:	2801      	cmp	r0, #1
     7a6:	d82e      	bhi.n	806 <get_address_from_id+0x76>
        *size = 4;
     7a8:	2004      	movs	r0, #4
     7aa:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U32_ID_START;
     7ac:	390e      	subs	r1, #14
        *address = &(globals.__GLOBAL_U32_START_VARIABLE) + index;
     7ae:	4b17      	ldr	r3, [pc, #92]	; (80c <get_address_from_id+0x7c>)
     7b0:	0089      	lsls	r1, r1, #2
     7b2:	185b      	adds	r3, r3, r1
     7b4:	6013      	str	r3, [r2, #0]
        break;
     7b6:	e027      	b.n	808 <get_address_from_id+0x78>
    switch (type) {
     7b8:	280b      	cmp	r0, #11
     7ba:	d124      	bne.n	806 <get_address_from_id+0x76>
        if (id < __GLOBAL_BOOL_ID_START || id >= __GLOBAL_BOOL_ID_END) return false;
     7bc:	0008      	movs	r0, r1
     7be:	3820      	subs	r0, #32
     7c0:	b2c0      	uxtb	r0, r0
     7c2:	2808      	cmp	r0, #8
     7c4:	d81f      	bhi.n	806 <get_address_from_id+0x76>
        *size = 1;
     7c6:	2001      	movs	r0, #1
     7c8:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_BOOL_ID_START;
     7ca:	3920      	subs	r1, #32
        *address = &(globals.__GLOBAL_BOOL_START_VARIABLE) + index;
     7cc:	4b10      	ldr	r3, [pc, #64]	; (810 <get_address_from_id+0x80>)
     7ce:	185b      	adds	r3, r3, r1
     7d0:	6013      	str	r3, [r2, #0]
}
     7d2:	e019      	b.n	808 <get_address_from_id+0x78>
        if (id < __GLOBAL_I32_ID_START || id >= __GLOBAL_I32_ID_END) return false;
     7d4:	1e48      	subs	r0, r1, #1
     7d6:	b2c0      	uxtb	r0, r0
     7d8:	280c      	cmp	r0, #12
     7da:	d814      	bhi.n	806 <get_address_from_id+0x76>
        *size = 4;
     7dc:	2004      	movs	r0, #4
     7de:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_I32_ID_START;
     7e0:	3901      	subs	r1, #1
        *address = &(globals.__GLOBAL_I32_START_VARIABLE) + index;
     7e2:	4b0c      	ldr	r3, [pc, #48]	; (814 <get_address_from_id+0x84>)
     7e4:	0089      	lsls	r1, r1, #2
     7e6:	185b      	adds	r3, r3, r1
     7e8:	6013      	str	r3, [r2, #0]
        break;
     7ea:	e00d      	b.n	808 <get_address_from_id+0x78>
        if (id < __GLOBAL_U16_ID_START || id >= __GLOBAL_U16_ID_END) return false;
     7ec:	0008      	movs	r0, r1
     7ee:	3810      	subs	r0, #16
     7f0:	b2c0      	uxtb	r0, r0
     7f2:	280f      	cmp	r0, #15
     7f4:	d807      	bhi.n	806 <get_address_from_id+0x76>
        *size = 2;
     7f6:	2002      	movs	r0, #2
     7f8:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U16_ID_START;
     7fa:	3910      	subs	r1, #16
        *address = &(globals.__GLOBAL_U16_START_VARIABLE) + index;
     7fc:	4b06      	ldr	r3, [pc, #24]	; (818 <get_address_from_id+0x88>)
     7fe:	0049      	lsls	r1, r1, #1
     800:	185b      	adds	r3, r3, r1
     802:	6013      	str	r3, [r2, #0]
        break;
     804:	e000      	b.n	808 <get_address_from_id+0x78>
}
     806:	2000      	movs	r0, #0
     808:	4770      	bx	lr
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	2000022c 	.word	0x2000022c
     810:	20000254 	.word	0x20000254
     814:	200001f8 	.word	0x200001f8
     818:	20000234 	.word	0x20000234

0000081c <get_global_type_from_id>:
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     81c:	1e43      	subs	r3, r0, #1
     81e:	b2db      	uxtb	r3, r3
     820:	2b27      	cmp	r3, #39	; 0x27
     822:	d81d      	bhi.n	860 <get_global_type_from_id+0x44>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     824:	2800      	cmp	r0, #0
     826:	d00b      	beq.n	840 <get_global_type_from_id+0x24>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     828:	280d      	cmp	r0, #13
     82a:	d90d      	bls.n	848 <get_global_type_from_id+0x2c>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     82c:	280f      	cmp	r0, #15
     82e:	d90f      	bls.n	850 <get_global_type_from_id+0x34>
    if (id - __GLOBAL_U16_ID_END < 0) {*type = __U16; return true;}
     830:	281f      	cmp	r0, #31
     832:	d911      	bls.n	858 <get_global_type_from_id+0x3c>
    if (id - __GLOBAL_BOOL_ID_END < 0) {*type = __BOOL; return true;}
     834:	2828      	cmp	r0, #40	; 0x28
     836:	d814      	bhi.n	862 <get_global_type_from_id+0x46>
     838:	230b      	movs	r3, #11
     83a:	700b      	strb	r3, [r1, #0]
     83c:	2001      	movs	r0, #1
     83e:	e010      	b.n	862 <get_global_type_from_id+0x46>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     840:	2301      	movs	r3, #1
     842:	700b      	strb	r3, [r1, #0]
     844:	3001      	adds	r0, #1
     846:	e00c      	b.n	862 <get_global_type_from_id+0x46>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     848:	2303      	movs	r3, #3
     84a:	700b      	strb	r3, [r1, #0]
     84c:	2001      	movs	r0, #1
     84e:	e008      	b.n	862 <get_global_type_from_id+0x46>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     850:	2304      	movs	r3, #4
     852:	700b      	strb	r3, [r1, #0]
     854:	2001      	movs	r0, #1
     856:	e004      	b.n	862 <get_global_type_from_id+0x46>
    if (id - __GLOBAL_U16_ID_END < 0) {*type = __U16; return true;}
     858:	2308      	movs	r3, #8
     85a:	700b      	strb	r3, [r1, #0]
     85c:	2001      	movs	r0, #1
     85e:	e000      	b.n	862 <get_global_type_from_id+0x46>
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     860:	2000      	movs	r0, #0
}
     862:	4770      	bx	lr

00000864 <get_global_address_size>:
bool get_global_address_size(Global_Variable_IDs id, void** address, int* size) {
     864:	b570      	push	{r4, r5, r6, lr}
     866:	b082      	sub	sp, #8
     868:	0004      	movs	r4, r0
     86a:	000d      	movs	r5, r1
     86c:	0016      	movs	r6, r2
    if (!get_global_type_from_id(id, &type)) return false;
     86e:	466b      	mov	r3, sp
     870:	1dd9      	adds	r1, r3, #7
     872:	4b08      	ldr	r3, [pc, #32]	; (894 <get_global_address_size+0x30>)
     874:	4798      	blx	r3
     876:	2800      	cmp	r0, #0
     878:	d102      	bne.n	880 <get_global_address_size+0x1c>
}
     87a:	2000      	movs	r0, #0
     87c:	b002      	add	sp, #8
     87e:	bd70      	pop	{r4, r5, r6, pc}
    if (!get_address_from_id(type, id, address, size)) return false;
     880:	466b      	mov	r3, sp
     882:	79d8      	ldrb	r0, [r3, #7]
     884:	0033      	movs	r3, r6
     886:	002a      	movs	r2, r5
     888:	0021      	movs	r1, r4
     88a:	4c03      	ldr	r4, [pc, #12]	; (898 <get_global_address_size+0x34>)
     88c:	47a0      	blx	r4
     88e:	2800      	cmp	r0, #0
     890:	d1f4      	bne.n	87c <get_global_address_size+0x18>
     892:	e7f2      	b.n	87a <get_global_address_size+0x16>
     894:	0000081d 	.word	0x0000081d
     898:	00000791 	.word	0x00000791

0000089c <load_global>:
}

bool load_global(Global_Variable_IDs id) {
     89c:	b530      	push	{r4, r5, lr}
     89e:	b08f      	sub	sp, #60	; 0x3c
     8a0:	0005      	movs	r5, r0
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
     8a2:	2137      	movs	r1, #55	; 0x37
     8a4:	4469      	add	r1, sp
     8a6:	4b10      	ldr	r3, [pc, #64]	; (8e8 <load_global+0x4c>)
     8a8:	4798      	blx	r3
     8aa:	1e04      	subs	r4, r0, #0
     8ac:	d102      	bne.n	8b4 <load_global+0x18>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
    EEPROM_Request request;
    eeprom_read_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}
     8ae:	0020      	movs	r0, r4
     8b0:	b00f      	add	sp, #60	; 0x3c
     8b2:	bd30      	pop	{r4, r5, pc}
    if (!get_address_from_id(type, id, &address, &size)) return false;
     8b4:	2337      	movs	r3, #55	; 0x37
     8b6:	446b      	add	r3, sp
     8b8:	7818      	ldrb	r0, [r3, #0]
     8ba:	ab0b      	add	r3, sp, #44	; 0x2c
     8bc:	aa0c      	add	r2, sp, #48	; 0x30
     8be:	0029      	movs	r1, r5
     8c0:	4c0a      	ldr	r4, [pc, #40]	; (8ec <load_global+0x50>)
     8c2:	47a0      	blx	r4
     8c4:	1e04      	subs	r4, r0, #0
     8c6:	d0f2      	beq.n	8ae <load_global+0x12>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
     8c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     8ca:	4909      	ldr	r1, [pc, #36]	; (8f0 <load_global+0x54>)
     8cc:	2320      	movs	r3, #32
     8ce:	1a5b      	subs	r3, r3, r1
     8d0:	189b      	adds	r3, r3, r2
     8d2:	930a      	str	r3, [sp, #40]	; 0x28
    eeprom_read_request(&request, eeprom_address, address, size);
     8d4:	990a      	ldr	r1, [sp, #40]	; 0x28
     8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     8d8:	4668      	mov	r0, sp
     8da:	4d06      	ldr	r5, [pc, #24]	; (8f4 <load_global+0x58>)
     8dc:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     8de:	4668      	mov	r0, sp
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <load_global+0x5c>)
     8e2:	4798      	blx	r3
    return true;
     8e4:	e7e3      	b.n	8ae <load_global+0x12>
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	0000081d 	.word	0x0000081d
     8ec:	00000791 	.word	0x00000791
     8f0:	200001f8 	.word	0x200001f8
     8f4:	00000aa1 	.word	0x00000aa1
     8f8:	0000429d 	.word	0x0000429d

000008fc <save_global>:

bool save_global(Global_Variable_IDs id) {
     8fc:	b530      	push	{r4, r5, lr}
     8fe:	b08f      	sub	sp, #60	; 0x3c
     900:	0005      	movs	r5, r0
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
     902:	2137      	movs	r1, #55	; 0x37
     904:	4469      	add	r1, sp
     906:	4b10      	ldr	r3, [pc, #64]	; (948 <save_global+0x4c>)
     908:	4798      	blx	r3
     90a:	1e04      	subs	r4, r0, #0
     90c:	d102      	bne.n	914 <save_global+0x18>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
    EEPROM_Request request;
    eeprom_write_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}
     90e:	0020      	movs	r0, r4
     910:	b00f      	add	sp, #60	; 0x3c
     912:	bd30      	pop	{r4, r5, pc}
    if (!get_address_from_id(type, id, &address, &size)) return false;
     914:	2337      	movs	r3, #55	; 0x37
     916:	446b      	add	r3, sp
     918:	7818      	ldrb	r0, [r3, #0]
     91a:	ab0b      	add	r3, sp, #44	; 0x2c
     91c:	aa0c      	add	r2, sp, #48	; 0x30
     91e:	0029      	movs	r1, r5
     920:	4c0a      	ldr	r4, [pc, #40]	; (94c <save_global+0x50>)
     922:	47a0      	blx	r4
     924:	1e04      	subs	r4, r0, #0
     926:	d0f2      	beq.n	90e <save_global+0x12>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
     928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     92a:	4909      	ldr	r1, [pc, #36]	; (950 <save_global+0x54>)
     92c:	2320      	movs	r3, #32
     92e:	1a5b      	subs	r3, r3, r1
     930:	189b      	adds	r3, r3, r2
     932:	930a      	str	r3, [sp, #40]	; 0x28
    eeprom_write_request(&request, eeprom_address, address, size);
     934:	990a      	ldr	r1, [sp, #40]	; 0x28
     936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     938:	4668      	mov	r0, sp
     93a:	4d06      	ldr	r5, [pc, #24]	; (954 <save_global+0x58>)
     93c:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     93e:	4668      	mov	r0, sp
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <save_global+0x5c>)
     942:	4798      	blx	r3
    return true;
     944:	e7e3      	b.n	90e <save_global+0x12>
     946:	46c0      	nop			; (mov r8, r8)
     948:	0000081d 	.word	0x0000081d
     94c:	00000791 	.word	0x00000791
     950:	200001f8 	.word	0x200001f8
     954:	00000acd 	.word	0x00000acd
     958:	0000429d 	.word	0x0000429d

0000095c <get_global_name>:

bool get_global_name(Global_Variable_IDs id, uint8_t* buffer, int* length, int maxLength) {
     95c:	b5f0      	push	{r4, r5, r6, r7, lr}
     95e:	46c6      	mov	lr, r8
     960:	b500      	push	{lr}
     962:	000d      	movs	r5, r1
     964:	0017      	movs	r7, r2
     966:	001c      	movs	r4, r3
    bool ret = true;
    if (id >= __GLOBAL_ID_END) {
     968:	2828      	cmp	r0, #40	; 0x28
     96a:	d817      	bhi.n	99c <get_global_name+0x40>
    bool ret = true;
     96c:	2301      	movs	r3, #1
     96e:	4698      	mov	r8, r3
        id = 0;
        ret = false;
    }

    *length = MIN_2(maxLength, strlen(global_variable_names[id]) + 1);
     970:	0006      	movs	r6, r0
     972:	4b0c      	ldr	r3, [pc, #48]	; (9a4 <get_global_name+0x48>)
     974:	0080      	lsls	r0, r0, #2
     976:	58c0      	ldr	r0, [r0, r3]
     978:	4b0b      	ldr	r3, [pc, #44]	; (9a8 <get_global_name+0x4c>)
     97a:	4798      	blx	r3
     97c:	3001      	adds	r0, #1
     97e:	42a0      	cmp	r0, r4
     980:	d800      	bhi.n	984 <get_global_name+0x28>
     982:	0004      	movs	r4, r0
     984:	603c      	str	r4, [r7, #0]

    memcpy(buffer, global_variable_names[id], *length);
     986:	4b07      	ldr	r3, [pc, #28]	; (9a4 <get_global_name+0x48>)
     988:	00b6      	lsls	r6, r6, #2
     98a:	58f1      	ldr	r1, [r6, r3]
     98c:	0022      	movs	r2, r4
     98e:	0028      	movs	r0, r5
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <get_global_name+0x50>)
     992:	4798      	blx	r3

    return ret;
}
     994:	4640      	mov	r0, r8
     996:	bc80      	pop	{r7}
     998:	46b8      	mov	r8, r7
     99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = false;
     99c:	2300      	movs	r3, #0
     99e:	4698      	mov	r8, r3
        id = 0;
     9a0:	2000      	movs	r0, #0
     9a2:	e7e5      	b.n	970 <get_global_name+0x14>
     9a4:	20000000 	.word	0x20000000
     9a8:	00005c05 	.word	0x00005c05
     9ac:	00005b75 	.word	0x00005b75

000009b0 <init_globals>:

bool init_globals() {
     9b0:	b570      	push	{r4, r5, r6, lr}
     9b2:	b08a      	sub	sp, #40	; 0x28
    // load header
    EEPROM_Request request;
    eeprom_read_request(&request, 0, &__eeprom_header, sizeof(__eeprom_header));
     9b4:	4c1b      	ldr	r4, [pc, #108]	; (a24 <init_globals+0x74>)
     9b6:	0022      	movs	r2, r4
     9b8:	3268      	adds	r2, #104	; 0x68
     9ba:	2308      	movs	r3, #8
     9bc:	2100      	movs	r1, #0
     9be:	4668      	mov	r0, sp
     9c0:	4d19      	ldr	r5, [pc, #100]	; (a28 <init_globals+0x78>)
     9c2:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     9c4:	4668      	mov	r0, sp
     9c6:	4b19      	ldr	r3, [pc, #100]	; (a2c <init_globals+0x7c>)
     9c8:	4798      	blx	r3
    
    // check and modify header values
    if (__eeprom_header.GlobalHash != __GLOBAL_HASH) {
     9ca:	6ea2      	ldr	r2, [r4, #104]	; 0x68
     9cc:	4b18      	ldr	r3, [pc, #96]	; (a30 <init_globals+0x80>)
     9ce:	429a      	cmp	r2, r3
     9d0:	d11c      	bne.n	a0c <init_globals+0x5c>
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
        eeprom_wait_until_done(&request);
    }
    
    ++__eeprom_header.StartupCount;
     9d2:	4c14      	ldr	r4, [pc, #80]	; (a24 <init_globals+0x74>)
     9d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     9d6:	3301      	adds	r3, #1
     9d8:	66e3      	str	r3, [r4, #108]	; 0x6c
    eeprom_write_request(&request, 4, &(__eeprom_header.StartupCount), 4);
     9da:	0022      	movs	r2, r4
     9dc:	326c      	adds	r2, #108	; 0x6c
     9de:	2304      	movs	r3, #4
     9e0:	2104      	movs	r1, #4
     9e2:	4668      	mov	r0, sp
     9e4:	4d13      	ldr	r5, [pc, #76]	; (a34 <init_globals+0x84>)
     9e6:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     9e8:	4668      	mov	r0, sp
     9ea:	4d10      	ldr	r5, [pc, #64]	; (a2c <init_globals+0x7c>)
     9ec:	47a8      	blx	r5

    // load globals
    eeprom_read_request(&request, __EEPROM_GLOBAL_VARIABLES_START_ADDRESS, &globals, sizeof(globals));
     9ee:	2368      	movs	r3, #104	; 0x68
     9f0:	0022      	movs	r2, r4
     9f2:	2120      	movs	r1, #32
     9f4:	4668      	mov	r0, sp
     9f6:	4e0c      	ldr	r6, [pc, #48]	; (a28 <init_globals+0x78>)
     9f8:	47b0      	blx	r6
    eeprom_wait_until_done(&request);
     9fa:	4668      	mov	r0, sp
     9fc:	47a8      	blx	r5

    globals.GlobalHash = __eeprom_header.GlobalHash;
     9fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
     a00:	6363      	str	r3, [r4, #52]	; 0x34
    globals.StartupCount = __eeprom_header.StartupCount;
     a02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     a04:	63a3      	str	r3, [r4, #56]	; 0x38

    return true;
     a06:	2001      	movs	r0, #1
     a08:	b00a      	add	sp, #40	; 0x28
     a0a:	bd70      	pop	{r4, r5, r6, pc}
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
     a0c:	4a05      	ldr	r2, [pc, #20]	; (a24 <init_globals+0x74>)
     a0e:	6693      	str	r3, [r2, #104]	; 0x68
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
     a10:	3268      	adds	r2, #104	; 0x68
     a12:	2304      	movs	r3, #4
     a14:	2100      	movs	r1, #0
     a16:	4668      	mov	r0, sp
     a18:	4c06      	ldr	r4, [pc, #24]	; (a34 <init_globals+0x84>)
     a1a:	47a0      	blx	r4
        eeprom_wait_until_done(&request);
     a1c:	4668      	mov	r0, sp
     a1e:	4b03      	ldr	r3, [pc, #12]	; (a2c <init_globals+0x7c>)
     a20:	4798      	blx	r3
     a22:	e7d6      	b.n	9d2 <init_globals+0x22>
     a24:	200001f8 	.word	0x200001f8
     a28:	00000aa1 	.word	0x00000aa1
     a2c:	0000429d 	.word	0x0000429d
     a30:	5006f37a 	.word	0x5006f37a
     a34:	00000acd 	.word	0x00000acd

00000a38 <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     a38:	b510      	push	{r4, lr}
     a3a:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     a3c:	2480      	movs	r4, #128	; 0x80
     a3e:	05e4      	lsls	r4, r4, #23
     a40:	0021      	movs	r1, r4
     a42:	2001      	movs	r0, #1
     a44:	4b0b      	ldr	r3, [pc, #44]	; (a74 <init_eeprom+0x3c>)
     a46:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     a48:	0021      	movs	r1, r4
     a4a:	2001      	movs	r0, #1
     a4c:	4b0a      	ldr	r3, [pc, #40]	; (a78 <init_eeprom+0x40>)
     a4e:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     a50:	ab02      	add	r3, sp, #8
     a52:	490a      	ldr	r1, [pc, #40]	; (a7c <init_eeprom+0x44>)
     a54:	680a      	ldr	r2, [r1, #0]
     a56:	9202      	str	r2, [sp, #8]
     a58:	7909      	ldrb	r1, [r1, #4]
     a5a:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     a5c:	4808      	ldr	r0, [pc, #32]	; (a80 <init_eeprom+0x48>)
     a5e:	2180      	movs	r1, #128	; 0x80
     a60:	0209      	lsls	r1, r1, #8
     a62:	9100      	str	r1, [sp, #0]
     a64:	9b03      	ldr	r3, [sp, #12]
     a66:	4907      	ldr	r1, [pc, #28]	; (a84 <init_eeprom+0x4c>)
     a68:	4c07      	ldr	r4, [pc, #28]	; (a88 <init_eeprom+0x50>)
     a6a:	47a0      	blx	r4

    return true;
}
     a6c:	2001      	movs	r0, #1
     a6e:	b004      	add	sp, #16
     a70:	bd10      	pop	{r4, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	000023cd 	.word	0x000023cd
     a78:	000023bd 	.word	0x000023bd
     a7c:	000060dc 	.word	0x000060dc
     a80:	20000268 	.word	0x20000268
     a84:	42001400 	.word	0x42001400
     a88:	00001c6d 	.word	0x00001c6d

00000a8c <check_eeprom>:

bool check_eeprom() {
     a8c:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     a8e:	4802      	ldr	r0, [pc, #8]	; (a98 <check_eeprom+0xc>)
     a90:	4b02      	ldr	r3, [pc, #8]	; (a9c <check_eeprom+0x10>)
     a92:	4798      	blx	r3
}
     a94:	bd10      	pop	{r4, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	20000268 	.word	0x20000268
     a9c:	00001e19 	.word	0x00001e19

00000aa0 <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     aa0:	b530      	push	{r4, r5, lr}
     aa2:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     aa4:	4d06      	ldr	r5, [pc, #24]	; (ac0 <eeprom_read_request+0x20>)
     aa6:	4c07      	ldr	r4, [pc, #28]	; (ac4 <eeprom_read_request+0x24>)
     aa8:	9203      	str	r2, [sp, #12]
     aaa:	9302      	str	r3, [sp, #8]
     aac:	9101      	str	r1, [sp, #4]
     aae:	2300      	movs	r3, #0
     ab0:	9300      	str	r3, [sp, #0]
     ab2:	002a      	movs	r2, r5
     ab4:	0001      	movs	r1, r0
     ab6:	0020      	movs	r0, r4
     ab8:	4c03      	ldr	r4, [pc, #12]	; (ac8 <eeprom_read_request+0x28>)
     aba:	47a0      	blx	r4
}
     abc:	b005      	add	sp, #20
     abe:	bd30      	pop	{r4, r5, pc}
     ac0:	20000268 	.word	0x20000268
     ac4:	20000370 	.word	0x20000370
     ac8:	00004269 	.word	0x00004269

00000acc <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     acc:	b530      	push	{r4, r5, lr}
     ace:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     ad0:	4d07      	ldr	r5, [pc, #28]	; (af0 <eeprom_write_request+0x24>)
     ad2:	4c08      	ldr	r4, [pc, #32]	; (af4 <eeprom_write_request+0x28>)
     ad4:	9203      	str	r2, [sp, #12]
     ad6:	9302      	str	r3, [sp, #8]
     ad8:	9101      	str	r1, [sp, #4]
     ada:	2301      	movs	r3, #1
     adc:	9300      	str	r3, [sp, #0]
     ade:	2300      	movs	r3, #0
     ae0:	002a      	movs	r2, r5
     ae2:	0001      	movs	r1, r0
     ae4:	0020      	movs	r0, r4
     ae6:	4c04      	ldr	r4, [pc, #16]	; (af8 <eeprom_write_request+0x2c>)
     ae8:	47a0      	blx	r4
     aea:	b005      	add	sp, #20
     aec:	bd30      	pop	{r4, r5, pc}
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	20000268 	.word	0x20000268
     af4:	20000370 	.word	0x20000370
     af8:	00004269 	.word	0x00004269

00000afc <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     afc:	b5f0      	push	{r4, r5, r6, r7, lr}
     afe:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     b00:	2480      	movs	r4, #128	; 0x80
     b02:	0524      	lsls	r4, r4, #20
     b04:	0021      	movs	r1, r4
     b06:	2000      	movs	r0, #0
     b08:	4e15      	ldr	r6, [pc, #84]	; (b60 <imu_init+0x64>)
     b0a:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     b0c:	0021      	movs	r1, r4
     b0e:	2000      	movs	r0, #0
     b10:	4f14      	ldr	r7, [pc, #80]	; (b64 <imu_init+0x68>)
     b12:	47b8      	blx	r7
	IMU_OFF_BUS();
     b14:	2580      	movs	r5, #128	; 0x80
     b16:	03ad      	lsls	r5, r5, #14
     b18:	0029      	movs	r1, r5
     b1a:	2000      	movs	r0, #0
     b1c:	4b12      	ldr	r3, [pc, #72]	; (b68 <imu_init+0x6c>)
     b1e:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     b20:	0029      	movs	r1, r5
     b22:	2000      	movs	r0, #0
     b24:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     b26:	0029      	movs	r1, r5
     b28:	2000      	movs	r0, #0
     b2a:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     b2c:	9400      	str	r4, [sp, #0]
     b2e:	2300      	movs	r3, #0
     b30:	466a      	mov	r2, sp
     b32:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     b34:	480d      	ldr	r0, [pc, #52]	; (b6c <imu_init+0x70>)
     b36:	0022      	movs	r2, r4
     b38:	9b01      	ldr	r3, [sp, #4]
     b3a:	490d      	ldr	r1, [pc, #52]	; (b70 <imu_init+0x74>)
     b3c:	4c0d      	ldr	r4, [pc, #52]	; (b74 <imu_init+0x78>)
     b3e:	47a0      	blx	r4
     b40:	1e04      	subs	r4, r0, #0
     b42:	d107      	bne.n	b54 <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     b44:	2180      	movs	r1, #128	; 0x80
     b46:	0389      	lsls	r1, r1, #14
     b48:	2000      	movs	r0, #0
     b4a:	4b07      	ldr	r3, [pc, #28]	; (b68 <imu_init+0x6c>)
     b4c:	4798      	blx	r3
    return ret;
}
     b4e:	0020      	movs	r0, r4
     b50:	b003      	add	sp, #12
     b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     b54:	4805      	ldr	r0, [pc, #20]	; (b6c <imu_init+0x70>)
     b56:	4b08      	ldr	r3, [pc, #32]	; (b78 <imu_init+0x7c>)
     b58:	4798      	blx	r3
     b5a:	0004      	movs	r4, r0
     b5c:	e7f2      	b.n	b44 <imu_init+0x48>
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	000023cd 	.word	0x000023cd
     b64:	000023bd 	.word	0x000023bd
     b68:	000023dd 	.word	0x000023dd
     b6c:	20000274 	.word	0x20000274
     b70:	42001400 	.word	0x42001400
     b74:	000021ed 	.word	0x000021ed
     b78:	00002331 	.word	0x00002331

00000b7c <check_imu>:

bool check_imu() {
     b7c:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     b7e:	2180      	movs	r1, #128	; 0x80
     b80:	0389      	lsls	r1, r1, #14
     b82:	2000      	movs	r0, #0
     b84:	4b09      	ldr	r3, [pc, #36]	; (bac <check_imu+0x30>)
     b86:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     b88:	4809      	ldr	r0, [pc, #36]	; (bb0 <check_imu+0x34>)
     b8a:	4b0a      	ldr	r3, [pc, #40]	; (bb4 <check_imu+0x38>)
     b8c:	4798      	blx	r3
     b8e:	1e04      	subs	r4, r0, #0
     b90:	d106      	bne.n	ba0 <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     b92:	2180      	movs	r1, #128	; 0x80
     b94:	0389      	lsls	r1, r1, #14
     b96:	2000      	movs	r0, #0
     b98:	4b07      	ldr	r3, [pc, #28]	; (bb8 <check_imu+0x3c>)
     b9a:	4798      	blx	r3
    return pass;
}
     b9c:	0020      	movs	r0, r4
     b9e:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     ba0:	4803      	ldr	r0, [pc, #12]	; (bb0 <check_imu+0x34>)
     ba2:	4b06      	ldr	r3, [pc, #24]	; (bbc <check_imu+0x40>)
     ba4:	4798      	blx	r3
     ba6:	0004      	movs	r4, r0
     ba8:	e7f3      	b.n	b92 <check_imu+0x16>
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	000023cd 	.word	0x000023cd
     bb0:	20000274 	.word	0x20000274
     bb4:	0000225d 	.word	0x0000225d
     bb8:	000023dd 	.word	0x000023dd
     bbc:	0000238d 	.word	0x0000238d

00000bc0 <request_imu_data>:

void request_imu_data() {
     bc0:	b510      	push	{r4, lr}
     bc2:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     bc4:	4a09      	ldr	r2, [pc, #36]	; (bec <request_imu_data+0x2c>)
     bc6:	0011      	movs	r1, r2
     bc8:	310c      	adds	r1, #12
     bca:	4809      	ldr	r0, [pc, #36]	; (bf0 <request_imu_data+0x30>)
     bcc:	0013      	movs	r3, r2
     bce:	3334      	adds	r3, #52	; 0x34
     bd0:	9304      	str	r3, [sp, #16]
     bd2:	230e      	movs	r3, #14
     bd4:	9303      	str	r3, [sp, #12]
     bd6:	331f      	adds	r3, #31
     bd8:	9302      	str	r3, [sp, #8]
     bda:	2300      	movs	r3, #0
     bdc:	9301      	str	r3, [sp, #4]
     bde:	9300      	str	r3, [sp, #0]
     be0:	3302      	adds	r3, #2
     be2:	4c04      	ldr	r4, [pc, #16]	; (bf4 <request_imu_data+0x34>)
     be4:	47a0      	blx	r4
}
     be6:	b006      	add	sp, #24
     be8:	bd10      	pop	{r4, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	20000274 	.word	0x20000274
     bf0:	20000370 	.word	0x20000370
     bf4:	00004315 	.word	0x00004315

00000bf8 <wait_for_imu_data>:

void wait_for_imu_data() {
     bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfa:	46c6      	mov	lr, r8
     bfc:	b500      	push	{lr}
     bfe:	b086      	sub	sp, #24
    imu_icm20948_wait_until_done(&data_request);
     c00:	4c94      	ldr	r4, [pc, #592]	; (e54 <wait_for_imu_data+0x25c>)
     c02:	0020      	movs	r0, r4
     c04:	300c      	adds	r0, #12
     c06:	4b94      	ldr	r3, [pc, #592]	; (e58 <wait_for_imu_data+0x260>)
     c08:	4798      	blx	r3

    // float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
    int32_t accel_multiplier = (__G__ * ACCEL_MIN_RANGE_G) >> (15 - accel_fs_sel);
     c0a:	6c66      	ldr	r6, [r4, #68]	; 0x44
     c0c:	230f      	movs	r3, #15
     c0e:	469c      	mov	ip, r3
     c10:	1b9b      	subs	r3, r3, r6
     c12:	4892      	ldr	r0, [pc, #584]	; (e5c <wait_for_imu_data+0x264>)
     c14:	4118      	asrs	r0, r3
    globals.AccelerationXRaw = SWAPI16(raw_data.accel_x) * accel_multiplier;
     c16:	2234      	movs	r2, #52	; 0x34
     c18:	5ea3      	ldrsh	r3, [r4, r2]
     c1a:	0219      	lsls	r1, r3, #8
     c1c:	b209      	sxth	r1, r1
     c1e:	b29b      	uxth	r3, r3
     c20:	0a1b      	lsrs	r3, r3, #8
     c22:	4319      	orrs	r1, r3
     c24:	0003      	movs	r3, r0
     c26:	434b      	muls	r3, r1
     c28:	4f8d      	ldr	r7, [pc, #564]	; (e60 <wait_for_imu_data+0x268>)
     c2a:	603b      	str	r3, [r7, #0]
    globals.AccelerationYRaw = SWAPI16(raw_data.accel_y) * accel_multiplier;
     c2c:	2236      	movs	r2, #54	; 0x36
     c2e:	5ea3      	ldrsh	r3, [r4, r2]
     c30:	021a      	lsls	r2, r3, #8
     c32:	b212      	sxth	r2, r2
     c34:	b29b      	uxth	r3, r3
     c36:	0a1b      	lsrs	r3, r3, #8
     c38:	431a      	orrs	r2, r3
     c3a:	0003      	movs	r3, r0
     c3c:	4353      	muls	r3, r2
     c3e:	607b      	str	r3, [r7, #4]
    globals.AccelerationZRaw = SWAPI16(raw_data.accel_z) * accel_multiplier;
     c40:	2338      	movs	r3, #56	; 0x38
     c42:	5ee5      	ldrsh	r5, [r4, r3]
     c44:	022b      	lsls	r3, r5, #8
     c46:	b21b      	sxth	r3, r3
     c48:	b2ad      	uxth	r5, r5
     c4a:	0a2d      	lsrs	r5, r5, #8
     c4c:	432b      	orrs	r3, r5
     c4e:	4698      	mov	r8, r3
     c50:	4358      	muls	r0, r3
     c52:	60b8      	str	r0, [r7, #8]

    // float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
    int32_t gyro_multiplier = (GYRO_MIN_RANGE_MICRORADIANS) >> (15 - gyro_fs_sel);
     c54:	6ca5      	ldr	r5, [r4, #72]	; 0x48
     c56:	4660      	mov	r0, ip
     c58:	1b45      	subs	r5, r0, r5
     c5a:	4882      	ldr	r0, [pc, #520]	; (e64 <wait_for_imu_data+0x26c>)
     c5c:	4128      	asrs	r0, r5
    globals.AngularVelocityXRaw = SWAPI16(raw_data.gyro_x) * gyro_multiplier;
     c5e:	233a      	movs	r3, #58	; 0x3a
     c60:	5ee5      	ldrsh	r5, [r4, r3]
     c62:	46ac      	mov	ip, r5
     c64:	022d      	lsls	r5, r5, #8
     c66:	b22d      	sxth	r5, r5
     c68:	4663      	mov	r3, ip
     c6a:	b29b      	uxth	r3, r3
     c6c:	0a1b      	lsrs	r3, r3, #8
     c6e:	431d      	orrs	r5, r3
     c70:	4345      	muls	r5, r0
     c72:	60fd      	str	r5, [r7, #12]
    globals.AngularVelocityYRaw = SWAPI16(raw_data.gyro_y)* gyro_multiplier;
     c74:	253c      	movs	r5, #60	; 0x3c
     c76:	5f63      	ldrsh	r3, [r4, r5]
     c78:	021d      	lsls	r5, r3, #8
     c7a:	b22d      	sxth	r5, r5
     c7c:	b29b      	uxth	r3, r3
     c7e:	0a1b      	lsrs	r3, r3, #8
     c80:	431d      	orrs	r5, r3
     c82:	4345      	muls	r5, r0
     c84:	613d      	str	r5, [r7, #16]
    globals.AngularVelocityZRaw = SWAPI16(raw_data.gyro_z) * gyro_multiplier;
     c86:	233e      	movs	r3, #62	; 0x3e
     c88:	5ee4      	ldrsh	r4, [r4, r3]
     c8a:	0225      	lsls	r5, r4, #8
     c8c:	b22d      	sxth	r5, r5
     c8e:	b2a4      	uxth	r4, r4
     c90:	0a24      	lsrs	r4, r4, #8
     c92:	432c      	orrs	r4, r5
     c94:	4360      	muls	r0, r4
     c96:	6178      	str	r0, [r7, #20]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     c98:	4643      	mov	r3, r8
     c9a:	17d8      	asrs	r0, r3, #31
     c9c:	181b      	adds	r3, r3, r0
     c9e:	4043      	eors	r3, r0
     ca0:	b29b      	uxth	r3, r3
     ca2:	17d0      	asrs	r0, r2, #31
     ca4:	1812      	adds	r2, r2, r0
     ca6:	4042      	eors	r2, r0
     ca8:	b292      	uxth	r2, r2
     caa:	17c8      	asrs	r0, r1, #31
     cac:	1809      	adds	r1, r1, r0
     cae:	4041      	eors	r1, r0
     cb0:	b289      	uxth	r1, r1
     cb2:	1c10      	adds	r0, r2, #0
     cb4:	428a      	cmp	r2, r1
     cb6:	d200      	bcs.n	cba <wait_for_imu_data+0xc2>
     cb8:	1c08      	adds	r0, r1, #0
     cba:	1c1a      	adds	r2, r3, #0
     cbc:	b281      	uxth	r1, r0
     cbe:	428b      	cmp	r3, r1
     cc0:	d200      	bcs.n	cc4 <wait_for_imu_data+0xcc>
     cc2:	1c02      	adds	r2, r0, #0
     cc4:	b212      	sxth	r2, r2
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     cc6:	2e03      	cmp	r6, #3
     cc8:	d002      	beq.n	cd0 <wait_for_imu_data+0xd8>
     cca:	4b67      	ldr	r3, [pc, #412]	; (e68 <wait_for_imu_data+0x270>)
     ccc:	429a      	cmp	r2, r3
     cce:	dc40      	bgt.n	d52 <wait_for_imu_data+0x15a>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
        imu_icm20948_wait_until_done(&accel_range_request);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     cd0:	2e00      	cmp	r6, #0
     cd2:	d002      	beq.n	cda <wait_for_imu_data+0xe2>
     cd4:	4b65      	ldr	r3, [pc, #404]	; (e6c <wait_for_imu_data+0x274>)
     cd6:	429a      	cmp	r2, r3
     cd8:	dd59      	ble.n	d8e <wait_for_imu_data+0x196>
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
        imu_icm20948_wait_until_done(&accel_range_request);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     cda:	485e      	ldr	r0, [pc, #376]	; (e54 <wait_for_imu_data+0x25c>)
     cdc:	233e      	movs	r3, #62	; 0x3e
     cde:	5ec2      	ldrsh	r2, [r0, r3]
     ce0:	0213      	lsls	r3, r2, #8
     ce2:	b21b      	sxth	r3, r3
     ce4:	b292      	uxth	r2, r2
     ce6:	0a12      	lsrs	r2, r2, #8
     ce8:	4313      	orrs	r3, r2
     cea:	17da      	asrs	r2, r3, #31
     cec:	189b      	adds	r3, r3, r2
     cee:	4053      	eors	r3, r2
     cf0:	b29b      	uxth	r3, r3
     cf2:	223c      	movs	r2, #60	; 0x3c
     cf4:	5e81      	ldrsh	r1, [r0, r2]
     cf6:	020a      	lsls	r2, r1, #8
     cf8:	b212      	sxth	r2, r2
     cfa:	b289      	uxth	r1, r1
     cfc:	0a09      	lsrs	r1, r1, #8
     cfe:	430a      	orrs	r2, r1
     d00:	17d1      	asrs	r1, r2, #31
     d02:	1852      	adds	r2, r2, r1
     d04:	404a      	eors	r2, r1
     d06:	b292      	uxth	r2, r2
     d08:	213a      	movs	r1, #58	; 0x3a
     d0a:	5e40      	ldrsh	r0, [r0, r1]
     d0c:	0201      	lsls	r1, r0, #8
     d0e:	b209      	sxth	r1, r1
     d10:	b280      	uxth	r0, r0
     d12:	0a00      	lsrs	r0, r0, #8
     d14:	4301      	orrs	r1, r0
     d16:	17c8      	asrs	r0, r1, #31
     d18:	1809      	adds	r1, r1, r0
     d1a:	4041      	eors	r1, r0
     d1c:	b289      	uxth	r1, r1
     d1e:	1c10      	adds	r0, r2, #0
     d20:	428a      	cmp	r2, r1
     d22:	d200      	bcs.n	d26 <wait_for_imu_data+0x12e>
     d24:	1c08      	adds	r0, r1, #0
     d26:	1c1a      	adds	r2, r3, #0
     d28:	b281      	uxth	r1, r0
     d2a:	428b      	cmp	r3, r1
     d2c:	d200      	bcs.n	d30 <wait_for_imu_data+0x138>
     d2e:	1c02      	adds	r2, r0, #0
     d30:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     d32:	4b48      	ldr	r3, [pc, #288]	; (e54 <wait_for_imu_data+0x25c>)
     d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     d36:	2b03      	cmp	r3, #3
     d38:	d002      	beq.n	d40 <wait_for_imu_data+0x148>
     d3a:	494b      	ldr	r1, [pc, #300]	; (e68 <wait_for_imu_data+0x270>)
     d3c:	428a      	cmp	r2, r1
     d3e:	dc44      	bgt.n	dca <wait_for_imu_data+0x1d2>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        imu_icm20948_wait_until_done(&gyro_range_request);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     d40:	2b00      	cmp	r3, #0
     d42:	d002      	beq.n	d4a <wait_for_imu_data+0x152>
     d44:	4949      	ldr	r1, [pc, #292]	; (e6c <wait_for_imu_data+0x274>)
     d46:	428a      	cmp	r2, r1
     d48:	dd61      	ble.n	e0e <wait_for_imu_data+0x216>
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        imu_icm20948_wait_until_done(&gyro_range_request);
        led_off();
    }

     d4a:	b006      	add	sp, #24
     d4c:	bc80      	pop	{r7}
     d4e:	46b8      	mov	r8, r7
     d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     d52:	3601      	adds	r6, #1
     d54:	4a3f      	ldr	r2, [pc, #252]	; (e54 <wait_for_imu_data+0x25c>)
     d56:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     d58:	b2f6      	uxtb	r6, r6
     d5a:	0076      	lsls	r6, r6, #1
     d5c:	2306      	movs	r3, #6
     d5e:	401e      	ands	r6, r3
     d60:	3346      	adds	r3, #70	; 0x46
     d62:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     d64:	0014      	movs	r4, r2
     d66:	3450      	adds	r4, #80	; 0x50
     d68:	4841      	ldr	r0, [pc, #260]	; (e70 <wait_for_imu_data+0x278>)
     d6a:	0013      	movs	r3, r2
     d6c:	334c      	adds	r3, #76	; 0x4c
     d6e:	9304      	str	r3, [sp, #16]
     d70:	2301      	movs	r3, #1
     d72:	9303      	str	r3, [sp, #12]
     d74:	2114      	movs	r1, #20
     d76:	9102      	str	r1, [sp, #8]
     d78:	3912      	subs	r1, #18
     d7a:	9101      	str	r1, [sp, #4]
     d7c:	9300      	str	r3, [sp, #0]
     d7e:	3301      	adds	r3, #1
     d80:	0021      	movs	r1, r4
     d82:	4d3c      	ldr	r5, [pc, #240]	; (e74 <wait_for_imu_data+0x27c>)
     d84:	47a8      	blx	r5
        imu_icm20948_wait_until_done(&accel_range_request);
     d86:	0020      	movs	r0, r4
     d88:	4b33      	ldr	r3, [pc, #204]	; (e58 <wait_for_imu_data+0x260>)
     d8a:	4798      	blx	r3
     d8c:	e7a5      	b.n	cda <wait_for_imu_data+0xe2>
        --accel_fs_sel;
     d8e:	3e01      	subs	r6, #1
     d90:	4a30      	ldr	r2, [pc, #192]	; (e54 <wait_for_imu_data+0x25c>)
     d92:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     d94:	b2f6      	uxtb	r6, r6
     d96:	0076      	lsls	r6, r6, #1
     d98:	2306      	movs	r3, #6
     d9a:	401e      	ands	r6, r3
     d9c:	3346      	adds	r3, #70	; 0x46
     d9e:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     da0:	0014      	movs	r4, r2
     da2:	3450      	adds	r4, #80	; 0x50
     da4:	4832      	ldr	r0, [pc, #200]	; (e70 <wait_for_imu_data+0x278>)
     da6:	0013      	movs	r3, r2
     da8:	334c      	adds	r3, #76	; 0x4c
     daa:	9304      	str	r3, [sp, #16]
     dac:	2301      	movs	r3, #1
     dae:	9303      	str	r3, [sp, #12]
     db0:	2114      	movs	r1, #20
     db2:	9102      	str	r1, [sp, #8]
     db4:	3912      	subs	r1, #18
     db6:	9101      	str	r1, [sp, #4]
     db8:	9300      	str	r3, [sp, #0]
     dba:	3301      	adds	r3, #1
     dbc:	0021      	movs	r1, r4
     dbe:	4d2d      	ldr	r5, [pc, #180]	; (e74 <wait_for_imu_data+0x27c>)
     dc0:	47a8      	blx	r5
        imu_icm20948_wait_until_done(&accel_range_request);
     dc2:	0020      	movs	r0, r4
     dc4:	4b24      	ldr	r3, [pc, #144]	; (e58 <wait_for_imu_data+0x260>)
     dc6:	4798      	blx	r3
     dc8:	e787      	b.n	cda <wait_for_imu_data+0xe2>
        ++gyro_fs_sel;
     dca:	3301      	adds	r3, #1
     dcc:	4a21      	ldr	r2, [pc, #132]	; (e54 <wait_for_imu_data+0x25c>)
     dce:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     dd0:	b2db      	uxtb	r3, r3
     dd2:	005b      	lsls	r3, r3, #1
     dd4:	2106      	movs	r1, #6
     dd6:	400b      	ands	r3, r1
     dd8:	3172      	adds	r1, #114	; 0x72
     dda:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     ddc:	0014      	movs	r4, r2
     dde:	347c      	adds	r4, #124	; 0x7c
     de0:	4823      	ldr	r0, [pc, #140]	; (e70 <wait_for_imu_data+0x278>)
     de2:	0013      	movs	r3, r2
     de4:	3378      	adds	r3, #120	; 0x78
     de6:	9304      	str	r3, [sp, #16]
     de8:	2301      	movs	r3, #1
     dea:	9303      	str	r3, [sp, #12]
     dec:	9302      	str	r3, [sp, #8]
     dee:	3976      	subs	r1, #118	; 0x76
     df0:	9101      	str	r1, [sp, #4]
     df2:	9300      	str	r3, [sp, #0]
     df4:	3301      	adds	r3, #1
     df6:	0021      	movs	r1, r4
     df8:	4d1e      	ldr	r5, [pc, #120]	; (e74 <wait_for_imu_data+0x27c>)
     dfa:	47a8      	blx	r5
        imu_icm20948_wait_until_done(&gyro_range_request);
     dfc:	0020      	movs	r0, r4
     dfe:	4b16      	ldr	r3, [pc, #88]	; (e58 <wait_for_imu_data+0x260>)
     e00:	4798      	blx	r3
        led_on();
     e02:	2180      	movs	r1, #128	; 0x80
     e04:	03c9      	lsls	r1, r1, #15
     e06:	2001      	movs	r0, #1
     e08:	4b1b      	ldr	r3, [pc, #108]	; (e78 <wait_for_imu_data+0x280>)
     e0a:	4798      	blx	r3
     e0c:	e79d      	b.n	d4a <wait_for_imu_data+0x152>
        --gyro_fs_sel;
     e0e:	3b01      	subs	r3, #1
     e10:	4a10      	ldr	r2, [pc, #64]	; (e54 <wait_for_imu_data+0x25c>)
     e12:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     e14:	b2db      	uxtb	r3, r3
     e16:	005b      	lsls	r3, r3, #1
     e18:	2106      	movs	r1, #6
     e1a:	400b      	ands	r3, r1
     e1c:	3172      	adds	r1, #114	; 0x72
     e1e:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     e20:	0014      	movs	r4, r2
     e22:	347c      	adds	r4, #124	; 0x7c
     e24:	4812      	ldr	r0, [pc, #72]	; (e70 <wait_for_imu_data+0x278>)
     e26:	0013      	movs	r3, r2
     e28:	3378      	adds	r3, #120	; 0x78
     e2a:	9304      	str	r3, [sp, #16]
     e2c:	2301      	movs	r3, #1
     e2e:	9303      	str	r3, [sp, #12]
     e30:	9302      	str	r3, [sp, #8]
     e32:	3976      	subs	r1, #118	; 0x76
     e34:	9101      	str	r1, [sp, #4]
     e36:	9300      	str	r3, [sp, #0]
     e38:	3301      	adds	r3, #1
     e3a:	0021      	movs	r1, r4
     e3c:	4d0d      	ldr	r5, [pc, #52]	; (e74 <wait_for_imu_data+0x27c>)
     e3e:	47a8      	blx	r5
        imu_icm20948_wait_until_done(&gyro_range_request);
     e40:	0020      	movs	r0, r4
     e42:	4b05      	ldr	r3, [pc, #20]	; (e58 <wait_for_imu_data+0x260>)
     e44:	4798      	blx	r3
        led_off();
     e46:	2180      	movs	r1, #128	; 0x80
     e48:	03c9      	lsls	r1, r1, #15
     e4a:	2001      	movs	r0, #1
     e4c:	4b0b      	ldr	r3, [pc, #44]	; (e7c <wait_for_imu_data+0x284>)
     e4e:	4798      	blx	r3
     e50:	e77b      	b.n	d4a <wait_for_imu_data+0x152>
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	20000274 	.word	0x20000274
     e58:	00004351 	.word	0x00004351
     e5c:	012b4674 	.word	0x012b4674
     e60:	200001f8 	.word	0x200001f8
     e64:	0042943b 	.word	0x0042943b
     e68:	00007333 	.word	0x00007333
     e6c:	00003333 	.word	0x00003333
     e70:	20000370 	.word	0x20000370
     e74:	00004315 	.word	0x00004315
     e78:	000023cd 	.word	0x000023cd
     e7c:	000023dd 	.word	0x000023dd

00000e80 <serial_init>:
    .rxtrig = UART4_DMA_RX_TRIGGER,
    .priority = UART4_DMA_PRIORITY
};


bool serial_init() {
     e80:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

	// init uart
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     e82:	22c0      	movs	r2, #192	; 0xc0
     e84:	0092      	lsls	r2, r2, #2
     e86:	2102      	movs	r1, #2
     e88:	2000      	movs	r0, #0
     e8a:	4c19      	ldr	r4, [pc, #100]	; (ef0 <serial_init+0x70>)
     e8c:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     e8e:	22c0      	movs	r2, #192	; 0xc0
     e90:	0312      	lsls	r2, r2, #12
     e92:	2102      	movs	r1, #2
     e94:	2000      	movs	r0, #0
     e96:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     e98:	22c0      	movs	r2, #192	; 0xc0
     e9a:	0212      	lsls	r2, r2, #8
     e9c:	2102      	movs	r1, #2
     e9e:	2001      	movs	r0, #1
     ea0:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     ea2:	22c0      	movs	r2, #192	; 0xc0
     ea4:	0292      	lsls	r2, r2, #10
     ea6:	2102      	movs	r1, #2
     ea8:	2001      	movs	r0, #1
     eaa:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     eac:	2596      	movs	r5, #150	; 0x96
     eae:	016d      	lsls	r5, r5, #5
     eb0:	002b      	movs	r3, r5
     eb2:	2200      	movs	r2, #0
     eb4:	2101      	movs	r1, #1
     eb6:	480f      	ldr	r0, [pc, #60]	; (ef4 <serial_init+0x74>)
     eb8:	4c0f      	ldr	r4, [pc, #60]	; (ef8 <serial_init+0x78>)
     eba:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     ebc:	4b0f      	ldr	r3, [pc, #60]	; (efc <serial_init+0x7c>)
     ebe:	2201      	movs	r2, #1
     ec0:	2103      	movs	r1, #3
     ec2:	480f      	ldr	r0, [pc, #60]	; (f00 <serial_init+0x80>)
     ec4:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     ec6:	2396      	movs	r3, #150	; 0x96
     ec8:	019b      	lsls	r3, r3, #6
     eca:	2201      	movs	r2, #1
     ecc:	2103      	movs	r1, #3
     ece:	480d      	ldr	r0, [pc, #52]	; (f04 <serial_init+0x84>)
     ed0:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     ed2:	002b      	movs	r3, r5
     ed4:	2200      	movs	r2, #0
     ed6:	2101      	movs	r1, #1
     ed8:	480b      	ldr	r0, [pc, #44]	; (f08 <serial_init+0x88>)
     eda:	47a0      	blx	r4
    
	// init usb
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     edc:	2180      	movs	r1, #128	; 0x80
     ede:	20e0      	movs	r0, #224	; 0xe0
     ee0:	0049      	lsls	r1, r1, #1
     ee2:	00c0      	lsls	r0, r0, #3
     ee4:	4b09      	ldr	r3, [pc, #36]	; (f0c <serial_init+0x8c>)
     ee6:	4798      	blx	r3
	usb_attach();
     ee8:	4b09      	ldr	r3, [pc, #36]	; (f10 <serial_init+0x90>)
     eea:	4798      	blx	r3
}
     eec:	bd70      	pop	{r4, r5, r6, pc}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	000023ed 	.word	0x000023ed
     ef4:	42000800 	.word	0x42000800
     ef8:	00002af5 	.word	0x00002af5
     efc:	000668a0 	.word	0x000668a0
     f00:	42000c00 	.word	0x42000c00
     f04:	42001800 	.word	0x42001800
     f08:	42001c00 	.word	0x42001c00
     f0c:	00004725 	.word	0x00004725
     f10:	00003249 	.word	0x00003249

00000f14 <serial_set_baud>:
bool serial_quit() {
    // will kill usb process which would remain running
    rtos_usb_quit();
}

bool serial_set_baud(Serial_Port_IDs port, uint32_t baud) {
     f14:	b510      	push	{r4, lr}
    switch (port) {
     f16:	2804      	cmp	r0, #4
     f18:	d803      	bhi.n	f22 <serial_set_baud+0xe>
     f1a:	0080      	lsls	r0, r0, #2
     f1c:	4b0d      	ldr	r3, [pc, #52]	; (f54 <serial_set_baud+0x40>)
     f1e:	581b      	ldr	r3, [r3, r0]
     f20:	469f      	mov	pc, r3
     f22:	2000      	movs	r0, #0
     f24:	e014      	b.n	f50 <serial_set_baud+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_set_baud(UART1_SERCOM, baud);
     f26:	480c      	ldr	r0, [pc, #48]	; (f58 <serial_set_baud+0x44>)
     f28:	4b0c      	ldr	r3, [pc, #48]	; (f5c <serial_set_baud+0x48>)
     f2a:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     f2c:	2001      	movs	r0, #1
        break;
     f2e:	e00f      	b.n	f50 <serial_set_baud+0x3c>
        uart_set_baud(UART2_SERCOM, baud);
     f30:	480b      	ldr	r0, [pc, #44]	; (f60 <serial_set_baud+0x4c>)
     f32:	4b0a      	ldr	r3, [pc, #40]	; (f5c <serial_set_baud+0x48>)
     f34:	4798      	blx	r3
    return true;
     f36:	2001      	movs	r0, #1
        break;
     f38:	e00a      	b.n	f50 <serial_set_baud+0x3c>
        uart_set_baud(UART3_SERCOM, baud);
     f3a:	480a      	ldr	r0, [pc, #40]	; (f64 <serial_set_baud+0x50>)
     f3c:	4b07      	ldr	r3, [pc, #28]	; (f5c <serial_set_baud+0x48>)
     f3e:	4798      	blx	r3
    return true;
     f40:	2001      	movs	r0, #1
        break;
     f42:	e005      	b.n	f50 <serial_set_baud+0x3c>
        uart_set_baud(UART4_SERCOM, baud);
     f44:	4808      	ldr	r0, [pc, #32]	; (f68 <serial_set_baud+0x54>)
     f46:	4b05      	ldr	r3, [pc, #20]	; (f5c <serial_set_baud+0x48>)
     f48:	4798      	blx	r3
    return true;
     f4a:	2001      	movs	r0, #1
        break;
     f4c:	e000      	b.n	f50 <serial_set_baud+0x3c>
    return true;
     f4e:	2001      	movs	r0, #1
}
     f50:	bd10      	pop	{r4, pc}
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	000060e4 	.word	0x000060e4
     f58:	42000800 	.word	0x42000800
     f5c:	00002a8d 	.word	0x00002a8d
     f60:	42000c00 	.word	0x42000c00
     f64:	42001800 	.word	0x42001800
     f68:	42001c00 	.word	0x42001c00

00000f6c <serial_enable_interrupt>:

bool serial_enable_interrupt(Serial_Port_IDs port, void (*callback)(void)) {
     f6c:	b510      	push	{r4, lr}
        switch (port) {
     f6e:	2804      	cmp	r0, #4
     f70:	d803      	bhi.n	f7a <serial_enable_interrupt+0xe>
     f72:	0080      	lsls	r0, r0, #2
     f74:	4b0d      	ldr	r3, [pc, #52]	; (fac <serial_enable_interrupt+0x40>)
     f76:	581b      	ldr	r3, [r3, r0]
     f78:	469f      	mov	pc, r3
     f7a:	2000      	movs	r0, #0
     f7c:	e014      	b.n	fa8 <serial_enable_interrupt+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_set_interrupt(UART1_SERCOM, callback);
     f7e:	480c      	ldr	r0, [pc, #48]	; (fb0 <serial_enable_interrupt+0x44>)
     f80:	4b0c      	ldr	r3, [pc, #48]	; (fb4 <serial_enable_interrupt+0x48>)
     f82:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     f84:	2001      	movs	r0, #1
        break;
     f86:	e00f      	b.n	fa8 <serial_enable_interrupt+0x3c>
        uart_set_interrupt(UART2_SERCOM, callback);
     f88:	480b      	ldr	r0, [pc, #44]	; (fb8 <serial_enable_interrupt+0x4c>)
     f8a:	4b0a      	ldr	r3, [pc, #40]	; (fb4 <serial_enable_interrupt+0x48>)
     f8c:	4798      	blx	r3
    return true;
     f8e:	2001      	movs	r0, #1
        break;
     f90:	e00a      	b.n	fa8 <serial_enable_interrupt+0x3c>
        uart_set_interrupt(UART3_SERCOM, callback);
     f92:	480a      	ldr	r0, [pc, #40]	; (fbc <serial_enable_interrupt+0x50>)
     f94:	4b07      	ldr	r3, [pc, #28]	; (fb4 <serial_enable_interrupt+0x48>)
     f96:	4798      	blx	r3
    return true;
     f98:	2001      	movs	r0, #1
        break;
     f9a:	e005      	b.n	fa8 <serial_enable_interrupt+0x3c>
        uart_set_interrupt(UART4_SERCOM, callback);
     f9c:	4808      	ldr	r0, [pc, #32]	; (fc0 <serial_enable_interrupt+0x54>)
     f9e:	4b05      	ldr	r3, [pc, #20]	; (fb4 <serial_enable_interrupt+0x48>)
     fa0:	4798      	blx	r3
    return true;
     fa2:	2001      	movs	r0, #1
        break;
     fa4:	e000      	b.n	fa8 <serial_enable_interrupt+0x3c>
    return true;
     fa6:	2001      	movs	r0, #1
}
     fa8:	bd10      	pop	{r4, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	000060f8 	.word	0x000060f8
     fb0:	42000800 	.word	0x42000800
     fb4:	00002b51 	.word	0x00002b51
     fb8:	42000c00 	.word	0x42000c00
     fbc:	42001800 	.word	0x42001800
     fc0:	42001c00 	.word	0x42001c00

00000fc4 <serial_write_start>:


bool serial_write_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     fc4:	b570      	push	{r4, r5, r6, lr}
     fc6:	000e      	movs	r6, r1
     fc8:	0013      	movs	r3, r2
    switch (port) {
     fca:	2804      	cmp	r0, #4
     fcc:	d825      	bhi.n	101a <serial_write_start+0x56>
     fce:	0080      	lsls	r0, r0, #2
     fd0:	4d13      	ldr	r5, [pc, #76]	; (1020 <serial_write_start+0x5c>)
     fd2:	582c      	ldr	r4, [r5, r0]
     fd4:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_send_buffer(buffer, count);
     fd6:	0011      	movs	r1, r2
     fd8:	0030      	movs	r0, r6
     fda:	4b12      	ldr	r3, [pc, #72]	; (1024 <serial_write_start+0x60>)
     fdc:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     fde:	2001      	movs	r0, #1
}
     fe0:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_send_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     fe2:	4911      	ldr	r1, [pc, #68]	; (1028 <serial_write_start+0x64>)
     fe4:	0032      	movs	r2, r6
     fe6:	4811      	ldr	r0, [pc, #68]	; (102c <serial_write_start+0x68>)
     fe8:	4c11      	ldr	r4, [pc, #68]	; (1030 <serial_write_start+0x6c>)
     fea:	47a0      	blx	r4
    return true;
     fec:	2001      	movs	r0, #1
        break;
     fee:	e7f7      	b.n	fe0 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     ff0:	4910      	ldr	r1, [pc, #64]	; (1034 <serial_write_start+0x70>)
     ff2:	0032      	movs	r2, r6
     ff4:	4810      	ldr	r0, [pc, #64]	; (1038 <serial_write_start+0x74>)
     ff6:	4c0e      	ldr	r4, [pc, #56]	; (1030 <serial_write_start+0x6c>)
     ff8:	47a0      	blx	r4
    return true;
     ffa:	2001      	movs	r0, #1
        break;
     ffc:	e7f0      	b.n	fe0 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     ffe:	490f      	ldr	r1, [pc, #60]	; (103c <serial_write_start+0x78>)
    1000:	0032      	movs	r2, r6
    1002:	480f      	ldr	r0, [pc, #60]	; (1040 <serial_write_start+0x7c>)
    1004:	4c0a      	ldr	r4, [pc, #40]	; (1030 <serial_write_start+0x6c>)
    1006:	47a0      	blx	r4
    return true;
    1008:	2001      	movs	r0, #1
        break;
    100a:	e7e9      	b.n	fe0 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
    100c:	490d      	ldr	r1, [pc, #52]	; (1044 <serial_write_start+0x80>)
    100e:	0032      	movs	r2, r6
    1010:	480d      	ldr	r0, [pc, #52]	; (1048 <serial_write_start+0x84>)
    1012:	4c07      	ldr	r4, [pc, #28]	; (1030 <serial_write_start+0x6c>)
    1014:	47a0      	blx	r4
    return true;
    1016:	2001      	movs	r0, #1
        break;
    1018:	e7e2      	b.n	fe0 <serial_write_start+0x1c>
    switch (port) {
    101a:	2000      	movs	r0, #0
    101c:	e7e0      	b.n	fe0 <serial_write_start+0x1c>
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	0000610c 	.word	0x0000610c
    1024:	000047cd 	.word	0x000047cd
    1028:	00006184 	.word	0x00006184
    102c:	42000800 	.word	0x42000800
    1030:	000044e9 	.word	0x000044e9
    1034:	0000618c 	.word	0x0000618c
    1038:	42000c00 	.word	0x42000c00
    103c:	00006194 	.word	0x00006194
    1040:	42001800 	.word	0x42001800
    1044:	0000619c 	.word	0x0000619c
    1048:	42001c00 	.word	0x42001c00

0000104c <serial_write_wait_until_complete>:

bool serial_write_wait_until_complete(Serial_Port_IDs port) {
    104c:	b510      	push	{r4, lr}
    switch (port) {
    104e:	2804      	cmp	r0, #4
    1050:	d81b      	bhi.n	108a <serial_write_wait_until_complete+0x3e>
    1052:	0080      	lsls	r0, r0, #2
    1054:	4b0e      	ldr	r3, [pc, #56]	; (1090 <serial_write_wait_until_complete+0x44>)
    1056:	581b      	ldr	r3, [r3, r0]
    1058:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_send_complete();
    105a:	4b0e      	ldr	r3, [pc, #56]	; (1094 <serial_write_wait_until_complete+0x48>)
    105c:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    105e:	2001      	movs	r0, #1
}
    1060:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_send_complete(&uart1_descriptor);
    1062:	480d      	ldr	r0, [pc, #52]	; (1098 <serial_write_wait_until_complete+0x4c>)
    1064:	4b0d      	ldr	r3, [pc, #52]	; (109c <serial_write_wait_until_complete+0x50>)
    1066:	4798      	blx	r3
    return true;
    1068:	2001      	movs	r0, #1
        break;
    106a:	e7f9      	b.n	1060 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart2_descriptor);
    106c:	480c      	ldr	r0, [pc, #48]	; (10a0 <serial_write_wait_until_complete+0x54>)
    106e:	4b0b      	ldr	r3, [pc, #44]	; (109c <serial_write_wait_until_complete+0x50>)
    1070:	4798      	blx	r3
    return true;
    1072:	2001      	movs	r0, #1
        break;
    1074:	e7f4      	b.n	1060 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart3_descriptor);
    1076:	480b      	ldr	r0, [pc, #44]	; (10a4 <serial_write_wait_until_complete+0x58>)
    1078:	4b08      	ldr	r3, [pc, #32]	; (109c <serial_write_wait_until_complete+0x50>)
    107a:	4798      	blx	r3
    return true;
    107c:	2001      	movs	r0, #1
        break;
    107e:	e7ef      	b.n	1060 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart4_descriptor);
    1080:	4809      	ldr	r0, [pc, #36]	; (10a8 <serial_write_wait_until_complete+0x5c>)
    1082:	4b06      	ldr	r3, [pc, #24]	; (109c <serial_write_wait_until_complete+0x50>)
    1084:	4798      	blx	r3
    return true;
    1086:	2001      	movs	r0, #1
        break;
    1088:	e7ea      	b.n	1060 <serial_write_wait_until_complete+0x14>
    switch (port) {
    108a:	2000      	movs	r0, #0
    108c:	e7e8      	b.n	1060 <serial_write_wait_until_complete+0x14>
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	00006120 	.word	0x00006120
    1094:	00004819 	.word	0x00004819
    1098:	00006184 	.word	0x00006184
    109c:	00004559 	.word	0x00004559
    10a0:	0000618c 	.word	0x0000618c
    10a4:	00006194 	.word	0x00006194
    10a8:	0000619c 	.word	0x0000619c

000010ac <serial_read_start>:


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
    10ac:	b570      	push	{r4, r5, r6, lr}
    10ae:	000e      	movs	r6, r1
    10b0:	0013      	movs	r3, r2
    switch (port) {
    10b2:	2804      	cmp	r0, #4
    10b4:	d825      	bhi.n	1102 <serial_read_start+0x56>
    10b6:	0080      	lsls	r0, r0, #2
    10b8:	4d13      	ldr	r5, [pc, #76]	; (1108 <serial_read_start+0x5c>)
    10ba:	582c      	ldr	r4, [r5, r0]
    10bc:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_read_buffer(buffer, count);
    10be:	0011      	movs	r1, r2
    10c0:	0030      	movs	r0, r6
    10c2:	4b12      	ldr	r3, [pc, #72]	; (110c <serial_read_start+0x60>)
    10c4:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    10c6:	2001      	movs	r0, #1
}
    10c8:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
    10ca:	4911      	ldr	r1, [pc, #68]	; (1110 <serial_read_start+0x64>)
    10cc:	0032      	movs	r2, r6
    10ce:	4811      	ldr	r0, [pc, #68]	; (1114 <serial_read_start+0x68>)
    10d0:	4c11      	ldr	r4, [pc, #68]	; (1118 <serial_read_start+0x6c>)
    10d2:	47a0      	blx	r4
    return true;
    10d4:	2001      	movs	r0, #1
        break;
    10d6:	e7f7      	b.n	10c8 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
    10d8:	4910      	ldr	r1, [pc, #64]	; (111c <serial_read_start+0x70>)
    10da:	0032      	movs	r2, r6
    10dc:	4810      	ldr	r0, [pc, #64]	; (1120 <serial_read_start+0x74>)
    10de:	4c0e      	ldr	r4, [pc, #56]	; (1118 <serial_read_start+0x6c>)
    10e0:	47a0      	blx	r4
    return true;
    10e2:	2001      	movs	r0, #1
        break;
    10e4:	e7f0      	b.n	10c8 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
    10e6:	490f      	ldr	r1, [pc, #60]	; (1124 <serial_read_start+0x78>)
    10e8:	0032      	movs	r2, r6
    10ea:	480f      	ldr	r0, [pc, #60]	; (1128 <serial_read_start+0x7c>)
    10ec:	4c0a      	ldr	r4, [pc, #40]	; (1118 <serial_read_start+0x6c>)
    10ee:	47a0      	blx	r4
    return true;
    10f0:	2001      	movs	r0, #1
        break;
    10f2:	e7e9      	b.n	10c8 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
    10f4:	490d      	ldr	r1, [pc, #52]	; (112c <serial_read_start+0x80>)
    10f6:	0032      	movs	r2, r6
    10f8:	480d      	ldr	r0, [pc, #52]	; (1130 <serial_read_start+0x84>)
    10fa:	4c07      	ldr	r4, [pc, #28]	; (1118 <serial_read_start+0x6c>)
    10fc:	47a0      	blx	r4
    return true;
    10fe:	2001      	movs	r0, #1
        break;
    1100:	e7e2      	b.n	10c8 <serial_read_start+0x1c>
    switch (port) {
    1102:	2000      	movs	r0, #0
    1104:	e7e0      	b.n	10c8 <serial_read_start+0x1c>
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	00006134 	.word	0x00006134
    110c:	00004835 	.word	0x00004835
    1110:	00006184 	.word	0x00006184
    1114:	42000800 	.word	0x42000800
    1118:	00004569 	.word	0x00004569
    111c:	0000618c 	.word	0x0000618c
    1120:	42000c00 	.word	0x42000c00
    1124:	00006194 	.word	0x00006194
    1128:	42001800 	.word	0x42001800
    112c:	0000619c 	.word	0x0000619c
    1130:	42001c00 	.word	0x42001c00

00001134 <serial_read_wait_until_complete>:

bool serial_read_wait_until_complete(Serial_Port_IDs port) {
    1134:	b510      	push	{r4, lr}
    switch (port) {
    1136:	2804      	cmp	r0, #4
    1138:	d81b      	bhi.n	1172 <serial_read_wait_until_complete+0x3e>
    113a:	0080      	lsls	r0, r0, #2
    113c:	4b0e      	ldr	r3, [pc, #56]	; (1178 <serial_read_wait_until_complete+0x44>)
    113e:	581b      	ldr	r3, [r3, r0]
    1140:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete();
    1142:	4b0e      	ldr	r3, [pc, #56]	; (117c <serial_read_wait_until_complete+0x48>)
    1144:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    1146:	2001      	movs	r0, #1
}
    1148:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete(&uart1_descriptor);
    114a:	480d      	ldr	r0, [pc, #52]	; (1180 <serial_read_wait_until_complete+0x4c>)
    114c:	4b0d      	ldr	r3, [pc, #52]	; (1184 <serial_read_wait_until_complete+0x50>)
    114e:	4798      	blx	r3
    return true;
    1150:	2001      	movs	r0, #1
        break;
    1152:	e7f9      	b.n	1148 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart2_descriptor);
    1154:	480c      	ldr	r0, [pc, #48]	; (1188 <serial_read_wait_until_complete+0x54>)
    1156:	4b0b      	ldr	r3, [pc, #44]	; (1184 <serial_read_wait_until_complete+0x50>)
    1158:	4798      	blx	r3
    return true;
    115a:	2001      	movs	r0, #1
        break;
    115c:	e7f4      	b.n	1148 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart3_descriptor);
    115e:	480b      	ldr	r0, [pc, #44]	; (118c <serial_read_wait_until_complete+0x58>)
    1160:	4b08      	ldr	r3, [pc, #32]	; (1184 <serial_read_wait_until_complete+0x50>)
    1162:	4798      	blx	r3
    return true;
    1164:	2001      	movs	r0, #1
        break;
    1166:	e7ef      	b.n	1148 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart4_descriptor);
    1168:	4809      	ldr	r0, [pc, #36]	; (1190 <serial_read_wait_until_complete+0x5c>)
    116a:	4b06      	ldr	r3, [pc, #24]	; (1184 <serial_read_wait_until_complete+0x50>)
    116c:	4798      	blx	r3
    return true;
    116e:	2001      	movs	r0, #1
        break;
    1170:	e7ea      	b.n	1148 <serial_read_wait_until_complete+0x14>
    switch (port) {
    1172:	2000      	movs	r0, #0
    1174:	e7e8      	b.n	1148 <serial_read_wait_until_complete+0x14>
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00006148 	.word	0x00006148
    117c:	0000486d 	.word	0x0000486d
    1180:	00006184 	.word	0x00006184
    1184:	000045d9 	.word	0x000045d9
    1188:	0000618c 	.word	0x0000618c
    118c:	00006194 	.word	0x00006194
    1190:	0000619c 	.word	0x0000619c

00001194 <serial_read_start_infinite>:

bool serial_read_start_infinite(Serial_Port_IDs port, uint8_t* buffer, int count) {
    1194:	b510      	push	{r4, lr}
    1196:	0013      	movs	r3, r2
    switch (port) {
    1198:	2803      	cmp	r0, #3
    119a:	d022      	beq.n	11e2 <serial_read_start_infinite+0x4e>
    119c:	d80d      	bhi.n	11ba <serial_read_start_infinite+0x26>
    119e:	2801      	cmp	r0, #1
    11a0:	d017      	beq.n	11d2 <serial_read_start_infinite+0x3e>
    11a2:	2802      	cmp	r0, #2
    11a4:	d107      	bne.n	11b6 <serial_read_start_infinite+0x22>
        case PORT1:
        rtos_uart_start_read_buffer_infinite(UART1_SERCOM, &uart1_descriptor, buffer, count);
        break;

        case PORT2:
        rtos_uart_start_read_buffer_infinite(UART2_SERCOM, &uart2_descriptor, buffer, count);
    11a6:	4813      	ldr	r0, [pc, #76]	; (11f4 <serial_read_start_infinite+0x60>)
    11a8:	000a      	movs	r2, r1
    11aa:	0001      	movs	r1, r0
    11ac:	4812      	ldr	r0, [pc, #72]	; (11f8 <serial_read_start_infinite+0x64>)
    11ae:	4c13      	ldr	r4, [pc, #76]	; (11fc <serial_read_start_infinite+0x68>)
    11b0:	47a0      	blx	r4
        default:
        return false;
        break;
    }

    return true;
    11b2:	2001      	movs	r0, #1
        break;
    11b4:	e00c      	b.n	11d0 <serial_read_start_infinite+0x3c>
    switch (port) {
    11b6:	2000      	movs	r0, #0
    11b8:	e00a      	b.n	11d0 <serial_read_start_infinite+0x3c>
    11ba:	2804      	cmp	r0, #4
    11bc:	d107      	bne.n	11ce <serial_read_start_infinite+0x3a>
        rtos_uart_start_read_buffer_infinite(UART4_SERCOM, &uart4_descriptor, buffer, count);
    11be:	4810      	ldr	r0, [pc, #64]	; (1200 <serial_read_start_infinite+0x6c>)
    11c0:	000a      	movs	r2, r1
    11c2:	0001      	movs	r1, r0
    11c4:	480f      	ldr	r0, [pc, #60]	; (1204 <serial_read_start_infinite+0x70>)
    11c6:	4c0d      	ldr	r4, [pc, #52]	; (11fc <serial_read_start_infinite+0x68>)
    11c8:	47a0      	blx	r4
    return true;
    11ca:	2001      	movs	r0, #1
        break;
    11cc:	e000      	b.n	11d0 <serial_read_start_infinite+0x3c>
    switch (port) {
    11ce:	2000      	movs	r0, #0
}
    11d0:	bd10      	pop	{r4, pc}
        rtos_uart_start_read_buffer_infinite(UART1_SERCOM, &uart1_descriptor, buffer, count);
    11d2:	480d      	ldr	r0, [pc, #52]	; (1208 <serial_read_start_infinite+0x74>)
    11d4:	000a      	movs	r2, r1
    11d6:	0001      	movs	r1, r0
    11d8:	480c      	ldr	r0, [pc, #48]	; (120c <serial_read_start_infinite+0x78>)
    11da:	4c08      	ldr	r4, [pc, #32]	; (11fc <serial_read_start_infinite+0x68>)
    11dc:	47a0      	blx	r4
    return true;
    11de:	2001      	movs	r0, #1
        break;
    11e0:	e7f6      	b.n	11d0 <serial_read_start_infinite+0x3c>
        rtos_uart_start_read_buffer_infinite(UART3_SERCOM, &uart3_descriptor, buffer, count);
    11e2:	480b      	ldr	r0, [pc, #44]	; (1210 <serial_read_start_infinite+0x7c>)
    11e4:	000a      	movs	r2, r1
    11e6:	0001      	movs	r1, r0
    11e8:	480a      	ldr	r0, [pc, #40]	; (1214 <serial_read_start_infinite+0x80>)
    11ea:	4c04      	ldr	r4, [pc, #16]	; (11fc <serial_read_start_infinite+0x68>)
    11ec:	47a0      	blx	r4
    return true;
    11ee:	2001      	movs	r0, #1
        break;
    11f0:	e7ee      	b.n	11d0 <serial_read_start_infinite+0x3c>
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	0000618c 	.word	0x0000618c
    11f8:	42000c00 	.word	0x42000c00
    11fc:	00004605 	.word	0x00004605
    1200:	0000619c 	.word	0x0000619c
    1204:	42001c00 	.word	0x42001c00
    1208:	00006184 	.word	0x00006184
    120c:	42000800 	.word	0x42000800
    1210:	00006194 	.word	0x00006194
    1214:	42001800 	.word	0x42001800

00001218 <serial_read_wait_until_complete_or_timeout>:

bool serial_read_wait_until_complete_or_timeout(Serial_Port_IDs port, uint32_t timeout_ms) {
    1218:	b510      	push	{r4, lr}
    switch (port) {
    121a:	2804      	cmp	r0, #4
    121c:	d827      	bhi.n	126e <serial_read_wait_until_complete_or_timeout+0x56>
    121e:	0080      	lsls	r0, r0, #2
    1220:	4b14      	ldr	r3, [pc, #80]	; (1274 <serial_read_wait_until_complete_or_timeout+0x5c>)
    1222:	581b      	ldr	r3, [r3, r0]
    1224:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete(); // USB doesn't time out
    1226:	4b14      	ldr	r3, [pc, #80]	; (1278 <serial_read_wait_until_complete_or_timeout+0x60>)
    1228:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    122a:	2001      	movs	r0, #1
}
    122c:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete_or_timeout(&uart1_descriptor, timeout_ms * time_ticks_ms_mult);
    122e:	4b13      	ldr	r3, [pc, #76]	; (127c <serial_read_wait_until_complete_or_timeout+0x64>)
    1230:	681b      	ldr	r3, [r3, #0]
    1232:	4359      	muls	r1, r3
    1234:	4812      	ldr	r0, [pc, #72]	; (1280 <serial_read_wait_until_complete_or_timeout+0x68>)
    1236:	4b13      	ldr	r3, [pc, #76]	; (1284 <serial_read_wait_until_complete_or_timeout+0x6c>)
    1238:	4798      	blx	r3
    return true;
    123a:	2001      	movs	r0, #1
        break;
    123c:	e7f6      	b.n	122c <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart2_descriptor, timeout_ms * time_ticks_ms_mult);
    123e:	4b0f      	ldr	r3, [pc, #60]	; (127c <serial_read_wait_until_complete_or_timeout+0x64>)
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	4359      	muls	r1, r3
    1244:	4810      	ldr	r0, [pc, #64]	; (1288 <serial_read_wait_until_complete_or_timeout+0x70>)
    1246:	4b0f      	ldr	r3, [pc, #60]	; (1284 <serial_read_wait_until_complete_or_timeout+0x6c>)
    1248:	4798      	blx	r3
    return true;
    124a:	2001      	movs	r0, #1
        break;
    124c:	e7ee      	b.n	122c <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart3_descriptor, timeout_ms * time_ticks_ms_mult);
    124e:	4b0b      	ldr	r3, [pc, #44]	; (127c <serial_read_wait_until_complete_or_timeout+0x64>)
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	4359      	muls	r1, r3
    1254:	480d      	ldr	r0, [pc, #52]	; (128c <serial_read_wait_until_complete_or_timeout+0x74>)
    1256:	4b0b      	ldr	r3, [pc, #44]	; (1284 <serial_read_wait_until_complete_or_timeout+0x6c>)
    1258:	4798      	blx	r3
    return true;
    125a:	2001      	movs	r0, #1
        break;
    125c:	e7e6      	b.n	122c <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart4_descriptor, timeout_ms * time_ticks_ms_mult);
    125e:	4b07      	ldr	r3, [pc, #28]	; (127c <serial_read_wait_until_complete_or_timeout+0x64>)
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	4359      	muls	r1, r3
    1264:	480a      	ldr	r0, [pc, #40]	; (1290 <serial_read_wait_until_complete_or_timeout+0x78>)
    1266:	4b07      	ldr	r3, [pc, #28]	; (1284 <serial_read_wait_until_complete_or_timeout+0x6c>)
    1268:	4798      	blx	r3
    return true;
    126a:	2001      	movs	r0, #1
        break;
    126c:	e7de      	b.n	122c <serial_read_wait_until_complete_or_timeout+0x14>
    switch (port) {
    126e:	2000      	movs	r0, #0
    1270:	e7dc      	b.n	122c <serial_read_wait_until_complete_or_timeout+0x14>
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	0000615c 	.word	0x0000615c
    1278:	0000486d 	.word	0x0000486d
    127c:	00006398 	.word	0x00006398
    1280:	00006184 	.word	0x00006184
    1284:	000045e9 	.word	0x000045e9
    1288:	0000618c 	.word	0x0000618c
    128c:	00006194 	.word	0x00006194
    1290:	0000619c 	.word	0x0000619c

00001294 <serial_flush>:

bool serial_flush(Serial_Port_IDs port) {
    1294:	b510      	push	{r4, lr}
    switch (port) {
    1296:	2804      	cmp	r0, #4
    1298:	d803      	bhi.n	12a2 <serial_flush+0xe>
    129a:	0080      	lsls	r0, r0, #2
    129c:	4b0d      	ldr	r3, [pc, #52]	; (12d4 <serial_flush+0x40>)
    129e:	581b      	ldr	r3, [r3, r0]
    12a0:	469f      	mov	pc, r3
    12a2:	2000      	movs	r0, #0
    12a4:	e014      	b.n	12d0 <serial_flush+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_flush(UART1_SERCOM);
    12a6:	480c      	ldr	r0, [pc, #48]	; (12d8 <serial_flush+0x44>)
    12a8:	4b0c      	ldr	r3, [pc, #48]	; (12dc <serial_flush+0x48>)
    12aa:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    12ac:	2001      	movs	r0, #1
        break;
    12ae:	e00f      	b.n	12d0 <serial_flush+0x3c>
        uart_flush(UART2_SERCOM);
    12b0:	480b      	ldr	r0, [pc, #44]	; (12e0 <serial_flush+0x4c>)
    12b2:	4b0a      	ldr	r3, [pc, #40]	; (12dc <serial_flush+0x48>)
    12b4:	4798      	blx	r3
    return true;
    12b6:	2001      	movs	r0, #1
        break;
    12b8:	e00a      	b.n	12d0 <serial_flush+0x3c>
        uart_flush(UART3_SERCOM);
    12ba:	480a      	ldr	r0, [pc, #40]	; (12e4 <serial_flush+0x50>)
    12bc:	4b07      	ldr	r3, [pc, #28]	; (12dc <serial_flush+0x48>)
    12be:	4798      	blx	r3
    return true;
    12c0:	2001      	movs	r0, #1
        break;
    12c2:	e005      	b.n	12d0 <serial_flush+0x3c>
        uart_flush(UART4_SERCOM);
    12c4:	4808      	ldr	r0, [pc, #32]	; (12e8 <serial_flush+0x54>)
    12c6:	4b05      	ldr	r3, [pc, #20]	; (12dc <serial_flush+0x48>)
    12c8:	4798      	blx	r3
    return true;
    12ca:	2001      	movs	r0, #1
        break;
    12cc:	e000      	b.n	12d0 <serial_flush+0x3c>
    return true;
    12ce:	2001      	movs	r0, #1
}
    12d0:	bd10      	pop	{r4, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	00006170 	.word	0x00006170
    12d8:	42000800 	.word	0x42000800
    12dc:	00002bd1 	.word	0x00002bd1
    12e0:	42000c00 	.word	0x42000c00
    12e4:	42001800 	.word	0x42001800
    12e8:	42001c00 	.word	0x42001c00

000012ec <serial_is_usb_vcp>:


bool serial_is_usb_vcp(Serial_Port_IDs port) {
    return port == PORT0;
    12ec:	4243      	negs	r3, r0
    12ee:	4158      	adcs	r0, r3
    12f0:	b2c0      	uxtb	r0, r0
    // return true;
    12f2:	4770      	bx	lr

000012f4 <buzzer>:
	serial_quit();
}

volatile int usb_int_counter = 0;

void buzzer() {
    12f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12f6:	46ce      	mov	lr, r9
    12f8:	4647      	mov	r7, r8
    12fa:	b580      	push	{r7, lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
    12fc:	2106      	movs	r1, #6
    12fe:	482a      	ldr	r0, [pc, #168]	; (13a8 <buzzer+0xb4>)
    1300:	4b2a      	ldr	r3, [pc, #168]	; (13ac <buzzer+0xb8>)
    1302:	4798      	blx	r3
    1304:	2800      	cmp	r0, #0
    1306:	d019      	beq.n	133c <buzzer+0x48>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
    1308:	4929      	ldr	r1, [pc, #164]	; (13b0 <buzzer+0xbc>)
    130a:	4827      	ldr	r0, [pc, #156]	; (13a8 <buzzer+0xb4>)
    130c:	4b29      	ldr	r3, [pc, #164]	; (13b4 <buzzer+0xc0>)
    130e:	4798      	blx	r3
    1310:	2800      	cmp	r0, #0
    1312:	d016      	beq.n	1342 <buzzer+0x4e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
    1314:	2200      	movs	r2, #0
    1316:	2101      	movs	r1, #1
    1318:	4823      	ldr	r0, [pc, #140]	; (13a8 <buzzer+0xb4>)
    131a:	4b27      	ldr	r3, [pc, #156]	; (13b8 <buzzer+0xc4>)
    131c:	4798      	blx	r3
    131e:	2800      	cmp	r0, #0
    1320:	d012      	beq.n	1348 <buzzer+0x54>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
    1322:	4821      	ldr	r0, [pc, #132]	; (13a8 <buzzer+0xb4>)
    1324:	4b25      	ldr	r3, [pc, #148]	; (13bc <buzzer+0xc8>)
    1326:	4798      	blx	r3
    1328:	2800      	cmp	r0, #0
    132a:	d010      	beq.n	134e <buzzer+0x5a>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
    132c:	2280      	movs	r2, #128	; 0x80
    132e:	0412      	lsls	r2, r2, #16
    1330:	2104      	movs	r1, #4
    1332:	2001      	movs	r0, #1
    1334:	4b22      	ldr	r3, [pc, #136]	; (13c0 <buzzer+0xcc>)
    1336:	4798      	blx	r3
	
	for (int i = 0; i < 2; ++i) {
    1338:	2500      	movs	r5, #0
    133a:	e02e      	b.n	139a <buzzer+0xa6>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
    133c:	4b21      	ldr	r3, [pc, #132]	; (13c4 <buzzer+0xd0>)
    133e:	4798      	blx	r3
    1340:	e7e2      	b.n	1308 <buzzer+0x14>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
    1342:	4b20      	ldr	r3, [pc, #128]	; (13c4 <buzzer+0xd0>)
    1344:	4798      	blx	r3
    1346:	e7e5      	b.n	1314 <buzzer+0x20>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
    1348:	4b1e      	ldr	r3, [pc, #120]	; (13c4 <buzzer+0xd0>)
    134a:	4798      	blx	r3
    134c:	e7e9      	b.n	1322 <buzzer+0x2e>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
    134e:	4b1d      	ldr	r3, [pc, #116]	; (13c4 <buzzer+0xd0>)
    1350:	4798      	blx	r3
    1352:	e7eb      	b.n	132c <buzzer+0x38>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
    1354:	4b14      	ldr	r3, [pc, #80]	; (13a8 <buzzer+0xb4>)
    1356:	4698      	mov	r8, r3
    1358:	22fc      	movs	r2, #252	; 0xfc
    135a:	0592      	lsls	r2, r2, #22
    135c:	2101      	movs	r1, #1
    135e:	0018      	movs	r0, r3
    1360:	4f15      	ldr	r7, [pc, #84]	; (13b8 <buzzer+0xc4>)
    1362:	47b8      	blx	r7
		led_on();
    1364:	2680      	movs	r6, #128	; 0x80
    1366:	03f6      	lsls	r6, r6, #15
    1368:	0031      	movs	r1, r6
    136a:	2001      	movs	r0, #1
    136c:	4b16      	ldr	r3, [pc, #88]	; (13c8 <buzzer+0xd4>)
    136e:	4798      	blx	r3
		rtos_delay_ms(75);
    1370:	4b16      	ldr	r3, [pc, #88]	; (13cc <buzzer+0xd8>)
    1372:	681a      	ldr	r2, [r3, #0]
    1374:	0093      	lsls	r3, r2, #2
    1376:	189b      	adds	r3, r3, r2
    1378:	011c      	lsls	r4, r3, #4
    137a:	1ae4      	subs	r4, r4, r3
    137c:	0020      	movs	r0, r4
    137e:	4b14      	ldr	r3, [pc, #80]	; (13d0 <buzzer+0xdc>)
    1380:	4699      	mov	r9, r3
    1382:	4798      	blx	r3
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
    1384:	2200      	movs	r2, #0
    1386:	2101      	movs	r1, #1
    1388:	4640      	mov	r0, r8
    138a:	47b8      	blx	r7
		led_off();
    138c:	0031      	movs	r1, r6
    138e:	2001      	movs	r0, #1
    1390:	4b10      	ldr	r3, [pc, #64]	; (13d4 <buzzer+0xe0>)
    1392:	4798      	blx	r3
		rtos_delay_ms(75);
    1394:	0020      	movs	r0, r4
    1396:	47c8      	blx	r9
	for (int i = 0; i < 2; ++i) {
    1398:	3501      	adds	r5, #1
    139a:	2d01      	cmp	r5, #1
    139c:	ddda      	ble.n	1354 <buzzer+0x60>
	// 	led_on();
	// 	rtos_delay_ms(200);
	// 	led_off();
	// 	rtos_delay_ms(200);
	// }
    139e:	bcc0      	pop	{r6, r7}
    13a0:	46b9      	mov	r9, r7
    13a2:	46b0      	mov	r8, r6
    13a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	42003c00 	.word	0x42003c00
    13ac:	00002439 	.word	0x00002439
    13b0:	45309000 	.word	0x45309000
    13b4:	0000259d 	.word	0x0000259d
    13b8:	00002629 	.word	0x00002629
    13bc:	0000250d 	.word	0x0000250d
    13c0:	000023ed 	.word	0x000023ed
    13c4:	00003705 	.word	0x00003705
    13c8:	000023cd 	.word	0x000023cd
    13cc:	00006398 	.word	0x00006398
    13d0:	00003c61 	.word	0x00003c61
    13d4:	000023dd 	.word	0x000023dd

000013d8 <selftest>:
bool selftest() {
    13d8:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
    13da:	4b0a      	ldr	r3, [pc, #40]	; (1404 <selftest+0x2c>)
    13dc:	4798      	blx	r3
    13de:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
    13e0:	4809      	ldr	r0, [pc, #36]	; (1408 <selftest+0x30>)
    13e2:	4b0a      	ldr	r3, [pc, #40]	; (140c <selftest+0x34>)
    13e4:	4798      	blx	r3
    13e6:	1e05      	subs	r5, r0, #0
    13e8:	d000      	beq.n	13ec <selftest+0x14>
    13ea:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
    13ec:	4b08      	ldr	r3, [pc, #32]	; (1410 <selftest+0x38>)
    13ee:	4798      	blx	r3
    13f0:	1e04      	subs	r4, r0, #0
    13f2:	d000      	beq.n	13f6 <selftest+0x1e>
    13f4:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
    13f6:	4807      	ldr	r0, [pc, #28]	; (1414 <selftest+0x3c>)
    13f8:	4b07      	ldr	r3, [pc, #28]	; (1418 <selftest+0x40>)
    13fa:	4798      	blx	r3
    13fc:	2800      	cmp	r0, #0
    13fe:	d000      	beq.n	1402 <selftest+0x2a>
    1400:	0020      	movs	r0, r4
}
    1402:	bd70      	pop	{r4, r5, r6, pc}
    1404:	00000b7d 	.word	0x00000b7d
    1408:	200003cc 	.word	0x200003cc
    140c:	00001a45 	.word	0x00001a45
    1410:	00000a8d 	.word	0x00000a8d
    1414:	200003e8 	.word	0x200003e8
    1418:	00001edd 	.word	0x00001edd

0000141c <init>:
bool init() {
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
    1420:	22c0      	movs	r2, #192	; 0xc0
    1422:	0412      	lsls	r2, r2, #16
    1424:	2102      	movs	r1, #2
    1426:	2000      	movs	r0, #0
    1428:	4c3c      	ldr	r4, [pc, #240]	; (151c <init+0x100>)
    142a:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
    142c:	2280      	movs	r2, #128	; 0x80
    142e:	0352      	lsls	r2, r2, #13
    1430:	2103      	movs	r1, #3
    1432:	2000      	movs	r0, #0
    1434:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
    1436:	2480      	movs	r4, #128	; 0x80
    1438:	0564      	lsls	r4, r4, #21
    143a:	0021      	movs	r1, r4
    143c:	2000      	movs	r0, #0
    143e:	4e38      	ldr	r6, [pc, #224]	; (1520 <init+0x104>)
    1440:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
    1442:	2580      	movs	r5, #128	; 0x80
    1444:	062d      	lsls	r5, r5, #24
    1446:	0029      	movs	r1, r5
    1448:	2001      	movs	r0, #1
    144a:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
    144c:	0021      	movs	r1, r4
    144e:	2000      	movs	r0, #0
    1450:	4c34      	ldr	r4, [pc, #208]	; (1524 <init+0x108>)
    1452:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
    1454:	0029      	movs	r1, r5
    1456:	2001      	movs	r0, #1
    1458:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    145a:	4b33      	ldr	r3, [pc, #204]	; (1528 <init+0x10c>)
    145c:	9301      	str	r3, [sp, #4]
    145e:	2300      	movs	r3, #0
    1460:	9300      	str	r3, [sp, #0]
    1462:	3302      	adds	r3, #2
    1464:	2200      	movs	r2, #0
    1466:	2100      	movs	r1, #0
    1468:	4830      	ldr	r0, [pc, #192]	; (152c <init+0x110>)
    146a:	4c31      	ldr	r4, [pc, #196]	; (1530 <init+0x114>)
    146c:	47a0      	blx	r4
    146e:	2800      	cmp	r0, #0
    1470:	d042      	beq.n	14f8 <init+0xdc>
	dma_init();
    1472:	4b30      	ldr	r3, [pc, #192]	; (1534 <init+0x118>)
    1474:	4798      	blx	r3
	if (!serial_init()) SOS();
    1476:	4b30      	ldr	r3, [pc, #192]	; (1538 <init+0x11c>)
    1478:	4798      	blx	r3
    147a:	2800      	cmp	r0, #0
    147c:	d03f      	beq.n	14fe <init+0xe2>
	if (!imu_init()) SOS();
    147e:	4b2f      	ldr	r3, [pc, #188]	; (153c <init+0x120>)
    1480:	4798      	blx	r3
    1482:	2800      	cmp	r0, #0
    1484:	d03e      	beq.n	1504 <init+0xe8>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
    1486:	ab02      	add	r3, sp, #8
    1488:	2280      	movs	r2, #128	; 0x80
    148a:	0552      	lsls	r2, r2, #21
    148c:	9202      	str	r2, [sp, #8]
    148e:	2100      	movs	r1, #0
    1490:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    1492:	482b      	ldr	r0, [pc, #172]	; (1540 <init+0x124>)
    1494:	9b03      	ldr	r3, [sp, #12]
    1496:	4925      	ldr	r1, [pc, #148]	; (152c <init+0x110>)
    1498:	4c2a      	ldr	r4, [pc, #168]	; (1544 <init+0x128>)
    149a:	47a0      	blx	r4
    149c:	2800      	cmp	r0, #0
    149e:	d034      	beq.n	150a <init+0xee>
	init_eeprom();
    14a0:	4b29      	ldr	r3, [pc, #164]	; (1548 <init+0x12c>)
    14a2:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
    14a4:	ab02      	add	r3, sp, #8
    14a6:	4c29      	ldr	r4, [pc, #164]	; (154c <init+0x130>)
    14a8:	6822      	ldr	r2, [r4, #0]
    14aa:	9202      	str	r2, [sp, #8]
    14ac:	7921      	ldrb	r1, [r4, #4]
    14ae:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
    14b0:	4d1e      	ldr	r5, [pc, #120]	; (152c <init+0x110>)
    14b2:	4827      	ldr	r0, [pc, #156]	; (1550 <init+0x134>)
    14b4:	2107      	movs	r1, #7
    14b6:	9101      	str	r1, [sp, #4]
    14b8:	2180      	movs	r1, #128	; 0x80
    14ba:	03c9      	lsls	r1, r1, #15
    14bc:	9100      	str	r1, [sp, #0]
    14be:	9b03      	ldr	r3, [sp, #12]
    14c0:	0029      	movs	r1, r5
    14c2:	4e24      	ldr	r6, [pc, #144]	; (1554 <init+0x138>)
    14c4:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
    14c6:	2280      	movs	r2, #128	; 0x80
    14c8:	2190      	movs	r1, #144	; 0x90
    14ca:	4823      	ldr	r0, [pc, #140]	; (1558 <init+0x13c>)
    14cc:	3408      	adds	r4, #8
    14ce:	9400      	str	r4, [sp, #0]
    14d0:	002b      	movs	r3, r5
    14d2:	0092      	lsls	r2, r2, #2
    14d4:	0109      	lsls	r1, r1, #4
    14d6:	4c21      	ldr	r4, [pc, #132]	; (155c <init+0x140>)
    14d8:	47a0      	blx	r4
	init_globals();
    14da:	4b21      	ldr	r3, [pc, #132]	; (1560 <init+0x144>)
    14dc:	4798      	blx	r3
	if (!receiver_init(PORT2)) SOS();
    14de:	2002      	movs	r0, #2
    14e0:	4b20      	ldr	r3, [pc, #128]	; (1564 <init+0x148>)
    14e2:	4798      	blx	r3
    14e4:	2800      	cmp	r0, #0
    14e6:	d013      	beq.n	1510 <init+0xf4>
	if (!init_comms()) SOS();
    14e8:	4b1f      	ldr	r3, [pc, #124]	; (1568 <init+0x14c>)
    14ea:	4798      	blx	r3
    14ec:	2800      	cmp	r0, #0
    14ee:	d012      	beq.n	1516 <init+0xfa>
	return selftest();
    14f0:	4b1e      	ldr	r3, [pc, #120]	; (156c <init+0x150>)
    14f2:	4798      	blx	r3
}
    14f4:	b004      	add	sp, #16
    14f6:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    14f8:	4b1d      	ldr	r3, [pc, #116]	; (1570 <init+0x154>)
    14fa:	4798      	blx	r3
    14fc:	e7b9      	b.n	1472 <init+0x56>
	if (!serial_init()) SOS();
    14fe:	4b1c      	ldr	r3, [pc, #112]	; (1570 <init+0x154>)
    1500:	4798      	blx	r3
    1502:	e7bc      	b.n	147e <init+0x62>
	if (!imu_init()) SOS();
    1504:	4b1a      	ldr	r3, [pc, #104]	; (1570 <init+0x154>)
    1506:	4798      	blx	r3
    1508:	e7bd      	b.n	1486 <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    150a:	4b19      	ldr	r3, [pc, #100]	; (1570 <init+0x154>)
    150c:	4798      	blx	r3
    150e:	e7c7      	b.n	14a0 <init+0x84>
	if (!receiver_init(PORT2)) SOS();
    1510:	4b17      	ldr	r3, [pc, #92]	; (1570 <init+0x154>)
    1512:	4798      	blx	r3
    1514:	e7e8      	b.n	14e8 <init+0xcc>
	if (!init_comms()) SOS();
    1516:	4b16      	ldr	r3, [pc, #88]	; (1570 <init+0x154>)
    1518:	4798      	blx	r3
    151a:	e7e9      	b.n	14f0 <init+0xd4>
    151c:	000023ed 	.word	0x000023ed
    1520:	000023cd 	.word	0x000023cd
    1524:	000023bd 	.word	0x000023bd
    1528:	001e8480 	.word	0x001e8480
    152c:	42001400 	.word	0x42001400
    1530:	00002851 	.word	0x00002851
    1534:	00001b35 	.word	0x00001b35
    1538:	00000e81 	.word	0x00000e81
    153c:	00000afd 	.word	0x00000afd
    1540:	200003cc 	.word	0x200003cc
    1544:	00001ac1 	.word	0x00001ac1
    1548:	00000a39 	.word	0x00000a39
    154c:	000061a4 	.word	0x000061a4
    1550:	200003e8 	.word	0x200003e8
    1554:	00001e55 	.word	0x00001e55
    1558:	20000370 	.word	0x20000370
    155c:	00003f05 	.word	0x00003f05
    1560:	000009b1 	.word	0x000009b1
    1564:	000018e1 	.word	0x000018e1
    1568:	000001cd 	.word	0x000001cd
    156c:	000013d9 	.word	0x000013d9
    1570:	00003705 	.word	0x00003705

00001574 <main>:
int main(void) {
    1574:	b530      	push	{r4, r5, lr}
    1576:	b083      	sub	sp, #12
	if (!init()) SOS();
    1578:	4b12      	ldr	r3, [pc, #72]	; (15c4 <main+0x50>)
    157a:	4798      	blx	r3
    157c:	2800      	cmp	r0, #0
    157e:	d01e      	beq.n	15be <main+0x4a>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
    1580:	2380      	movs	r3, #128	; 0x80
    1582:	2280      	movs	r2, #128	; 0x80
    1584:	4910      	ldr	r1, [pc, #64]	; (15c8 <main+0x54>)
    1586:	4c11      	ldr	r4, [pc, #68]	; (15cc <main+0x58>)
    1588:	005b      	lsls	r3, r3, #1
    158a:	0112      	lsls	r2, r2, #4
    158c:	0020      	movs	r0, r4
    158e:	4d10      	ldr	r5, [pc, #64]	; (15d0 <main+0x5c>)
    1590:	47a8      	blx	r5
	dispatch_process(&bz);
    1592:	0020      	movs	r0, r4
    1594:	4b0f      	ldr	r3, [pc, #60]	; (15d4 <main+0x60>)
    1596:	4798      	blx	r3
	start_navigation();
    1598:	4b0f      	ldr	r3, [pc, #60]	; (15d8 <main+0x64>)
    159a:	4798      	blx	r3
	volatile fp32_t testvalue1 = FP32_FROM_MILLI(10);
    159c:	4b0f      	ldr	r3, [pc, #60]	; (15dc <main+0x68>)
    159e:	9301      	str	r3, [sp, #4]
	volatile fp32_t testvalue2 = FP32_FROM_INT(14);
    15a0:	23e0      	movs	r3, #224	; 0xe0
    15a2:	031b      	lsls	r3, r3, #12
    15a4:	9300      	str	r3, [sp, #0]
	testvalue1 = fp_multiply(testvalue1, testvalue2);
    15a6:	9801      	ldr	r0, [sp, #4]
    15a8:	9900      	ldr	r1, [sp, #0]
    15aa:	4b0d      	ldr	r3, [pc, #52]	; (15e0 <main+0x6c>)
    15ac:	4798      	blx	r3
    15ae:	9001      	str	r0, [sp, #4]
	comms_loop();
    15b0:	4b0c      	ldr	r3, [pc, #48]	; (15e4 <main+0x70>)
    15b2:	4798      	blx	r3
		rtos_delay_ms(1);
    15b4:	4b0c      	ldr	r3, [pc, #48]	; (15e8 <main+0x74>)
    15b6:	6818      	ldr	r0, [r3, #0]
    15b8:	4b0c      	ldr	r3, [pc, #48]	; (15ec <main+0x78>)
    15ba:	4798      	blx	r3
	while (1) {
    15bc:	e7fa      	b.n	15b4 <main+0x40>
	if (!init()) SOS();
    15be:	4b0c      	ldr	r3, [pc, #48]	; (15f0 <main+0x7c>)
    15c0:	4798      	blx	r3
    15c2:	e7dd      	b.n	1580 <main+0xc>
    15c4:	0000141d 	.word	0x0000141d
    15c8:	000012f5 	.word	0x000012f5
    15cc:	20000318 	.word	0x20000318
    15d0:	000037c5 	.word	0x000037c5
    15d4:	000038a9 	.word	0x000038a9
    15d8:	00001641 	.word	0x00001641
    15dc:	0000028f 	.word	0x0000028f
    15e0:	00004a45 	.word	0x00004a45
    15e4:	00000761 	.word	0x00000761
    15e8:	00006398 	.word	0x00006398
    15ec:	00003c61 	.word	0x00003c61
    15f0:	00003705 	.word	0x00003705

000015f4 <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
    15f4:	b510      	push	{r4, lr}
    15f6:	e00f      	b.n	1618 <navigation+0x24>
	while (1) {
		if (!globals.RunNavProcess) {
			wait_until_true(&globals.RunNavProcess);
    15f8:	480a      	ldr	r0, [pc, #40]	; (1624 <navigation+0x30>)
    15fa:	3301      	adds	r3, #1
    15fc:	32a0      	adds	r2, #160	; 0xa0
    15fe:	2100      	movs	r1, #0
    1600:	4c09      	ldr	r4, [pc, #36]	; (1628 <navigation+0x34>)
    1602:	47a0      	blx	r4
		}
        // led_on();
		request_imu_data();
    1604:	4b09      	ldr	r3, [pc, #36]	; (162c <navigation+0x38>)
    1606:	4798      	blx	r3
		wait_for_imu_data();
    1608:	4b09      	ldr	r3, [pc, #36]	; (1630 <navigation+0x3c>)
    160a:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(5);
    160c:	4b09      	ldr	r3, [pc, #36]	; (1634 <navigation+0x40>)
    160e:	681b      	ldr	r3, [r3, #0]
    1610:	0098      	lsls	r0, r3, #2
    1612:	18c0      	adds	r0, r0, r3
    1614:	4b08      	ldr	r3, [pc, #32]	; (1638 <navigation+0x44>)
    1616:	4798      	blx	r3
		if (!globals.RunNavProcess) {
    1618:	4b08      	ldr	r3, [pc, #32]	; (163c <navigation+0x48>)
    161a:	225f      	movs	r2, #95	; 0x5f
    161c:	5c9b      	ldrb	r3, [r3, r2]
    161e:	2b00      	cmp	r3, #0
    1620:	d0ea      	beq.n	15f8 <navigation+0x4>
    1622:	e7ef      	b.n	1604 <navigation+0x10>
    1624:	20000257 	.word	0x20000257
    1628:	00003b2d 	.word	0x00003b2d
    162c:	00000bc1 	.word	0x00000bc1
    1630:	00000bf9 	.word	0x00000bf9
    1634:	00006398 	.word	0x00006398
    1638:	00003c61 	.word	0x00003c61
    163c:	200001f8 	.word	0x200001f8

00001640 <start_navigation>:
	}
}

void start_navigation() {
    1640:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
    1642:	23c0      	movs	r3, #192	; 0xc0
    1644:	22c0      	movs	r2, #192	; 0xc0
    1646:	4905      	ldr	r1, [pc, #20]	; (165c <start_navigation+0x1c>)
    1648:	4c05      	ldr	r4, [pc, #20]	; (1660 <start_navigation+0x20>)
    164a:	009b      	lsls	r3, r3, #2
    164c:	0112      	lsls	r2, r2, #4
    164e:	0020      	movs	r0, r4
    1650:	4d04      	ldr	r5, [pc, #16]	; (1664 <start_navigation+0x24>)
    1652:	47a8      	blx	r5
    dispatch_process(&navigation_process);
    1654:	0020      	movs	r0, r4
    1656:	4b04      	ldr	r3, [pc, #16]	; (1668 <start_navigation+0x28>)
    1658:	4798      	blx	r3
    165a:	bd70      	pop	{r4, r5, r6, pc}
    165c:	000015f5 	.word	0x000015f5
    1660:	20000344 	.word	0x20000344
    1664:	000037c5 	.word	0x000037c5
    1668:	000038a9 	.word	0x000038a9

0000166c <crc8_dvb_s2>:
    0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74, 0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D,
    0xD6, 0x03, 0xA9, 0x7C, 0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
    0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9
};

uint8_t crc8_dvb_s2(int index, uint8_t len) {
    166c:	b570      	push	{r4, r5, r6, lr}
    166e:	0006      	movs	r6, r0
    uint8_t crc = 0;
    for (uint8_t i = 0; i < len - 1; i++)
    1670:	2200      	movs	r2, #0
    uint8_t crc = 0;
    1672:	2000      	movs	r0, #0
    for (uint8_t i = 0; i < len - 1; i++)
    1674:	e00e      	b.n	1694 <crc8_dvb_s2+0x28>
    {
        crc = crc8tab[crc ^ crsf_cached_buffer[(index + 2 + i) % 64]];
    1676:	1cb3      	adds	r3, r6, #2
    1678:	189b      	adds	r3, r3, r2
    167a:	17dd      	asrs	r5, r3, #31
    167c:	0ead      	lsrs	r5, r5, #26
    167e:	195b      	adds	r3, r3, r5
    1680:	243f      	movs	r4, #63	; 0x3f
    1682:	4023      	ands	r3, r4
    1684:	1b5b      	subs	r3, r3, r5
    1686:	4c05      	ldr	r4, [pc, #20]	; (169c <crc8_dvb_s2+0x30>)
    1688:	5ce3      	ldrb	r3, [r4, r3]
    168a:	4043      	eors	r3, r0
    168c:	4804      	ldr	r0, [pc, #16]	; (16a0 <crc8_dvb_s2+0x34>)
    168e:	5cc0      	ldrb	r0, [r0, r3]
    for (uint8_t i = 0; i < len - 1; i++)
    1690:	3201      	adds	r2, #1
    1692:	b2d2      	uxtb	r2, r2
    1694:	1e4b      	subs	r3, r1, #1
    1696:	429a      	cmp	r2, r3
    1698:	dbed      	blt.n	1676 <crc8_dvb_s2+0xa>
    }
    return crc;
}
    169a:	bd70      	pop	{r4, r5, r6, pc}
    169c:	200003f8 	.word	0x200003f8
    16a0:	000061b4 	.word	0x000061b4

000016a4 <rc_channels_packed>:

bool rc_channels_packed(int index, uint8_t len) {
    16a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16a6:	0004      	movs	r4, r0
    uint8_t crc = crsf_cached_buffer[(index + len + 1) % 64];
    16a8:	180b      	adds	r3, r1, r0
    16aa:	3301      	adds	r3, #1
    16ac:	17d8      	asrs	r0, r3, #31
    16ae:	0e80      	lsrs	r0, r0, #26
    16b0:	181b      	adds	r3, r3, r0
    16b2:	223f      	movs	r2, #63	; 0x3f
    16b4:	4013      	ands	r3, r2
    16b6:	1a1b      	subs	r3, r3, r0
    16b8:	4a43      	ldr	r2, [pc, #268]	; (17c8 <rc_channels_packed+0x124>)
    16ba:	5cd5      	ldrb	r5, [r2, r3]

    // check length
    if (len != 24) return false;
    16bc:	2918      	cmp	r1, #24
    16be:	d001      	beq.n	16c4 <rc_channels_packed+0x20>
    16c0:	2000      	movs	r0, #0
    globals.RCchannel14 = crsf_channels.ch13;
    globals.RCchannel15 = crsf_channels.ch14;
    globals.RCchannel16 = crsf_channels.ch15;

    return true;
}
    16c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (crc8_dvb_s2(index, len) != crc) return false;
    16c4:	0020      	movs	r0, r4
    16c6:	4b41      	ldr	r3, [pc, #260]	; (17cc <rc_channels_packed+0x128>)
    16c8:	4798      	blx	r3
    16ca:	42a8      	cmp	r0, r5
    16cc:	d000      	beq.n	16d0 <rc_channels_packed+0x2c>
    16ce:	e078      	b.n	17c2 <rc_channels_packed+0x11e>
    for (int i = 0; i < sizeof(crsf_channels); ++i) {
    16d0:	2100      	movs	r1, #0
    16d2:	e00d      	b.n	16f0 <rc_channels_packed+0x4c>
        *((uint8_t*)&(crsf_channels) + i) = crsf_cached_buffer[(index + 3 + i) % 64];
    16d4:	1ce3      	adds	r3, r4, #3
    16d6:	185b      	adds	r3, r3, r1
    16d8:	17d8      	asrs	r0, r3, #31
    16da:	0e80      	lsrs	r0, r0, #26
    16dc:	181b      	adds	r3, r3, r0
    16de:	223f      	movs	r2, #63	; 0x3f
    16e0:	4013      	ands	r3, r2
    16e2:	1a1b      	subs	r3, r3, r0
    16e4:	4a38      	ldr	r2, [pc, #224]	; (17c8 <rc_channels_packed+0x124>)
    16e6:	0010      	movs	r0, r2
    16e8:	3040      	adds	r0, #64	; 0x40
    16ea:	5cd3      	ldrb	r3, [r2, r3]
    16ec:	5443      	strb	r3, [r0, r1]
    for (int i = 0; i < sizeof(crsf_channels); ++i) {
    16ee:	3101      	adds	r1, #1
    16f0:	2915      	cmp	r1, #21
    16f2:	d9ef      	bls.n	16d4 <rc_channels_packed+0x30>
    globals.RCchannel1 = crsf_channels.ch0;
    16f4:	4b34      	ldr	r3, [pc, #208]	; (17c8 <rc_channels_packed+0x124>)
    16f6:	2440      	movs	r4, #64	; 0x40
    16f8:	5b19      	ldrh	r1, [r3, r4]
    16fa:	0549      	lsls	r1, r1, #21
    16fc:	0d49      	lsrs	r1, r1, #21
    16fe:	4a34      	ldr	r2, [pc, #208]	; (17d0 <rc_channels_packed+0x12c>)
    1700:	8791      	strh	r1, [r2, #60]	; 0x3c
    globals.RCchannel2 = crsf_channels.ch1;
    1702:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1704:	0289      	lsls	r1, r1, #10
    1706:	0d49      	lsrs	r1, r1, #21
    1708:	87d1      	strh	r1, [r2, #62]	; 0x3e
    globals.RCchannel3 = crsf_channels.ch2;
    170a:	2642      	movs	r6, #66	; 0x42
    170c:	5b9d      	ldrh	r5, [r3, r6]
    170e:	09ad      	lsrs	r5, r5, #6
    1710:	2044      	movs	r0, #68	; 0x44
    1712:	5c1f      	ldrb	r7, [r3, r0]
    1714:	2101      	movs	r1, #1
    1716:	4039      	ands	r1, r7
    1718:	0289      	lsls	r1, r1, #10
    171a:	4329      	orrs	r1, r5
    171c:	5311      	strh	r1, [r2, r4]
    globals.RCchannel4 = crsf_channels.ch3;
    171e:	5a19      	ldrh	r1, [r3, r0]
    1720:	0509      	lsls	r1, r1, #20
    1722:	0d49      	lsrs	r1, r1, #21
    1724:	5391      	strh	r1, [r2, r6]
    globals.RCchannel5 = crsf_channels.ch4;
    1726:	6c59      	ldr	r1, [r3, #68]	; 0x44
    1728:	0249      	lsls	r1, r1, #9
    172a:	0d49      	lsrs	r1, r1, #21
    172c:	5211      	strh	r1, [r2, r0]
    globals.RCchannel6 = crsf_channels.ch5;
    172e:	2546      	movs	r5, #70	; 0x46
    1730:	5b5c      	ldrh	r4, [r3, r5]
    1732:	09e4      	lsrs	r4, r4, #7
    1734:	3004      	adds	r0, #4
    1736:	5c1e      	ldrb	r6, [r3, r0]
    1738:	2103      	movs	r1, #3
    173a:	4031      	ands	r1, r6
    173c:	0249      	lsls	r1, r1, #9
    173e:	4321      	orrs	r1, r4
    1740:	5351      	strh	r1, [r2, r5]
    globals.RCchannel7 = crsf_channels.ch6;
    1742:	5a19      	ldrh	r1, [r3, r0]
    1744:	04c9      	lsls	r1, r1, #19
    1746:	0d49      	lsrs	r1, r1, #21
    1748:	5211      	strh	r1, [r2, r0]
    globals.RCchannel8 = crsf_channels.ch7;
    174a:	6c99      	ldr	r1, [r3, #72]	; 0x48
    174c:	0209      	lsls	r1, r1, #8
    174e:	0d49      	lsrs	r1, r1, #21
    1750:	3002      	adds	r0, #2
    1752:	5211      	strh	r1, [r2, r0]
    globals.RCchannel9 = crsf_channels.ch8;
    1754:	214b      	movs	r1, #75	; 0x4b
    1756:	5c5c      	ldrb	r4, [r3, r1]
    1758:	3002      	adds	r0, #2
    175a:	5c1d      	ldrb	r5, [r3, r0]
    175c:	3944      	subs	r1, #68	; 0x44
    175e:	4029      	ands	r1, r5
    1760:	0209      	lsls	r1, r1, #8
    1762:	4321      	orrs	r1, r4
    1764:	5211      	strh	r1, [r2, r0]
    globals.RCchannel10 = crsf_channels.ch9;
    1766:	5a19      	ldrh	r1, [r3, r0]
    1768:	0489      	lsls	r1, r1, #18
    176a:	0d49      	lsrs	r1, r1, #21
    176c:	3002      	adds	r0, #2
    176e:	5211      	strh	r1, [r2, r0]
    globals.RCchannel11 = crsf_channels.ch10;
    1770:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    1772:	01c9      	lsls	r1, r1, #7
    1774:	0d49      	lsrs	r1, r1, #21
    1776:	3002      	adds	r0, #2
    1778:	5211      	strh	r1, [r2, r0]
    globals.RCchannel12 = crsf_channels.ch11;
    177a:	214f      	movs	r1, #79	; 0x4f
    177c:	5c5c      	ldrb	r4, [r3, r1]
    177e:	0864      	lsrs	r4, r4, #1
    1780:	5c1d      	ldrb	r5, [r3, r0]
    1782:	3940      	subs	r1, #64	; 0x40
    1784:	4029      	ands	r1, r5
    1786:	01c9      	lsls	r1, r1, #7
    1788:	4321      	orrs	r1, r4
    178a:	2452      	movs	r4, #82	; 0x52
    178c:	5311      	strh	r1, [r2, r4]
    globals.RCchannel13 = crsf_channels.ch12;
    178e:	5a19      	ldrh	r1, [r3, r0]
    1790:	0449      	lsls	r1, r1, #17
    1792:	0d49      	lsrs	r1, r1, #21
    1794:	3004      	adds	r0, #4
    1796:	5211      	strh	r1, [r2, r0]
    globals.RCchannel14 = crsf_channels.ch13;
    1798:	6d19      	ldr	r1, [r3, #80]	; 0x50
    179a:	0189      	lsls	r1, r1, #6
    179c:	0d49      	lsrs	r1, r1, #21
    179e:	3404      	adds	r4, #4
    17a0:	5311      	strh	r1, [r2, r4]
    globals.RCchannel15 = crsf_channels.ch14;
    17a2:	2153      	movs	r1, #83	; 0x53
    17a4:	5c5c      	ldrb	r4, [r3, r1]
    17a6:	08a4      	lsrs	r4, r4, #2
    17a8:	5c1d      	ldrb	r5, [r3, r0]
    17aa:	3934      	subs	r1, #52	; 0x34
    17ac:	4029      	ands	r1, r5
    17ae:	0189      	lsls	r1, r1, #6
    17b0:	4321      	orrs	r1, r4
    17b2:	2458      	movs	r4, #88	; 0x58
    17b4:	5311      	strh	r1, [r2, r4]
    globals.RCchannel16 = crsf_channels.ch15;
    17b6:	5a1b      	ldrh	r3, [r3, r0]
    17b8:	095b      	lsrs	r3, r3, #5
    17ba:	215a      	movs	r1, #90	; 0x5a
    17bc:	5253      	strh	r3, [r2, r1]
    return true;
    17be:	3853      	subs	r0, #83	; 0x53
    17c0:	e77f      	b.n	16c2 <rc_channels_packed+0x1e>
    if (crc8_dvb_s2(index, len) != crc) return false;
    17c2:	2000      	movs	r0, #0
    17c4:	e77d      	b.n	16c2 <rc_channels_packed+0x1e>
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	200003f8 	.word	0x200003f8
    17cc:	0000166d 	.word	0x0000166d
    17d0:	200001f8 	.word	0x200001f8

000017d4 <link_statistics>:

bool link_statistics(int index, uint8_t len) {
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	0004      	movs	r4, r0
    uint8_t crc = crsf_cached_buffer[(index + len + 1) % 64];
    17d8:	180b      	adds	r3, r1, r0
    17da:	3301      	adds	r3, #1
    17dc:	17d8      	asrs	r0, r3, #31
    17de:	0e80      	lsrs	r0, r0, #26
    17e0:	181b      	adds	r3, r3, r0
    17e2:	223f      	movs	r2, #63	; 0x3f
    17e4:	4013      	ands	r3, r2
    17e6:	1a1b      	subs	r3, r3, r0
    17e8:	4a12      	ldr	r2, [pc, #72]	; (1834 <link_statistics+0x60>)
    17ea:	5cd5      	ldrb	r5, [r2, r3]

    // check length
    if (len != 12) return false;
    17ec:	290c      	cmp	r1, #12
    17ee:	d001      	beq.n	17f4 <link_statistics+0x20>
    for (int i = 0; i < sizeof(crsf_link_statistics); ++i) {
        *((uint8_t*)&(crsf_link_statistics) + i) = crsf_cached_buffer[(index + 3 + i) % 64];
    }

    globals.RCRXFailsafe = crsf_link_statistics.uplink_linkqly == 0;
}
    17f0:	2000      	movs	r0, #0
    17f2:	bd70      	pop	{r4, r5, r6, pc}
    if (crc8_dvb_s2(index, len) != crc) return false;
    17f4:	0020      	movs	r0, r4
    17f6:	4b10      	ldr	r3, [pc, #64]	; (1838 <link_statistics+0x64>)
    17f8:	4798      	blx	r3
    17fa:	42a8      	cmp	r0, r5
    17fc:	d1f8      	bne.n	17f0 <link_statistics+0x1c>
    for (int i = 0; i < sizeof(crsf_link_statistics); ++i) {
    17fe:	2100      	movs	r1, #0
    1800:	e00d      	b.n	181e <link_statistics+0x4a>
        *((uint8_t*)&(crsf_link_statistics) + i) = crsf_cached_buffer[(index + 3 + i) % 64];
    1802:	1ce3      	adds	r3, r4, #3
    1804:	185b      	adds	r3, r3, r1
    1806:	17d8      	asrs	r0, r3, #31
    1808:	0e80      	lsrs	r0, r0, #26
    180a:	181b      	adds	r3, r3, r0
    180c:	223f      	movs	r2, #63	; 0x3f
    180e:	4013      	ands	r3, r2
    1810:	1a1b      	subs	r3, r3, r0
    1812:	4a08      	ldr	r2, [pc, #32]	; (1834 <link_statistics+0x60>)
    1814:	0010      	movs	r0, r2
    1816:	3058      	adds	r0, #88	; 0x58
    1818:	5cd3      	ldrb	r3, [r2, r3]
    181a:	5443      	strb	r3, [r0, r1]
    for (int i = 0; i < sizeof(crsf_link_statistics); ++i) {
    181c:	3101      	adds	r1, #1
    181e:	2909      	cmp	r1, #9
    1820:	d9ef      	bls.n	1802 <link_statistics+0x2e>
    globals.RCRXFailsafe = crsf_link_statistics.uplink_linkqly == 0;
    1822:	4b06      	ldr	r3, [pc, #24]	; (183c <link_statistics+0x68>)
    1824:	789a      	ldrb	r2, [r3, #2]
    1826:	4253      	negs	r3, r2
    1828:	415a      	adcs	r2, r3
    182a:	4b05      	ldr	r3, [pc, #20]	; (1840 <link_statistics+0x6c>)
    182c:	2162      	movs	r1, #98	; 0x62
    182e:	545a      	strb	r2, [r3, r1]
}
    1830:	e7df      	b.n	17f2 <link_statistics+0x1e>
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	200003f8 	.word	0x200003f8
    1838:	0000166d 	.word	0x0000166d
    183c:	20000450 	.word	0x20000450
    1840:	200001f8 	.word	0x200001f8

00001844 <investigate_packet>:

bool investigate_packet(int index) {
    1844:	b570      	push	{r4, r5, r6, lr}
    uint8_t len = crsf_cached_buffer[(index + 1) % 64];
    1846:	1c43      	adds	r3, r0, #1
    1848:	17d9      	asrs	r1, r3, #31
    184a:	0e89      	lsrs	r1, r1, #26
    184c:	185b      	adds	r3, r3, r1
    184e:	223f      	movs	r2, #63	; 0x3f
    1850:	4013      	ands	r3, r2
    1852:	1a5b      	subs	r3, r3, r1
    1854:	4d0a      	ldr	r5, [pc, #40]	; (1880 <investigate_packet+0x3c>)
    1856:	5ce9      	ldrb	r1, [r5, r3]
    uint8_t type = crsf_cached_buffer[(index + 2) % 64];
    1858:	1c84      	adds	r4, r0, #2
    185a:	17e3      	asrs	r3, r4, #31
    185c:	0e9b      	lsrs	r3, r3, #26
    185e:	18e4      	adds	r4, r4, r3
    1860:	4022      	ands	r2, r4
    1862:	1ad2      	subs	r2, r2, r3
    1864:	5cab      	ldrb	r3, [r5, r2]

    switch (type) {
    1866:	2b14      	cmp	r3, #20
    1868:	d004      	beq.n	1874 <investigate_packet+0x30>
    186a:	2b16      	cmp	r3, #22
    186c:	d105      	bne.n	187a <investigate_packet+0x36>
        case CRSF_FRAMETYPE_RC_CHANNELS_PACKED:
        return rc_channels_packed(index, len);
    186e:	4b05      	ldr	r3, [pc, #20]	; (1884 <investigate_packet+0x40>)
    1870:	4798      	blx	r3
    1872:	e003      	b.n	187c <investigate_packet+0x38>

        case CRSF_FRAMETYPE_LINK_STATISTICS:
        return link_statistics(index, len);
    1874:	4b04      	ldr	r3, [pc, #16]	; (1888 <investigate_packet+0x44>)
    1876:	4798      	blx	r3
    1878:	e000      	b.n	187c <investigate_packet+0x38>
    switch (type) {
    187a:	2000      	movs	r0, #0
        
        default:
        return false;
    }
}
    187c:	bd70      	pop	{r4, r5, r6, pc}
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	200003f8 	.word	0x200003f8
    1884:	000016a5 	.word	0x000016a5
    1888:	000017d5 	.word	0x000017d5

0000188c <receiver_main>:

void receiver_main() {
    188c:	b510      	push	{r4, lr}
    188e:	e01a      	b.n	18c6 <receiver_main+0x3a>
    while (1) {
        for (int i = 0; i < sizeof(crsf_receive_buffer); ++i) {
    1890:	3401      	adds	r4, #1
    1892:	2c3f      	cmp	r4, #63	; 0x3f
    1894:	d810      	bhi.n	18b8 <receiver_main+0x2c>
            if (crsf_receive_buffer[i] == CRSF_SYNC_BYTE) {
    1896:	4b0d      	ldr	r3, [pc, #52]	; (18cc <receiver_main+0x40>)
    1898:	191b      	adds	r3, r3, r4
    189a:	2264      	movs	r2, #100	; 0x64
    189c:	5c9b      	ldrb	r3, [r3, r2]
    189e:	2bc8      	cmp	r3, #200	; 0xc8
    18a0:	d1f6      	bne.n	1890 <receiver_main+0x4>
                memcpy(crsf_cached_buffer, crsf_receive_buffer, sizeof(crsf_cached_buffer));
    18a2:	480a      	ldr	r0, [pc, #40]	; (18cc <receiver_main+0x40>)
    18a4:	0001      	movs	r1, r0
    18a6:	3164      	adds	r1, #100	; 0x64
    18a8:	3a24      	subs	r2, #36	; 0x24
    18aa:	4b09      	ldr	r3, [pc, #36]	; (18d0 <receiver_main+0x44>)
    18ac:	4798      	blx	r3
                if (investigate_packet(i)) break;
    18ae:	0020      	movs	r0, r4
    18b0:	4b08      	ldr	r3, [pc, #32]	; (18d4 <receiver_main+0x48>)
    18b2:	4798      	blx	r3
    18b4:	2800      	cmp	r0, #0
    18b6:	d0eb      	beq.n	1890 <receiver_main+0x4>
            }
        }

        rtos_delay_ms(10);
    18b8:	4b07      	ldr	r3, [pc, #28]	; (18d8 <receiver_main+0x4c>)
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	0098      	lsls	r0, r3, #2
    18be:	18c0      	adds	r0, r0, r3
    18c0:	0040      	lsls	r0, r0, #1
    18c2:	4b06      	ldr	r3, [pc, #24]	; (18dc <receiver_main+0x50>)
    18c4:	4798      	blx	r3
        for (int i = 0; i < sizeof(crsf_receive_buffer); ++i) {
    18c6:	2400      	movs	r4, #0
    18c8:	e7e3      	b.n	1892 <receiver_main+0x6>
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	200003f8 	.word	0x200003f8
    18d0:	00005b75 	.word	0x00005b75
    18d4:	00001845 	.word	0x00001845
    18d8:	00006398 	.word	0x00006398
    18dc:	00003c61 	.word	0x00003c61

000018e0 <receiver_init>:
    }
}

bool receiver_init(Serial_Port_IDs port) {
    18e0:	b570      	push	{r4, r5, r6, lr}
    // configure baud rate for CRSF
    // serial_set_baud(port, CRSF_BAUDRATE); // FIX TO NOT CRASH AFTER INIT

    // Start infinite receive buffer
	if (!serial_read_start_infinite(port, crsf_receive_buffer, sizeof(crsf_receive_buffer))) return false;
    18e2:	490a      	ldr	r1, [pc, #40]	; (190c <receiver_init+0x2c>)
    18e4:	2240      	movs	r2, #64	; 0x40
    18e6:	4b0a      	ldr	r3, [pc, #40]	; (1910 <receiver_init+0x30>)
    18e8:	4798      	blx	r3
    18ea:	1e04      	subs	r4, r0, #0
    18ec:	d101      	bne.n	18f2 <receiver_init+0x12>
    // start up new process
    init_process(&receiver_process, receiver_main, RC_RECEIVER_STACK_BASE, RC_RECEIVER_STACK_SIZE);
    dispatch_process(&receiver_process);

    return true;
    18ee:	0020      	movs	r0, r4
    18f0:	bd70      	pop	{r4, r5, r6, pc}
    init_process(&receiver_process, receiver_main, RC_RECEIVER_STACK_BASE, RC_RECEIVER_STACK_SIZE);
    18f2:	2380      	movs	r3, #128	; 0x80
    18f4:	22b0      	movs	r2, #176	; 0xb0
    18f6:	4907      	ldr	r1, [pc, #28]	; (1914 <receiver_init+0x34>)
    18f8:	4d07      	ldr	r5, [pc, #28]	; (1918 <receiver_init+0x38>)
    18fa:	005b      	lsls	r3, r3, #1
    18fc:	0112      	lsls	r2, r2, #4
    18fe:	0028      	movs	r0, r5
    1900:	4e06      	ldr	r6, [pc, #24]	; (191c <receiver_init+0x3c>)
    1902:	47b0      	blx	r6
    dispatch_process(&receiver_process);
    1904:	0028      	movs	r0, r5
    1906:	4b06      	ldr	r3, [pc, #24]	; (1920 <receiver_init+0x40>)
    1908:	4798      	blx	r3
    return true;
    190a:	e7f0      	b.n	18ee <receiver_init+0xe>
    190c:	2000045c 	.word	0x2000045c
    1910:	00001195 	.word	0x00001195
    1914:	0000188d 	.word	0x0000188d
    1918:	2000049c 	.word	0x2000049c
    191c:	000037c5 	.word	0x000037c5
    1920:	000038a9 	.word	0x000038a9

00001924 <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	0004      	movs	r4, r0
    1928:	000e      	movs	r6, r1
    192a:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
    192c:	7d03      	ldrb	r3, [r0, #20]
    192e:	7d42      	ldrb	r2, [r0, #21]
    1930:	0212      	lsls	r2, r2, #8
    1932:	431a      	orrs	r2, r3
    1934:	7d83      	ldrb	r3, [r0, #22]
    1936:	041b      	lsls	r3, r3, #16
    1938:	4313      	orrs	r3, r2
    193a:	7dc1      	ldrb	r1, [r0, #23]
    193c:	0609      	lsls	r1, r1, #24
    193e:	4319      	orrs	r1, r3
    1940:	7e00      	ldrb	r0, [r0, #24]
    1942:	4b11      	ldr	r3, [pc, #68]	; (1988 <baro_send_command+0x64>)
    1944:	4798      	blx	r3
	spi_command(desc->sercom, command);
    1946:	7c23      	ldrb	r3, [r4, #16]
    1948:	7c62      	ldrb	r2, [r4, #17]
    194a:	0212      	lsls	r2, r2, #8
    194c:	431a      	orrs	r2, r3
    194e:	7ca3      	ldrb	r3, [r4, #18]
    1950:	041b      	lsls	r3, r3, #16
    1952:	4313      	orrs	r3, r2
    1954:	7ce0      	ldrb	r0, [r4, #19]
    1956:	0600      	lsls	r0, r0, #24
    1958:	4318      	orrs	r0, r3
    195a:	0031      	movs	r1, r6
    195c:	4b0b      	ldr	r3, [pc, #44]	; (198c <baro_send_command+0x68>)
    195e:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1960:	7d23      	ldrb	r3, [r4, #20]
    1962:	7d62      	ldrb	r2, [r4, #21]
    1964:	0212      	lsls	r2, r2, #8
    1966:	431a      	orrs	r2, r3
    1968:	7da3      	ldrb	r3, [r4, #22]
    196a:	041b      	lsls	r3, r3, #16
    196c:	4313      	orrs	r3, r2
    196e:	7de1      	ldrb	r1, [r4, #23]
    1970:	0609      	lsls	r1, r1, #24
    1972:	4319      	orrs	r1, r3
    1974:	7e20      	ldrb	r0, [r4, #24]
    1976:	4b06      	ldr	r3, [pc, #24]	; (1990 <baro_send_command+0x6c>)
    1978:	4798      	blx	r3
	delay_us(delay);
    197a:	0068      	lsls	r0, r5, #1
    197c:	1940      	adds	r0, r0, r5
    197e:	0040      	lsls	r0, r0, #1
    1980:	4b04      	ldr	r3, [pc, #16]	; (1994 <baro_send_command+0x70>)
    1982:	4798      	blx	r3
}
    1984:	bd70      	pop	{r4, r5, r6, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000023dd 	.word	0x000023dd
    198c:	000028b9 	.word	0x000028b9
    1990:	000023cd 	.word	0x000023cd
    1994:	0000299d 	.word	0x0000299d

00001998 <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
    1998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    199a:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    199c:	26a0      	movs	r6, #160	; 0xa0
    199e:	e047      	b.n	1a30 <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
    19a0:	7d23      	ldrb	r3, [r4, #20]
    19a2:	7d62      	ldrb	r2, [r4, #21]
    19a4:	0212      	lsls	r2, r2, #8
    19a6:	431a      	orrs	r2, r3
    19a8:	7da3      	ldrb	r3, [r4, #22]
    19aa:	041b      	lsls	r3, r3, #16
    19ac:	4313      	orrs	r3, r2
    19ae:	7de1      	ldrb	r1, [r4, #23]
    19b0:	0609      	lsls	r1, r1, #24
    19b2:	4319      	orrs	r1, r3
    19b4:	7e20      	ldrb	r0, [r4, #24]
    19b6:	4b20      	ldr	r3, [pc, #128]	; (1a38 <baro_read_prom+0xa0>)
    19b8:	4798      	blx	r3
		spi_command(desc->sercom, addr);
    19ba:	7c23      	ldrb	r3, [r4, #16]
    19bc:	7c62      	ldrb	r2, [r4, #17]
    19be:	0212      	lsls	r2, r2, #8
    19c0:	431a      	orrs	r2, r3
    19c2:	7ca3      	ldrb	r3, [r4, #18]
    19c4:	041b      	lsls	r3, r3, #16
    19c6:	4313      	orrs	r3, r2
    19c8:	7ce0      	ldrb	r0, [r4, #19]
    19ca:	0600      	lsls	r0, r0, #24
    19cc:	4318      	orrs	r0, r3
    19ce:	0031      	movs	r1, r6
    19d0:	4f1a      	ldr	r7, [pc, #104]	; (1a3c <baro_read_prom+0xa4>)
    19d2:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
    19d4:	7c23      	ldrb	r3, [r4, #16]
    19d6:	7c62      	ldrb	r2, [r4, #17]
    19d8:	0212      	lsls	r2, r2, #8
    19da:	431a      	orrs	r2, r3
    19dc:	7ca3      	ldrb	r3, [r4, #18]
    19de:	041b      	lsls	r3, r3, #16
    19e0:	4313      	orrs	r3, r2
    19e2:	7ce0      	ldrb	r0, [r4, #19]
    19e4:	0600      	lsls	r0, r0, #24
    19e6:	4318      	orrs	r0, r3
    19e8:	2100      	movs	r1, #0
    19ea:	47b8      	blx	r7
    19ec:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
    19ee:	7c23      	ldrb	r3, [r4, #16]
    19f0:	7c62      	ldrb	r2, [r4, #17]
    19f2:	0212      	lsls	r2, r2, #8
    19f4:	431a      	orrs	r2, r3
    19f6:	7ca3      	ldrb	r3, [r4, #18]
    19f8:	041b      	lsls	r3, r3, #16
    19fa:	4313      	orrs	r3, r2
    19fc:	7ce0      	ldrb	r0, [r4, #19]
    19fe:	0600      	lsls	r0, r0, #24
    1a00:	4318      	orrs	r0, r3
    1a02:	2100      	movs	r1, #0
    1a04:	47b8      	blx	r7
    1a06:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
    1a08:	7d23      	ldrb	r3, [r4, #20]
    1a0a:	7d62      	ldrb	r2, [r4, #21]
    1a0c:	0212      	lsls	r2, r2, #8
    1a0e:	431a      	orrs	r2, r3
    1a10:	7da3      	ldrb	r3, [r4, #22]
    1a12:	041b      	lsls	r3, r3, #16
    1a14:	4313      	orrs	r3, r2
    1a16:	7de1      	ldrb	r1, [r4, #23]
    1a18:	0609      	lsls	r1, r1, #24
    1a1a:	4319      	orrs	r1, r3
    1a1c:	7e20      	ldrb	r0, [r4, #24]
    1a1e:	4b08      	ldr	r3, [pc, #32]	; (1a40 <baro_read_prom+0xa8>)
    1a20:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
    1a22:	0033      	movs	r3, r6
    1a24:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
    1a26:	022d      	lsls	r5, r5, #8
    1a28:	433d      	orrs	r5, r7
    1a2a:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    1a2c:	3602      	adds	r6, #2
    1a2e:	b2f6      	uxtb	r6, r6
    1a30:	2eae      	cmp	r6, #174	; 0xae
    1a32:	d9b5      	bls.n	19a0 <baro_read_prom+0x8>
}
    1a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	000023dd 	.word	0x000023dd
    1a3c:	000028b9 	.word	0x000028b9
    1a40:	000023cd 	.word	0x000023cd

00001a44 <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
    1a44:	b530      	push	{r4, r5, lr}
    1a46:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
    1a48:	7b83      	ldrb	r3, [r0, #14]
    1a4a:	7bc5      	ldrb	r5, [r0, #15]
    1a4c:	022d      	lsls	r5, r5, #8
    1a4e:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
    1a50:	23ff      	movs	r3, #255	; 0xff
    1a52:	002a      	movs	r2, r5
    1a54:	439a      	bics	r2, r3
    1a56:	0013      	movs	r3, r2
    1a58:	2200      	movs	r2, #0
    1a5a:	7382      	strb	r2, [r0, #14]
    1a5c:	0a1b      	lsrs	r3, r3, #8
    1a5e:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
    1a60:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
    1a62:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
    1a64:	e014      	b.n	1a90 <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1a66:	1042      	asrs	r2, r0, #1
    1a68:	0052      	lsls	r2, r2, #1
    1a6a:	5aa2      	ldrh	r2, [r4, r2]
    1a6c:	0a12      	lsrs	r2, r2, #8
    1a6e:	e018      	b.n	1aa2 <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1a70:	005b      	lsls	r3, r3, #1
    1a72:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
    1a74:	3201      	adds	r2, #1
    1a76:	2a07      	cmp	r2, #7
    1a78:	dc09      	bgt.n	1a8e <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1a7a:	b219      	sxth	r1, r3
    1a7c:	2900      	cmp	r1, #0
    1a7e:	daf7      	bge.n	1a70 <baro_check+0x2c>
    1a80:	0059      	lsls	r1, r3, #1
    1a82:	23c0      	movs	r3, #192	; 0xc0
    1a84:	019b      	lsls	r3, r3, #6
    1a86:	404b      	eors	r3, r1
    1a88:	b21b      	sxth	r3, r3
    1a8a:	b29b      	uxth	r3, r3
    1a8c:	e7f2      	b.n	1a74 <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
    1a8e:	3001      	adds	r0, #1
    1a90:	280f      	cmp	r0, #15
    1a92:	dc09      	bgt.n	1aa8 <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1a94:	07c2      	lsls	r2, r0, #31
    1a96:	d5e6      	bpl.n	1a66 <baro_check+0x22>
    1a98:	1042      	asrs	r2, r0, #1
    1a9a:	0052      	lsls	r2, r2, #1
    1a9c:	5aa1      	ldrh	r1, [r4, r2]
    1a9e:	22ff      	movs	r2, #255	; 0xff
    1aa0:	400a      	ands	r2, r1
		n_rem ^= byte;
    1aa2:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
    1aa4:	2200      	movs	r2, #0
    1aa6:	e7e6      	b.n	1a76 <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
    1aa8:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
    1aaa:	73a5      	strb	r5, [r4, #14]
    1aac:	0a2a      	lsrs	r2, r5, #8
    1aae:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
    1ab0:	200f      	movs	r0, #15
    1ab2:	4028      	ands	r0, r5
    1ab4:	1ac0      	subs	r0, r0, r3
    1ab6:	4243      	negs	r3, r0
    1ab8:	4158      	adcs	r0, r3
    1aba:	b2c0      	uxtb	r0, r0
}
    1abc:	bd30      	pop	{r4, r5, pc}
	...

00001ac0 <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    1ac0:	b570      	push	{r4, r5, r6, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	0005      	movs	r5, r0
    1ac6:	000c      	movs	r4, r1
    1ac8:	9200      	str	r2, [sp, #0]
    1aca:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    1acc:	0008      	movs	r0, r1
    1ace:	4b0e      	ldr	r3, [pc, #56]	; (1b08 <baro_init+0x48>)
    1ad0:	4798      	blx	r3
    1ad2:	1e06      	subs	r6, r0, #0
    1ad4:	d102      	bne.n	1adc <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
    1ad6:	0030      	movs	r0, r6
    1ad8:	b002      	add	sp, #8
    1ada:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
    1adc:	742c      	strb	r4, [r5, #16]
    1ade:	0a23      	lsrs	r3, r4, #8
    1ae0:	746b      	strb	r3, [r5, #17]
    1ae2:	0c23      	lsrs	r3, r4, #16
    1ae4:	74ab      	strb	r3, [r5, #18]
    1ae6:	0e24      	lsrs	r4, r4, #24
    1ae8:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
    1aea:	0028      	movs	r0, r5
    1aec:	3014      	adds	r0, #20
    1aee:	2205      	movs	r2, #5
    1af0:	4669      	mov	r1, sp
    1af2:	4b06      	ldr	r3, [pc, #24]	; (1b0c <baro_init+0x4c>)
    1af4:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
    1af6:	4a06      	ldr	r2, [pc, #24]	; (1b10 <baro_init+0x50>)
    1af8:	211e      	movs	r1, #30
    1afa:	0028      	movs	r0, r5
    1afc:	4b05      	ldr	r3, [pc, #20]	; (1b14 <baro_init+0x54>)
    1afe:	4798      	blx	r3
	baro_read_prom(desc);
    1b00:	0028      	movs	r0, r5
    1b02:	4b05      	ldr	r3, [pc, #20]	; (1b18 <baro_init+0x58>)
    1b04:	4798      	blx	r3
	return true;
    1b06:	e7e6      	b.n	1ad6 <baro_init+0x16>
    1b08:	000026c9 	.word	0x000026c9
    1b0c:	00005b75 	.word	0x00005b75
    1b10:	00000bb8 	.word	0x00000bb8
    1b14:	00001925 	.word	0x00001925
    1b18:	00001999 	.word	0x00001999

00001b1c <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
    1b1c:	280b      	cmp	r0, #11
    1b1e:	d804      	bhi.n	1b2a <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
    1b20:	4a03      	ldr	r2, [pc, #12]	; (1b30 <dma_set_channel+0x14>)
    1b22:	233f      	movs	r3, #63	; 0x3f
    1b24:	54d0      	strb	r0, [r2, r3]
		return true;
    1b26:	2001      	movs	r0, #1
	}
	else return false;
}
    1b28:	4770      	bx	lr
	else return false;
    1b2a:	2000      	movs	r0, #0
    1b2c:	e7fc      	b.n	1b28 <dma_set_channel+0xc>
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	41004800 	.word	0x41004800

00001b34 <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
    1b34:	4b08      	ldr	r3, [pc, #32]	; (1b58 <dma_init+0x24>)
    1b36:	695a      	ldr	r2, [r3, #20]
    1b38:	2120      	movs	r1, #32
    1b3a:	430a      	orrs	r2, r1
    1b3c:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
    1b3e:	69da      	ldr	r2, [r3, #28]
    1b40:	430a      	orrs	r2, r1
    1b42:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
    1b44:	4a05      	ldr	r2, [pc, #20]	; (1b5c <dma_init+0x28>)
    1b46:	4b06      	ldr	r3, [pc, #24]	; (1b60 <dma_init+0x2c>)
    1b48:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
    1b4a:	4a06      	ldr	r2, [pc, #24]	; (1b64 <dma_init+0x30>)
    1b4c:	639a      	str	r2, [r3, #56]	; 0x38

	// increase ram QOS for DMAC
	DMAC_REGS->DMAC_QOSCTRL = DMAC_QOSCTRL_DQOS_HIGH | DMAC_QOSCTRL_FQOS_HIGH | DMAC_QOSCTRL_WRBQOS_HIGH;
    1b4e:	223f      	movs	r2, #63	; 0x3f
    1b50:	739a      	strb	r2, [r3, #14]
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
    1b52:	4a05      	ldr	r2, [pc, #20]	; (1b68 <dma_init+0x34>)
    1b54:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
    1b56:	4770      	bx	lr
    1b58:	40000400 	.word	0x40000400
    1b5c:	20000568 	.word	0x20000568
    1b60:	41004800 	.word	0x41004800
    1b64:	200004c8 	.word	0x200004c8
    1b68:	00000f02 	.word	0x00000f02

00001b6c <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
    1b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b6e:	ac05      	add	r4, sp, #20
    1b70:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
    1b72:	2b02      	cmp	r3, #2
    1b74:	d82d      	bhi.n	1bd2 <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1b76:	2900      	cmp	r1, #0
    1b78:	d023      	beq.n	1bc2 <dma_create_descriptor+0x56>
    1b7a:	2480      	movs	r4, #128	; 0x80
    1b7c:	00e4      	lsls	r4, r4, #3
    1b7e:	2a00      	cmp	r2, #0
    1b80:	d021      	beq.n	1bc6 <dma_create_descriptor+0x5a>
    1b82:	2580      	movs	r5, #128	; 0x80
    1b84:	012d      	lsls	r5, r5, #4
    1b86:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
    1b88:	021d      	lsls	r5, r3, #8
    1b8a:	27c0      	movs	r7, #192	; 0xc0
    1b8c:	00bf      	lsls	r7, r7, #2
    1b8e:	403d      	ands	r5, r7
    1b90:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
    1b92:	2501      	movs	r5, #1
    1b94:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
    1b96:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
    1b98:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    1b9a:	2900      	cmp	r1, #0
    1b9c:	d015      	beq.n	1bca <dma_create_descriptor+0x5e>
    1b9e:	1c59      	adds	r1, r3, #1
    1ba0:	4371      	muls	r1, r6
    1ba2:	9c06      	ldr	r4, [sp, #24]
    1ba4:	46a4      	mov	ip, r4
    1ba6:	4461      	add	r1, ip
    1ba8:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    1baa:	2a00      	cmp	r2, #0
    1bac:	d00f      	beq.n	1bce <dma_create_descriptor+0x62>
    1bae:	3301      	adds	r3, #1
    1bb0:	4373      	muls	r3, r6
    1bb2:	9a07      	ldr	r2, [sp, #28]
    1bb4:	4694      	mov	ip, r2
    1bb6:	4463      	add	r3, ip
    1bb8:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
    1bba:	9b08      	ldr	r3, [sp, #32]
    1bbc:	60c3      	str	r3, [r0, #12]
	
	return true;
    1bbe:	2001      	movs	r0, #1
}
    1bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1bc2:	2400      	movs	r4, #0
    1bc4:	e7db      	b.n	1b7e <dma_create_descriptor+0x12>
    1bc6:	2500      	movs	r5, #0
    1bc8:	e7dd      	b.n	1b86 <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    1bca:	9906      	ldr	r1, [sp, #24]
    1bcc:	e7ec      	b.n	1ba8 <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    1bce:	9b07      	ldr	r3, [sp, #28]
    1bd0:	e7f2      	b.n	1bb8 <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
    1bd2:	2000      	movs	r0, #0
    1bd4:	e7f4      	b.n	1bc0 <dma_create_descriptor+0x54>
	...

00001bd8 <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
    1bd8:	b570      	push	{r4, r5, r6, lr}
    1bda:	000c      	movs	r4, r1
    1bdc:	0015      	movs	r5, r2
    1bde:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
    1be0:	4b0e      	ldr	r3, [pc, #56]	; (1c1c <dma_init_channel+0x44>)
    1be2:	4798      	blx	r3
    1be4:	2800      	cmp	r0, #0
    1be6:	d012      	beq.n	1c0e <dma_init_channel+0x36>
	if (priority > 3) return false;
    1be8:	2e03      	cmp	r6, #3
    1bea:	d811      	bhi.n	1c10 <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
    1bec:	2c03      	cmp	r4, #3
    1bee:	d811      	bhi.n	1c14 <dma_init_channel+0x3c>
    1bf0:	2c01      	cmp	r4, #1
    1bf2:	d011      	beq.n	1c18 <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1bf4:	05a4      	lsls	r4, r4, #22
    1bf6:	23c0      	movs	r3, #192	; 0xc0
    1bf8:	041b      	lsls	r3, r3, #16
    1bfa:	401c      	ands	r4, r3
    1bfc:	022d      	lsls	r5, r5, #8
    1bfe:	23fc      	movs	r3, #252	; 0xfc
    1c00:	019b      	lsls	r3, r3, #6
    1c02:	401d      	ands	r5, r3
    1c04:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
    1c06:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1c08:	4334      	orrs	r4, r6
    1c0a:	4a05      	ldr	r2, [pc, #20]	; (1c20 <dma_init_channel+0x48>)
    1c0c:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
    1c0e:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
    1c10:	2000      	movs	r0, #0
    1c12:	e7fc      	b.n	1c0e <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
    1c14:	2000      	movs	r0, #0
    1c16:	e7fa      	b.n	1c0e <dma_init_channel+0x36>
    1c18:	2000      	movs	r0, #0
    1c1a:	e7f8      	b.n	1c0e <dma_init_channel+0x36>
    1c1c:	00001b1d 	.word	0x00001b1d
    1c20:	41004800 	.word	0x41004800

00001c24 <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
    1c24:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    1c26:	4b07      	ldr	r3, [pc, #28]	; (1c44 <dma_enable_channel+0x20>)
    1c28:	4798      	blx	r3
    1c2a:	2800      	cmp	r0, #0
    1c2c:	d009      	beq.n	1c42 <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
    1c2e:	4a06      	ldr	r2, [pc, #24]	; (1c48 <dma_enable_channel+0x24>)
    1c30:	234e      	movs	r3, #78	; 0x4e
    1c32:	2102      	movs	r1, #2
    1c34:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
    1c36:	313e      	adds	r1, #62	; 0x3e
    1c38:	5c53      	ldrb	r3, [r2, r1]
    1c3a:	2402      	movs	r4, #2
    1c3c:	4323      	orrs	r3, r4
    1c3e:	b2db      	uxtb	r3, r3
    1c40:	5453      	strb	r3, [r2, r1]
	return true;
}
    1c42:	bd10      	pop	{r4, pc}
    1c44:	00001b1d 	.word	0x00001b1d
    1c48:	41004800 	.word	0x41004800

00001c4c <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
    1c4c:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    1c4e:	4b05      	ldr	r3, [pc, #20]	; (1c64 <dma_disable_channel+0x18>)
    1c50:	4798      	blx	r3
    1c52:	2800      	cmp	r0, #0
    1c54:	d005      	beq.n	1c62 <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
    1c56:	4904      	ldr	r1, [pc, #16]	; (1c68 <dma_disable_channel+0x1c>)
    1c58:	2240      	movs	r2, #64	; 0x40
    1c5a:	5c8b      	ldrb	r3, [r1, r2]
    1c5c:	2402      	movs	r4, #2
    1c5e:	43a3      	bics	r3, r4
    1c60:	548b      	strb	r3, [r1, r2]
	return true;
}
    1c62:	bd10      	pop	{r4, pc}
    1c64:	00001b1d 	.word	0x00001b1d
    1c68:	41004800 	.word	0x41004800

00001c6c <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
    1c6c:	b530      	push	{r4, r5, lr}
    1c6e:	b083      	sub	sp, #12
    1c70:	0004      	movs	r4, r0
    1c72:	9200      	str	r2, [sp, #0]
    1c74:	9301      	str	r3, [sp, #4]
    1c76:	ab06      	add	r3, sp, #24
    1c78:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
    1c7a:	7001      	strb	r1, [r0, #0]
    1c7c:	0a0b      	lsrs	r3, r1, #8
    1c7e:	7043      	strb	r3, [r0, #1]
    1c80:	0c0b      	lsrs	r3, r1, #16
    1c82:	7083      	strb	r3, [r0, #2]
    1c84:	0e09      	lsrs	r1, r1, #24
    1c86:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1c88:	3004      	adds	r0, #4
    1c8a:	2205      	movs	r2, #5
    1c8c:	4669      	mov	r1, sp
    1c8e:	4b10      	ldr	r3, [pc, #64]	; (1cd0 <eeprom_init+0x64>)
    1c90:	4798      	blx	r3
	desc->size = size;
    1c92:	7265      	strb	r5, [r4, #9]
    1c94:	0a2d      	lsrs	r5, r5, #8
    1c96:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1c98:	7923      	ldrb	r3, [r4, #4]
    1c9a:	7962      	ldrb	r2, [r4, #5]
    1c9c:	0212      	lsls	r2, r2, #8
    1c9e:	431a      	orrs	r2, r3
    1ca0:	79a3      	ldrb	r3, [r4, #6]
    1ca2:	041b      	lsls	r3, r3, #16
    1ca4:	4313      	orrs	r3, r2
    1ca6:	79e1      	ldrb	r1, [r4, #7]
    1ca8:	0609      	lsls	r1, r1, #24
    1caa:	4319      	orrs	r1, r3
    1cac:	7a20      	ldrb	r0, [r4, #8]
    1cae:	4b09      	ldr	r3, [pc, #36]	; (1cd4 <eeprom_init+0x68>)
    1cb0:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1cb2:	7923      	ldrb	r3, [r4, #4]
    1cb4:	7962      	ldrb	r2, [r4, #5]
    1cb6:	0212      	lsls	r2, r2, #8
    1cb8:	431a      	orrs	r2, r3
    1cba:	79a3      	ldrb	r3, [r4, #6]
    1cbc:	041b      	lsls	r3, r3, #16
    1cbe:	4313      	orrs	r3, r2
    1cc0:	79e1      	ldrb	r1, [r4, #7]
    1cc2:	0609      	lsls	r1, r1, #24
    1cc4:	4319      	orrs	r1, r3
    1cc6:	7a20      	ldrb	r0, [r4, #8]
    1cc8:	4b03      	ldr	r3, [pc, #12]	; (1cd8 <eeprom_init+0x6c>)
    1cca:	4798      	blx	r3
}
    1ccc:	b003      	add	sp, #12
    1cce:	bd30      	pop	{r4, r5, pc}
    1cd0:	00005b75 	.word	0x00005b75
    1cd4:	000023bd 	.word	0x000023bd
    1cd8:	000023cd 	.word	0x000023cd

00001cdc <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
    1cdc:	b510      	push	{r4, lr}
    1cde:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1ce0:	7903      	ldrb	r3, [r0, #4]
    1ce2:	7942      	ldrb	r2, [r0, #5]
    1ce4:	0212      	lsls	r2, r2, #8
    1ce6:	431a      	orrs	r2, r3
    1ce8:	7983      	ldrb	r3, [r0, #6]
    1cea:	041b      	lsls	r3, r3, #16
    1cec:	4313      	orrs	r3, r2
    1cee:	79c1      	ldrb	r1, [r0, #7]
    1cf0:	0609      	lsls	r1, r1, #24
    1cf2:	4319      	orrs	r1, r3
    1cf4:	7a00      	ldrb	r0, [r0, #8]
    1cf6:	4b0e      	ldr	r3, [pc, #56]	; (1d30 <eeprom_write_enable+0x54>)
    1cf8:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
    1cfa:	7823      	ldrb	r3, [r4, #0]
    1cfc:	7862      	ldrb	r2, [r4, #1]
    1cfe:	0212      	lsls	r2, r2, #8
    1d00:	431a      	orrs	r2, r3
    1d02:	78a3      	ldrb	r3, [r4, #2]
    1d04:	041b      	lsls	r3, r3, #16
    1d06:	4313      	orrs	r3, r2
    1d08:	78e0      	ldrb	r0, [r4, #3]
    1d0a:	0600      	lsls	r0, r0, #24
    1d0c:	4318      	orrs	r0, r3
    1d0e:	2106      	movs	r1, #6
    1d10:	4b08      	ldr	r3, [pc, #32]	; (1d34 <eeprom_write_enable+0x58>)
    1d12:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1d14:	7923      	ldrb	r3, [r4, #4]
    1d16:	7962      	ldrb	r2, [r4, #5]
    1d18:	0212      	lsls	r2, r2, #8
    1d1a:	431a      	orrs	r2, r3
    1d1c:	79a3      	ldrb	r3, [r4, #6]
    1d1e:	041b      	lsls	r3, r3, #16
    1d20:	4313      	orrs	r3, r2
    1d22:	79e1      	ldrb	r1, [r4, #7]
    1d24:	0609      	lsls	r1, r1, #24
    1d26:	4319      	orrs	r1, r3
    1d28:	7a20      	ldrb	r0, [r4, #8]
    1d2a:	4b03      	ldr	r3, [pc, #12]	; (1d38 <eeprom_write_enable+0x5c>)
    1d2c:	4798      	blx	r3
}
    1d2e:	bd10      	pop	{r4, pc}
    1d30:	000023dd 	.word	0x000023dd
    1d34:	000028b9 	.word	0x000028b9
    1d38:	000023cd 	.word	0x000023cd

00001d3c <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
    1d3c:	b510      	push	{r4, lr}
    1d3e:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1d40:	7903      	ldrb	r3, [r0, #4]
    1d42:	7942      	ldrb	r2, [r0, #5]
    1d44:	0212      	lsls	r2, r2, #8
    1d46:	431a      	orrs	r2, r3
    1d48:	7983      	ldrb	r3, [r0, #6]
    1d4a:	041b      	lsls	r3, r3, #16
    1d4c:	4313      	orrs	r3, r2
    1d4e:	79c1      	ldrb	r1, [r0, #7]
    1d50:	0609      	lsls	r1, r1, #24
    1d52:	4319      	orrs	r1, r3
    1d54:	7a00      	ldrb	r0, [r0, #8]
    1d56:	4b0e      	ldr	r3, [pc, #56]	; (1d90 <eeprom_write_disable+0x54>)
    1d58:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
    1d5a:	7823      	ldrb	r3, [r4, #0]
    1d5c:	7862      	ldrb	r2, [r4, #1]
    1d5e:	0212      	lsls	r2, r2, #8
    1d60:	431a      	orrs	r2, r3
    1d62:	78a3      	ldrb	r3, [r4, #2]
    1d64:	041b      	lsls	r3, r3, #16
    1d66:	4313      	orrs	r3, r2
    1d68:	78e0      	ldrb	r0, [r4, #3]
    1d6a:	0600      	lsls	r0, r0, #24
    1d6c:	4318      	orrs	r0, r3
    1d6e:	2104      	movs	r1, #4
    1d70:	4b08      	ldr	r3, [pc, #32]	; (1d94 <eeprom_write_disable+0x58>)
    1d72:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1d74:	7923      	ldrb	r3, [r4, #4]
    1d76:	7962      	ldrb	r2, [r4, #5]
    1d78:	0212      	lsls	r2, r2, #8
    1d7a:	431a      	orrs	r2, r3
    1d7c:	79a3      	ldrb	r3, [r4, #6]
    1d7e:	041b      	lsls	r3, r3, #16
    1d80:	4313      	orrs	r3, r2
    1d82:	79e1      	ldrb	r1, [r4, #7]
    1d84:	0609      	lsls	r1, r1, #24
    1d86:	4319      	orrs	r1, r3
    1d88:	7a20      	ldrb	r0, [r4, #8]
    1d8a:	4b03      	ldr	r3, [pc, #12]	; (1d98 <eeprom_write_disable+0x5c>)
    1d8c:	4798      	blx	r3
}
    1d8e:	bd10      	pop	{r4, pc}
    1d90:	000023dd 	.word	0x000023dd
    1d94:	000028b9 	.word	0x000028b9
    1d98:	000023cd 	.word	0x000023cd

00001d9c <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
    1d9c:	b570      	push	{r4, r5, r6, lr}
    1d9e:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1da0:	7903      	ldrb	r3, [r0, #4]
    1da2:	7942      	ldrb	r2, [r0, #5]
    1da4:	0212      	lsls	r2, r2, #8
    1da6:	431a      	orrs	r2, r3
    1da8:	7983      	ldrb	r3, [r0, #6]
    1daa:	041b      	lsls	r3, r3, #16
    1dac:	4313      	orrs	r3, r2
    1dae:	79c1      	ldrb	r1, [r0, #7]
    1db0:	0609      	lsls	r1, r1, #24
    1db2:	4319      	orrs	r1, r3
    1db4:	7a00      	ldrb	r0, [r0, #8]
    1db6:	4b15      	ldr	r3, [pc, #84]	; (1e0c <eeprom_read_status+0x70>)
    1db8:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
    1dba:	7823      	ldrb	r3, [r4, #0]
    1dbc:	7862      	ldrb	r2, [r4, #1]
    1dbe:	0212      	lsls	r2, r2, #8
    1dc0:	431a      	orrs	r2, r3
    1dc2:	78a3      	ldrb	r3, [r4, #2]
    1dc4:	041b      	lsls	r3, r3, #16
    1dc6:	4313      	orrs	r3, r2
    1dc8:	78e0      	ldrb	r0, [r4, #3]
    1dca:	0600      	lsls	r0, r0, #24
    1dcc:	4318      	orrs	r0, r3
    1dce:	2105      	movs	r1, #5
    1dd0:	4d0f      	ldr	r5, [pc, #60]	; (1e10 <eeprom_read_status+0x74>)
    1dd2:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
    1dd4:	7823      	ldrb	r3, [r4, #0]
    1dd6:	7862      	ldrb	r2, [r4, #1]
    1dd8:	0212      	lsls	r2, r2, #8
    1dda:	431a      	orrs	r2, r3
    1ddc:	78a3      	ldrb	r3, [r4, #2]
    1dde:	041b      	lsls	r3, r3, #16
    1de0:	4313      	orrs	r3, r2
    1de2:	78e0      	ldrb	r0, [r4, #3]
    1de4:	0600      	lsls	r0, r0, #24
    1de6:	4318      	orrs	r0, r3
    1de8:	2100      	movs	r1, #0
    1dea:	47a8      	blx	r5
    1dec:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
    1dee:	7923      	ldrb	r3, [r4, #4]
    1df0:	7962      	ldrb	r2, [r4, #5]
    1df2:	0212      	lsls	r2, r2, #8
    1df4:	431a      	orrs	r2, r3
    1df6:	79a3      	ldrb	r3, [r4, #6]
    1df8:	041b      	lsls	r3, r3, #16
    1dfa:	4313      	orrs	r3, r2
    1dfc:	79e1      	ldrb	r1, [r4, #7]
    1dfe:	0609      	lsls	r1, r1, #24
    1e00:	4319      	orrs	r1, r3
    1e02:	7a20      	ldrb	r0, [r4, #8]
    1e04:	4b03      	ldr	r3, [pc, #12]	; (1e14 <eeprom_read_status+0x78>)
    1e06:	4798      	blx	r3
}
    1e08:	0028      	movs	r0, r5
    1e0a:	bd70      	pop	{r4, r5, r6, pc}
    1e0c:	000023dd 	.word	0x000023dd
    1e10:	000028b9 	.word	0x000028b9
    1e14:	000023cd 	.word	0x000023cd

00001e18 <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
    1e18:	b510      	push	{r4, lr}
    1e1a:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
    1e1c:	4b0a      	ldr	r3, [pc, #40]	; (1e48 <eeprom_check+0x30>)
    1e1e:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
    1e20:	0020      	movs	r0, r4
    1e22:	4b0a      	ldr	r3, [pc, #40]	; (1e4c <eeprom_check+0x34>)
    1e24:	4798      	blx	r3
    1e26:	0780      	lsls	r0, r0, #30
    1e28:	d401      	bmi.n	1e2e <eeprom_check+0x16>
    1e2a:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
    1e2c:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
    1e2e:	0020      	movs	r0, r4
    1e30:	4b07      	ldr	r3, [pc, #28]	; (1e50 <eeprom_check+0x38>)
    1e32:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1e34:	0020      	movs	r0, r4
    1e36:	4b05      	ldr	r3, [pc, #20]	; (1e4c <eeprom_check+0x34>)
    1e38:	4798      	blx	r3
    1e3a:	0780      	lsls	r0, r0, #30
    1e3c:	d401      	bmi.n	1e42 <eeprom_check+0x2a>
	return true;
    1e3e:	2001      	movs	r0, #1
    1e40:	e7f4      	b.n	1e2c <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1e42:	2000      	movs	r0, #0
    1e44:	e7f2      	b.n	1e2c <eeprom_check+0x14>
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	00001cdd 	.word	0x00001cdd
    1e4c:	00001d9d 	.word	0x00001d9d
    1e50:	00001d3d 	.word	0x00001d3d

00001e54 <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
    1e54:	b570      	push	{r4, r5, r6, lr}
    1e56:	b082      	sub	sp, #8
    1e58:	0004      	movs	r4, r0
    1e5a:	9200      	str	r2, [sp, #0]
    1e5c:	9301      	str	r3, [sp, #4]
    1e5e:	ab06      	add	r3, sp, #24
    1e60:	cb20      	ldmia	r3!, {r5}
    1e62:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
    1e64:	7001      	strb	r1, [r0, #0]
    1e66:	0a0b      	lsrs	r3, r1, #8
    1e68:	7043      	strb	r3, [r0, #1]
    1e6a:	0c0b      	lsrs	r3, r1, #16
    1e6c:	7083      	strb	r3, [r0, #2]
    1e6e:	0e09      	lsrs	r1, r1, #24
    1e70:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1e72:	3008      	adds	r0, #8
    1e74:	2205      	movs	r2, #5
    1e76:	4669      	mov	r1, sp
    1e78:	4b15      	ldr	r3, [pc, #84]	; (1ed0 <flash_init+0x7c>)
    1e7a:	4798      	blx	r3
	desc->size = size;
    1e7c:	7125      	strb	r5, [r4, #4]
    1e7e:	0a2b      	lsrs	r3, r5, #8
    1e80:	7163      	strb	r3, [r4, #5]
    1e82:	0c2b      	lsrs	r3, r5, #16
    1e84:	71a3      	strb	r3, [r4, #6]
    1e86:	0e2d      	lsrs	r5, r5, #24
    1e88:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
    1e8a:	221f      	movs	r2, #31
    1e8c:	4032      	ands	r2, r6
    1e8e:	7b63      	ldrb	r3, [r4, #13]
    1e90:	211f      	movs	r1, #31
    1e92:	438b      	bics	r3, r1
    1e94:	4313      	orrs	r3, r2
    1e96:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1e98:	7a23      	ldrb	r3, [r4, #8]
    1e9a:	7a62      	ldrb	r2, [r4, #9]
    1e9c:	0212      	lsls	r2, r2, #8
    1e9e:	431a      	orrs	r2, r3
    1ea0:	7aa3      	ldrb	r3, [r4, #10]
    1ea2:	041b      	lsls	r3, r3, #16
    1ea4:	4313      	orrs	r3, r2
    1ea6:	7ae1      	ldrb	r1, [r4, #11]
    1ea8:	0609      	lsls	r1, r1, #24
    1eaa:	4319      	orrs	r1, r3
    1eac:	7b20      	ldrb	r0, [r4, #12]
    1eae:	4b09      	ldr	r3, [pc, #36]	; (1ed4 <flash_init+0x80>)
    1eb0:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1eb2:	7a23      	ldrb	r3, [r4, #8]
    1eb4:	7a62      	ldrb	r2, [r4, #9]
    1eb6:	0212      	lsls	r2, r2, #8
    1eb8:	431a      	orrs	r2, r3
    1eba:	7aa3      	ldrb	r3, [r4, #10]
    1ebc:	041b      	lsls	r3, r3, #16
    1ebe:	4313      	orrs	r3, r2
    1ec0:	7ae1      	ldrb	r1, [r4, #11]
    1ec2:	0609      	lsls	r1, r1, #24
    1ec4:	4319      	orrs	r1, r3
    1ec6:	7b20      	ldrb	r0, [r4, #12]
    1ec8:	4b03      	ldr	r3, [pc, #12]	; (1ed8 <flash_init+0x84>)
    1eca:	4798      	blx	r3
}
    1ecc:	b002      	add	sp, #8
    1ece:	bd70      	pop	{r4, r5, r6, pc}
    1ed0:	00005b75 	.word	0x00005b75
    1ed4:	000023bd 	.word	0x000023bd
    1ed8:	000023cd 	.word	0x000023cd

00001edc <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
    1edc:	b530      	push	{r4, r5, lr}
    1ede:	b083      	sub	sp, #12
    1ee0:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1ee2:	7a03      	ldrb	r3, [r0, #8]
    1ee4:	7a42      	ldrb	r2, [r0, #9]
    1ee6:	0212      	lsls	r2, r2, #8
    1ee8:	431a      	orrs	r2, r3
    1eea:	7a83      	ldrb	r3, [r0, #10]
    1eec:	041b      	lsls	r3, r3, #16
    1eee:	4313      	orrs	r3, r2
    1ef0:	7ac1      	ldrb	r1, [r0, #11]
    1ef2:	0609      	lsls	r1, r1, #24
    1ef4:	4319      	orrs	r1, r3
    1ef6:	7b00      	ldrb	r0, [r0, #12]
    1ef8:	4b24      	ldr	r3, [pc, #144]	; (1f8c <flash_check+0xb0>)
    1efa:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    1efc:	7823      	ldrb	r3, [r4, #0]
    1efe:	7862      	ldrb	r2, [r4, #1]
    1f00:	0212      	lsls	r2, r2, #8
    1f02:	431a      	orrs	r2, r3
    1f04:	78a3      	ldrb	r3, [r4, #2]
    1f06:	041b      	lsls	r3, r3, #16
    1f08:	4313      	orrs	r3, r2
    1f0a:	78e0      	ldrb	r0, [r4, #3]
    1f0c:	0600      	lsls	r0, r0, #24
    1f0e:	4318      	orrs	r0, r3
    1f10:	219f      	movs	r1, #159	; 0x9f
    1f12:	4b1f      	ldr	r3, [pc, #124]	; (1f90 <flash_check+0xb4>)
    1f14:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    1f16:	2500      	movs	r5, #0
    1f18:	e00f      	b.n	1f3a <flash_check+0x5e>
    1f1a:	7823      	ldrb	r3, [r4, #0]
    1f1c:	7862      	ldrb	r2, [r4, #1]
    1f1e:	0212      	lsls	r2, r2, #8
    1f20:	431a      	orrs	r2, r3
    1f22:	78a3      	ldrb	r3, [r4, #2]
    1f24:	041b      	lsls	r3, r3, #16
    1f26:	4313      	orrs	r3, r2
    1f28:	78e0      	ldrb	r0, [r4, #3]
    1f2a:	0600      	lsls	r0, r0, #24
    1f2c:	4318      	orrs	r0, r3
    1f2e:	2100      	movs	r1, #0
    1f30:	4b17      	ldr	r3, [pc, #92]	; (1f90 <flash_check+0xb4>)
    1f32:	4798      	blx	r3
    1f34:	ab01      	add	r3, sp, #4
    1f36:	5558      	strb	r0, [r3, r5]
    1f38:	3501      	adds	r5, #1
    1f3a:	2d02      	cmp	r5, #2
    1f3c:	dded      	ble.n	1f1a <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    1f3e:	7a23      	ldrb	r3, [r4, #8]
    1f40:	7a62      	ldrb	r2, [r4, #9]
    1f42:	0212      	lsls	r2, r2, #8
    1f44:	431a      	orrs	r2, r3
    1f46:	7aa3      	ldrb	r3, [r4, #10]
    1f48:	041b      	lsls	r3, r3, #16
    1f4a:	4313      	orrs	r3, r2
    1f4c:	7ae1      	ldrb	r1, [r4, #11]
    1f4e:	0609      	lsls	r1, r1, #24
    1f50:	4319      	orrs	r1, r3
    1f52:	7b20      	ldrb	r0, [r4, #12]
    1f54:	4b0f      	ldr	r3, [pc, #60]	; (1f94 <flash_check+0xb8>)
    1f56:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1f58:	ab01      	add	r3, sp, #4
    1f5a:	781b      	ldrb	r3, [r3, #0]
    1f5c:	2b1f      	cmp	r3, #31
    1f5e:	d10e      	bne.n	1f7e <flash_check+0xa2>
    1f60:	ab01      	add	r3, sp, #4
    1f62:	785a      	ldrb	r2, [r3, #1]
    1f64:	7b63      	ldrb	r3, [r4, #13]
    1f66:	06db      	lsls	r3, r3, #27
    1f68:	0edb      	lsrs	r3, r3, #27
    1f6a:	2180      	movs	r1, #128	; 0x80
    1f6c:	430b      	orrs	r3, r1
    1f6e:	429a      	cmp	r2, r3
    1f70:	d108      	bne.n	1f84 <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    1f72:	ab01      	add	r3, sp, #4
    1f74:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1f76:	2b01      	cmp	r3, #1
    1f78:	d006      	beq.n	1f88 <flash_check+0xac>
	else return false;
    1f7a:	2000      	movs	r0, #0
    1f7c:	e000      	b.n	1f80 <flash_check+0xa4>
    1f7e:	2000      	movs	r0, #0
}
    1f80:	b003      	add	sp, #12
    1f82:	bd30      	pop	{r4, r5, pc}
	else return false;
    1f84:	2000      	movs	r0, #0
    1f86:	e7fb      	b.n	1f80 <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    1f88:	2001      	movs	r0, #1
    1f8a:	e7f9      	b.n	1f80 <flash_check+0xa4>
    1f8c:	000023dd 	.word	0x000023dd
    1f90:	000028b9 	.word	0x000028b9
    1f94:	000023cd 	.word	0x000023cd

00001f98 <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1f98:	b570      	push	{r4, r5, r6, lr}
    1f9a:	0004      	movs	r4, r0
    1f9c:	000e      	movs	r6, r1
    1f9e:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1fa0:	7902      	ldrb	r2, [r0, #4]
    1fa2:	7943      	ldrb	r3, [r0, #5]
    1fa4:	021b      	lsls	r3, r3, #8
    1fa6:	4313      	orrs	r3, r2
    1fa8:	7982      	ldrb	r2, [r0, #6]
    1faa:	0412      	lsls	r2, r2, #16
    1fac:	431a      	orrs	r2, r3
    1fae:	79c1      	ldrb	r1, [r0, #7]
    1fb0:	0609      	lsls	r1, r1, #24
    1fb2:	4311      	orrs	r1, r2
    1fb4:	7a00      	ldrb	r0, [r0, #8]
    1fb6:	4b15      	ldr	r3, [pc, #84]	; (200c <STACK_SIZE+0xc>)
    1fb8:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    1fba:	217f      	movs	r1, #127	; 0x7f
    1fbc:	4031      	ands	r1, r6
    1fbe:	7823      	ldrb	r3, [r4, #0]
    1fc0:	7862      	ldrb	r2, [r4, #1]
    1fc2:	0212      	lsls	r2, r2, #8
    1fc4:	431a      	orrs	r2, r3
    1fc6:	78a3      	ldrb	r3, [r4, #2]
    1fc8:	041b      	lsls	r3, r3, #16
    1fca:	4313      	orrs	r3, r2
    1fcc:	78e0      	ldrb	r0, [r4, #3]
    1fce:	0600      	lsls	r0, r0, #24
    1fd0:	4318      	orrs	r0, r3
    1fd2:	4e0f      	ldr	r6, [pc, #60]	; (2010 <STACK_SIZE+0x10>)
    1fd4:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    1fd6:	7823      	ldrb	r3, [r4, #0]
    1fd8:	7862      	ldrb	r2, [r4, #1]
    1fda:	0212      	lsls	r2, r2, #8
    1fdc:	431a      	orrs	r2, r3
    1fde:	78a3      	ldrb	r3, [r4, #2]
    1fe0:	041b      	lsls	r3, r3, #16
    1fe2:	4313      	orrs	r3, r2
    1fe4:	78e0      	ldrb	r0, [r4, #3]
    1fe6:	0600      	lsls	r0, r0, #24
    1fe8:	4318      	orrs	r0, r3
    1fea:	0029      	movs	r1, r5
    1fec:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1fee:	7923      	ldrb	r3, [r4, #4]
    1ff0:	7962      	ldrb	r2, [r4, #5]
    1ff2:	0212      	lsls	r2, r2, #8
    1ff4:	431a      	orrs	r2, r3
    1ff6:	79a3      	ldrb	r3, [r4, #6]
    1ff8:	041b      	lsls	r3, r3, #16
    1ffa:	4313      	orrs	r3, r2
    1ffc:	79e1      	ldrb	r1, [r4, #7]
    1ffe:	0609      	lsls	r1, r1, #24
    2000:	4319      	orrs	r1, r3
    2002:	7a20      	ldrb	r0, [r4, #8]
    2004:	4b03      	ldr	r3, [pc, #12]	; (2014 <STACK_SIZE+0x14>)
    2006:	4798      	blx	r3
}
    2008:	bd70      	pop	{r4, r5, r6, pc}
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	000023dd 	.word	0x000023dd
    2010:	000028b9 	.word	0x000028b9
    2014:	000023cd 	.word	0x000023cd

00002018 <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    2018:	b570      	push	{r4, r5, r6, lr}
    201a:	0004      	movs	r4, r0
    201c:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    201e:	7903      	ldrb	r3, [r0, #4]
    2020:	7942      	ldrb	r2, [r0, #5]
    2022:	0212      	lsls	r2, r2, #8
    2024:	431a      	orrs	r2, r3
    2026:	7983      	ldrb	r3, [r0, #6]
    2028:	041b      	lsls	r3, r3, #16
    202a:	4313      	orrs	r3, r2
    202c:	79c1      	ldrb	r1, [r0, #7]
    202e:	0609      	lsls	r1, r1, #24
    2030:	4319      	orrs	r1, r3
    2032:	7a00      	ldrb	r0, [r0, #8]
    2034:	4b16      	ldr	r3, [pc, #88]	; (2090 <imu_icm20948_read_byte+0x78>)
    2036:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    2038:	2180      	movs	r1, #128	; 0x80
    203a:	4249      	negs	r1, r1
    203c:	4329      	orrs	r1, r5
    203e:	b2c9      	uxtb	r1, r1
    2040:	7823      	ldrb	r3, [r4, #0]
    2042:	7862      	ldrb	r2, [r4, #1]
    2044:	0212      	lsls	r2, r2, #8
    2046:	431a      	orrs	r2, r3
    2048:	78a3      	ldrb	r3, [r4, #2]
    204a:	041b      	lsls	r3, r3, #16
    204c:	4313      	orrs	r3, r2
    204e:	78e0      	ldrb	r0, [r4, #3]
    2050:	0600      	lsls	r0, r0, #24
    2052:	4318      	orrs	r0, r3
    2054:	4d0f      	ldr	r5, [pc, #60]	; (2094 <imu_icm20948_read_byte+0x7c>)
    2056:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    2058:	7823      	ldrb	r3, [r4, #0]
    205a:	7862      	ldrb	r2, [r4, #1]
    205c:	0212      	lsls	r2, r2, #8
    205e:	431a      	orrs	r2, r3
    2060:	78a3      	ldrb	r3, [r4, #2]
    2062:	041b      	lsls	r3, r3, #16
    2064:	4313      	orrs	r3, r2
    2066:	78e0      	ldrb	r0, [r4, #3]
    2068:	0600      	lsls	r0, r0, #24
    206a:	4318      	orrs	r0, r3
    206c:	2100      	movs	r1, #0
    206e:	47a8      	blx	r5
    2070:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    2072:	7923      	ldrb	r3, [r4, #4]
    2074:	7962      	ldrb	r2, [r4, #5]
    2076:	0212      	lsls	r2, r2, #8
    2078:	431a      	orrs	r2, r3
    207a:	79a3      	ldrb	r3, [r4, #6]
    207c:	041b      	lsls	r3, r3, #16
    207e:	4313      	orrs	r3, r2
    2080:	79e1      	ldrb	r1, [r4, #7]
    2082:	0609      	lsls	r1, r1, #24
    2084:	4319      	orrs	r1, r3
    2086:	7a20      	ldrb	r0, [r4, #8]
    2088:	4b03      	ldr	r3, [pc, #12]	; (2098 <imu_icm20948_read_byte+0x80>)
    208a:	4798      	blx	r3
	return out;
}
    208c:	0028      	movs	r0, r5
    208e:	bd70      	pop	{r4, r5, r6, pc}
    2090:	000023dd 	.word	0x000023dd
    2094:	000028b9 	.word	0x000028b9
    2098:	000023cd 	.word	0x000023cd

0000209c <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    209c:	b5f0      	push	{r4, r5, r6, r7, lr}
    209e:	46c6      	mov	lr, r8
    20a0:	b500      	push	{lr}
    20a2:	0004      	movs	r4, r0
    20a4:	000d      	movs	r5, r1
    20a6:	0017      	movs	r7, r2
    20a8:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    20aa:	7902      	ldrb	r2, [r0, #4]
    20ac:	7943      	ldrb	r3, [r0, #5]
    20ae:	021b      	lsls	r3, r3, #8
    20b0:	4313      	orrs	r3, r2
    20b2:	7982      	ldrb	r2, [r0, #6]
    20b4:	0412      	lsls	r2, r2, #16
    20b6:	431a      	orrs	r2, r3
    20b8:	79c1      	ldrb	r1, [r0, #7]
    20ba:	0609      	lsls	r1, r1, #24
    20bc:	4311      	orrs	r1, r2
    20be:	7a00      	ldrb	r0, [r0, #8]
    20c0:	4b19      	ldr	r3, [pc, #100]	; (2128 <imu_icm20948_write+0x8c>)
    20c2:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    20c4:	217f      	movs	r1, #127	; 0x7f
    20c6:	4029      	ands	r1, r5
    20c8:	7823      	ldrb	r3, [r4, #0]
    20ca:	7862      	ldrb	r2, [r4, #1]
    20cc:	0212      	lsls	r2, r2, #8
    20ce:	431a      	orrs	r2, r3
    20d0:	78a3      	ldrb	r3, [r4, #2]
    20d2:	041b      	lsls	r3, r3, #16
    20d4:	4313      	orrs	r3, r2
    20d6:	78e0      	ldrb	r0, [r4, #3]
    20d8:	0600      	lsls	r0, r0, #24
    20da:	4318      	orrs	r0, r3
    20dc:	4b13      	ldr	r3, [pc, #76]	; (212c <imu_icm20948_write+0x90>)
    20de:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    20e0:	2600      	movs	r6, #0
    20e2:	e00e      	b.n	2102 <imu_icm20948_write+0x66>
		spi_command(desc->sercom, data[i]);
    20e4:	4643      	mov	r3, r8
    20e6:	5d99      	ldrb	r1, [r3, r6]
    20e8:	7822      	ldrb	r2, [r4, #0]
    20ea:	7863      	ldrb	r3, [r4, #1]
    20ec:	021b      	lsls	r3, r3, #8
    20ee:	4313      	orrs	r3, r2
    20f0:	78a5      	ldrb	r5, [r4, #2]
    20f2:	042d      	lsls	r5, r5, #16
    20f4:	431d      	orrs	r5, r3
    20f6:	78e0      	ldrb	r0, [r4, #3]
    20f8:	0600      	lsls	r0, r0, #24
    20fa:	4328      	orrs	r0, r5
    20fc:	4b0b      	ldr	r3, [pc, #44]	; (212c <imu_icm20948_write+0x90>)
    20fe:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    2100:	3601      	adds	r6, #1
    2102:	42be      	cmp	r6, r7
    2104:	dbee      	blt.n	20e4 <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    2106:	7923      	ldrb	r3, [r4, #4]
    2108:	7962      	ldrb	r2, [r4, #5]
    210a:	0212      	lsls	r2, r2, #8
    210c:	431a      	orrs	r2, r3
    210e:	79a3      	ldrb	r3, [r4, #6]
    2110:	041b      	lsls	r3, r3, #16
    2112:	4313      	orrs	r3, r2
    2114:	79e1      	ldrb	r1, [r4, #7]
    2116:	0609      	lsls	r1, r1, #24
    2118:	4319      	orrs	r1, r3
    211a:	7a20      	ldrb	r0, [r4, #8]
    211c:	4b04      	ldr	r3, [pc, #16]	; (2130 <imu_icm20948_write+0x94>)
    211e:	4798      	blx	r3
}
    2120:	bc80      	pop	{r7}
    2122:	46b8      	mov	r8, r7
    2124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	000023dd 	.word	0x000023dd
    212c:	000028b9 	.word	0x000028b9
    2130:	000023cd 	.word	0x000023cd

00002134 <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    2134:	b5f0      	push	{r4, r5, r6, r7, lr}
    2136:	46c6      	mov	lr, r8
    2138:	b500      	push	{lr}
    213a:	0004      	movs	r4, r0
    213c:	000d      	movs	r5, r1
    213e:	0017      	movs	r7, r2
    2140:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    2142:	7903      	ldrb	r3, [r0, #4]
    2144:	7942      	ldrb	r2, [r0, #5]
    2146:	0212      	lsls	r2, r2, #8
    2148:	431a      	orrs	r2, r3
    214a:	7983      	ldrb	r3, [r0, #6]
    214c:	041b      	lsls	r3, r3, #16
    214e:	4313      	orrs	r3, r2
    2150:	79c1      	ldrb	r1, [r0, #7]
    2152:	0609      	lsls	r1, r1, #24
    2154:	4319      	orrs	r1, r3
    2156:	7a00      	ldrb	r0, [r0, #8]
    2158:	4b1b      	ldr	r3, [pc, #108]	; (21c8 <imu_icm20948_read+0x94>)
    215a:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    215c:	2180      	movs	r1, #128	; 0x80
    215e:	4249      	negs	r1, r1
    2160:	4329      	orrs	r1, r5
    2162:	b2c9      	uxtb	r1, r1
    2164:	7823      	ldrb	r3, [r4, #0]
    2166:	7862      	ldrb	r2, [r4, #1]
    2168:	0212      	lsls	r2, r2, #8
    216a:	431a      	orrs	r2, r3
    216c:	78a3      	ldrb	r3, [r4, #2]
    216e:	041b      	lsls	r3, r3, #16
    2170:	4313      	orrs	r3, r2
    2172:	78e0      	ldrb	r0, [r4, #3]
    2174:	0600      	lsls	r0, r0, #24
    2176:	4318      	orrs	r0, r3
    2178:	4b14      	ldr	r3, [pc, #80]	; (21cc <imu_icm20948_read+0x98>)
    217a:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    217c:	2500      	movs	r5, #0
    217e:	e010      	b.n	21a2 <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    2180:	4643      	mov	r3, r8
    2182:	195e      	adds	r6, r3, r5
    2184:	7823      	ldrb	r3, [r4, #0]
    2186:	7862      	ldrb	r2, [r4, #1]
    2188:	0212      	lsls	r2, r2, #8
    218a:	431a      	orrs	r2, r3
    218c:	78a3      	ldrb	r3, [r4, #2]
    218e:	041b      	lsls	r3, r3, #16
    2190:	4313      	orrs	r3, r2
    2192:	78e0      	ldrb	r0, [r4, #3]
    2194:	0600      	lsls	r0, r0, #24
    2196:	4318      	orrs	r0, r3
    2198:	2100      	movs	r1, #0
    219a:	4b0c      	ldr	r3, [pc, #48]	; (21cc <imu_icm20948_read+0x98>)
    219c:	4798      	blx	r3
    219e:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    21a0:	3501      	adds	r5, #1
    21a2:	42bd      	cmp	r5, r7
    21a4:	dbec      	blt.n	2180 <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    21a6:	7923      	ldrb	r3, [r4, #4]
    21a8:	7962      	ldrb	r2, [r4, #5]
    21aa:	0212      	lsls	r2, r2, #8
    21ac:	431a      	orrs	r2, r3
    21ae:	79a3      	ldrb	r3, [r4, #6]
    21b0:	041b      	lsls	r3, r3, #16
    21b2:	4313      	orrs	r3, r2
    21b4:	79e1      	ldrb	r1, [r4, #7]
    21b6:	0609      	lsls	r1, r1, #24
    21b8:	4319      	orrs	r1, r3
    21ba:	7a20      	ldrb	r0, [r4, #8]
    21bc:	4b04      	ldr	r3, [pc, #16]	; (21d0 <imu_icm20948_read+0x9c>)
    21be:	4798      	blx	r3
}
    21c0:	bc80      	pop	{r7}
    21c2:	46b8      	mov	r8, r7
    21c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	000023dd 	.word	0x000023dd
    21cc:	000028b9 	.word	0x000028b9
    21d0:	000023cd 	.word	0x000023cd

000021d4 <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    21d4:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    21d6:	2903      	cmp	r1, #3
    21d8:	d900      	bls.n	21dc <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    21da:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    21dc:	0109      	lsls	r1, r1, #4
    21de:	b2ca      	uxtb	r2, r1
    21e0:	217f      	movs	r1, #127	; 0x7f
    21e2:	4b01      	ldr	r3, [pc, #4]	; (21e8 <imu_icm20948_user_bank+0x14>)
    21e4:	4798      	blx	r3
}
    21e6:	e7f8      	b.n	21da <imu_icm20948_user_bank+0x6>
    21e8:	00001f99 	.word	0x00001f99

000021ec <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    21ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ee:	b083      	sub	sp, #12
    21f0:	0005      	movs	r5, r0
    21f2:	000c      	movs	r4, r1
    21f4:	9200      	str	r2, [sp, #0]
    21f6:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    21f8:	0008      	movs	r0, r1
    21fa:	4b13      	ldr	r3, [pc, #76]	; (2248 <imu_icm20948_init+0x5c>)
    21fc:	4798      	blx	r3
    21fe:	1e06      	subs	r6, r0, #0
    2200:	d102      	bne.n	2208 <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    2202:	0030      	movs	r0, r6
    2204:	b003      	add	sp, #12
    2206:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    2208:	702c      	strb	r4, [r5, #0]
    220a:	0a23      	lsrs	r3, r4, #8
    220c:	706b      	strb	r3, [r5, #1]
    220e:	0c23      	lsrs	r3, r4, #16
    2210:	70ab      	strb	r3, [r5, #2]
    2212:	0e24      	lsrs	r4, r4, #24
    2214:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    2216:	1d28      	adds	r0, r5, #4
    2218:	2205      	movs	r2, #5
    221a:	4669      	mov	r1, sp
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <imu_icm20948_init+0x60>)
    221e:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    2220:	2280      	movs	r2, #128	; 0x80
    2222:	2106      	movs	r1, #6
    2224:	0028      	movs	r0, r5
    2226:	4c0a      	ldr	r4, [pc, #40]	; (2250 <imu_icm20948_init+0x64>)
    2228:	47a0      	blx	r4
	delay_ms(11);
    222a:	480a      	ldr	r0, [pc, #40]	; (2254 <imu_icm20948_init+0x68>)
    222c:	4f0a      	ldr	r7, [pc, #40]	; (2258 <imu_icm20948_init+0x6c>)
    222e:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    2230:	2210      	movs	r2, #16
    2232:	2103      	movs	r1, #3
    2234:	0028      	movs	r0, r5
    2236:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    2238:	2201      	movs	r2, #1
    223a:	2106      	movs	r1, #6
    223c:	0028      	movs	r0, r5
    223e:	47a0      	blx	r4
	delay_us(80);
    2240:	20f0      	movs	r0, #240	; 0xf0
    2242:	0040      	lsls	r0, r0, #1
    2244:	47b8      	blx	r7
	return true;
    2246:	e7dc      	b.n	2202 <imu_icm20948_init+0x16>
    2248:	000026c9 	.word	0x000026c9
    224c:	00005b75 	.word	0x00005b75
    2250:	00001f99 	.word	0x00001f99
    2254:	000101d0 	.word	0x000101d0
    2258:	0000299d 	.word	0x0000299d

0000225c <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    225c:	b510      	push	{r4, lr}
    225e:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    2260:	2100      	movs	r1, #0
    2262:	4b06      	ldr	r3, [pc, #24]	; (227c <imu_icm20948_check+0x20>)
    2264:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    2266:	2100      	movs	r1, #0
    2268:	0020      	movs	r0, r4
    226a:	4b05      	ldr	r3, [pc, #20]	; (2280 <imu_icm20948_check+0x24>)
    226c:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    226e:	28ea      	cmp	r0, #234	; 0xea
    2270:	d001      	beq.n	2276 <imu_icm20948_check+0x1a>
	else return false;
    2272:	2000      	movs	r0, #0
}
    2274:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    2276:	38e9      	subs	r0, #233	; 0xe9
    2278:	e7fc      	b.n	2274 <imu_icm20948_check+0x18>
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	000021d5 	.word	0x000021d5
    2280:	00002019 	.word	0x00002019

00002284 <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    2284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2286:	0004      	movs	r4, r0
    2288:	000f      	movs	r7, r1
    228a:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    228c:	2103      	movs	r1, #3
    228e:	4b0b      	ldr	r3, [pc, #44]	; (22bc <mag_icm20948_write_byte+0x38>)
    2290:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    2292:	220c      	movs	r2, #12
    2294:	2103      	movs	r1, #3
    2296:	0020      	movs	r0, r4
    2298:	4d09      	ldr	r5, [pc, #36]	; (22c0 <mag_icm20948_write_byte+0x3c>)
    229a:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    229c:	003a      	movs	r2, r7
    229e:	2104      	movs	r1, #4
    22a0:	0020      	movs	r0, r4
    22a2:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    22a4:	0032      	movs	r2, r6
    22a6:	2106      	movs	r1, #6
    22a8:	0020      	movs	r0, r4
    22aa:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    22ac:	2281      	movs	r2, #129	; 0x81
    22ae:	2105      	movs	r1, #5
    22b0:	0020      	movs	r0, r4
    22b2:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    22b4:	4803      	ldr	r0, [pc, #12]	; (22c4 <mag_icm20948_write_byte+0x40>)
    22b6:	4b04      	ldr	r3, [pc, #16]	; (22c8 <mag_icm20948_write_byte+0x44>)
    22b8:	4798      	blx	r3
}
    22ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22bc:	000021d5 	.word	0x000021d5
    22c0:	00001f99 	.word	0x00001f99
    22c4:	0000ea60 	.word	0x0000ea60
    22c8:	0000299d 	.word	0x0000299d

000022cc <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    22cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ce:	46c6      	mov	lr, r8
    22d0:	b500      	push	{lr}
    22d2:	b082      	sub	sp, #8
    22d4:	0004      	movs	r4, r0
    22d6:	000f      	movs	r7, r1
    22d8:	0015      	movs	r5, r2
    22da:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    22dc:	2103      	movs	r1, #3
    22de:	4e0f      	ldr	r6, [pc, #60]	; (231c <mag_icm20948_read+0x50>)
    22e0:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    22e2:	ab01      	add	r3, sp, #4
    22e4:	228c      	movs	r2, #140	; 0x8c
    22e6:	701a      	strb	r2, [r3, #0]
    22e8:	705f      	strb	r7, [r3, #1]
    22ea:	3a0d      	subs	r2, #13
    22ec:	3aff      	subs	r2, #255	; 0xff
    22ee:	432a      	orrs	r2, r5
    22f0:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    22f2:	2203      	movs	r2, #3
    22f4:	2103      	movs	r1, #3
    22f6:	0020      	movs	r0, r4
    22f8:	4f09      	ldr	r7, [pc, #36]	; (2320 <mag_icm20948_read+0x54>)
    22fa:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    22fc:	4809      	ldr	r0, [pc, #36]	; (2324 <mag_icm20948_read+0x58>)
    22fe:	4b0a      	ldr	r3, [pc, #40]	; (2328 <mag_icm20948_read+0x5c>)
    2300:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    2302:	2100      	movs	r1, #0
    2304:	0020      	movs	r0, r4
    2306:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    2308:	4643      	mov	r3, r8
    230a:	002a      	movs	r2, r5
    230c:	213b      	movs	r1, #59	; 0x3b
    230e:	0020      	movs	r0, r4
    2310:	4c06      	ldr	r4, [pc, #24]	; (232c <mag_icm20948_read+0x60>)
    2312:	47a0      	blx	r4
}
    2314:	b002      	add	sp, #8
    2316:	bc80      	pop	{r7}
    2318:	46b8      	mov	r8, r7
    231a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    231c:	000021d5 	.word	0x000021d5
    2320:	0000209d 	.word	0x0000209d
    2324:	00001770 	.word	0x00001770
    2328:	0000299d 	.word	0x0000299d
    232c:	00002135 	.word	0x00002135

00002330 <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    2330:	b570      	push	{r4, r5, r6, lr}
    2332:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    2334:	2100      	movs	r1, #0
    2336:	4e10      	ldr	r6, [pc, #64]	; (2378 <mag_icm20948_init+0x48>)
    2338:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    233a:	2220      	movs	r2, #32
    233c:	2103      	movs	r1, #3
    233e:	0020      	movs	r0, r4
    2340:	4d0e      	ldr	r5, [pc, #56]	; (237c <mag_icm20948_init+0x4c>)
    2342:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    2344:	2103      	movs	r1, #3
    2346:	0020      	movs	r0, r4
    2348:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    234a:	2207      	movs	r2, #7
    234c:	2101      	movs	r1, #1
    234e:	0020      	movs	r0, r4
    2350:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    2352:	2201      	movs	r2, #1
    2354:	2102      	movs	r1, #2
    2356:	0020      	movs	r0, r4
    2358:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    235a:	4809      	ldr	r0, [pc, #36]	; (2380 <mag_icm20948_init+0x50>)
    235c:	4b09      	ldr	r3, [pc, #36]	; (2384 <mag_icm20948_init+0x54>)
    235e:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    2360:	2201      	movs	r2, #1
    2362:	2132      	movs	r1, #50	; 0x32
    2364:	0020      	movs	r0, r4
    2366:	4d08      	ldr	r5, [pc, #32]	; (2388 <mag_icm20948_init+0x58>)
    2368:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    236a:	2208      	movs	r2, #8
    236c:	2131      	movs	r1, #49	; 0x31
    236e:	0020      	movs	r0, r4
    2370:	47a8      	blx	r5
	
	return true;
}
    2372:	2001      	movs	r0, #1
    2374:	bd70      	pop	{r4, r5, r6, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	000021d5 	.word	0x000021d5
    237c:	00001f99 	.word	0x00001f99
    2380:	00001770 	.word	0x00001770
    2384:	0000299d 	.word	0x0000299d
    2388:	00002285 	.word	0x00002285

0000238c <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    238c:	b530      	push	{r4, r5, lr}
    238e:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    2390:	ac01      	add	r4, sp, #4
    2392:	0023      	movs	r3, r4
    2394:	2202      	movs	r2, #2
    2396:	2100      	movs	r1, #0
    2398:	4d07      	ldr	r5, [pc, #28]	; (23b8 <mag_icm20948_check+0x2c>)
    239a:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    239c:	7823      	ldrb	r3, [r4, #0]
    239e:	2b48      	cmp	r3, #72	; 0x48
    23a0:	d104      	bne.n	23ac <mag_icm20948_check+0x20>
    23a2:	7863      	ldrb	r3, [r4, #1]
    23a4:	2b09      	cmp	r3, #9
    23a6:	d004      	beq.n	23b2 <mag_icm20948_check+0x26>
	else return false;
    23a8:	2000      	movs	r0, #0
    23aa:	e000      	b.n	23ae <mag_icm20948_check+0x22>
    23ac:	2000      	movs	r0, #0
    23ae:	b003      	add	sp, #12
    23b0:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    23b2:	2001      	movs	r0, #1
    23b4:	e7fb      	b.n	23ae <mag_icm20948_check+0x22>
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	000022cd 	.word	0x000022cd

000023bc <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    23bc:	01c0      	lsls	r0, r0, #7
    23be:	4b02      	ldr	r3, [pc, #8]	; (23c8 <port_set_output+0xc>)
    23c0:	469c      	mov	ip, r3
    23c2:	4460      	add	r0, ip
    23c4:	6081      	str	r1, [r0, #8]
}
    23c6:	4770      	bx	lr
    23c8:	41004400 	.word	0x41004400

000023cc <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    23cc:	01c0      	lsls	r0, r0, #7
    23ce:	4b02      	ldr	r3, [pc, #8]	; (23d8 <port_set+0xc>)
    23d0:	469c      	mov	ip, r3
    23d2:	4460      	add	r0, ip
    23d4:	6181      	str	r1, [r0, #24]
}
    23d6:	4770      	bx	lr
    23d8:	41004400 	.word	0x41004400

000023dc <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    23dc:	01c0      	lsls	r0, r0, #7
    23de:	4b02      	ldr	r3, [pc, #8]	; (23e8 <port_clear+0xc>)
    23e0:	469c      	mov	ip, r3
    23e2:	4460      	add	r0, ip
    23e4:	6141      	str	r1, [r0, #20]
}
    23e6:	4770      	bx	lr
    23e8:	41004400 	.word	0x41004400

000023ec <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    23ec:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    23ee:	060b      	lsls	r3, r1, #24
    23f0:	21f0      	movs	r1, #240	; 0xf0
    23f2:	0509      	lsls	r1, r1, #20
    23f4:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    23f6:	490e      	ldr	r1, [pc, #56]	; (2430 <port_wrconfig+0x44>)
    23f8:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    23fa:	0413      	lsls	r3, r2, #16
    23fc:	0c1c      	lsrs	r4, r3, #16
    23fe:	2b00      	cmp	r3, #0
    2400:	d005      	beq.n	240e <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    2402:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    2404:	01c3      	lsls	r3, r0, #7
    2406:	4c0b      	ldr	r4, [pc, #44]	; (2434 <port_wrconfig+0x48>)
    2408:	46a4      	mov	ip, r4
    240a:	4463      	add	r3, ip
    240c:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    240e:	2380      	movs	r3, #128	; 0x80
    2410:	025b      	lsls	r3, r3, #9
    2412:	429a      	cmp	r2, r3
    2414:	d30b      	bcc.n	242e <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    2416:	0c09      	lsrs	r1, r1, #16
    2418:	0409      	lsls	r1, r1, #16
    241a:	2380      	movs	r3, #128	; 0x80
    241c:	061b      	lsls	r3, r3, #24
    241e:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    2420:	0c12      	lsrs	r2, r2, #16
    2422:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    2424:	01c0      	lsls	r0, r0, #7
    2426:	4b03      	ldr	r3, [pc, #12]	; (2434 <port_wrconfig+0x48>)
    2428:	469c      	mov	ip, r3
    242a:	4460      	add	r0, ip
    242c:	6282      	str	r2, [r0, #40]	; 0x28
	}
    242e:	bd10      	pop	{r4, pc}
    2430:	50010000 	.word	0x50010000
    2434:	41004400 	.word	0x41004400

00002438 <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    2438:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    243a:	4c2a      	ldr	r4, [pc, #168]	; (24e4 <pwm_init_tc+0xac>)
    243c:	42a0      	cmp	r0, r4
    243e:	d03c      	beq.n	24ba <pwm_init_tc+0x82>
    2440:	d90f      	bls.n	2462 <pwm_init_tc+0x2a>
    2442:	4c29      	ldr	r4, [pc, #164]	; (24e8 <pwm_init_tc+0xb0>)
    2444:	42a0      	cmp	r0, r4
    2446:	d042      	beq.n	24ce <pwm_init_tc+0x96>
    2448:	4c28      	ldr	r4, [pc, #160]	; (24ec <pwm_init_tc+0xb4>)
    244a:	42a0      	cmp	r0, r4
    244c:	d11b      	bne.n	2486 <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    244e:	4a28      	ldr	r2, [pc, #160]	; (24f0 <pwm_init_tc+0xb8>)
    2450:	6a14      	ldr	r4, [r2, #32]
    2452:	2380      	movs	r3, #128	; 0x80
    2454:	021b      	lsls	r3, r3, #8
    2456:	4323      	orrs	r3, r4
    2458:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    245a:	4b26      	ldr	r3, [pc, #152]	; (24f4 <pwm_init_tc+0xbc>)
    245c:	4a26      	ldr	r2, [pc, #152]	; (24f8 <pwm_init_tc+0xc0>)
    245e:	805a      	strh	r2, [r3, #2]
		break;
    2460:	e01c      	b.n	249c <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    2462:	4c26      	ldr	r4, [pc, #152]	; (24fc <pwm_init_tc+0xc4>)
    2464:	42a0      	cmp	r0, r4
    2466:	d010      	beq.n	248a <pwm_init_tc+0x52>
    2468:	4c25      	ldr	r4, [pc, #148]	; (2500 <pwm_init_tc+0xc8>)
    246a:	42a0      	cmp	r0, r4
    246c:	d109      	bne.n	2482 <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    246e:	4a20      	ldr	r2, [pc, #128]	; (24f0 <pwm_init_tc+0xb8>)
    2470:	6a14      	ldr	r4, [r2, #32]
    2472:	2380      	movs	r3, #128	; 0x80
    2474:	015b      	lsls	r3, r3, #5
    2476:	4323      	orrs	r3, r4
    2478:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    247a:	4b1e      	ldr	r3, [pc, #120]	; (24f4 <pwm_init_tc+0xbc>)
    247c:	4a21      	ldr	r2, [pc, #132]	; (2504 <pwm_init_tc+0xcc>)
    247e:	805a      	strh	r2, [r3, #2]
		break;
    2480:	e00c      	b.n	249c <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    2482:	2000      	movs	r0, #0
    2484:	e018      	b.n	24b8 <pwm_init_tc+0x80>
    2486:	2000      	movs	r0, #0
    2488:	e016      	b.n	24b8 <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    248a:	4a19      	ldr	r2, [pc, #100]	; (24f0 <pwm_init_tc+0xb8>)
    248c:	6a14      	ldr	r4, [r2, #32]
    248e:	2380      	movs	r3, #128	; 0x80
    2490:	011b      	lsls	r3, r3, #4
    2492:	4323      	orrs	r3, r4
    2494:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    2496:	4b17      	ldr	r3, [pc, #92]	; (24f4 <pwm_init_tc+0xbc>)
    2498:	4a1b      	ldr	r2, [pc, #108]	; (2508 <pwm_init_tc+0xd0>)
    249a:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    249c:	4b15      	ldr	r3, [pc, #84]	; (24f4 <pwm_init_tc+0xbc>)
    249e:	785b      	ldrb	r3, [r3, #1]
    24a0:	b25b      	sxtb	r3, r3
    24a2:	2b00      	cmp	r3, #0
    24a4:	dbfa      	blt.n	249c <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    24a6:	020b      	lsls	r3, r1, #8
    24a8:	22e0      	movs	r2, #224	; 0xe0
    24aa:	00d2      	lsls	r2, r2, #3
    24ac:	4013      	ands	r3, r2
    24ae:	2244      	movs	r2, #68	; 0x44
    24b0:	4313      	orrs	r3, r2
    24b2:	b29b      	uxth	r3, r3
    24b4:	8003      	strh	r3, [r0, #0]
	
	return true;
    24b6:	2001      	movs	r0, #1
}
    24b8:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    24ba:	4a0d      	ldr	r2, [pc, #52]	; (24f0 <pwm_init_tc+0xb8>)
    24bc:	6a14      	ldr	r4, [r2, #32]
    24be:	2380      	movs	r3, #128	; 0x80
    24c0:	019b      	lsls	r3, r3, #6
    24c2:	4323      	orrs	r3, r4
    24c4:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    24c6:	4b0b      	ldr	r3, [pc, #44]	; (24f4 <pwm_init_tc+0xbc>)
    24c8:	4a0e      	ldr	r2, [pc, #56]	; (2504 <pwm_init_tc+0xcc>)
    24ca:	805a      	strh	r2, [r3, #2]
		break;
    24cc:	e7e6      	b.n	249c <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    24ce:	4a08      	ldr	r2, [pc, #32]	; (24f0 <pwm_init_tc+0xb8>)
    24d0:	6a14      	ldr	r4, [r2, #32]
    24d2:	2380      	movs	r3, #128	; 0x80
    24d4:	01db      	lsls	r3, r3, #7
    24d6:	4323      	orrs	r3, r4
    24d8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    24da:	4b06      	ldr	r3, [pc, #24]	; (24f4 <pwm_init_tc+0xbc>)
    24dc:	4a06      	ldr	r2, [pc, #24]	; (24f8 <pwm_init_tc+0xc0>)
    24de:	805a      	strh	r2, [r3, #2]
		break;
    24e0:	e7dc      	b.n	249c <pwm_init_tc+0x64>
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	42003400 	.word	0x42003400
    24e8:	42003800 	.word	0x42003800
    24ec:	42003c00 	.word	0x42003c00
    24f0:	40000400 	.word	0x40000400
    24f4:	40000c00 	.word	0x40000c00
    24f8:	0000401d 	.word	0x0000401d
    24fc:	42002c00 	.word	0x42002c00
    2500:	42003000 	.word	0x42003000
    2504:	0000401c 	.word	0x0000401c
    2508:	0000401b 	.word	0x0000401b

0000250c <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    250c:	4a0f      	ldr	r2, [pc, #60]	; (254c <pwm_enable_tc+0x40>)
    250e:	4290      	cmp	r0, r2
    2510:	d010      	beq.n	2534 <pwm_enable_tc+0x28>
    2512:	d807      	bhi.n	2524 <pwm_enable_tc+0x18>
    2514:	4a0e      	ldr	r2, [pc, #56]	; (2550 <pwm_enable_tc+0x44>)
    2516:	4290      	cmp	r0, r2
    2518:	d00c      	beq.n	2534 <pwm_enable_tc+0x28>
    251a:	4a0e      	ldr	r2, [pc, #56]	; (2554 <pwm_enable_tc+0x48>)
    251c:	4290      	cmp	r0, r2
    251e:	d009      	beq.n	2534 <pwm_enable_tc+0x28>
    2520:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    2522:	4770      	bx	lr
	switch ((uint32_t)tc) {
    2524:	4a0c      	ldr	r2, [pc, #48]	; (2558 <pwm_enable_tc+0x4c>)
    2526:	4290      	cmp	r0, r2
    2528:	d004      	beq.n	2534 <pwm_enable_tc+0x28>
    252a:	4a0c      	ldr	r2, [pc, #48]	; (255c <pwm_enable_tc+0x50>)
    252c:	4290      	cmp	r0, r2
    252e:	d001      	beq.n	2534 <pwm_enable_tc+0x28>
    2530:	2000      	movs	r0, #0
    2532:	e7f6      	b.n	2522 <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    2534:	8803      	ldrh	r3, [r0, #0]
    2536:	2202      	movs	r2, #2
    2538:	4313      	orrs	r3, r2
    253a:	b29b      	uxth	r3, r3
    253c:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    253e:	7bc3      	ldrb	r3, [r0, #15]
    2540:	b25b      	sxtb	r3, r3
    2542:	2b00      	cmp	r3, #0
    2544:	dbfb      	blt.n	253e <pwm_enable_tc+0x32>
	return true;
    2546:	2001      	movs	r0, #1
    2548:	e7eb      	b.n	2522 <pwm_enable_tc+0x16>
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	42003400 	.word	0x42003400
    2550:	42002c00 	.word	0x42002c00
    2554:	42003000 	.word	0x42003000
    2558:	42003800 	.word	0x42003800
    255c:	42003c00 	.word	0x42003c00

00002560 <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    2560:	2307      	movs	r3, #7
    2562:	4018      	ands	r0, r3
	switch (prescaler) {
    2564:	2807      	cmp	r0, #7
    2566:	d813      	bhi.n	2590 <pwm_get_div_val+0x30>
    2568:	0080      	lsls	r0, r0, #2
    256a:	4b0b      	ldr	r3, [pc, #44]	; (2598 <pwm_get_div_val+0x38>)
    256c:	581b      	ldr	r3, [r3, r0]
    256e:	469f      	mov	pc, r3
    2570:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    2572:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    2574:	2004      	movs	r0, #4
    2576:	e7fc      	b.n	2572 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    2578:	2008      	movs	r0, #8
    257a:	e7fa      	b.n	2572 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    257c:	2010      	movs	r0, #16
    257e:	e7f8      	b.n	2572 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    2580:	2040      	movs	r0, #64	; 0x40
    2582:	e7f6      	b.n	2572 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    2584:	2080      	movs	r0, #128	; 0x80
    2586:	0040      	lsls	r0, r0, #1
    2588:	e7f3      	b.n	2572 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    258a:	2080      	movs	r0, #128	; 0x80
    258c:	00c0      	lsls	r0, r0, #3
    258e:	e7f0      	b.n	2572 <pwm_get_div_val+0x12>
	return 0;
    2590:	2000      	movs	r0, #0
    2592:	e7ee      	b.n	2572 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    2594:	2002      	movs	r0, #2
    2596:	e7ec      	b.n	2572 <pwm_get_div_val+0x12>
    2598:	000062b4 	.word	0x000062b4

0000259c <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    259c:	b570      	push	{r4, r5, r6, lr}
    259e:	0004      	movs	r4, r0
    25a0:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    25a2:	4a16      	ldr	r2, [pc, #88]	; (25fc <pwm_set_frequency_tc+0x60>)
    25a4:	4290      	cmp	r0, r2
    25a6:	d010      	beq.n	25ca <pwm_set_frequency_tc+0x2e>
    25a8:	d807      	bhi.n	25ba <pwm_set_frequency_tc+0x1e>
    25aa:	4a15      	ldr	r2, [pc, #84]	; (2600 <pwm_set_frequency_tc+0x64>)
    25ac:	4290      	cmp	r0, r2
    25ae:	d00c      	beq.n	25ca <pwm_set_frequency_tc+0x2e>
    25b0:	4a14      	ldr	r2, [pc, #80]	; (2604 <pwm_set_frequency_tc+0x68>)
    25b2:	4290      	cmp	r0, r2
    25b4:	d009      	beq.n	25ca <pwm_set_frequency_tc+0x2e>
    25b6:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    25b8:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    25ba:	4a13      	ldr	r2, [pc, #76]	; (2608 <pwm_set_frequency_tc+0x6c>)
    25bc:	4290      	cmp	r0, r2
    25be:	d004      	beq.n	25ca <pwm_set_frequency_tc+0x2e>
    25c0:	4a12      	ldr	r2, [pc, #72]	; (260c <pwm_set_frequency_tc+0x70>)
    25c2:	4290      	cmp	r0, r2
    25c4:	d001      	beq.n	25ca <pwm_set_frequency_tc+0x2e>
    25c6:	2000      	movs	r0, #0
    25c8:	e7f6      	b.n	25b8 <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    25ca:	8823      	ldrh	r3, [r4, #0]
    25cc:	0a1b      	lsrs	r3, r3, #8
    25ce:	2007      	movs	r0, #7
    25d0:	4018      	ands	r0, r3
    25d2:	4b0f      	ldr	r3, [pc, #60]	; (2610 <pwm_set_frequency_tc+0x74>)
    25d4:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    25d6:	4b0f      	ldr	r3, [pc, #60]	; (2614 <pwm_set_frequency_tc+0x78>)
    25d8:	4798      	blx	r3
    25da:	4b0f      	ldr	r3, [pc, #60]	; (2618 <pwm_set_frequency_tc+0x7c>)
    25dc:	1c29      	adds	r1, r5, #0
    25de:	4798      	blx	r3
    25e0:	1c01      	adds	r1, r0, #0
    25e2:	4b0e      	ldr	r3, [pc, #56]	; (261c <pwm_set_frequency_tc+0x80>)
    25e4:	480e      	ldr	r0, [pc, #56]	; (2620 <pwm_set_frequency_tc+0x84>)
    25e6:	4798      	blx	r3
    25e8:	4b0e      	ldr	r3, [pc, #56]	; (2624 <pwm_set_frequency_tc+0x88>)
    25ea:	4798      	blx	r3
	if (per > 0xFF) return false;
    25ec:	28ff      	cmp	r0, #255	; 0xff
    25ee:	d803      	bhi.n	25f8 <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    25f0:	b2c0      	uxtb	r0, r0
    25f2:	7520      	strb	r0, [r4, #20]
	return true;
    25f4:	2001      	movs	r0, #1
    25f6:	e7df      	b.n	25b8 <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    25f8:	2000      	movs	r0, #0
    25fa:	e7dd      	b.n	25b8 <pwm_set_frequency_tc+0x1c>
    25fc:	42003400 	.word	0x42003400
    2600:	42002c00 	.word	0x42002c00
    2604:	42003000 	.word	0x42003000
    2608:	42003800 	.word	0x42003800
    260c:	42003c00 	.word	0x42003c00
    2610:	00002561 	.word	0x00002561
    2614:	00005925 	.word	0x00005925
    2618:	00005345 	.word	0x00005345
    261c:	00004f79 	.word	0x00004f79
    2620:	4c371b00 	.word	0x4c371b00
    2624:	00004c45 	.word	0x00004c45

00002628 <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    2628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    262a:	0004      	movs	r4, r0
    262c:	000e      	movs	r6, r1
    262e:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    2630:	4a1b      	ldr	r2, [pc, #108]	; (26a0 <pwm_set_duty_tc+0x78>)
    2632:	4290      	cmp	r0, r2
    2634:	d010      	beq.n	2658 <pwm_set_duty_tc+0x30>
    2636:	d807      	bhi.n	2648 <pwm_set_duty_tc+0x20>
    2638:	4a1a      	ldr	r2, [pc, #104]	; (26a4 <pwm_set_duty_tc+0x7c>)
    263a:	4290      	cmp	r0, r2
    263c:	d00c      	beq.n	2658 <pwm_set_duty_tc+0x30>
    263e:	4a1a      	ldr	r2, [pc, #104]	; (26a8 <pwm_set_duty_tc+0x80>)
    2640:	4290      	cmp	r0, r2
    2642:	d009      	beq.n	2658 <pwm_set_duty_tc+0x30>
    2644:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    2646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    2648:	4a18      	ldr	r2, [pc, #96]	; (26ac <pwm_set_duty_tc+0x84>)
    264a:	4290      	cmp	r0, r2
    264c:	d004      	beq.n	2658 <pwm_set_duty_tc+0x30>
    264e:	4a18      	ldr	r2, [pc, #96]	; (26b0 <pwm_set_duty_tc+0x88>)
    2650:	4290      	cmp	r0, r2
    2652:	d001      	beq.n	2658 <pwm_set_duty_tc+0x30>
    2654:	2000      	movs	r0, #0
    2656:	e7f6      	b.n	2646 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    2658:	4b16      	ldr	r3, [pc, #88]	; (26b4 <pwm_set_duty_tc+0x8c>)
    265a:	2100      	movs	r1, #0
    265c:	1c28      	adds	r0, r5, #0
    265e:	4798      	blx	r3
    2660:	2800      	cmp	r0, #0
    2662:	d11b      	bne.n	269c <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    2664:	4b14      	ldr	r3, [pc, #80]	; (26b8 <pwm_set_duty_tc+0x90>)
    2666:	21fe      	movs	r1, #254	; 0xfe
    2668:	0589      	lsls	r1, r1, #22
    266a:	1c28      	adds	r0, r5, #0
    266c:	4798      	blx	r3
    266e:	2800      	cmp	r0, #0
    2670:	d001      	beq.n	2676 <pwm_set_duty_tc+0x4e>
    2672:	25fe      	movs	r5, #254	; 0xfe
    2674:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    2676:	7d27      	ldrb	r7, [r4, #20]
    2678:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    267a:	4b10      	ldr	r3, [pc, #64]	; (26bc <pwm_set_duty_tc+0x94>)
    267c:	0038      	movs	r0, r7
    267e:	4798      	blx	r3
    2680:	4b0f      	ldr	r3, [pc, #60]	; (26c0 <pwm_set_duty_tc+0x98>)
    2682:	1c29      	adds	r1, r5, #0
    2684:	4798      	blx	r3
    2686:	4b0f      	ldr	r3, [pc, #60]	; (26c4 <pwm_set_duty_tc+0x9c>)
    2688:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    268a:	003b      	movs	r3, r7
    268c:	4287      	cmp	r7, r0
    268e:	d300      	bcc.n	2692 <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    2690:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    2692:	b2db      	uxtb	r3, r3
    2694:	19a4      	adds	r4, r4, r6
    2696:	7623      	strb	r3, [r4, #24]
	return true;
    2698:	2001      	movs	r0, #1
    269a:	e7d4      	b.n	2646 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    269c:	2500      	movs	r5, #0
    269e:	e7e1      	b.n	2664 <pwm_set_duty_tc+0x3c>
    26a0:	42003400 	.word	0x42003400
    26a4:	42002c00 	.word	0x42002c00
    26a8:	42003000 	.word	0x42003000
    26ac:	42003800 	.word	0x42003800
    26b0:	42003c00 	.word	0x42003c00
    26b4:	00004b99 	.word	0x00004b99
    26b8:	00004bc1 	.word	0x00004bc1
    26bc:	00005925 	.word	0x00005925
    26c0:	00005345 	.word	0x00005345
    26c4:	00004c45 	.word	0x00004c45

000026c8 <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    26c8:	4b11      	ldr	r3, [pc, #68]	; (2710 <sercom_check+0x48>)
    26ca:	4298      	cmp	r0, r3
    26cc:	d017      	beq.n	26fe <sercom_check+0x36>
    26ce:	d80c      	bhi.n	26ea <sercom_check+0x22>
    26d0:	4b10      	ldr	r3, [pc, #64]	; (2714 <sercom_check+0x4c>)
    26d2:	4298      	cmp	r0, r3
    26d4:	d015      	beq.n	2702 <sercom_check+0x3a>
    26d6:	4b10      	ldr	r3, [pc, #64]	; (2718 <sercom_check+0x50>)
    26d8:	4298      	cmp	r0, r3
    26da:	d014      	beq.n	2706 <sercom_check+0x3e>
    26dc:	4b0f      	ldr	r3, [pc, #60]	; (271c <sercom_check+0x54>)
    26de:	4298      	cmp	r0, r3
    26e0:	d001      	beq.n	26e6 <sercom_check+0x1e>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    26e2:	2000      	movs	r0, #0
		break;
	}
}
    26e4:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    26e6:	2001      	movs	r0, #1
    26e8:	e7fc      	b.n	26e4 <sercom_check+0x1c>
    26ea:	4b0d      	ldr	r3, [pc, #52]	; (2720 <sercom_check+0x58>)
    26ec:	4298      	cmp	r0, r3
    26ee:	d00c      	beq.n	270a <sercom_check+0x42>
    26f0:	4b0c      	ldr	r3, [pc, #48]	; (2724 <sercom_check+0x5c>)
    26f2:	4298      	cmp	r0, r3
    26f4:	d001      	beq.n	26fa <sercom_check+0x32>
		return false;
    26f6:	2000      	movs	r0, #0
    26f8:	e7f4      	b.n	26e4 <sercom_check+0x1c>
	switch ((uint32_t)sercom) {
    26fa:	2001      	movs	r0, #1
    26fc:	e7f2      	b.n	26e4 <sercom_check+0x1c>
    26fe:	2001      	movs	r0, #1
    2700:	e7f0      	b.n	26e4 <sercom_check+0x1c>
    2702:	2001      	movs	r0, #1
    2704:	e7ee      	b.n	26e4 <sercom_check+0x1c>
    2706:	2001      	movs	r0, #1
    2708:	e7ec      	b.n	26e4 <sercom_check+0x1c>
    270a:	2001      	movs	r0, #1
    270c:	e7ea      	b.n	26e4 <sercom_check+0x1c>
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	42001400 	.word	0x42001400
    2714:	42000c00 	.word	0x42000c00
    2718:	42001000 	.word	0x42001000
    271c:	42000800 	.word	0x42000800
    2720:	42001800 	.word	0x42001800
    2724:	42001c00 	.word	0x42001c00

00002728 <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    2728:	4b29      	ldr	r3, [pc, #164]	; (27d0 <sercom_init+0xa8>)
    272a:	4298      	cmp	r0, r3
    272c:	d03d      	beq.n	27aa <sercom_init+0x82>
    272e:	d822      	bhi.n	2776 <sercom_init+0x4e>
    2730:	4b28      	ldr	r3, [pc, #160]	; (27d4 <sercom_init+0xac>)
    2732:	4298      	cmp	r0, r3
    2734:	d030      	beq.n	2798 <sercom_init+0x70>
    2736:	4b28      	ldr	r3, [pc, #160]	; (27d8 <sercom_init+0xb0>)
    2738:	4298      	cmp	r0, r3
    273a:	d108      	bne.n	274e <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    273c:	4a27      	ldr	r2, [pc, #156]	; (27dc <sercom_init+0xb4>)
    273e:	6a13      	ldr	r3, [r2, #32]
    2740:	2110      	movs	r1, #16
    2742:	430b      	orrs	r3, r1
    2744:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    2746:	4b26      	ldr	r3, [pc, #152]	; (27e0 <sercom_init+0xb8>)
    2748:	4a26      	ldr	r2, [pc, #152]	; (27e4 <sercom_init+0xbc>)
    274a:	805a      	strh	r2, [r3, #2]
		break;
    274c:	e00a      	b.n	2764 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    274e:	4b26      	ldr	r3, [pc, #152]	; (27e8 <sercom_init+0xc0>)
    2750:	4298      	cmp	r0, r3
    2752:	d10e      	bne.n	2772 <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    2754:	4a21      	ldr	r2, [pc, #132]	; (27dc <sercom_init+0xb4>)
    2756:	6a13      	ldr	r3, [r2, #32]
    2758:	2104      	movs	r1, #4
    275a:	430b      	orrs	r3, r1
    275c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    275e:	4b20      	ldr	r3, [pc, #128]	; (27e0 <sercom_init+0xb8>)
    2760:	4a22      	ldr	r2, [pc, #136]	; (27ec <sercom_init+0xc4>)
    2762:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2764:	4b1e      	ldr	r3, [pc, #120]	; (27e0 <sercom_init+0xb8>)
    2766:	785b      	ldrb	r3, [r3, #1]
    2768:	b25b      	sxtb	r3, r3
    276a:	2b00      	cmp	r3, #0
    276c:	dbfa      	blt.n	2764 <sercom_init+0x3c>
	
	return true;
    276e:	2001      	movs	r0, #1
    2770:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    2772:	2000      	movs	r0, #0
    2774:	e7fc      	b.n	2770 <sercom_init+0x48>
    2776:	4b1e      	ldr	r3, [pc, #120]	; (27f0 <sercom_init+0xc8>)
    2778:	4298      	cmp	r0, r3
    277a:	d01f      	beq.n	27bc <sercom_init+0x94>
    277c:	4b1d      	ldr	r3, [pc, #116]	; (27f4 <sercom_init+0xcc>)
    277e:	4298      	cmp	r0, r3
    2780:	d108      	bne.n	2794 <sercom_init+0x6c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    2782:	4a16      	ldr	r2, [pc, #88]	; (27dc <sercom_init+0xb4>)
    2784:	6a13      	ldr	r3, [r2, #32]
    2786:	2180      	movs	r1, #128	; 0x80
    2788:	430b      	orrs	r3, r1
    278a:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    278c:	4b14      	ldr	r3, [pc, #80]	; (27e0 <sercom_init+0xb8>)
    278e:	4a1a      	ldr	r2, [pc, #104]	; (27f8 <sercom_init+0xd0>)
    2790:	805a      	strh	r2, [r3, #2]
		break;
    2792:	e7e7      	b.n	2764 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    2794:	2000      	movs	r0, #0
    2796:	e7eb      	b.n	2770 <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    2798:	4a10      	ldr	r2, [pc, #64]	; (27dc <sercom_init+0xb4>)
    279a:	6a13      	ldr	r3, [r2, #32]
    279c:	2108      	movs	r1, #8
    279e:	430b      	orrs	r3, r1
    27a0:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    27a2:	4b0f      	ldr	r3, [pc, #60]	; (27e0 <sercom_init+0xb8>)
    27a4:	4a15      	ldr	r2, [pc, #84]	; (27fc <sercom_init+0xd4>)
    27a6:	805a      	strh	r2, [r3, #2]
		break;
    27a8:	e7dc      	b.n	2764 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    27aa:	4a0c      	ldr	r2, [pc, #48]	; (27dc <sercom_init+0xb4>)
    27ac:	6a13      	ldr	r3, [r2, #32]
    27ae:	2120      	movs	r1, #32
    27b0:	430b      	orrs	r3, r1
    27b2:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    27b4:	4b0a      	ldr	r3, [pc, #40]	; (27e0 <sercom_init+0xb8>)
    27b6:	4a12      	ldr	r2, [pc, #72]	; (2800 <sercom_init+0xd8>)
    27b8:	805a      	strh	r2, [r3, #2]
		break;
    27ba:	e7d3      	b.n	2764 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    27bc:	4a07      	ldr	r2, [pc, #28]	; (27dc <sercom_init+0xb4>)
    27be:	6a13      	ldr	r3, [r2, #32]
    27c0:	2140      	movs	r1, #64	; 0x40
    27c2:	430b      	orrs	r3, r1
    27c4:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    27c6:	4b06      	ldr	r3, [pc, #24]	; (27e0 <sercom_init+0xb8>)
    27c8:	4a0e      	ldr	r2, [pc, #56]	; (2804 <sercom_init+0xdc>)
    27ca:	805a      	strh	r2, [r3, #2]
		break;
    27cc:	e7ca      	b.n	2764 <sercom_init+0x3c>
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	42001400 	.word	0x42001400
    27d4:	42000c00 	.word	0x42000c00
    27d8:	42001000 	.word	0x42001000
    27dc:	40000400 	.word	0x40000400
    27e0:	40000c00 	.word	0x40000c00
    27e4:	00004016 	.word	0x00004016
    27e8:	42000800 	.word	0x42000800
    27ec:	00004014 	.word	0x00004014
    27f0:	42001800 	.word	0x42001800
    27f4:	42001c00 	.word	0x42001c00
    27f8:	00004019 	.word	0x00004019
    27fc:	00004015 	.word	0x00004015
    2800:	00004017 	.word	0x00004017
    2804:	00004018 	.word	0x00004018

00002808 <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2808:	b570      	push	{r4, r5, r6, lr}
    280a:	0006      	movs	r6, r0
    280c:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    280e:	4b0a      	ldr	r3, [pc, #40]	; (2838 <spi_set_baud+0x30>)
    2810:	4798      	blx	r3
    2812:	1e04      	subs	r4, r0, #0
    2814:	d00e      	beq.n	2834 <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    2816:	0068      	lsls	r0, r5, #1
    2818:	4b08      	ldr	r3, [pc, #32]	; (283c <spi_set_baud+0x34>)
    281a:	4798      	blx	r3
    281c:	1c01      	adds	r1, r0, #0
    281e:	4b08      	ldr	r3, [pc, #32]	; (2840 <spi_set_baud+0x38>)
    2820:	4808      	ldr	r0, [pc, #32]	; (2844 <spi_set_baud+0x3c>)
    2822:	4798      	blx	r3
    2824:	4b08      	ldr	r3, [pc, #32]	; (2848 <spi_set_baud+0x40>)
    2826:	21fe      	movs	r1, #254	; 0xfe
    2828:	0589      	lsls	r1, r1, #22
    282a:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    282c:	4b07      	ldr	r3, [pc, #28]	; (284c <spi_set_baud+0x44>)
    282e:	4798      	blx	r3
    2830:	b2c0      	uxtb	r0, r0
    2832:	7330      	strb	r0, [r6, #12]
	return true;
}
    2834:	0020      	movs	r0, r4
    2836:	bd70      	pop	{r4, r5, r6, pc}
    2838:	000026c9 	.word	0x000026c9
    283c:	000059bd 	.word	0x000059bd
    2840:	00004f79 	.word	0x00004f79
    2844:	4c371b00 	.word	0x4c371b00
    2848:	000055c1 	.word	0x000055c1
    284c:	00004c45 	.word	0x00004c45

00002850 <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    2850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2852:	46ce      	mov	lr, r9
    2854:	4647      	mov	r7, r8
    2856:	b580      	push	{r7, lr}
    2858:	0004      	movs	r4, r0
    285a:	000d      	movs	r5, r1
    285c:	0017      	movs	r7, r2
    285e:	001e      	movs	r6, r3
    2860:	ab08      	add	r3, sp, #32
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    2866:	4b12      	ldr	r3, [pc, #72]	; (28b0 <spi_init+0x60>)
    2868:	4798      	blx	r3
    286a:	4680      	mov	r8, r0
    286c:	2800      	cmp	r0, #0
    286e:	d104      	bne.n	287a <spi_init+0x2a>
}
    2870:	4640      	mov	r0, r8
    2872:	bcc0      	pop	{r6, r7}
    2874:	46b9      	mov	r9, r7
    2876:	46b0      	mov	r8, r6
    2878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    287a:	076d      	lsls	r5, r5, #29
    287c:	073f      	lsls	r7, r7, #28
    287e:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2880:	0536      	lsls	r6, r6, #20
    2882:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    2884:	464b      	mov	r3, r9
    2886:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2888:	431d      	orrs	r5, r3
    288a:	230c      	movs	r3, #12
    288c:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    288e:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    2890:	2380      	movs	r3, #128	; 0x80
    2892:	029b      	lsls	r3, r3, #10
    2894:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    2896:	9909      	ldr	r1, [sp, #36]	; 0x24
    2898:	0020      	movs	r0, r4
    289a:	4b06      	ldr	r3, [pc, #24]	; (28b4 <spi_init+0x64>)
    289c:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    289e:	6823      	ldr	r3, [r4, #0]
    28a0:	2202      	movs	r2, #2
    28a2:	4313      	orrs	r3, r2
    28a4:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    28a6:	69e3      	ldr	r3, [r4, #28]
    28a8:	079b      	lsls	r3, r3, #30
    28aa:	d4fc      	bmi.n	28a6 <spi_init+0x56>
    28ac:	e7e0      	b.n	2870 <spi_init+0x20>
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	00002729 	.word	0x00002729
    28b4:	00002809 	.word	0x00002809

000028b8 <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    28b8:	7e03      	ldrb	r3, [r0, #24]
    28ba:	07db      	lsls	r3, r3, #31
    28bc:	d5fc      	bpl.n	28b8 <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    28be:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    28c0:	7e03      	ldrb	r3, [r0, #24]
    28c2:	079b      	lsls	r3, r3, #30
    28c4:	d5fc      	bpl.n	28c0 <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    28c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    28c8:	b2c0      	uxtb	r0, r0
}
    28ca:	4770      	bx	lr

000028cc <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    28cc:	e000      	b.n	28d0 <spi_flush+0x4>
    28ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
    28d0:	7e03      	ldrb	r3, [r0, #24]
    28d2:	075b      	lsls	r3, r3, #29
    28d4:	d4fb      	bmi.n	28ce <spi_flush+0x2>
    28d6:	4770      	bx	lr

000028d8 <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    28d8:	4a27      	ldr	r2, [pc, #156]	; (2978 <set_clock_48m+0xa0>)
    28da:	6853      	ldr	r3, [r2, #4]
    28dc:	2102      	movs	r1, #2
    28de:	430b      	orrs	r3, r1
    28e0:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    28e2:	4a26      	ldr	r2, [pc, #152]	; (297c <set_clock_48m+0xa4>)
    28e4:	4b26      	ldr	r3, [pc, #152]	; (2980 <set_clock_48m+0xa8>)
    28e6:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    28e8:	8a93      	ldrh	r3, [r2, #20]
    28ea:	430b      	orrs	r3, r1
    28ec:	b29b      	uxth	r3, r3
    28ee:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    28f0:	4b22      	ldr	r3, [pc, #136]	; (297c <set_clock_48m+0xa4>)
    28f2:	68db      	ldr	r3, [r3, #12]
    28f4:	079b      	lsls	r3, r3, #30
    28f6:	d5fb      	bpl.n	28f0 <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    28f8:	4b22      	ldr	r3, [pc, #136]	; (2984 <set_clock_48m+0xac>)
    28fa:	2202      	movs	r2, #2
    28fc:	32ff      	adds	r2, #255	; 0xff
    28fe:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    2900:	4a21      	ldr	r2, [pc, #132]	; (2988 <set_clock_48m+0xb0>)
    2902:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2904:	4b1f      	ldr	r3, [pc, #124]	; (2984 <set_clock_48m+0xac>)
    2906:	785b      	ldrb	r3, [r3, #1]
    2908:	b25b      	sxtb	r3, r3
    290a:	2b00      	cmp	r3, #0
    290c:	dbfa      	blt.n	2904 <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    290e:	4b1d      	ldr	r3, [pc, #116]	; (2984 <set_clock_48m+0xac>)
    2910:	2282      	movs	r2, #130	; 0x82
    2912:	01d2      	lsls	r2, r2, #7
    2914:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2916:	4b19      	ldr	r3, [pc, #100]	; (297c <set_clock_48m+0xa4>)
    2918:	68db      	ldr	r3, [r3, #12]
    291a:	06db      	lsls	r3, r3, #27
    291c:	d5fb      	bpl.n	2916 <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    291e:	4b17      	ldr	r3, [pc, #92]	; (297c <set_clock_48m+0xa4>)
    2920:	2202      	movs	r2, #2
    2922:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2924:	4b15      	ldr	r3, [pc, #84]	; (297c <set_clock_48m+0xa4>)
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	06db      	lsls	r3, r3, #27
    292a:	d5fb      	bpl.n	2924 <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    292c:	4b13      	ldr	r3, [pc, #76]	; (297c <set_clock_48m+0xa4>)
    292e:	4a17      	ldr	r2, [pc, #92]	; (298c <set_clock_48m+0xb4>)
    2930:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2932:	4b12      	ldr	r3, [pc, #72]	; (297c <set_clock_48m+0xa4>)
    2934:	68db      	ldr	r3, [r3, #12]
    2936:	06db      	lsls	r3, r3, #27
    2938:	d5fb      	bpl.n	2932 <set_clock_48m+0x5a>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    293a:	4b15      	ldr	r3, [pc, #84]	; (2990 <set_clock_48m+0xb8>)
    293c:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    293e:	4b0f      	ldr	r3, [pc, #60]	; (297c <set_clock_48m+0xa4>)
    2940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2942:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2944:	4b0d      	ldr	r3, [pc, #52]	; (297c <set_clock_48m+0xa4>)
    2946:	68db      	ldr	r3, [r3, #12]
    2948:	06db      	lsls	r3, r3, #27
    294a:	d5fb      	bpl.n	2944 <set_clock_48m+0x6c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    294c:	4a0b      	ldr	r2, [pc, #44]	; (297c <set_clock_48m+0xa4>)
    294e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2950:	4910      	ldr	r1, [pc, #64]	; (2994 <set_clock_48m+0xbc>)
    2952:	430b      	orrs	r3, r1
    2954:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    2956:	4b09      	ldr	r3, [pc, #36]	; (297c <set_clock_48m+0xa4>)
    2958:	68db      	ldr	r3, [r3, #12]
    295a:	061b      	lsls	r3, r3, #24
    295c:	d5fb      	bpl.n	2956 <set_clock_48m+0x7e>
    295e:	4b07      	ldr	r3, [pc, #28]	; (297c <set_clock_48m+0xa4>)
    2960:	68db      	ldr	r3, [r3, #12]
    2962:	065b      	lsls	r3, r3, #25
    2964:	d5f7      	bpl.n	2956 <set_clock_48m+0x7e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    2966:	4b07      	ldr	r3, [pc, #28]	; (2984 <set_clock_48m+0xac>)
    2968:	4a0b      	ldr	r2, [pc, #44]	; (2998 <set_clock_48m+0xc0>)
    296a:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    296c:	4b05      	ldr	r3, [pc, #20]	; (2984 <set_clock_48m+0xac>)
    296e:	785b      	ldrb	r3, [r3, #1]
    2970:	b25b      	sxtb	r3, r3
    2972:	2b00      	cmp	r3, #0
    2974:	dbfa      	blt.n	296c <set_clock_48m+0x94>
}
    2976:	4770      	bx	lr
    2978:	41004000 	.word	0x41004000
    297c:	40000800 	.word	0x40000800
    2980:	0000040c 	.word	0x0000040c
    2984:	40000c00 	.word	0x40000c00
    2988:	00030501 	.word	0x00030501
    298c:	7dff05b9 	.word	0x7dff05b9
    2990:	00806020 	.word	0x00806020
    2994:	00000806 	.word	0x00000806
    2998:	00030700 	.word	0x00030700

0000299c <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    299c:	3801      	subs	r0, #1
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	46c0      	nop			; (mov r8, r8)
    29a2:	46c0      	nop			; (mov r8, r8)
    29a4:	46c0      	nop			; (mov r8, r8)
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	d1f8      	bne.n	299c <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    29aa:	4770      	bx	lr

000029ac <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    29ac:	4a14      	ldr	r2, [pc, #80]	; (2a00 <init_timer+0x54>)
    29ae:	6a11      	ldr	r1, [r2, #32]
    29b0:	2380      	movs	r3, #128	; 0x80
    29b2:	015b      	lsls	r3, r3, #5
    29b4:	430b      	orrs	r3, r1
    29b6:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    29b8:	4b12      	ldr	r3, [pc, #72]	; (2a04 <init_timer+0x58>)
    29ba:	4a13      	ldr	r2, [pc, #76]	; (2a08 <init_timer+0x5c>)
    29bc:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    29be:	4b11      	ldr	r3, [pc, #68]	; (2a04 <init_timer+0x58>)
    29c0:	785b      	ldrb	r3, [r3, #1]
    29c2:	b25b      	sxtb	r3, r3
    29c4:	2b00      	cmp	r3, #0
    29c6:	dbfa      	blt.n	29be <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    29c8:	4b10      	ldr	r3, [pc, #64]	; (2a0c <init_timer+0x60>)
    29ca:	2208      	movs	r2, #8
    29cc:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    29ce:	4b0f      	ldr	r3, [pc, #60]	; (2a0c <init_timer+0x60>)
    29d0:	7bdb      	ldrb	r3, [r3, #15]
    29d2:	b25b      	sxtb	r3, r3
    29d4:	2b00      	cmp	r3, #0
    29d6:	dbfa      	blt.n	29ce <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    29d8:	4a0c      	ldr	r2, [pc, #48]	; (2a0c <init_timer+0x60>)
    29da:	8813      	ldrh	r3, [r2, #0]
    29dc:	2102      	movs	r1, #2
    29de:	430b      	orrs	r3, r1
    29e0:	b29b      	uxth	r3, r3
    29e2:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    29e4:	4b09      	ldr	r3, [pc, #36]	; (2a0c <init_timer+0x60>)
    29e6:	7bdb      	ldrb	r3, [r3, #15]
    29e8:	b25b      	sxtb	r3, r3
    29ea:	2b00      	cmp	r3, #0
    29ec:	dbfa      	blt.n	29e4 <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    29ee:	4b07      	ldr	r3, [pc, #28]	; (2a0c <init_timer+0x60>)
    29f0:	4a07      	ldr	r2, [pc, #28]	; (2a10 <init_timer+0x64>)
    29f2:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    29f4:	4b05      	ldr	r3, [pc, #20]	; (2a0c <init_timer+0x60>)
    29f6:	7bdb      	ldrb	r3, [r3, #15]
    29f8:	b25b      	sxtb	r3, r3
    29fa:	2b00      	cmp	r3, #0
    29fc:	dbfa      	blt.n	29f4 <init_timer+0x48>
}
    29fe:	4770      	bx	lr
    2a00:	40000400 	.word	0x40000400
    2a04:	40000c00 	.word	0x40000c00
    2a08:	0000401c 	.word	0x0000401c
    2a0c:	42003000 	.word	0x42003000
    2a10:	00004010 	.word	0x00004010

00002a14 <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    2a14:	4b01      	ldr	r3, [pc, #4]	; (2a1c <read_timer_20ns+0x8>)
    2a16:	6918      	ldr	r0, [r3, #16]
}
    2a18:	4770      	bx	lr
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	42003000 	.word	0x42003000

00002a20 <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    2a20:	4b04      	ldr	r3, [pc, #16]	; (2a34 <init_timer_interrupt+0x14>)
    2a22:	2210      	movs	r2, #16
    2a24:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2a26:	4b03      	ldr	r3, [pc, #12]	; (2a34 <init_timer_interrupt+0x14>)
    2a28:	7bdb      	ldrb	r3, [r3, #15]
    2a2a:	b25b      	sxtb	r3, r3
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	dbfa      	blt.n	2a26 <init_timer_interrupt+0x6>
}
    2a30:	4770      	bx	lr
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	42003000 	.word	0x42003000

00002a38 <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a38:	4b02      	ldr	r3, [pc, #8]	; (2a44 <timer_enable_interrupt+0xc>)
    2a3a:	2280      	movs	r2, #128	; 0x80
    2a3c:	0312      	lsls	r2, r2, #12
    2a3e:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    2a40:	4770      	bx	lr
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	e000e100 	.word	0xe000e100

00002a48 <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a48:	4a04      	ldr	r2, [pc, #16]	; (2a5c <timer_disable_interrupt+0x14>)
    2a4a:	2380      	movs	r3, #128	; 0x80
    2a4c:	2180      	movs	r1, #128	; 0x80
    2a4e:	0309      	lsls	r1, r1, #12
    2a50:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2a52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a56:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    2a5a:	4770      	bx	lr
    2a5c:	e000e100 	.word	0xe000e100

00002a60 <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    2a60:	4b04      	ldr	r3, [pc, #16]	; (2a74 <timer_clear_interrupt+0x14>)
    2a62:	2210      	movs	r2, #16
    2a64:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a66:	4a04      	ldr	r2, [pc, #16]	; (2a78 <timer_clear_interrupt+0x18>)
    2a68:	23c0      	movs	r3, #192	; 0xc0
    2a6a:	005b      	lsls	r3, r3, #1
    2a6c:	2180      	movs	r1, #128	; 0x80
    2a6e:	0309      	lsls	r1, r1, #12
    2a70:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    2a72:	4770      	bx	lr
    2a74:	42003000 	.word	0x42003000
    2a78:	e000e100 	.word	0xe000e100

00002a7c <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    2a7c:	4a02      	ldr	r2, [pc, #8]	; (2a88 <timer_set_interrupt_time+0xc>)
    2a7e:	6993      	ldr	r3, [r2, #24]
    2a80:	4303      	orrs	r3, r0
    2a82:	6193      	str	r3, [r2, #24]
    2a84:	4770      	bx	lr
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	42003000 	.word	0x42003000

00002a8c <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2a8c:	b570      	push	{r4, r5, r6, lr}
    2a8e:	0006      	movs	r6, r0
    2a90:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    2a92:	4b10      	ldr	r3, [pc, #64]	; (2ad4 <uart_set_baud+0x48>)
    2a94:	4798      	blx	r3
    2a96:	1e04      	subs	r4, r0, #0
    2a98:	d018      	beq.n	2acc <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    2a9a:	4b0f      	ldr	r3, [pc, #60]	; (2ad8 <uart_set_baud+0x4c>)
    2a9c:	429d      	cmp	r5, r3
    2a9e:	d817      	bhi.n	2ad0 <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    2aa0:	4b0e      	ldr	r3, [pc, #56]	; (2adc <uart_set_baud+0x50>)
    2aa2:	0028      	movs	r0, r5
    2aa4:	4798      	blx	r3
    2aa6:	4b0e      	ldr	r3, [pc, #56]	; (2ae0 <uart_set_baud+0x54>)
    2aa8:	490e      	ldr	r1, [pc, #56]	; (2ae4 <uart_set_baud+0x58>)
    2aaa:	4798      	blx	r3
    2aac:	4d0e      	ldr	r5, [pc, #56]	; (2ae8 <uart_set_baud+0x5c>)
    2aae:	2183      	movs	r1, #131	; 0x83
    2ab0:	05c9      	lsls	r1, r1, #23
    2ab2:	47a8      	blx	r5
    2ab4:	1c01      	adds	r1, r0, #0
    2ab6:	4b0d      	ldr	r3, [pc, #52]	; (2aec <uart_set_baud+0x60>)
    2ab8:	20fe      	movs	r0, #254	; 0xfe
    2aba:	0580      	lsls	r0, r0, #22
    2abc:	4798      	blx	r3
    2abe:	218f      	movs	r1, #143	; 0x8f
    2ac0:	05c9      	lsls	r1, r1, #23
    2ac2:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    2ac4:	4b0a      	ldr	r3, [pc, #40]	; (2af0 <uart_set_baud+0x64>)
    2ac6:	4798      	blx	r3
    2ac8:	b280      	uxth	r0, r0
    2aca:	81b0      	strh	r0, [r6, #12]
    return true;
}
    2acc:	0020      	movs	r0, r4
    2ace:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    2ad0:	2400      	movs	r4, #0
    2ad2:	e7fb      	b.n	2acc <uart_set_baud+0x40>
    2ad4:	000026c9 	.word	0x000026c9
    2ad8:	002dc6c0 	.word	0x002dc6c0
    2adc:	000059bd 	.word	0x000059bd
    2ae0:	00004f79 	.word	0x00004f79
    2ae4:	4c371b00 	.word	0x4c371b00
    2ae8:	00005345 	.word	0x00005345
    2aec:	000055c1 	.word	0x000055c1
    2af0:	00004c45 	.word	0x00004c45

00002af4 <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    2af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2af6:	0004      	movs	r4, r0
    2af8:	000e      	movs	r6, r1
    2afa:	0017      	movs	r7, r2
    2afc:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    2afe:	4b11      	ldr	r3, [pc, #68]	; (2b44 <uart_init+0x50>)
    2b00:	4798      	blx	r3
    2b02:	2800      	cmp	r0, #0
    2b04:	d01c      	beq.n	2b40 <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2b06:	0536      	lsls	r6, r6, #20
    2b08:	23c0      	movs	r3, #192	; 0xc0
    2b0a:	039b      	lsls	r3, r3, #14
    2b0c:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    2b0e:	043f      	lsls	r7, r7, #16
    2b10:	22c0      	movs	r2, #192	; 0xc0
    2b12:	0292      	lsls	r2, r2, #10
    2b14:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2b16:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    2b18:	4b0b      	ldr	r3, [pc, #44]	; (2b48 <uart_init+0x54>)
    2b1a:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    2b1c:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    2b1e:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    2b20:	69e2      	ldr	r2, [r4, #28]
    2b22:	0752      	lsls	r2, r2, #29
    2b24:	d4fc      	bmi.n	2b20 <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    2b26:	0029      	movs	r1, r5
    2b28:	0020      	movs	r0, r4
    2b2a:	4b08      	ldr	r3, [pc, #32]	; (2b4c <uart_init+0x58>)
    2b2c:	4798      	blx	r3
    2b2e:	2800      	cmp	r0, #0
    2b30:	d006      	beq.n	2b40 <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    2b32:	6823      	ldr	r3, [r4, #0]
    2b34:	2202      	movs	r2, #2
    2b36:	4313      	orrs	r3, r2
    2b38:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    2b3a:	69e3      	ldr	r3, [r4, #28]
    2b3c:	079b      	lsls	r3, r3, #30
    2b3e:	d4fc      	bmi.n	2b3a <uart_init+0x46>
}
    2b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	00002729 	.word	0x00002729
    2b48:	40000004 	.word	0x40000004
    2b4c:	00002a8d 	.word	0x00002a8d

00002b50 <uart_set_interrupt>:

bool uart_set_interrupt(sercom_registers_t* sercom, void (*callback)(void)) {
    2b50:	b570      	push	{r4, r5, r6, lr}
    2b52:	0004      	movs	r4, r0
    2b54:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    2b56:	4b17      	ldr	r3, [pc, #92]	; (2bb4 <uart_set_interrupt+0x64>)
    2b58:	4798      	blx	r3
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d022      	beq.n	2ba4 <uart_set_interrupt+0x54>
    
    sercom->USART_INT.SERCOM_INTENSET = SERCOM_USART_INT_INTFLAG_RXC(1);
    2b5e:	2304      	movs	r3, #4
    2b60:	75a3      	strb	r3, [r4, #22]

    switch ((uint32_t)sercom) {
    2b62:	4b15      	ldr	r3, [pc, #84]	; (2bb8 <uart_set_interrupt+0x68>)
    2b64:	429c      	cmp	r4, r3
    2b66:	d01e      	beq.n	2ba6 <uart_set_interrupt+0x56>
    2b68:	d80c      	bhi.n	2b84 <uart_set_interrupt+0x34>
    2b6a:	4b14      	ldr	r3, [pc, #80]	; (2bbc <uart_set_interrupt+0x6c>)
    2b6c:	429c      	cmp	r4, r3
    2b6e:	d013      	beq.n	2b98 <uart_set_interrupt+0x48>
    2b70:	4b13      	ldr	r3, [pc, #76]	; (2bc0 <uart_set_interrupt+0x70>)
    2b72:	429c      	cmp	r4, r3
    2b74:	d116      	bne.n	2ba4 <uart_set_interrupt+0x54>
        sercom0_callback = callback;
        NVIC_EnableIRQ(SERCOM0_IRQn);
        break;

        case (uint32_t)SERCOM1_REGS:
        sercom1_callback = callback;
    2b76:	4b13      	ldr	r3, [pc, #76]	; (2bc4 <uart_set_interrupt+0x74>)
    2b78:	605d      	str	r5, [r3, #4]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b7a:	4b13      	ldr	r3, [pc, #76]	; (2bc8 <uart_set_interrupt+0x78>)
    2b7c:	2280      	movs	r2, #128	; 0x80
    2b7e:	00d2      	lsls	r2, r2, #3
    2b80:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
    2b82:	e00f      	b.n	2ba4 <uart_set_interrupt+0x54>
    switch ((uint32_t)sercom) {
    2b84:	4b11      	ldr	r3, [pc, #68]	; (2bcc <uart_set_interrupt+0x7c>)
    2b86:	429c      	cmp	r4, r3
    2b88:	d10c      	bne.n	2ba4 <uart_set_interrupt+0x54>
        sercom4_callback = callback;
        NVIC_EnableIRQ(SERCOM4_IRQn);
        break;

        case (uint32_t)SERCOM5_REGS:
        sercom5_callback = callback;
    2b8a:	4b0e      	ldr	r3, [pc, #56]	; (2bc4 <uart_set_interrupt+0x74>)
    2b8c:	60dd      	str	r5, [r3, #12]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b8e:	4b0e      	ldr	r3, [pc, #56]	; (2bc8 <uart_set_interrupt+0x78>)
    2b90:	2280      	movs	r2, #128	; 0x80
    2b92:	01d2      	lsls	r2, r2, #7
    2b94:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(SERCOM5_IRQn);
        break;
    }
}
    2b96:	e005      	b.n	2ba4 <uart_set_interrupt+0x54>
        sercom0_callback = callback;
    2b98:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <uart_set_interrupt+0x74>)
    2b9a:	601d      	str	r5, [r3, #0]
    2b9c:	4b0a      	ldr	r3, [pc, #40]	; (2bc8 <uart_set_interrupt+0x78>)
    2b9e:	2280      	movs	r2, #128	; 0x80
    2ba0:	0092      	lsls	r2, r2, #2
    2ba2:	601a      	str	r2, [r3, #0]
}
    2ba4:	bd70      	pop	{r4, r5, r6, pc}
        sercom4_callback = callback;
    2ba6:	4b07      	ldr	r3, [pc, #28]	; (2bc4 <uart_set_interrupt+0x74>)
    2ba8:	609d      	str	r5, [r3, #8]
    2baa:	4b07      	ldr	r3, [pc, #28]	; (2bc8 <uart_set_interrupt+0x78>)
    2bac:	2280      	movs	r2, #128	; 0x80
    2bae:	0192      	lsls	r2, r2, #6
    2bb0:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
    2bb2:	e7f7      	b.n	2ba4 <uart_set_interrupt+0x54>
    2bb4:	000026c9 	.word	0x000026c9
    2bb8:	42001800 	.word	0x42001800
    2bbc:	42000800 	.word	0x42000800
    2bc0:	42000c00 	.word	0x42000c00
    2bc4:	20000608 	.word	0x20000608
    2bc8:	e000e100 	.word	0xe000e100
    2bcc:	42001c00 	.word	0x42001c00

00002bd0 <uart_flush>:

void uart_flush(sercom_registers_t* sercom) {
    while (sercom->USART_INT.SERCOM_INTFLAG & SERCOM_USART_INT_INTFLAG_RXC_Msk) sercom->USART_INT.SERCOM_DATA;
    2bd0:	e000      	b.n	2bd4 <uart_flush+0x4>
    2bd2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2bd4:	7e03      	ldrb	r3, [r0, #24]
    2bd6:	075b      	lsls	r3, r3, #29
    2bd8:	d4fb      	bmi.n	2bd2 <uart_flush+0x2>
}
    2bda:	4770      	bx	lr

00002bdc <SERCOM0_Handler>:
        buffer[i] = (uint8_t)(sercom->USART_INT.SERCOM_DATA);
    }
    return i;
}

void SERCOM0_Handler() {
    2bdc:	b510      	push	{r4, lr}
    sercom0_callback();
    2bde:	4b04      	ldr	r3, [pc, #16]	; (2bf0 <SERCOM0_Handler+0x14>)
    2be0:	681b      	ldr	r3, [r3, #0]
    2be2:	4798      	blx	r3
    SERCOM0_REGS->USART_INT.SERCOM_INTFLAG = SERCOM0_REGS->USART_INT.SERCOM_INTFLAG;
    2be4:	4a03      	ldr	r2, [pc, #12]	; (2bf4 <SERCOM0_Handler+0x18>)
    2be6:	7e13      	ldrb	r3, [r2, #24]
    2be8:	b2db      	uxtb	r3, r3
    2bea:	7613      	strb	r3, [r2, #24]
}
    2bec:	bd10      	pop	{r4, pc}
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	20000608 	.word	0x20000608
    2bf4:	42000800 	.word	0x42000800

00002bf8 <SERCOM1_Handler>:

void SERCOM1_Handler() {
    2bf8:	b510      	push	{r4, lr}
    sercom1_callback();
    2bfa:	4b04      	ldr	r3, [pc, #16]	; (2c0c <SERCOM1_Handler+0x14>)
    2bfc:	685b      	ldr	r3, [r3, #4]
    2bfe:	4798      	blx	r3
    SERCOM1_REGS->USART_INT.SERCOM_INTFLAG = SERCOM1_REGS->USART_INT.SERCOM_INTFLAG;
    2c00:	4a03      	ldr	r2, [pc, #12]	; (2c10 <SERCOM1_Handler+0x18>)
    2c02:	7e13      	ldrb	r3, [r2, #24]
    2c04:	b2db      	uxtb	r3, r3
    2c06:	7613      	strb	r3, [r2, #24]
}
    2c08:	bd10      	pop	{r4, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	20000608 	.word	0x20000608
    2c10:	42000c00 	.word	0x42000c00

00002c14 <SERCOM4_Handler>:

void SERCOM4_Handler() {
    2c14:	b510      	push	{r4, lr}
    sercom4_callback();
    2c16:	4b04      	ldr	r3, [pc, #16]	; (2c28 <SERCOM4_Handler+0x14>)
    2c18:	689b      	ldr	r3, [r3, #8]
    2c1a:	4798      	blx	r3
    SERCOM4_REGS->USART_INT.SERCOM_INTFLAG = SERCOM4_REGS->USART_INT.SERCOM_INTFLAG;
    2c1c:	4a03      	ldr	r2, [pc, #12]	; (2c2c <SERCOM4_Handler+0x18>)
    2c1e:	7e13      	ldrb	r3, [r2, #24]
    2c20:	b2db      	uxtb	r3, r3
    2c22:	7613      	strb	r3, [r2, #24]
}
    2c24:	bd10      	pop	{r4, pc}
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	20000608 	.word	0x20000608
    2c2c:	42001800 	.word	0x42001800

00002c30 <SERCOM5_Handler>:

void SERCOM5_Handler() {
    2c30:	b510      	push	{r4, lr}
    sercom5_callback();
    2c32:	4b04      	ldr	r3, [pc, #16]	; (2c44 <SERCOM5_Handler+0x14>)
    2c34:	68db      	ldr	r3, [r3, #12]
    2c36:	4798      	blx	r3
    SERCOM5_REGS->USART_INT.SERCOM_INTFLAG = SERCOM5_REGS->USART_INT.SERCOM_INTFLAG;
    2c38:	4a03      	ldr	r2, [pc, #12]	; (2c48 <SERCOM5_Handler+0x18>)
    2c3a:	7e13      	ldrb	r3, [r2, #24]
    2c3c:	b2db      	uxtb	r3, r3
    2c3e:	7613      	strb	r3, [r2, #24]
    2c40:	bd10      	pop	{r4, pc}
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	20000608 	.word	0x20000608
    2c48:	42001c00 	.word	0x42001c00

00002c4c <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    2c4c:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    2c4e:	4b10      	ldr	r3, [pc, #64]	; (2c90 <usb_ep0_in_multi+0x44>)
    2c50:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    2c52:	2c40      	cmp	r4, #64	; 0x40
    2c54:	d900      	bls.n	2c58 <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    2c56:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    2c58:	0026      	movs	r6, r4
    2c5a:	4b0d      	ldr	r3, [pc, #52]	; (2c90 <usb_ep0_in_multi+0x44>)
    2c5c:	1d1d      	adds	r5, r3, #4
    2c5e:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2c60:	0022      	movs	r2, r4
    2c62:	0028      	movs	r0, r5
    2c64:	4b0b      	ldr	r3, [pc, #44]	; (2c94 <usb_ep0_in_multi+0x48>)
    2c66:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    2c68:	2300      	movs	r3, #0
    2c6a:	0022      	movs	r2, r4
    2c6c:	0029      	movs	r1, r5
    2c6e:	2080      	movs	r0, #128	; 0x80
    2c70:	4d09      	ldr	r5, [pc, #36]	; (2c98 <usb_ep0_in_multi+0x4c>)
    2c72:	47a8      	blx	r5

	if (tsize == 0) {
    2c74:	2c00      	cmp	r4, #0
    2c76:	d007      	beq.n	2c88 <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    2c78:	4b05      	ldr	r3, [pc, #20]	; (2c90 <usb_ep0_in_multi+0x44>)
    2c7a:	881a      	ldrh	r2, [r3, #0]
    2c7c:	1b12      	subs	r2, r2, r4
    2c7e:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    2c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2c82:	1992      	adds	r2, r2, r6
    2c84:	645a      	str	r2, [r3, #68]	; 0x44
}
    2c86:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    2c88:	4b04      	ldr	r3, [pc, #16]	; (2c9c <usb_ep0_in_multi+0x50>)
    2c8a:	4798      	blx	r3
    2c8c:	e7f4      	b.n	2c78 <usb_ep0_in_multi+0x2c>
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	20000618 	.word	0x20000618
    2c94:	00005b75 	.word	0x00005b75
    2c98:	0000315d 	.word	0x0000315d
    2c9c:	00003265 	.word	0x00003265

00002ca0 <usb_handle_setup>:

void usb_handle_setup(void){
    2ca0:	b510      	push	{r4, lr}
    2ca2:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    2ca4:	4b40      	ldr	r3, [pc, #256]	; (2da8 <usb_handle_setup+0x108>)
    2ca6:	2248      	movs	r2, #72	; 0x48
    2ca8:	5c9b      	ldrb	r3, [r3, r2]
    2caa:	3218      	adds	r2, #24
    2cac:	421a      	tst	r2, r3
    2cae:	d177      	bne.n	2da0 <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    2cb0:	4b3e      	ldr	r3, [pc, #248]	; (2dac <usb_handle_setup+0x10c>)
    2cb2:	785b      	ldrb	r3, [r3, #1]
    2cb4:	2b0b      	cmp	r3, #11
    2cb6:	d870      	bhi.n	2d9a <usb_handle_setup+0xfa>
    2cb8:	009b      	lsls	r3, r3, #2
    2cba:	4a3d      	ldr	r2, [pc, #244]	; (2db0 <usb_handle_setup+0x110>)
    2cbc:	58d3      	ldr	r3, [r2, r3]
    2cbe:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    2cc0:	4b39      	ldr	r3, [pc, #228]	; (2da8 <usb_handle_setup+0x108>)
    2cc2:	2200      	movs	r2, #0
    2cc4:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    2cc6:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    2cc8:	2002      	movs	r0, #2
    2cca:	4b3a      	ldr	r3, [pc, #232]	; (2db4 <usb_handle_setup+0x114>)
    2ccc:	4798      	blx	r3
				return usb_ep0_out();
    2cce:	4b3a      	ldr	r3, [pc, #232]	; (2db8 <usb_handle_setup+0x118>)
    2cd0:	4798      	blx	r3
    2cd2:	e067      	b.n	2da4 <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    2cd4:	2000      	movs	r0, #0
    2cd6:	4b37      	ldr	r3, [pc, #220]	; (2db4 <usb_handle_setup+0x114>)
    2cd8:	4798      	blx	r3
				return usb_ep0_out();
    2cda:	4b37      	ldr	r3, [pc, #220]	; (2db8 <usb_handle_setup+0x118>)
    2cdc:	4798      	blx	r3
    2cde:	e061      	b.n	2da4 <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    2ce0:	2000      	movs	r0, #0
    2ce2:	4b34      	ldr	r3, [pc, #208]	; (2db4 <usb_handle_setup+0x114>)
    2ce4:	4798      	blx	r3
				return usb_ep0_out();
    2ce6:	4b34      	ldr	r3, [pc, #208]	; (2db8 <usb_handle_setup+0x118>)
    2ce8:	4798      	blx	r3
    2cea:	e05b      	b.n	2da4 <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    2cec:	4b2f      	ldr	r3, [pc, #188]	; (2dac <usb_handle_setup+0x10c>)
    2cee:	8859      	ldrh	r1, [r3, #2]
    2cf0:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    2cf2:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    2cf4:	2300      	movs	r3, #0
    2cf6:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2cf8:	aa01      	add	r2, sp, #4
    2cfa:	4b30      	ldr	r3, [pc, #192]	; (2dbc <usb_handle_setup+0x11c>)
    2cfc:	4798      	blx	r3

				if (size && descriptor){
    2cfe:	2800      	cmp	r0, #0
    2d00:	d019      	beq.n	2d36 <usb_handle_setup+0x96>
    2d02:	9901      	ldr	r1, [sp, #4]
    2d04:	2900      	cmp	r1, #0
    2d06:	d016      	beq.n	2d36 <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    2d08:	4a28      	ldr	r2, [pc, #160]	; (2dac <usb_handle_setup+0x10c>)
    2d0a:	88d2      	ldrh	r2, [r2, #6]
    2d0c:	4282      	cmp	r2, r0
    2d0e:	d300      	bcc.n	2d12 <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2d10:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    2d12:	4b2b      	ldr	r3, [pc, #172]	; (2dc0 <usb_handle_setup+0x120>)
    2d14:	4299      	cmp	r1, r3
    2d16:	d005      	beq.n	2d24 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    2d18:	4b23      	ldr	r3, [pc, #140]	; (2da8 <usb_handle_setup+0x108>)
    2d1a:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    2d1c:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    2d1e:	4b29      	ldr	r3, [pc, #164]	; (2dc4 <usb_handle_setup+0x124>)
    2d20:	4798      	blx	r3
					}

					return;
    2d22:	e03f      	b.n	2da4 <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    2d24:	4920      	ldr	r1, [pc, #128]	; (2da8 <usb_handle_setup+0x108>)
    2d26:	2300      	movs	r3, #0
    2d28:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2d2a:	3104      	adds	r1, #4
    2d2c:	3301      	adds	r3, #1
    2d2e:	2080      	movs	r0, #128	; 0x80
    2d30:	4c25      	ldr	r4, [pc, #148]	; (2dc8 <usb_handle_setup+0x128>)
    2d32:	47a0      	blx	r4
    2d34:	e036      	b.n	2da4 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2d36:	4b25      	ldr	r3, [pc, #148]	; (2dcc <usb_handle_setup+0x12c>)
    2d38:	4798      	blx	r3
    2d3a:	e033      	b.n	2da4 <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    2d3c:	4b1a      	ldr	r3, [pc, #104]	; (2da8 <usb_handle_setup+0x108>)
    2d3e:	2250      	movs	r2, #80	; 0x50
    2d40:	5c9a      	ldrb	r2, [r3, r2]
    2d42:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    2d44:	2001      	movs	r0, #1
    2d46:	4b1b      	ldr	r3, [pc, #108]	; (2db4 <usb_handle_setup+0x114>)
    2d48:	4798      	blx	r3
				return usb_ep0_out();
    2d4a:	4b1b      	ldr	r3, [pc, #108]	; (2db8 <usb_handle_setup+0x118>)
    2d4c:	4798      	blx	r3
    2d4e:	e029      	b.n	2da4 <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    2d50:	4b16      	ldr	r3, [pc, #88]	; (2dac <usb_handle_setup+0x10c>)
    2d52:	7898      	ldrb	r0, [r3, #2]
    2d54:	4b1e      	ldr	r3, [pc, #120]	; (2dd0 <usb_handle_setup+0x130>)
    2d56:	4798      	blx	r3
    2d58:	2800      	cmp	r0, #0
    2d5a:	d00b      	beq.n	2d74 <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    2d5c:	2000      	movs	r0, #0
    2d5e:	4b15      	ldr	r3, [pc, #84]	; (2db4 <usb_handle_setup+0x114>)
    2d60:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    2d62:	4b11      	ldr	r3, [pc, #68]	; (2da8 <usb_handle_setup+0x108>)
    2d64:	001a      	movs	r2, r3
    2d66:	3248      	adds	r2, #72	; 0x48
    2d68:	7891      	ldrb	r1, [r2, #2]
    2d6a:	2250      	movs	r2, #80	; 0x50
    2d6c:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    2d6e:	4b12      	ldr	r3, [pc, #72]	; (2db8 <usb_handle_setup+0x118>)
    2d70:	4798      	blx	r3
    2d72:	e017      	b.n	2da4 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2d74:	4b15      	ldr	r3, [pc, #84]	; (2dcc <usb_handle_setup+0x12c>)
    2d76:	4798      	blx	r3
    2d78:	e014      	b.n	2da4 <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    2d7a:	4b0c      	ldr	r3, [pc, #48]	; (2dac <usb_handle_setup+0x10c>)
    2d7c:	8859      	ldrh	r1, [r3, #2]
    2d7e:	8898      	ldrh	r0, [r3, #4]
    2d80:	4b14      	ldr	r3, [pc, #80]	; (2dd4 <usb_handle_setup+0x134>)
    2d82:	4798      	blx	r3
    2d84:	2800      	cmp	r0, #0
    2d86:	d005      	beq.n	2d94 <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    2d88:	2000      	movs	r0, #0
    2d8a:	4b0a      	ldr	r3, [pc, #40]	; (2db4 <usb_handle_setup+0x114>)
    2d8c:	4798      	blx	r3
					return usb_ep0_out();
    2d8e:	4b0a      	ldr	r3, [pc, #40]	; (2db8 <usb_handle_setup+0x118>)
    2d90:	4798      	blx	r3
    2d92:	e007      	b.n	2da4 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2d94:	4b0d      	ldr	r3, [pc, #52]	; (2dcc <usb_handle_setup+0x12c>)
    2d96:	4798      	blx	r3
    2d98:	e004      	b.n	2da4 <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    2d9a:	4b0c      	ldr	r3, [pc, #48]	; (2dcc <usb_handle_setup+0x12c>)
    2d9c:	4798      	blx	r3
    2d9e:	e001      	b.n	2da4 <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    2da0:	4b0d      	ldr	r3, [pc, #52]	; (2dd8 <usb_handle_setup+0x138>)
    2da2:	4798      	blx	r3
}
    2da4:	b002      	add	sp, #8
    2da6:	bd10      	pop	{r4, pc}
    2da8:	20000618 	.word	0x20000618
    2dac:	20000660 	.word	0x20000660
    2db0:	000062d4 	.word	0x000062d4
    2db4:	0000327d 	.word	0x0000327d
    2db8:	00003265 	.word	0x00003265
    2dbc:	000035fd 	.word	0x000035fd
    2dc0:	2000061c 	.word	0x2000061c
    2dc4:	00002c4d 	.word	0x00002c4d
    2dc8:	0000315d 	.word	0x0000315d
    2dcc:	00003295 	.word	0x00003295
    2dd0:	000035c1 	.word	0x000035c1
    2dd4:	000035d9 	.word	0x000035d9
    2dd8:	000034b1 	.word	0x000034b1

00002ddc <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    2ddc:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    2dde:	4b05      	ldr	r3, [pc, #20]	; (2df4 <usb_handle_control_out_complete+0x18>)
    2de0:	2248      	movs	r2, #72	; 0x48
    2de2:	5c9b      	ldrb	r3, [r3, r2]
    2de4:	3218      	adds	r2, #24
    2de6:	421a      	tst	r2, r3
    2de8:	d100      	bne.n	2dec <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    2dea:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    2dec:	4b02      	ldr	r3, [pc, #8]	; (2df8 <usb_handle_control_out_complete+0x1c>)
    2dee:	4798      	blx	r3
}
    2df0:	e7fb      	b.n	2dea <usb_handle_control_out_complete+0xe>
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	20000618 	.word	0x20000618
    2df8:	000035bf 	.word	0x000035bf

00002dfc <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    2dfc:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    2dfe:	4b0d      	ldr	r3, [pc, #52]	; (2e34 <usb_handle_control_in_complete+0x38>)
    2e00:	2248      	movs	r2, #72	; 0x48
    2e02:	5c9b      	ldrb	r3, [r3, r2]
    2e04:	3218      	adds	r2, #24
    2e06:	421a      	tst	r2, r3
    2e08:	d110      	bne.n	2e2c <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    2e0a:	4b0b      	ldr	r3, [pc, #44]	; (2e38 <usb_handle_control_in_complete+0x3c>)
    2e0c:	785b      	ldrb	r3, [r3, #1]
    2e0e:	2b05      	cmp	r3, #5
    2e10:	d002      	beq.n	2e18 <usb_handle_control_in_complete+0x1c>
    2e12:	2b06      	cmp	r3, #6
    2e14:	d007      	beq.n	2e26 <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    2e16:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    2e18:	4b07      	ldr	r3, [pc, #28]	; (2e38 <usb_handle_control_in_complete+0x3c>)
    2e1a:	789b      	ldrb	r3, [r3, #2]
    2e1c:	207f      	movs	r0, #127	; 0x7f
    2e1e:	4018      	ands	r0, r3
    2e20:	4b06      	ldr	r3, [pc, #24]	; (2e3c <usb_handle_control_in_complete+0x40>)
    2e22:	4798      	blx	r3
				return;
    2e24:	e7f7      	b.n	2e16 <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    2e26:	4b06      	ldr	r3, [pc, #24]	; (2e40 <usb_handle_control_in_complete+0x44>)
    2e28:	4798      	blx	r3
				return;
    2e2a:	e7f4      	b.n	2e16 <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    2e2c:	4b05      	ldr	r3, [pc, #20]	; (2e44 <usb_handle_control_in_complete+0x48>)
    2e2e:	4798      	blx	r3
    2e30:	e7f1      	b.n	2e16 <usb_handle_control_in_complete+0x1a>
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	20000618 	.word	0x20000618
    2e38:	20000660 	.word	0x20000660
    2e3c:	00002fa9 	.word	0x00002fa9
    2e40:	00002c4d 	.word	0x00002c4d
    2e44:	000035bd 	.word	0x000035bd

00002e48 <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    2e48:	b570      	push	{r4, r5, r6, lr}
    2e4a:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    2e4c:	4b0b      	ldr	r3, [pc, #44]	; (2e7c <usb_string_to_descriptor+0x34>)
    2e4e:	4798      	blx	r3
    2e50:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    2e52:	281f      	cmp	r0, #31
    2e54:	d900      	bls.n	2e58 <usb_string_to_descriptor+0x10>
    2e56:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    2e58:	1c43      	adds	r3, r0, #1
    2e5a:	005b      	lsls	r3, r3, #1
    2e5c:	4a08      	ldr	r2, [pc, #32]	; (2e80 <usb_string_to_descriptor+0x38>)
    2e5e:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    2e60:	2303      	movs	r3, #3
    2e62:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    2e64:	2200      	movs	r2, #0
    2e66:	e005      	b.n	2e74 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    2e68:	5cb1      	ldrb	r1, [r6, r2]
    2e6a:	4b05      	ldr	r3, [pc, #20]	; (2e80 <usb_string_to_descriptor+0x38>)
    2e6c:	0054      	lsls	r4, r2, #1
    2e6e:	191b      	adds	r3, r3, r4
    2e70:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    2e72:	3201      	adds	r2, #1
    2e74:	4290      	cmp	r0, r2
    2e76:	dcf7      	bgt.n	2e68 <usb_string_to_descriptor+0x20>
	}
	return desc;
    2e78:	4802      	ldr	r0, [pc, #8]	; (2e84 <usb_string_to_descriptor+0x3c>)
}
    2e7a:	bd70      	pop	{r4, r5, r6, pc}
    2e7c:	00005c05 	.word	0x00005c05
    2e80:	20000618 	.word	0x20000618
    2e84:	2000061c 	.word	0x2000061c

00002e88 <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    2e88:	4a12      	ldr	r2, [pc, #72]	; (2ed4 <usb_reset+0x4c>)
    2e8a:	4b13      	ldr	r3, [pc, #76]	; (2ed8 <usb_reset+0x50>)
    2e8c:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2e8e:	685a      	ldr	r2, [r3, #4]
    2e90:	4812      	ldr	r0, [pc, #72]	; (2edc <usb_reset+0x54>)
    2e92:	4002      	ands	r2, r0
    2e94:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    2e96:	6859      	ldr	r1, [r3, #4]
    2e98:	22c0      	movs	r2, #192	; 0xc0
    2e9a:	0592      	lsls	r2, r2, #22
    2e9c:	4311      	orrs	r1, r2
    2e9e:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    2ea0:	490f      	ldr	r1, [pc, #60]	; (2ee0 <usb_reset+0x58>)
    2ea2:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2ea4:	6959      	ldr	r1, [r3, #20]
    2ea6:	4001      	ands	r1, r0
    2ea8:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    2eaa:	6959      	ldr	r1, [r3, #20]
    2eac:	430a      	orrs	r2, r1
    2eae:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    2eb0:	695a      	ldr	r2, [r3, #20]
    2eb2:	0052      	lsls	r2, r2, #1
    2eb4:	0852      	lsrs	r2, r2, #1
    2eb6:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    2eb8:	6959      	ldr	r1, [r3, #20]
    2eba:	2280      	movs	r2, #128	; 0x80
    2ebc:	0612      	lsls	r2, r2, #24
    2ebe:	430a      	orrs	r2, r1
    2ec0:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    2ec2:	4b08      	ldr	r3, [pc, #32]	; (2ee4 <usb_reset+0x5c>)
    2ec4:	220a      	movs	r2, #10
    2ec6:	32ff      	adds	r2, #255	; 0xff
    2ec8:	2110      	movs	r1, #16
    2eca:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    2ecc:	3a09      	subs	r2, #9
    2ece:	3101      	adds	r1, #1
    2ed0:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    2ed2:	4770      	bx	lr
    2ed4:	2000066c 	.word	0x2000066c
    2ed8:	200006f8 	.word	0x200006f8
    2edc:	8fffffff 	.word	0x8fffffff
    2ee0:	2000061c 	.word	0x2000061c
    2ee4:	41005000 	.word	0x41005000

00002ee8 <usb_init>:
void usb_init(){
    2ee8:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    2eea:	4a26      	ldr	r2, [pc, #152]	; (2f84 <usb_init+0x9c>)
    2eec:	69d3      	ldr	r3, [r2, #28]
    2eee:	2120      	movs	r1, #32
    2ef0:	430b      	orrs	r3, r1
    2ef2:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    2ef4:	4b24      	ldr	r3, [pc, #144]	; (2f88 <usb_init+0xa0>)
    2ef6:	4a25      	ldr	r2, [pc, #148]	; (2f8c <usb_init+0xa4>)
    2ef8:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    2efa:	4b25      	ldr	r3, [pc, #148]	; (2f90 <usb_init+0xa8>)
    2efc:	2201      	movs	r2, #1
    2efe:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    2f00:	4b23      	ldr	r3, [pc, #140]	; (2f90 <usb_init+0xa8>)
    2f02:	789b      	ldrb	r3, [r3, #2]
    2f04:	07db      	lsls	r3, r3, #31
    2f06:	d4fb      	bmi.n	2f00 <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    2f08:	4b21      	ldr	r3, [pc, #132]	; (2f90 <usb_init+0xa8>)
    2f0a:	2202      	movs	r2, #2
    2f0c:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    2f0e:	4b20      	ldr	r3, [pc, #128]	; (2f90 <usb_init+0xa8>)
    2f10:	789b      	ldrb	r3, [r3, #2]
    2f12:	079b      	lsls	r3, r3, #30
    2f14:	d4fb      	bmi.n	2f0e <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2f16:	4b1f      	ldr	r3, [pc, #124]	; (2f94 <usb_init+0xac>)
    2f18:	685b      	ldr	r3, [r3, #4]
    2f1a:	035b      	lsls	r3, r3, #13
    2f1c:	22f8      	movs	r2, #248	; 0xf8
    2f1e:	0292      	lsls	r2, r2, #10
    2f20:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    2f22:	2b1f      	cmp	r3, #31
    2f24:	d028      	beq.n	2f78 <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2f26:	4a1b      	ldr	r2, [pc, #108]	; (2f94 <usb_init+0xac>)
    2f28:	6851      	ldr	r1, [r2, #4]
    2f2a:	0489      	lsls	r1, r1, #18
    2f2c:	22f8      	movs	r2, #248	; 0xf8
    2f2e:	03d2      	lsls	r2, r2, #15
    2f30:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    2f32:	291f      	cmp	r1, #31
    2f34:	d022      	beq.n	2f7c <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2f36:	4a17      	ldr	r2, [pc, #92]	; (2f94 <usb_init+0xac>)
    2f38:	6852      	ldr	r2, [r2, #4]
    2f3a:	05d2      	lsls	r2, r2, #23
    2f3c:	20e0      	movs	r0, #224	; 0xe0
    2f3e:	0480      	lsls	r0, r0, #18
    2f40:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    2f42:	2a07      	cmp	r2, #7
    2f44:	d01c      	beq.n	2f80 <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2f46:	019b      	lsls	r3, r3, #6
    2f48:	20f8      	movs	r0, #248	; 0xf8
    2f4a:	00c0      	lsls	r0, r0, #3
    2f4c:	4003      	ands	r3, r0
    2f4e:	201f      	movs	r0, #31
    2f50:	4001      	ands	r1, r0
    2f52:	430b      	orrs	r3, r1
    2f54:	0312      	lsls	r2, r2, #12
    2f56:	4313      	orrs	r3, r2
    2f58:	4d0d      	ldr	r5, [pc, #52]	; (2f90 <usb_init+0xa8>)
    2f5a:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    2f5c:	4b0e      	ldr	r3, [pc, #56]	; (2f98 <usb_init+0xb0>)
    2f5e:	781a      	ldrb	r2, [r3, #0]
    2f60:	0112      	lsls	r2, r2, #4
    2f62:	4c0e      	ldr	r4, [pc, #56]	; (2f9c <usb_init+0xb4>)
    2f64:	2100      	movs	r1, #0
    2f66:	0020      	movs	r0, r4
    2f68:	4b0d      	ldr	r3, [pc, #52]	; (2fa0 <usb_init+0xb8>)
    2f6a:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    2f6c:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    2f6e:	2308      	movs	r3, #8
    2f70:	832b      	strh	r3, [r5, #24]
	usb_reset();
    2f72:	4b0c      	ldr	r3, [pc, #48]	; (2fa4 <usb_init+0xbc>)
    2f74:	4798      	blx	r3
}
    2f76:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    2f78:	3b1a      	subs	r3, #26
    2f7a:	e7d4      	b.n	2f26 <usb_init+0x3e>
		pad_transp = 29;
    2f7c:	3902      	subs	r1, #2
    2f7e:	e7da      	b.n	2f36 <usb_init+0x4e>
		pad_trim = 3;
    2f80:	3a04      	subs	r2, #4
    2f82:	e7e0      	b.n	2f46 <usb_init+0x5e>
    2f84:	40000400 	.word	0x40000400
    2f88:	40000c00 	.word	0x40000c00
    2f8c:	00004006 	.word	0x00004006
    2f90:	41005000 	.word	0x41005000
    2f94:	00806020 	.word	0x00806020
    2f98:	00006356 	.word	0x00006356
    2f9c:	200006f8 	.word	0x200006f8
    2fa0:	00005a7d 	.word	0x00005a7d
    2fa4:	00002e89 	.word	0x00002e89

00002fa8 <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    2fa8:	2380      	movs	r3, #128	; 0x80
    2faa:	425b      	negs	r3, r3
    2fac:	4318      	orrs	r0, r3
    2fae:	b2c0      	uxtb	r0, r0
    2fb0:	4b01      	ldr	r3, [pc, #4]	; (2fb8 <usb_set_address+0x10>)
    2fb2:	7298      	strb	r0, [r3, #10]
}
    2fb4:	4770      	bx	lr
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	41005000 	.word	0x41005000

00002fbc <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    2fbc:	b530      	push	{r4, r5, lr}
    2fbe:	0003      	movs	r3, r0
	if (ep & 0x80) {
    2fc0:	b240      	sxtb	r0, r0
    2fc2:	2800      	cmp	r0, #0
    2fc4:	db24      	blt.n	3010 <usb_enable_ep+0x54>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2fc6:	203f      	movs	r0, #63	; 0x3f
    2fc8:	4018      	ands	r0, r3
    2fca:	4b49      	ldr	r3, [pc, #292]	; (30f0 <usb_enable_ep+0x134>)
    2fcc:	0144      	lsls	r4, r0, #5
    2fce:	191b      	adds	r3, r3, r4
    2fd0:	685c      	ldr	r4, [r3, #4]
    2fd2:	4d48      	ldr	r5, [pc, #288]	; (30f4 <usb_enable_ep+0x138>)
    2fd4:	402c      	ands	r4, r5
    2fd6:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2fd8:	685b      	ldr	r3, [r3, #4]
    2fda:	2a08      	cmp	r2, #8
    2fdc:	d95f      	bls.n	309e <usb_enable_ep+0xe2>
    2fde:	2a10      	cmp	r2, #16
    2fe0:	d800      	bhi.n	2fe4 <usb_enable_ep+0x28>
    2fe2:	e072      	b.n	30ca <usb_enable_ep+0x10e>
    2fe4:	2a20      	cmp	r2, #32
    2fe6:	d800      	bhi.n	2fea <usb_enable_ep+0x2e>
    2fe8:	e072      	b.n	30d0 <usb_enable_ep+0x114>
    2fea:	2a40      	cmp	r2, #64	; 0x40
    2fec:	d800      	bhi.n	2ff0 <usb_enable_ep+0x34>
    2fee:	e072      	b.n	30d6 <usb_enable_ep+0x11a>
    2ff0:	2a80      	cmp	r2, #128	; 0x80
    2ff2:	d800      	bhi.n	2ff6 <usb_enable_ep+0x3a>
    2ff4:	e072      	b.n	30dc <usb_enable_ep+0x120>
    2ff6:	2480      	movs	r4, #128	; 0x80
    2ff8:	0064      	lsls	r4, r4, #1
    2ffa:	42a2      	cmp	r2, r4
    2ffc:	d800      	bhi.n	3000 <usb_enable_ep+0x44>
    2ffe:	e070      	b.n	30e2 <usb_enable_ep+0x126>
    3000:	3401      	adds	r4, #1
    3002:	34ff      	adds	r4, #255	; 0xff
    3004:	42a2      	cmp	r2, r4
    3006:	d900      	bls.n	300a <usb_enable_ep+0x4e>
    3008:	e06e      	b.n	30e8 <usb_enable_ep+0x12c>
    300a:	22c0      	movs	r2, #192	; 0xc0
    300c:	05d2      	lsls	r2, r2, #23
    300e:	e047      	b.n	30a0 <usb_enable_ep+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    3010:	203f      	movs	r0, #63	; 0x3f
    3012:	4003      	ands	r3, r0
    3014:	4836      	ldr	r0, [pc, #216]	; (30f0 <usb_enable_ep+0x134>)
    3016:	015c      	lsls	r4, r3, #5
    3018:	1900      	adds	r0, r0, r4
    301a:	6944      	ldr	r4, [r0, #20]
    301c:	4d35      	ldr	r5, [pc, #212]	; (30f4 <usb_enable_ep+0x138>)
    301e:	402c      	ands	r4, r5
    3020:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    3022:	6940      	ldr	r0, [r0, #20]
    3024:	2a08      	cmp	r2, #8
    3026:	d912      	bls.n	304e <usb_enable_ep+0x92>
    3028:	2a10      	cmp	r2, #16
    302a:	d926      	bls.n	307a <usb_enable_ep+0xbe>
    302c:	2a20      	cmp	r2, #32
    302e:	d927      	bls.n	3080 <usb_enable_ep+0xc4>
    3030:	2a40      	cmp	r2, #64	; 0x40
    3032:	d928      	bls.n	3086 <usb_enable_ep+0xca>
    3034:	2a80      	cmp	r2, #128	; 0x80
    3036:	d929      	bls.n	308c <usb_enable_ep+0xd0>
    3038:	2480      	movs	r4, #128	; 0x80
    303a:	0064      	lsls	r4, r4, #1
    303c:	42a2      	cmp	r2, r4
    303e:	d928      	bls.n	3092 <usb_enable_ep+0xd6>
    3040:	3401      	adds	r4, #1
    3042:	34ff      	adds	r4, #255	; 0xff
    3044:	42a2      	cmp	r2, r4
    3046:	d827      	bhi.n	3098 <usb_enable_ep+0xdc>
    3048:	22c0      	movs	r2, #192	; 0xc0
    304a:	05d2      	lsls	r2, r2, #23
    304c:	e000      	b.n	3050 <usb_enable_ep+0x94>
    304e:	2200      	movs	r2, #0
    3050:	4310      	orrs	r0, r2
    3052:	4a27      	ldr	r2, [pc, #156]	; (30f0 <usb_enable_ep+0x134>)
    3054:	015c      	lsls	r4, r3, #5
    3056:	1912      	adds	r2, r2, r4
    3058:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    305a:	4c27      	ldr	r4, [pc, #156]	; (30f8 <usb_enable_ep+0x13c>)
    305c:	3308      	adds	r3, #8
    305e:	015b      	lsls	r3, r3, #5
    3060:	5d1a      	ldrb	r2, [r3, r4]
    3062:	3101      	adds	r1, #1
    3064:	b2c9      	uxtb	r1, r1
    3066:	0109      	lsls	r1, r1, #4
    3068:	2070      	movs	r0, #112	; 0x70
    306a:	4001      	ands	r1, r0
    306c:	430a      	orrs	r2, r1
    306e:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    3070:	46a4      	mov	ip, r4
    3072:	4463      	add	r3, ip
    3074:	22a2      	movs	r2, #162	; 0xa2
    3076:	711a      	strb	r2, [r3, #4]
    3078:	e026      	b.n	30c8 <usb_enable_ep+0x10c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    307a:	2280      	movs	r2, #128	; 0x80
    307c:	0552      	lsls	r2, r2, #21
    307e:	e7e7      	b.n	3050 <usb_enable_ep+0x94>
    3080:	2280      	movs	r2, #128	; 0x80
    3082:	0592      	lsls	r2, r2, #22
    3084:	e7e4      	b.n	3050 <usb_enable_ep+0x94>
    3086:	22c0      	movs	r2, #192	; 0xc0
    3088:	0592      	lsls	r2, r2, #22
    308a:	e7e1      	b.n	3050 <usb_enable_ep+0x94>
    308c:	2280      	movs	r2, #128	; 0x80
    308e:	05d2      	lsls	r2, r2, #23
    3090:	e7de      	b.n	3050 <usb_enable_ep+0x94>
    3092:	22a0      	movs	r2, #160	; 0xa0
    3094:	05d2      	lsls	r2, r2, #23
    3096:	e7db      	b.n	3050 <usb_enable_ep+0x94>
    3098:	22e0      	movs	r2, #224	; 0xe0
    309a:	05d2      	lsls	r2, r2, #23
    309c:	e7d8      	b.n	3050 <usb_enable_ep+0x94>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    309e:	2200      	movs	r2, #0
    30a0:	431a      	orrs	r2, r3
    30a2:	4b13      	ldr	r3, [pc, #76]	; (30f0 <usb_enable_ep+0x134>)
    30a4:	0144      	lsls	r4, r0, #5
    30a6:	191b      	adds	r3, r3, r4
    30a8:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    30aa:	4a13      	ldr	r2, [pc, #76]	; (30f8 <usb_enable_ep+0x13c>)
    30ac:	3008      	adds	r0, #8
    30ae:	0140      	lsls	r0, r0, #5
    30b0:	5c83      	ldrb	r3, [r0, r2]
    30b2:	3101      	adds	r1, #1
    30b4:	2407      	movs	r4, #7
    30b6:	4021      	ands	r1, r4
    30b8:	430b      	orrs	r3, r1
    30ba:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    30bc:	4694      	mov	ip, r2
    30be:	4460      	add	r0, ip
    30c0:	2340      	movs	r3, #64	; 0x40
    30c2:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    30c4:	3b2f      	subs	r3, #47	; 0x2f
    30c6:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    30c8:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    30ca:	2280      	movs	r2, #128	; 0x80
    30cc:	0552      	lsls	r2, r2, #21
    30ce:	e7e7      	b.n	30a0 <usb_enable_ep+0xe4>
    30d0:	2280      	movs	r2, #128	; 0x80
    30d2:	0592      	lsls	r2, r2, #22
    30d4:	e7e4      	b.n	30a0 <usb_enable_ep+0xe4>
    30d6:	22c0      	movs	r2, #192	; 0xc0
    30d8:	0592      	lsls	r2, r2, #22
    30da:	e7e1      	b.n	30a0 <usb_enable_ep+0xe4>
    30dc:	2280      	movs	r2, #128	; 0x80
    30de:	05d2      	lsls	r2, r2, #23
    30e0:	e7de      	b.n	30a0 <usb_enable_ep+0xe4>
    30e2:	22a0      	movs	r2, #160	; 0xa0
    30e4:	05d2      	lsls	r2, r2, #23
    30e6:	e7db      	b.n	30a0 <usb_enable_ep+0xe4>
    30e8:	22e0      	movs	r2, #224	; 0xe0
    30ea:	05d2      	lsls	r2, r2, #23
    30ec:	e7d8      	b.n	30a0 <usb_enable_ep+0xe4>
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	200006f8 	.word	0x200006f8
    30f4:	8fffffff 	.word	0x8fffffff
    30f8:	41005000 	.word	0x41005000

000030fc <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    30fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    30fe:	4d12      	ldr	r5, [pc, #72]	; (3148 <usb_ep_start_out+0x4c>)
    3100:	0144      	lsls	r4, r0, #5
    3102:	192b      	adds	r3, r5, r4
    3104:	685e      	ldr	r6, [r3, #4]
    3106:	4f11      	ldr	r7, [pc, #68]	; (314c <usb_ep_start_out+0x50>)
    3108:	403e      	ands	r6, r7
    310a:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    310c:	685e      	ldr	r6, [r3, #4]
    310e:	0392      	lsls	r2, r2, #14
    3110:	4f0f      	ldr	r7, [pc, #60]	; (3150 <usb_ep_start_out+0x54>)
    3112:	403a      	ands	r2, r7
    3114:	4316      	orrs	r6, r2
    3116:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    3118:	685a      	ldr	r2, [r3, #4]
    311a:	0b92      	lsrs	r2, r2, #14
    311c:	0392      	lsls	r2, r2, #14
    311e:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    3120:	685a      	ldr	r2, [r3, #4]
    3122:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    3124:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    3126:	3008      	adds	r0, #8
    3128:	0140      	lsls	r0, r0, #5
    312a:	4b0a      	ldr	r3, [pc, #40]	; (3154 <usb_ep_start_out+0x58>)
    312c:	469c      	mov	ip, r3
    312e:	4460      	add	r0, ip
    3130:	2305      	movs	r3, #5
    3132:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    3134:	4b08      	ldr	r3, [pc, #32]	; (3158 <usb_ep_start_out+0x5c>)
    3136:	469c      	mov	ip, r3
    3138:	4464      	add	r4, ip
    313a:	2301      	movs	r3, #1
    313c:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    313e:	333f      	adds	r3, #63	; 0x3f
    3140:	7103      	strb	r3, [r0, #4]
	return 0;
}
    3142:	2000      	movs	r0, #0
    3144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	200006f8 	.word	0x200006f8
    314c:	f0003fff 	.word	0xf0003fff
    3150:	0fffc000 	.word	0x0fffc000
    3154:	41005000 	.word	0x41005000
    3158:	41005109 	.word	0x41005109

0000315c <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    315c:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    315e:	243f      	movs	r4, #63	; 0x3f
    3160:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    3162:	4c15      	ldr	r4, [pc, #84]	; (31b8 <usb_ep_start_in+0x5c>)
    3164:	0146      	lsls	r6, r0, #5
    3166:	19a4      	adds	r4, r4, r6
    3168:	6965      	ldr	r5, [r4, #20]
    316a:	006d      	lsls	r5, r5, #1
    316c:	086d      	lsrs	r5, r5, #1
    316e:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    3170:	6965      	ldr	r5, [r4, #20]
    3172:	07db      	lsls	r3, r3, #31
    3174:	431d      	orrs	r5, r3
    3176:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    3178:	6963      	ldr	r3, [r4, #20]
    317a:	4d10      	ldr	r5, [pc, #64]	; (31bc <usb_ep_start_in+0x60>)
    317c:	402b      	ands	r3, r5
    317e:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    3180:	6963      	ldr	r3, [r4, #20]
    3182:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    3184:	6963      	ldr	r3, [r4, #20]
    3186:	0b9b      	lsrs	r3, r3, #14
    3188:	039b      	lsls	r3, r3, #14
    318a:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    318c:	6963      	ldr	r3, [r4, #20]
    318e:	0492      	lsls	r2, r2, #18
    3190:	0c92      	lsrs	r2, r2, #18
    3192:	4313      	orrs	r3, r2
    3194:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    3196:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    3198:	3008      	adds	r0, #8
    319a:	0140      	lsls	r0, r0, #5
    319c:	4b08      	ldr	r3, [pc, #32]	; (31c0 <usb_ep_start_in+0x64>)
    319e:	469c      	mov	ip, r3
    31a0:	4460      	add	r0, ip
    31a2:	230a      	movs	r3, #10
    31a4:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    31a6:	4b07      	ldr	r3, [pc, #28]	; (31c4 <usb_ep_start_in+0x68>)
    31a8:	469c      	mov	ip, r3
    31aa:	4466      	add	r6, ip
    31ac:	2302      	movs	r3, #2
    31ae:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    31b0:	337e      	adds	r3, #126	; 0x7e
    31b2:	7143      	strb	r3, [r0, #5]
	return 0;
}
    31b4:	2000      	movs	r0, #0
    31b6:	bd70      	pop	{r4, r5, r6, pc}
    31b8:	200006f8 	.word	0x200006f8
    31bc:	f0003fff 	.word	0xf0003fff
    31c0:	41005000 	.word	0x41005000
    31c4:	41005109 	.word	0x41005109

000031c8 <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    31c8:	b243      	sxtb	r3, r0
    31ca:	2b00      	cmp	r3, #0
    31cc:	db0a      	blt.n	31e4 <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    31ce:	233f      	movs	r3, #63	; 0x3f
    31d0:	4003      	ands	r3, r0
    31d2:	3308      	adds	r3, #8
    31d4:	015b      	lsls	r3, r3, #5
    31d6:	4a09      	ldr	r2, [pc, #36]	; (31fc <usb_ep_pending+0x34>)
    31d8:	4694      	mov	ip, r2
    31da:	4463      	add	r3, ip
    31dc:	79d8      	ldrb	r0, [r3, #7]
    31de:	2301      	movs	r3, #1
    31e0:	4018      	ands	r0, r3
	}
}
    31e2:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    31e4:	233f      	movs	r3, #63	; 0x3f
    31e6:	4003      	ands	r3, r0
    31e8:	3308      	adds	r3, #8
    31ea:	015b      	lsls	r3, r3, #5
    31ec:	4a03      	ldr	r2, [pc, #12]	; (31fc <usb_ep_pending+0x34>)
    31ee:	4694      	mov	ip, r2
    31f0:	4463      	add	r3, ip
    31f2:	79db      	ldrb	r3, [r3, #7]
    31f4:	085b      	lsrs	r3, r3, #1
    31f6:	2001      	movs	r0, #1
    31f8:	4018      	ands	r0, r3
    31fa:	e7f2      	b.n	31e2 <usb_ep_pending+0x1a>
    31fc:	41005000 	.word	0x41005000

00003200 <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    3200:	b243      	sxtb	r3, r0
    3202:	2b00      	cmp	r3, #0
    3204:	db09      	blt.n	321a <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    3206:	233f      	movs	r3, #63	; 0x3f
    3208:	4003      	ands	r3, r0
    320a:	3308      	adds	r3, #8
    320c:	015b      	lsls	r3, r3, #5
    320e:	4a08      	ldr	r2, [pc, #32]	; (3230 <usb_ep_handled+0x30>)
    3210:	4694      	mov	ip, r2
    3212:	4463      	add	r3, ip
    3214:	2201      	movs	r2, #1
    3216:	71da      	strb	r2, [r3, #7]
	}
}
    3218:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    321a:	233f      	movs	r3, #63	; 0x3f
    321c:	4003      	ands	r3, r0
    321e:	3308      	adds	r3, #8
    3220:	015b      	lsls	r3, r3, #5
    3222:	4a03      	ldr	r2, [pc, #12]	; (3230 <usb_ep_handled+0x30>)
    3224:	4694      	mov	ip, r2
    3226:	4463      	add	r3, ip
    3228:	2202      	movs	r2, #2
    322a:	71da      	strb	r2, [r3, #7]
    322c:	e7f4      	b.n	3218 <usb_ep_handled+0x18>
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	41005000 	.word	0x41005000

00003234 <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    3234:	4b03      	ldr	r3, [pc, #12]	; (3244 <usb_ep_out_length+0x10>)
    3236:	0140      	lsls	r0, r0, #5
    3238:	181b      	adds	r3, r3, r0
    323a:	6858      	ldr	r0, [r3, #4]
    323c:	0480      	lsls	r0, r0, #18
    323e:	0c80      	lsrs	r0, r0, #18
}
    3240:	4770      	bx	lr
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	200006f8 	.word	0x200006f8

00003248 <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3248:	4b04      	ldr	r3, [pc, #16]	; (325c <usb_attach+0x14>)
    324a:	2280      	movs	r2, #128	; 0x80
    324c:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    324e:	4a04      	ldr	r2, [pc, #16]	; (3260 <usb_attach+0x18>)
    3250:	8913      	ldrh	r3, [r2, #8]
    3252:	2101      	movs	r1, #1
    3254:	438b      	bics	r3, r1
    3256:	8113      	strh	r3, [r2, #8]
}
    3258:	4770      	bx	lr
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	e000e100 	.word	0xe000e100
    3260:	41005000 	.word	0x41005000

00003264 <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    3264:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    3266:	4903      	ldr	r1, [pc, #12]	; (3274 <usb_ep0_out+0x10>)
    3268:	2240      	movs	r2, #64	; 0x40
    326a:	2000      	movs	r0, #0
    326c:	4b02      	ldr	r3, [pc, #8]	; (3278 <usb_ep0_out+0x14>)
    326e:	4798      	blx	r3
}
    3270:	bd10      	pop	{r4, pc}
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	2000066c 	.word	0x2000066c
    3278:	000030fd 	.word	0x000030fd

0000327c <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    327c:	b510      	push	{r4, lr}
    327e:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    3280:	4902      	ldr	r1, [pc, #8]	; (328c <usb_ep0_in+0x10>)
    3282:	2301      	movs	r3, #1
    3284:	2080      	movs	r0, #128	; 0x80
    3286:	4c02      	ldr	r4, [pc, #8]	; (3290 <usb_ep0_in+0x14>)
    3288:	47a0      	blx	r4
}
    328a:	bd10      	pop	{r4, pc}
    328c:	2000061c 	.word	0x2000061c
    3290:	0000315d 	.word	0x0000315d

00003294 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    3294:	4a02      	ldr	r2, [pc, #8]	; (32a0 <usb_ep0_stall+0xc>)
    3296:	2306      	movs	r3, #6
    3298:	33ff      	adds	r3, #255	; 0xff
    329a:	2130      	movs	r1, #48	; 0x30
    329c:	54d1      	strb	r1, [r2, r3]
}
    329e:	4770      	bx	lr
    32a0:	41005000 	.word	0x41005000

000032a4 <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    32a4:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    32a6:	4b25      	ldr	r3, [pc, #148]	; (333c <usb_handle_function+0x98>)
    32a8:	8c1c      	ldrh	r4, [r3, #32]
    32aa:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    32ac:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    32ae:	071b      	lsls	r3, r3, #28
    32b0:	d410      	bmi.n	32d4 <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    32b2:	07e3      	lsls	r3, r4, #31
    32b4:	d50c      	bpl.n	32d0 <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    32b6:	4921      	ldr	r1, [pc, #132]	; (333c <usb_handle_function+0x98>)
    32b8:	2208      	movs	r2, #8
    32ba:	32ff      	adds	r2, #255	; 0xff
    32bc:	5c8b      	ldrb	r3, [r1, r2]
    32be:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    32c0:	2013      	movs	r0, #19
    32c2:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    32c4:	06db      	lsls	r3, r3, #27
    32c6:	d40d      	bmi.n	32e4 <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    32c8:	07eb      	lsls	r3, r5, #31
    32ca:	d413      	bmi.n	32f4 <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    32cc:	07ad      	lsls	r5, r5, #30
    32ce:	d414      	bmi.n	32fa <usb_handle_function+0x56>
void usb_handle_function() {
    32d0:	2301      	movs	r3, #1
    32d2:	e016      	b.n	3302 <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    32d4:	4b19      	ldr	r3, [pc, #100]	; (333c <usb_handle_function+0x98>)
    32d6:	2208      	movs	r2, #8
    32d8:	839a      	strh	r2, [r3, #28]
		usb_reset();
    32da:	4b19      	ldr	r3, [pc, #100]	; (3340 <usb_handle_function+0x9c>)
    32dc:	4798      	blx	r3
		usb_cb_reset();
    32de:	4b19      	ldr	r3, [pc, #100]	; (3344 <usb_handle_function+0xa0>)
    32e0:	4798      	blx	r3
		goto usb_handle_function_end;
    32e2:	e026      	b.n	3332 <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    32e4:	4818      	ldr	r0, [pc, #96]	; (3348 <usb_handle_function+0xa4>)
    32e6:	4919      	ldr	r1, [pc, #100]	; (334c <usb_handle_function+0xa8>)
    32e8:	3aff      	subs	r2, #255	; 0xff
    32ea:	4b19      	ldr	r3, [pc, #100]	; (3350 <usb_handle_function+0xac>)
    32ec:	4798      	blx	r3
			usb_handle_setup();
    32ee:	4b19      	ldr	r3, [pc, #100]	; (3354 <usb_handle_function+0xb0>)
    32f0:	4798      	blx	r3
    32f2:	e7e9      	b.n	32c8 <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    32f4:	4b18      	ldr	r3, [pc, #96]	; (3358 <usb_handle_function+0xb4>)
    32f6:	4798      	blx	r3
    32f8:	e7e8      	b.n	32cc <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    32fa:	4b18      	ldr	r3, [pc, #96]	; (335c <usb_handle_function+0xb8>)
    32fc:	4798      	blx	r3
    32fe:	e7e7      	b.n	32d0 <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    3300:	3301      	adds	r3, #1
    3302:	4a17      	ldr	r2, [pc, #92]	; (3360 <usb_handle_function+0xbc>)
    3304:	7812      	ldrb	r2, [r2, #0]
    3306:	429a      	cmp	r2, r3
    3308:	dd11      	ble.n	332e <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    330a:	2201      	movs	r2, #1
    330c:	409a      	lsls	r2, r3
    330e:	4214      	tst	r4, r2
    3310:	d0f6      	beq.n	3300 <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    3312:	001a      	movs	r2, r3
    3314:	3208      	adds	r2, #8
    3316:	0152      	lsls	r2, r2, #5
    3318:	4908      	ldr	r1, [pc, #32]	; (333c <usb_handle_function+0x98>)
    331a:	468c      	mov	ip, r1
    331c:	4462      	add	r2, ip
    331e:	79d1      	ldrb	r1, [r2, #7]
    3320:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    3322:	015a      	lsls	r2, r3, #5
    3324:	480f      	ldr	r0, [pc, #60]	; (3364 <usb_handle_function+0xc0>)
    3326:	4684      	mov	ip, r0
    3328:	4462      	add	r2, ip
    332a:	7011      	strb	r1, [r2, #0]
    332c:	e7e8      	b.n	3300 <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    332e:	4b0e      	ldr	r3, [pc, #56]	; (3368 <usb_handle_function+0xc4>)
    3330:	4798      	blx	r3
    3332:	4b0e      	ldr	r3, [pc, #56]	; (336c <usb_handle_function+0xc8>)
    3334:	2280      	movs	r2, #128	; 0x80
    3336:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    3338:	bd70      	pop	{r4, r5, r6, pc}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	41005000 	.word	0x41005000
    3340:	00002e89 	.word	0x00002e89
    3344:	000034ad 	.word	0x000034ad
    3348:	20000660 	.word	0x20000660
    334c:	2000066c 	.word	0x2000066c
    3350:	00005b75 	.word	0x00005b75
    3354:	00002ca1 	.word	0x00002ca1
    3358:	00002ddd 	.word	0x00002ddd
    335c:	00002dfd 	.word	0x00002dfd
    3360:	00006356 	.word	0x00006356
    3364:	41005108 	.word	0x41005108
    3368:	0000357d 	.word	0x0000357d
    336c:	e000e100 	.word	0xe000e100

00003370 <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    3370:	b510      	push	{r4, lr}
    3372:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    3374:	2000      	movs	r0, #0
    3376:	e01c      	b.n	33b2 <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    3378:	0082      	lsls	r2, r0, #2
    337a:	1812      	adds	r2, r2, r0
    337c:	17d4      	asrs	r4, r2, #31
    337e:	2307      	movs	r3, #7
    3380:	0019      	movs	r1, r3
    3382:	4021      	ands	r1, r4
    3384:	1889      	adds	r1, r1, r2
    3386:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    3388:	0f64      	lsrs	r4, r4, #29
    338a:	1912      	adds	r2, r2, r4
    338c:	4013      	ands	r3, r2
    338e:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    3390:	4a0c      	ldr	r2, [pc, #48]	; (33c4 <samd_serial_number_string_descriptor+0x54>)
    3392:	5c8a      	ldrb	r2, [r1, r2]
    3394:	411a      	asrs	r2, r3
    3396:	4c0c      	ldr	r4, [pc, #48]	; (33c8 <samd_serial_number_string_descriptor+0x58>)
    3398:	5d09      	ldrb	r1, [r1, r4]
    339a:	2408      	movs	r4, #8
    339c:	1ae3      	subs	r3, r4, r3
    339e:	4099      	lsls	r1, r3
    33a0:	000b      	movs	r3, r1
    33a2:	4313      	orrs	r3, r2
    33a4:	221f      	movs	r2, #31
    33a6:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    33a8:	4a08      	ldr	r2, [pc, #32]	; (33cc <samd_serial_number_string_descriptor+0x5c>)
    33aa:	5cd2      	ldrb	r2, [r2, r3]
    33ac:	ab01      	add	r3, sp, #4
    33ae:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    33b0:	3001      	adds	r0, #1
    33b2:	2819      	cmp	r0, #25
    33b4:	dde0      	ble.n	3378 <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    33b6:	a801      	add	r0, sp, #4
    33b8:	2300      	movs	r3, #0
    33ba:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    33bc:	4b04      	ldr	r3, [pc, #16]	; (33d0 <samd_serial_number_string_descriptor+0x60>)
    33be:	4798      	blx	r3
}
    33c0:	b008      	add	sp, #32
    33c2:	bd10      	pop	{r4, pc}
    33c4:	0080a00c 	.word	0x0080a00c
    33c8:	0080a00d 	.word	0x0080a00d
    33cc:	00006304 	.word	0x00006304
    33d0:	00002e49 	.word	0x00002e49

000033d4 <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    33d4:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    33d6:	2208      	movs	r2, #8
    33d8:	2103      	movs	r1, #3
    33da:	2081      	movs	r0, #129	; 0x81
    33dc:	4c09      	ldr	r4, [pc, #36]	; (3404 <usb_serial_init+0x30>)
    33de:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    33e0:	2220      	movs	r2, #32
    33e2:	2102      	movs	r1, #2
    33e4:	2002      	movs	r0, #2
    33e6:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    33e8:	2220      	movs	r2, #32
    33ea:	2102      	movs	r1, #2
    33ec:	2082      	movs	r0, #130	; 0x82
    33ee:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    33f0:	4c05      	ldr	r4, [pc, #20]	; (3408 <usb_serial_init+0x34>)
    33f2:	2220      	movs	r2, #32
    33f4:	0021      	movs	r1, r4
    33f6:	2002      	movs	r0, #2
    33f8:	4b04      	ldr	r3, [pc, #16]	; (340c <usb_serial_init+0x38>)
    33fa:	4798      	blx	r3
	
	usb_tx_busy = false;
    33fc:	2320      	movs	r3, #32
    33fe:	2200      	movs	r2, #0
    3400:	54e2      	strb	r2, [r4, r3]
}
    3402:	bd10      	pop	{r4, pc}
    3404:	00002fbd 	.word	0x00002fbd
    3408:	200006ac 	.word	0x200006ac
    340c:	000030fd 	.word	0x000030fd

00003410 <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    3410:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    3412:	2002      	movs	r0, #2
    3414:	4b02      	ldr	r3, [pc, #8]	; (3420 <usb_serial_out_completion+0x10>)
    3416:	4798      	blx	r3
    3418:	4b02      	ldr	r3, [pc, #8]	; (3424 <usb_serial_out_completion+0x14>)
    341a:	6258      	str	r0, [r3, #36]	; 0x24
}
    341c:	bd10      	pop	{r4, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	00003235 	.word	0x00003235
    3424:	200006ac 	.word	0x200006ac

00003428 <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    3428:	4b02      	ldr	r3, [pc, #8]	; (3434 <usb_serial_in_completion+0xc>)
    342a:	2220      	movs	r2, #32
    342c:	2100      	movs	r1, #0
    342e:	5499      	strb	r1, [r3, r2]
}
    3430:	4770      	bx	lr
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	200006ac 	.word	0x200006ac

00003438 <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    3438:	b570      	push	{r4, r5, r6, lr}
    343a:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    343c:	2920      	cmp	r1, #32
    343e:	dd00      	ble.n	3442 <usb_serial_send_buffer+0xa>
    3440:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    3442:	4d09      	ldr	r5, [pc, #36]	; (3468 <usb_serial_send_buffer+0x30>)
    3444:	002e      	movs	r6, r5
    3446:	3628      	adds	r6, #40	; 0x28
    3448:	0022      	movs	r2, r4
    344a:	0001      	movs	r1, r0
    344c:	0030      	movs	r0, r6
    344e:	4b07      	ldr	r3, [pc, #28]	; (346c <usb_serial_send_buffer+0x34>)
    3450:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    3452:	2300      	movs	r3, #0
    3454:	0022      	movs	r2, r4
    3456:	0031      	movs	r1, r6
    3458:	2082      	movs	r0, #130	; 0x82
    345a:	4e05      	ldr	r6, [pc, #20]	; (3470 <usb_serial_send_buffer+0x38>)
    345c:	47b0      	blx	r6
	usb_tx_busy = true;
    345e:	2320      	movs	r3, #32
    3460:	2201      	movs	r2, #1
    3462:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    3464:	0020      	movs	r0, r4
    3466:	bd70      	pop	{r4, r5, r6, pc}
    3468:	200006ac 	.word	0x200006ac
    346c:	00005b75 	.word	0x00005b75
    3470:	0000315d 	.word	0x0000315d

00003474 <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    3474:	b570      	push	{r4, r5, r6, lr}
    3476:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    3478:	4b09      	ldr	r3, [pc, #36]	; (34a0 <usb_serial_read_buffer+0x2c>)
    347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    347c:	4299      	cmp	r1, r3
    347e:	d901      	bls.n	3484 <usb_serial_read_buffer+0x10>
    3480:	4b07      	ldr	r3, [pc, #28]	; (34a0 <usb_serial_read_buffer+0x2c>)
    3482:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    3484:	4d06      	ldr	r5, [pc, #24]	; (34a0 <usb_serial_read_buffer+0x2c>)
    3486:	0022      	movs	r2, r4
    3488:	0029      	movs	r1, r5
    348a:	4b06      	ldr	r3, [pc, #24]	; (34a4 <usb_serial_read_buffer+0x30>)
    348c:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    348e:	2220      	movs	r2, #32
    3490:	0029      	movs	r1, r5
    3492:	2002      	movs	r0, #2
    3494:	4b04      	ldr	r3, [pc, #16]	; (34a8 <usb_serial_read_buffer+0x34>)
    3496:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    3498:	2300      	movs	r3, #0
    349a:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    349c:	0020      	movs	r0, r4
    349e:	bd70      	pop	{r4, r5, r6, pc}
    34a0:	200006ac 	.word	0x200006ac
    34a4:	00005b75 	.word	0x00005b75
    34a8:	000030fd 	.word	0x000030fd

000034ac <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    34ac:	4770      	bx	lr
	...

000034b0 <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    34b0:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    34b2:	4b2a      	ldr	r3, [pc, #168]	; (355c <usb_cb_control_setup+0xac>)
    34b4:	781a      	ldrb	r2, [r3, #0]
    34b6:	2360      	movs	r3, #96	; 0x60
    34b8:	4013      	ands	r3, r2
    34ba:	2b20      	cmp	r3, #32
    34bc:	d000      	beq.n	34c0 <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    34be:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    34c0:	4b26      	ldr	r3, [pc, #152]	; (355c <usb_cb_control_setup+0xac>)
    34c2:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    34c4:	231f      	movs	r3, #31
    34c6:	4013      	ands	r3, r2
    34c8:	2b01      	cmp	r3, #1
    34ca:	d144      	bne.n	3556 <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    34cc:	2900      	cmp	r1, #0
    34ce:	d1f6      	bne.n	34be <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    34d0:	4b22      	ldr	r3, [pc, #136]	; (355c <usb_cb_control_setup+0xac>)
    34d2:	785b      	ldrb	r3, [r3, #1]
    34d4:	2b22      	cmp	r3, #34	; 0x22
    34d6:	d031      	beq.n	353c <usb_cb_control_setup+0x8c>
    34d8:	d80c      	bhi.n	34f4 <usb_cb_control_setup+0x44>
    34da:	2b20      	cmp	r3, #32
    34dc:	d026      	beq.n	352c <usb_cb_control_setup+0x7c>
    34de:	2b21      	cmp	r3, #33	; 0x21
    34e0:	d136      	bne.n	3550 <usb_cb_control_setup+0xa0>
    34e2:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    34e4:	2b06      	cmp	r3, #6
    34e6:	d823      	bhi.n	3530 <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    34e8:	4a1d      	ldr	r2, [pc, #116]	; (3560 <usb_cb_control_setup+0xb0>)
    34ea:	5cd1      	ldrb	r1, [r2, r3]
    34ec:	4a1d      	ldr	r2, [pc, #116]	; (3564 <usb_cb_control_setup+0xb4>)
    34ee:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    34f0:	3301      	adds	r3, #1
    34f2:	e7f7      	b.n	34e4 <usb_cb_control_setup+0x34>
    34f4:	2b23      	cmp	r3, #35	; 0x23
    34f6:	d12b      	bne.n	3550 <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    34f8:	2000      	movs	r0, #0
    34fa:	4b1b      	ldr	r3, [pc, #108]	; (3568 <usb_cb_control_setup+0xb8>)
    34fc:	4798      	blx	r3
					usb_ep0_out();
    34fe:	4b1b      	ldr	r3, [pc, #108]	; (356c <usb_cb_control_setup+0xbc>)
    3500:	4798      	blx	r3
					break;
    3502:	e7dc      	b.n	34be <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    3504:	4b16      	ldr	r3, [pc, #88]	; (3560 <usb_cb_control_setup+0xb0>)
    3506:	491a      	ldr	r1, [pc, #104]	; (3570 <usb_cb_control_setup+0xc0>)
    3508:	5c89      	ldrb	r1, [r1, r2]
    350a:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    350c:	3201      	adds	r2, #1
    350e:	4b13      	ldr	r3, [pc, #76]	; (355c <usb_cb_control_setup+0xac>)
    3510:	7999      	ldrb	r1, [r3, #6]
    3512:	79db      	ldrb	r3, [r3, #7]
    3514:	021b      	lsls	r3, r3, #8
    3516:	430b      	orrs	r3, r1
    3518:	4293      	cmp	r3, r2
    351a:	dd01      	ble.n	3520 <usb_cb_control_setup+0x70>
    351c:	2a06      	cmp	r2, #6
    351e:	d9f1      	bls.n	3504 <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    3520:	2000      	movs	r0, #0
    3522:	4b11      	ldr	r3, [pc, #68]	; (3568 <usb_cb_control_setup+0xb8>)
    3524:	4798      	blx	r3
					usb_ep0_out();
    3526:	4b11      	ldr	r3, [pc, #68]	; (356c <usb_cb_control_setup+0xbc>)
    3528:	4798      	blx	r3
					break;
    352a:	e7c8      	b.n	34be <usb_cb_control_setup+0xe>
    352c:	2200      	movs	r2, #0
    352e:	e7ee      	b.n	350e <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    3530:	2007      	movs	r0, #7
    3532:	4b0d      	ldr	r3, [pc, #52]	; (3568 <usb_cb_control_setup+0xb8>)
    3534:	4798      	blx	r3
					usb_ep0_out();
    3536:	4b0d      	ldr	r3, [pc, #52]	; (356c <usb_cb_control_setup+0xbc>)
    3538:	4798      	blx	r3
					break;
    353a:	e7c0      	b.n	34be <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    353c:	4b07      	ldr	r3, [pc, #28]	; (355c <usb_cb_control_setup+0xac>)
    353e:	789a      	ldrb	r2, [r3, #2]
    3540:	4b0c      	ldr	r3, [pc, #48]	; (3574 <usb_cb_control_setup+0xc4>)
    3542:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    3544:	2000      	movs	r0, #0
    3546:	4b08      	ldr	r3, [pc, #32]	; (3568 <usb_cb_control_setup+0xb8>)
    3548:	4798      	blx	r3
					usb_ep0_out();
    354a:	4b08      	ldr	r3, [pc, #32]	; (356c <usb_cb_control_setup+0xbc>)
    354c:	4798      	blx	r3
					break;
    354e:	e7b6      	b.n	34be <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    3550:	4b09      	ldr	r3, [pc, #36]	; (3578 <usb_cb_control_setup+0xc8>)
    3552:	4798      	blx	r3
					break;
    3554:	e7b3      	b.n	34be <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    3556:	4b08      	ldr	r3, [pc, #32]	; (3578 <usb_cb_control_setup+0xc8>)
    3558:	4798      	blx	r3
}
    355a:	e7b0      	b.n	34be <usb_cb_control_setup+0xe>
    355c:	20000660 	.word	0x20000660
    3560:	200000a4 	.word	0x200000a4
    3564:	2000061c 	.word	0x2000061c
    3568:	0000327d 	.word	0x0000327d
    356c:	00003265 	.word	0x00003265
    3570:	2000066c 	.word	0x2000066c
    3574:	200006f4 	.word	0x200006f4
    3578:	00003295 	.word	0x00003295

0000357c <usb_cb_completion>:

void usb_cb_completion(void) {
    357c:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    357e:	2002      	movs	r0, #2
    3580:	4b0a      	ldr	r3, [pc, #40]	; (35ac <usb_cb_completion+0x30>)
    3582:	4798      	blx	r3
    3584:	2800      	cmp	r0, #0
    3586:	d105      	bne.n	3594 <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    3588:	2082      	movs	r0, #130	; 0x82
    358a:	4b08      	ldr	r3, [pc, #32]	; (35ac <usb_cb_completion+0x30>)
    358c:	4798      	blx	r3
    358e:	2800      	cmp	r0, #0
    3590:	d106      	bne.n	35a0 <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    3592:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    3594:	2002      	movs	r0, #2
    3596:	4b06      	ldr	r3, [pc, #24]	; (35b0 <usb_cb_completion+0x34>)
    3598:	4798      	blx	r3
		usb_serial_out_completion();
    359a:	4b06      	ldr	r3, [pc, #24]	; (35b4 <usb_cb_completion+0x38>)
    359c:	4798      	blx	r3
    359e:	e7f3      	b.n	3588 <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    35a0:	2082      	movs	r0, #130	; 0x82
    35a2:	4b03      	ldr	r3, [pc, #12]	; (35b0 <usb_cb_completion+0x34>)
    35a4:	4798      	blx	r3
		usb_serial_in_completion();
    35a6:	4b04      	ldr	r3, [pc, #16]	; (35b8 <usb_cb_completion+0x3c>)
    35a8:	4798      	blx	r3
}
    35aa:	e7f2      	b.n	3592 <usb_cb_completion+0x16>
    35ac:	000031c9 	.word	0x000031c9
    35b0:	00003201 	.word	0x00003201
    35b4:	00003411 	.word	0x00003411
    35b8:	00003429 	.word	0x00003429

000035bc <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    35bc:	4770      	bx	lr

000035be <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    35be:	4770      	bx	lr

000035c0 <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    35c0:	b510      	push	{r4, lr}
	if (config <= 1) {
    35c2:	2801      	cmp	r0, #1
    35c4:	d901      	bls.n	35ca <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    35c6:	2000      	movs	r0, #0
}
    35c8:	bd10      	pop	{r4, pc}
		usb_serial_init();
    35ca:	4b02      	ldr	r3, [pc, #8]	; (35d4 <usb_cb_set_configuration+0x14>)
    35cc:	4798      	blx	r3
		return true;
    35ce:	2001      	movs	r0, #1
    35d0:	e7fa      	b.n	35c8 <usb_cb_set_configuration+0x8>
    35d2:	46c0      	nop			; (mov r8, r8)
    35d4:	000033d5 	.word	0x000033d5

000035d8 <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    35d8:	2800      	cmp	r0, #0
    35da:	d003      	beq.n	35e4 <usb_cb_set_interface+0xc>
    35dc:	2801      	cmp	r0, #1
    35de:	d005      	beq.n	35ec <usb_cb_set_interface+0x14>
    35e0:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    35e2:	4770      	bx	lr
		if (altsetting == 0) return true;
    35e4:	2900      	cmp	r1, #0
    35e6:	d005      	beq.n	35f4 <usb_cb_set_interface+0x1c>
	return false;
    35e8:	2000      	movs	r0, #0
    35ea:	e7fa      	b.n	35e2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    35ec:	2900      	cmp	r1, #0
    35ee:	d003      	beq.n	35f8 <usb_cb_set_interface+0x20>
	return false;
    35f0:	2000      	movs	r0, #0
    35f2:	e7f6      	b.n	35e2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    35f4:	2001      	movs	r0, #1
    35f6:	e7f4      	b.n	35e2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    35f8:	2001      	movs	r0, #1
    35fa:	e7f2      	b.n	35e2 <usb_cb_set_interface+0xa>

000035fc <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    35fc:	b510      	push	{r4, lr}
    35fe:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    3600:	2802      	cmp	r0, #2
    3602:	d028      	beq.n	3656 <usb_cb_get_descriptor+0x5a>
    3604:	2803      	cmp	r0, #3
    3606:	d008      	beq.n	361a <usb_cb_get_descriptor+0x1e>
    3608:	2801      	cmp	r0, #1
    360a:	d003      	beq.n	3614 <usb_cb_get_descriptor+0x18>
    360c:	2000      	movs	r0, #0
    360e:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    3610:	6023      	str	r3, [r4, #0]
	return size;
    3612:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    3614:	3011      	adds	r0, #17
		address = &device_descriptor;
    3616:	4b11      	ldr	r3, [pc, #68]	; (365c <usb_cb_get_descriptor+0x60>)
    3618:	e7fa      	b.n	3610 <usb_cb_get_descriptor+0x14>
		switch (index) {
    361a:	2902      	cmp	r1, #2
    361c:	d00f      	beq.n	363e <usb_cb_get_descriptor+0x42>
    361e:	d808      	bhi.n	3632 <usb_cb_get_descriptor+0x36>
    3620:	2900      	cmp	r1, #0
    3622:	d015      	beq.n	3650 <usb_cb_get_descriptor+0x54>
    3624:	2901      	cmp	r1, #1
    3626:	d10f      	bne.n	3648 <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    3628:	480d      	ldr	r0, [pc, #52]	; (3660 <usb_cb_get_descriptor+0x64>)
    362a:	4b0e      	ldr	r3, [pc, #56]	; (3664 <usb_cb_get_descriptor+0x68>)
    362c:	4798      	blx	r3
    362e:	0003      	movs	r3, r0
			break;
    3630:	e00f      	b.n	3652 <usb_cb_get_descriptor+0x56>
    3632:	2903      	cmp	r1, #3
    3634:	d108      	bne.n	3648 <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    3636:	4b0c      	ldr	r3, [pc, #48]	; (3668 <usb_cb_get_descriptor+0x6c>)
    3638:	4798      	blx	r3
    363a:	0003      	movs	r3, r0
			break;
    363c:	e009      	b.n	3652 <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    363e:	480b      	ldr	r0, [pc, #44]	; (366c <usb_cb_get_descriptor+0x70>)
    3640:	4b08      	ldr	r3, [pc, #32]	; (3664 <usb_cb_get_descriptor+0x68>)
    3642:	4798      	blx	r3
    3644:	0003      	movs	r3, r0
			break;
    3646:	e004      	b.n	3652 <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    3648:	2300      	movs	r3, #0
    364a:	6023      	str	r3, [r4, #0]
			return 0;
    364c:	2000      	movs	r0, #0
    364e:	e7e0      	b.n	3612 <usb_cb_get_descriptor+0x16>
    3650:	4b07      	ldr	r3, [pc, #28]	; (3670 <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    3652:	7818      	ldrb	r0, [r3, #0]
		break;
    3654:	e7dc      	b.n	3610 <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    3656:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    3658:	4b06      	ldr	r3, [pc, #24]	; (3674 <usb_cb_get_descriptor+0x78>)
    365a:	e7d9      	b.n	3610 <usb_cb_get_descriptor+0x14>
    365c:	00006344 	.word	0x00006344
    3660:	00006328 	.word	0x00006328
    3664:	00002e49 	.word	0x00002e49
    3668:	00003371 	.word	0x00003371
    366c:	00006338 	.word	0x00006338
    3670:	00006340 	.word	0x00006340
    3674:	200000ac 	.word	0x200000ac

00003678 <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    3678:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    367a:	4b07      	ldr	r3, [pc, #28]	; (3698 <rtos_init+0x20>)
    367c:	4798      	blx	r3
	#endif
	
	time_init();
    367e:	4b07      	ldr	r3, [pc, #28]	; (369c <rtos_init+0x24>)
    3680:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    3682:	2180      	movs	r1, #128	; 0x80
    3684:	03c9      	lsls	r1, r1, #15
    3686:	2001      	movs	r0, #1
    3688:	4b05      	ldr	r3, [pc, #20]	; (36a0 <rtos_init+0x28>)
    368a:	4798      	blx	r3
	#endif
	
	init_process_queue();
    368c:	4b05      	ldr	r3, [pc, #20]	; (36a4 <rtos_init+0x2c>)
    368e:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    3690:	4b05      	ldr	r3, [pc, #20]	; (36a8 <rtos_init+0x30>)
    3692:	4798      	blx	r3
	#endif
	
	return true;
}
    3694:	2001      	movs	r0, #1
    3696:	bd10      	pop	{r4, pc}
    3698:	000028d9 	.word	0x000028d9
    369c:	000029ad 	.word	0x000029ad
    36a0:	000023bd 	.word	0x000023bd
    36a4:	00003895 	.word	0x00003895
    36a8:	00002a21 	.word	0x00002a21

000036ac <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    36ac:	b570      	push	{r4, r5, r6, lr}
    36ae:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    36b0:	e011      	b.n	36d6 <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    36b2:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    36b4:	2680      	movs	r6, #128	; 0x80
    36b6:	03f6      	lsls	r6, r6, #15
    36b8:	0031      	movs	r1, r6
    36ba:	2001      	movs	r0, #1
    36bc:	4b0c      	ldr	r3, [pc, #48]	; (36f0 <morse+0x44>)
    36be:	4798      	blx	r3
		delay_ms(delay);
    36c0:	480c      	ldr	r0, [pc, #48]	; (36f4 <morse+0x48>)
    36c2:	4368      	muls	r0, r5
    36c4:	4d0c      	ldr	r5, [pc, #48]	; (36f8 <morse+0x4c>)
    36c6:	47a8      	blx	r5
		led_off();
    36c8:	0031      	movs	r1, r6
    36ca:	2001      	movs	r0, #1
    36cc:	4b0b      	ldr	r3, [pc, #44]	; (36fc <morse+0x50>)
    36ce:	4798      	blx	r3
		delay_ms(100);
    36d0:	480b      	ldr	r0, [pc, #44]	; (3700 <morse+0x54>)
    36d2:	47a8      	blx	r5
		++c;
    36d4:	3401      	adds	r4, #1
	while (*c != '\0') {
    36d6:	7823      	ldrb	r3, [r4, #0]
    36d8:	2b00      	cmp	r3, #0
    36da:	d007      	beq.n	36ec <morse+0x40>
		if (*c == '.') delay = 100;
    36dc:	2b2e      	cmp	r3, #46	; 0x2e
    36de:	d0e8      	beq.n	36b2 <morse+0x6>
		else if (*c == '-') delay = 200;
    36e0:	2b2d      	cmp	r3, #45	; 0x2d
    36e2:	d001      	beq.n	36e8 <morse+0x3c>
		int delay = 0;
    36e4:	2500      	movs	r5, #0
    36e6:	e7e5      	b.n	36b4 <morse+0x8>
		else if (*c == '-') delay = 200;
    36e8:	25c8      	movs	r5, #200	; 0xc8
    36ea:	e7e3      	b.n	36b4 <morse+0x8>
	}
}
    36ec:	bd70      	pop	{r4, r5, r6, pc}
    36ee:	46c0      	nop			; (mov r8, r8)
    36f0:	000023cd 	.word	0x000023cd
    36f4:	00001770 	.word	0x00001770
    36f8:	0000299d 	.word	0x0000299d
    36fc:	000023dd 	.word	0x000023dd
    3700:	000927c0 	.word	0x000927c0

00003704 <SOS>:

void SOS() {
    3704:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3706:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    3708:	4803      	ldr	r0, [pc, #12]	; (3718 <SOS+0x14>)
    370a:	4b04      	ldr	r3, [pc, #16]	; (371c <SOS+0x18>)
    370c:	4798      	blx	r3
		delay_ms(600);
    370e:	4804      	ldr	r0, [pc, #16]	; (3720 <SOS+0x1c>)
    3710:	4b04      	ldr	r3, [pc, #16]	; (3724 <SOS+0x20>)
    3712:	4798      	blx	r3
	while(1) {
    3714:	e7f8      	b.n	3708 <SOS+0x4>
    3716:	46c0      	nop			; (mov r8, r8)
    3718:	00006358 	.word	0x00006358
    371c:	000036ad 	.word	0x000036ad
    3720:	0036ee80 	.word	0x0036ee80
    3724:	0000299d 	.word	0x0000299d

00003728 <rtos_main>:
int rtos_main(void) {
    3728:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    372a:	4b13      	ldr	r3, [pc, #76]	; (3778 <rtos_main+0x50>)
    372c:	4798      	blx	r3
	mainproc = &_mainproc;
    372e:	4c13      	ldr	r4, [pc, #76]	; (377c <rtos_main+0x54>)
    3730:	1d20      	adds	r0, r4, #4
    3732:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    3734:	2380      	movs	r3, #128	; 0x80
    3736:	22c0      	movs	r2, #192	; 0xc0
    3738:	4911      	ldr	r1, [pc, #68]	; (3780 <rtos_main+0x58>)
    373a:	00db      	lsls	r3, r3, #3
    373c:	0092      	lsls	r2, r2, #2
    373e:	4d11      	ldr	r5, [pc, #68]	; (3784 <rtos_main+0x5c>)
    3740:	47a8      	blx	r5
	dispatch_process(mainproc);
    3742:	6820      	ldr	r0, [r4, #0]
    3744:	4b10      	ldr	r3, [pc, #64]	; (3788 <rtos_main+0x60>)
    3746:	4798      	blx	r3
	while (process_count) {
    3748:	e001      	b.n	374e <rtos_main+0x26>
		dispatch_process(lastproc);
    374a:	4b0f      	ldr	r3, [pc, #60]	; (3788 <rtos_main+0x60>)
    374c:	4798      	blx	r3
	while (process_count) {
    374e:	4b0f      	ldr	r3, [pc, #60]	; (378c <rtos_main+0x64>)
    3750:	681b      	ldr	r3, [r3, #0]
    3752:	2b00      	cmp	r3, #0
    3754:	d003      	beq.n	375e <rtos_main+0x36>
		if (!(lastproc = next_process())) break;
    3756:	4b0e      	ldr	r3, [pc, #56]	; (3790 <rtos_main+0x68>)
    3758:	4798      	blx	r3
    375a:	2800      	cmp	r0, #0
    375c:	d1f5      	bne.n	374a <rtos_main+0x22>
	if (process_count) SOS();
    375e:	4b0b      	ldr	r3, [pc, #44]	; (378c <rtos_main+0x64>)
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	2b00      	cmp	r3, #0
    3764:	d106      	bne.n	3774 <rtos_main+0x4c>
	led_on();
    3766:	2180      	movs	r1, #128	; 0x80
    3768:	03c9      	lsls	r1, r1, #15
    376a:	2001      	movs	r0, #1
    376c:	4b09      	ldr	r3, [pc, #36]	; (3794 <rtos_main+0x6c>)
    376e:	4798      	blx	r3
}
    3770:	2000      	movs	r0, #0
    3772:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    3774:	4b08      	ldr	r3, [pc, #32]	; (3798 <rtos_main+0x70>)
    3776:	4798      	blx	r3
    3778:	00003679 	.word	0x00003679
    377c:	20000778 	.word	0x20000778
    3780:	00001575 	.word	0x00001575
    3784:	000037c5 	.word	0x000037c5
    3788:	000038a9 	.word	0x000038a9
    378c:	200007b0 	.word	0x200007b0
    3790:	0000395d 	.word	0x0000395d
    3794:	000023cd 	.word	0x000023cd
    3798:	00003705 	.word	0x00003705

0000379c <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    379c:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    379e:	4b05      	ldr	r3, [pc, #20]	; (37b4 <TC4_Handler+0x18>)
    37a0:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    37a2:	4b05      	ldr	r3, [pc, #20]	; (37b8 <TC4_Handler+0x1c>)
    37a4:	681c      	ldr	r4, [r3, #0]
    37a6:	4b05      	ldr	r3, [pc, #20]	; (37bc <TC4_Handler+0x20>)
    37a8:	4798      	blx	r3
    37aa:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    37ac:	2001      	movs	r0, #1
    37ae:	4b04      	ldr	r3, [pc, #16]	; (37c0 <TC4_Handler+0x24>)
    37b0:	4798      	blx	r3
}
    37b2:	bd10      	pop	{r4, pc}
    37b4:	00002a61 	.word	0x00002a61
    37b8:	200007a4 	.word	0x200007a4
    37bc:	00002a15 	.word	0x00002a15
    37c0:	00003acd 	.word	0x00003acd

000037c4 <init_process>:
// 	// jump to process
// 	((void (*)(void))(current_process->data + 1))();
// }


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    37c4:	b510      	push	{r4, lr}
    37c6:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    37c8:	4807      	ldr	r0, [pc, #28]	; (37e8 <init_process+0x24>)
    37ca:	1a82      	subs	r2, r0, r2
    37cc:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    37ce:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    37d0:	1e4b      	subs	r3, r1, #1
    37d2:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    37d4:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    37d6:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    37d8:	4b04      	ldr	r3, [pc, #16]	; (37ec <init_process+0x28>)
    37da:	4798      	blx	r3
    37dc:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    37de:	2300      	movs	r3, #0
    37e0:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    37e2:	2224      	movs	r2, #36	; 0x24
    37e4:	54a3      	strb	r3, [r4, r2]
	#endif
}
    37e6:	bd10      	pop	{r4, pc}
    37e8:	20002a00 	.word	0x20002a00
    37ec:	00002a15 	.word	0x00002a15

000037f0 <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    37f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37f2:	465f      	mov	r7, fp
    37f4:	4656      	mov	r6, sl
    37f6:	464d      	mov	r5, r9
    37f8:	4644      	mov	r4, r8
    37fa:	b4f0      	push	{r4, r5, r6, r7}
    37fc:	b083      	sub	sp, #12
    37fe:	9001      	str	r0, [sp, #4]
    3800:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    3802:	2324      	movs	r3, #36	; 0x24
    3804:	5cc3      	ldrb	r3, [r0, r3]
    3806:	2b00      	cmp	r3, #0
    3808:	d122      	bne.n	3850 <switch_process+0x60>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    380a:	4b1b      	ldr	r3, [pc, #108]	; (3878 <switch_process+0x88>)
    380c:	9a01      	ldr	r2, [sp, #4]
    380e:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    3810:	2303      	movs	r3, #3
    3812:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    3814:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3816:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    381a:	2302      	movs	r3, #2
    381c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3820:	f3bf 8f6f 	isb	sy
	USE_PSP();
	
	// __enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    3824:	9201      	str	r2, [sp, #4]
    3826:	6813      	ldr	r3, [r2, #0]
    3828:	3301      	adds	r3, #1
    382a:	4798      	blx	r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    382c:	2300      	movs	r3, #0
    382e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3832:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    3836:	3324      	adds	r3, #36	; 0x24
    3838:	9a01      	ldr	r2, [sp, #4]
    383a:	5cd3      	ldrb	r3, [r2, r3]
    383c:	2b00      	cmp	r3, #0
    383e:	d118      	bne.n	3872 <switch_process+0x82>
  __ASM volatile ("cpsie i" : : : "memory");
    3840:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    3842:	b003      	add	sp, #12
    3844:	bcf0      	pop	{r4, r5, r6, r7}
    3846:	46bb      	mov	fp, r7
    3848:	46b2      	mov	sl, r6
    384a:	46a9      	mov	r9, r5
    384c:	46a0      	mov	r8, r4
    384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    3850:	4b0a      	ldr	r3, [pc, #40]	; (387c <switch_process+0x8c>)
    3852:	4798      	blx	r3
    3854:	4b0a      	ldr	r3, [pc, #40]	; (3880 <switch_process+0x90>)
    3856:	681a      	ldr	r2, [r3, #0]
    3858:	0153      	lsls	r3, r2, #5
    385a:	1a9b      	subs	r3, r3, r2
    385c:	009b      	lsls	r3, r3, #2
    385e:	189b      	adds	r3, r3, r2
    3860:	00db      	lsls	r3, r3, #3
    3862:	18c0      	adds	r0, r0, r3
    3864:	4b07      	ldr	r3, [pc, #28]	; (3884 <switch_process+0x94>)
    3866:	4798      	blx	r3
		preempt_clear_interrupts();
    3868:	4b07      	ldr	r3, [pc, #28]	; (3888 <switch_process+0x98>)
    386a:	4798      	blx	r3
		preempt_enable_interrupts();
    386c:	4b07      	ldr	r3, [pc, #28]	; (388c <switch_process+0x9c>)
    386e:	4798      	blx	r3
    3870:	e7cb      	b.n	380a <switch_process+0x1a>
		preempt_disable_interrupts();
    3872:	4b07      	ldr	r3, [pc, #28]	; (3890 <switch_process+0xa0>)
    3874:	4798      	blx	r3
    3876:	e7e3      	b.n	3840 <switch_process+0x50>
    3878:	200007a4 	.word	0x200007a4
    387c:	00002a15 	.word	0x00002a15
    3880:	00006394 	.word	0x00006394
    3884:	00002a7d 	.word	0x00002a7d
    3888:	00002a61 	.word	0x00002a61
    388c:	00002a39 	.word	0x00002a39
    3890:	00002a49 	.word	0x00002a49

00003894 <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    3894:	4b03      	ldr	r3, [pc, #12]	; (38a4 <init_process_queue+0x10>)
    3896:	2200      	movs	r2, #0
    3898:	605a      	str	r2, [r3, #4]
    389a:	609a      	str	r2, [r3, #8]
	current_process = 0;
    389c:	601a      	str	r2, [r3, #0]
	process_count = 0;
    389e:	60da      	str	r2, [r3, #12]
}
    38a0:	4770      	bx	lr
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	200007a4 	.word	0x200007a4

000038a8 <dispatch_process>:

bool dispatch_process(Process* process) {
    38a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38aa:	464f      	mov	r7, r9
    38ac:	4646      	mov	r6, r8
    38ae:	b4c0      	push	{r6, r7}
    38b0:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    38b2:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    38b4:	6983      	ldr	r3, [r0, #24]
    38b6:	2b03      	cmp	r3, #3
    38b8:	d049      	beq.n	394e <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    38ba:	4b26      	ldr	r3, [pc, #152]	; (3954 <dispatch_process+0xac>)
    38bc:	68db      	ldr	r3, [r3, #12]
    38be:	2b0f      	cmp	r3, #15
    38c0:	dd04      	ble.n	38cc <dispatch_process+0x24>
    38c2:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    38c4:	bcc0      	pop	{r6, r7}
    38c6:	46b9      	mov	r9, r7
    38c8:	46b0      	mov	r8, r6
    38ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    38cc:	4b22      	ldr	r3, [pc, #136]	; (3958 <dispatch_process+0xb0>)
    38ce:	4798      	blx	r3
    38d0:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    38d2:	464b      	mov	r3, r9
    38d4:	699b      	ldr	r3, [r3, #24]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d007      	beq.n	38ea <dispatch_process+0x42>
    38da:	464b      	mov	r3, r9
    38dc:	695f      	ldr	r7, [r3, #20]
    38de:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    38e0:	4b1c      	ldr	r3, [pc, #112]	; (3954 <dispatch_process+0xac>)
    38e2:	685b      	ldr	r3, [r3, #4]
    38e4:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    38e6:	2500      	movs	r5, #0
    38e8:	e00c      	b.n	3904 <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    38ea:	2700      	movs	r7, #0
    38ec:	e7f8      	b.n	38e0 <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    38ee:	3110      	adds	r1, #16
    38f0:	e00e      	b.n	3910 <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    38f2:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    38f4:	42ba      	cmp	r2, r7
    38f6:	dd16      	ble.n	3926 <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    38f8:	4a16      	ldr	r2, [pc, #88]	; (3954 <dispatch_process+0xac>)
    38fa:	009e      	lsls	r6, r3, #2
    38fc:	1993      	adds	r3, r2, r6
    38fe:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    3900:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    3902:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    3904:	4a13      	ldr	r2, [pc, #76]	; (3954 <dispatch_process+0xac>)
    3906:	68d6      	ldr	r6, [r2, #12]
    3908:	42ae      	cmp	r6, r5
    390a:	dd0c      	ble.n	3926 <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    390c:	1e59      	subs	r1, r3, #1
    390e:	d4ee      	bmi.n	38ee <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    3910:	4a10      	ldr	r2, [pc, #64]	; (3954 <dispatch_process+0xac>)
    3912:	0088      	lsls	r0, r1, #2
    3914:	1812      	adds	r2, r2, r0
    3916:	6910      	ldr	r0, [r2, #16]
    3918:	6982      	ldr	r2, [r0, #24]
    391a:	2a00      	cmp	r2, #0
    391c:	d0e9      	beq.n	38f2 <dispatch_process+0x4a>
    391e:	6942      	ldr	r2, [r0, #20]
    3920:	4644      	mov	r4, r8
    3922:	1b12      	subs	r2, r2, r4
    3924:	e7e6      	b.n	38f4 <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    3926:	4a0b      	ldr	r2, [pc, #44]	; (3954 <dispatch_process+0xac>)
    3928:	009b      	lsls	r3, r3, #2
    392a:	18d3      	adds	r3, r2, r3
    392c:	4649      	mov	r1, r9
    392e:	6119      	str	r1, [r3, #16]
	++process_count;
    3930:	1c73      	adds	r3, r6, #1
    3932:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    3934:	4666      	mov	r6, ip
    3936:	3601      	adds	r6, #1
    3938:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    393a:	17f1      	asrs	r1, r6, #31
    393c:	0f09      	lsrs	r1, r1, #28
    393e:	1876      	adds	r6, r6, r1
    3940:	230f      	movs	r3, #15
    3942:	4033      	ands	r3, r6
    3944:	1a5b      	subs	r3, r3, r1
    3946:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    3948:	b662      	cpsie	i
	return true;
    394a:	2001      	movs	r0, #1
    394c:	e7ba      	b.n	38c4 <dispatch_process+0x1c>
		return false;
    394e:	2000      	movs	r0, #0
    3950:	e7b8      	b.n	38c4 <dispatch_process+0x1c>
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	200007a4 	.word	0x200007a4
    3958:	00002a15 	.word	0x00002a15

0000395c <next_process>:

Process* next_process() {
    395c:	b5f0      	push	{r4, r5, r6, r7, lr}
    395e:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    3960:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    3962:	4b57      	ldr	r3, [pc, #348]	; (3ac0 <next_process+0x164>)
    3964:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    3966:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    3968:	e015      	b.n	3996 <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    396a:	6823      	ldr	r3, [r4, #0]
    396c:	781b      	ldrb	r3, [r3, #0]
    396e:	e03d      	b.n	39ec <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    3970:	6823      	ldr	r3, [r4, #0]
    3972:	881b      	ldrh	r3, [r3, #0]
    3974:	e03a      	b.n	39ec <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    3976:	6863      	ldr	r3, [r4, #4]
    3978:	42bb      	cmp	r3, r7
    397a:	d041      	beq.n	3a00 <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    397c:	466b      	mov	r3, sp
    397e:	3307      	adds	r3, #7
    3980:	781b      	ldrb	r3, [r3, #0]
    3982:	2b00      	cmp	r3, #0
    3984:	d163      	bne.n	3a4e <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    3986:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    3988:	17f3      	asrs	r3, r6, #31
    398a:	0f1b      	lsrs	r3, r3, #28
    398c:	18f6      	adds	r6, r6, r3
    398e:	220f      	movs	r2, #15
    3990:	4016      	ands	r6, r2
    3992:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    3994:	3501      	adds	r5, #1
    3996:	4b4a      	ldr	r3, [pc, #296]	; (3ac0 <next_process+0x164>)
    3998:	68db      	ldr	r3, [r3, #12]
    399a:	42ab      	cmp	r3, r5
    399c:	dd59      	ble.n	3a52 <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    399e:	4b48      	ldr	r3, [pc, #288]	; (3ac0 <next_process+0x164>)
    39a0:	00b2      	lsls	r2, r6, #2
    39a2:	189a      	adds	r2, r3, r2
    39a4:	6912      	ldr	r2, [r2, #16]
    39a6:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    39a8:	6993      	ldr	r3, [r2, #24]
    39aa:	2b02      	cmp	r3, #2
    39ac:	d151      	bne.n	3a52 <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    39ae:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    39b0:	466b      	mov	r3, sp
    39b2:	2200      	movs	r2, #0
    39b4:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    39b6:	68e3      	ldr	r3, [r4, #12]
    39b8:	2b00      	cmp	r3, #0
    39ba:	d001      	beq.n	39c0 <next_process+0x64>
    39bc:	68e3      	ldr	r3, [r4, #12]
    39be:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    39c0:	4b3f      	ldr	r3, [pc, #252]	; (3ac0 <next_process+0x164>)
    39c2:	681a      	ldr	r2, [r3, #0]
    39c4:	6993      	ldr	r3, [r2, #24]
    39c6:	2b01      	cmp	r3, #1
    39c8:	d043      	beq.n	3a52 <next_process+0xf6>
			if (data->mask) {
    39ca:	68a3      	ldr	r3, [r4, #8]
    39cc:	2b00      	cmp	r3, #0
    39ce:	d00f      	beq.n	39f0 <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    39d0:	68a1      	ldr	r1, [r4, #8]
    39d2:	23ff      	movs	r3, #255	; 0xff
    39d4:	400b      	ands	r3, r1
    39d6:	68a1      	ldr	r1, [r4, #8]
    39d8:	428b      	cmp	r3, r1
    39da:	d0c6      	beq.n	396a <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    39dc:	68a3      	ldr	r3, [r4, #8]
    39de:	041b      	lsls	r3, r3, #16
    39e0:	0c1b      	lsrs	r3, r3, #16
    39e2:	68a1      	ldr	r1, [r4, #8]
    39e4:	428b      	cmp	r3, r1
    39e6:	d0c3      	beq.n	3970 <next_process+0x14>
				else variable = *(data->variable);
    39e8:	6823      	ldr	r3, [r4, #0]
    39ea:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    39ec:	68a7      	ldr	r7, [r4, #8]
    39ee:	401f      	ands	r7, r3
			switch (data->condition) {
    39f0:	7c23      	ldrb	r3, [r4, #16]
    39f2:	b2db      	uxtb	r3, r3
    39f4:	2b06      	cmp	r3, #6
    39f6:	d861      	bhi.n	3abc <next_process+0x160>
    39f8:	009b      	lsls	r3, r3, #2
    39fa:	4932      	ldr	r1, [pc, #200]	; (3ac4 <next_process+0x168>)
    39fc:	58cb      	ldr	r3, [r1, r3]
    39fe:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    3a00:	466b      	mov	r3, sp
    3a02:	2101      	movs	r1, #1
    3a04:	71d9      	strb	r1, [r3, #7]
    3a06:	e7b9      	b.n	397c <next_process+0x20>
				if (variable != data->value) unblocked = true;
    3a08:	6863      	ldr	r3, [r4, #4]
    3a0a:	42bb      	cmp	r3, r7
    3a0c:	d0b6      	beq.n	397c <next_process+0x20>
    3a0e:	466b      	mov	r3, sp
    3a10:	2101      	movs	r1, #1
    3a12:	71d9      	strb	r1, [r3, #7]
    3a14:	e7b2      	b.n	397c <next_process+0x20>
				if (variable > data->value) unblocked = true;
    3a16:	6863      	ldr	r3, [r4, #4]
    3a18:	42bb      	cmp	r3, r7
    3a1a:	d2af      	bcs.n	397c <next_process+0x20>
    3a1c:	466b      	mov	r3, sp
    3a1e:	2101      	movs	r1, #1
    3a20:	71d9      	strb	r1, [r3, #7]
    3a22:	e7ab      	b.n	397c <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    3a24:	6863      	ldr	r3, [r4, #4]
    3a26:	42bb      	cmp	r3, r7
    3a28:	d8a8      	bhi.n	397c <next_process+0x20>
    3a2a:	466b      	mov	r3, sp
    3a2c:	2101      	movs	r1, #1
    3a2e:	71d9      	strb	r1, [r3, #7]
    3a30:	e7a4      	b.n	397c <next_process+0x20>
				if (variable < data->value) unblocked = true;
    3a32:	6863      	ldr	r3, [r4, #4]
    3a34:	42bb      	cmp	r3, r7
    3a36:	d9a1      	bls.n	397c <next_process+0x20>
    3a38:	466b      	mov	r3, sp
    3a3a:	2101      	movs	r1, #1
    3a3c:	71d9      	strb	r1, [r3, #7]
    3a3e:	e79d      	b.n	397c <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    3a40:	6863      	ldr	r3, [r4, #4]
    3a42:	42bb      	cmp	r3, r7
    3a44:	d39a      	bcc.n	397c <next_process+0x20>
    3a46:	466b      	mov	r3, sp
    3a48:	2101      	movs	r1, #1
    3a4a:	71d9      	strb	r1, [r3, #7]
    3a4c:	e796      	b.n	397c <next_process+0x20>
				current_process->status = Process_State_Running;
    3a4e:	2301      	movs	r3, #1
    3a50:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    3a52:	4b1b      	ldr	r3, [pc, #108]	; (3ac0 <next_process+0x164>)
    3a54:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    3a56:	0028      	movs	r0, r5
    3a58:	e015      	b.n	3a86 <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    3a5a:	4919      	ldr	r1, [pc, #100]	; (3ac0 <next_process+0x164>)
    3a5c:	688e      	ldr	r6, [r1, #8]
    3a5e:	1986      	adds	r6, r0, r6
    3a60:	1e73      	subs	r3, r6, #1
    3a62:	17df      	asrs	r7, r3, #31
    3a64:	0f3f      	lsrs	r7, r7, #28
    3a66:	19db      	adds	r3, r3, r7
    3a68:	220f      	movs	r2, #15
    3a6a:	4013      	ands	r3, r2
    3a6c:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    3a6e:	17f7      	asrs	r7, r6, #31
    3a70:	0f3f      	lsrs	r7, r7, #28
    3a72:	19f6      	adds	r6, r6, r7
    3a74:	4032      	ands	r2, r6
    3a76:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    3a78:	009b      	lsls	r3, r3, #2
    3a7a:	18cb      	adds	r3, r1, r3
    3a7c:	691b      	ldr	r3, [r3, #16]
    3a7e:	0092      	lsls	r2, r2, #2
    3a80:	1889      	adds	r1, r1, r2
    3a82:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    3a84:	3801      	subs	r0, #1
    3a86:	2800      	cmp	r0, #0
    3a88:	dce7      	bgt.n	3a5a <next_process+0xfe>
	}

	--process_count;
    3a8a:	490d      	ldr	r1, [pc, #52]	; (3ac0 <next_process+0x164>)
    3a8c:	1e63      	subs	r3, r4, #1
    3a8e:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    3a90:	688b      	ldr	r3, [r1, #8]
    3a92:	3301      	adds	r3, #1
    3a94:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    3a96:	17d8      	asrs	r0, r3, #31
    3a98:	0f00      	lsrs	r0, r0, #28
    3a9a:	181b      	adds	r3, r3, r0
    3a9c:	220f      	movs	r2, #15
    3a9e:	4013      	ands	r3, r2
    3aa0:	1a1b      	subs	r3, r3, r0
    3aa2:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    3aa4:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    3aa6:	42ac      	cmp	r4, r5
    3aa8:	d103      	bne.n	3ab2 <next_process+0x156>
	
	return current_process;
    3aaa:	4b05      	ldr	r3, [pc, #20]	; (3ac0 <next_process+0x164>)
    3aac:	6818      	ldr	r0, [r3, #0]
}
    3aae:	b003      	add	sp, #12
    3ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    3ab2:	4b03      	ldr	r3, [pc, #12]	; (3ac0 <next_process+0x164>)
    3ab4:	6818      	ldr	r0, [r3, #0]
    3ab6:	4b04      	ldr	r3, [pc, #16]	; (3ac8 <next_process+0x16c>)
    3ab8:	4798      	blx	r3
    3aba:	e7f6      	b.n	3aaa <next_process+0x14e>
			switch (data->condition) {
    3abc:	2000      	movs	r0, #0
    3abe:	e7f6      	b.n	3aae <next_process+0x152>
    3ac0:	200007a4 	.word	0x200007a4
    3ac4:	00006364 	.word	0x00006364
    3ac8:	000037f1 	.word	0x000037f1

00003acc <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    3acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ace:	465f      	mov	r7, fp
    3ad0:	4656      	mov	r6, sl
    3ad2:	464d      	mov	r5, r9
    3ad4:	4644      	mov	r4, r8
    3ad6:	b4f0      	push	{r4, r5, r6, r7}
    3ad8:	b083      	sub	sp, #12
    3ada:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3adc:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d01c      	beq.n	3b1e <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    3ae4:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    3ae6:	4b0f      	ldr	r3, [pc, #60]	; (3b24 <yield_process+0x58>)
    3ae8:	9301      	str	r3, [sp, #4]
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    3aee:	2208      	movs	r2, #8
    3af0:	4252      	negs	r2, r2
    3af2:	446a      	add	r2, sp
    3af4:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    3af6:	685a      	ldr	r2, [r3, #4]
    3af8:	3a04      	subs	r2, #4
    3afa:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    3afc:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    3afe:	3204      	adds	r2, #4
    3b00:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    3b02:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    3b04:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    3b06:	9b01      	ldr	r3, [sp, #4]
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	2203      	movs	r2, #3
    3b0c:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    3b0e:	b662      	cpsie	i
	
	__enable_irq();
}
    3b10:	b003      	add	sp, #12
    3b12:	bcf0      	pop	{r4, r5, r6, r7}
    3b14:	46bb      	mov	fp, r7
    3b16:	46b2      	mov	sl, r6
    3b18:	46a9      	mov	r9, r5
    3b1a:	46a0      	mov	r8, r4
    3b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    3b1e:	4b02      	ldr	r3, [pc, #8]	; (3b28 <yield_process+0x5c>)
    3b20:	4798      	blx	r3
    3b22:	e7df      	b.n	3ae4 <yield_process+0x18>
    3b24:	200007a4 	.word	0x200007a4
    3b28:	00003705 	.word	0x00003705

00003b2c <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    3b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b2e:	464f      	mov	r7, r9
    3b30:	4646      	mov	r6, r8
    3b32:	b4c0      	push	{r6, r7}
    3b34:	b08b      	sub	sp, #44	; 0x2c
    3b36:	4681      	mov	r9, r0
    3b38:	000f      	movs	r7, r1
    3b3a:	4690      	mov	r8, r2
    3b3c:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    3b3e:	4e0f      	ldr	r6, [pc, #60]	; (3b7c <wait_until+0x50>)
    3b40:	6834      	ldr	r4, [r6, #0]
    3b42:	4b0f      	ldr	r3, [pc, #60]	; (3b80 <wait_until+0x54>)
    3b44:	4798      	blx	r3
    3b46:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3b48:	ac05      	add	r4, sp, #20
    3b4a:	464b      	mov	r3, r9
    3b4c:	9305      	str	r3, [sp, #20]
    3b4e:	9706      	str	r7, [sp, #24]
    3b50:	4643      	mov	r3, r8
    3b52:	9307      	str	r3, [sp, #28]
    3b54:	2300      	movs	r3, #0
    3b56:	9308      	str	r3, [sp, #32]
    3b58:	7425      	strb	r5, [r4, #16]
    3b5a:	466b      	mov	r3, sp
    3b5c:	001a      	movs	r2, r3
    3b5e:	cc23      	ldmia	r4!, {r0, r1, r5}
    3b60:	c223      	stmia	r2!, {r0, r1, r5}
    3b62:	cc03      	ldmia	r4!, {r0, r1}
    3b64:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3b66:	6832      	ldr	r2, [r6, #0]
    3b68:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3b6a:	2002      	movs	r0, #2
    3b6c:	4b05      	ldr	r3, [pc, #20]	; (3b84 <wait_until+0x58>)
    3b6e:	4798      	blx	r3
}
    3b70:	b00b      	add	sp, #44	; 0x2c
    3b72:	bcc0      	pop	{r6, r7}
    3b74:	46b9      	mov	r9, r7
    3b76:	46b0      	mov	r8, r6
    3b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	200007a4 	.word	0x200007a4
    3b80:	00002a15 	.word	0x00002a15
    3b84:	00003acd 	.word	0x00003acd

00003b88 <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    3b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b8a:	464f      	mov	r7, r9
    3b8c:	4646      	mov	r6, r8
    3b8e:	b4c0      	push	{r6, r7}
    3b90:	b08b      	sub	sp, #44	; 0x2c
    3b92:	4681      	mov	r9, r0
    3b94:	000f      	movs	r7, r1
    3b96:	4690      	mov	r8, r2
    3b98:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    3b9a:	4e0f      	ldr	r6, [pc, #60]	; (3bd8 <wait_until_callback+0x50>)
    3b9c:	6834      	ldr	r4, [r6, #0]
    3b9e:	4b0f      	ldr	r3, [pc, #60]	; (3bdc <wait_until_callback+0x54>)
    3ba0:	4798      	blx	r3
    3ba2:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3ba4:	ac05      	add	r4, sp, #20
    3ba6:	464b      	mov	r3, r9
    3ba8:	9305      	str	r3, [sp, #20]
    3baa:	9706      	str	r7, [sp, #24]
    3bac:	4643      	mov	r3, r8
    3bae:	9307      	str	r3, [sp, #28]
    3bb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3bb2:	9308      	str	r3, [sp, #32]
    3bb4:	7425      	strb	r5, [r4, #16]
    3bb6:	466b      	mov	r3, sp
    3bb8:	001a      	movs	r2, r3
    3bba:	cc23      	ldmia	r4!, {r0, r1, r5}
    3bbc:	c223      	stmia	r2!, {r0, r1, r5}
    3bbe:	cc03      	ldmia	r4!, {r0, r1}
    3bc0:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3bc2:	6832      	ldr	r2, [r6, #0]
    3bc4:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3bc6:	2002      	movs	r0, #2
    3bc8:	4b05      	ldr	r3, [pc, #20]	; (3be0 <wait_until_callback+0x58>)
    3bca:	4798      	blx	r3
}
    3bcc:	b00b      	add	sp, #44	; 0x2c
    3bce:	bcc0      	pop	{r6, r7}
    3bd0:	46b9      	mov	r9, r7
    3bd2:	46b0      	mov	r8, r6
    3bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	200007a4 	.word	0x200007a4
    3bdc:	00002a15 	.word	0x00002a15
    3be0:	00003acd 	.word	0x00003acd

00003be4 <wait_until_callback_preserve_deadline>:

void wait_until_callback_preserve_deadline(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    3be4:	b530      	push	{r4, r5, lr}
    3be6:	b08b      	sub	sp, #44	; 0x2c
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3be8:	ac05      	add	r4, sp, #20
    3bea:	9005      	str	r0, [sp, #20]
    3bec:	9106      	str	r1, [sp, #24]
    3bee:	9207      	str	r2, [sp, #28]
    3bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3bf2:	9208      	str	r2, [sp, #32]
    3bf4:	7423      	strb	r3, [r4, #16]
    3bf6:	466b      	mov	r3, sp
    3bf8:	001a      	movs	r2, r3
    3bfa:	cc23      	ldmia	r4!, {r0, r1, r5}
    3bfc:	c223      	stmia	r2!, {r0, r1, r5}
    3bfe:	cc03      	ldmia	r4!, {r0, r1}
    3c00:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3c02:	4a04      	ldr	r2, [pc, #16]	; (3c14 <wait_until_callback_preserve_deadline+0x30>)
    3c04:	6812      	ldr	r2, [r2, #0]
    3c06:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3c08:	2002      	movs	r0, #2
    3c0a:	4b03      	ldr	r3, [pc, #12]	; (3c18 <wait_until_callback_preserve_deadline+0x34>)
    3c0c:	4798      	blx	r3
    3c0e:	b00b      	add	sp, #44	; 0x2c
    3c10:	bd30      	pop	{r4, r5, pc}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	200007a4 	.word	0x200007a4
    3c18:	00003acd 	.word	0x00003acd

00003c1c <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    3c1c:	b500      	push	{lr}
    3c1e:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    3c20:	4b0c      	ldr	r3, [pc, #48]	; (3c54 <rtos_delay_callback+0x38>)
    3c22:	4798      	blx	r3
    3c24:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    3c26:	4b0c      	ldr	r3, [pc, #48]	; (3c58 <rtos_delay_callback+0x3c>)
    3c28:	681a      	ldr	r2, [r3, #0]
    3c2a:	6953      	ldr	r3, [r2, #20]
    3c2c:	9901      	ldr	r1, [sp, #4]
    3c2e:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    3c30:	490a      	ldr	r1, [pc, #40]	; (3c5c <rtos_delay_callback+0x40>)
    3c32:	6809      	ldr	r1, [r1, #0]
    3c34:	4299      	cmp	r1, r3
    3c36:	dc07      	bgt.n	3c48 <rtos_delay_callback+0x2c>
    3c38:	4908      	ldr	r1, [pc, #32]	; (3c5c <rtos_delay_callback+0x40>)
    3c3a:	6808      	ldr	r0, [r1, #0]
    3c3c:	4907      	ldr	r1, [pc, #28]	; (3c5c <rtos_delay_callback+0x40>)
    3c3e:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    3c40:	2b00      	cmp	r3, #0
    3c42:	dd03      	ble.n	3c4c <rtos_delay_callback+0x30>
}
    3c44:	b003      	add	sp, #12
    3c46:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    3c48:	0018      	movs	r0, r3
    3c4a:	e7f7      	b.n	3c3c <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    3c4c:	2301      	movs	r3, #1
    3c4e:	6193      	str	r3, [r2, #24]
}
    3c50:	e7f8      	b.n	3c44 <rtos_delay_callback+0x28>
    3c52:	46c0      	nop			; (mov r8, r8)
    3c54:	00002a15 	.word	0x00002a15
    3c58:	200007a4 	.word	0x200007a4
    3c5c:	200000f4 	.word	0x200000f4

00003c60 <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    3c60:	b570      	push	{r4, r5, r6, lr}
    3c62:	b086      	sub	sp, #24
    3c64:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    3c66:	4b09      	ldr	r3, [pc, #36]	; (3c8c <rtos_delay_ctick+0x2c>)
    3c68:	4798      	blx	r3
    3c6a:	4b09      	ldr	r3, [pc, #36]	; (3c90 <rtos_delay_ctick+0x30>)
    3c6c:	681d      	ldr	r5, [r3, #0]
    3c6e:	1900      	adds	r0, r0, r4
    3c70:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3c72:	aa01      	add	r2, sp, #4
    3c74:	4b07      	ldr	r3, [pc, #28]	; (3c94 <rtos_delay_ctick+0x34>)
    3c76:	0011      	movs	r1, r2
    3c78:	cb51      	ldmia	r3!, {r0, r4, r6}
    3c7a:	c151      	stmia	r1!, {r0, r4, r6}
    3c7c:	cb11      	ldmia	r3!, {r0, r4}
    3c7e:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3c80:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    3c82:	2002      	movs	r0, #2
    3c84:	4b04      	ldr	r3, [pc, #16]	; (3c98 <rtos_delay_ctick+0x38>)
    3c86:	4798      	blx	r3
    3c88:	b006      	add	sp, #24
    3c8a:	bd70      	pop	{r4, r5, r6, pc}
    3c8c:	00002a15 	.word	0x00002a15
    3c90:	200007a4 	.word	0x200007a4
    3c94:	00006380 	.word	0x00006380
    3c98:	00003acd 	.word	0x00003acd

00003c9c <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    3c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3c9e:	4b16      	ldr	r3, [pc, #88]	; (3cf8 <busmanager_process_wait_callback+0x5c>)
    3ca0:	681b      	ldr	r3, [r3, #0]
    3ca2:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    3ca4:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    3ca6:	2500      	movs	r5, #0
    3ca8:	e00b      	b.n	3cc2 <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    3caa:	4b13      	ldr	r3, [pc, #76]	; (3cf8 <busmanager_process_wait_callback+0x5c>)
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	2201      	movs	r2, #1
    3cb0:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    3cb2:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3cb4:	17e3      	asrs	r3, r4, #31
    3cb6:	0f5b      	lsrs	r3, r3, #29
    3cb8:	18e4      	adds	r4, r4, r3
    3cba:	2207      	movs	r2, #7
    3cbc:	4014      	ands	r4, r2
    3cbe:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    3cc0:	3501      	adds	r5, #1
    3cc2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3cc4:	42ab      	cmp	r3, r5
    3cc6:	dd15      	ble.n	3cf4 <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    3cc8:	1ca3      	adds	r3, r4, #2
    3cca:	009b      	lsls	r3, r3, #2
    3ccc:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    3cce:	7d1a      	ldrb	r2, [r3, #20]
    3cd0:	2a00      	cmp	r2, #0
    3cd2:	d0ee      	beq.n	3cb2 <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    3cd4:	7c1a      	ldrb	r2, [r3, #16]
    3cd6:	7c59      	ldrb	r1, [r3, #17]
    3cd8:	0209      	lsls	r1, r1, #8
    3cda:	4311      	orrs	r1, r2
    3cdc:	7c9a      	ldrb	r2, [r3, #18]
    3cde:	0412      	lsls	r2, r2, #16
    3ce0:	430a      	orrs	r2, r1
    3ce2:	7cdf      	ldrb	r7, [r3, #19]
    3ce4:	063f      	lsls	r7, r7, #24
    3ce6:	4317      	orrs	r7, r2
    3ce8:	4b04      	ldr	r3, [pc, #16]	; (3cfc <busmanager_process_wait_callback+0x60>)
    3cea:	4798      	blx	r3
    3cec:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    3cee:	2f00      	cmp	r7, #0
    3cf0:	dcdf      	bgt.n	3cb2 <busmanager_process_wait_callback+0x16>
    3cf2:	e7da      	b.n	3caa <busmanager_process_wait_callback+0xe>
	}
}
    3cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cf6:	46c0      	nop			; (mov r8, r8)
    3cf8:	200007a4 	.word	0x200007a4
    3cfc:	00002a15 	.word	0x00002a15

00003d00 <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    3d00:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    3d02:	780c      	ldrb	r4, [r1, #0]
    3d04:	784d      	ldrb	r5, [r1, #1]
    3d06:	022d      	lsls	r5, r5, #8
    3d08:	4325      	orrs	r5, r4
    3d0a:	788c      	ldrb	r4, [r1, #2]
    3d0c:	0424      	lsls	r4, r4, #16
    3d0e:	432c      	orrs	r4, r5
    3d10:	78cf      	ldrb	r7, [r1, #3]
    3d12:	063f      	lsls	r7, r7, #24
    3d14:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    3d16:	2601      	movs	r6, #1
    3d18:	e000      	b.n	3d1c <set_matching_id_status+0x1c>
    3d1a:	3601      	adds	r6, #1
    3d1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    3d1e:	42b1      	cmp	r1, r6
    3d20:	dd17      	ble.n	3d52 <set_matching_id_status+0x52>
		++queue_pointer;
    3d22:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3d24:	17d1      	asrs	r1, r2, #31
    3d26:	0f49      	lsrs	r1, r1, #29
    3d28:	1852      	adds	r2, r2, r1
    3d2a:	2407      	movs	r4, #7
    3d2c:	4022      	ands	r2, r4
    3d2e:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    3d30:	1c91      	adds	r1, r2, #2
    3d32:	0089      	lsls	r1, r1, #2
    3d34:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    3d36:	782c      	ldrb	r4, [r5, #0]
    3d38:	7869      	ldrb	r1, [r5, #1]
    3d3a:	0209      	lsls	r1, r1, #8
    3d3c:	4321      	orrs	r1, r4
    3d3e:	78ac      	ldrb	r4, [r5, #2]
    3d40:	0424      	lsls	r4, r4, #16
    3d42:	430c      	orrs	r4, r1
    3d44:	78e9      	ldrb	r1, [r5, #3]
    3d46:	0609      	lsls	r1, r1, #24
    3d48:	4321      	orrs	r1, r4
    3d4a:	42b9      	cmp	r1, r7
    3d4c:	d1e5      	bne.n	3d1a <set_matching_id_status+0x1a>
    3d4e:	756b      	strb	r3, [r5, #21]
    3d50:	e7e3      	b.n	3d1a <set_matching_id_status+0x1a>
}
    3d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003d54 <busmanager_process_function>:

void busmanager_process_function() {
    3d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d56:	46ce      	mov	lr, r9
    3d58:	4647      	mov	r7, r8
    3d5a:	b580      	push	{r7, lr}
    3d5c:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3d5e:	4b62      	ldr	r3, [pc, #392]	; (3ee8 <busmanager_process_function+0x194>)
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	6a1f      	ldr	r7, [r3, #32]
    3d64:	e05d      	b.n	3e22 <busmanager_process_function+0xce>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    3d66:	0038      	movs	r0, r7
    3d68:	3030      	adds	r0, #48	; 0x30
    3d6a:	2201      	movs	r2, #1
    3d6c:	3302      	adds	r3, #2
    3d6e:	4252      	negs	r2, r2
    3d70:	2100      	movs	r1, #0
    3d72:	4c5e      	ldr	r4, [pc, #376]	; (3eec <busmanager_process_function+0x198>)
    3d74:	47a0      	blx	r4
    3d76:	e057      	b.n	3e28 <busmanager_process_function+0xd4>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    3d78:	7d2b      	ldrb	r3, [r5, #20]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d158      	bne.n	3e30 <busmanager_process_function+0xdc>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    3d7e:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3d80:	17e3      	asrs	r3, r4, #31
    3d82:	0f5b      	lsrs	r3, r3, #29
    3d84:	18e4      	adds	r4, r4, r3
    3d86:	2207      	movs	r2, #7
    3d88:	4014      	ands	r4, r2
    3d8a:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3d8c:	2301      	movs	r3, #1
    3d8e:	469c      	mov	ip, r3
    3d90:	44e1      	add	r9, ip
    3d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d94:	454b      	cmp	r3, r9
    3d96:	dd09      	ble.n	3dac <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    3d98:	1ca3      	adds	r3, r4, #2
    3d9a:	009b      	lsls	r3, r3, #2
    3d9c:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    3d9e:	2315      	movs	r3, #21
    3da0:	56eb      	ldrsb	r3, [r5, r3]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d1e8      	bne.n	3d78 <busmanager_process_function+0x24>
    3da6:	7d2b      	ldrb	r3, [r5, #20]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d1e5      	bne.n	3d78 <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    3dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3dae:	4549      	cmp	r1, r9
    3db0:	d05e      	beq.n	3e70 <busmanager_process_function+0x11c>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    3db2:	2315      	movs	r3, #21
    3db4:	56eb      	ldrsb	r3, [r5, r3]
    3db6:	2b02      	cmp	r3, #2
    3db8:	d02f      	beq.n	3e1a <busmanager_process_function+0xc6>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    3dba:	7b2a      	ldrb	r2, [r5, #12]
    3dbc:	7b6b      	ldrb	r3, [r5, #13]
    3dbe:	021b      	lsls	r3, r3, #8
    3dc0:	4313      	orrs	r3, r2
    3dc2:	7baa      	ldrb	r2, [r5, #14]
    3dc4:	0412      	lsls	r2, r2, #16
    3dc6:	431a      	orrs	r2, r3
    3dc8:	7beb      	ldrb	r3, [r5, #15]
    3dca:	061b      	lsls	r3, r3, #24
    3dcc:	4313      	orrs	r3, r2
    3dce:	d059      	beq.n	3e84 <busmanager_process_function+0x130>
				SOS();
			// __disable_irq();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    3dd0:	7b2b      	ldrb	r3, [r5, #12]
    3dd2:	7b6a      	ldrb	r2, [r5, #13]
    3dd4:	0212      	lsls	r2, r2, #8
    3dd6:	431a      	orrs	r2, r3
    3dd8:	7bab      	ldrb	r3, [r5, #14]
    3dda:	041b      	lsls	r3, r3, #16
    3ddc:	4313      	orrs	r3, r2
    3dde:	7bec      	ldrb	r4, [r5, #15]
    3de0:	0624      	lsls	r4, r4, #24
    3de2:	431c      	orrs	r4, r3
    3de4:	7a2b      	ldrb	r3, [r5, #8]
    3de6:	7a6a      	ldrb	r2, [r5, #9]
    3de8:	0212      	lsls	r2, r2, #8
    3dea:	431a      	orrs	r2, r3
    3dec:	7aab      	ldrb	r3, [r5, #10]
    3dee:	041b      	lsls	r3, r3, #16
    3df0:	4313      	orrs	r3, r2
    3df2:	7aea      	ldrb	r2, [r5, #11]
    3df4:	0612      	lsls	r2, r2, #24
    3df6:	431a      	orrs	r2, r3
    3df8:	6879      	ldr	r1, [r7, #4]
    3dfa:	792b      	ldrb	r3, [r5, #4]
    3dfc:	7968      	ldrb	r0, [r5, #5]
    3dfe:	0200      	lsls	r0, r0, #8
    3e00:	4318      	orrs	r0, r3
    3e02:	79ab      	ldrb	r3, [r5, #6]
    3e04:	041b      	lsls	r3, r3, #16
    3e06:	4303      	orrs	r3, r0
    3e08:	79e8      	ldrb	r0, [r5, #7]
    3e0a:	0600      	lsls	r0, r0, #24
    3e0c:	4318      	orrs	r0, r3
    3e0e:	002b      	movs	r3, r5
    3e10:	47a0      	blx	r4
    3e12:	2800      	cmp	r0, #0
    3e14:	d001      	beq.n	3e1a <busmanager_process_function+0xc6>
				current_request->status = BusManager_Request_Complete;
    3e16:	2302      	movs	r3, #2
    3e18:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    3e1a:	2315      	movs	r3, #21
    3e1c:	56eb      	ldrsb	r3, [r5, r3]
    3e1e:	2b02      	cmp	r3, #2
    3e20:	d033      	beq.n	3e8a <busmanager_process_function+0x136>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    3e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3e24:	2b00      	cmp	r3, #0
    3e26:	d09e      	beq.n	3d66 <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    3e28:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    3e2a:	2300      	movs	r3, #0
    3e2c:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3e2e:	e7b0      	b.n	3d92 <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    3e30:	7c2a      	ldrb	r2, [r5, #16]
    3e32:	7c6b      	ldrb	r3, [r5, #17]
    3e34:	021b      	lsls	r3, r3, #8
    3e36:	4313      	orrs	r3, r2
    3e38:	7caa      	ldrb	r2, [r5, #18]
    3e3a:	0412      	lsls	r2, r2, #16
    3e3c:	431a      	orrs	r2, r3
    3e3e:	7ceb      	ldrb	r3, [r5, #19]
    3e40:	061b      	lsls	r3, r3, #24
    3e42:	4313      	orrs	r3, r2
    3e44:	4698      	mov	r8, r3
    3e46:	4b2a      	ldr	r3, [pc, #168]	; (3ef0 <busmanager_process_function+0x19c>)
    3e48:	4798      	blx	r3
    3e4a:	4643      	mov	r3, r8
    3e4c:	1a18      	subs	r0, r3, r0
    3e4e:	2800      	cmp	r0, #0
    3e50:	dd06      	ble.n	3e60 <busmanager_process_function+0x10c>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    3e52:	2301      	movs	r3, #1
    3e54:	0022      	movs	r2, r4
    3e56:	0029      	movs	r1, r5
    3e58:	0038      	movs	r0, r7
    3e5a:	4e26      	ldr	r6, [pc, #152]	; (3ef4 <busmanager_process_function+0x1a0>)
    3e5c:	47b0      	blx	r6
			if (unblocked) break;
    3e5e:	e78e      	b.n	3d7e <busmanager_process_function+0x2a>
					current_request->busy = false;
    3e60:	2300      	movs	r3, #0
    3e62:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    3e64:	0022      	movs	r2, r4
    3e66:	0029      	movs	r1, r5
    3e68:	0038      	movs	r0, r7
    3e6a:	4c22      	ldr	r4, [pc, #136]	; (3ef4 <busmanager_process_function+0x1a0>)
    3e6c:	47a0      	blx	r4
			if (unblocked) break;
    3e6e:	e79d      	b.n	3dac <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    3e70:	0038      	movs	r0, r7
    3e72:	3030      	adds	r0, #48	; 0x30
    3e74:	2201      	movs	r2, #1
    3e76:	4b20      	ldr	r3, [pc, #128]	; (3ef8 <busmanager_process_function+0x1a4>)
    3e78:	9300      	str	r3, [sp, #0]
    3e7a:	2301      	movs	r3, #1
    3e7c:	4252      	negs	r2, r2
    3e7e:	4c1f      	ldr	r4, [pc, #124]	; (3efc <busmanager_process_function+0x1a8>)
    3e80:	47a0      	blx	r4
			continue;
    3e82:	e7ce      	b.n	3e22 <busmanager_process_function+0xce>
				SOS();
    3e84:	4b1e      	ldr	r3, [pc, #120]	; (3f00 <busmanager_process_function+0x1ac>)
    3e86:	4798      	blx	r3
    3e88:	e7a2      	b.n	3dd0 <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    3e8a:	7d2b      	ldrb	r3, [r5, #20]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d1c8      	bne.n	3e22 <busmanager_process_function+0xce>
			current_request->status = BusManager_Request_CompleteNotBusy;
    3e90:	3303      	adds	r3, #3
    3e92:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    3e94:	e017      	b.n	3ec6 <busmanager_process_function+0x172>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3e98:	4449      	add	r1, r9
    3e9a:	1e4b      	subs	r3, r1, #1
    3e9c:	17d8      	asrs	r0, r3, #31
    3e9e:	0f40      	lsrs	r0, r0, #29
    3ea0:	181b      	adds	r3, r3, r0
    3ea2:	2207      	movs	r2, #7
    3ea4:	4013      	ands	r3, r2
    3ea6:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3ea8:	17c8      	asrs	r0, r1, #31
    3eaa:	0f40      	lsrs	r0, r0, #29
    3eac:	1809      	adds	r1, r1, r0
    3eae:	400a      	ands	r2, r1
    3eb0:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    3eb2:	3302      	adds	r3, #2
    3eb4:	009b      	lsls	r3, r3, #2
    3eb6:	59d9      	ldr	r1, [r3, r7]
    3eb8:	3202      	adds	r2, #2
    3eba:	0093      	lsls	r3, r2, #2
    3ebc:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    3ebe:	2301      	movs	r3, #1
    3ec0:	425b      	negs	r3, r3
    3ec2:	469c      	mov	ip, r3
    3ec4:	44e1      	add	r9, ip
    3ec6:	464b      	mov	r3, r9
    3ec8:	2b00      	cmp	r3, #0
    3eca:	dce4      	bgt.n	3e96 <busmanager_process_function+0x142>
			}

			--(data->request_count);
    3ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ece:	3b01      	subs	r3, #1
    3ed0:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    3ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ed4:	3301      	adds	r3, #1
    3ed6:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3ed8:	17d9      	asrs	r1, r3, #31
    3eda:	0f49      	lsrs	r1, r1, #29
    3edc:	185b      	adds	r3, r3, r1
    3ede:	2207      	movs	r2, #7
    3ee0:	4013      	ands	r3, r2
    3ee2:	1a5b      	subs	r3, r3, r1
    3ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    3ee6:	e79c      	b.n	3e22 <busmanager_process_function+0xce>
    3ee8:	200007a4 	.word	0x200007a4
    3eec:	00003b2d 	.word	0x00003b2d
    3ef0:	00002a15 	.word	0x00002a15
    3ef4:	00003d01 	.word	0x00003d01
    3ef8:	00003c9d 	.word	0x00003c9d
    3efc:	00003b89 	.word	0x00003b89
    3f00:	00003705 	.word	0x00003705

00003f04 <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    3f04:	b570      	push	{r4, r5, r6, lr}
    3f06:	0004      	movs	r4, r0
    3f08:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    3f0a:	480a      	ldr	r0, [pc, #40]	; (3f34 <busmanager_new_process+0x30>)
    3f0c:	0013      	movs	r3, r2
    3f0e:	000a      	movs	r2, r1
    3f10:	0001      	movs	r1, r0
    3f12:	0020      	movs	r0, r4
    3f14:	4e08      	ldr	r6, [pc, #32]	; (3f38 <busmanager_new_process+0x34>)
    3f16:	47b0      	blx	r6
	proc->data.sercom = sercom;
    3f18:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    3f1a:	9b04      	ldr	r3, [sp, #16]
    3f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    3f1e:	2300      	movs	r3, #0
    3f20:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    3f22:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    3f24:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    3f26:	0023      	movs	r3, r4
    3f28:	3328      	adds	r3, #40	; 0x28
    3f2a:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    3f2c:	0020      	movs	r0, r4
    3f2e:	4b03      	ldr	r3, [pc, #12]	; (3f3c <busmanager_new_process+0x38>)
    3f30:	4798      	blx	r3
}
    3f32:	bd70      	pop	{r4, r5, r6, pc}
    3f34:	00003d55 	.word	0x00003d55
    3f38:	000037c5 	.word	0x000037c5
    3f3c:	000038a9 	.word	0x000038a9

00003f40 <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    3f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f42:	0004      	movs	r4, r0
    3f44:	000d      	movs	r5, r1
    3f46:	9806      	ldr	r0, [sp, #24]
    3f48:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    3f4a:	2600      	movs	r6, #0
    3f4c:	702a      	strb	r2, [r5, #0]
    3f4e:	0a17      	lsrs	r7, r2, #8
    3f50:	706f      	strb	r7, [r5, #1]
    3f52:	0c17      	lsrs	r7, r2, #16
    3f54:	70af      	strb	r7, [r5, #2]
    3f56:	0e12      	lsrs	r2, r2, #24
    3f58:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    3f5a:	712b      	strb	r3, [r5, #4]
    3f5c:	0a1a      	lsrs	r2, r3, #8
    3f5e:	716a      	strb	r2, [r5, #5]
    3f60:	0c1a      	lsrs	r2, r3, #16
    3f62:	71aa      	strb	r2, [r5, #6]
    3f64:	0e1b      	lsrs	r3, r3, #24
    3f66:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    3f68:	7228      	strb	r0, [r5, #8]
    3f6a:	0a03      	lsrs	r3, r0, #8
    3f6c:	726b      	strb	r3, [r5, #9]
    3f6e:	0c03      	lsrs	r3, r0, #16
    3f70:	72ab      	strb	r3, [r5, #10]
    3f72:	0e00      	lsrs	r0, r0, #24
    3f74:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    3f76:	7329      	strb	r1, [r5, #12]
    3f78:	0a0b      	lsrs	r3, r1, #8
    3f7a:	736b      	strb	r3, [r5, #13]
    3f7c:	0c0b      	lsrs	r3, r1, #16
    3f7e:	73ab      	strb	r3, [r5, #14]
    3f80:	0e09      	lsrs	r1, r1, #24
    3f82:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    3f84:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    3f86:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3f88:	e007      	b.n	3f9a <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    3f8a:	0020      	movs	r0, r4
    3f8c:	3058      	adds	r0, #88	; 0x58
    3f8e:	2201      	movs	r2, #1
    3f90:	2301      	movs	r3, #1
    3f92:	4252      	negs	r2, r2
    3f94:	2108      	movs	r1, #8
    3f96:	4e0b      	ldr	r6, [pc, #44]	; (3fc4 <busmanager_request_transaction+0x84>)
    3f98:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3f9c:	2b08      	cmp	r3, #8
    3f9e:	d0f4      	beq.n	3f8a <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    3fa0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3fa2:	0011      	movs	r1, r2
    3fa4:	310c      	adds	r1, #12
    3fa6:	0089      	lsls	r1, r1, #2
    3fa8:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    3faa:	3301      	adds	r3, #1
    3fac:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    3fae:	3201      	adds	r2, #1
    3fb0:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3fb2:	17d1      	asrs	r1, r2, #31
    3fb4:	0f49      	lsrs	r1, r1, #29
    3fb6:	1853      	adds	r3, r2, r1
    3fb8:	2207      	movs	r2, #7
    3fba:	4013      	ands	r3, r2
    3fbc:	1a5b      	subs	r3, r3, r1
    3fbe:	6563      	str	r3, [r4, #84]	; 0x54
    3fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fc2:	46c0      	nop			; (mov r8, r8)
    3fc4:	00003b2d 	.word	0x00003b2d

00003fc8 <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    3fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fca:	46de      	mov	lr, fp
    3fcc:	4657      	mov	r7, sl
    3fce:	464e      	mov	r6, r9
    3fd0:	4645      	mov	r5, r8
    3fd2:	b5e0      	push	{r5, r6, r7, lr}
    3fd4:	b089      	sub	sp, #36	; 0x24
    3fd6:	0004      	movs	r4, r0
    3fd8:	000e      	movs	r6, r1
    3fda:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    3fdc:	ab07      	add	r3, sp, #28
    3fde:	2003      	movs	r0, #3
    3fe0:	4682      	mov	sl, r0
    3fe2:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    3fe4:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    3fe6:	2115      	movs	r1, #21
    3fe8:	a802      	add	r0, sp, #8
    3fea:	4684      	mov	ip, r0
    3fec:	4461      	add	r1, ip
    3fee:	0a10      	lsrs	r0, r2, #8
    3ff0:	7008      	strb	r0, [r1, #0]
    3ff2:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    3ff4:	7822      	ldrb	r2, [r4, #0]
    3ff6:	7861      	ldrb	r1, [r4, #1]
    3ff8:	0209      	lsls	r1, r1, #8
    3ffa:	4311      	orrs	r1, r2
    3ffc:	78a2      	ldrb	r2, [r4, #2]
    3ffe:	0412      	lsls	r2, r2, #16
    4000:	430a      	orrs	r2, r1
    4002:	78e5      	ldrb	r5, [r4, #3]
    4004:	062d      	lsls	r5, r5, #24
    4006:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    4008:	9604      	str	r6, [sp, #16]
    400a:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    400c:	2128      	movs	r1, #40	; 0x28
    400e:	4689      	mov	r9, r1
    4010:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    4012:	0100      	lsls	r0, r0, #4
    4014:	4e24      	ldr	r6, [pc, #144]	; (40a8 <dma_eeprom_read+0xe0>)
    4016:	1980      	adds	r0, r0, r6
    4018:	4924      	ldr	r1, [pc, #144]	; (40ac <dma_eeprom_read+0xe4>)
    401a:	468b      	mov	fp, r1
    401c:	9103      	str	r1, [sp, #12]
    401e:	4649      	mov	r1, r9
    4020:	9102      	str	r1, [sp, #8]
    4022:	9301      	str	r3, [sp, #4]
    4024:	4651      	mov	r1, sl
    4026:	9100      	str	r1, [sp, #0]
    4028:	2300      	movs	r3, #0
    402a:	2200      	movs	r2, #0
    402c:	3902      	subs	r1, #2
    402e:	4f20      	ldr	r7, [pc, #128]	; (40b0 <dma_eeprom_read+0xe8>)
    4030:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    4032:	466b      	mov	r3, sp
    4034:	8a9b      	ldrh	r3, [r3, #20]
    4036:	4698      	mov	r8, r3
    4038:	2300      	movs	r3, #0
    403a:	9303      	str	r3, [sp, #12]
    403c:	4649      	mov	r1, r9
    403e:	9102      	str	r1, [sp, #8]
    4040:	4b1c      	ldr	r3, [pc, #112]	; (40b4 <dma_eeprom_read+0xec>)
    4042:	9301      	str	r3, [sp, #4]
    4044:	4641      	mov	r1, r8
    4046:	9100      	str	r1, [sp, #0]
    4048:	2300      	movs	r3, #0
    404a:	2200      	movs	r2, #0
    404c:	2100      	movs	r1, #0
    404e:	4658      	mov	r0, fp
    4050:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    4052:	9a04      	ldr	r2, [sp, #16]
    4054:	7850      	ldrb	r0, [r2, #1]
    4056:	0100      	lsls	r0, r0, #4
    4058:	1980      	adds	r0, r0, r6
    405a:	4917      	ldr	r1, [pc, #92]	; (40b8 <dma_eeprom_read+0xf0>)
    405c:	468b      	mov	fp, r1
    405e:	9103      	str	r1, [sp, #12]
    4060:	4b16      	ldr	r3, [pc, #88]	; (40bc <dma_eeprom_read+0xf4>)
    4062:	9302      	str	r3, [sp, #8]
    4064:	4649      	mov	r1, r9
    4066:	9101      	str	r1, [sp, #4]
    4068:	4651      	mov	r1, sl
    406a:	9100      	str	r1, [sp, #0]
    406c:	2300      	movs	r3, #0
    406e:	2200      	movs	r2, #0
    4070:	2100      	movs	r1, #0
    4072:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    4074:	2300      	movs	r3, #0
    4076:	9303      	str	r3, [sp, #12]
    4078:	9b12      	ldr	r3, [sp, #72]	; 0x48
    407a:	9302      	str	r3, [sp, #8]
    407c:	464b      	mov	r3, r9
    407e:	9301      	str	r3, [sp, #4]
    4080:	4643      	mov	r3, r8
    4082:	9300      	str	r3, [sp, #0]
    4084:	2300      	movs	r3, #0
    4086:	2201      	movs	r2, #1
    4088:	2100      	movs	r1, #0
    408a:	4658      	mov	r0, fp
    408c:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    408e:	1d21      	adds	r1, r4, #4
    4090:	9a04      	ldr	r2, [sp, #16]
    4092:	0028      	movs	r0, r5
    4094:	4b0a      	ldr	r3, [pc, #40]	; (40c0 <dma_eeprom_read+0xf8>)
    4096:	4798      	blx	r3
}
    4098:	b009      	add	sp, #36	; 0x24
    409a:	bcf0      	pop	{r4, r5, r6, r7}
    409c:	46bb      	mov	fp, r7
    409e:	46b2      	mov	sl, r6
    40a0:	46a9      	mov	r9, r5
    40a2:	46a0      	mov	r8, r4
    40a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	20000568 	.word	0x20000568
    40ac:	20000810 	.word	0x20000810
    40b0:	00001b6d 	.word	0x00001b6d
    40b4:	000061b1 	.word	0x000061b1
    40b8:	20000800 	.word	0x20000800
    40bc:	2000036c 	.word	0x2000036c
    40c0:	00004365 	.word	0x00004365

000040c4 <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    40c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    40c6:	46de      	mov	lr, fp
    40c8:	4657      	mov	r7, sl
    40ca:	464e      	mov	r6, r9
    40cc:	4645      	mov	r5, r8
    40ce:	b5e0      	push	{r5, r6, r7, lr}
    40d0:	b089      	sub	sp, #36	; 0x24
    40d2:	0004      	movs	r4, r0
    40d4:	000e      	movs	r6, r1
    40d6:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    40d8:	ab07      	add	r3, sp, #28
    40da:	2102      	movs	r1, #2
    40dc:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    40de:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    40e0:	3113      	adds	r1, #19
    40e2:	a802      	add	r0, sp, #8
    40e4:	4684      	mov	ip, r0
    40e6:	4461      	add	r1, ip
    40e8:	0a10      	lsrs	r0, r2, #8
    40ea:	7008      	strb	r0, [r1, #0]
    40ec:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    40ee:	7822      	ldrb	r2, [r4, #0]
    40f0:	7861      	ldrb	r1, [r4, #1]
    40f2:	0209      	lsls	r1, r1, #8
    40f4:	4311      	orrs	r1, r2
    40f6:	78a2      	ldrb	r2, [r4, #2]
    40f8:	0412      	lsls	r2, r2, #16
    40fa:	430a      	orrs	r2, r1
    40fc:	78e5      	ldrb	r5, [r4, #3]
    40fe:	062d      	lsls	r5, r5, #24
    4100:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    4102:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    4104:	2228      	movs	r2, #40	; 0x28
    4106:	4690      	mov	r8, r2
    4108:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    410a:	0100      	lsls	r0, r0, #4
    410c:	4a25      	ldr	r2, [pc, #148]	; (41a4 <dma_eeprom_write+0xe0>)
    410e:	4691      	mov	r9, r2
    4110:	4448      	add	r0, r9
    4112:	4a25      	ldr	r2, [pc, #148]	; (41a8 <dma_eeprom_write+0xe4>)
    4114:	4693      	mov	fp, r2
    4116:	9203      	str	r2, [sp, #12]
    4118:	4642      	mov	r2, r8
    411a:	9202      	str	r2, [sp, #8]
    411c:	9301      	str	r3, [sp, #4]
    411e:	2203      	movs	r2, #3
    4120:	9200      	str	r2, [sp, #0]
    4122:	2300      	movs	r3, #0
    4124:	2200      	movs	r2, #0
    4126:	2101      	movs	r1, #1
    4128:	4f20      	ldr	r7, [pc, #128]	; (41ac <dma_eeprom_write+0xe8>)
    412a:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    412c:	466b      	mov	r3, sp
    412e:	8a9b      	ldrh	r3, [r3, #20]
    4130:	469a      	mov	sl, r3
    4132:	2300      	movs	r3, #0
    4134:	9303      	str	r3, [sp, #12]
    4136:	4641      	mov	r1, r8
    4138:	9102      	str	r1, [sp, #8]
    413a:	9912      	ldr	r1, [sp, #72]	; 0x48
    413c:	9101      	str	r1, [sp, #4]
    413e:	4651      	mov	r1, sl
    4140:	9100      	str	r1, [sp, #0]
    4142:	2200      	movs	r2, #0
    4144:	2101      	movs	r1, #1
    4146:	4658      	mov	r0, fp
    4148:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    414a:	7870      	ldrb	r0, [r6, #1]
    414c:	0100      	lsls	r0, r0, #4
    414e:	4448      	add	r0, r9
    4150:	4917      	ldr	r1, [pc, #92]	; (41b0 <dma_eeprom_write+0xec>)
    4152:	4689      	mov	r9, r1
    4154:	9103      	str	r1, [sp, #12]
    4156:	4917      	ldr	r1, [pc, #92]	; (41b4 <dma_eeprom_write+0xf0>)
    4158:	468b      	mov	fp, r1
    415a:	9102      	str	r1, [sp, #8]
    415c:	4641      	mov	r1, r8
    415e:	9101      	str	r1, [sp, #4]
    4160:	2203      	movs	r2, #3
    4162:	9200      	str	r2, [sp, #0]
    4164:	2300      	movs	r3, #0
    4166:	2200      	movs	r2, #0
    4168:	2100      	movs	r1, #0
    416a:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    416c:	2300      	movs	r3, #0
    416e:	9303      	str	r3, [sp, #12]
    4170:	465b      	mov	r3, fp
    4172:	9302      	str	r3, [sp, #8]
    4174:	4643      	mov	r3, r8
    4176:	9301      	str	r3, [sp, #4]
    4178:	4653      	mov	r3, sl
    417a:	9300      	str	r3, [sp, #0]
    417c:	2300      	movs	r3, #0
    417e:	2200      	movs	r2, #0
    4180:	2100      	movs	r1, #0
    4182:	4648      	mov	r0, r9
    4184:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    4186:	0020      	movs	r0, r4
    4188:	4b0b      	ldr	r3, [pc, #44]	; (41b8 <dma_eeprom_write+0xf4>)
    418a:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    418c:	1d21      	adds	r1, r4, #4
    418e:	0032      	movs	r2, r6
    4190:	0028      	movs	r0, r5
    4192:	4b0a      	ldr	r3, [pc, #40]	; (41bc <dma_eeprom_write+0xf8>)
    4194:	4798      	blx	r3
}
    4196:	b009      	add	sp, #36	; 0x24
    4198:	bcf0      	pop	{r4, r5, r6, r7}
    419a:	46bb      	mov	fp, r7
    419c:	46b2      	mov	sl, r6
    419e:	46a9      	mov	r9, r5
    41a0:	46a0      	mov	r8, r4
    41a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41a4:	20000568 	.word	0x20000568
    41a8:	20000810 	.word	0x20000810
    41ac:	00001b6d 	.word	0x00001b6d
    41b0:	20000800 	.word	0x20000800
    41b4:	2000036c 	.word	0x2000036c
    41b8:	00001cdd 	.word	0x00001cdd
    41bc:	00004365 	.word	0x00004365

000041c0 <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    41c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41c2:	b083      	sub	sp, #12
    41c4:	0014      	movs	r4, r2
    41c6:	001d      	movs	r5, r3
	switch (request->type) {
    41c8:	2324      	movs	r3, #36	; 0x24
    41ca:	5cd3      	ldrb	r3, [r2, r3]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d004      	beq.n	41da <dma_eeprom_process_request+0x1a>
    41d0:	2b01      	cmp	r3, #1
    41d2:	d00a      	beq.n	41ea <dma_eeprom_process_request+0x2a>
    41d4:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    41d6:	b003      	add	sp, #12
    41d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    41da:	69d3      	ldr	r3, [r2, #28]
    41dc:	6992      	ldr	r2, [r2, #24]
    41de:	6a24      	ldr	r4, [r4, #32]
    41e0:	9400      	str	r4, [sp, #0]
    41e2:	4c1a      	ldr	r4, [pc, #104]	; (424c <dma_eeprom_process_request+0x8c>)
    41e4:	47a0      	blx	r4
	return true;
    41e6:	2001      	movs	r0, #1
		break;
    41e8:	e7f5      	b.n	41d6 <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    41ea:	6992      	ldr	r2, [r2, #24]
    41ec:	69e6      	ldr	r6, [r4, #28]
    41ee:	1993      	adds	r3, r2, r6
    41f0:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    41f2:	233f      	movs	r3, #63	; 0x3f
    41f4:	0017      	movs	r7, r2
    41f6:	439f      	bics	r7, r3
    41f8:	003b      	movs	r3, r7
    41fa:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    41fc:	459c      	cmp	ip, r3
    41fe:	d300      	bcc.n	4202 <dma_eeprom_process_request+0x42>
    4200:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    4202:	6a23      	ldr	r3, [r4, #32]
    4204:	9300      	str	r3, [sp, #0]
    4206:	0033      	movs	r3, r6
    4208:	4f11      	ldr	r7, [pc, #68]	; (4250 <dma_eeprom_process_request+0x90>)
    420a:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    420c:	4b11      	ldr	r3, [pc, #68]	; (4254 <dma_eeprom_process_request+0x94>)
    420e:	4798      	blx	r3
    4210:	4b11      	ldr	r3, [pc, #68]	; (4258 <dma_eeprom_process_request+0x98>)
    4212:	4798      	blx	r3
    4214:	4b11      	ldr	r3, [pc, #68]	; (425c <dma_eeprom_process_request+0x9c>)
    4216:	4912      	ldr	r1, [pc, #72]	; (4260 <dma_eeprom_process_request+0xa0>)
    4218:	4798      	blx	r3
    421a:	4b12      	ldr	r3, [pc, #72]	; (4264 <dma_eeprom_process_request+0xa4>)
    421c:	4798      	blx	r3
    421e:	7428      	strb	r0, [r5, #16]
    4220:	0a03      	lsrs	r3, r0, #8
    4222:	746b      	strb	r3, [r5, #17]
    4224:	0c03      	lsrs	r3, r0, #16
    4226:	74ab      	strb	r3, [r5, #18]
    4228:	0e00      	lsrs	r0, r0, #24
    422a:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    422c:	2301      	movs	r3, #1
    422e:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    4230:	69e3      	ldr	r3, [r4, #28]
    4232:	1b9b      	subs	r3, r3, r6
    4234:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    4236:	d101      	bne.n	423c <dma_eeprom_process_request+0x7c>
	return true;
    4238:	2001      	movs	r0, #1
    423a:	e7cc      	b.n	41d6 <dma_eeprom_process_request+0x16>
				request->address += count;
    423c:	69a3      	ldr	r3, [r4, #24]
    423e:	199b      	adds	r3, r3, r6
    4240:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    4242:	6a23      	ldr	r3, [r4, #32]
    4244:	199b      	adds	r3, r3, r6
    4246:	6223      	str	r3, [r4, #32]
				return false;
    4248:	2000      	movs	r0, #0
    424a:	e7c4      	b.n	41d6 <dma_eeprom_process_request+0x16>
    424c:	00003fc9 	.word	0x00003fc9
    4250:	000040c5 	.word	0x000040c5
    4254:	00002a15 	.word	0x00002a15
    4258:	000059bd 	.word	0x000059bd
    425c:	00004c75 	.word	0x00004c75
    4260:	486a6000 	.word	0x486a6000
    4264:	00004c45 	.word	0x00004c45

00004268 <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    4268:	b530      	push	{r4, r5, lr}
    426a:	b083      	sub	sp, #12
    426c:	0014      	movs	r4, r2
    426e:	001a      	movs	r2, r3
    4270:	ab06      	add	r3, sp, #24
    4272:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    4274:	2324      	movs	r3, #36	; 0x24
    4276:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    4278:	9b07      	ldr	r3, [sp, #28]
    427a:	618b      	str	r3, [r1, #24]
	request->count = count;
    427c:	9b08      	ldr	r3, [sp, #32]
    427e:	61cb      	str	r3, [r1, #28]
	request->data = data;
    4280:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4282:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    4284:	4b03      	ldr	r3, [pc, #12]	; (4294 <eeprom_request+0x2c>)
    4286:	9301      	str	r3, [sp, #4]
    4288:	9100      	str	r1, [sp, #0]
    428a:	0023      	movs	r3, r4
    428c:	4c02      	ldr	r4, [pc, #8]	; (4298 <eeprom_request+0x30>)
    428e:	47a0      	blx	r4
}
    4290:	b003      	add	sp, #12
    4292:	bd30      	pop	{r4, r5, pc}
    4294:	000041c1 	.word	0x000041c1
    4298:	00003f41 	.word	0x00003f41

0000429c <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    429c:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    429e:	3015      	adds	r0, #21
    42a0:	2300      	movs	r3, #0
    42a2:	22ff      	movs	r2, #255	; 0xff
    42a4:	2103      	movs	r1, #3
    42a6:	4c01      	ldr	r4, [pc, #4]	; (42ac <eeprom_wait_until_done+0x10>)
    42a8:	47a0      	blx	r4
    42aa:	bd10      	pop	{r4, pc}
    42ac:	00003b2d 	.word	0x00003b2d

000042b0 <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    42b0:	b570      	push	{r4, r5, r6, lr}
    42b2:	0005      	movs	r5, r0
    42b4:	0014      	movs	r4, r2
	IMU_ON_BUS();
    42b6:	2180      	movs	r1, #128	; 0x80
    42b8:	0389      	lsls	r1, r1, #14
    42ba:	2000      	movs	r0, #0
    42bc:	4b10      	ldr	r3, [pc, #64]	; (4300 <dma_imu_icm20948_process_request+0x50>)
    42be:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    42c0:	2325      	movs	r3, #37	; 0x25
    42c2:	5ce1      	ldrb	r1, [r4, r3]
	imu_icm20948_user_bank(imudesc, request->user_bank);
    42c4:	0028      	movs	r0, r5
    42c6:	4b0f      	ldr	r3, [pc, #60]	; (4304 <dma_imu_icm20948_process_request+0x54>)
    42c8:	4798      	blx	r3
	switch (request->type) {
    42ca:	2324      	movs	r3, #36	; 0x24
    42cc:	5ce3      	ldrb	r3, [r4, r3]
    42ce:	2b00      	cmp	r3, #0
    42d0:	d008      	beq.n	42e4 <dma_imu_icm20948_process_request+0x34>
    42d2:	2b01      	cmp	r3, #1
    42d4:	d00d      	beq.n	42f2 <dma_imu_icm20948_process_request+0x42>
	IMU_OFF_BUS();
    42d6:	2180      	movs	r1, #128	; 0x80
    42d8:	0389      	lsls	r1, r1, #14
    42da:	2000      	movs	r0, #0
    42dc:	4b0a      	ldr	r3, [pc, #40]	; (4308 <dma_imu_icm20948_process_request+0x58>)
    42de:	4798      	blx	r3
}
    42e0:	2001      	movs	r0, #1
    42e2:	bd70      	pop	{r4, r5, r6, pc}
		imu_icm20948_read(imudesc, request->address, request->count, request->data);
    42e4:	6a23      	ldr	r3, [r4, #32]
    42e6:	69e2      	ldr	r2, [r4, #28]
    42e8:	7e21      	ldrb	r1, [r4, #24]
    42ea:	0028      	movs	r0, r5
    42ec:	4c07      	ldr	r4, [pc, #28]	; (430c <dma_imu_icm20948_process_request+0x5c>)
    42ee:	47a0      	blx	r4
		break;
    42f0:	e7f1      	b.n	42d6 <dma_imu_icm20948_process_request+0x26>
		imu_icm20948_write(imudesc, request->address, request->count, request->data);
    42f2:	6a23      	ldr	r3, [r4, #32]
    42f4:	69e2      	ldr	r2, [r4, #28]
    42f6:	7e21      	ldrb	r1, [r4, #24]
    42f8:	0028      	movs	r0, r5
    42fa:	4c05      	ldr	r4, [pc, #20]	; (4310 <dma_imu_icm20948_process_request+0x60>)
    42fc:	47a0      	blx	r4
		break;
    42fe:	e7ea      	b.n	42d6 <dma_imu_icm20948_process_request+0x26>
    4300:	000023cd 	.word	0x000023cd
    4304:	000021d5 	.word	0x000021d5
    4308:	000023dd 	.word	0x000023dd
    430c:	00002135 	.word	0x00002135
    4310:	0000209d 	.word	0x0000209d

00004314 <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    4314:	b570      	push	{r4, r5, r6, lr}
    4316:	b082      	sub	sp, #8
    4318:	0014      	movs	r4, r2
    431a:	001a      	movs	r2, r3
    431c:	ab06      	add	r3, sp, #24
    431e:	781e      	ldrb	r6, [r3, #0]
    4320:	ab07      	add	r3, sp, #28
    4322:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    4324:	2324      	movs	r3, #36	; 0x24
    4326:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    4328:	9b08      	ldr	r3, [sp, #32]
    432a:	618b      	str	r3, [r1, #24]
	request->count = count;
    432c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    432e:	61cb      	str	r3, [r1, #28]
	request->data = data;
    4330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4332:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    4334:	2325      	movs	r3, #37	; 0x25
    4336:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    4338:	4b03      	ldr	r3, [pc, #12]	; (4348 <imu_icm20948_request+0x34>)
    433a:	9301      	str	r3, [sp, #4]
    433c:	9100      	str	r1, [sp, #0]
    433e:	0023      	movs	r3, r4
    4340:	4c02      	ldr	r4, [pc, #8]	; (434c <imu_icm20948_request+0x38>)
    4342:	47a0      	blx	r4
}
    4344:	b002      	add	sp, #8
    4346:	bd70      	pop	{r4, r5, r6, pc}
    4348:	000042b1 	.word	0x000042b1
    434c:	00003f41 	.word	0x00003f41

00004350 <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    4350:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    4352:	3015      	adds	r0, #21
    4354:	2300      	movs	r3, #0
    4356:	22ff      	movs	r2, #255	; 0xff
    4358:	2103      	movs	r1, #3
    435a:	4c01      	ldr	r4, [pc, #4]	; (4360 <imu_icm20948_wait_until_done+0x10>)
    435c:	47a0      	blx	r4
}
    435e:	bd10      	pop	{r4, pc}
    4360:	00003b2d 	.word	0x00003b2d

00004364 <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    4364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4366:	0007      	movs	r7, r0
    4368:	000d      	movs	r5, r1
    436a:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    436c:	7810      	ldrb	r0, [r2, #0]
    436e:	4e1c      	ldr	r6, [pc, #112]	; (43e0 <dma_spi_transaction+0x7c>)
    4370:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    4372:	7860      	ldrb	r0, [r4, #1]
    4374:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    4376:	0038      	movs	r0, r7
    4378:	4b1a      	ldr	r3, [pc, #104]	; (43e4 <dma_spi_transaction+0x80>)
    437a:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    437c:	7923      	ldrb	r3, [r4, #4]
    437e:	78e2      	ldrb	r2, [r4, #3]
    4380:	7820      	ldrb	r0, [r4, #0]
    4382:	2102      	movs	r1, #2
    4384:	4f18      	ldr	r7, [pc, #96]	; (43e8 <dma_spi_transaction+0x84>)
    4386:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    4388:	7923      	ldrb	r3, [r4, #4]
    438a:	78a2      	ldrb	r2, [r4, #2]
    438c:	7860      	ldrb	r0, [r4, #1]
    438e:	2102      	movs	r1, #2
    4390:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    4392:	782b      	ldrb	r3, [r5, #0]
    4394:	786a      	ldrb	r2, [r5, #1]
    4396:	0212      	lsls	r2, r2, #8
    4398:	431a      	orrs	r2, r3
    439a:	78ab      	ldrb	r3, [r5, #2]
    439c:	041b      	lsls	r3, r3, #16
    439e:	4313      	orrs	r3, r2
    43a0:	78e9      	ldrb	r1, [r5, #3]
    43a2:	0609      	lsls	r1, r1, #24
    43a4:	4319      	orrs	r1, r3
    43a6:	7928      	ldrb	r0, [r5, #4]
    43a8:	4b10      	ldr	r3, [pc, #64]	; (43ec <dma_spi_transaction+0x88>)
    43aa:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    43ac:	7820      	ldrb	r0, [r4, #0]
    43ae:	4f10      	ldr	r7, [pc, #64]	; (43f0 <dma_spi_transaction+0x8c>)
    43b0:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    43b2:	7860      	ldrb	r0, [r4, #1]
    43b4:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    43b6:	7860      	ldrb	r0, [r4, #1]
    43b8:	4b0e      	ldr	r3, [pc, #56]	; (43f4 <dma_spi_transaction+0x90>)
    43ba:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    43bc:	7820      	ldrb	r0, [r4, #0]
    43be:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    43c0:	7860      	ldrb	r0, [r4, #1]
    43c2:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    43c4:	782b      	ldrb	r3, [r5, #0]
    43c6:	786a      	ldrb	r2, [r5, #1]
    43c8:	0212      	lsls	r2, r2, #8
    43ca:	431a      	orrs	r2, r3
    43cc:	78ab      	ldrb	r3, [r5, #2]
    43ce:	041b      	lsls	r3, r3, #16
    43d0:	4313      	orrs	r3, r2
    43d2:	78e9      	ldrb	r1, [r5, #3]
    43d4:	0609      	lsls	r1, r1, #24
    43d6:	4319      	orrs	r1, r3
    43d8:	7928      	ldrb	r0, [r5, #4]
    43da:	4b07      	ldr	r3, [pc, #28]	; (43f8 <dma_spi_transaction+0x94>)
    43dc:	4798      	blx	r3
    43de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43e0:	00001c4d 	.word	0x00001c4d
    43e4:	000028cd 	.word	0x000028cd
    43e8:	00001bd9 	.word	0x00001bd9
    43ec:	000023dd 	.word	0x000023dd
    43f0:	00001c25 	.word	0x00001c25
    43f4:	00004469 	.word	0x00004469
    43f8:	000023cd 	.word	0x000023cd

000043fc <rtos_dma_wait_until_end_callback>:
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    43fc:	4b03      	ldr	r3, [pc, #12]	; (440c <rtos_dma_wait_until_end_callback+0x10>)
    43fe:	681b      	ldr	r3, [r3, #0]
    4400:	6a1b      	ldr	r3, [r3, #32]
    4402:	7819      	ldrb	r1, [r3, #0]
    4404:	4a02      	ldr	r2, [pc, #8]	; (4410 <rtos_dma_wait_until_end_callback+0x14>)
    4406:	233f      	movs	r3, #63	; 0x3f
    4408:	54d1      	strb	r1, [r2, r3]

	// // for evaluation
	// if (DMAC_REGS->DMAC_CHINTFLAG & DMAC_CHINTFLAG_TCMPL(1))
	// 	current_process->status = Process_State_Running;
}
    440a:	4770      	bx	lr
    440c:	200007a4 	.word	0x200007a4
    4410:	41004800 	.word	0x41004800

00004414 <rtos_dma_wait_until_end_or_timeout_callback>:
	// 	Process_Wait_Until_None, rtos_dma_wait_until_end_callback);
	// while (!(DMAC_REGS->DMAC_CHINTFLAG & DMAC_CHINTFLAG_TCMPL(1))) DMAC_REGS->DMAC_CHID = channel;
	current_process->data = data;
}

void rtos_dma_wait_until_end_or_timeout_callback() {
    4414:	b510      	push	{r4, lr}
    4416:	b082      	sub	sp, #8
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    4418:	4c0f      	ldr	r4, [pc, #60]	; (4458 <rtos_dma_wait_until_end_or_timeout_callback+0x44>)
    441a:	6823      	ldr	r3, [r4, #0]
    441c:	6a1b      	ldr	r3, [r3, #32]
    441e:	7819      	ldrb	r1, [r3, #0]
    4420:	4a0e      	ldr	r2, [pc, #56]	; (445c <rtos_dma_wait_until_end_or_timeout_callback+0x48>)
    4422:	233f      	movs	r3, #63	; 0x3f
    4424:	54d1      	strb	r1, [r2, r3]

	// Check whether timeout has occured
	volatile uint32_t time = time_read_ticks();
    4426:	4b0e      	ldr	r3, [pc, #56]	; (4460 <rtos_dma_wait_until_end_or_timeout_callback+0x4c>)
    4428:	4798      	blx	r3
    442a:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    442c:	6822      	ldr	r2, [r4, #0]
    442e:	6953      	ldr	r3, [r2, #20]
    4430:	9901      	ldr	r1, [sp, #4]
    4432:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    4434:	490b      	ldr	r1, [pc, #44]	; (4464 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    4436:	6809      	ldr	r1, [r1, #0]
    4438:	4299      	cmp	r1, r3
    443a:	dc07      	bgt.n	444c <rtos_dma_wait_until_end_or_timeout_callback+0x38>
    443c:	4909      	ldr	r1, [pc, #36]	; (4464 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    443e:	6808      	ldr	r0, [r1, #0]
    4440:	4908      	ldr	r1, [pc, #32]	; (4464 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    4442:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    4444:	2b00      	cmp	r3, #0
    4446:	dd03      	ble.n	4450 <rtos_dma_wait_until_end_or_timeout_callback+0x3c>
}
    4448:	b002      	add	sp, #8
    444a:	bd10      	pop	{r4, pc}
	min = (t < min) ? t : min;
    444c:	0018      	movs	r0, r3
    444e:	e7f7      	b.n	4440 <rtos_dma_wait_until_end_or_timeout_callback+0x2c>
	if (t <= 0) current_process->status = Process_State_Running;
    4450:	2301      	movs	r3, #1
    4452:	6193      	str	r3, [r2, #24]
}
    4454:	e7f8      	b.n	4448 <rtos_dma_wait_until_end_or_timeout_callback+0x34>
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	200007a4 	.word	0x200007a4
    445c:	41004800 	.word	0x41004800
    4460:	00002a15 	.word	0x00002a15
    4464:	200000f8 	.word	0x200000f8

00004468 <rtos_dma_wait_until_end>:
void rtos_dma_wait_until_end(int channel) {
    4468:	b570      	push	{r4, r5, r6, lr}
    446a:	b084      	sub	sp, #16
    446c:	9003      	str	r0, [sp, #12]
	void* data = current_process->data;
    446e:	4c08      	ldr	r4, [pc, #32]	; (4490 <rtos_dma_wait_until_end+0x28>)
    4470:	6823      	ldr	r3, [r4, #0]
    4472:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    4474:	aa03      	add	r2, sp, #12
    4476:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    4478:	4b06      	ldr	r3, [pc, #24]	; (4494 <rtos_dma_wait_until_end+0x2c>)
    447a:	9300      	str	r3, [sp, #0]
    447c:	2300      	movs	r3, #0
    447e:	2202      	movs	r2, #2
    4480:	2102      	movs	r1, #2
    4482:	4805      	ldr	r0, [pc, #20]	; (4498 <rtos_dma_wait_until_end+0x30>)
    4484:	4e05      	ldr	r6, [pc, #20]	; (449c <rtos_dma_wait_until_end+0x34>)
    4486:	47b0      	blx	r6
	current_process->data = data;
    4488:	6823      	ldr	r3, [r4, #0]
    448a:	621d      	str	r5, [r3, #32]
}
    448c:	b004      	add	sp, #16
    448e:	bd70      	pop	{r4, r5, r6, pc}
    4490:	200007a4 	.word	0x200007a4
    4494:	000043fd 	.word	0x000043fd
    4498:	4100484e 	.word	0x4100484e
    449c:	00003b89 	.word	0x00003b89

000044a0 <rtos_dma_wait_until_end_or_timeout>:

void rtos_dma_wait_until_end_or_timeout(int channel, uint32_t timeout_ticks) {
    44a0:	b570      	push	{r4, r5, r6, lr}
    44a2:	b084      	sub	sp, #16
    44a4:	9003      	str	r0, [sp, #12]
    44a6:	000c      	movs	r4, r1
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + timeout_ticks;
    44a8:	4b0a      	ldr	r3, [pc, #40]	; (44d4 <rtos_dma_wait_until_end_or_timeout+0x34>)
    44aa:	4798      	blx	r3
    44ac:	4d0a      	ldr	r5, [pc, #40]	; (44d8 <rtos_dma_wait_until_end_or_timeout+0x38>)
    44ae:	682b      	ldr	r3, [r5, #0]
    44b0:	1900      	adds	r0, r0, r4
    44b2:	6158      	str	r0, [r3, #20]

	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    44b4:	6a1c      	ldr	r4, [r3, #32]
	current_process->data = &channel;
    44b6:	aa03      	add	r2, sp, #12
    44b8:	621a      	str	r2, [r3, #32]
	wait_until_callback_preserve_deadline(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    44ba:	4b08      	ldr	r3, [pc, #32]	; (44dc <rtos_dma_wait_until_end_or_timeout+0x3c>)
    44bc:	9300      	str	r3, [sp, #0]
    44be:	2300      	movs	r3, #0
    44c0:	2202      	movs	r2, #2
    44c2:	2102      	movs	r1, #2
    44c4:	4806      	ldr	r0, [pc, #24]	; (44e0 <rtos_dma_wait_until_end_or_timeout+0x40>)
    44c6:	4e07      	ldr	r6, [pc, #28]	; (44e4 <rtos_dma_wait_until_end_or_timeout+0x44>)
    44c8:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_or_timeout_callback);
		
	current_process->data = data;
    44ca:	682b      	ldr	r3, [r5, #0]
    44cc:	621c      	str	r4, [r3, #32]
    44ce:	b004      	add	sp, #16
    44d0:	bd70      	pop	{r4, r5, r6, pc}
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	00002a15 	.word	0x00002a15
    44d8:	200007a4 	.word	0x200007a4
    44dc:	00004415 	.word	0x00004415
    44e0:	4100484e 	.word	0x4100484e
    44e4:	00003be5 	.word	0x00003be5

000044e8 <rtos_uart_start_send_buffer>:
#include "rtos_uart.h"
#include "Drivers/sercom.h"
#include "rtos_dma.h"

bool rtos_uart_start_send_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    44e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ea:	b087      	sub	sp, #28
    44ec:	0005      	movs	r5, r0
    44ee:	000c      	movs	r4, r1
    44f0:	0016      	movs	r6, r2
    44f2:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    44f4:	4b12      	ldr	r3, [pc, #72]	; (4540 <rtos_uart_start_send_buffer+0x58>)
    44f6:	4798      	blx	r3
    44f8:	1e07      	subs	r7, r0, #0
    44fa:	d102      	bne.n	4502 <rtos_uart_start_send_buffer+0x1a>
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->txchannel);

    return true;
}
    44fc:	0038      	movs	r0, r7
    44fe:	b007      	add	sp, #28
    4500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    4502:	7820      	ldrb	r0, [r4, #0]
    buffer, &(sercom->USART_INT.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
    4504:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    4506:	0100      	lsls	r0, r0, #4
    4508:	4b0e      	ldr	r3, [pc, #56]	; (4544 <rtos_uart_start_send_buffer+0x5c>)
    450a:	18c0      	adds	r0, r0, r3
    450c:	2300      	movs	r3, #0
    450e:	9303      	str	r3, [sp, #12]
    4510:	9502      	str	r5, [sp, #8]
    4512:	9601      	str	r6, [sp, #4]
    4514:	466b      	mov	r3, sp
    4516:	8a9e      	ldrh	r6, [r3, #20]
    4518:	9600      	str	r6, [sp, #0]
    451a:	2300      	movs	r3, #0
    451c:	2200      	movs	r2, #0
    451e:	2101      	movs	r1, #1
    4520:	4d09      	ldr	r5, [pc, #36]	; (4548 <rtos_uart_start_send_buffer+0x60>)
    4522:	47a8      	blx	r5
	dma_disable_channel(dmadesc->txchannel);
    4524:	7820      	ldrb	r0, [r4, #0]
    4526:	4b09      	ldr	r3, [pc, #36]	; (454c <rtos_uart_start_send_buffer+0x64>)
    4528:	4798      	blx	r3
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    452a:	7923      	ldrb	r3, [r4, #4]
    452c:	78e2      	ldrb	r2, [r4, #3]
    452e:	7820      	ldrb	r0, [r4, #0]
    4530:	2102      	movs	r1, #2
    4532:	4d07      	ldr	r5, [pc, #28]	; (4550 <rtos_uart_start_send_buffer+0x68>)
    4534:	47a8      	blx	r5
	dma_enable_channel(dmadesc->txchannel);
    4536:	7820      	ldrb	r0, [r4, #0]
    4538:	4b06      	ldr	r3, [pc, #24]	; (4554 <rtos_uart_start_send_buffer+0x6c>)
    453a:	4798      	blx	r3
    return true;
    453c:	e7de      	b.n	44fc <rtos_uart_start_send_buffer+0x14>
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	000026c9 	.word	0x000026c9
    4544:	20000568 	.word	0x20000568
    4548:	00001b6d 	.word	0x00001b6d
    454c:	00001c4d 	.word	0x00001c4d
    4550:	00001bd9 	.word	0x00001bd9
    4554:	00001c25 	.word	0x00001c25

00004558 <rtos_uart_wait_until_send_complete>:

void rtos_uart_wait_until_send_complete(DMA_Descriptor* dmadesc) {
    4558:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->txchannel);
    455a:	7800      	ldrb	r0, [r0, #0]
    455c:	4b01      	ldr	r3, [pc, #4]	; (4564 <rtos_uart_wait_until_send_complete+0xc>)
    455e:	4798      	blx	r3
}
    4560:	bd10      	pop	{r4, pc}
    4562:	46c0      	nop			; (mov r8, r8)
    4564:	00004469 	.word	0x00004469

00004568 <rtos_uart_start_read_buffer>:


bool rtos_uart_start_read_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    4568:	b5f0      	push	{r4, r5, r6, r7, lr}
    456a:	b087      	sub	sp, #28
    456c:	0005      	movs	r5, r0
    456e:	000c      	movs	r4, r1
    4570:	0016      	movs	r6, r2
    4572:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    4574:	4b12      	ldr	r3, [pc, #72]	; (45c0 <rtos_uart_start_read_buffer+0x58>)
    4576:	4798      	blx	r3
    4578:	1e07      	subs	r7, r0, #0
    457a:	d102      	bne.n	4582 <rtos_uart_start_read_buffer+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
}
    457c:	0038      	movs	r0, r7
    457e:	b007      	add	sp, #28
    4580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    4582:	7860      	ldrb	r0, [r4, #1]
    &(sercom->USART_INT.SERCOM_DATA), buffer, DMA_NEXTDESCRIPTOR_NONE);
    4584:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    4586:	0100      	lsls	r0, r0, #4
    4588:	4b0e      	ldr	r3, [pc, #56]	; (45c4 <rtos_uart_start_read_buffer+0x5c>)
    458a:	18c0      	adds	r0, r0, r3
    458c:	2300      	movs	r3, #0
    458e:	9303      	str	r3, [sp, #12]
    4590:	9602      	str	r6, [sp, #8]
    4592:	9501      	str	r5, [sp, #4]
    4594:	466b      	mov	r3, sp
    4596:	8a9e      	ldrh	r6, [r3, #20]
    4598:	9600      	str	r6, [sp, #0]
    459a:	2300      	movs	r3, #0
    459c:	2201      	movs	r2, #1
    459e:	2100      	movs	r1, #0
    45a0:	4d09      	ldr	r5, [pc, #36]	; (45c8 <rtos_uart_start_read_buffer+0x60>)
    45a2:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    45a4:	7860      	ldrb	r0, [r4, #1]
    45a6:	4b09      	ldr	r3, [pc, #36]	; (45cc <rtos_uart_start_read_buffer+0x64>)
    45a8:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    45aa:	7923      	ldrb	r3, [r4, #4]
    45ac:	78a2      	ldrb	r2, [r4, #2]
    45ae:	7860      	ldrb	r0, [r4, #1]
    45b0:	2102      	movs	r1, #2
    45b2:	4d07      	ldr	r5, [pc, #28]	; (45d0 <rtos_uart_start_read_buffer+0x68>)
    45b4:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    45b6:	7860      	ldrb	r0, [r4, #1]
    45b8:	4b06      	ldr	r3, [pc, #24]	; (45d4 <rtos_uart_start_read_buffer+0x6c>)
    45ba:	4798      	blx	r3
    return true;
    45bc:	e7de      	b.n	457c <rtos_uart_start_read_buffer+0x14>
    45be:	46c0      	nop			; (mov r8, r8)
    45c0:	000026c9 	.word	0x000026c9
    45c4:	20000568 	.word	0x20000568
    45c8:	00001b6d 	.word	0x00001b6d
    45cc:	00001c4d 	.word	0x00001c4d
    45d0:	00001bd9 	.word	0x00001bd9
    45d4:	00001c25 	.word	0x00001c25

000045d8 <rtos_uart_wait_until_read_complete>:

void rtos_uart_wait_until_read_complete(DMA_Descriptor* dmadesc) {
    45d8:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->rxchannel);
    45da:	7840      	ldrb	r0, [r0, #1]
    45dc:	4b01      	ldr	r3, [pc, #4]	; (45e4 <rtos_uart_wait_until_read_complete+0xc>)
    45de:	4798      	blx	r3
}
    45e0:	bd10      	pop	{r4, pc}
    45e2:	46c0      	nop			; (mov r8, r8)
    45e4:	00004469 	.word	0x00004469

000045e8 <rtos_uart_wait_until_read_complete_or_timeout>:

void rtos_uart_wait_until_read_complete_or_timeout(DMA_Descriptor* dmadesc, uint32_t timeout_ticks) {
    45e8:	b510      	push	{r4, lr}
    45ea:	0004      	movs	r4, r0
    rtos_dma_wait_until_end_or_timeout(dmadesc->rxchannel, timeout_ticks);
    45ec:	7840      	ldrb	r0, [r0, #1]
    45ee:	4b03      	ldr	r3, [pc, #12]	; (45fc <rtos_uart_wait_until_read_complete_or_timeout+0x14>)
    45f0:	4798      	blx	r3

    dma_enable_channel(dmadesc->rxchannel);
    45f2:	7860      	ldrb	r0, [r4, #1]
    45f4:	4b02      	ldr	r3, [pc, #8]	; (4600 <rtos_uart_wait_until_read_complete_or_timeout+0x18>)
    45f6:	4798      	blx	r3
}
    45f8:	bd10      	pop	{r4, pc}
    45fa:	46c0      	nop			; (mov r8, r8)
    45fc:	000044a1 	.word	0x000044a1
    4600:	00001c25 	.word	0x00001c25

00004604 <rtos_uart_start_read_buffer_infinite>:

bool rtos_uart_start_read_buffer_infinite(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    4604:	b5f0      	push	{r4, r5, r6, r7, lr}
    4606:	b087      	sub	sp, #28
    4608:	0005      	movs	r5, r0
    460a:	000c      	movs	r4, r1
    460c:	0016      	movs	r6, r2
    460e:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    4610:	4b11      	ldr	r3, [pc, #68]	; (4658 <rtos_uart_start_read_buffer_infinite+0x54>)
    4612:	4798      	blx	r3
    4614:	1e07      	subs	r7, r0, #0
    4616:	d102      	bne.n	461e <rtos_uart_start_read_buffer_infinite+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
    4618:	0038      	movs	r0, r7
    461a:	b007      	add	sp, #28
    461c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    461e:	7860      	ldrb	r0, [r4, #1]
    4620:	0100      	lsls	r0, r0, #4
    4622:	4b0e      	ldr	r3, [pc, #56]	; (465c <rtos_uart_start_read_buffer_infinite+0x58>)
    4624:	18c0      	adds	r0, r0, r3
    &(sercom->USART_INT.SERCOM_DATA), buffer, &(dma_descriptor[dmadesc->rxchannel]));
    4626:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    4628:	9003      	str	r0, [sp, #12]
    462a:	9602      	str	r6, [sp, #8]
    462c:	9501      	str	r5, [sp, #4]
    462e:	466b      	mov	r3, sp
    4630:	8a9e      	ldrh	r6, [r3, #20]
    4632:	9600      	str	r6, [sp, #0]
    4634:	2300      	movs	r3, #0
    4636:	2201      	movs	r2, #1
    4638:	2100      	movs	r1, #0
    463a:	4d09      	ldr	r5, [pc, #36]	; (4660 <rtos_uart_start_read_buffer_infinite+0x5c>)
    463c:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    463e:	7860      	ldrb	r0, [r4, #1]
    4640:	4b08      	ldr	r3, [pc, #32]	; (4664 <rtos_uart_start_read_buffer_infinite+0x60>)
    4642:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    4644:	7923      	ldrb	r3, [r4, #4]
    4646:	78a2      	ldrb	r2, [r4, #2]
    4648:	7860      	ldrb	r0, [r4, #1]
    464a:	2102      	movs	r1, #2
    464c:	4d06      	ldr	r5, [pc, #24]	; (4668 <rtos_uart_start_read_buffer_infinite+0x64>)
    464e:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    4650:	7860      	ldrb	r0, [r4, #1]
    4652:	4b06      	ldr	r3, [pc, #24]	; (466c <rtos_uart_start_read_buffer_infinite+0x68>)
    4654:	4798      	blx	r3
    return true;
    4656:	e7df      	b.n	4618 <rtos_uart_start_read_buffer_infinite+0x14>
    4658:	000026c9 	.word	0x000026c9
    465c:	20000568 	.word	0x20000568
    4660:	00001b6d 	.word	0x00001b6d
    4664:	00001c4d 	.word	0x00001c4d
    4668:	00001bd9 	.word	0x00001bd9
    466c:	00001c25 	.word	0x00001c25

00004670 <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    4670:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    4672:	4b25      	ldr	r3, [pc, #148]	; (4708 <usb_proc_loop+0x98>)
    4674:	2200      	movs	r2, #0
    4676:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    4678:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    467a:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    467c:	70da      	strb	r2, [r3, #3]
    467e:	e00f      	b.n	46a0 <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    4680:	4c21      	ldr	r4, [pc, #132]	; (4708 <usb_proc_loop+0x98>)
    4682:	68e0      	ldr	r0, [r4, #12]
    4684:	18c0      	adds	r0, r0, r3
    4686:	4b21      	ldr	r3, [pc, #132]	; (470c <usb_proc_loop+0x9c>)
    4688:	4798      	blx	r3
    468a:	68a3      	ldr	r3, [r4, #8]
    468c:	181b      	adds	r3, r3, r0
    468e:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    4690:	4b1d      	ldr	r3, [pc, #116]	; (4708 <usb_proc_loop+0x98>)
    4692:	78db      	ldrb	r3, [r3, #3]
    4694:	2b00      	cmp	r3, #0
    4696:	d003      	beq.n	46a0 <usb_proc_loop+0x30>
    4698:	4b1d      	ldr	r3, [pc, #116]	; (4710 <usb_proc_loop+0xa0>)
    469a:	681b      	ldr	r3, [r3, #0]
    469c:	2b00      	cmp	r3, #0
    469e:	d11f      	bne.n	46e0 <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    46a0:	4c19      	ldr	r4, [pc, #100]	; (4708 <usb_proc_loop+0x98>)
    46a2:	2301      	movs	r3, #1
    46a4:	22ff      	movs	r2, #255	; 0xff
    46a6:	2100      	movs	r1, #0
    46a8:	0020      	movs	r0, r4
    46aa:	4d1a      	ldr	r5, [pc, #104]	; (4714 <usb_proc_loop+0xa4>)
    46ac:	47a8      	blx	r5
		usb_interrupt = false;
    46ae:	2300      	movs	r3, #0
    46b0:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    46b2:	7863      	ldrb	r3, [r4, #1]
    46b4:	2b00      	cmp	r3, #0
    46b6:	d125      	bne.n	4704 <usb_proc_loop+0x94>
		usb_handle_function();
    46b8:	4b17      	ldr	r3, [pc, #92]	; (4718 <usb_proc_loop+0xa8>)
    46ba:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    46bc:	4b12      	ldr	r3, [pc, #72]	; (4708 <usb_proc_loop+0x98>)
    46be:	789b      	ldrb	r3, [r3, #2]
    46c0:	2b00      	cmp	r3, #0
    46c2:	d0e5      	beq.n	4690 <usb_proc_loop+0x20>
    46c4:	4b15      	ldr	r3, [pc, #84]	; (471c <usb_proc_loop+0xac>)
    46c6:	781b      	ldrb	r3, [r3, #0]
    46c8:	2b00      	cmp	r3, #0
    46ca:	d1e1      	bne.n	4690 <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    46cc:	4b0e      	ldr	r3, [pc, #56]	; (4708 <usb_proc_loop+0x98>)
    46ce:	685a      	ldr	r2, [r3, #4]
    46d0:	689b      	ldr	r3, [r3, #8]
    46d2:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    46d4:	429a      	cmp	r2, r3
    46d6:	d1d3      	bne.n	4680 <usb_proc_loop+0x10>
    46d8:	4b0b      	ldr	r3, [pc, #44]	; (4708 <usb_proc_loop+0x98>)
    46da:	2200      	movs	r2, #0
    46dc:	709a      	strb	r2, [r3, #2]
    46de:	e7d7      	b.n	4690 <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    46e0:	4b0b      	ldr	r3, [pc, #44]	; (4710 <usb_proc_loop+0xa0>)
    46e2:	6819      	ldr	r1, [r3, #0]
    46e4:	4c08      	ldr	r4, [pc, #32]	; (4708 <usb_proc_loop+0x98>)
    46e6:	6920      	ldr	r0, [r4, #16]
    46e8:	6963      	ldr	r3, [r4, #20]
    46ea:	18c0      	adds	r0, r0, r3
    46ec:	4b0c      	ldr	r3, [pc, #48]	; (4720 <usb_proc_loop+0xb0>)
    46ee:	4798      	blx	r3
    46f0:	6963      	ldr	r3, [r4, #20]
    46f2:	18c0      	adds	r0, r0, r3
    46f4:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    46f6:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    46f8:	4298      	cmp	r0, r3
    46fa:	d1d1      	bne.n	46a0 <usb_proc_loop+0x30>
    46fc:	4b02      	ldr	r3, [pc, #8]	; (4708 <usb_proc_loop+0x98>)
    46fe:	2200      	movs	r2, #0
    4700:	70da      	strb	r2, [r3, #3]
    4702:	e7cd      	b.n	46a0 <usb_proc_loop+0x30>
		}
	}
}
    4704:	bd70      	pop	{r4, r5, r6, pc}
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	20000820 	.word	0x20000820
    470c:	00003439 	.word	0x00003439
    4710:	200006d0 	.word	0x200006d0
    4714:	00003b2d 	.word	0x00003b2d
    4718:	000032a5 	.word	0x000032a5
    471c:	200006cc 	.word	0x200006cc
    4720:	00003475 	.word	0x00003475

00004724 <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    4724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4726:	46ce      	mov	lr, r9
    4728:	4647      	mov	r7, r8
    472a:	b580      	push	{r7, lr}
    472c:	0006      	movs	r6, r0
    472e:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4730:	4f15      	ldr	r7, [pc, #84]	; (4788 <rtos_usb_init+0x64>)
    4732:	2580      	movs	r5, #128	; 0x80
    4734:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    4736:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    473a:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    473e:	22c0      	movs	r2, #192	; 0xc0
    4740:	0492      	lsls	r2, r2, #18
    4742:	2106      	movs	r1, #6
    4744:	2000      	movs	r0, #0
    4746:	4b11      	ldr	r3, [pc, #68]	; (478c <rtos_usb_init+0x68>)
    4748:	4798      	blx	r3
	usb_init();
    474a:	4b11      	ldr	r3, [pc, #68]	; (4790 <rtos_usb_init+0x6c>)
    474c:	4798      	blx	r3
	usb_attach();
    474e:	4b11      	ldr	r3, [pc, #68]	; (4794 <rtos_usb_init+0x70>)
    4750:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    4752:	4911      	ldr	r1, [pc, #68]	; (4798 <rtos_usb_init+0x74>)
    4754:	4c11      	ldr	r4, [pc, #68]	; (479c <rtos_usb_init+0x78>)
    4756:	231c      	movs	r3, #28
    4758:	4699      	mov	r9, r3
    475a:	44a1      	add	r9, r4
    475c:	4643      	mov	r3, r8
    475e:	0032      	movs	r2, r6
    4760:	4648      	mov	r0, r9
    4762:	4e0f      	ldr	r6, [pc, #60]	; (47a0 <rtos_usb_init+0x7c>)
    4764:	47b0      	blx	r6
	dispatch_process(&usbproc);
    4766:	4648      	mov	r0, r9
    4768:	4b0e      	ldr	r3, [pc, #56]	; (47a4 <rtos_usb_init+0x80>)
    476a:	4798      	blx	r3
	wait_until_started(&usbproc);
    476c:	2201      	movs	r2, #1
    476e:	0020      	movs	r0, r4
    4770:	3034      	adds	r0, #52	; 0x34
    4772:	2301      	movs	r3, #1
    4774:	4252      	negs	r2, r2
    4776:	2100      	movs	r1, #0
    4778:	4c0b      	ldr	r4, [pc, #44]	; (47a8 <rtos_usb_init+0x84>)
    477a:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    477c:	603d      	str	r5, [r7, #0]
}
    477e:	bcc0      	pop	{r6, r7}
    4780:	46b9      	mov	r9, r7
    4782:	46b0      	mov	r8, r6
    4784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4786:	46c0      	nop			; (mov r8, r8)
    4788:	e000e100 	.word	0xe000e100
    478c:	000023ed 	.word	0x000023ed
    4790:	00002ee9 	.word	0x00002ee9
    4794:	00003249 	.word	0x00003249
    4798:	00004671 	.word	0x00004671
    479c:	20000820 	.word	0x20000820
    47a0:	000037c5 	.word	0x000037c5
    47a4:	000038a9 	.word	0x000038a9
    47a8:	00003b2d 	.word	0x00003b2d

000047ac <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47ac:	2380      	movs	r3, #128	; 0x80
    47ae:	4a05      	ldr	r2, [pc, #20]	; (47c4 <USB_Handler+0x18>)
    47b0:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    47b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47b6:	f3bf 8f6f 	isb	sy
void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);

	// ++usb_int_counter;
	
	usb_interrupt = true;
    47ba:	4b03      	ldr	r3, [pc, #12]	; (47c8 <USB_Handler+0x1c>)
    47bc:	2201      	movs	r2, #1
    47be:	701a      	strb	r2, [r3, #0]
}
    47c0:	4770      	bx	lr
    47c2:	46c0      	nop			; (mov r8, r8)
    47c4:	e000e100 	.word	0xe000e100
    47c8:	20000820 	.word	0x20000820

000047cc <rtos_usb_start_send_buffer>:
	usb_quit = true;
	join_process(&usbproc);
}


void rtos_usb_start_send_buffer(uint8_t* buffer, int count) {
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	0005      	movs	r5, r0
    47d0:	000e      	movs	r6, r1
	// if send operation is currently in progress wait until it finishes
	if (usb_send_status) wait_until_false(&usb_send_status);
    47d2:	4b0d      	ldr	r3, [pc, #52]	; (4808 <rtos_usb_start_send_buffer+0x3c>)
    47d4:	789b      	ldrb	r3, [r3, #2]
    47d6:	2b00      	cmp	r3, #0
    47d8:	d10e      	bne.n	47f8 <rtos_usb_start_send_buffer+0x2c>
	usb_send_buffer = buffer;
    47da:	4c0b      	ldr	r4, [pc, #44]	; (4808 <rtos_usb_start_send_buffer+0x3c>)
    47dc:	60e5      	str	r5, [r4, #12]
	usb_send_buffer_count = count;
    47de:	6066      	str	r6, [r4, #4]
	usb_send_bytes_sent = 0;
    47e0:	2300      	movs	r3, #0
    47e2:	60a3      	str	r3, [r4, #8]
	usb_send_status = true;
    47e4:	3301      	adds	r3, #1
    47e6:	70a3      	strb	r3, [r4, #2]
	// start send
	usb_send_bytes_sent += usb_serial_send_buffer(buffer, count);
    47e8:	0031      	movs	r1, r6
    47ea:	0028      	movs	r0, r5
    47ec:	4b07      	ldr	r3, [pc, #28]	; (480c <rtos_usb_start_send_buffer+0x40>)
    47ee:	4798      	blx	r3
    47f0:	68a3      	ldr	r3, [r4, #8]
    47f2:	181b      	adds	r3, r3, r0
    47f4:	60a3      	str	r3, [r4, #8]
}
    47f6:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_send_status) wait_until_false(&usb_send_status);
    47f8:	4805      	ldr	r0, [pc, #20]	; (4810 <rtos_usb_start_send_buffer+0x44>)
    47fa:	2300      	movs	r3, #0
    47fc:	22ff      	movs	r2, #255	; 0xff
    47fe:	2100      	movs	r1, #0
    4800:	4c04      	ldr	r4, [pc, #16]	; (4814 <rtos_usb_start_send_buffer+0x48>)
    4802:	47a0      	blx	r4
    4804:	e7e9      	b.n	47da <rtos_usb_start_send_buffer+0xe>
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	20000820 	.word	0x20000820
    480c:	00003439 	.word	0x00003439
    4810:	20000822 	.word	0x20000822
    4814:	00003b2d 	.word	0x00003b2d

00004818 <rtos_usb_wait_until_send_complete>:

int rtos_usb_wait_until_send_complete() {
    4818:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_send_status);
    481a:	4c04      	ldr	r4, [pc, #16]	; (482c <rtos_usb_wait_until_send_complete+0x14>)
    481c:	1ca0      	adds	r0, r4, #2
    481e:	2300      	movs	r3, #0
    4820:	22ff      	movs	r2, #255	; 0xff
    4822:	2100      	movs	r1, #0
    4824:	4d02      	ldr	r5, [pc, #8]	; (4830 <rtos_usb_wait_until_send_complete+0x18>)
    4826:	47a8      	blx	r5
	return usb_send_bytes_sent;
    4828:	68a0      	ldr	r0, [r4, #8]
}
    482a:	bd70      	pop	{r4, r5, r6, pc}
    482c:	20000820 	.word	0x20000820
    4830:	00003b2d 	.word	0x00003b2d

00004834 <rtos_usb_start_read_buffer>:


void rtos_usb_start_read_buffer(uint8_t* buffer, int count) {
    4834:	b570      	push	{r4, r5, r6, lr}
    4836:	0005      	movs	r5, r0
    4838:	000c      	movs	r4, r1
	// if read operation is currently in progress wait until it finishes
	if (usb_read_status) wait_until_false(&usb_read_status);
    483a:	4b09      	ldr	r3, [pc, #36]	; (4860 <rtos_usb_start_read_buffer+0x2c>)
    483c:	78db      	ldrb	r3, [r3, #3]
    483e:	2b00      	cmp	r3, #0
    4840:	d107      	bne.n	4852 <rtos_usb_start_read_buffer+0x1e>
	usb_read_buffer = buffer;
    4842:	4b07      	ldr	r3, [pc, #28]	; (4860 <rtos_usb_start_read_buffer+0x2c>)
    4844:	611d      	str	r5, [r3, #16]
	usb_read_buffer_count = count;
    4846:	619c      	str	r4, [r3, #24]
	usb_read_bytes_read = 0;
    4848:	2200      	movs	r2, #0
    484a:	615a      	str	r2, [r3, #20]
	usb_read_status = true;
    484c:	3201      	adds	r2, #1
    484e:	70da      	strb	r2, [r3, #3]
}
    4850:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_read_status) wait_until_false(&usb_read_status);
    4852:	4804      	ldr	r0, [pc, #16]	; (4864 <rtos_usb_start_read_buffer+0x30>)
    4854:	2300      	movs	r3, #0
    4856:	22ff      	movs	r2, #255	; 0xff
    4858:	2100      	movs	r1, #0
    485a:	4e03      	ldr	r6, [pc, #12]	; (4868 <rtos_usb_start_read_buffer+0x34>)
    485c:	47b0      	blx	r6
    485e:	e7f0      	b.n	4842 <rtos_usb_start_read_buffer+0xe>
    4860:	20000820 	.word	0x20000820
    4864:	20000823 	.word	0x20000823
    4868:	00003b2d 	.word	0x00003b2d

0000486c <rtos_usb_wait_until_read_complete>:

int rtos_usb_wait_until_read_complete() {
    486c:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_read_status);
    486e:	4c04      	ldr	r4, [pc, #16]	; (4880 <rtos_usb_wait_until_read_complete+0x14>)
    4870:	1ce0      	adds	r0, r4, #3
    4872:	2300      	movs	r3, #0
    4874:	22ff      	movs	r2, #255	; 0xff
    4876:	2100      	movs	r1, #0
    4878:	4d02      	ldr	r5, [pc, #8]	; (4884 <rtos_usb_wait_until_read_complete+0x18>)
    487a:	47a8      	blx	r5
	return usb_read_bytes_read;
    487c:	6960      	ldr	r0, [r4, #20]
}
    487e:	bd70      	pop	{r4, r5, r6, pc}
    4880:	20000820 	.word	0x20000820
    4884:	00003b2d 	.word	0x00003b2d

00004888 <CRC8>:
#include "gnclink.h"

const uint8_t CRC8_LUT_L[] = { 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D };
const uint8_t CRC8_LUT_H[] = { 0x00, 0x70, 0xE0, 0x90, 0xC7, 0xB7, 0x27, 0x57, 0x89, 0xF9, 0x69, 0x19, 0x4E, 0x3E, 0xAE, 0xDE };

uint8_t CRC8(uint8_t* data, int length) {
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	0006      	movs	r6, r0
	uint8_t crc = 0;
	for (int index = 0; index < length; ++index) {
    488c:	2400      	movs	r4, #0
	uint8_t crc = 0;
    488e:	2000      	movs	r0, #0
	for (int index = 0; index < length; ++index) {
    4890:	e00a      	b.n	48a8 <CRC8+0x20>
		crc ^= data[index];
    4892:	5d33      	ldrb	r3, [r6, r4]
    4894:	4043      	eors	r3, r0
		crc = CRC8_LUT_L[crc & 0xF] ^ CRC8_LUT_H[crc >> 4];
    4896:	250f      	movs	r5, #15
    4898:	401d      	ands	r5, r3
    489a:	4a05      	ldr	r2, [pc, #20]	; (48b0 <CRC8+0x28>)
    489c:	5d50      	ldrb	r0, [r2, r5]
    489e:	091b      	lsrs	r3, r3, #4
    48a0:	18d2      	adds	r2, r2, r3
    48a2:	7c13      	ldrb	r3, [r2, #16]
    48a4:	4058      	eors	r0, r3
	for (int index = 0; index < length; ++index) {
    48a6:	3401      	adds	r4, #1
    48a8:	428c      	cmp	r4, r1
    48aa:	dbf2      	blt.n	4892 <CRC8+0xa>
	}
	return crc;
}
    48ac:	bd70      	pop	{r4, r5, r6, pc}
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	000063a0 	.word	0x000063a0

000048b4 <GNClink_Get_Packet_Payload_Pointer>:

uint8_t* GNClink_Get_Packet_Payload_Pointer(uint8_t* packetPointer) {
	return packetPointer + GNCLINK_PACKET_HEADER_LENGTH;
    48b4:	3004      	adds	r0, #4
}
    48b6:	4770      	bx	lr

000048b8 <GNClink_Construct_Packet>:

bool GNClink_Construct_Packet(uint8_t* packetPointer, GNClink_PacketType packetType, GNClink_PacketFlags packetFlags, int payloadSize) {
    48b8:	b570      	push	{r4, r5, r6, lr}
    48ba:	000c      	movs	r4, r1
	// validate inputs
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    48bc:	2b3b      	cmp	r3, #59	; 0x3b
    48be:	d80c      	bhi.n	48da <GNClink_Construct_Packet+0x22>

	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;
	// get pointer to footer
	GNClink_PacketFooter* footer = (GNClink_PacketFooter*)(packetPointer + GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    48c0:	1d19      	adds	r1, r3, #4
    48c2:	1845      	adds	r5, r0, r1

	// populate header
	header->magic = GNCLINK_PACKET_MAGIC;
    48c4:	26ac      	movs	r6, #172	; 0xac
    48c6:	7006      	strb	r6, [r0, #0]
	header->packetType = packetType;
    48c8:	7044      	strb	r4, [r0, #1]
	header->packetFlags = packetFlags;
    48ca:	7082      	strb	r2, [r0, #2]
	header->packetLength = payloadSize + GNCLINK_PACKET_HEADER_LENGTH + GNCLINK_PACKET_FOOTER_LENGTH;
    48cc:	3305      	adds	r3, #5
    48ce:	70c3      	strb	r3, [r0, #3]

	// populate footer
	footer->crc = CRC8(packetPointer, GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    48d0:	4b03      	ldr	r3, [pc, #12]	; (48e0 <GNClink_Construct_Packet+0x28>)
    48d2:	4798      	blx	r3
    48d4:	7028      	strb	r0, [r5, #0]

	return true;
    48d6:	2001      	movs	r0, #1
}
    48d8:	bd70      	pop	{r4, r5, r6, pc}
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    48da:	2000      	movs	r0, #0
    48dc:	e7fc      	b.n	48d8 <GNClink_Construct_Packet+0x20>
    48de:	46c0      	nop			; (mov r8, r8)
    48e0:	00004889 	.word	0x00004889

000048e4 <GNClink_Check_Packet>:

bool GNClink_Check_Packet(uint8_t* packetPointer) {
    48e4:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	// check magic
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    48e6:	7803      	ldrb	r3, [r0, #0]
    48e8:	2bac      	cmp	r3, #172	; 0xac
    48ea:	d10a      	bne.n	4902 <GNClink_Check_Packet+0x1e>

	// check packet length
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    48ec:	78c1      	ldrb	r1, [r0, #3]
    48ee:	1f4b      	subs	r3, r1, #5
    48f0:	b2db      	uxtb	r3, r3
    48f2:	2b3b      	cmp	r3, #59	; 0x3b
    48f4:	d807      	bhi.n	4906 <GNClink_Check_Packet+0x22>

	// check CRC
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    48f6:	4b06      	ldr	r3, [pc, #24]	; (4910 <GNClink_Check_Packet+0x2c>)
    48f8:	4798      	blx	r3
    48fa:	2800      	cmp	r0, #0
    48fc:	d105      	bne.n	490a <GNClink_Check_Packet+0x26>

	// all checks passed, return true
	return true;
    48fe:	3001      	adds	r0, #1
    4900:	e000      	b.n	4904 <GNClink_Check_Packet+0x20>
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    4902:	2000      	movs	r0, #0
}
    4904:	bd10      	pop	{r4, pc}
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4906:	2000      	movs	r0, #0
    4908:	e7fc      	b.n	4904 <GNClink_Check_Packet+0x20>
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    490a:	2000      	movs	r0, #0
    490c:	e7fa      	b.n	4904 <GNClink_Check_Packet+0x20>
    490e:	46c0      	nop			; (mov r8, r8)
    4910:	00004889 	.word	0x00004889

00004914 <GNClink_Get_Packet_Type>:

GNClink_PacketType GNClink_Get_Packet_Type(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetType;
    4914:	7840      	ldrb	r0, [r0, #1]
}
    4916:	4770      	bx	lr

00004918 <GNClink_Get_Packet_Flags>:

GNClink_PacketFlags GNClink_Get_Packet_Flags(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetFlags;
    4918:	7880      	ldrb	r0, [r0, #2]
}
    491a:	4770      	bx	lr

0000491c <GNClink_Get_Frame_Payload_Pointer>:


uint8_t* GNClink_Get_Frame_Payload_Pointer(uint8_t* framePointer) {
	return framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    491c:	3003      	adds	r0, #3
}
    491e:	4770      	bx	lr

00004920 <GNClink_Get_Frame>:

bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    4920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4922:	000e      	movs	r6, r1
	// get pointer to packet header
	GNClink_PacketHeader* packetHeader = (GNClink_PacketHeader*)packetPointer;

	// check packet length
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4924:	78c1      	ldrb	r1, [r0, #3]
    4926:	1f4c      	subs	r4, r1, #5
    4928:	b2e4      	uxtb	r4, r4
    492a:	2c3b      	cmp	r4, #59	; 0x3b
    492c:	d834      	bhi.n	4998 <GNClink_Get_Frame+0x78>

	// calculate number of frames for packet
	int frameCount = (packetHeader->packetLength + GNCLINK_FRAME_PAYLOAD_LENGTH - 1) / GNCLINK_FRAME_PAYLOAD_LENGTH;
    492e:	310f      	adds	r1, #15
    4930:	1109      	asrs	r1, r1, #4
	*moreFrames = frameIndex < frameCount - 1;
    4932:	1e4d      	subs	r5, r1, #1
    4934:	2401      	movs	r4, #1
    4936:	429d      	cmp	r5, r3
    4938:	dc00      	bgt.n	493c <GNClink_Get_Frame+0x1c>
    493a:	2400      	movs	r4, #0
    493c:	9d06      	ldr	r5, [sp, #24]
    493e:	702c      	strb	r4, [r5, #0]

	// check index is valid
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    4940:	2b00      	cmp	r3, #0
    4942:	db2b      	blt.n	499c <GNClink_Get_Frame+0x7c>
    4944:	4299      	cmp	r1, r3
    4946:	dd2b      	ble.n	49a0 <GNClink_Get_Frame+0x80>
	// get pointer to frame header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    4948:	1cf7      	adds	r7, r6, #3

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    494a:	24ae      	movs	r4, #174	; 0xae
    494c:	7034      	strb	r4, [r6, #0]
	header->index = frameIndex;
    494e:	7073      	strb	r3, [r6, #1]
	header->flags = flags;
    4950:	70b2      	strb	r2, [r6, #2]
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    4952:	1c5c      	adds	r4, r3, #1
    4954:	428c      	cmp	r4, r1
    4956:	d00c      	beq.n	4972 <GNClink_Get_Frame+0x52>
bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    4958:	2200      	movs	r2, #0

	// populate payload
	int i = 0;
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    495a:	2a0f      	cmp	r2, #15
    495c:	dc11      	bgt.n	4982 <GNClink_Get_Frame+0x62>
    495e:	78c5      	ldrb	r5, [r0, #3]
    4960:	011c      	lsls	r4, r3, #4
    4962:	1b2d      	subs	r5, r5, r4
    4964:	4295      	cmp	r5, r2
    4966:	dd0c      	ble.n	4982 <GNClink_Get_Frame+0x62>
		payload[i] = packetPointer[i + GNCLINK_FRAME_PAYLOAD_LENGTH * frameIndex];
    4968:	18a4      	adds	r4, r4, r2
    496a:	5d01      	ldrb	r1, [r0, r4]
    496c:	54b9      	strb	r1, [r7, r2]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    496e:	3201      	adds	r2, #1
    4970:	e7f3      	b.n	495a <GNClink_Get_Frame+0x3a>
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    4972:	2102      	movs	r1, #2
    4974:	430a      	orrs	r2, r1
    4976:	70b2      	strb	r2, [r6, #2]
    4978:	e7ee      	b.n	4958 <GNClink_Get_Frame+0x38>
	}
	// populate the rest with zeros
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
		payload[i] = 0;
    497a:	18bb      	adds	r3, r7, r2
    497c:	2100      	movs	r1, #0
    497e:	7019      	strb	r1, [r3, #0]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4980:	3201      	adds	r2, #1
    4982:	2a0f      	cmp	r2, #15
    4984:	ddf9      	ble.n	497a <GNClink_Get_Frame+0x5a>
	}

	// populate footer
	footer->footerMagic = GNCLINK_FRAME_FOOTERMAGIC;
    4986:	23af      	movs	r3, #175	; 0xaf
    4988:	74f3      	strb	r3, [r6, #19]
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH - 1);
    498a:	2114      	movs	r1, #20
    498c:	0030      	movs	r0, r6
    498e:	4b05      	ldr	r3, [pc, #20]	; (49a4 <GNClink_Get_Frame+0x84>)
    4990:	4798      	blx	r3
    4992:	7530      	strb	r0, [r6, #20]

	return true;
    4994:	2001      	movs	r0, #1
    4996:	e000      	b.n	499a <GNClink_Get_Frame+0x7a>
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4998:	2000      	movs	r0, #0
}
    499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    499c:	2000      	movs	r0, #0
    499e:	e7fc      	b.n	499a <GNClink_Get_Frame+0x7a>
    49a0:	2000      	movs	r0, #0
    49a2:	e7fa      	b.n	499a <GNClink_Get_Frame+0x7a>
    49a4:	00004889 	.word	0x00004889

000049a8 <GNClink_Check_Frame>:

bool GNClink_Check_Frame(uint8_t* framePointer) {
    49a8:	b510      	push	{r4, lr}
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);

	// check magic
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    49aa:	7803      	ldrb	r3, [r0, #0]
    49ac:	2bae      	cmp	r3, #174	; 0xae
    49ae:	d10c      	bne.n	49ca <GNClink_Check_Frame+0x22>
	if (footer->footerMagic != GNCLINK_FRAME_FOOTERMAGIC) return false;
    49b0:	7cc3      	ldrb	r3, [r0, #19]
    49b2:	2baf      	cmp	r3, #175	; 0xaf
    49b4:	d10b      	bne.n	49ce <GNClink_Check_Frame+0x26>

	// check index
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    49b6:	7843      	ldrb	r3, [r0, #1]
    49b8:	2b03      	cmp	r3, #3
    49ba:	d80a      	bhi.n	49d2 <GNClink_Check_Frame+0x2a>

	// check CRC
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    49bc:	2115      	movs	r1, #21
    49be:	4b07      	ldr	r3, [pc, #28]	; (49dc <GNClink_Check_Frame+0x34>)
    49c0:	4798      	blx	r3
    49c2:	2800      	cmp	r0, #0
    49c4:	d107      	bne.n	49d6 <GNClink_Check_Frame+0x2e>

	// all checks passed, return true
	return true;
    49c6:	3001      	adds	r0, #1
    49c8:	e000      	b.n	49cc <GNClink_Check_Frame+0x24>
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    49ca:	2000      	movs	r0, #0
}
    49cc:	bd10      	pop	{r4, pc}
	if (footer->footerMagic != GNCLINK_FRAME_FOOTERMAGIC) return false;
    49ce:	2000      	movs	r0, #0
    49d0:	e7fc      	b.n	49cc <GNClink_Check_Frame+0x24>
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    49d2:	2000      	movs	r0, #0
    49d4:	e7fa      	b.n	49cc <GNClink_Check_Frame+0x24>
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    49d6:	2000      	movs	r0, #0
    49d8:	e7f8      	b.n	49cc <GNClink_Check_Frame+0x24>
    49da:	46c0      	nop			; (mov r8, r8)
    49dc:	00004889 	.word	0x00004889

000049e0 <GNClink_Frame_RequestResend>:

bool GNClink_Frame_RequestResend(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (header->flags & GNClink_FrameFlags_RequestResend) != 0;
    49e0:	7883      	ldrb	r3, [r0, #2]
    49e2:	089b      	lsrs	r3, r3, #2
    49e4:	2001      	movs	r0, #1
    49e6:	4018      	ands	r0, r3
}
    49e8:	4770      	bx	lr

000049ea <GNClink_Get_Frame_Index>:

int GNClink_Get_Frame_Index(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (int)header->index;
    49ea:	7840      	ldrb	r0, [r0, #1]
}
    49ec:	4770      	bx	lr
	...

000049f0 <GNClink_Construct_RequestResendFrame>:

void GNClink_Construct_RequestResendFrame(uint8_t* framePointer) {
    49f0:	b510      	push	{r4, lr}
    49f2:	0004      	movs	r4, r0
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    49f4:	23ae      	movs	r3, #174	; 0xae
    49f6:	7003      	strb	r3, [r0, #0]
	header->index = 0;
    49f8:	2300      	movs	r3, #0
    49fa:	7043      	strb	r3, [r0, #1]
	header->flags = GNClink_FrameFlags_RequestResend;
    49fc:	3304      	adds	r3, #4
    49fe:	7083      	strb	r3, [r0, #2]

	// populate footer
	footer->footerMagic = GNCLINK_FRAME_FOOTERMAGIC;
    4a00:	33ab      	adds	r3, #171	; 0xab
    4a02:	74c3      	strb	r3, [r0, #19]
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH - 1);
    4a04:	2114      	movs	r1, #20
    4a06:	4b02      	ldr	r3, [pc, #8]	; (4a10 <GNClink_Construct_RequestResendFrame+0x20>)
    4a08:	4798      	blx	r3
    4a0a:	7520      	strb	r0, [r4, #20]
}
    4a0c:	bd10      	pop	{r4, pc}
    4a0e:	46c0      	nop			; (mov r8, r8)
    4a10:	00004889 	.word	0x00004889

00004a14 <GNClink_Reconstruct_Packet_From_Frames>:


bool GNClink_Reconstruct_Packet_From_Frames(uint8_t* framePointer, uint8_t* packetPointer, bool* moreFrames) {
    4a14:	b530      	push	{r4, r5, lr}
	// get pointer to frame footer
	//GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    4a16:	2400      	movs	r4, #0
    4a18:	2c0f      	cmp	r4, #15
    4a1a:	dc09      	bgt.n	4a30 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
    4a1c:	7843      	ldrb	r3, [r0, #1]
    4a1e:	011b      	lsls	r3, r3, #4
    4a20:	191b      	adds	r3, r3, r4
    4a22:	2b3f      	cmp	r3, #63	; 0x3f
    4a24:	dc04      	bgt.n	4a30 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
		packetPointer[i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH] = payload[i];
    4a26:	1905      	adds	r5, r0, r4
    4a28:	78ed      	ldrb	r5, [r5, #3]
    4a2a:	54cd      	strb	r5, [r1, r3]
	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    4a2c:	3401      	adds	r4, #1
    4a2e:	e7f3      	b.n	4a18 <GNClink_Reconstruct_Packet_From_Frames+0x4>
	}

	*moreFrames = (header->flags & GNClink_FrameFlags_TransactionEnd) == 0;
    4a30:	7883      	ldrb	r3, [r0, #2]
    4a32:	085b      	lsrs	r3, r3, #1
    4a34:	2101      	movs	r1, #1
    4a36:	404b      	eors	r3, r1
    4a38:	2101      	movs	r1, #1
    4a3a:	400b      	ands	r3, r1
    4a3c:	7013      	strb	r3, [r2, #0]

	return true;
    4a3e:	2001      	movs	r0, #1
    4a40:	bd30      	pop	{r4, r5, pc}
	...

00004a44 <fp_multiply>:
#include <fixedpoint_defs.h>

fp32_t fp_multiply(fp32_t a, fp32_t b) {
    4a44:	b510      	push	{r4, lr}
    4a46:	000a      	movs	r2, r1
    fp_long c = (fp_long)a * b;
    4a48:	17c1      	asrs	r1, r0, #31
    4a4a:	17d3      	asrs	r3, r2, #31
    4a4c:	4c02      	ldr	r4, [pc, #8]	; (4a58 <fp_multiply+0x14>)
    4a4e:	47a0      	blx	r4
    return c >> 16;
    4a50:	0409      	lsls	r1, r1, #16
    4a52:	0c00      	lsrs	r0, r0, #16
    4a54:	4308      	orrs	r0, r1
    4a56:	bd10      	pop	{r4, pc}
    4a58:	00004be9 	.word	0x00004be9

00004a5c <__udivsi3>:
    4a5c:	2200      	movs	r2, #0
    4a5e:	0843      	lsrs	r3, r0, #1
    4a60:	428b      	cmp	r3, r1
    4a62:	d374      	bcc.n	4b4e <__udivsi3+0xf2>
    4a64:	0903      	lsrs	r3, r0, #4
    4a66:	428b      	cmp	r3, r1
    4a68:	d35f      	bcc.n	4b2a <__udivsi3+0xce>
    4a6a:	0a03      	lsrs	r3, r0, #8
    4a6c:	428b      	cmp	r3, r1
    4a6e:	d344      	bcc.n	4afa <__udivsi3+0x9e>
    4a70:	0b03      	lsrs	r3, r0, #12
    4a72:	428b      	cmp	r3, r1
    4a74:	d328      	bcc.n	4ac8 <__udivsi3+0x6c>
    4a76:	0c03      	lsrs	r3, r0, #16
    4a78:	428b      	cmp	r3, r1
    4a7a:	d30d      	bcc.n	4a98 <__udivsi3+0x3c>
    4a7c:	22ff      	movs	r2, #255	; 0xff
    4a7e:	0209      	lsls	r1, r1, #8
    4a80:	ba12      	rev	r2, r2
    4a82:	0c03      	lsrs	r3, r0, #16
    4a84:	428b      	cmp	r3, r1
    4a86:	d302      	bcc.n	4a8e <__udivsi3+0x32>
    4a88:	1212      	asrs	r2, r2, #8
    4a8a:	0209      	lsls	r1, r1, #8
    4a8c:	d065      	beq.n	4b5a <__udivsi3+0xfe>
    4a8e:	0b03      	lsrs	r3, r0, #12
    4a90:	428b      	cmp	r3, r1
    4a92:	d319      	bcc.n	4ac8 <__udivsi3+0x6c>
    4a94:	e000      	b.n	4a98 <__udivsi3+0x3c>
    4a96:	0a09      	lsrs	r1, r1, #8
    4a98:	0bc3      	lsrs	r3, r0, #15
    4a9a:	428b      	cmp	r3, r1
    4a9c:	d301      	bcc.n	4aa2 <__udivsi3+0x46>
    4a9e:	03cb      	lsls	r3, r1, #15
    4aa0:	1ac0      	subs	r0, r0, r3
    4aa2:	4152      	adcs	r2, r2
    4aa4:	0b83      	lsrs	r3, r0, #14
    4aa6:	428b      	cmp	r3, r1
    4aa8:	d301      	bcc.n	4aae <__udivsi3+0x52>
    4aaa:	038b      	lsls	r3, r1, #14
    4aac:	1ac0      	subs	r0, r0, r3
    4aae:	4152      	adcs	r2, r2
    4ab0:	0b43      	lsrs	r3, r0, #13
    4ab2:	428b      	cmp	r3, r1
    4ab4:	d301      	bcc.n	4aba <__udivsi3+0x5e>
    4ab6:	034b      	lsls	r3, r1, #13
    4ab8:	1ac0      	subs	r0, r0, r3
    4aba:	4152      	adcs	r2, r2
    4abc:	0b03      	lsrs	r3, r0, #12
    4abe:	428b      	cmp	r3, r1
    4ac0:	d301      	bcc.n	4ac6 <__udivsi3+0x6a>
    4ac2:	030b      	lsls	r3, r1, #12
    4ac4:	1ac0      	subs	r0, r0, r3
    4ac6:	4152      	adcs	r2, r2
    4ac8:	0ac3      	lsrs	r3, r0, #11
    4aca:	428b      	cmp	r3, r1
    4acc:	d301      	bcc.n	4ad2 <__udivsi3+0x76>
    4ace:	02cb      	lsls	r3, r1, #11
    4ad0:	1ac0      	subs	r0, r0, r3
    4ad2:	4152      	adcs	r2, r2
    4ad4:	0a83      	lsrs	r3, r0, #10
    4ad6:	428b      	cmp	r3, r1
    4ad8:	d301      	bcc.n	4ade <__udivsi3+0x82>
    4ada:	028b      	lsls	r3, r1, #10
    4adc:	1ac0      	subs	r0, r0, r3
    4ade:	4152      	adcs	r2, r2
    4ae0:	0a43      	lsrs	r3, r0, #9
    4ae2:	428b      	cmp	r3, r1
    4ae4:	d301      	bcc.n	4aea <__udivsi3+0x8e>
    4ae6:	024b      	lsls	r3, r1, #9
    4ae8:	1ac0      	subs	r0, r0, r3
    4aea:	4152      	adcs	r2, r2
    4aec:	0a03      	lsrs	r3, r0, #8
    4aee:	428b      	cmp	r3, r1
    4af0:	d301      	bcc.n	4af6 <__udivsi3+0x9a>
    4af2:	020b      	lsls	r3, r1, #8
    4af4:	1ac0      	subs	r0, r0, r3
    4af6:	4152      	adcs	r2, r2
    4af8:	d2cd      	bcs.n	4a96 <__udivsi3+0x3a>
    4afa:	09c3      	lsrs	r3, r0, #7
    4afc:	428b      	cmp	r3, r1
    4afe:	d301      	bcc.n	4b04 <__udivsi3+0xa8>
    4b00:	01cb      	lsls	r3, r1, #7
    4b02:	1ac0      	subs	r0, r0, r3
    4b04:	4152      	adcs	r2, r2
    4b06:	0983      	lsrs	r3, r0, #6
    4b08:	428b      	cmp	r3, r1
    4b0a:	d301      	bcc.n	4b10 <__udivsi3+0xb4>
    4b0c:	018b      	lsls	r3, r1, #6
    4b0e:	1ac0      	subs	r0, r0, r3
    4b10:	4152      	adcs	r2, r2
    4b12:	0943      	lsrs	r3, r0, #5
    4b14:	428b      	cmp	r3, r1
    4b16:	d301      	bcc.n	4b1c <__udivsi3+0xc0>
    4b18:	014b      	lsls	r3, r1, #5
    4b1a:	1ac0      	subs	r0, r0, r3
    4b1c:	4152      	adcs	r2, r2
    4b1e:	0903      	lsrs	r3, r0, #4
    4b20:	428b      	cmp	r3, r1
    4b22:	d301      	bcc.n	4b28 <__udivsi3+0xcc>
    4b24:	010b      	lsls	r3, r1, #4
    4b26:	1ac0      	subs	r0, r0, r3
    4b28:	4152      	adcs	r2, r2
    4b2a:	08c3      	lsrs	r3, r0, #3
    4b2c:	428b      	cmp	r3, r1
    4b2e:	d301      	bcc.n	4b34 <__udivsi3+0xd8>
    4b30:	00cb      	lsls	r3, r1, #3
    4b32:	1ac0      	subs	r0, r0, r3
    4b34:	4152      	adcs	r2, r2
    4b36:	0883      	lsrs	r3, r0, #2
    4b38:	428b      	cmp	r3, r1
    4b3a:	d301      	bcc.n	4b40 <__udivsi3+0xe4>
    4b3c:	008b      	lsls	r3, r1, #2
    4b3e:	1ac0      	subs	r0, r0, r3
    4b40:	4152      	adcs	r2, r2
    4b42:	0843      	lsrs	r3, r0, #1
    4b44:	428b      	cmp	r3, r1
    4b46:	d301      	bcc.n	4b4c <__udivsi3+0xf0>
    4b48:	004b      	lsls	r3, r1, #1
    4b4a:	1ac0      	subs	r0, r0, r3
    4b4c:	4152      	adcs	r2, r2
    4b4e:	1a41      	subs	r1, r0, r1
    4b50:	d200      	bcs.n	4b54 <__udivsi3+0xf8>
    4b52:	4601      	mov	r1, r0
    4b54:	4152      	adcs	r2, r2
    4b56:	4610      	mov	r0, r2
    4b58:	4770      	bx	lr
    4b5a:	e7ff      	b.n	4b5c <__udivsi3+0x100>
    4b5c:	b501      	push	{r0, lr}
    4b5e:	2000      	movs	r0, #0
    4b60:	f000 f806 	bl	4b70 <__aeabi_idiv0>
    4b64:	bd02      	pop	{r1, pc}
    4b66:	46c0      	nop			; (mov r8, r8)

00004b68 <__aeabi_uidivmod>:
    4b68:	2900      	cmp	r1, #0
    4b6a:	d0f7      	beq.n	4b5c <__udivsi3+0x100>
    4b6c:	e776      	b.n	4a5c <__udivsi3>
    4b6e:	4770      	bx	lr

00004b70 <__aeabi_idiv0>:
    4b70:	4770      	bx	lr
    4b72:	46c0      	nop			; (mov r8, r8)

00004b74 <__aeabi_cfrcmple>:
    4b74:	4684      	mov	ip, r0
    4b76:	0008      	movs	r0, r1
    4b78:	4661      	mov	r1, ip
    4b7a:	e7ff      	b.n	4b7c <__aeabi_cfcmpeq>

00004b7c <__aeabi_cfcmpeq>:
    4b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4b7e:	f000 fb93 	bl	52a8 <__lesf2>
    4b82:	2800      	cmp	r0, #0
    4b84:	d401      	bmi.n	4b8a <__aeabi_cfcmpeq+0xe>
    4b86:	2100      	movs	r1, #0
    4b88:	42c8      	cmn	r0, r1
    4b8a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004b8c <__aeabi_fcmpeq>:
    4b8c:	b510      	push	{r4, lr}
    4b8e:	f000 fb13 	bl	51b8 <__eqsf2>
    4b92:	4240      	negs	r0, r0
    4b94:	3001      	adds	r0, #1
    4b96:	bd10      	pop	{r4, pc}

00004b98 <__aeabi_fcmplt>:
    4b98:	b510      	push	{r4, lr}
    4b9a:	f000 fb85 	bl	52a8 <__lesf2>
    4b9e:	2800      	cmp	r0, #0
    4ba0:	db01      	blt.n	4ba6 <__aeabi_fcmplt+0xe>
    4ba2:	2000      	movs	r0, #0
    4ba4:	bd10      	pop	{r4, pc}
    4ba6:	2001      	movs	r0, #1
    4ba8:	bd10      	pop	{r4, pc}
    4baa:	46c0      	nop			; (mov r8, r8)

00004bac <__aeabi_fcmple>:
    4bac:	b510      	push	{r4, lr}
    4bae:	f000 fb7b 	bl	52a8 <__lesf2>
    4bb2:	2800      	cmp	r0, #0
    4bb4:	dd01      	ble.n	4bba <__aeabi_fcmple+0xe>
    4bb6:	2000      	movs	r0, #0
    4bb8:	bd10      	pop	{r4, pc}
    4bba:	2001      	movs	r0, #1
    4bbc:	bd10      	pop	{r4, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)

00004bc0 <__aeabi_fcmpgt>:
    4bc0:	b510      	push	{r4, lr}
    4bc2:	f000 fb21 	bl	5208 <__gesf2>
    4bc6:	2800      	cmp	r0, #0
    4bc8:	dc01      	bgt.n	4bce <__aeabi_fcmpgt+0xe>
    4bca:	2000      	movs	r0, #0
    4bcc:	bd10      	pop	{r4, pc}
    4bce:	2001      	movs	r0, #1
    4bd0:	bd10      	pop	{r4, pc}
    4bd2:	46c0      	nop			; (mov r8, r8)

00004bd4 <__aeabi_fcmpge>:
    4bd4:	b510      	push	{r4, lr}
    4bd6:	f000 fb17 	bl	5208 <__gesf2>
    4bda:	2800      	cmp	r0, #0
    4bdc:	da01      	bge.n	4be2 <__aeabi_fcmpge+0xe>
    4bde:	2000      	movs	r0, #0
    4be0:	bd10      	pop	{r4, pc}
    4be2:	2001      	movs	r0, #1
    4be4:	bd10      	pop	{r4, pc}
    4be6:	46c0      	nop			; (mov r8, r8)

00004be8 <__aeabi_lmul>:
    4be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bea:	46ce      	mov	lr, r9
    4bec:	4699      	mov	r9, r3
    4bee:	0c03      	lsrs	r3, r0, #16
    4bf0:	469c      	mov	ip, r3
    4bf2:	0413      	lsls	r3, r2, #16
    4bf4:	4647      	mov	r7, r8
    4bf6:	0c1b      	lsrs	r3, r3, #16
    4bf8:	001d      	movs	r5, r3
    4bfa:	000e      	movs	r6, r1
    4bfc:	4661      	mov	r1, ip
    4bfe:	0404      	lsls	r4, r0, #16
    4c00:	0c24      	lsrs	r4, r4, #16
    4c02:	b580      	push	{r7, lr}
    4c04:	0007      	movs	r7, r0
    4c06:	0c10      	lsrs	r0, r2, #16
    4c08:	434b      	muls	r3, r1
    4c0a:	4365      	muls	r5, r4
    4c0c:	4341      	muls	r1, r0
    4c0e:	4360      	muls	r0, r4
    4c10:	0c2c      	lsrs	r4, r5, #16
    4c12:	18c0      	adds	r0, r0, r3
    4c14:	1824      	adds	r4, r4, r0
    4c16:	468c      	mov	ip, r1
    4c18:	42a3      	cmp	r3, r4
    4c1a:	d903      	bls.n	4c24 <__aeabi_lmul+0x3c>
    4c1c:	2380      	movs	r3, #128	; 0x80
    4c1e:	025b      	lsls	r3, r3, #9
    4c20:	4698      	mov	r8, r3
    4c22:	44c4      	add	ip, r8
    4c24:	4649      	mov	r1, r9
    4c26:	4379      	muls	r1, r7
    4c28:	4356      	muls	r6, r2
    4c2a:	0c23      	lsrs	r3, r4, #16
    4c2c:	042d      	lsls	r5, r5, #16
    4c2e:	0c2d      	lsrs	r5, r5, #16
    4c30:	1989      	adds	r1, r1, r6
    4c32:	4463      	add	r3, ip
    4c34:	0424      	lsls	r4, r4, #16
    4c36:	1960      	adds	r0, r4, r5
    4c38:	18c9      	adds	r1, r1, r3
    4c3a:	bcc0      	pop	{r6, r7}
    4c3c:	46b9      	mov	r9, r7
    4c3e:	46b0      	mov	r8, r6
    4c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c42:	46c0      	nop			; (mov r8, r8)

00004c44 <__aeabi_f2uiz>:
    4c44:	219e      	movs	r1, #158	; 0x9e
    4c46:	b510      	push	{r4, lr}
    4c48:	05c9      	lsls	r1, r1, #23
    4c4a:	1c04      	adds	r4, r0, #0
    4c4c:	f7ff ffc2 	bl	4bd4 <__aeabi_fcmpge>
    4c50:	2800      	cmp	r0, #0
    4c52:	d103      	bne.n	4c5c <__aeabi_f2uiz+0x18>
    4c54:	1c20      	adds	r0, r4, #0
    4c56:	f000 fe45 	bl	58e4 <__aeabi_f2iz>
    4c5a:	bd10      	pop	{r4, pc}
    4c5c:	219e      	movs	r1, #158	; 0x9e
    4c5e:	1c20      	adds	r0, r4, #0
    4c60:	05c9      	lsls	r1, r1, #23
    4c62:	f000 fcad 	bl	55c0 <__aeabi_fsub>
    4c66:	f000 fe3d 	bl	58e4 <__aeabi_f2iz>
    4c6a:	2380      	movs	r3, #128	; 0x80
    4c6c:	061b      	lsls	r3, r3, #24
    4c6e:	469c      	mov	ip, r3
    4c70:	4460      	add	r0, ip
    4c72:	e7f2      	b.n	4c5a <__aeabi_f2uiz+0x16>

00004c74 <__aeabi_fadd>:
    4c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c76:	0243      	lsls	r3, r0, #9
    4c78:	0045      	lsls	r5, r0, #1
    4c7a:	0fc4      	lsrs	r4, r0, #31
    4c7c:	0248      	lsls	r0, r1, #9
    4c7e:	0a42      	lsrs	r2, r0, #9
    4c80:	4694      	mov	ip, r2
    4c82:	004a      	lsls	r2, r1, #1
    4c84:	0a5f      	lsrs	r7, r3, #9
    4c86:	0e2d      	lsrs	r5, r5, #24
    4c88:	099b      	lsrs	r3, r3, #6
    4c8a:	0e12      	lsrs	r2, r2, #24
    4c8c:	0fc9      	lsrs	r1, r1, #31
    4c8e:	0980      	lsrs	r0, r0, #6
    4c90:	428c      	cmp	r4, r1
    4c92:	d022      	beq.n	4cda <__aeabi_fadd+0x66>
    4c94:	1aae      	subs	r6, r5, r2
    4c96:	2e00      	cmp	r6, #0
    4c98:	dd0d      	ble.n	4cb6 <__aeabi_fadd+0x42>
    4c9a:	2a00      	cmp	r2, #0
    4c9c:	d12d      	bne.n	4cfa <__aeabi_fadd+0x86>
    4c9e:	2800      	cmp	r0, #0
    4ca0:	d100      	bne.n	4ca4 <__aeabi_fadd+0x30>
    4ca2:	e083      	b.n	4dac <__aeabi_fadd+0x138>
    4ca4:	1e72      	subs	r2, r6, #1
    4ca6:	2e01      	cmp	r6, #1
    4ca8:	d100      	bne.n	4cac <__aeabi_fadd+0x38>
    4caa:	e11b      	b.n	4ee4 <__aeabi_fadd+0x270>
    4cac:	2eff      	cmp	r6, #255	; 0xff
    4cae:	d100      	bne.n	4cb2 <__aeabi_fadd+0x3e>
    4cb0:	e0a2      	b.n	4df8 <__aeabi_fadd+0x184>
    4cb2:	0016      	movs	r6, r2
    4cb4:	e027      	b.n	4d06 <__aeabi_fadd+0x92>
    4cb6:	2e00      	cmp	r6, #0
    4cb8:	d048      	beq.n	4d4c <__aeabi_fadd+0xd8>
    4cba:	1b56      	subs	r6, r2, r5
    4cbc:	2d00      	cmp	r5, #0
    4cbe:	d000      	beq.n	4cc2 <__aeabi_fadd+0x4e>
    4cc0:	e0c1      	b.n	4e46 <__aeabi_fadd+0x1d2>
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d100      	bne.n	4cc8 <__aeabi_fadd+0x54>
    4cc6:	e0f7      	b.n	4eb8 <__aeabi_fadd+0x244>
    4cc8:	1e74      	subs	r4, r6, #1
    4cca:	2e01      	cmp	r6, #1
    4ccc:	d100      	bne.n	4cd0 <__aeabi_fadd+0x5c>
    4cce:	e12d      	b.n	4f2c <__aeabi_fadd+0x2b8>
    4cd0:	2eff      	cmp	r6, #255	; 0xff
    4cd2:	d100      	bne.n	4cd6 <__aeabi_fadd+0x62>
    4cd4:	e08e      	b.n	4df4 <__aeabi_fadd+0x180>
    4cd6:	0026      	movs	r6, r4
    4cd8:	e0ba      	b.n	4e50 <__aeabi_fadd+0x1dc>
    4cda:	1aa9      	subs	r1, r5, r2
    4cdc:	2900      	cmp	r1, #0
    4cde:	dc00      	bgt.n	4ce2 <__aeabi_fadd+0x6e>
    4ce0:	e08c      	b.n	4dfc <__aeabi_fadd+0x188>
    4ce2:	2a00      	cmp	r2, #0
    4ce4:	d046      	beq.n	4d74 <__aeabi_fadd+0x100>
    4ce6:	2dff      	cmp	r5, #255	; 0xff
    4ce8:	d100      	bne.n	4cec <__aeabi_fadd+0x78>
    4cea:	e085      	b.n	4df8 <__aeabi_fadd+0x184>
    4cec:	2280      	movs	r2, #128	; 0x80
    4cee:	04d2      	lsls	r2, r2, #19
    4cf0:	4310      	orrs	r0, r2
    4cf2:	291b      	cmp	r1, #27
    4cf4:	dd49      	ble.n	4d8a <__aeabi_fadd+0x116>
    4cf6:	3301      	adds	r3, #1
    4cf8:	e016      	b.n	4d28 <__aeabi_fadd+0xb4>
    4cfa:	2dff      	cmp	r5, #255	; 0xff
    4cfc:	d100      	bne.n	4d00 <__aeabi_fadd+0x8c>
    4cfe:	e07b      	b.n	4df8 <__aeabi_fadd+0x184>
    4d00:	2280      	movs	r2, #128	; 0x80
    4d02:	04d2      	lsls	r2, r2, #19
    4d04:	4310      	orrs	r0, r2
    4d06:	2201      	movs	r2, #1
    4d08:	2e1b      	cmp	r6, #27
    4d0a:	dc07      	bgt.n	4d1c <__aeabi_fadd+0xa8>
    4d0c:	2120      	movs	r1, #32
    4d0e:	1b89      	subs	r1, r1, r6
    4d10:	0002      	movs	r2, r0
    4d12:	4088      	lsls	r0, r1
    4d14:	40f2      	lsrs	r2, r6
    4d16:	1e41      	subs	r1, r0, #1
    4d18:	4188      	sbcs	r0, r1
    4d1a:	4302      	orrs	r2, r0
    4d1c:	1a9b      	subs	r3, r3, r2
    4d1e:	015a      	lsls	r2, r3, #5
    4d20:	d451      	bmi.n	4dc6 <__aeabi_fadd+0x152>
    4d22:	2207      	movs	r2, #7
    4d24:	401a      	ands	r2, r3
    4d26:	d042      	beq.n	4dae <__aeabi_fadd+0x13a>
    4d28:	220f      	movs	r2, #15
    4d2a:	401a      	ands	r2, r3
    4d2c:	2a04      	cmp	r2, #4
    4d2e:	d000      	beq.n	4d32 <__aeabi_fadd+0xbe>
    4d30:	3304      	adds	r3, #4
    4d32:	015a      	lsls	r2, r3, #5
    4d34:	d53b      	bpl.n	4dae <__aeabi_fadd+0x13a>
    4d36:	1c68      	adds	r0, r5, #1
    4d38:	2dfe      	cmp	r5, #254	; 0xfe
    4d3a:	d034      	beq.n	4da6 <__aeabi_fadd+0x132>
    4d3c:	019b      	lsls	r3, r3, #6
    4d3e:	0a5b      	lsrs	r3, r3, #9
    4d40:	b2c0      	uxtb	r0, r0
    4d42:	05c0      	lsls	r0, r0, #23
    4d44:	4318      	orrs	r0, r3
    4d46:	07e4      	lsls	r4, r4, #31
    4d48:	4320      	orrs	r0, r4
    4d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d4c:	26fe      	movs	r6, #254	; 0xfe
    4d4e:	1c6a      	adds	r2, r5, #1
    4d50:	4216      	tst	r6, r2
    4d52:	d000      	beq.n	4d56 <__aeabi_fadd+0xe2>
    4d54:	e08b      	b.n	4e6e <__aeabi_fadd+0x1fa>
    4d56:	2d00      	cmp	r5, #0
    4d58:	d000      	beq.n	4d5c <__aeabi_fadd+0xe8>
    4d5a:	e0b1      	b.n	4ec0 <__aeabi_fadd+0x24c>
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	d100      	bne.n	4d62 <__aeabi_fadd+0xee>
    4d60:	e0df      	b.n	4f22 <__aeabi_fadd+0x2ae>
    4d62:	2800      	cmp	r0, #0
    4d64:	d069      	beq.n	4e3a <__aeabi_fadd+0x1c6>
    4d66:	1a1a      	subs	r2, r3, r0
    4d68:	0156      	lsls	r6, r2, #5
    4d6a:	d400      	bmi.n	4d6e <__aeabi_fadd+0xfa>
    4d6c:	e0fb      	b.n	4f66 <__aeabi_fadd+0x2f2>
    4d6e:	000c      	movs	r4, r1
    4d70:	1ac3      	subs	r3, r0, r3
    4d72:	e03c      	b.n	4dee <__aeabi_fadd+0x17a>
    4d74:	2800      	cmp	r0, #0
    4d76:	d100      	bne.n	4d7a <__aeabi_fadd+0x106>
    4d78:	e0b7      	b.n	4eea <__aeabi_fadd+0x276>
    4d7a:	1e4a      	subs	r2, r1, #1
    4d7c:	2901      	cmp	r1, #1
    4d7e:	d100      	bne.n	4d82 <__aeabi_fadd+0x10e>
    4d80:	e0aa      	b.n	4ed8 <__aeabi_fadd+0x264>
    4d82:	29ff      	cmp	r1, #255	; 0xff
    4d84:	d038      	beq.n	4df8 <__aeabi_fadd+0x184>
    4d86:	0011      	movs	r1, r2
    4d88:	e7b3      	b.n	4cf2 <__aeabi_fadd+0x7e>
    4d8a:	0002      	movs	r2, r0
    4d8c:	2620      	movs	r6, #32
    4d8e:	40ca      	lsrs	r2, r1
    4d90:	1a71      	subs	r1, r6, r1
    4d92:	4088      	lsls	r0, r1
    4d94:	1e41      	subs	r1, r0, #1
    4d96:	4188      	sbcs	r0, r1
    4d98:	4310      	orrs	r0, r2
    4d9a:	181b      	adds	r3, r3, r0
    4d9c:	015a      	lsls	r2, r3, #5
    4d9e:	d5c0      	bpl.n	4d22 <__aeabi_fadd+0xae>
    4da0:	3501      	adds	r5, #1
    4da2:	2dff      	cmp	r5, #255	; 0xff
    4da4:	d16c      	bne.n	4e80 <__aeabi_fadd+0x20c>
    4da6:	20ff      	movs	r0, #255	; 0xff
    4da8:	2300      	movs	r3, #0
    4daa:	e7ca      	b.n	4d42 <__aeabi_fadd+0xce>
    4dac:	0035      	movs	r5, r6
    4dae:	08db      	lsrs	r3, r3, #3
    4db0:	2dff      	cmp	r5, #255	; 0xff
    4db2:	d144      	bne.n	4e3e <__aeabi_fadd+0x1ca>
    4db4:	2b00      	cmp	r3, #0
    4db6:	d0f6      	beq.n	4da6 <__aeabi_fadd+0x132>
    4db8:	2280      	movs	r2, #128	; 0x80
    4dba:	03d2      	lsls	r2, r2, #15
    4dbc:	4313      	orrs	r3, r2
    4dbe:	025b      	lsls	r3, r3, #9
    4dc0:	20ff      	movs	r0, #255	; 0xff
    4dc2:	0a5b      	lsrs	r3, r3, #9
    4dc4:	e7bd      	b.n	4d42 <__aeabi_fadd+0xce>
    4dc6:	019e      	lsls	r6, r3, #6
    4dc8:	09b6      	lsrs	r6, r6, #6
    4dca:	0030      	movs	r0, r6
    4dcc:	f000 fe38 	bl	5a40 <__clzsi2>
    4dd0:	3805      	subs	r0, #5
    4dd2:	4086      	lsls	r6, r0
    4dd4:	4285      	cmp	r5, r0
    4dd6:	dc20      	bgt.n	4e1a <__aeabi_fadd+0x1a6>
    4dd8:	2220      	movs	r2, #32
    4dda:	1b40      	subs	r0, r0, r5
    4ddc:	3001      	adds	r0, #1
    4dde:	1a12      	subs	r2, r2, r0
    4de0:	0033      	movs	r3, r6
    4de2:	4096      	lsls	r6, r2
    4de4:	40c3      	lsrs	r3, r0
    4de6:	1e72      	subs	r2, r6, #1
    4de8:	4196      	sbcs	r6, r2
    4dea:	2500      	movs	r5, #0
    4dec:	4333      	orrs	r3, r6
    4dee:	075a      	lsls	r2, r3, #29
    4df0:	d19a      	bne.n	4d28 <__aeabi_fadd+0xb4>
    4df2:	e79e      	b.n	4d32 <__aeabi_fadd+0xbe>
    4df4:	000c      	movs	r4, r1
    4df6:	0003      	movs	r3, r0
    4df8:	08db      	lsrs	r3, r3, #3
    4dfa:	e7db      	b.n	4db4 <__aeabi_fadd+0x140>
    4dfc:	2900      	cmp	r1, #0
    4dfe:	d010      	beq.n	4e22 <__aeabi_fadd+0x1ae>
    4e00:	1b51      	subs	r1, r2, r5
    4e02:	2d00      	cmp	r5, #0
    4e04:	d143      	bne.n	4e8e <__aeabi_fadd+0x21a>
    4e06:	2b00      	cmp	r3, #0
    4e08:	d100      	bne.n	4e0c <__aeabi_fadd+0x198>
    4e0a:	e093      	b.n	4f34 <__aeabi_fadd+0x2c0>
    4e0c:	1e4d      	subs	r5, r1, #1
    4e0e:	2901      	cmp	r1, #1
    4e10:	d062      	beq.n	4ed8 <__aeabi_fadd+0x264>
    4e12:	29ff      	cmp	r1, #255	; 0xff
    4e14:	d0ef      	beq.n	4df6 <__aeabi_fadd+0x182>
    4e16:	0029      	movs	r1, r5
    4e18:	e03e      	b.n	4e98 <__aeabi_fadd+0x224>
    4e1a:	4b55      	ldr	r3, [pc, #340]	; (4f70 <__aeabi_fadd+0x2fc>)
    4e1c:	1a2d      	subs	r5, r5, r0
    4e1e:	4033      	ands	r3, r6
    4e20:	e7e5      	b.n	4dee <__aeabi_fadd+0x17a>
    4e22:	21fe      	movs	r1, #254	; 0xfe
    4e24:	1c6a      	adds	r2, r5, #1
    4e26:	4211      	tst	r1, r2
    4e28:	d13b      	bne.n	4ea2 <__aeabi_fadd+0x22e>
    4e2a:	2d00      	cmp	r5, #0
    4e2c:	d16a      	bne.n	4f04 <__aeabi_fadd+0x290>
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d100      	bne.n	4e34 <__aeabi_fadd+0x1c0>
    4e32:	e08e      	b.n	4f52 <__aeabi_fadd+0x2de>
    4e34:	2800      	cmp	r0, #0
    4e36:	d000      	beq.n	4e3a <__aeabi_fadd+0x1c6>
    4e38:	e08d      	b.n	4f56 <__aeabi_fadd+0x2e2>
    4e3a:	2500      	movs	r5, #0
    4e3c:	08db      	lsrs	r3, r3, #3
    4e3e:	025b      	lsls	r3, r3, #9
    4e40:	0a5b      	lsrs	r3, r3, #9
    4e42:	b2e8      	uxtb	r0, r5
    4e44:	e77d      	b.n	4d42 <__aeabi_fadd+0xce>
    4e46:	2aff      	cmp	r2, #255	; 0xff
    4e48:	d0d4      	beq.n	4df4 <__aeabi_fadd+0x180>
    4e4a:	2480      	movs	r4, #128	; 0x80
    4e4c:	04e4      	lsls	r4, r4, #19
    4e4e:	4323      	orrs	r3, r4
    4e50:	2401      	movs	r4, #1
    4e52:	2e1b      	cmp	r6, #27
    4e54:	dc07      	bgt.n	4e66 <__aeabi_fadd+0x1f2>
    4e56:	2520      	movs	r5, #32
    4e58:	1bad      	subs	r5, r5, r6
    4e5a:	001c      	movs	r4, r3
    4e5c:	40ab      	lsls	r3, r5
    4e5e:	40f4      	lsrs	r4, r6
    4e60:	1e5d      	subs	r5, r3, #1
    4e62:	41ab      	sbcs	r3, r5
    4e64:	431c      	orrs	r4, r3
    4e66:	1b03      	subs	r3, r0, r4
    4e68:	0015      	movs	r5, r2
    4e6a:	000c      	movs	r4, r1
    4e6c:	e757      	b.n	4d1e <__aeabi_fadd+0xaa>
    4e6e:	1a1e      	subs	r6, r3, r0
    4e70:	0172      	lsls	r2, r6, #5
    4e72:	d42e      	bmi.n	4ed2 <__aeabi_fadd+0x25e>
    4e74:	2e00      	cmp	r6, #0
    4e76:	d1a8      	bne.n	4dca <__aeabi_fadd+0x156>
    4e78:	2400      	movs	r4, #0
    4e7a:	2000      	movs	r0, #0
    4e7c:	2300      	movs	r3, #0
    4e7e:	e760      	b.n	4d42 <__aeabi_fadd+0xce>
    4e80:	2201      	movs	r2, #1
    4e82:	493c      	ldr	r1, [pc, #240]	; (4f74 <__aeabi_fadd+0x300>)
    4e84:	401a      	ands	r2, r3
    4e86:	085b      	lsrs	r3, r3, #1
    4e88:	400b      	ands	r3, r1
    4e8a:	4313      	orrs	r3, r2
    4e8c:	e7af      	b.n	4dee <__aeabi_fadd+0x17a>
    4e8e:	2aff      	cmp	r2, #255	; 0xff
    4e90:	d0b1      	beq.n	4df6 <__aeabi_fadd+0x182>
    4e92:	2580      	movs	r5, #128	; 0x80
    4e94:	04ed      	lsls	r5, r5, #19
    4e96:	432b      	orrs	r3, r5
    4e98:	291b      	cmp	r1, #27
    4e9a:	dd28      	ble.n	4eee <__aeabi_fadd+0x27a>
    4e9c:	0015      	movs	r5, r2
    4e9e:	1c43      	adds	r3, r0, #1
    4ea0:	e742      	b.n	4d28 <__aeabi_fadd+0xb4>
    4ea2:	2aff      	cmp	r2, #255	; 0xff
    4ea4:	d100      	bne.n	4ea8 <__aeabi_fadd+0x234>
    4ea6:	e77e      	b.n	4da6 <__aeabi_fadd+0x132>
    4ea8:	181b      	adds	r3, r3, r0
    4eaa:	085b      	lsrs	r3, r3, #1
    4eac:	0015      	movs	r5, r2
    4eae:	075a      	lsls	r2, r3, #29
    4eb0:	d000      	beq.n	4eb4 <__aeabi_fadd+0x240>
    4eb2:	e739      	b.n	4d28 <__aeabi_fadd+0xb4>
    4eb4:	08db      	lsrs	r3, r3, #3
    4eb6:	e7c2      	b.n	4e3e <__aeabi_fadd+0x1ca>
    4eb8:	000c      	movs	r4, r1
    4eba:	0035      	movs	r5, r6
    4ebc:	0003      	movs	r3, r0
    4ebe:	e776      	b.n	4dae <__aeabi_fadd+0x13a>
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d13a      	bne.n	4f3a <__aeabi_fadd+0x2c6>
    4ec4:	2800      	cmp	r0, #0
    4ec6:	d195      	bne.n	4df4 <__aeabi_fadd+0x180>
    4ec8:	2380      	movs	r3, #128	; 0x80
    4eca:	2400      	movs	r4, #0
    4ecc:	20ff      	movs	r0, #255	; 0xff
    4ece:	03db      	lsls	r3, r3, #15
    4ed0:	e737      	b.n	4d42 <__aeabi_fadd+0xce>
    4ed2:	000c      	movs	r4, r1
    4ed4:	1ac6      	subs	r6, r0, r3
    4ed6:	e778      	b.n	4dca <__aeabi_fadd+0x156>
    4ed8:	181b      	adds	r3, r3, r0
    4eda:	2502      	movs	r5, #2
    4edc:	015a      	lsls	r2, r3, #5
    4ede:	d4cf      	bmi.n	4e80 <__aeabi_fadd+0x20c>
    4ee0:	3d01      	subs	r5, #1
    4ee2:	e71e      	b.n	4d22 <__aeabi_fadd+0xae>
    4ee4:	2501      	movs	r5, #1
    4ee6:	1a1b      	subs	r3, r3, r0
    4ee8:	e719      	b.n	4d1e <__aeabi_fadd+0xaa>
    4eea:	000d      	movs	r5, r1
    4eec:	e75f      	b.n	4dae <__aeabi_fadd+0x13a>
    4eee:	001d      	movs	r5, r3
    4ef0:	2620      	movs	r6, #32
    4ef2:	40cd      	lsrs	r5, r1
    4ef4:	1a71      	subs	r1, r6, r1
    4ef6:	408b      	lsls	r3, r1
    4ef8:	1e59      	subs	r1, r3, #1
    4efa:	418b      	sbcs	r3, r1
    4efc:	432b      	orrs	r3, r5
    4efe:	181b      	adds	r3, r3, r0
    4f00:	0015      	movs	r5, r2
    4f02:	e74b      	b.n	4d9c <__aeabi_fadd+0x128>
    4f04:	2b00      	cmp	r3, #0
    4f06:	d100      	bne.n	4f0a <__aeabi_fadd+0x296>
    4f08:	e775      	b.n	4df6 <__aeabi_fadd+0x182>
    4f0a:	2800      	cmp	r0, #0
    4f0c:	d100      	bne.n	4f10 <__aeabi_fadd+0x29c>
    4f0e:	e773      	b.n	4df8 <__aeabi_fadd+0x184>
    4f10:	2280      	movs	r2, #128	; 0x80
    4f12:	03d2      	lsls	r2, r2, #15
    4f14:	4297      	cmp	r7, r2
    4f16:	d302      	bcc.n	4f1e <__aeabi_fadd+0x2aa>
    4f18:	4594      	cmp	ip, r2
    4f1a:	d200      	bcs.n	4f1e <__aeabi_fadd+0x2aa>
    4f1c:	0003      	movs	r3, r0
    4f1e:	08db      	lsrs	r3, r3, #3
    4f20:	e74a      	b.n	4db8 <__aeabi_fadd+0x144>
    4f22:	2800      	cmp	r0, #0
    4f24:	d0a8      	beq.n	4e78 <__aeabi_fadd+0x204>
    4f26:	000c      	movs	r4, r1
    4f28:	0003      	movs	r3, r0
    4f2a:	e786      	b.n	4e3a <__aeabi_fadd+0x1c6>
    4f2c:	000c      	movs	r4, r1
    4f2e:	1ac3      	subs	r3, r0, r3
    4f30:	3501      	adds	r5, #1
    4f32:	e6f4      	b.n	4d1e <__aeabi_fadd+0xaa>
    4f34:	000d      	movs	r5, r1
    4f36:	0003      	movs	r3, r0
    4f38:	e739      	b.n	4dae <__aeabi_fadd+0x13a>
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d100      	bne.n	4f40 <__aeabi_fadd+0x2cc>
    4f3e:	e75b      	b.n	4df8 <__aeabi_fadd+0x184>
    4f40:	2280      	movs	r2, #128	; 0x80
    4f42:	03d2      	lsls	r2, r2, #15
    4f44:	4297      	cmp	r7, r2
    4f46:	d3ea      	bcc.n	4f1e <__aeabi_fadd+0x2aa>
    4f48:	4594      	cmp	ip, r2
    4f4a:	d2e8      	bcs.n	4f1e <__aeabi_fadd+0x2aa>
    4f4c:	000c      	movs	r4, r1
    4f4e:	0003      	movs	r3, r0
    4f50:	e7e5      	b.n	4f1e <__aeabi_fadd+0x2aa>
    4f52:	0003      	movs	r3, r0
    4f54:	e771      	b.n	4e3a <__aeabi_fadd+0x1c6>
    4f56:	181b      	adds	r3, r3, r0
    4f58:	015a      	lsls	r2, r3, #5
    4f5a:	d5ab      	bpl.n	4eb4 <__aeabi_fadd+0x240>
    4f5c:	4a04      	ldr	r2, [pc, #16]	; (4f70 <__aeabi_fadd+0x2fc>)
    4f5e:	3501      	adds	r5, #1
    4f60:	4013      	ands	r3, r2
    4f62:	08db      	lsrs	r3, r3, #3
    4f64:	e76b      	b.n	4e3e <__aeabi_fadd+0x1ca>
    4f66:	1e13      	subs	r3, r2, #0
    4f68:	d086      	beq.n	4e78 <__aeabi_fadd+0x204>
    4f6a:	08db      	lsrs	r3, r3, #3
    4f6c:	e767      	b.n	4e3e <__aeabi_fadd+0x1ca>
    4f6e:	46c0      	nop			; (mov r8, r8)
    4f70:	fbffffff 	.word	0xfbffffff
    4f74:	7dffffff 	.word	0x7dffffff

00004f78 <__aeabi_fdiv>:
    4f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f7a:	464f      	mov	r7, r9
    4f7c:	4646      	mov	r6, r8
    4f7e:	46d6      	mov	lr, sl
    4f80:	0244      	lsls	r4, r0, #9
    4f82:	b5c0      	push	{r6, r7, lr}
    4f84:	0047      	lsls	r7, r0, #1
    4f86:	1c0e      	adds	r6, r1, #0
    4f88:	0a64      	lsrs	r4, r4, #9
    4f8a:	0e3f      	lsrs	r7, r7, #24
    4f8c:	0fc5      	lsrs	r5, r0, #31
    4f8e:	2f00      	cmp	r7, #0
    4f90:	d03c      	beq.n	500c <__aeabi_fdiv+0x94>
    4f92:	2fff      	cmp	r7, #255	; 0xff
    4f94:	d042      	beq.n	501c <__aeabi_fdiv+0xa4>
    4f96:	2300      	movs	r3, #0
    4f98:	2280      	movs	r2, #128	; 0x80
    4f9a:	4699      	mov	r9, r3
    4f9c:	469a      	mov	sl, r3
    4f9e:	00e4      	lsls	r4, r4, #3
    4fa0:	04d2      	lsls	r2, r2, #19
    4fa2:	4314      	orrs	r4, r2
    4fa4:	3f7f      	subs	r7, #127	; 0x7f
    4fa6:	0273      	lsls	r3, r6, #9
    4fa8:	0a5b      	lsrs	r3, r3, #9
    4faa:	4698      	mov	r8, r3
    4fac:	0073      	lsls	r3, r6, #1
    4fae:	0e1b      	lsrs	r3, r3, #24
    4fb0:	0ff6      	lsrs	r6, r6, #31
    4fb2:	2b00      	cmp	r3, #0
    4fb4:	d01b      	beq.n	4fee <__aeabi_fdiv+0x76>
    4fb6:	2bff      	cmp	r3, #255	; 0xff
    4fb8:	d013      	beq.n	4fe2 <__aeabi_fdiv+0x6a>
    4fba:	4642      	mov	r2, r8
    4fbc:	2180      	movs	r1, #128	; 0x80
    4fbe:	00d2      	lsls	r2, r2, #3
    4fc0:	04c9      	lsls	r1, r1, #19
    4fc2:	4311      	orrs	r1, r2
    4fc4:	4688      	mov	r8, r1
    4fc6:	2000      	movs	r0, #0
    4fc8:	3b7f      	subs	r3, #127	; 0x7f
    4fca:	0029      	movs	r1, r5
    4fcc:	1aff      	subs	r7, r7, r3
    4fce:	464b      	mov	r3, r9
    4fd0:	4071      	eors	r1, r6
    4fd2:	b2c9      	uxtb	r1, r1
    4fd4:	2b0f      	cmp	r3, #15
    4fd6:	d900      	bls.n	4fda <__aeabi_fdiv+0x62>
    4fd8:	e0b5      	b.n	5146 <__aeabi_fdiv+0x1ce>
    4fda:	4a74      	ldr	r2, [pc, #464]	; (51ac <__aeabi_fdiv+0x234>)
    4fdc:	009b      	lsls	r3, r3, #2
    4fde:	58d3      	ldr	r3, [r2, r3]
    4fe0:	469f      	mov	pc, r3
    4fe2:	4643      	mov	r3, r8
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	d13f      	bne.n	5068 <__aeabi_fdiv+0xf0>
    4fe8:	3fff      	subs	r7, #255	; 0xff
    4fea:	3302      	adds	r3, #2
    4fec:	e003      	b.n	4ff6 <__aeabi_fdiv+0x7e>
    4fee:	4643      	mov	r3, r8
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d12d      	bne.n	5050 <__aeabi_fdiv+0xd8>
    4ff4:	2301      	movs	r3, #1
    4ff6:	0029      	movs	r1, r5
    4ff8:	464a      	mov	r2, r9
    4ffa:	4071      	eors	r1, r6
    4ffc:	b2c9      	uxtb	r1, r1
    4ffe:	431a      	orrs	r2, r3
    5000:	2a0e      	cmp	r2, #14
    5002:	d838      	bhi.n	5076 <__aeabi_fdiv+0xfe>
    5004:	486a      	ldr	r0, [pc, #424]	; (51b0 <__aeabi_fdiv+0x238>)
    5006:	0092      	lsls	r2, r2, #2
    5008:	5882      	ldr	r2, [r0, r2]
    500a:	4697      	mov	pc, r2
    500c:	2c00      	cmp	r4, #0
    500e:	d113      	bne.n	5038 <__aeabi_fdiv+0xc0>
    5010:	2304      	movs	r3, #4
    5012:	4699      	mov	r9, r3
    5014:	3b03      	subs	r3, #3
    5016:	2700      	movs	r7, #0
    5018:	469a      	mov	sl, r3
    501a:	e7c4      	b.n	4fa6 <__aeabi_fdiv+0x2e>
    501c:	2c00      	cmp	r4, #0
    501e:	d105      	bne.n	502c <__aeabi_fdiv+0xb4>
    5020:	2308      	movs	r3, #8
    5022:	4699      	mov	r9, r3
    5024:	3b06      	subs	r3, #6
    5026:	27ff      	movs	r7, #255	; 0xff
    5028:	469a      	mov	sl, r3
    502a:	e7bc      	b.n	4fa6 <__aeabi_fdiv+0x2e>
    502c:	230c      	movs	r3, #12
    502e:	4699      	mov	r9, r3
    5030:	3b09      	subs	r3, #9
    5032:	27ff      	movs	r7, #255	; 0xff
    5034:	469a      	mov	sl, r3
    5036:	e7b6      	b.n	4fa6 <__aeabi_fdiv+0x2e>
    5038:	0020      	movs	r0, r4
    503a:	f000 fd01 	bl	5a40 <__clzsi2>
    503e:	2776      	movs	r7, #118	; 0x76
    5040:	1f43      	subs	r3, r0, #5
    5042:	409c      	lsls	r4, r3
    5044:	2300      	movs	r3, #0
    5046:	427f      	negs	r7, r7
    5048:	4699      	mov	r9, r3
    504a:	469a      	mov	sl, r3
    504c:	1a3f      	subs	r7, r7, r0
    504e:	e7aa      	b.n	4fa6 <__aeabi_fdiv+0x2e>
    5050:	4640      	mov	r0, r8
    5052:	f000 fcf5 	bl	5a40 <__clzsi2>
    5056:	4642      	mov	r2, r8
    5058:	1f43      	subs	r3, r0, #5
    505a:	409a      	lsls	r2, r3
    505c:	2376      	movs	r3, #118	; 0x76
    505e:	425b      	negs	r3, r3
    5060:	1a1b      	subs	r3, r3, r0
    5062:	4690      	mov	r8, r2
    5064:	2000      	movs	r0, #0
    5066:	e7b0      	b.n	4fca <__aeabi_fdiv+0x52>
    5068:	2303      	movs	r3, #3
    506a:	464a      	mov	r2, r9
    506c:	431a      	orrs	r2, r3
    506e:	4691      	mov	r9, r2
    5070:	2003      	movs	r0, #3
    5072:	33fc      	adds	r3, #252	; 0xfc
    5074:	e7a9      	b.n	4fca <__aeabi_fdiv+0x52>
    5076:	000d      	movs	r5, r1
    5078:	20ff      	movs	r0, #255	; 0xff
    507a:	2200      	movs	r2, #0
    507c:	05c0      	lsls	r0, r0, #23
    507e:	07ed      	lsls	r5, r5, #31
    5080:	4310      	orrs	r0, r2
    5082:	4328      	orrs	r0, r5
    5084:	bce0      	pop	{r5, r6, r7}
    5086:	46ba      	mov	sl, r7
    5088:	46b1      	mov	r9, r6
    508a:	46a8      	mov	r8, r5
    508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    508e:	000d      	movs	r5, r1
    5090:	2000      	movs	r0, #0
    5092:	2200      	movs	r2, #0
    5094:	e7f2      	b.n	507c <__aeabi_fdiv+0x104>
    5096:	4653      	mov	r3, sl
    5098:	2b02      	cmp	r3, #2
    509a:	d0ed      	beq.n	5078 <__aeabi_fdiv+0x100>
    509c:	2b03      	cmp	r3, #3
    509e:	d033      	beq.n	5108 <__aeabi_fdiv+0x190>
    50a0:	46a0      	mov	r8, r4
    50a2:	2b01      	cmp	r3, #1
    50a4:	d105      	bne.n	50b2 <__aeabi_fdiv+0x13a>
    50a6:	2000      	movs	r0, #0
    50a8:	2200      	movs	r2, #0
    50aa:	e7e7      	b.n	507c <__aeabi_fdiv+0x104>
    50ac:	0035      	movs	r5, r6
    50ae:	2803      	cmp	r0, #3
    50b0:	d07a      	beq.n	51a8 <__aeabi_fdiv+0x230>
    50b2:	003b      	movs	r3, r7
    50b4:	337f      	adds	r3, #127	; 0x7f
    50b6:	2b00      	cmp	r3, #0
    50b8:	dd2d      	ble.n	5116 <__aeabi_fdiv+0x19e>
    50ba:	4642      	mov	r2, r8
    50bc:	0752      	lsls	r2, r2, #29
    50be:	d007      	beq.n	50d0 <__aeabi_fdiv+0x158>
    50c0:	220f      	movs	r2, #15
    50c2:	4641      	mov	r1, r8
    50c4:	400a      	ands	r2, r1
    50c6:	2a04      	cmp	r2, #4
    50c8:	d002      	beq.n	50d0 <__aeabi_fdiv+0x158>
    50ca:	2204      	movs	r2, #4
    50cc:	4694      	mov	ip, r2
    50ce:	44e0      	add	r8, ip
    50d0:	4642      	mov	r2, r8
    50d2:	0112      	lsls	r2, r2, #4
    50d4:	d505      	bpl.n	50e2 <__aeabi_fdiv+0x16a>
    50d6:	4642      	mov	r2, r8
    50d8:	4b36      	ldr	r3, [pc, #216]	; (51b4 <__aeabi_fdiv+0x23c>)
    50da:	401a      	ands	r2, r3
    50dc:	003b      	movs	r3, r7
    50de:	4690      	mov	r8, r2
    50e0:	3380      	adds	r3, #128	; 0x80
    50e2:	2bfe      	cmp	r3, #254	; 0xfe
    50e4:	dcc8      	bgt.n	5078 <__aeabi_fdiv+0x100>
    50e6:	4642      	mov	r2, r8
    50e8:	0192      	lsls	r2, r2, #6
    50ea:	0a52      	lsrs	r2, r2, #9
    50ec:	b2d8      	uxtb	r0, r3
    50ee:	e7c5      	b.n	507c <__aeabi_fdiv+0x104>
    50f0:	2280      	movs	r2, #128	; 0x80
    50f2:	2500      	movs	r5, #0
    50f4:	20ff      	movs	r0, #255	; 0xff
    50f6:	03d2      	lsls	r2, r2, #15
    50f8:	e7c0      	b.n	507c <__aeabi_fdiv+0x104>
    50fa:	2280      	movs	r2, #128	; 0x80
    50fc:	03d2      	lsls	r2, r2, #15
    50fe:	4214      	tst	r4, r2
    5100:	d002      	beq.n	5108 <__aeabi_fdiv+0x190>
    5102:	4643      	mov	r3, r8
    5104:	4213      	tst	r3, r2
    5106:	d049      	beq.n	519c <__aeabi_fdiv+0x224>
    5108:	2280      	movs	r2, #128	; 0x80
    510a:	03d2      	lsls	r2, r2, #15
    510c:	4322      	orrs	r2, r4
    510e:	0252      	lsls	r2, r2, #9
    5110:	20ff      	movs	r0, #255	; 0xff
    5112:	0a52      	lsrs	r2, r2, #9
    5114:	e7b2      	b.n	507c <__aeabi_fdiv+0x104>
    5116:	2201      	movs	r2, #1
    5118:	1ad3      	subs	r3, r2, r3
    511a:	2b1b      	cmp	r3, #27
    511c:	dcc3      	bgt.n	50a6 <__aeabi_fdiv+0x12e>
    511e:	4642      	mov	r2, r8
    5120:	40da      	lsrs	r2, r3
    5122:	4643      	mov	r3, r8
    5124:	379e      	adds	r7, #158	; 0x9e
    5126:	40bb      	lsls	r3, r7
    5128:	1e59      	subs	r1, r3, #1
    512a:	418b      	sbcs	r3, r1
    512c:	431a      	orrs	r2, r3
    512e:	0753      	lsls	r3, r2, #29
    5130:	d004      	beq.n	513c <__aeabi_fdiv+0x1c4>
    5132:	230f      	movs	r3, #15
    5134:	4013      	ands	r3, r2
    5136:	2b04      	cmp	r3, #4
    5138:	d000      	beq.n	513c <__aeabi_fdiv+0x1c4>
    513a:	3204      	adds	r2, #4
    513c:	0153      	lsls	r3, r2, #5
    513e:	d529      	bpl.n	5194 <__aeabi_fdiv+0x21c>
    5140:	2001      	movs	r0, #1
    5142:	2200      	movs	r2, #0
    5144:	e79a      	b.n	507c <__aeabi_fdiv+0x104>
    5146:	4642      	mov	r2, r8
    5148:	0163      	lsls	r3, r4, #5
    514a:	0155      	lsls	r5, r2, #5
    514c:	42ab      	cmp	r3, r5
    514e:	d215      	bcs.n	517c <__aeabi_fdiv+0x204>
    5150:	201b      	movs	r0, #27
    5152:	2200      	movs	r2, #0
    5154:	3f01      	subs	r7, #1
    5156:	2601      	movs	r6, #1
    5158:	001c      	movs	r4, r3
    515a:	0052      	lsls	r2, r2, #1
    515c:	005b      	lsls	r3, r3, #1
    515e:	2c00      	cmp	r4, #0
    5160:	db01      	blt.n	5166 <__aeabi_fdiv+0x1ee>
    5162:	429d      	cmp	r5, r3
    5164:	d801      	bhi.n	516a <__aeabi_fdiv+0x1f2>
    5166:	1b5b      	subs	r3, r3, r5
    5168:	4332      	orrs	r2, r6
    516a:	3801      	subs	r0, #1
    516c:	2800      	cmp	r0, #0
    516e:	d1f3      	bne.n	5158 <__aeabi_fdiv+0x1e0>
    5170:	1e58      	subs	r0, r3, #1
    5172:	4183      	sbcs	r3, r0
    5174:	4313      	orrs	r3, r2
    5176:	4698      	mov	r8, r3
    5178:	000d      	movs	r5, r1
    517a:	e79a      	b.n	50b2 <__aeabi_fdiv+0x13a>
    517c:	201a      	movs	r0, #26
    517e:	2201      	movs	r2, #1
    5180:	1b5b      	subs	r3, r3, r5
    5182:	e7e8      	b.n	5156 <__aeabi_fdiv+0x1de>
    5184:	3b02      	subs	r3, #2
    5186:	425a      	negs	r2, r3
    5188:	4153      	adcs	r3, r2
    518a:	425b      	negs	r3, r3
    518c:	0035      	movs	r5, r6
    518e:	2200      	movs	r2, #0
    5190:	b2d8      	uxtb	r0, r3
    5192:	e773      	b.n	507c <__aeabi_fdiv+0x104>
    5194:	0192      	lsls	r2, r2, #6
    5196:	2000      	movs	r0, #0
    5198:	0a52      	lsrs	r2, r2, #9
    519a:	e76f      	b.n	507c <__aeabi_fdiv+0x104>
    519c:	431a      	orrs	r2, r3
    519e:	0252      	lsls	r2, r2, #9
    51a0:	0035      	movs	r5, r6
    51a2:	20ff      	movs	r0, #255	; 0xff
    51a4:	0a52      	lsrs	r2, r2, #9
    51a6:	e769      	b.n	507c <__aeabi_fdiv+0x104>
    51a8:	4644      	mov	r4, r8
    51aa:	e7ad      	b.n	5108 <__aeabi_fdiv+0x190>
    51ac:	000063c0 	.word	0x000063c0
    51b0:	00006400 	.word	0x00006400
    51b4:	f7ffffff 	.word	0xf7ffffff

000051b8 <__eqsf2>:
    51b8:	b570      	push	{r4, r5, r6, lr}
    51ba:	0042      	lsls	r2, r0, #1
    51bc:	024e      	lsls	r6, r1, #9
    51be:	004c      	lsls	r4, r1, #1
    51c0:	0245      	lsls	r5, r0, #9
    51c2:	0a6d      	lsrs	r5, r5, #9
    51c4:	0e12      	lsrs	r2, r2, #24
    51c6:	0fc3      	lsrs	r3, r0, #31
    51c8:	0a76      	lsrs	r6, r6, #9
    51ca:	0e24      	lsrs	r4, r4, #24
    51cc:	0fc9      	lsrs	r1, r1, #31
    51ce:	2aff      	cmp	r2, #255	; 0xff
    51d0:	d010      	beq.n	51f4 <__eqsf2+0x3c>
    51d2:	2cff      	cmp	r4, #255	; 0xff
    51d4:	d00c      	beq.n	51f0 <__eqsf2+0x38>
    51d6:	2001      	movs	r0, #1
    51d8:	42a2      	cmp	r2, r4
    51da:	d10a      	bne.n	51f2 <__eqsf2+0x3a>
    51dc:	42b5      	cmp	r5, r6
    51de:	d108      	bne.n	51f2 <__eqsf2+0x3a>
    51e0:	428b      	cmp	r3, r1
    51e2:	d00f      	beq.n	5204 <__eqsf2+0x4c>
    51e4:	2a00      	cmp	r2, #0
    51e6:	d104      	bne.n	51f2 <__eqsf2+0x3a>
    51e8:	0028      	movs	r0, r5
    51ea:	1e43      	subs	r3, r0, #1
    51ec:	4198      	sbcs	r0, r3
    51ee:	e000      	b.n	51f2 <__eqsf2+0x3a>
    51f0:	2001      	movs	r0, #1
    51f2:	bd70      	pop	{r4, r5, r6, pc}
    51f4:	2001      	movs	r0, #1
    51f6:	2cff      	cmp	r4, #255	; 0xff
    51f8:	d1fb      	bne.n	51f2 <__eqsf2+0x3a>
    51fa:	4335      	orrs	r5, r6
    51fc:	d1f9      	bne.n	51f2 <__eqsf2+0x3a>
    51fe:	404b      	eors	r3, r1
    5200:	0018      	movs	r0, r3
    5202:	e7f6      	b.n	51f2 <__eqsf2+0x3a>
    5204:	2000      	movs	r0, #0
    5206:	e7f4      	b.n	51f2 <__eqsf2+0x3a>

00005208 <__gesf2>:
    5208:	b530      	push	{r4, r5, lr}
    520a:	0042      	lsls	r2, r0, #1
    520c:	0244      	lsls	r4, r0, #9
    520e:	024d      	lsls	r5, r1, #9
    5210:	0fc3      	lsrs	r3, r0, #31
    5212:	0048      	lsls	r0, r1, #1
    5214:	0a64      	lsrs	r4, r4, #9
    5216:	0e12      	lsrs	r2, r2, #24
    5218:	0a6d      	lsrs	r5, r5, #9
    521a:	0e00      	lsrs	r0, r0, #24
    521c:	0fc9      	lsrs	r1, r1, #31
    521e:	2aff      	cmp	r2, #255	; 0xff
    5220:	d019      	beq.n	5256 <__gesf2+0x4e>
    5222:	28ff      	cmp	r0, #255	; 0xff
    5224:	d00b      	beq.n	523e <__gesf2+0x36>
    5226:	2a00      	cmp	r2, #0
    5228:	d11e      	bne.n	5268 <__gesf2+0x60>
    522a:	2800      	cmp	r0, #0
    522c:	d10b      	bne.n	5246 <__gesf2+0x3e>
    522e:	2d00      	cmp	r5, #0
    5230:	d027      	beq.n	5282 <__gesf2+0x7a>
    5232:	2c00      	cmp	r4, #0
    5234:	d134      	bne.n	52a0 <__gesf2+0x98>
    5236:	2900      	cmp	r1, #0
    5238:	d02f      	beq.n	529a <__gesf2+0x92>
    523a:	0008      	movs	r0, r1
    523c:	bd30      	pop	{r4, r5, pc}
    523e:	2d00      	cmp	r5, #0
    5240:	d128      	bne.n	5294 <__gesf2+0x8c>
    5242:	2a00      	cmp	r2, #0
    5244:	d101      	bne.n	524a <__gesf2+0x42>
    5246:	2c00      	cmp	r4, #0
    5248:	d0f5      	beq.n	5236 <__gesf2+0x2e>
    524a:	428b      	cmp	r3, r1
    524c:	d107      	bne.n	525e <__gesf2+0x56>
    524e:	2b00      	cmp	r3, #0
    5250:	d023      	beq.n	529a <__gesf2+0x92>
    5252:	0018      	movs	r0, r3
    5254:	e7f2      	b.n	523c <__gesf2+0x34>
    5256:	2c00      	cmp	r4, #0
    5258:	d11c      	bne.n	5294 <__gesf2+0x8c>
    525a:	28ff      	cmp	r0, #255	; 0xff
    525c:	d014      	beq.n	5288 <__gesf2+0x80>
    525e:	1e58      	subs	r0, r3, #1
    5260:	2302      	movs	r3, #2
    5262:	4018      	ands	r0, r3
    5264:	3801      	subs	r0, #1
    5266:	e7e9      	b.n	523c <__gesf2+0x34>
    5268:	2800      	cmp	r0, #0
    526a:	d0f8      	beq.n	525e <__gesf2+0x56>
    526c:	428b      	cmp	r3, r1
    526e:	d1f6      	bne.n	525e <__gesf2+0x56>
    5270:	4282      	cmp	r2, r0
    5272:	dcf4      	bgt.n	525e <__gesf2+0x56>
    5274:	dbeb      	blt.n	524e <__gesf2+0x46>
    5276:	42ac      	cmp	r4, r5
    5278:	d8f1      	bhi.n	525e <__gesf2+0x56>
    527a:	2000      	movs	r0, #0
    527c:	42ac      	cmp	r4, r5
    527e:	d2dd      	bcs.n	523c <__gesf2+0x34>
    5280:	e7e5      	b.n	524e <__gesf2+0x46>
    5282:	2c00      	cmp	r4, #0
    5284:	d0da      	beq.n	523c <__gesf2+0x34>
    5286:	e7ea      	b.n	525e <__gesf2+0x56>
    5288:	2d00      	cmp	r5, #0
    528a:	d103      	bne.n	5294 <__gesf2+0x8c>
    528c:	428b      	cmp	r3, r1
    528e:	d1e6      	bne.n	525e <__gesf2+0x56>
    5290:	2000      	movs	r0, #0
    5292:	e7d3      	b.n	523c <__gesf2+0x34>
    5294:	2002      	movs	r0, #2
    5296:	4240      	negs	r0, r0
    5298:	e7d0      	b.n	523c <__gesf2+0x34>
    529a:	2001      	movs	r0, #1
    529c:	4240      	negs	r0, r0
    529e:	e7cd      	b.n	523c <__gesf2+0x34>
    52a0:	428b      	cmp	r3, r1
    52a2:	d0e8      	beq.n	5276 <__gesf2+0x6e>
    52a4:	e7db      	b.n	525e <__gesf2+0x56>
    52a6:	46c0      	nop			; (mov r8, r8)

000052a8 <__lesf2>:
    52a8:	b530      	push	{r4, r5, lr}
    52aa:	0042      	lsls	r2, r0, #1
    52ac:	0244      	lsls	r4, r0, #9
    52ae:	024d      	lsls	r5, r1, #9
    52b0:	0fc3      	lsrs	r3, r0, #31
    52b2:	0048      	lsls	r0, r1, #1
    52b4:	0a64      	lsrs	r4, r4, #9
    52b6:	0e12      	lsrs	r2, r2, #24
    52b8:	0a6d      	lsrs	r5, r5, #9
    52ba:	0e00      	lsrs	r0, r0, #24
    52bc:	0fc9      	lsrs	r1, r1, #31
    52be:	2aff      	cmp	r2, #255	; 0xff
    52c0:	d01a      	beq.n	52f8 <__lesf2+0x50>
    52c2:	28ff      	cmp	r0, #255	; 0xff
    52c4:	d00e      	beq.n	52e4 <__lesf2+0x3c>
    52c6:	2a00      	cmp	r2, #0
    52c8:	d11e      	bne.n	5308 <__lesf2+0x60>
    52ca:	2800      	cmp	r0, #0
    52cc:	d10e      	bne.n	52ec <__lesf2+0x44>
    52ce:	2d00      	cmp	r5, #0
    52d0:	d02a      	beq.n	5328 <__lesf2+0x80>
    52d2:	2c00      	cmp	r4, #0
    52d4:	d00c      	beq.n	52f0 <__lesf2+0x48>
    52d6:	428b      	cmp	r3, r1
    52d8:	d01d      	beq.n	5316 <__lesf2+0x6e>
    52da:	1e58      	subs	r0, r3, #1
    52dc:	2302      	movs	r3, #2
    52de:	4018      	ands	r0, r3
    52e0:	3801      	subs	r0, #1
    52e2:	e010      	b.n	5306 <__lesf2+0x5e>
    52e4:	2d00      	cmp	r5, #0
    52e6:	d10d      	bne.n	5304 <__lesf2+0x5c>
    52e8:	2a00      	cmp	r2, #0
    52ea:	d120      	bne.n	532e <__lesf2+0x86>
    52ec:	2c00      	cmp	r4, #0
    52ee:	d11e      	bne.n	532e <__lesf2+0x86>
    52f0:	2900      	cmp	r1, #0
    52f2:	d023      	beq.n	533c <__lesf2+0x94>
    52f4:	0008      	movs	r0, r1
    52f6:	e006      	b.n	5306 <__lesf2+0x5e>
    52f8:	2c00      	cmp	r4, #0
    52fa:	d103      	bne.n	5304 <__lesf2+0x5c>
    52fc:	28ff      	cmp	r0, #255	; 0xff
    52fe:	d1ec      	bne.n	52da <__lesf2+0x32>
    5300:	2d00      	cmp	r5, #0
    5302:	d017      	beq.n	5334 <__lesf2+0x8c>
    5304:	2002      	movs	r0, #2
    5306:	bd30      	pop	{r4, r5, pc}
    5308:	2800      	cmp	r0, #0
    530a:	d0e6      	beq.n	52da <__lesf2+0x32>
    530c:	428b      	cmp	r3, r1
    530e:	d1e4      	bne.n	52da <__lesf2+0x32>
    5310:	4282      	cmp	r2, r0
    5312:	dce2      	bgt.n	52da <__lesf2+0x32>
    5314:	db04      	blt.n	5320 <__lesf2+0x78>
    5316:	42ac      	cmp	r4, r5
    5318:	d8df      	bhi.n	52da <__lesf2+0x32>
    531a:	2000      	movs	r0, #0
    531c:	42ac      	cmp	r4, r5
    531e:	d2f2      	bcs.n	5306 <__lesf2+0x5e>
    5320:	2b00      	cmp	r3, #0
    5322:	d00b      	beq.n	533c <__lesf2+0x94>
    5324:	0018      	movs	r0, r3
    5326:	e7ee      	b.n	5306 <__lesf2+0x5e>
    5328:	2c00      	cmp	r4, #0
    532a:	d0ec      	beq.n	5306 <__lesf2+0x5e>
    532c:	e7d5      	b.n	52da <__lesf2+0x32>
    532e:	428b      	cmp	r3, r1
    5330:	d1d3      	bne.n	52da <__lesf2+0x32>
    5332:	e7f5      	b.n	5320 <__lesf2+0x78>
    5334:	2000      	movs	r0, #0
    5336:	428b      	cmp	r3, r1
    5338:	d0e5      	beq.n	5306 <__lesf2+0x5e>
    533a:	e7ce      	b.n	52da <__lesf2+0x32>
    533c:	2001      	movs	r0, #1
    533e:	4240      	negs	r0, r0
    5340:	e7e1      	b.n	5306 <__lesf2+0x5e>
    5342:	46c0      	nop			; (mov r8, r8)

00005344 <__aeabi_fmul>:
    5344:	b5f0      	push	{r4, r5, r6, r7, lr}
    5346:	464f      	mov	r7, r9
    5348:	4646      	mov	r6, r8
    534a:	46d6      	mov	lr, sl
    534c:	0243      	lsls	r3, r0, #9
    534e:	0a5b      	lsrs	r3, r3, #9
    5350:	4699      	mov	r9, r3
    5352:	0043      	lsls	r3, r0, #1
    5354:	b5c0      	push	{r6, r7, lr}
    5356:	0e1b      	lsrs	r3, r3, #24
    5358:	1c0e      	adds	r6, r1, #0
    535a:	0fc5      	lsrs	r5, r0, #31
    535c:	2b00      	cmp	r3, #0
    535e:	d100      	bne.n	5362 <__aeabi_fmul+0x1e>
    5360:	e085      	b.n	546e <__aeabi_fmul+0x12a>
    5362:	2bff      	cmp	r3, #255	; 0xff
    5364:	d100      	bne.n	5368 <__aeabi_fmul+0x24>
    5366:	e08b      	b.n	5480 <__aeabi_fmul+0x13c>
    5368:	464a      	mov	r2, r9
    536a:	2180      	movs	r1, #128	; 0x80
    536c:	00d2      	lsls	r2, r2, #3
    536e:	04c9      	lsls	r1, r1, #19
    5370:	4311      	orrs	r1, r2
    5372:	227f      	movs	r2, #127	; 0x7f
    5374:	4252      	negs	r2, r2
    5376:	4690      	mov	r8, r2
    5378:	4498      	add	r8, r3
    537a:	2300      	movs	r3, #0
    537c:	4689      	mov	r9, r1
    537e:	2700      	movs	r7, #0
    5380:	469a      	mov	sl, r3
    5382:	0274      	lsls	r4, r6, #9
    5384:	0073      	lsls	r3, r6, #1
    5386:	0a64      	lsrs	r4, r4, #9
    5388:	0e1b      	lsrs	r3, r3, #24
    538a:	0ff6      	lsrs	r6, r6, #31
    538c:	2b00      	cmp	r3, #0
    538e:	d064      	beq.n	545a <__aeabi_fmul+0x116>
    5390:	2bff      	cmp	r3, #255	; 0xff
    5392:	d01f      	beq.n	53d4 <__aeabi_fmul+0x90>
    5394:	2280      	movs	r2, #128	; 0x80
    5396:	3b7f      	subs	r3, #127	; 0x7f
    5398:	00e4      	lsls	r4, r4, #3
    539a:	04d2      	lsls	r2, r2, #19
    539c:	4443      	add	r3, r8
    539e:	2000      	movs	r0, #0
    53a0:	4314      	orrs	r4, r2
    53a2:	1c59      	adds	r1, r3, #1
    53a4:	2f0a      	cmp	r7, #10
    53a6:	dc2b      	bgt.n	5400 <__aeabi_fmul+0xbc>
    53a8:	4075      	eors	r5, r6
    53aa:	2f02      	cmp	r7, #2
    53ac:	dc22      	bgt.n	53f4 <__aeabi_fmul+0xb0>
    53ae:	3f01      	subs	r7, #1
    53b0:	2f01      	cmp	r7, #1
    53b2:	d900      	bls.n	53b6 <__aeabi_fmul+0x72>
    53b4:	e0bb      	b.n	552e <__aeabi_fmul+0x1ea>
    53b6:	2802      	cmp	r0, #2
    53b8:	d06b      	beq.n	5492 <__aeabi_fmul+0x14e>
    53ba:	2801      	cmp	r0, #1
    53bc:	d12a      	bne.n	5414 <__aeabi_fmul+0xd0>
    53be:	2000      	movs	r0, #0
    53c0:	2200      	movs	r2, #0
    53c2:	05c0      	lsls	r0, r0, #23
    53c4:	07ed      	lsls	r5, r5, #31
    53c6:	4310      	orrs	r0, r2
    53c8:	4328      	orrs	r0, r5
    53ca:	bce0      	pop	{r5, r6, r7}
    53cc:	46ba      	mov	sl, r7
    53ce:	46b1      	mov	r9, r6
    53d0:	46a8      	mov	r8, r5
    53d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53d4:	2c00      	cmp	r4, #0
    53d6:	d064      	beq.n	54a2 <__aeabi_fmul+0x15e>
    53d8:	2203      	movs	r2, #3
    53da:	4641      	mov	r1, r8
    53dc:	4643      	mov	r3, r8
    53de:	4317      	orrs	r7, r2
    53e0:	002a      	movs	r2, r5
    53e2:	3101      	adds	r1, #1
    53e4:	33ff      	adds	r3, #255	; 0xff
    53e6:	4072      	eors	r2, r6
    53e8:	31ff      	adds	r1, #255	; 0xff
    53ea:	2f0a      	cmp	r7, #10
    53ec:	dd00      	ble.n	53f0 <__aeabi_fmul+0xac>
    53ee:	e0d7      	b.n	55a0 <__aeabi_fmul+0x25c>
    53f0:	0015      	movs	r5, r2
    53f2:	2003      	movs	r0, #3
    53f4:	2201      	movs	r2, #1
    53f6:	40ba      	lsls	r2, r7
    53f8:	27a6      	movs	r7, #166	; 0xa6
    53fa:	00ff      	lsls	r7, r7, #3
    53fc:	423a      	tst	r2, r7
    53fe:	d020      	beq.n	5442 <__aeabi_fmul+0xfe>
    5400:	4653      	mov	r3, sl
    5402:	2b02      	cmp	r3, #2
    5404:	d045      	beq.n	5492 <__aeabi_fmul+0x14e>
    5406:	2b03      	cmp	r3, #3
    5408:	d100      	bne.n	540c <__aeabi_fmul+0xc8>
    540a:	e0bb      	b.n	5584 <__aeabi_fmul+0x240>
    540c:	4650      	mov	r0, sl
    540e:	464c      	mov	r4, r9
    5410:	2801      	cmp	r0, #1
    5412:	d0d4      	beq.n	53be <__aeabi_fmul+0x7a>
    5414:	000b      	movs	r3, r1
    5416:	337f      	adds	r3, #127	; 0x7f
    5418:	2b00      	cmp	r3, #0
    541a:	dd70      	ble.n	54fe <__aeabi_fmul+0x1ba>
    541c:	0762      	lsls	r2, r4, #29
    541e:	d004      	beq.n	542a <__aeabi_fmul+0xe6>
    5420:	220f      	movs	r2, #15
    5422:	4022      	ands	r2, r4
    5424:	2a04      	cmp	r2, #4
    5426:	d000      	beq.n	542a <__aeabi_fmul+0xe6>
    5428:	3404      	adds	r4, #4
    542a:	0122      	lsls	r2, r4, #4
    542c:	d503      	bpl.n	5436 <__aeabi_fmul+0xf2>
    542e:	4b63      	ldr	r3, [pc, #396]	; (55bc <__aeabi_fmul+0x278>)
    5430:	401c      	ands	r4, r3
    5432:	000b      	movs	r3, r1
    5434:	3380      	adds	r3, #128	; 0x80
    5436:	2bfe      	cmp	r3, #254	; 0xfe
    5438:	dc2b      	bgt.n	5492 <__aeabi_fmul+0x14e>
    543a:	01a2      	lsls	r2, r4, #6
    543c:	0a52      	lsrs	r2, r2, #9
    543e:	b2d8      	uxtb	r0, r3
    5440:	e7bf      	b.n	53c2 <__aeabi_fmul+0x7e>
    5442:	2790      	movs	r7, #144	; 0x90
    5444:	00bf      	lsls	r7, r7, #2
    5446:	423a      	tst	r2, r7
    5448:	d126      	bne.n	5498 <__aeabi_fmul+0x154>
    544a:	3fb9      	subs	r7, #185	; 0xb9
    544c:	3fff      	subs	r7, #255	; 0xff
    544e:	4217      	tst	r7, r2
    5450:	d06d      	beq.n	552e <__aeabi_fmul+0x1ea>
    5452:	0035      	movs	r5, r6
    5454:	46a1      	mov	r9, r4
    5456:	4682      	mov	sl, r0
    5458:	e7d2      	b.n	5400 <__aeabi_fmul+0xbc>
    545a:	2c00      	cmp	r4, #0
    545c:	d141      	bne.n	54e2 <__aeabi_fmul+0x19e>
    545e:	2301      	movs	r3, #1
    5460:	431f      	orrs	r7, r3
    5462:	4643      	mov	r3, r8
    5464:	2001      	movs	r0, #1
    5466:	1c59      	adds	r1, r3, #1
    5468:	2f0a      	cmp	r7, #10
    546a:	dd9d      	ble.n	53a8 <__aeabi_fmul+0x64>
    546c:	e7c8      	b.n	5400 <__aeabi_fmul+0xbc>
    546e:	464b      	mov	r3, r9
    5470:	2b00      	cmp	r3, #0
    5472:	d127      	bne.n	54c4 <__aeabi_fmul+0x180>
    5474:	2300      	movs	r3, #0
    5476:	4698      	mov	r8, r3
    5478:	3301      	adds	r3, #1
    547a:	2704      	movs	r7, #4
    547c:	469a      	mov	sl, r3
    547e:	e780      	b.n	5382 <__aeabi_fmul+0x3e>
    5480:	464b      	mov	r3, r9
    5482:	2b00      	cmp	r3, #0
    5484:	d118      	bne.n	54b8 <__aeabi_fmul+0x174>
    5486:	23ff      	movs	r3, #255	; 0xff
    5488:	4698      	mov	r8, r3
    548a:	3bfd      	subs	r3, #253	; 0xfd
    548c:	2708      	movs	r7, #8
    548e:	469a      	mov	sl, r3
    5490:	e777      	b.n	5382 <__aeabi_fmul+0x3e>
    5492:	20ff      	movs	r0, #255	; 0xff
    5494:	2200      	movs	r2, #0
    5496:	e794      	b.n	53c2 <__aeabi_fmul+0x7e>
    5498:	2280      	movs	r2, #128	; 0x80
    549a:	2500      	movs	r5, #0
    549c:	20ff      	movs	r0, #255	; 0xff
    549e:	03d2      	lsls	r2, r2, #15
    54a0:	e78f      	b.n	53c2 <__aeabi_fmul+0x7e>
    54a2:	2302      	movs	r3, #2
    54a4:	431f      	orrs	r7, r3
    54a6:	4643      	mov	r3, r8
    54a8:	1c59      	adds	r1, r3, #1
    54aa:	31ff      	adds	r1, #255	; 0xff
    54ac:	2f0a      	cmp	r7, #10
    54ae:	dca7      	bgt.n	5400 <__aeabi_fmul+0xbc>
    54b0:	2002      	movs	r0, #2
    54b2:	33ff      	adds	r3, #255	; 0xff
    54b4:	4075      	eors	r5, r6
    54b6:	e778      	b.n	53aa <__aeabi_fmul+0x66>
    54b8:	23ff      	movs	r3, #255	; 0xff
    54ba:	4698      	mov	r8, r3
    54bc:	3bfc      	subs	r3, #252	; 0xfc
    54be:	270c      	movs	r7, #12
    54c0:	469a      	mov	sl, r3
    54c2:	e75e      	b.n	5382 <__aeabi_fmul+0x3e>
    54c4:	4648      	mov	r0, r9
    54c6:	f000 fabb 	bl	5a40 <__clzsi2>
    54ca:	464a      	mov	r2, r9
    54cc:	1f43      	subs	r3, r0, #5
    54ce:	409a      	lsls	r2, r3
    54d0:	2376      	movs	r3, #118	; 0x76
    54d2:	425b      	negs	r3, r3
    54d4:	1a1b      	subs	r3, r3, r0
    54d6:	4698      	mov	r8, r3
    54d8:	2300      	movs	r3, #0
    54da:	4691      	mov	r9, r2
    54dc:	2700      	movs	r7, #0
    54de:	469a      	mov	sl, r3
    54e0:	e74f      	b.n	5382 <__aeabi_fmul+0x3e>
    54e2:	0020      	movs	r0, r4
    54e4:	f000 faac 	bl	5a40 <__clzsi2>
    54e8:	1f43      	subs	r3, r0, #5
    54ea:	409c      	lsls	r4, r3
    54ec:	4643      	mov	r3, r8
    54ee:	1a1b      	subs	r3, r3, r0
    54f0:	3b76      	subs	r3, #118	; 0x76
    54f2:	2000      	movs	r0, #0
    54f4:	1c59      	adds	r1, r3, #1
    54f6:	2f0a      	cmp	r7, #10
    54f8:	dc00      	bgt.n	54fc <__aeabi_fmul+0x1b8>
    54fa:	e755      	b.n	53a8 <__aeabi_fmul+0x64>
    54fc:	e780      	b.n	5400 <__aeabi_fmul+0xbc>
    54fe:	2201      	movs	r2, #1
    5500:	1ad3      	subs	r3, r2, r3
    5502:	2b1b      	cmp	r3, #27
    5504:	dd00      	ble.n	5508 <__aeabi_fmul+0x1c4>
    5506:	e75a      	b.n	53be <__aeabi_fmul+0x7a>
    5508:	319e      	adds	r1, #158	; 0x9e
    550a:	0022      	movs	r2, r4
    550c:	408c      	lsls	r4, r1
    550e:	40da      	lsrs	r2, r3
    5510:	1e63      	subs	r3, r4, #1
    5512:	419c      	sbcs	r4, r3
    5514:	4322      	orrs	r2, r4
    5516:	0753      	lsls	r3, r2, #29
    5518:	d004      	beq.n	5524 <__aeabi_fmul+0x1e0>
    551a:	230f      	movs	r3, #15
    551c:	4013      	ands	r3, r2
    551e:	2b04      	cmp	r3, #4
    5520:	d000      	beq.n	5524 <__aeabi_fmul+0x1e0>
    5522:	3204      	adds	r2, #4
    5524:	0153      	lsls	r3, r2, #5
    5526:	d537      	bpl.n	5598 <__aeabi_fmul+0x254>
    5528:	2001      	movs	r0, #1
    552a:	2200      	movs	r2, #0
    552c:	e749      	b.n	53c2 <__aeabi_fmul+0x7e>
    552e:	0c20      	lsrs	r0, r4, #16
    5530:	464a      	mov	r2, r9
    5532:	0424      	lsls	r4, r4, #16
    5534:	0c24      	lsrs	r4, r4, #16
    5536:	0027      	movs	r7, r4
    5538:	0c16      	lsrs	r6, r2, #16
    553a:	0412      	lsls	r2, r2, #16
    553c:	0c12      	lsrs	r2, r2, #16
    553e:	4374      	muls	r4, r6
    5540:	4357      	muls	r7, r2
    5542:	4346      	muls	r6, r0
    5544:	4350      	muls	r0, r2
    5546:	0c3a      	lsrs	r2, r7, #16
    5548:	1900      	adds	r0, r0, r4
    554a:	1812      	adds	r2, r2, r0
    554c:	4294      	cmp	r4, r2
    554e:	d903      	bls.n	5558 <__aeabi_fmul+0x214>
    5550:	2080      	movs	r0, #128	; 0x80
    5552:	0240      	lsls	r0, r0, #9
    5554:	4684      	mov	ip, r0
    5556:	4466      	add	r6, ip
    5558:	043f      	lsls	r7, r7, #16
    555a:	0410      	lsls	r0, r2, #16
    555c:	0c3f      	lsrs	r7, r7, #16
    555e:	19c0      	adds	r0, r0, r7
    5560:	0184      	lsls	r4, r0, #6
    5562:	1e67      	subs	r7, r4, #1
    5564:	41bc      	sbcs	r4, r7
    5566:	0c12      	lsrs	r2, r2, #16
    5568:	0e80      	lsrs	r0, r0, #26
    556a:	1992      	adds	r2, r2, r6
    556c:	4304      	orrs	r4, r0
    556e:	0192      	lsls	r2, r2, #6
    5570:	4314      	orrs	r4, r2
    5572:	0112      	lsls	r2, r2, #4
    5574:	d50e      	bpl.n	5594 <__aeabi_fmul+0x250>
    5576:	2301      	movs	r3, #1
    5578:	0862      	lsrs	r2, r4, #1
    557a:	401c      	ands	r4, r3
    557c:	4314      	orrs	r4, r2
    557e:	e749      	b.n	5414 <__aeabi_fmul+0xd0>
    5580:	0035      	movs	r5, r6
    5582:	46a1      	mov	r9, r4
    5584:	2280      	movs	r2, #128	; 0x80
    5586:	464b      	mov	r3, r9
    5588:	03d2      	lsls	r2, r2, #15
    558a:	431a      	orrs	r2, r3
    558c:	0252      	lsls	r2, r2, #9
    558e:	20ff      	movs	r0, #255	; 0xff
    5590:	0a52      	lsrs	r2, r2, #9
    5592:	e716      	b.n	53c2 <__aeabi_fmul+0x7e>
    5594:	0019      	movs	r1, r3
    5596:	e73d      	b.n	5414 <__aeabi_fmul+0xd0>
    5598:	0192      	lsls	r2, r2, #6
    559a:	2000      	movs	r0, #0
    559c:	0a52      	lsrs	r2, r2, #9
    559e:	e710      	b.n	53c2 <__aeabi_fmul+0x7e>
    55a0:	2f0f      	cmp	r7, #15
    55a2:	d1ed      	bne.n	5580 <__aeabi_fmul+0x23c>
    55a4:	2280      	movs	r2, #128	; 0x80
    55a6:	464b      	mov	r3, r9
    55a8:	03d2      	lsls	r2, r2, #15
    55aa:	4213      	tst	r3, r2
    55ac:	d0ea      	beq.n	5584 <__aeabi_fmul+0x240>
    55ae:	4214      	tst	r4, r2
    55b0:	d1e8      	bne.n	5584 <__aeabi_fmul+0x240>
    55b2:	0035      	movs	r5, r6
    55b4:	20ff      	movs	r0, #255	; 0xff
    55b6:	4322      	orrs	r2, r4
    55b8:	e703      	b.n	53c2 <__aeabi_fmul+0x7e>
    55ba:	46c0      	nop			; (mov r8, r8)
    55bc:	f7ffffff 	.word	0xf7ffffff

000055c0 <__aeabi_fsub>:
    55c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55c2:	0243      	lsls	r3, r0, #9
    55c4:	0045      	lsls	r5, r0, #1
    55c6:	0fc4      	lsrs	r4, r0, #31
    55c8:	0248      	lsls	r0, r1, #9
    55ca:	0a42      	lsrs	r2, r0, #9
    55cc:	4694      	mov	ip, r2
    55ce:	004a      	lsls	r2, r1, #1
    55d0:	0a5e      	lsrs	r6, r3, #9
    55d2:	0e2d      	lsrs	r5, r5, #24
    55d4:	099b      	lsrs	r3, r3, #6
    55d6:	0e12      	lsrs	r2, r2, #24
    55d8:	0fc9      	lsrs	r1, r1, #31
    55da:	0980      	lsrs	r0, r0, #6
    55dc:	2aff      	cmp	r2, #255	; 0xff
    55de:	d023      	beq.n	5628 <__aeabi_fsub+0x68>
    55e0:	2701      	movs	r7, #1
    55e2:	4079      	eors	r1, r7
    55e4:	1aaf      	subs	r7, r5, r2
    55e6:	428c      	cmp	r4, r1
    55e8:	d00f      	beq.n	560a <__aeabi_fsub+0x4a>
    55ea:	2f00      	cmp	r7, #0
    55ec:	dc00      	bgt.n	55f0 <__aeabi_fsub+0x30>
    55ee:	e15d      	b.n	58ac <__aeabi_fsub+0x2ec>
    55f0:	2a00      	cmp	r2, #0
    55f2:	d12f      	bne.n	5654 <__aeabi_fsub+0x94>
    55f4:	2800      	cmp	r0, #0
    55f6:	d100      	bne.n	55fa <__aeabi_fsub+0x3a>
    55f8:	e090      	b.n	571c <__aeabi_fsub+0x15c>
    55fa:	1e7a      	subs	r2, r7, #1
    55fc:	2f01      	cmp	r7, #1
    55fe:	d100      	bne.n	5602 <__aeabi_fsub+0x42>
    5600:	e11a      	b.n	5838 <__aeabi_fsub+0x278>
    5602:	2fff      	cmp	r7, #255	; 0xff
    5604:	d01c      	beq.n	5640 <__aeabi_fsub+0x80>
    5606:	0017      	movs	r7, r2
    5608:	e029      	b.n	565e <__aeabi_fsub+0x9e>
    560a:	2f00      	cmp	r7, #0
    560c:	dc00      	bgt.n	5610 <__aeabi_fsub+0x50>
    560e:	e159      	b.n	58c4 <__aeabi_fsub+0x304>
    5610:	2a00      	cmp	r2, #0
    5612:	d052      	beq.n	56ba <__aeabi_fsub+0xfa>
    5614:	2dff      	cmp	r5, #255	; 0xff
    5616:	d013      	beq.n	5640 <__aeabi_fsub+0x80>
    5618:	2280      	movs	r2, #128	; 0x80
    561a:	04d2      	lsls	r2, r2, #19
    561c:	4310      	orrs	r0, r2
    561e:	2f1b      	cmp	r7, #27
    5620:	dc00      	bgt.n	5624 <__aeabi_fsub+0x64>
    5622:	e06a      	b.n	56fa <__aeabi_fsub+0x13a>
    5624:	3301      	adds	r3, #1
    5626:	e02b      	b.n	5680 <__aeabi_fsub+0xc0>
    5628:	2800      	cmp	r0, #0
    562a:	d03b      	beq.n	56a4 <__aeabi_fsub+0xe4>
    562c:	428c      	cmp	r4, r1
    562e:	d04d      	beq.n	56cc <__aeabi_fsub+0x10c>
    5630:	2dff      	cmp	r5, #255	; 0xff
    5632:	d100      	bne.n	5636 <__aeabi_fsub+0x76>
    5634:	e08f      	b.n	5756 <__aeabi_fsub+0x196>
    5636:	2d00      	cmp	r5, #0
    5638:	d100      	bne.n	563c <__aeabi_fsub+0x7c>
    563a:	e0ab      	b.n	5794 <__aeabi_fsub+0x1d4>
    563c:	000c      	movs	r4, r1
    563e:	0003      	movs	r3, r0
    5640:	08db      	lsrs	r3, r3, #3
    5642:	2b00      	cmp	r3, #0
    5644:	d067      	beq.n	5716 <__aeabi_fsub+0x156>
    5646:	2280      	movs	r2, #128	; 0x80
    5648:	03d2      	lsls	r2, r2, #15
    564a:	4313      	orrs	r3, r2
    564c:	025b      	lsls	r3, r3, #9
    564e:	20ff      	movs	r0, #255	; 0xff
    5650:	0a5b      	lsrs	r3, r3, #9
    5652:	e022      	b.n	569a <__aeabi_fsub+0xda>
    5654:	2dff      	cmp	r5, #255	; 0xff
    5656:	d0f3      	beq.n	5640 <__aeabi_fsub+0x80>
    5658:	2280      	movs	r2, #128	; 0x80
    565a:	04d2      	lsls	r2, r2, #19
    565c:	4310      	orrs	r0, r2
    565e:	2201      	movs	r2, #1
    5660:	2f1b      	cmp	r7, #27
    5662:	dc07      	bgt.n	5674 <__aeabi_fsub+0xb4>
    5664:	2120      	movs	r1, #32
    5666:	1bc9      	subs	r1, r1, r7
    5668:	0002      	movs	r2, r0
    566a:	4088      	lsls	r0, r1
    566c:	40fa      	lsrs	r2, r7
    566e:	1e41      	subs	r1, r0, #1
    5670:	4188      	sbcs	r0, r1
    5672:	4302      	orrs	r2, r0
    5674:	1a9b      	subs	r3, r3, r2
    5676:	015a      	lsls	r2, r3, #5
    5678:	d456      	bmi.n	5728 <__aeabi_fsub+0x168>
    567a:	2207      	movs	r2, #7
    567c:	401a      	ands	r2, r3
    567e:	d04e      	beq.n	571e <__aeabi_fsub+0x15e>
    5680:	220f      	movs	r2, #15
    5682:	401a      	ands	r2, r3
    5684:	2a04      	cmp	r2, #4
    5686:	d000      	beq.n	568a <__aeabi_fsub+0xca>
    5688:	3304      	adds	r3, #4
    568a:	015a      	lsls	r2, r3, #5
    568c:	d547      	bpl.n	571e <__aeabi_fsub+0x15e>
    568e:	1c68      	adds	r0, r5, #1
    5690:	2dfe      	cmp	r5, #254	; 0xfe
    5692:	d040      	beq.n	5716 <__aeabi_fsub+0x156>
    5694:	019b      	lsls	r3, r3, #6
    5696:	0a5b      	lsrs	r3, r3, #9
    5698:	b2c0      	uxtb	r0, r0
    569a:	05c0      	lsls	r0, r0, #23
    569c:	4318      	orrs	r0, r3
    569e:	07e4      	lsls	r4, r4, #31
    56a0:	4320      	orrs	r0, r4
    56a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56a4:	2701      	movs	r7, #1
    56a6:	4079      	eors	r1, r7
    56a8:	428c      	cmp	r4, r1
    56aa:	d1c1      	bne.n	5630 <__aeabi_fsub+0x70>
    56ac:	2dff      	cmp	r5, #255	; 0xff
    56ae:	d010      	beq.n	56d2 <__aeabi_fsub+0x112>
    56b0:	2d00      	cmp	r5, #0
    56b2:	d100      	bne.n	56b6 <__aeabi_fsub+0xf6>
    56b4:	e0e7      	b.n	5886 <__aeabi_fsub+0x2c6>
    56b6:	2300      	movs	r3, #0
    56b8:	e7c2      	b.n	5640 <__aeabi_fsub+0x80>
    56ba:	2800      	cmp	r0, #0
    56bc:	d02e      	beq.n	571c <__aeabi_fsub+0x15c>
    56be:	1e7a      	subs	r2, r7, #1
    56c0:	2f01      	cmp	r7, #1
    56c2:	d07f      	beq.n	57c4 <__aeabi_fsub+0x204>
    56c4:	2fff      	cmp	r7, #255	; 0xff
    56c6:	d0bb      	beq.n	5640 <__aeabi_fsub+0x80>
    56c8:	0017      	movs	r7, r2
    56ca:	e7a8      	b.n	561e <__aeabi_fsub+0x5e>
    56cc:	2dff      	cmp	r5, #255	; 0xff
    56ce:	d000      	beq.n	56d2 <__aeabi_fsub+0x112>
    56d0:	e083      	b.n	57da <__aeabi_fsub+0x21a>
    56d2:	27fe      	movs	r7, #254	; 0xfe
    56d4:	1c6a      	adds	r2, r5, #1
    56d6:	4217      	tst	r7, r2
    56d8:	d000      	beq.n	56dc <__aeabi_fsub+0x11c>
    56da:	e08d      	b.n	57f8 <__aeabi_fsub+0x238>
    56dc:	2d00      	cmp	r5, #0
    56de:	d000      	beq.n	56e2 <__aeabi_fsub+0x122>
    56e0:	e0ad      	b.n	583e <__aeabi_fsub+0x27e>
    56e2:	2b00      	cmp	r3, #0
    56e4:	d100      	bne.n	56e8 <__aeabi_fsub+0x128>
    56e6:	e0d2      	b.n	588e <__aeabi_fsub+0x2ce>
    56e8:	2800      	cmp	r0, #0
    56ea:	d000      	beq.n	56ee <__aeabi_fsub+0x12e>
    56ec:	e0d1      	b.n	5892 <__aeabi_fsub+0x2d2>
    56ee:	2500      	movs	r5, #0
    56f0:	08db      	lsrs	r3, r3, #3
    56f2:	025b      	lsls	r3, r3, #9
    56f4:	0a5b      	lsrs	r3, r3, #9
    56f6:	b2e8      	uxtb	r0, r5
    56f8:	e7cf      	b.n	569a <__aeabi_fsub+0xda>
    56fa:	2120      	movs	r1, #32
    56fc:	1bc9      	subs	r1, r1, r7
    56fe:	0002      	movs	r2, r0
    5700:	4088      	lsls	r0, r1
    5702:	40fa      	lsrs	r2, r7
    5704:	1e41      	subs	r1, r0, #1
    5706:	4188      	sbcs	r0, r1
    5708:	4310      	orrs	r0, r2
    570a:	181b      	adds	r3, r3, r0
    570c:	015a      	lsls	r2, r3, #5
    570e:	d5b4      	bpl.n	567a <__aeabi_fsub+0xba>
    5710:	3501      	adds	r5, #1
    5712:	2dff      	cmp	r5, #255	; 0xff
    5714:	d15a      	bne.n	57cc <__aeabi_fsub+0x20c>
    5716:	20ff      	movs	r0, #255	; 0xff
    5718:	2300      	movs	r3, #0
    571a:	e7be      	b.n	569a <__aeabi_fsub+0xda>
    571c:	003d      	movs	r5, r7
    571e:	08db      	lsrs	r3, r3, #3
    5720:	2dff      	cmp	r5, #255	; 0xff
    5722:	d100      	bne.n	5726 <__aeabi_fsub+0x166>
    5724:	e78d      	b.n	5642 <__aeabi_fsub+0x82>
    5726:	e7e4      	b.n	56f2 <__aeabi_fsub+0x132>
    5728:	019e      	lsls	r6, r3, #6
    572a:	09b6      	lsrs	r6, r6, #6
    572c:	0030      	movs	r0, r6
    572e:	f000 f987 	bl	5a40 <__clzsi2>
    5732:	3805      	subs	r0, #5
    5734:	4086      	lsls	r6, r0
    5736:	4285      	cmp	r5, r0
    5738:	dc1f      	bgt.n	577a <__aeabi_fsub+0x1ba>
    573a:	2220      	movs	r2, #32
    573c:	1b40      	subs	r0, r0, r5
    573e:	3001      	adds	r0, #1
    5740:	1a12      	subs	r2, r2, r0
    5742:	0033      	movs	r3, r6
    5744:	4096      	lsls	r6, r2
    5746:	40c3      	lsrs	r3, r0
    5748:	1e72      	subs	r2, r6, #1
    574a:	4196      	sbcs	r6, r2
    574c:	2500      	movs	r5, #0
    574e:	4333      	orrs	r3, r6
    5750:	075a      	lsls	r2, r3, #29
    5752:	d195      	bne.n	5680 <__aeabi_fsub+0xc0>
    5754:	e799      	b.n	568a <__aeabi_fsub+0xca>
    5756:	27fe      	movs	r7, #254	; 0xfe
    5758:	1c6a      	adds	r2, r5, #1
    575a:	4217      	tst	r7, r2
    575c:	d111      	bne.n	5782 <__aeabi_fsub+0x1c2>
    575e:	2d00      	cmp	r5, #0
    5760:	d15a      	bne.n	5818 <__aeabi_fsub+0x258>
    5762:	2b00      	cmp	r3, #0
    5764:	d100      	bne.n	5768 <__aeabi_fsub+0x1a8>
    5766:	e089      	b.n	587c <__aeabi_fsub+0x2bc>
    5768:	2800      	cmp	r0, #0
    576a:	d0c0      	beq.n	56ee <__aeabi_fsub+0x12e>
    576c:	1a1a      	subs	r2, r3, r0
    576e:	0156      	lsls	r6, r2, #5
    5770:	d400      	bmi.n	5774 <__aeabi_fsub+0x1b4>
    5772:	e096      	b.n	58a2 <__aeabi_fsub+0x2e2>
    5774:	000c      	movs	r4, r1
    5776:	1ac3      	subs	r3, r0, r3
    5778:	e7ea      	b.n	5750 <__aeabi_fsub+0x190>
    577a:	4b58      	ldr	r3, [pc, #352]	; (58dc <__aeabi_fsub+0x31c>)
    577c:	1a2d      	subs	r5, r5, r0
    577e:	4033      	ands	r3, r6
    5780:	e7e6      	b.n	5750 <__aeabi_fsub+0x190>
    5782:	1a1e      	subs	r6, r3, r0
    5784:	0172      	lsls	r2, r6, #5
    5786:	d444      	bmi.n	5812 <__aeabi_fsub+0x252>
    5788:	2e00      	cmp	r6, #0
    578a:	d1cf      	bne.n	572c <__aeabi_fsub+0x16c>
    578c:	2400      	movs	r4, #0
    578e:	2000      	movs	r0, #0
    5790:	2300      	movs	r3, #0
    5792:	e782      	b.n	569a <__aeabi_fsub+0xda>
    5794:	25ff      	movs	r5, #255	; 0xff
    5796:	2b00      	cmp	r3, #0
    5798:	d038      	beq.n	580c <__aeabi_fsub+0x24c>
    579a:	1e6e      	subs	r6, r5, #1
    579c:	2d01      	cmp	r5, #1
    579e:	d06a      	beq.n	5876 <__aeabi_fsub+0x2b6>
    57a0:	2dff      	cmp	r5, #255	; 0xff
    57a2:	d100      	bne.n	57a6 <__aeabi_fsub+0x1e6>
    57a4:	e74a      	b.n	563c <__aeabi_fsub+0x7c>
    57a6:	2401      	movs	r4, #1
    57a8:	2e1b      	cmp	r6, #27
    57aa:	dc07      	bgt.n	57bc <__aeabi_fsub+0x1fc>
    57ac:	2520      	movs	r5, #32
    57ae:	1bad      	subs	r5, r5, r6
    57b0:	001c      	movs	r4, r3
    57b2:	40ab      	lsls	r3, r5
    57b4:	40f4      	lsrs	r4, r6
    57b6:	1e5d      	subs	r5, r3, #1
    57b8:	41ab      	sbcs	r3, r5
    57ba:	431c      	orrs	r4, r3
    57bc:	1b03      	subs	r3, r0, r4
    57be:	0015      	movs	r5, r2
    57c0:	000c      	movs	r4, r1
    57c2:	e758      	b.n	5676 <__aeabi_fsub+0xb6>
    57c4:	181b      	adds	r3, r3, r0
    57c6:	2502      	movs	r5, #2
    57c8:	015a      	lsls	r2, r3, #5
    57ca:	d533      	bpl.n	5834 <__aeabi_fsub+0x274>
    57cc:	2201      	movs	r2, #1
    57ce:	4944      	ldr	r1, [pc, #272]	; (58e0 <__aeabi_fsub+0x320>)
    57d0:	401a      	ands	r2, r3
    57d2:	085b      	lsrs	r3, r3, #1
    57d4:	400b      	ands	r3, r1
    57d6:	4313      	orrs	r3, r2
    57d8:	e7ba      	b.n	5750 <__aeabi_fsub+0x190>
    57da:	2d00      	cmp	r5, #0
    57dc:	d131      	bne.n	5842 <__aeabi_fsub+0x282>
    57de:	35ff      	adds	r5, #255	; 0xff
    57e0:	2b00      	cmp	r3, #0
    57e2:	d052      	beq.n	588a <__aeabi_fsub+0x2ca>
    57e4:	1e69      	subs	r1, r5, #1
    57e6:	2d01      	cmp	r5, #1
    57e8:	d020      	beq.n	582c <__aeabi_fsub+0x26c>
    57ea:	2dff      	cmp	r5, #255	; 0xff
    57ec:	d029      	beq.n	5842 <__aeabi_fsub+0x282>
    57ee:	291b      	cmp	r1, #27
    57f0:	dd36      	ble.n	5860 <__aeabi_fsub+0x2a0>
    57f2:	0015      	movs	r5, r2
    57f4:	1c43      	adds	r3, r0, #1
    57f6:	e743      	b.n	5680 <__aeabi_fsub+0xc0>
    57f8:	2aff      	cmp	r2, #255	; 0xff
    57fa:	d08c      	beq.n	5716 <__aeabi_fsub+0x156>
    57fc:	181b      	adds	r3, r3, r0
    57fe:	085b      	lsrs	r3, r3, #1
    5800:	0015      	movs	r5, r2
    5802:	075a      	lsls	r2, r3, #29
    5804:	d000      	beq.n	5808 <__aeabi_fsub+0x248>
    5806:	e73b      	b.n	5680 <__aeabi_fsub+0xc0>
    5808:	08db      	lsrs	r3, r3, #3
    580a:	e772      	b.n	56f2 <__aeabi_fsub+0x132>
    580c:	000c      	movs	r4, r1
    580e:	0003      	movs	r3, r0
    5810:	e785      	b.n	571e <__aeabi_fsub+0x15e>
    5812:	000c      	movs	r4, r1
    5814:	1ac6      	subs	r6, r0, r3
    5816:	e789      	b.n	572c <__aeabi_fsub+0x16c>
    5818:	2b00      	cmp	r3, #0
    581a:	d114      	bne.n	5846 <__aeabi_fsub+0x286>
    581c:	2800      	cmp	r0, #0
    581e:	d000      	beq.n	5822 <__aeabi_fsub+0x262>
    5820:	e70c      	b.n	563c <__aeabi_fsub+0x7c>
    5822:	2380      	movs	r3, #128	; 0x80
    5824:	2400      	movs	r4, #0
    5826:	20ff      	movs	r0, #255	; 0xff
    5828:	03db      	lsls	r3, r3, #15
    582a:	e736      	b.n	569a <__aeabi_fsub+0xda>
    582c:	181b      	adds	r3, r3, r0
    582e:	3501      	adds	r5, #1
    5830:	015a      	lsls	r2, r3, #5
    5832:	d4cb      	bmi.n	57cc <__aeabi_fsub+0x20c>
    5834:	3d01      	subs	r5, #1
    5836:	e720      	b.n	567a <__aeabi_fsub+0xba>
    5838:	2501      	movs	r5, #1
    583a:	1a1b      	subs	r3, r3, r0
    583c:	e71b      	b.n	5676 <__aeabi_fsub+0xb6>
    583e:	2b00      	cmp	r3, #0
    5840:	d101      	bne.n	5846 <__aeabi_fsub+0x286>
    5842:	0003      	movs	r3, r0
    5844:	e6fc      	b.n	5640 <__aeabi_fsub+0x80>
    5846:	2800      	cmp	r0, #0
    5848:	d100      	bne.n	584c <__aeabi_fsub+0x28c>
    584a:	e6f9      	b.n	5640 <__aeabi_fsub+0x80>
    584c:	2280      	movs	r2, #128	; 0x80
    584e:	03d2      	lsls	r2, r2, #15
    5850:	4296      	cmp	r6, r2
    5852:	d303      	bcc.n	585c <__aeabi_fsub+0x29c>
    5854:	4594      	cmp	ip, r2
    5856:	d201      	bcs.n	585c <__aeabi_fsub+0x29c>
    5858:	000c      	movs	r4, r1
    585a:	0003      	movs	r3, r0
    585c:	08db      	lsrs	r3, r3, #3
    585e:	e6f2      	b.n	5646 <__aeabi_fsub+0x86>
    5860:	001d      	movs	r5, r3
    5862:	2620      	movs	r6, #32
    5864:	40cd      	lsrs	r5, r1
    5866:	1a71      	subs	r1, r6, r1
    5868:	408b      	lsls	r3, r1
    586a:	1e59      	subs	r1, r3, #1
    586c:	418b      	sbcs	r3, r1
    586e:	432b      	orrs	r3, r5
    5870:	181b      	adds	r3, r3, r0
    5872:	0015      	movs	r5, r2
    5874:	e74a      	b.n	570c <__aeabi_fsub+0x14c>
    5876:	000c      	movs	r4, r1
    5878:	1ac3      	subs	r3, r0, r3
    587a:	e6fc      	b.n	5676 <__aeabi_fsub+0xb6>
    587c:	2800      	cmp	r0, #0
    587e:	d085      	beq.n	578c <__aeabi_fsub+0x1cc>
    5880:	000c      	movs	r4, r1
    5882:	0003      	movs	r3, r0
    5884:	e733      	b.n	56ee <__aeabi_fsub+0x12e>
    5886:	25ff      	movs	r5, #255	; 0xff
    5888:	e7aa      	b.n	57e0 <__aeabi_fsub+0x220>
    588a:	0003      	movs	r3, r0
    588c:	e747      	b.n	571e <__aeabi_fsub+0x15e>
    588e:	0003      	movs	r3, r0
    5890:	e72d      	b.n	56ee <__aeabi_fsub+0x12e>
    5892:	181b      	adds	r3, r3, r0
    5894:	015a      	lsls	r2, r3, #5
    5896:	d5b7      	bpl.n	5808 <__aeabi_fsub+0x248>
    5898:	4a10      	ldr	r2, [pc, #64]	; (58dc <__aeabi_fsub+0x31c>)
    589a:	3501      	adds	r5, #1
    589c:	4013      	ands	r3, r2
    589e:	08db      	lsrs	r3, r3, #3
    58a0:	e727      	b.n	56f2 <__aeabi_fsub+0x132>
    58a2:	1e13      	subs	r3, r2, #0
    58a4:	d100      	bne.n	58a8 <__aeabi_fsub+0x2e8>
    58a6:	e771      	b.n	578c <__aeabi_fsub+0x1cc>
    58a8:	08db      	lsrs	r3, r3, #3
    58aa:	e722      	b.n	56f2 <__aeabi_fsub+0x132>
    58ac:	2f00      	cmp	r7, #0
    58ae:	d100      	bne.n	58b2 <__aeabi_fsub+0x2f2>
    58b0:	e751      	b.n	5756 <__aeabi_fsub+0x196>
    58b2:	1b56      	subs	r6, r2, r5
    58b4:	2d00      	cmp	r5, #0
    58b6:	d101      	bne.n	58bc <__aeabi_fsub+0x2fc>
    58b8:	0035      	movs	r5, r6
    58ba:	e76c      	b.n	5796 <__aeabi_fsub+0x1d6>
    58bc:	2480      	movs	r4, #128	; 0x80
    58be:	04e4      	lsls	r4, r4, #19
    58c0:	4323      	orrs	r3, r4
    58c2:	e770      	b.n	57a6 <__aeabi_fsub+0x1e6>
    58c4:	2f00      	cmp	r7, #0
    58c6:	d100      	bne.n	58ca <__aeabi_fsub+0x30a>
    58c8:	e703      	b.n	56d2 <__aeabi_fsub+0x112>
    58ca:	1b51      	subs	r1, r2, r5
    58cc:	2d00      	cmp	r5, #0
    58ce:	d101      	bne.n	58d4 <__aeabi_fsub+0x314>
    58d0:	000d      	movs	r5, r1
    58d2:	e785      	b.n	57e0 <__aeabi_fsub+0x220>
    58d4:	2580      	movs	r5, #128	; 0x80
    58d6:	04ed      	lsls	r5, r5, #19
    58d8:	432b      	orrs	r3, r5
    58da:	e788      	b.n	57ee <__aeabi_fsub+0x22e>
    58dc:	fbffffff 	.word	0xfbffffff
    58e0:	7dffffff 	.word	0x7dffffff

000058e4 <__aeabi_f2iz>:
    58e4:	0241      	lsls	r1, r0, #9
    58e6:	0042      	lsls	r2, r0, #1
    58e8:	0fc3      	lsrs	r3, r0, #31
    58ea:	0a49      	lsrs	r1, r1, #9
    58ec:	2000      	movs	r0, #0
    58ee:	0e12      	lsrs	r2, r2, #24
    58f0:	2a7e      	cmp	r2, #126	; 0x7e
    58f2:	dd03      	ble.n	58fc <__aeabi_f2iz+0x18>
    58f4:	2a9d      	cmp	r2, #157	; 0x9d
    58f6:	dd02      	ble.n	58fe <__aeabi_f2iz+0x1a>
    58f8:	4a09      	ldr	r2, [pc, #36]	; (5920 <__aeabi_f2iz+0x3c>)
    58fa:	1898      	adds	r0, r3, r2
    58fc:	4770      	bx	lr
    58fe:	2080      	movs	r0, #128	; 0x80
    5900:	0400      	lsls	r0, r0, #16
    5902:	4301      	orrs	r1, r0
    5904:	2a95      	cmp	r2, #149	; 0x95
    5906:	dc07      	bgt.n	5918 <__aeabi_f2iz+0x34>
    5908:	2096      	movs	r0, #150	; 0x96
    590a:	1a82      	subs	r2, r0, r2
    590c:	40d1      	lsrs	r1, r2
    590e:	4248      	negs	r0, r1
    5910:	2b00      	cmp	r3, #0
    5912:	d1f3      	bne.n	58fc <__aeabi_f2iz+0x18>
    5914:	0008      	movs	r0, r1
    5916:	e7f1      	b.n	58fc <__aeabi_f2iz+0x18>
    5918:	3a96      	subs	r2, #150	; 0x96
    591a:	4091      	lsls	r1, r2
    591c:	e7f7      	b.n	590e <__aeabi_f2iz+0x2a>
    591e:	46c0      	nop			; (mov r8, r8)
    5920:	7fffffff 	.word	0x7fffffff

00005924 <__aeabi_i2f>:
    5924:	b570      	push	{r4, r5, r6, lr}
    5926:	2800      	cmp	r0, #0
    5928:	d013      	beq.n	5952 <__aeabi_i2f+0x2e>
    592a:	17c3      	asrs	r3, r0, #31
    592c:	18c5      	adds	r5, r0, r3
    592e:	405d      	eors	r5, r3
    5930:	0fc4      	lsrs	r4, r0, #31
    5932:	0028      	movs	r0, r5
    5934:	f000 f884 	bl	5a40 <__clzsi2>
    5938:	239e      	movs	r3, #158	; 0x9e
    593a:	0001      	movs	r1, r0
    593c:	1a1b      	subs	r3, r3, r0
    593e:	2b96      	cmp	r3, #150	; 0x96
    5940:	dc0f      	bgt.n	5962 <__aeabi_i2f+0x3e>
    5942:	2808      	cmp	r0, #8
    5944:	d034      	beq.n	59b0 <__aeabi_i2f+0x8c>
    5946:	3908      	subs	r1, #8
    5948:	408d      	lsls	r5, r1
    594a:	026d      	lsls	r5, r5, #9
    594c:	0a6d      	lsrs	r5, r5, #9
    594e:	b2d8      	uxtb	r0, r3
    5950:	e002      	b.n	5958 <__aeabi_i2f+0x34>
    5952:	2400      	movs	r4, #0
    5954:	2000      	movs	r0, #0
    5956:	2500      	movs	r5, #0
    5958:	05c0      	lsls	r0, r0, #23
    595a:	4328      	orrs	r0, r5
    595c:	07e4      	lsls	r4, r4, #31
    595e:	4320      	orrs	r0, r4
    5960:	bd70      	pop	{r4, r5, r6, pc}
    5962:	2b99      	cmp	r3, #153	; 0x99
    5964:	dc16      	bgt.n	5994 <__aeabi_i2f+0x70>
    5966:	1f42      	subs	r2, r0, #5
    5968:	2805      	cmp	r0, #5
    596a:	d000      	beq.n	596e <__aeabi_i2f+0x4a>
    596c:	4095      	lsls	r5, r2
    596e:	002a      	movs	r2, r5
    5970:	4811      	ldr	r0, [pc, #68]	; (59b8 <__aeabi_i2f+0x94>)
    5972:	4002      	ands	r2, r0
    5974:	076e      	lsls	r6, r5, #29
    5976:	d009      	beq.n	598c <__aeabi_i2f+0x68>
    5978:	260f      	movs	r6, #15
    597a:	4035      	ands	r5, r6
    597c:	2d04      	cmp	r5, #4
    597e:	d005      	beq.n	598c <__aeabi_i2f+0x68>
    5980:	3204      	adds	r2, #4
    5982:	0155      	lsls	r5, r2, #5
    5984:	d502      	bpl.n	598c <__aeabi_i2f+0x68>
    5986:	239f      	movs	r3, #159	; 0x9f
    5988:	4002      	ands	r2, r0
    598a:	1a5b      	subs	r3, r3, r1
    598c:	0192      	lsls	r2, r2, #6
    598e:	0a55      	lsrs	r5, r2, #9
    5990:	b2d8      	uxtb	r0, r3
    5992:	e7e1      	b.n	5958 <__aeabi_i2f+0x34>
    5994:	2205      	movs	r2, #5
    5996:	1a12      	subs	r2, r2, r0
    5998:	0028      	movs	r0, r5
    599a:	40d0      	lsrs	r0, r2
    599c:	0002      	movs	r2, r0
    599e:	0008      	movs	r0, r1
    59a0:	301b      	adds	r0, #27
    59a2:	4085      	lsls	r5, r0
    59a4:	0028      	movs	r0, r5
    59a6:	1e45      	subs	r5, r0, #1
    59a8:	41a8      	sbcs	r0, r5
    59aa:	4302      	orrs	r2, r0
    59ac:	0015      	movs	r5, r2
    59ae:	e7de      	b.n	596e <__aeabi_i2f+0x4a>
    59b0:	026d      	lsls	r5, r5, #9
    59b2:	2096      	movs	r0, #150	; 0x96
    59b4:	0a6d      	lsrs	r5, r5, #9
    59b6:	e7cf      	b.n	5958 <__aeabi_i2f+0x34>
    59b8:	fbffffff 	.word	0xfbffffff

000059bc <__aeabi_ui2f>:
    59bc:	b570      	push	{r4, r5, r6, lr}
    59be:	1e04      	subs	r4, r0, #0
    59c0:	d00e      	beq.n	59e0 <__aeabi_ui2f+0x24>
    59c2:	f000 f83d 	bl	5a40 <__clzsi2>
    59c6:	239e      	movs	r3, #158	; 0x9e
    59c8:	0001      	movs	r1, r0
    59ca:	1a1b      	subs	r3, r3, r0
    59cc:	2b96      	cmp	r3, #150	; 0x96
    59ce:	dc0c      	bgt.n	59ea <__aeabi_ui2f+0x2e>
    59d0:	2808      	cmp	r0, #8
    59d2:	d02f      	beq.n	5a34 <__aeabi_ui2f+0x78>
    59d4:	3908      	subs	r1, #8
    59d6:	408c      	lsls	r4, r1
    59d8:	0264      	lsls	r4, r4, #9
    59da:	0a64      	lsrs	r4, r4, #9
    59dc:	b2d8      	uxtb	r0, r3
    59de:	e001      	b.n	59e4 <__aeabi_ui2f+0x28>
    59e0:	2000      	movs	r0, #0
    59e2:	2400      	movs	r4, #0
    59e4:	05c0      	lsls	r0, r0, #23
    59e6:	4320      	orrs	r0, r4
    59e8:	bd70      	pop	{r4, r5, r6, pc}
    59ea:	2b99      	cmp	r3, #153	; 0x99
    59ec:	dc16      	bgt.n	5a1c <__aeabi_ui2f+0x60>
    59ee:	1f42      	subs	r2, r0, #5
    59f0:	2805      	cmp	r0, #5
    59f2:	d000      	beq.n	59f6 <__aeabi_ui2f+0x3a>
    59f4:	4094      	lsls	r4, r2
    59f6:	0022      	movs	r2, r4
    59f8:	4810      	ldr	r0, [pc, #64]	; (5a3c <__aeabi_ui2f+0x80>)
    59fa:	4002      	ands	r2, r0
    59fc:	0765      	lsls	r5, r4, #29
    59fe:	d009      	beq.n	5a14 <__aeabi_ui2f+0x58>
    5a00:	250f      	movs	r5, #15
    5a02:	402c      	ands	r4, r5
    5a04:	2c04      	cmp	r4, #4
    5a06:	d005      	beq.n	5a14 <__aeabi_ui2f+0x58>
    5a08:	3204      	adds	r2, #4
    5a0a:	0154      	lsls	r4, r2, #5
    5a0c:	d502      	bpl.n	5a14 <__aeabi_ui2f+0x58>
    5a0e:	239f      	movs	r3, #159	; 0x9f
    5a10:	4002      	ands	r2, r0
    5a12:	1a5b      	subs	r3, r3, r1
    5a14:	0192      	lsls	r2, r2, #6
    5a16:	0a54      	lsrs	r4, r2, #9
    5a18:	b2d8      	uxtb	r0, r3
    5a1a:	e7e3      	b.n	59e4 <__aeabi_ui2f+0x28>
    5a1c:	0002      	movs	r2, r0
    5a1e:	0020      	movs	r0, r4
    5a20:	321b      	adds	r2, #27
    5a22:	4090      	lsls	r0, r2
    5a24:	0002      	movs	r2, r0
    5a26:	1e50      	subs	r0, r2, #1
    5a28:	4182      	sbcs	r2, r0
    5a2a:	2005      	movs	r0, #5
    5a2c:	1a40      	subs	r0, r0, r1
    5a2e:	40c4      	lsrs	r4, r0
    5a30:	4314      	orrs	r4, r2
    5a32:	e7e0      	b.n	59f6 <__aeabi_ui2f+0x3a>
    5a34:	0264      	lsls	r4, r4, #9
    5a36:	2096      	movs	r0, #150	; 0x96
    5a38:	0a64      	lsrs	r4, r4, #9
    5a3a:	e7d3      	b.n	59e4 <__aeabi_ui2f+0x28>
    5a3c:	fbffffff 	.word	0xfbffffff

00005a40 <__clzsi2>:
    5a40:	211c      	movs	r1, #28
    5a42:	2301      	movs	r3, #1
    5a44:	041b      	lsls	r3, r3, #16
    5a46:	4298      	cmp	r0, r3
    5a48:	d301      	bcc.n	5a4e <__clzsi2+0xe>
    5a4a:	0c00      	lsrs	r0, r0, #16
    5a4c:	3910      	subs	r1, #16
    5a4e:	0a1b      	lsrs	r3, r3, #8
    5a50:	4298      	cmp	r0, r3
    5a52:	d301      	bcc.n	5a58 <__clzsi2+0x18>
    5a54:	0a00      	lsrs	r0, r0, #8
    5a56:	3908      	subs	r1, #8
    5a58:	091b      	lsrs	r3, r3, #4
    5a5a:	4298      	cmp	r0, r3
    5a5c:	d301      	bcc.n	5a62 <__clzsi2+0x22>
    5a5e:	0900      	lsrs	r0, r0, #4
    5a60:	3904      	subs	r1, #4
    5a62:	a202      	add	r2, pc, #8	; (adr r2, 5a6c <__clzsi2+0x2c>)
    5a64:	5c10      	ldrb	r0, [r2, r0]
    5a66:	1840      	adds	r0, r0, r1
    5a68:	4770      	bx	lr
    5a6a:	46c0      	nop			; (mov r8, r8)
    5a6c:	02020304 	.word	0x02020304
    5a70:	01010101 	.word	0x01010101
	...

00005a7c <memset>:
    5a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a7e:	0005      	movs	r5, r0
    5a80:	0783      	lsls	r3, r0, #30
    5a82:	d049      	beq.n	5b18 <memset+0x9c>
    5a84:	1e54      	subs	r4, r2, #1
    5a86:	2a00      	cmp	r2, #0
    5a88:	d045      	beq.n	5b16 <memset+0x9a>
    5a8a:	0003      	movs	r3, r0
    5a8c:	2603      	movs	r6, #3
    5a8e:	b2ca      	uxtb	r2, r1
    5a90:	e002      	b.n	5a98 <memset+0x1c>
    5a92:	3501      	adds	r5, #1
    5a94:	3c01      	subs	r4, #1
    5a96:	d33e      	bcc.n	5b16 <memset+0x9a>
    5a98:	3301      	adds	r3, #1
    5a9a:	702a      	strb	r2, [r5, #0]
    5a9c:	4233      	tst	r3, r6
    5a9e:	d1f8      	bne.n	5a92 <memset+0x16>
    5aa0:	2c03      	cmp	r4, #3
    5aa2:	d930      	bls.n	5b06 <memset+0x8a>
    5aa4:	22ff      	movs	r2, #255	; 0xff
    5aa6:	400a      	ands	r2, r1
    5aa8:	0215      	lsls	r5, r2, #8
    5aaa:	18ad      	adds	r5, r5, r2
    5aac:	042a      	lsls	r2, r5, #16
    5aae:	18ad      	adds	r5, r5, r2
    5ab0:	2c0f      	cmp	r4, #15
    5ab2:	d934      	bls.n	5b1e <memset+0xa2>
    5ab4:	0027      	movs	r7, r4
    5ab6:	3f10      	subs	r7, #16
    5ab8:	093f      	lsrs	r7, r7, #4
    5aba:	013e      	lsls	r6, r7, #4
    5abc:	46b4      	mov	ip, r6
    5abe:	001e      	movs	r6, r3
    5ac0:	001a      	movs	r2, r3
    5ac2:	3610      	adds	r6, #16
    5ac4:	4466      	add	r6, ip
    5ac6:	6015      	str	r5, [r2, #0]
    5ac8:	6055      	str	r5, [r2, #4]
    5aca:	6095      	str	r5, [r2, #8]
    5acc:	60d5      	str	r5, [r2, #12]
    5ace:	3210      	adds	r2, #16
    5ad0:	4296      	cmp	r6, r2
    5ad2:	d1f8      	bne.n	5ac6 <memset+0x4a>
    5ad4:	3701      	adds	r7, #1
    5ad6:	013f      	lsls	r7, r7, #4
    5ad8:	19db      	adds	r3, r3, r7
    5ada:	270f      	movs	r7, #15
    5adc:	220c      	movs	r2, #12
    5ade:	4027      	ands	r7, r4
    5ae0:	4022      	ands	r2, r4
    5ae2:	003c      	movs	r4, r7
    5ae4:	2a00      	cmp	r2, #0
    5ae6:	d00e      	beq.n	5b06 <memset+0x8a>
    5ae8:	1f3e      	subs	r6, r7, #4
    5aea:	08b6      	lsrs	r6, r6, #2
    5aec:	00b4      	lsls	r4, r6, #2
    5aee:	46a4      	mov	ip, r4
    5af0:	001a      	movs	r2, r3
    5af2:	1d1c      	adds	r4, r3, #4
    5af4:	4464      	add	r4, ip
    5af6:	c220      	stmia	r2!, {r5}
    5af8:	42a2      	cmp	r2, r4
    5afa:	d1fc      	bne.n	5af6 <memset+0x7a>
    5afc:	2403      	movs	r4, #3
    5afe:	3601      	adds	r6, #1
    5b00:	00b6      	lsls	r6, r6, #2
    5b02:	199b      	adds	r3, r3, r6
    5b04:	403c      	ands	r4, r7
    5b06:	2c00      	cmp	r4, #0
    5b08:	d005      	beq.n	5b16 <memset+0x9a>
    5b0a:	b2c9      	uxtb	r1, r1
    5b0c:	191c      	adds	r4, r3, r4
    5b0e:	7019      	strb	r1, [r3, #0]
    5b10:	3301      	adds	r3, #1
    5b12:	429c      	cmp	r4, r3
    5b14:	d1fb      	bne.n	5b0e <memset+0x92>
    5b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b18:	0003      	movs	r3, r0
    5b1a:	0014      	movs	r4, r2
    5b1c:	e7c0      	b.n	5aa0 <memset+0x24>
    5b1e:	0027      	movs	r7, r4
    5b20:	e7e2      	b.n	5ae8 <memset+0x6c>
    5b22:	46c0      	nop			; (mov r8, r8)

00005b24 <__libc_init_array>:
    5b24:	b570      	push	{r4, r5, r6, lr}
    5b26:	4b0d      	ldr	r3, [pc, #52]	; (5b5c <__libc_init_array+0x38>)
    5b28:	4d0d      	ldr	r5, [pc, #52]	; (5b60 <__libc_init_array+0x3c>)
    5b2a:	1b5e      	subs	r6, r3, r5
    5b2c:	10b6      	asrs	r6, r6, #2
    5b2e:	42ab      	cmp	r3, r5
    5b30:	d005      	beq.n	5b3e <__libc_init_array+0x1a>
    5b32:	2400      	movs	r4, #0
    5b34:	cd08      	ldmia	r5!, {r3}
    5b36:	3401      	adds	r4, #1
    5b38:	4798      	blx	r3
    5b3a:	42a6      	cmp	r6, r4
    5b3c:	d8fa      	bhi.n	5b34 <__libc_init_array+0x10>
    5b3e:	f000 fc7d 	bl	643c <_init>
    5b42:	4b08      	ldr	r3, [pc, #32]	; (5b64 <__libc_init_array+0x40>)
    5b44:	4d08      	ldr	r5, [pc, #32]	; (5b68 <__libc_init_array+0x44>)
    5b46:	1b5e      	subs	r6, r3, r5
    5b48:	10b6      	asrs	r6, r6, #2
    5b4a:	42ab      	cmp	r3, r5
    5b4c:	d005      	beq.n	5b5a <__libc_init_array+0x36>
    5b4e:	2400      	movs	r4, #0
    5b50:	cd08      	ldmia	r5!, {r3}
    5b52:	3401      	adds	r4, #1
    5b54:	4798      	blx	r3
    5b56:	42a6      	cmp	r6, r4
    5b58:	d8fa      	bhi.n	5b50 <__libc_init_array+0x2c>
    5b5a:	bd70      	pop	{r4, r5, r6, pc}
    5b5c:	00006448 	.word	0x00006448
    5b60:	00006448 	.word	0x00006448
    5b64:	00006450 	.word	0x00006450
    5b68:	00006448 	.word	0x00006448

00005b6c <__retarget_lock_acquire_recursive>:
    5b6c:	4770      	bx	lr
    5b6e:	46c0      	nop			; (mov r8, r8)

00005b70 <__retarget_lock_release_recursive>:
    5b70:	4770      	bx	lr
    5b72:	46c0      	nop			; (mov r8, r8)

00005b74 <memcpy>:
    5b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b76:	0005      	movs	r5, r0
    5b78:	2a0f      	cmp	r2, #15
    5b7a:	d933      	bls.n	5be4 <memcpy+0x70>
    5b7c:	2403      	movs	r4, #3
    5b7e:	0003      	movs	r3, r0
    5b80:	0026      	movs	r6, r4
    5b82:	430b      	orrs	r3, r1
    5b84:	401e      	ands	r6, r3
    5b86:	421c      	tst	r4, r3
    5b88:	d137      	bne.n	5bfa <memcpy+0x86>
    5b8a:	0015      	movs	r5, r2
    5b8c:	3d10      	subs	r5, #16
    5b8e:	092d      	lsrs	r5, r5, #4
    5b90:	0003      	movs	r3, r0
    5b92:	000c      	movs	r4, r1
    5b94:	46ac      	mov	ip, r5
    5b96:	012f      	lsls	r7, r5, #4
    5b98:	183f      	adds	r7, r7, r0
    5b9a:	6865      	ldr	r5, [r4, #4]
    5b9c:	605d      	str	r5, [r3, #4]
    5b9e:	68a5      	ldr	r5, [r4, #8]
    5ba0:	609d      	str	r5, [r3, #8]
    5ba2:	68e5      	ldr	r5, [r4, #12]
    5ba4:	60dd      	str	r5, [r3, #12]
    5ba6:	6825      	ldr	r5, [r4, #0]
    5ba8:	3410      	adds	r4, #16
    5baa:	601d      	str	r5, [r3, #0]
    5bac:	001d      	movs	r5, r3
    5bae:	3310      	adds	r3, #16
    5bb0:	42bd      	cmp	r5, r7
    5bb2:	d1f2      	bne.n	5b9a <memcpy+0x26>
    5bb4:	4665      	mov	r5, ip
    5bb6:	230f      	movs	r3, #15
    5bb8:	240c      	movs	r4, #12
    5bba:	3501      	adds	r5, #1
    5bbc:	012d      	lsls	r5, r5, #4
    5bbe:	1949      	adds	r1, r1, r5
    5bc0:	4013      	ands	r3, r2
    5bc2:	1945      	adds	r5, r0, r5
    5bc4:	4214      	tst	r4, r2
    5bc6:	d01a      	beq.n	5bfe <memcpy+0x8a>
    5bc8:	598c      	ldr	r4, [r1, r6]
    5bca:	51ac      	str	r4, [r5, r6]
    5bcc:	3604      	adds	r6, #4
    5bce:	1b9c      	subs	r4, r3, r6
    5bd0:	2c03      	cmp	r4, #3
    5bd2:	d8f9      	bhi.n	5bc8 <memcpy+0x54>
    5bd4:	3b04      	subs	r3, #4
    5bd6:	089b      	lsrs	r3, r3, #2
    5bd8:	3301      	adds	r3, #1
    5bda:	009b      	lsls	r3, r3, #2
    5bdc:	18ed      	adds	r5, r5, r3
    5bde:	18c9      	adds	r1, r1, r3
    5be0:	2303      	movs	r3, #3
    5be2:	401a      	ands	r2, r3
    5be4:	1e56      	subs	r6, r2, #1
    5be6:	2a00      	cmp	r2, #0
    5be8:	d006      	beq.n	5bf8 <memcpy+0x84>
    5bea:	2300      	movs	r3, #0
    5bec:	5ccc      	ldrb	r4, [r1, r3]
    5bee:	001a      	movs	r2, r3
    5bf0:	54ec      	strb	r4, [r5, r3]
    5bf2:	3301      	adds	r3, #1
    5bf4:	4296      	cmp	r6, r2
    5bf6:	d1f9      	bne.n	5bec <memcpy+0x78>
    5bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bfa:	1e56      	subs	r6, r2, #1
    5bfc:	e7f5      	b.n	5bea <memcpy+0x76>
    5bfe:	001a      	movs	r2, r3
    5c00:	e7f0      	b.n	5be4 <memcpy+0x70>
    5c02:	46c0      	nop			; (mov r8, r8)

00005c04 <strlen>:
    5c04:	b510      	push	{r4, lr}
    5c06:	0783      	lsls	r3, r0, #30
    5c08:	d00a      	beq.n	5c20 <strlen+0x1c>
    5c0a:	0003      	movs	r3, r0
    5c0c:	2103      	movs	r1, #3
    5c0e:	e002      	b.n	5c16 <strlen+0x12>
    5c10:	3301      	adds	r3, #1
    5c12:	420b      	tst	r3, r1
    5c14:	d005      	beq.n	5c22 <strlen+0x1e>
    5c16:	781a      	ldrb	r2, [r3, #0]
    5c18:	2a00      	cmp	r2, #0
    5c1a:	d1f9      	bne.n	5c10 <strlen+0xc>
    5c1c:	1a18      	subs	r0, r3, r0
    5c1e:	bd10      	pop	{r4, pc}
    5c20:	0003      	movs	r3, r0
    5c22:	6819      	ldr	r1, [r3, #0]
    5c24:	4a0c      	ldr	r2, [pc, #48]	; (5c58 <strlen+0x54>)
    5c26:	4c0d      	ldr	r4, [pc, #52]	; (5c5c <strlen+0x58>)
    5c28:	188a      	adds	r2, r1, r2
    5c2a:	438a      	bics	r2, r1
    5c2c:	4222      	tst	r2, r4
    5c2e:	d10f      	bne.n	5c50 <strlen+0x4c>
    5c30:	6859      	ldr	r1, [r3, #4]
    5c32:	4a09      	ldr	r2, [pc, #36]	; (5c58 <strlen+0x54>)
    5c34:	3304      	adds	r3, #4
    5c36:	188a      	adds	r2, r1, r2
    5c38:	438a      	bics	r2, r1
    5c3a:	4222      	tst	r2, r4
    5c3c:	d108      	bne.n	5c50 <strlen+0x4c>
    5c3e:	6859      	ldr	r1, [r3, #4]
    5c40:	4a05      	ldr	r2, [pc, #20]	; (5c58 <strlen+0x54>)
    5c42:	3304      	adds	r3, #4
    5c44:	188a      	adds	r2, r1, r2
    5c46:	438a      	bics	r2, r1
    5c48:	4222      	tst	r2, r4
    5c4a:	d0f1      	beq.n	5c30 <strlen+0x2c>
    5c4c:	e000      	b.n	5c50 <strlen+0x4c>
    5c4e:	3301      	adds	r3, #1
    5c50:	781a      	ldrb	r2, [r3, #0]
    5c52:	2a00      	cmp	r2, #0
    5c54:	d1fb      	bne.n	5c4e <strlen+0x4a>
    5c56:	e7e1      	b.n	5c1c <strlen+0x18>
    5c58:	fefefeff 	.word	0xfefefeff
    5c5c:	80808080 	.word	0x80808080

00005c60 <register_fini>:
    5c60:	4b03      	ldr	r3, [pc, #12]	; (5c70 <register_fini+0x10>)
    5c62:	b510      	push	{r4, lr}
    5c64:	2b00      	cmp	r3, #0
    5c66:	d002      	beq.n	5c6e <register_fini+0xe>
    5c68:	4802      	ldr	r0, [pc, #8]	; (5c74 <register_fini+0x14>)
    5c6a:	f000 f805 	bl	5c78 <atexit>
    5c6e:	bd10      	pop	{r4, pc}
    5c70:	00000000 	.word	0x00000000
    5c74:	00005c89 	.word	0x00005c89

00005c78 <atexit>:
    5c78:	b510      	push	{r4, lr}
    5c7a:	0001      	movs	r1, r0
    5c7c:	2300      	movs	r3, #0
    5c7e:	2200      	movs	r2, #0
    5c80:	2000      	movs	r0, #0
    5c82:	f000 f815 	bl	5cb0 <__register_exitproc>
    5c86:	bd10      	pop	{r4, pc}

00005c88 <__libc_fini_array>:
    5c88:	b570      	push	{r4, r5, r6, lr}
    5c8a:	4c07      	ldr	r4, [pc, #28]	; (5ca8 <__libc_fini_array+0x20>)
    5c8c:	4d07      	ldr	r5, [pc, #28]	; (5cac <__libc_fini_array+0x24>)
    5c8e:	1b64      	subs	r4, r4, r5
    5c90:	10a4      	asrs	r4, r4, #2
    5c92:	d005      	beq.n	5ca0 <__libc_fini_array+0x18>
    5c94:	3c01      	subs	r4, #1
    5c96:	00a3      	lsls	r3, r4, #2
    5c98:	58eb      	ldr	r3, [r5, r3]
    5c9a:	4798      	blx	r3
    5c9c:	2c00      	cmp	r4, #0
    5c9e:	d1f9      	bne.n	5c94 <__libc_fini_array+0xc>
    5ca0:	f000 fbd6 	bl	6450 <_fini>
    5ca4:	bd70      	pop	{r4, r5, r6, pc}
    5ca6:	46c0      	nop			; (mov r8, r8)
    5ca8:	00006460 	.word	0x00006460
    5cac:	0000645c 	.word	0x0000645c

00005cb0 <__register_exitproc>:
    5cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cb2:	46d6      	mov	lr, sl
    5cb4:	464f      	mov	r7, r9
    5cb6:	4646      	mov	r6, r8
    5cb8:	4698      	mov	r8, r3
    5cba:	4b22      	ldr	r3, [pc, #136]	; (5d44 <__register_exitproc+0x94>)
    5cbc:	b5c0      	push	{r6, r7, lr}
    5cbe:	0006      	movs	r6, r0
    5cc0:	6818      	ldr	r0, [r3, #0]
    5cc2:	4699      	mov	r9, r3
    5cc4:	000f      	movs	r7, r1
    5cc6:	4692      	mov	sl, r2
    5cc8:	f7ff ff50 	bl	5b6c <__retarget_lock_acquire_recursive>
    5ccc:	4b1e      	ldr	r3, [pc, #120]	; (5d48 <__register_exitproc+0x98>)
    5cce:	681d      	ldr	r5, [r3, #0]
    5cd0:	2d00      	cmp	r5, #0
    5cd2:	d02d      	beq.n	5d30 <__register_exitproc+0x80>
    5cd4:	686c      	ldr	r4, [r5, #4]
    5cd6:	2c1f      	cmp	r4, #31
    5cd8:	dc2d      	bgt.n	5d36 <__register_exitproc+0x86>
    5cda:	2e00      	cmp	r6, #0
    5cdc:	d10e      	bne.n	5cfc <__register_exitproc+0x4c>
    5cde:	1c63      	adds	r3, r4, #1
    5ce0:	606b      	str	r3, [r5, #4]
    5ce2:	464b      	mov	r3, r9
    5ce4:	3402      	adds	r4, #2
    5ce6:	00a4      	lsls	r4, r4, #2
    5ce8:	6818      	ldr	r0, [r3, #0]
    5cea:	5167      	str	r7, [r4, r5]
    5cec:	f7ff ff40 	bl	5b70 <__retarget_lock_release_recursive>
    5cf0:	2000      	movs	r0, #0
    5cf2:	bce0      	pop	{r5, r6, r7}
    5cf4:	46ba      	mov	sl, r7
    5cf6:	46b1      	mov	r9, r6
    5cf8:	46a8      	mov	r8, r5
    5cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cfc:	2288      	movs	r2, #136	; 0x88
    5cfe:	4651      	mov	r1, sl
    5d00:	0028      	movs	r0, r5
    5d02:	00a3      	lsls	r3, r4, #2
    5d04:	18eb      	adds	r3, r5, r3
    5d06:	5099      	str	r1, [r3, r2]
    5d08:	3a87      	subs	r2, #135	; 0x87
    5d0a:	40a2      	lsls	r2, r4
    5d0c:	3089      	adds	r0, #137	; 0x89
    5d0e:	30ff      	adds	r0, #255	; 0xff
    5d10:	6801      	ldr	r1, [r0, #0]
    5d12:	4311      	orrs	r1, r2
    5d14:	6001      	str	r1, [r0, #0]
    5d16:	2184      	movs	r1, #132	; 0x84
    5d18:	4640      	mov	r0, r8
    5d1a:	0049      	lsls	r1, r1, #1
    5d1c:	5058      	str	r0, [r3, r1]
    5d1e:	2e02      	cmp	r6, #2
    5d20:	d1dd      	bne.n	5cde <__register_exitproc+0x2e>
    5d22:	0029      	movs	r1, r5
    5d24:	318d      	adds	r1, #141	; 0x8d
    5d26:	31ff      	adds	r1, #255	; 0xff
    5d28:	680b      	ldr	r3, [r1, #0]
    5d2a:	4313      	orrs	r3, r2
    5d2c:	600b      	str	r3, [r1, #0]
    5d2e:	e7d6      	b.n	5cde <__register_exitproc+0x2e>
    5d30:	4d06      	ldr	r5, [pc, #24]	; (5d4c <__register_exitproc+0x9c>)
    5d32:	601d      	str	r5, [r3, #0]
    5d34:	e7ce      	b.n	5cd4 <__register_exitproc+0x24>
    5d36:	464b      	mov	r3, r9
    5d38:	6818      	ldr	r0, [r3, #0]
    5d3a:	f7ff ff19 	bl	5b70 <__retarget_lock_release_recursive>
    5d3e:	2001      	movs	r0, #1
    5d40:	4240      	negs	r0, r0
    5d42:	e7d6      	b.n	5cf2 <__register_exitproc+0x42>
    5d44:	200000fc 	.word	0x200000fc
    5d48:	20000868 	.word	0x20000868
    5d4c:	2000086c 	.word	0x2000086c
    5d50:	000004d0 	.word	0x000004d0
    5d54:	000004a6 	.word	0x000004a6
    5d58:	000004ac 	.word	0x000004ac
    5d5c:	000004b2 	.word	0x000004b2
    5d60:	000004be 	.word	0x000004be
    5d64:	000004b8 	.word	0x000004b8
    5d68:	000004c4 	.word	0x000004c4
    5d6c:	000004ca 	.word	0x000004ca
    5d70:	41564e49 	.word	0x41564e49
    5d74:	0044494c 	.word	0x0044494c
    5d78:	20776152 	.word	0x20776152
    5d7c:	69442058 	.word	0x69442058
    5d80:	74636572 	.word	0x74636572
    5d84:	206e6f69 	.word	0x206e6f69
    5d88:	65636341 	.word	0x65636341
    5d8c:	6172656c 	.word	0x6172656c
    5d90:	6e6f6974 	.word	0x6e6f6974
    5d94:	00000000 	.word	0x00000000
    5d98:	20776152 	.word	0x20776152
    5d9c:	69442059 	.word	0x69442059
    5da0:	74636572 	.word	0x74636572
    5da4:	206e6f69 	.word	0x206e6f69
    5da8:	65636341 	.word	0x65636341
    5dac:	6172656c 	.word	0x6172656c
    5db0:	6e6f6974 	.word	0x6e6f6974
    5db4:	00000000 	.word	0x00000000
    5db8:	20776152 	.word	0x20776152
    5dbc:	6944205a 	.word	0x6944205a
    5dc0:	74636572 	.word	0x74636572
    5dc4:	206e6f69 	.word	0x206e6f69
    5dc8:	65636341 	.word	0x65636341
    5dcc:	6172656c 	.word	0x6172656c
    5dd0:	6e6f6974 	.word	0x6e6f6974
    5dd4:	00000000 	.word	0x00000000
    5dd8:	20776152 	.word	0x20776152
    5ddc:	78412058 	.word	0x78412058
    5de0:	41207369 	.word	0x41207369
    5de4:	6c75676e 	.word	0x6c75676e
    5de8:	56207261 	.word	0x56207261
    5dec:	636f6c65 	.word	0x636f6c65
    5df0:	00797469 	.word	0x00797469
    5df4:	20776152 	.word	0x20776152
    5df8:	78412059 	.word	0x78412059
    5dfc:	41207369 	.word	0x41207369
    5e00:	6c75676e 	.word	0x6c75676e
    5e04:	56207261 	.word	0x56207261
    5e08:	636f6c65 	.word	0x636f6c65
    5e0c:	00797469 	.word	0x00797469
    5e10:	20776152 	.word	0x20776152
    5e14:	7841205a 	.word	0x7841205a
    5e18:	41207369 	.word	0x41207369
    5e1c:	6c75676e 	.word	0x6c75676e
    5e20:	56207261 	.word	0x56207261
    5e24:	636f6c65 	.word	0x636f6c65
    5e28:	00797469 	.word	0x00797469
    5e2c:	696c6143 	.word	0x696c6143
    5e30:	74617262 	.word	0x74617262
    5e34:	58206465 	.word	0x58206465
    5e38:	72694420 	.word	0x72694420
    5e3c:	69746365 	.word	0x69746365
    5e40:	41206e6f 	.word	0x41206e6f
    5e44:	6c656363 	.word	0x6c656363
    5e48:	74617265 	.word	0x74617265
    5e4c:	006e6f69 	.word	0x006e6f69
    5e50:	696c6143 	.word	0x696c6143
    5e54:	74617262 	.word	0x74617262
    5e58:	59206465 	.word	0x59206465
    5e5c:	72694420 	.word	0x72694420
    5e60:	69746365 	.word	0x69746365
    5e64:	41206e6f 	.word	0x41206e6f
    5e68:	6c656363 	.word	0x6c656363
    5e6c:	74617265 	.word	0x74617265
    5e70:	006e6f69 	.word	0x006e6f69
    5e74:	696c6143 	.word	0x696c6143
    5e78:	74617262 	.word	0x74617262
    5e7c:	5a206465 	.word	0x5a206465
    5e80:	72694420 	.word	0x72694420
    5e84:	69746365 	.word	0x69746365
    5e88:	41206e6f 	.word	0x41206e6f
    5e8c:	6c656363 	.word	0x6c656363
    5e90:	74617265 	.word	0x74617265
    5e94:	006e6f69 	.word	0x006e6f69
    5e98:	696c6143 	.word	0x696c6143
    5e9c:	74617262 	.word	0x74617262
    5ea0:	58206465 	.word	0x58206465
    5ea4:	69784120 	.word	0x69784120
    5ea8:	6e412073 	.word	0x6e412073
    5eac:	616c7567 	.word	0x616c7567
    5eb0:	65562072 	.word	0x65562072
    5eb4:	69636f6c 	.word	0x69636f6c
    5eb8:	00007974 	.word	0x00007974
    5ebc:	696c6143 	.word	0x696c6143
    5ec0:	74617262 	.word	0x74617262
    5ec4:	59206465 	.word	0x59206465
    5ec8:	69784120 	.word	0x69784120
    5ecc:	6e412073 	.word	0x6e412073
    5ed0:	616c7567 	.word	0x616c7567
    5ed4:	65562072 	.word	0x65562072
    5ed8:	69636f6c 	.word	0x69636f6c
    5edc:	00007974 	.word	0x00007974
    5ee0:	696c6143 	.word	0x696c6143
    5ee4:	74617262 	.word	0x74617262
    5ee8:	5a206465 	.word	0x5a206465
    5eec:	69784120 	.word	0x69784120
    5ef0:	6e412073 	.word	0x6e412073
    5ef4:	616c7567 	.word	0x616c7567
    5ef8:	65562072 	.word	0x65562072
    5efc:	69636f6c 	.word	0x69636f6c
    5f00:	00007974 	.word	0x00007974
    5f04:	75626544 	.word	0x75626544
    5f08:	6e492067 	.word	0x6e492067
    5f0c:	00312074 	.word	0x00312074
    5f10:	52504545 	.word	0x52504545
    5f14:	4c204d4f 	.word	0x4c204d4f
    5f18:	756f7961 	.word	0x756f7961
    5f1c:	61482074 	.word	0x61482074
    5f20:	00006873 	.word	0x00006873
    5f24:	65776f50 	.word	0x65776f50
    5f28:	79432072 	.word	0x79432072
    5f2c:	73656c63 	.word	0x73656c63
    5f30:	00000000 	.word	0x00000000
    5f34:	43204352 	.word	0x43204352
    5f38:	6e6e6168 	.word	0x6e6e6168
    5f3c:	31206c65 	.word	0x31206c65
    5f40:	00000000 	.word	0x00000000
    5f44:	43204352 	.word	0x43204352
    5f48:	6e6e6168 	.word	0x6e6e6168
    5f4c:	32206c65 	.word	0x32206c65
    5f50:	00000000 	.word	0x00000000
    5f54:	43204352 	.word	0x43204352
    5f58:	6e6e6168 	.word	0x6e6e6168
    5f5c:	33206c65 	.word	0x33206c65
    5f60:	00000000 	.word	0x00000000
    5f64:	43204352 	.word	0x43204352
    5f68:	6e6e6168 	.word	0x6e6e6168
    5f6c:	34206c65 	.word	0x34206c65
    5f70:	00000000 	.word	0x00000000
    5f74:	43204352 	.word	0x43204352
    5f78:	6e6e6168 	.word	0x6e6e6168
    5f7c:	35206c65 	.word	0x35206c65
    5f80:	00000000 	.word	0x00000000
    5f84:	43204352 	.word	0x43204352
    5f88:	6e6e6168 	.word	0x6e6e6168
    5f8c:	36206c65 	.word	0x36206c65
    5f90:	00000000 	.word	0x00000000
    5f94:	43204352 	.word	0x43204352
    5f98:	6e6e6168 	.word	0x6e6e6168
    5f9c:	37206c65 	.word	0x37206c65
    5fa0:	00000000 	.word	0x00000000
    5fa4:	43204352 	.word	0x43204352
    5fa8:	6e6e6168 	.word	0x6e6e6168
    5fac:	38206c65 	.word	0x38206c65
    5fb0:	00000000 	.word	0x00000000
    5fb4:	43204352 	.word	0x43204352
    5fb8:	6e6e6168 	.word	0x6e6e6168
    5fbc:	39206c65 	.word	0x39206c65
    5fc0:	00000000 	.word	0x00000000
    5fc4:	43204352 	.word	0x43204352
    5fc8:	6e6e6168 	.word	0x6e6e6168
    5fcc:	31206c65 	.word	0x31206c65
    5fd0:	00000030 	.word	0x00000030
    5fd4:	43204352 	.word	0x43204352
    5fd8:	6e6e6168 	.word	0x6e6e6168
    5fdc:	31206c65 	.word	0x31206c65
    5fe0:	00000031 	.word	0x00000031
    5fe4:	43204352 	.word	0x43204352
    5fe8:	6e6e6168 	.word	0x6e6e6168
    5fec:	31206c65 	.word	0x31206c65
    5ff0:	00000032 	.word	0x00000032
    5ff4:	43204352 	.word	0x43204352
    5ff8:	6e6e6168 	.word	0x6e6e6168
    5ffc:	31206c65 	.word	0x31206c65
    6000:	00000033 	.word	0x00000033
    6004:	43204352 	.word	0x43204352
    6008:	6e6e6168 	.word	0x6e6e6168
    600c:	31206c65 	.word	0x31206c65
    6010:	00000034 	.word	0x00000034
    6014:	43204352 	.word	0x43204352
    6018:	6e6e6168 	.word	0x6e6e6168
    601c:	31206c65 	.word	0x31206c65
    6020:	00000035 	.word	0x00000035
    6024:	43204352 	.word	0x43204352
    6028:	6e6e6168 	.word	0x6e6e6168
    602c:	31206c65 	.word	0x31206c65
    6030:	00000036 	.word	0x00000036
    6034:	61736944 	.word	0x61736944
    6038:	20656c62 	.word	0x20656c62
    603c:	7a7a7542 	.word	0x7a7a7542
    6040:	00007265 	.word	0x00007265
    6044:	61736944 	.word	0x61736944
    6048:	20656c62 	.word	0x20656c62
    604c:	0044454c 	.word	0x0044454c
    6050:	61656c43 	.word	0x61656c43
    6054:	6853206e 	.word	0x6853206e
    6058:	6f647475 	.word	0x6f647475
    605c:	00006e77 	.word	0x00006e77
    6060:	206e7552 	.word	0x206e7552
    6064:	6976614e 	.word	0x6976614e
    6068:	69746167 	.word	0x69746167
    606c:	50206e6f 	.word	0x50206e6f
    6070:	65636f72 	.word	0x65636f72
    6074:	00007373 	.word	0x00007373
    6078:	206e7552 	.word	0x206e7552
    607c:	746e6f43 	.word	0x746e6f43
    6080:	206c6f72 	.word	0x206c6f72
    6084:	636f7250 	.word	0x636f7250
    6088:	00737365 	.word	0x00737365
    608c:	206e7552 	.word	0x206e7552
    6090:	64697547 	.word	0x64697547
    6094:	65636e61 	.word	0x65636e61
    6098:	6f725020 	.word	0x6f725020
    609c:	73736563 	.word	0x73736563
    60a0:	00000000 	.word	0x00000000
    60a4:	52204352 	.word	0x52204352
    60a8:	69656365 	.word	0x69656365
    60ac:	20726576 	.word	0x20726576
    60b0:	6c696166 	.word	0x6c696166
    60b4:	65666173 	.word	0x65666173
    60b8:	00000000 	.word	0x00000000
    60bc:	75626544 	.word	0x75626544
    60c0:	6f422067 	.word	0x6f422067
    60c4:	31206c6f 	.word	0x31206c6f
    60c8:	00000000 	.word	0x00000000
    60cc:	75626544 	.word	0x75626544
    60d0:	6f422067 	.word	0x6f422067
    60d4:	32206c6f 	.word	0x32206c6f
    60d8:	00000000 	.word	0x00000000
    60dc:	40000000 	.word	0x40000000
    60e0:	00000001 	.word	0x00000001
    60e4:	00000f4e 	.word	0x00000f4e
    60e8:	00000f26 	.word	0x00000f26
    60ec:	00000f30 	.word	0x00000f30
    60f0:	00000f3a 	.word	0x00000f3a
    60f4:	00000f44 	.word	0x00000f44
    60f8:	00000fa6 	.word	0x00000fa6
    60fc:	00000f7e 	.word	0x00000f7e
    6100:	00000f88 	.word	0x00000f88
    6104:	00000f92 	.word	0x00000f92
    6108:	00000f9c 	.word	0x00000f9c
    610c:	00000fd6 	.word	0x00000fd6
    6110:	00000fe2 	.word	0x00000fe2
    6114:	00000ff0 	.word	0x00000ff0
    6118:	00000ffe 	.word	0x00000ffe
    611c:	0000100c 	.word	0x0000100c
    6120:	0000105a 	.word	0x0000105a
    6124:	00001062 	.word	0x00001062
    6128:	0000106c 	.word	0x0000106c
    612c:	00001076 	.word	0x00001076
    6130:	00001080 	.word	0x00001080
    6134:	000010be 	.word	0x000010be
    6138:	000010ca 	.word	0x000010ca
    613c:	000010d8 	.word	0x000010d8
    6140:	000010e6 	.word	0x000010e6
    6144:	000010f4 	.word	0x000010f4
    6148:	00001142 	.word	0x00001142
    614c:	0000114a 	.word	0x0000114a
    6150:	00001154 	.word	0x00001154
    6154:	0000115e 	.word	0x0000115e
    6158:	00001168 	.word	0x00001168
    615c:	00001226 	.word	0x00001226
    6160:	0000122e 	.word	0x0000122e
    6164:	0000123e 	.word	0x0000123e
    6168:	0000124e 	.word	0x0000124e
    616c:	0000125e 	.word	0x0000125e
    6170:	000012ce 	.word	0x000012ce
    6174:	000012a6 	.word	0x000012a6
    6178:	000012b0 	.word	0x000012b0
    617c:	000012ba 	.word	0x000012ba
    6180:	000012c4 	.word	0x000012c4

00006184 <uart1_descriptor>:
    6184:	02010302 00000002                       ........

0000618c <uart2_descriptor>:
    618c:	04030504 00000002                       ........

00006194 <uart3_descriptor>:
    6194:	0a090706 00000002                       ........

0000619c <uart4_descriptor>:
    619c:	0c0b0908 00000002 80000000 00000001     ................

000061ac <dma_spi_desc>:
    61ac:	08070100                                 .....

000061b1 <zero>:
    61b1:	                                         ...

000061b4 <crc8tab>:
    61b4:	aa7fd500 54812bfe 8356fc29 7da802d7     .....+.T).V....}
    61c4:	f82d8752 06d379ac d104ae7b 2ffa5085     R.-..y..{....P./
    61d4:	0edb71a4 f0258f5a 27f2588d d90ca673     .q..Z.%..X.'s...
    61e4:	5c8923f6 a277dd08 75a00adf 8b5ef421     .#.\..w....u!.^.
    61f4:	37e2489d c91cb663 1ecb61b4 e0359f4a     .H.7c....a..J.5.
    6204:	65b01acf 9b4ee431 4c9933e6 b267cd18     ...e1.N..3.L..g.
    6214:	9346ec39 6db812c7 ba6fc510 44913bee     9.F....m..o..;.D
    6224:	c114be6b 3fea4095 e83d9742 16c369bc     k....@.?B.=..i..
    6234:	45903aef bb6ec411 6cb913c6 9247ed38     .:.E..n....l8.G.
    6244:	17c268bd e93c9643 3eeb4194 c015bf6a     .h..C.<..A.>j...
    6254:	e1349e4b 1fca60b5 c81db762 36e3499c     K.4..`..b....I.6
    6264:	b366cc19 4d9832e7 9a4fe530 64b11bce     ..f..2.M0.O....d
    6274:	d80da772 26f3598c f1248e5b 0fda70a5     r....Y.&[.$..p..
    6284:	8a5ff520 74a10bde a376dc09 5d8822f7      ._....t..v..".]
    6294:	7ca903d6 8257fd28 55802aff ab7ed401     ...|(.W..*.U..~.
    62a4:	2efb5184 d005af7a 07d278ad f92c8653     .Q..z....x..S.,.
    62b4:	00002570 00002594 00002574 00002578     p%...%..t%..x%..
    62c4:	0000257c 00002580 00002584 0000258a     |%...%...%...%..
    62d4:	00002cc0 00002cd4 00002d9a 00002cd4     .,...,...-...,..
    62e4:	00002d9a 00002ce0 00002cec 00002d9a     .-...,...,...-..
    62f4:	00002d3c 00002d50 00002d9a 00002d7a     <-..P-...-..z-..
    6304:	33323130 37363534 42413938 47464443     0123456789ABCDFG
    6314:	4c4b4a48 51504e4d 56545352 5a595857     HJKLMNPQRSTVWXYZ
    6324:	00000000 6c6e6946 42207965 6e69616c     ....Finley Blain
    6334:	00000065 32434e47 00000000              e...GNC2....

00006340 <language_string>:
    6340:	04090304                                ....

00006344 <device_descriptor>:
    6344:	02000112 400102ef 000e1209 02010200     .......@........
    6354:	                                         ..

00006356 <usb_num_endpoints>:
    6356:	2e2e0003 2d2d2d2e 002e2e2e 39760000     .....---......v9
    6366:	3a080000 3a160000 3a240000 3a320000     ...:...:..$:..2:
    6376:	3a400000 397c0000 00000000 00000000     ..@:..|9........
    6386:	00000000 3c1d0000 00060000               .......<......

00006394 <time_ticks_us_mult>:
    6394:	00000030                                0...

00006398 <time_ticks_ms_mult>:
    6398:	0000bb80                                ....

0000639c <time_ticks_s_mult>:
    639c:	02dc6c00                                .l..

000063a0 <CRC8_LUT_L>:
    63a0:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

000063b0 <CRC8_LUT_H>:
    63b0:	90e07000 5727b7c7 1969f989 deae3e4e     .p....'W..i.N>..
    63c0:	00005146 00005076 0000508e 000050ac     FQ..vP...P...P..
    63d0:	0000508e 000050f0 0000508e 000050ac     .P...P...P...P..
    63e0:	00005076 00005076 000050f0 000050ac     vP..vP...P...P..
    63f0:	00005096 00005096 00005096 000050fa     .P...P...P...P..
    6400:	00005076 00005076 0000508e 00005184     vP..vP...P...Q..
    6410:	0000508e 000050f0 0000508e 00005184     .P...P...P...Q..
    6420:	00005076 00005076 000050f0 00005184     vP..vP...P...Q..
    6430:	00005096 00005096 00005096              .P...P...P..

0000643c <_init>:
    643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    643e:	46c0      	nop			; (mov r8, r8)
    6440:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6442:	bc08      	pop	{r3}
    6444:	469e      	mov	lr, r3
    6446:	4770      	bx	lr

00006448 <__init_array_start>:
    6448:	00005c61 	.word	0x00005c61

0000644c <__frame_dummy_init_array_entry>:
    644c:	0000012d                                -...

00006450 <_fini>:
    6450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6452:	46c0      	nop			; (mov r8, r8)
    6454:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6456:	bc08      	pop	{r3}
    6458:	469e      	mov	lr, r3
    645a:	4770      	bx	lr

0000645c <__do_global_dtors_aux_fini_array_entry>:
    645c:	0101 0000                                   ....
