
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b14  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000058  20000000  00004b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000075c  20000060  00004b80  00020060  2**4
                  ALLOC
  3 .stack        00002004  200007bc  000052dc  00020060  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001921a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00005bc7  00000000  00000000  000392e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 0000639d  00000000  00000000  0003eead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000c50  00000000  00000000  00045250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 00000e63  00000000  00000000  00045ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00008fc4  00000000  00000000  00046d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00016f5f  00000000  00000000  0004fcc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b4418  00000000  00000000  00066c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  000019c8  00000000  00000000  0011b040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  0011ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:

    return true;
}


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
       0:	c0 27 00 20 55 01 00 00 51 01 00 00 51 01 00 00     .'. U...Q...Q...
	...
        rtos_usb_start_read_buffer(buffer, count);
        break;

        case PORT1:
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
        break;
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...

        case PORT2:
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
        break;
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
        
        case PORT3:
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
        break;
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...

        case PORT4:
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
        break;
      5c:	69 37 00 00 51 01 00 00 51 01 00 00 51 01 00 00     i7..Q...Q...Q...
    switch (port) {
      6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      8c:	b9 27 00 00 51 01 00 00 51 01 00 00 51 01 00 00     .'..Q...Q...Q...
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
	uint8_t data1 = spi_command(desc->sercom, 0);
	uint8_t data2 = spi_command(desc->sercom, 0);
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	00004b14 	.word	0x00004b14
      d0:	00004b14 	.word	0x00004b14
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	00004b14 	.word	0x00004b14
      f8:	00004b14 	.word	0x00004b14
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	20000060 	.word	0x20000060
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	00004b14 	.word	0x00004b14

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	20000064 	.word	0x20000064
     14c:	00004b14 	.word	0x00004b14

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	00004b14 	.word	0x00004b14
     1a4:	20000000 	.word	0x20000000
     1a8:	20000058 	.word	0x20000058
     1ac:	20000060 	.word	0x20000060
     1b0:	200007bc 	.word	0x200007bc
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	000046dd 	.word	0x000046dd
     1c4:	00000000 	.word	0x00000000
     1c8:	00002745 	.word	0x00002745

000001cc <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     1cc:	b510      	push	{r4, lr}
     1ce:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     1d0:	2480      	movs	r4, #128	; 0x80
     1d2:	05e4      	lsls	r4, r4, #23
     1d4:	0021      	movs	r1, r4
     1d6:	2001      	movs	r0, #1
     1d8:	4b0a      	ldr	r3, [pc, #40]	; (204 <init_eeprom+0x38>)
     1da:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     1dc:	0021      	movs	r1, r4
     1de:	2001      	movs	r0, #1
     1e0:	4b09      	ldr	r3, [pc, #36]	; (208 <init_eeprom+0x3c>)
     1e2:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     1e4:	ab02      	add	r3, sp, #8
     1e6:	4909      	ldr	r1, [pc, #36]	; (20c <init_eeprom+0x40>)
     1e8:	680a      	ldr	r2, [r1, #0]
     1ea:	9202      	str	r2, [sp, #8]
     1ec:	7909      	ldrb	r1, [r1, #4]
     1ee:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     1f0:	4807      	ldr	r0, [pc, #28]	; (210 <init_eeprom+0x44>)
     1f2:	2180      	movs	r1, #128	; 0x80
     1f4:	0209      	lsls	r1, r1, #8
     1f6:	9100      	str	r1, [sp, #0]
     1f8:	9b03      	ldr	r3, [sp, #12]
     1fa:	4906      	ldr	r1, [pc, #24]	; (214 <init_eeprom+0x48>)
     1fc:	4c06      	ldr	r4, [pc, #24]	; (218 <init_eeprom+0x4c>)
     1fe:	47a0      	blx	r4
}
     200:	b004      	add	sp, #16
     202:	bd10      	pop	{r4, pc}
     204:	000014e5 	.word	0x000014e5
     208:	000014d5 	.word	0x000014d5
     20c:	00004908 	.word	0x00004908
     210:	200000b8 	.word	0x200000b8
     214:	42001400 	.word	0x42001400
     218:	00000d85 	.word	0x00000d85

0000021c <check_eeprom>:

bool check_eeprom() {
     21c:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     21e:	4802      	ldr	r0, [pc, #8]	; (228 <check_eeprom+0xc>)
     220:	4b02      	ldr	r3, [pc, #8]	; (22c <check_eeprom+0x10>)
     222:	4798      	blx	r3
}
     224:	bd10      	pop	{r4, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	200000b8 	.word	0x200000b8
     22c:	00000f31 	.word	0x00000f31

00000230 <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     230:	b530      	push	{r4, r5, lr}
     232:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     234:	4d06      	ldr	r5, [pc, #24]	; (250 <eeprom_read_request+0x20>)
     236:	4c07      	ldr	r4, [pc, #28]	; (254 <eeprom_read_request+0x24>)
     238:	9203      	str	r2, [sp, #12]
     23a:	9302      	str	r3, [sp, #8]
     23c:	9101      	str	r1, [sp, #4]
     23e:	2300      	movs	r3, #0
     240:	9300      	str	r3, [sp, #0]
     242:	002a      	movs	r2, r5
     244:	0001      	movs	r1, r0
     246:	0020      	movs	r0, r4
     248:	4c03      	ldr	r4, [pc, #12]	; (258 <eeprom_read_request+0x28>)
     24a:	47a0      	blx	r4
}
     24c:	b005      	add	sp, #20
     24e:	bd30      	pop	{r4, r5, pc}
     250:	200000b8 	.word	0x200000b8
     254:	20000214 	.word	0x20000214
     258:	00003251 	.word	0x00003251

0000025c <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     25c:	b530      	push	{r4, r5, lr}
     25e:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     260:	4d07      	ldr	r5, [pc, #28]	; (280 <eeprom_write_request+0x24>)
     262:	4c08      	ldr	r4, [pc, #32]	; (284 <eeprom_write_request+0x28>)
     264:	9203      	str	r2, [sp, #12]
     266:	9302      	str	r3, [sp, #8]
     268:	9101      	str	r1, [sp, #4]
     26a:	2301      	movs	r3, #1
     26c:	9300      	str	r3, [sp, #0]
     26e:	2300      	movs	r3, #0
     270:	002a      	movs	r2, r5
     272:	0001      	movs	r1, r0
     274:	0020      	movs	r0, r4
     276:	4c04      	ldr	r4, [pc, #16]	; (288 <eeprom_write_request+0x2c>)
     278:	47a0      	blx	r4
     27a:	b005      	add	sp, #20
     27c:	bd30      	pop	{r4, r5, pc}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	200000b8 	.word	0x200000b8
     284:	20000214 	.word	0x20000214
     288:	00003251 	.word	0x00003251

0000028c <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     28c:	b5f0      	push	{r4, r5, r6, r7, lr}
     28e:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     290:	2480      	movs	r4, #128	; 0x80
     292:	0524      	lsls	r4, r4, #20
     294:	0021      	movs	r1, r4
     296:	2000      	movs	r0, #0
     298:	4e15      	ldr	r6, [pc, #84]	; (2f0 <imu_init+0x64>)
     29a:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     29c:	0021      	movs	r1, r4
     29e:	2000      	movs	r0, #0
     2a0:	4f14      	ldr	r7, [pc, #80]	; (2f4 <imu_init+0x68>)
     2a2:	47b8      	blx	r7
	IMU_OFF_BUS();
     2a4:	2580      	movs	r5, #128	; 0x80
     2a6:	03ad      	lsls	r5, r5, #14
     2a8:	0029      	movs	r1, r5
     2aa:	2000      	movs	r0, #0
     2ac:	4b12      	ldr	r3, [pc, #72]	; (2f8 <imu_init+0x6c>)
     2ae:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     2b0:	0029      	movs	r1, r5
     2b2:	2000      	movs	r0, #0
     2b4:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     2b6:	0029      	movs	r1, r5
     2b8:	2000      	movs	r0, #0
     2ba:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     2bc:	9400      	str	r4, [sp, #0]
     2be:	2300      	movs	r3, #0
     2c0:	466a      	mov	r2, sp
     2c2:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     2c4:	480d      	ldr	r0, [pc, #52]	; (2fc <imu_init+0x70>)
     2c6:	0022      	movs	r2, r4
     2c8:	9b01      	ldr	r3, [sp, #4]
     2ca:	490d      	ldr	r1, [pc, #52]	; (300 <imu_init+0x74>)
     2cc:	4c0d      	ldr	r4, [pc, #52]	; (304 <imu_init+0x78>)
     2ce:	47a0      	blx	r4
     2d0:	1e04      	subs	r4, r0, #0
     2d2:	d107      	bne.n	2e4 <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     2d4:	2180      	movs	r1, #128	; 0x80
     2d6:	0389      	lsls	r1, r1, #14
     2d8:	2000      	movs	r0, #0
     2da:	4b07      	ldr	r3, [pc, #28]	; (2f8 <imu_init+0x6c>)
     2dc:	4798      	blx	r3
    return ret;
}
     2de:	0020      	movs	r0, r4
     2e0:	b003      	add	sp, #12
     2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     2e4:	4805      	ldr	r0, [pc, #20]	; (2fc <imu_init+0x70>)
     2e6:	4b08      	ldr	r3, [pc, #32]	; (308 <imu_init+0x7c>)
     2e8:	4798      	blx	r3
     2ea:	0004      	movs	r4, r0
     2ec:	e7f2      	b.n	2d4 <imu_init+0x48>
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	000014e5 	.word	0x000014e5
     2f4:	000014d5 	.word	0x000014d5
     2f8:	000014f5 	.word	0x000014f5
     2fc:	200000c4 	.word	0x200000c4
     300:	42001400 	.word	0x42001400
     304:	00001305 	.word	0x00001305
     308:	00001449 	.word	0x00001449

0000030c <check_imu>:

bool check_imu() {
     30c:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     30e:	2180      	movs	r1, #128	; 0x80
     310:	0389      	lsls	r1, r1, #14
     312:	2000      	movs	r0, #0
     314:	4b09      	ldr	r3, [pc, #36]	; (33c <check_imu+0x30>)
     316:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     318:	4809      	ldr	r0, [pc, #36]	; (340 <check_imu+0x34>)
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <check_imu+0x38>)
     31c:	4798      	blx	r3
     31e:	1e04      	subs	r4, r0, #0
     320:	d106      	bne.n	330 <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     322:	2180      	movs	r1, #128	; 0x80
     324:	0389      	lsls	r1, r1, #14
     326:	2000      	movs	r0, #0
     328:	4b07      	ldr	r3, [pc, #28]	; (348 <check_imu+0x3c>)
     32a:	4798      	blx	r3
    return pass;
}
     32c:	0020      	movs	r0, r4
     32e:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     330:	4803      	ldr	r0, [pc, #12]	; (340 <check_imu+0x34>)
     332:	4b06      	ldr	r3, [pc, #24]	; (34c <check_imu+0x40>)
     334:	4798      	blx	r3
     336:	0004      	movs	r4, r0
     338:	e7f3      	b.n	322 <check_imu+0x16>
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	000014e5 	.word	0x000014e5
     340:	200000c4 	.word	0x200000c4
     344:	00001375 	.word	0x00001375
     348:	000014f5 	.word	0x000014f5
     34c:	000014a5 	.word	0x000014a5

00000350 <request_imu_data>:

void request_imu_data() {
     350:	b510      	push	{r4, lr}
     352:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     354:	4a09      	ldr	r2, [pc, #36]	; (37c <request_imu_data+0x2c>)
     356:	0011      	movs	r1, r2
     358:	310c      	adds	r1, #12
     35a:	4809      	ldr	r0, [pc, #36]	; (380 <request_imu_data+0x30>)
     35c:	0013      	movs	r3, r2
     35e:	3334      	adds	r3, #52	; 0x34
     360:	9304      	str	r3, [sp, #16]
     362:	230e      	movs	r3, #14
     364:	9303      	str	r3, [sp, #12]
     366:	331f      	adds	r3, #31
     368:	9302      	str	r3, [sp, #8]
     36a:	2300      	movs	r3, #0
     36c:	9301      	str	r3, [sp, #4]
     36e:	9300      	str	r3, [sp, #0]
     370:	3302      	adds	r3, #2
     372:	4c04      	ldr	r4, [pc, #16]	; (384 <request_imu_data+0x34>)
     374:	47a0      	blx	r4
}
     376:	b006      	add	sp, #24
     378:	bd10      	pop	{r4, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	200000c4 	.word	0x200000c4
     380:	20000214 	.word	0x20000214
     384:	000034f5 	.word	0x000034f5

00000388 <wait_for_imu_data>:

void wait_for_imu_data() {
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	46de      	mov	lr, fp
     38c:	4657      	mov	r7, sl
     38e:	464e      	mov	r6, r9
     390:	4645      	mov	r5, r8
     392:	b5e0      	push	{r5, r6, r7, lr}
     394:	b089      	sub	sp, #36	; 0x24
    imu_icm20948_wait_until_done(&data_request);
     396:	4b9f      	ldr	r3, [pc, #636]	; (614 <wait_for_imu_data+0x28c>)
     398:	4699      	mov	r9, r3
     39a:	0018      	movs	r0, r3
     39c:	300c      	adds	r0, #12
     39e:	4b9e      	ldr	r3, [pc, #632]	; (618 <wait_for_imu_data+0x290>)
     3a0:	4798      	blx	r3

    float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
     3a2:	464b      	mov	r3, r9
     3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     3a6:	469a      	mov	sl, r3
     3a8:	2002      	movs	r0, #2
     3aa:	4098      	lsls	r0, r3
     3ac:	4b9b      	ldr	r3, [pc, #620]	; (61c <wait_for_imu_data+0x294>)
     3ae:	4698      	mov	r8, r3
     3b0:	4798      	blx	r3
     3b2:	4e9b      	ldr	r6, [pc, #620]	; (620 <wait_for_imu_data+0x298>)
     3b4:	499b      	ldr	r1, [pc, #620]	; (624 <wait_for_imu_data+0x29c>)
     3b6:	47b0      	blx	r6
     3b8:	21e0      	movs	r1, #224	; 0xe0
     3ba:	0589      	lsls	r1, r1, #22
     3bc:	47b0      	blx	r6
     3be:	4683      	mov	fp, r0
    globals.AccelerationXRaw = (float)(SWAPI16(raw_data.accel_x)) * accel_multiplier;
     3c0:	464b      	mov	r3, r9
     3c2:	2234      	movs	r2, #52	; 0x34
     3c4:	5e9b      	ldrsh	r3, [r3, r2]
     3c6:	021f      	lsls	r7, r3, #8
     3c8:	b23f      	sxth	r7, r7
     3ca:	b29b      	uxth	r3, r3
     3cc:	0a1b      	lsrs	r3, r3, #8
     3ce:	431f      	orrs	r7, r3
     3d0:	9707      	str	r7, [sp, #28]
     3d2:	0038      	movs	r0, r7
     3d4:	47c0      	blx	r8
     3d6:	4659      	mov	r1, fp
     3d8:	47b0      	blx	r6
     3da:	4f93      	ldr	r7, [pc, #588]	; (628 <wait_for_imu_data+0x2a0>)
     3dc:	6078      	str	r0, [r7, #4]
    globals.AccelerationYRaw = (float)(SWAPI16(raw_data.accel_y)) * accel_multiplier;
     3de:	464b      	mov	r3, r9
     3e0:	2236      	movs	r2, #54	; 0x36
     3e2:	5e9b      	ldrsh	r3, [r3, r2]
     3e4:	021d      	lsls	r5, r3, #8
     3e6:	b22d      	sxth	r5, r5
     3e8:	b29b      	uxth	r3, r3
     3ea:	0a1b      	lsrs	r3, r3, #8
     3ec:	431d      	orrs	r5, r3
     3ee:	0028      	movs	r0, r5
     3f0:	47c0      	blx	r8
     3f2:	4659      	mov	r1, fp
     3f4:	47b0      	blx	r6
     3f6:	60b8      	str	r0, [r7, #8]
    globals.AccelerationZRaw = (float)(SWAPI16(raw_data.accel_z)) * accel_multiplier;
     3f8:	464b      	mov	r3, r9
     3fa:	2238      	movs	r2, #56	; 0x38
     3fc:	5e9b      	ldrsh	r3, [r3, r2]
     3fe:	021c      	lsls	r4, r3, #8
     400:	b224      	sxth	r4, r4
     402:	b29b      	uxth	r3, r3
     404:	0a1b      	lsrs	r3, r3, #8
     406:	431c      	orrs	r4, r3
     408:	0020      	movs	r0, r4
     40a:	47c0      	blx	r8
     40c:	4659      	mov	r1, fp
     40e:	47b0      	blx	r6
     410:	60f8      	str	r0, [r7, #12]

    float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
     412:	464b      	mov	r3, r9
     414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     416:	20fa      	movs	r0, #250	; 0xfa
     418:	4098      	lsls	r0, r3
     41a:	47c0      	blx	r8
     41c:	21e0      	movs	r1, #224	; 0xe0
     41e:	0589      	lsls	r1, r1, #22
     420:	47b0      	blx	r6
     422:	4683      	mov	fp, r0
    globals.AngularVelocityXRaw = (float)(SWAPI16(raw_data.gyro_x)) * gyro_multiplier;
     424:	464b      	mov	r3, r9
     426:	223a      	movs	r2, #58	; 0x3a
     428:	5e9b      	ldrsh	r3, [r3, r2]
     42a:	0218      	lsls	r0, r3, #8
     42c:	b200      	sxth	r0, r0
     42e:	b29b      	uxth	r3, r3
     430:	0a1b      	lsrs	r3, r3, #8
     432:	4318      	orrs	r0, r3
     434:	47c0      	blx	r8
     436:	4659      	mov	r1, fp
     438:	47b0      	blx	r6
     43a:	6138      	str	r0, [r7, #16]
    globals.AngularVelocityYRaw = (float)(SWAPI16(raw_data.gyro_y)) * gyro_multiplier;
     43c:	464b      	mov	r3, r9
     43e:	223c      	movs	r2, #60	; 0x3c
     440:	5e9b      	ldrsh	r3, [r3, r2]
     442:	0218      	lsls	r0, r3, #8
     444:	b200      	sxth	r0, r0
     446:	b29b      	uxth	r3, r3
     448:	0a1b      	lsrs	r3, r3, #8
     44a:	4318      	orrs	r0, r3
     44c:	47c0      	blx	r8
     44e:	4659      	mov	r1, fp
     450:	47b0      	blx	r6
     452:	6178      	str	r0, [r7, #20]
    globals.AngularVelocityZRaw = (float)(SWAPI16(raw_data.gyro_z)) * gyro_multiplier;
     454:	464b      	mov	r3, r9
     456:	223e      	movs	r2, #62	; 0x3e
     458:	5e9b      	ldrsh	r3, [r3, r2]
     45a:	0218      	lsls	r0, r3, #8
     45c:	b200      	sxth	r0, r0
     45e:	b29b      	uxth	r3, r3
     460:	0a1b      	lsrs	r3, r3, #8
     462:	4318      	orrs	r0, r3
     464:	47c0      	blx	r8
     466:	4659      	mov	r1, fp
     468:	47b0      	blx	r6
     46a:	61b8      	str	r0, [r7, #24]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     46c:	17e3      	asrs	r3, r4, #31
     46e:	18e4      	adds	r4, r4, r3
     470:	405c      	eors	r4, r3
     472:	b2a4      	uxth	r4, r4
     474:	17eb      	asrs	r3, r5, #31
     476:	18ed      	adds	r5, r5, r3
     478:	405d      	eors	r5, r3
     47a:	b2ad      	uxth	r5, r5
     47c:	9f07      	ldr	r7, [sp, #28]
     47e:	17fb      	asrs	r3, r7, #31
     480:	18ff      	adds	r7, r7, r3
     482:	405f      	eors	r7, r3
     484:	b2bf      	uxth	r7, r7
     486:	1c2a      	adds	r2, r5, #0
     488:	42bd      	cmp	r5, r7
     48a:	d200      	bcs.n	48e <wait_for_imu_data+0x106>
     48c:	1c3a      	adds	r2, r7, #0
     48e:	1c23      	adds	r3, r4, #0
     490:	b291      	uxth	r1, r2
     492:	428c      	cmp	r4, r1
     494:	d200      	bcs.n	498 <wait_for_imu_data+0x110>
     496:	1c13      	adds	r3, r2, #0
     498:	b21b      	sxth	r3, r3
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     49a:	4652      	mov	r2, sl
     49c:	2a03      	cmp	r2, #3
     49e:	d002      	beq.n	4a6 <wait_for_imu_data+0x11e>
     4a0:	4a62      	ldr	r2, [pc, #392]	; (62c <wait_for_imu_data+0x2a4>)
     4a2:	4293      	cmp	r3, r2
     4a4:	dc44      	bgt.n	530 <wait_for_imu_data+0x1a8>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     4a6:	4652      	mov	r2, sl
     4a8:	2a00      	cmp	r2, #0
     4aa:	d002      	beq.n	4b2 <wait_for_imu_data+0x12a>
     4ac:	4a60      	ldr	r2, [pc, #384]	; (630 <wait_for_imu_data+0x2a8>)
     4ae:	4293      	cmp	r3, r2
     4b0:	dd59      	ble.n	566 <wait_for_imu_data+0x1de>
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     4b2:	4858      	ldr	r0, [pc, #352]	; (614 <wait_for_imu_data+0x28c>)
     4b4:	233e      	movs	r3, #62	; 0x3e
     4b6:	5ec2      	ldrsh	r2, [r0, r3]
     4b8:	0213      	lsls	r3, r2, #8
     4ba:	b21b      	sxth	r3, r3
     4bc:	b292      	uxth	r2, r2
     4be:	0a12      	lsrs	r2, r2, #8
     4c0:	4313      	orrs	r3, r2
     4c2:	17da      	asrs	r2, r3, #31
     4c4:	189b      	adds	r3, r3, r2
     4c6:	4053      	eors	r3, r2
     4c8:	b29b      	uxth	r3, r3
     4ca:	223c      	movs	r2, #60	; 0x3c
     4cc:	5e81      	ldrsh	r1, [r0, r2]
     4ce:	020a      	lsls	r2, r1, #8
     4d0:	b212      	sxth	r2, r2
     4d2:	b289      	uxth	r1, r1
     4d4:	0a09      	lsrs	r1, r1, #8
     4d6:	430a      	orrs	r2, r1
     4d8:	17d1      	asrs	r1, r2, #31
     4da:	1852      	adds	r2, r2, r1
     4dc:	404a      	eors	r2, r1
     4de:	b292      	uxth	r2, r2
     4e0:	213a      	movs	r1, #58	; 0x3a
     4e2:	5e40      	ldrsh	r0, [r0, r1]
     4e4:	0201      	lsls	r1, r0, #8
     4e6:	b209      	sxth	r1, r1
     4e8:	b280      	uxth	r0, r0
     4ea:	0a00      	lsrs	r0, r0, #8
     4ec:	4301      	orrs	r1, r0
     4ee:	17c8      	asrs	r0, r1, #31
     4f0:	1809      	adds	r1, r1, r0
     4f2:	4041      	eors	r1, r0
     4f4:	b289      	uxth	r1, r1
     4f6:	1c10      	adds	r0, r2, #0
     4f8:	428a      	cmp	r2, r1
     4fa:	d200      	bcs.n	4fe <wait_for_imu_data+0x176>
     4fc:	1c08      	adds	r0, r1, #0
     4fe:	1c1a      	adds	r2, r3, #0
     500:	b281      	uxth	r1, r0
     502:	428b      	cmp	r3, r1
     504:	d200      	bcs.n	508 <wait_for_imu_data+0x180>
     506:	1c02      	adds	r2, r0, #0
     508:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     50a:	4b42      	ldr	r3, [pc, #264]	; (614 <wait_for_imu_data+0x28c>)
     50c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     50e:	2b03      	cmp	r3, #3
     510:	d002      	beq.n	518 <wait_for_imu_data+0x190>
     512:	4946      	ldr	r1, [pc, #280]	; (62c <wait_for_imu_data+0x2a4>)
     514:	428a      	cmp	r2, r1
     516:	dc41      	bgt.n	59c <wait_for_imu_data+0x214>
        ++gyro_fs_sel;
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     518:	2b00      	cmp	r3, #0
     51a:	d002      	beq.n	522 <wait_for_imu_data+0x19a>
     51c:	4944      	ldr	r1, [pc, #272]	; (630 <wait_for_imu_data+0x2a8>)
     51e:	428a      	cmp	r2, r1
     520:	dd5a      	ble.n	5d8 <wait_for_imu_data+0x250>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_off();
    }

     522:	b009      	add	sp, #36	; 0x24
     524:	bcf0      	pop	{r4, r5, r6, r7}
     526:	46bb      	mov	fp, r7
     528:	46b2      	mov	sl, r6
     52a:	46a9      	mov	r9, r5
     52c:	46a0      	mov	r8, r4
     52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     530:	4653      	mov	r3, sl
     532:	3301      	adds	r3, #1
     534:	4a37      	ldr	r2, [pc, #220]	; (614 <wait_for_imu_data+0x28c>)
     536:	6453      	str	r3, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     538:	b2db      	uxtb	r3, r3
     53a:	005b      	lsls	r3, r3, #1
     53c:	2106      	movs	r1, #6
     53e:	400b      	ands	r3, r1
     540:	3146      	adds	r1, #70	; 0x46
     542:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     544:	0011      	movs	r1, r2
     546:	3150      	adds	r1, #80	; 0x50
     548:	483a      	ldr	r0, [pc, #232]	; (634 <wait_for_imu_data+0x2ac>)
     54a:	0013      	movs	r3, r2
     54c:	334c      	adds	r3, #76	; 0x4c
     54e:	9304      	str	r3, [sp, #16]
     550:	2301      	movs	r3, #1
     552:	9303      	str	r3, [sp, #12]
     554:	2414      	movs	r4, #20
     556:	9402      	str	r4, [sp, #8]
     558:	3c12      	subs	r4, #18
     55a:	9401      	str	r4, [sp, #4]
     55c:	9300      	str	r3, [sp, #0]
     55e:	3301      	adds	r3, #1
     560:	4c35      	ldr	r4, [pc, #212]	; (638 <wait_for_imu_data+0x2b0>)
     562:	47a0      	blx	r4
     564:	e7a5      	b.n	4b2 <wait_for_imu_data+0x12a>
        --accel_fs_sel;
     566:	4653      	mov	r3, sl
     568:	3b01      	subs	r3, #1
     56a:	4a2a      	ldr	r2, [pc, #168]	; (614 <wait_for_imu_data+0x28c>)
     56c:	6453      	str	r3, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     56e:	b2db      	uxtb	r3, r3
     570:	005b      	lsls	r3, r3, #1
     572:	2106      	movs	r1, #6
     574:	400b      	ands	r3, r1
     576:	3146      	adds	r1, #70	; 0x46
     578:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     57a:	0011      	movs	r1, r2
     57c:	3150      	adds	r1, #80	; 0x50
     57e:	482d      	ldr	r0, [pc, #180]	; (634 <wait_for_imu_data+0x2ac>)
     580:	0013      	movs	r3, r2
     582:	334c      	adds	r3, #76	; 0x4c
     584:	9304      	str	r3, [sp, #16]
     586:	2301      	movs	r3, #1
     588:	9303      	str	r3, [sp, #12]
     58a:	2414      	movs	r4, #20
     58c:	9402      	str	r4, [sp, #8]
     58e:	3c12      	subs	r4, #18
     590:	9401      	str	r4, [sp, #4]
     592:	9300      	str	r3, [sp, #0]
     594:	3301      	adds	r3, #1
     596:	4c28      	ldr	r4, [pc, #160]	; (638 <wait_for_imu_data+0x2b0>)
     598:	47a0      	blx	r4
     59a:	e78a      	b.n	4b2 <wait_for_imu_data+0x12a>
        ++gyro_fs_sel;
     59c:	3301      	adds	r3, #1
     59e:	4a1d      	ldr	r2, [pc, #116]	; (614 <wait_for_imu_data+0x28c>)
     5a0:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     5a2:	b2db      	uxtb	r3, r3
     5a4:	005b      	lsls	r3, r3, #1
     5a6:	2106      	movs	r1, #6
     5a8:	400b      	ands	r3, r1
     5aa:	3172      	adds	r1, #114	; 0x72
     5ac:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     5ae:	0011      	movs	r1, r2
     5b0:	317c      	adds	r1, #124	; 0x7c
     5b2:	4820      	ldr	r0, [pc, #128]	; (634 <wait_for_imu_data+0x2ac>)
     5b4:	0013      	movs	r3, r2
     5b6:	3378      	adds	r3, #120	; 0x78
     5b8:	9304      	str	r3, [sp, #16]
     5ba:	2301      	movs	r3, #1
     5bc:	9303      	str	r3, [sp, #12]
     5be:	9302      	str	r3, [sp, #8]
     5c0:	2402      	movs	r4, #2
     5c2:	9401      	str	r4, [sp, #4]
     5c4:	9300      	str	r3, [sp, #0]
     5c6:	3301      	adds	r3, #1
     5c8:	4c1b      	ldr	r4, [pc, #108]	; (638 <wait_for_imu_data+0x2b0>)
     5ca:	47a0      	blx	r4
        led_on();
     5cc:	2180      	movs	r1, #128	; 0x80
     5ce:	03c9      	lsls	r1, r1, #15
     5d0:	2001      	movs	r0, #1
     5d2:	4b1a      	ldr	r3, [pc, #104]	; (63c <wait_for_imu_data+0x2b4>)
     5d4:	4798      	blx	r3
     5d6:	e7a4      	b.n	522 <wait_for_imu_data+0x19a>
        --gyro_fs_sel;
     5d8:	3b01      	subs	r3, #1
     5da:	4a0e      	ldr	r2, [pc, #56]	; (614 <wait_for_imu_data+0x28c>)
     5dc:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     5de:	b2db      	uxtb	r3, r3
     5e0:	005b      	lsls	r3, r3, #1
     5e2:	2106      	movs	r1, #6
     5e4:	400b      	ands	r3, r1
     5e6:	3172      	adds	r1, #114	; 0x72
     5e8:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     5ea:	0011      	movs	r1, r2
     5ec:	317c      	adds	r1, #124	; 0x7c
     5ee:	4811      	ldr	r0, [pc, #68]	; (634 <wait_for_imu_data+0x2ac>)
     5f0:	0013      	movs	r3, r2
     5f2:	3378      	adds	r3, #120	; 0x78
     5f4:	9304      	str	r3, [sp, #16]
     5f6:	2301      	movs	r3, #1
     5f8:	9303      	str	r3, [sp, #12]
     5fa:	9302      	str	r3, [sp, #8]
     5fc:	2402      	movs	r4, #2
     5fe:	9401      	str	r4, [sp, #4]
     600:	9300      	str	r3, [sp, #0]
     602:	3301      	adds	r3, #1
     604:	4c0c      	ldr	r4, [pc, #48]	; (638 <wait_for_imu_data+0x2b0>)
     606:	47a0      	blx	r4
        led_off();
     608:	2180      	movs	r1, #128	; 0x80
     60a:	03c9      	lsls	r1, r1, #15
     60c:	2001      	movs	r0, #1
     60e:	4b0c      	ldr	r3, [pc, #48]	; (640 <wait_for_imu_data+0x2b8>)
     610:	4798      	blx	r3
     612:	e786      	b.n	522 <wait_for_imu_data+0x19a>
     614:	200000c4 	.word	0x200000c4
     618:	00003531 	.word	0x00003531
     61c:	000044dd 	.word	0x000044dd
     620:	00003efd 	.word	0x00003efd
     624:	411ce80a 	.word	0x411ce80a
     628:	20000080 	.word	0x20000080
     62c:	00007333 	.word	0x00007333
     630:	00003333 	.word	0x00003333
     634:	20000214 	.word	0x20000214
     638:	000034f5 	.word	0x000034f5
     63c:	000014e5 	.word	0x000014e5
     640:	000014f5 	.word	0x000014f5

00000644 <serial_init>:
bool serial_init() {
     644:	b570      	push	{r4, r5, r6, lr}
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     646:	22c0      	movs	r2, #192	; 0xc0
     648:	0092      	lsls	r2, r2, #2
     64a:	2102      	movs	r1, #2
     64c:	2000      	movs	r0, #0
     64e:	4c18      	ldr	r4, [pc, #96]	; (6b0 <serial_init+0x6c>)
     650:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     652:	22c0      	movs	r2, #192	; 0xc0
     654:	0312      	lsls	r2, r2, #12
     656:	2102      	movs	r1, #2
     658:	2000      	movs	r0, #0
     65a:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     65c:	22c0      	movs	r2, #192	; 0xc0
     65e:	0212      	lsls	r2, r2, #8
     660:	2102      	movs	r1, #2
     662:	2001      	movs	r0, #1
     664:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     666:	22c0      	movs	r2, #192	; 0xc0
     668:	0292      	lsls	r2, r2, #10
     66a:	2102      	movs	r1, #2
     66c:	2001      	movs	r0, #1
     66e:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     670:	2596      	movs	r5, #150	; 0x96
     672:	01ad      	lsls	r5, r5, #6
     674:	002b      	movs	r3, r5
     676:	2200      	movs	r2, #0
     678:	2101      	movs	r1, #1
     67a:	480e      	ldr	r0, [pc, #56]	; (6b4 <serial_init+0x70>)
     67c:	4c0e      	ldr	r4, [pc, #56]	; (6b8 <serial_init+0x74>)
     67e:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     680:	002b      	movs	r3, r5
     682:	2201      	movs	r2, #1
     684:	2103      	movs	r1, #3
     686:	480d      	ldr	r0, [pc, #52]	; (6bc <serial_init+0x78>)
     688:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     68a:	002b      	movs	r3, r5
     68c:	2201      	movs	r2, #1
     68e:	2103      	movs	r1, #3
     690:	480b      	ldr	r0, [pc, #44]	; (6c0 <serial_init+0x7c>)
     692:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     694:	002b      	movs	r3, r5
     696:	2200      	movs	r2, #0
     698:	2101      	movs	r1, #1
     69a:	480a      	ldr	r0, [pc, #40]	; (6c4 <serial_init+0x80>)
     69c:	47a0      	blx	r4
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     69e:	2180      	movs	r1, #128	; 0x80
     6a0:	20c0      	movs	r0, #192	; 0xc0
     6a2:	0049      	lsls	r1, r1, #1
     6a4:	00c0      	lsls	r0, r0, #3
     6a6:	4b08      	ldr	r3, [pc, #32]	; (6c8 <serial_init+0x84>)
     6a8:	4798      	blx	r3
	usb_attach();
     6aa:	4b08      	ldr	r3, [pc, #32]	; (6cc <serial_init+0x88>)
     6ac:	4798      	blx	r3
}
     6ae:	bd70      	pop	{r4, r5, r6, pc}
     6b0:	00001505 	.word	0x00001505
     6b4:	42000800 	.word	0x42000800
     6b8:	00001c0d 	.word	0x00001c0d
     6bc:	42000c00 	.word	0x42000c00
     6c0:	42001800 	.word	0x42001800
     6c4:	42001c00 	.word	0x42001c00
     6c8:	000036e1 	.word	0x000036e1
     6cc:	00002265 	.word	0x00002265

000006d0 <buzzer>:

void shutdown() {
	serial_quit();
}

void buzzer() {
     6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d2:	46c6      	mov	lr, r8
     6d4:	b500      	push	{lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     6d6:	2106      	movs	r1, #6
     6d8:	4823      	ldr	r0, [pc, #140]	; (768 <buzzer+0x98>)
     6da:	4b24      	ldr	r3, [pc, #144]	; (76c <buzzer+0x9c>)
     6dc:	4798      	blx	r3
     6de:	2800      	cmp	r0, #0
     6e0:	d019      	beq.n	716 <buzzer+0x46>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     6e2:	4923      	ldr	r1, [pc, #140]	; (770 <buzzer+0xa0>)
     6e4:	4820      	ldr	r0, [pc, #128]	; (768 <buzzer+0x98>)
     6e6:	4b23      	ldr	r3, [pc, #140]	; (774 <buzzer+0xa4>)
     6e8:	4798      	blx	r3
     6ea:	2800      	cmp	r0, #0
     6ec:	d016      	beq.n	71c <buzzer+0x4c>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     6ee:	2200      	movs	r2, #0
     6f0:	2101      	movs	r1, #1
     6f2:	481d      	ldr	r0, [pc, #116]	; (768 <buzzer+0x98>)
     6f4:	4b20      	ldr	r3, [pc, #128]	; (778 <buzzer+0xa8>)
     6f6:	4798      	blx	r3
     6f8:	2800      	cmp	r0, #0
     6fa:	d012      	beq.n	722 <buzzer+0x52>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     6fc:	481a      	ldr	r0, [pc, #104]	; (768 <buzzer+0x98>)
     6fe:	4b1f      	ldr	r3, [pc, #124]	; (77c <buzzer+0xac>)
     700:	4798      	blx	r3
     702:	2800      	cmp	r0, #0
     704:	d010      	beq.n	728 <buzzer+0x58>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
     706:	2280      	movs	r2, #128	; 0x80
     708:	0412      	lsls	r2, r2, #16
     70a:	2104      	movs	r1, #4
     70c:	2001      	movs	r0, #1
     70e:	4b1c      	ldr	r3, [pc, #112]	; (780 <buzzer+0xb0>)
     710:	4798      	blx	r3
	
	for (int i = 0; i < 2; ++i) {
     712:	2500      	movs	r5, #0
     714:	e023      	b.n	75e <buzzer+0x8e>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     716:	4b1b      	ldr	r3, [pc, #108]	; (784 <buzzer+0xb4>)
     718:	4798      	blx	r3
     71a:	e7e2      	b.n	6e2 <buzzer+0x12>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     71c:	4b19      	ldr	r3, [pc, #100]	; (784 <buzzer+0xb4>)
     71e:	4798      	blx	r3
     720:	e7e5      	b.n	6ee <buzzer+0x1e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     722:	4b18      	ldr	r3, [pc, #96]	; (784 <buzzer+0xb4>)
     724:	4798      	blx	r3
     726:	e7e9      	b.n	6fc <buzzer+0x2c>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     728:	4b16      	ldr	r3, [pc, #88]	; (784 <buzzer+0xb4>)
     72a:	4798      	blx	r3
     72c:	e7eb      	b.n	706 <buzzer+0x36>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
     72e:	4b0e      	ldr	r3, [pc, #56]	; (768 <buzzer+0x98>)
     730:	4698      	mov	r8, r3
     732:	22fc      	movs	r2, #252	; 0xfc
     734:	0592      	lsls	r2, r2, #22
     736:	2101      	movs	r1, #1
     738:	0018      	movs	r0, r3
     73a:	4f0f      	ldr	r7, [pc, #60]	; (778 <buzzer+0xa8>)
     73c:	47b8      	blx	r7
		rtos_delay_ms(75);
     73e:	4b12      	ldr	r3, [pc, #72]	; (788 <buzzer+0xb8>)
     740:	681a      	ldr	r2, [r3, #0]
     742:	0093      	lsls	r3, r2, #2
     744:	189b      	adds	r3, r3, r2
     746:	011c      	lsls	r4, r3, #4
     748:	1ae4      	subs	r4, r4, r3
     74a:	0020      	movs	r0, r4
     74c:	4e0f      	ldr	r6, [pc, #60]	; (78c <buzzer+0xbc>)
     74e:	47b0      	blx	r6
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
     750:	2200      	movs	r2, #0
     752:	2101      	movs	r1, #1
     754:	4640      	mov	r0, r8
     756:	47b8      	blx	r7
		rtos_delay_ms(75);
     758:	0020      	movs	r0, r4
     75a:	47b0      	blx	r6
	for (int i = 0; i < 2; ++i) {
     75c:	3501      	adds	r5, #1
     75e:	2d01      	cmp	r5, #1
     760:	dde5      	ble.n	72e <buzzer+0x5e>
	}
     762:	bc80      	pop	{r7}
     764:	46b8      	mov	r8, r7
     766:	bdf0      	pop	{r4, r5, r6, r7, pc}
     768:	42003c00 	.word	0x42003c00
     76c:	00001551 	.word	0x00001551
     770:	45309000 	.word	0x45309000
     774:	000016b5 	.word	0x000016b5
     778:	00001741 	.word	0x00001741
     77c:	00001625 	.word	0x00001625
     780:	00001505 	.word	0x00001505
     784:	00002721 	.word	0x00002721
     788:	00004a6c 	.word	0x00004a6c
     78c:	00002c49 	.word	0x00002c49

00000790 <selftest>:
bool selftest() {
     790:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
     792:	4b0a      	ldr	r3, [pc, #40]	; (7bc <selftest+0x2c>)
     794:	4798      	blx	r3
     796:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
     798:	4809      	ldr	r0, [pc, #36]	; (7c0 <selftest+0x30>)
     79a:	4b0a      	ldr	r3, [pc, #40]	; (7c4 <selftest+0x34>)
     79c:	4798      	blx	r3
     79e:	1e05      	subs	r5, r0, #0
     7a0:	d000      	beq.n	7a4 <selftest+0x14>
     7a2:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
     7a4:	4b08      	ldr	r3, [pc, #32]	; (7c8 <selftest+0x38>)
     7a6:	4798      	blx	r3
     7a8:	1e04      	subs	r4, r0, #0
     7aa:	d000      	beq.n	7ae <selftest+0x1e>
     7ac:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
     7ae:	4807      	ldr	r0, [pc, #28]	; (7cc <selftest+0x3c>)
     7b0:	4b07      	ldr	r3, [pc, #28]	; (7d0 <selftest+0x40>)
     7b2:	4798      	blx	r3
     7b4:	2800      	cmp	r0, #0
     7b6:	d000      	beq.n	7ba <selftest+0x2a>
     7b8:	0020      	movs	r0, r4
}
     7ba:	bd70      	pop	{r4, r5, r6, pc}
     7bc:	0000030d 	.word	0x0000030d
     7c0:	20000270 	.word	0x20000270
     7c4:	00000b61 	.word	0x00000b61
     7c8:	0000021d 	.word	0x0000021d
     7cc:	2000028c 	.word	0x2000028c
     7d0:	00000ff5 	.word	0x00000ff5

000007d4 <init>:
bool init() {
     7d4:	b570      	push	{r4, r5, r6, lr}
     7d6:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
     7d8:	22c0      	movs	r2, #192	; 0xc0
     7da:	0412      	lsls	r2, r2, #16
     7dc:	2102      	movs	r1, #2
     7de:	2000      	movs	r0, #0
     7e0:	4c34      	ldr	r4, [pc, #208]	; (8b4 <init+0xe0>)
     7e2:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
     7e4:	2280      	movs	r2, #128	; 0x80
     7e6:	0352      	lsls	r2, r2, #13
     7e8:	2103      	movs	r1, #3
     7ea:	2000      	movs	r0, #0
     7ec:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
     7ee:	2480      	movs	r4, #128	; 0x80
     7f0:	0564      	lsls	r4, r4, #21
     7f2:	0021      	movs	r1, r4
     7f4:	2000      	movs	r0, #0
     7f6:	4e30      	ldr	r6, [pc, #192]	; (8b8 <init+0xe4>)
     7f8:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
     7fa:	2580      	movs	r5, #128	; 0x80
     7fc:	062d      	lsls	r5, r5, #24
     7fe:	0029      	movs	r1, r5
     800:	2001      	movs	r0, #1
     802:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
     804:	0021      	movs	r1, r4
     806:	2000      	movs	r0, #0
     808:	4c2c      	ldr	r4, [pc, #176]	; (8bc <init+0xe8>)
     80a:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
     80c:	0029      	movs	r1, r5
     80e:	2001      	movs	r0, #1
     810:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     812:	4b2b      	ldr	r3, [pc, #172]	; (8c0 <init+0xec>)
     814:	9301      	str	r3, [sp, #4]
     816:	2300      	movs	r3, #0
     818:	9300      	str	r3, [sp, #0]
     81a:	3302      	adds	r3, #2
     81c:	2200      	movs	r2, #0
     81e:	2100      	movs	r1, #0
     820:	4828      	ldr	r0, [pc, #160]	; (8c4 <init+0xf0>)
     822:	4c29      	ldr	r4, [pc, #164]	; (8c8 <init+0xf4>)
     824:	47a0      	blx	r4
     826:	2800      	cmp	r0, #0
     828:	d037      	beq.n	89a <init+0xc6>
	dma_init();
     82a:	4b28      	ldr	r3, [pc, #160]	; (8cc <init+0xf8>)
     82c:	4798      	blx	r3
	if (!serial_init()) SOS();
     82e:	4b28      	ldr	r3, [pc, #160]	; (8d0 <init+0xfc>)
     830:	4798      	blx	r3
     832:	2800      	cmp	r0, #0
     834:	d034      	beq.n	8a0 <init+0xcc>
	if (!imu_init()) SOS();
     836:	4b27      	ldr	r3, [pc, #156]	; (8d4 <init+0x100>)
     838:	4798      	blx	r3
     83a:	2800      	cmp	r0, #0
     83c:	d033      	beq.n	8a6 <init+0xd2>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
     83e:	ab02      	add	r3, sp, #8
     840:	2280      	movs	r2, #128	; 0x80
     842:	0552      	lsls	r2, r2, #21
     844:	9202      	str	r2, [sp, #8]
     846:	2100      	movs	r1, #0
     848:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
     84a:	4823      	ldr	r0, [pc, #140]	; (8d8 <init+0x104>)
     84c:	9b03      	ldr	r3, [sp, #12]
     84e:	491d      	ldr	r1, [pc, #116]	; (8c4 <init+0xf0>)
     850:	4c22      	ldr	r4, [pc, #136]	; (8dc <init+0x108>)
     852:	47a0      	blx	r4
     854:	2800      	cmp	r0, #0
     856:	d029      	beq.n	8ac <init+0xd8>
	init_eeprom();
     858:	4b21      	ldr	r3, [pc, #132]	; (8e0 <init+0x10c>)
     85a:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
     85c:	ab02      	add	r3, sp, #8
     85e:	4c21      	ldr	r4, [pc, #132]	; (8e4 <init+0x110>)
     860:	6822      	ldr	r2, [r4, #0]
     862:	9202      	str	r2, [sp, #8]
     864:	7921      	ldrb	r1, [r4, #4]
     866:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
     868:	4d16      	ldr	r5, [pc, #88]	; (8c4 <init+0xf0>)
     86a:	481f      	ldr	r0, [pc, #124]	; (8e8 <init+0x114>)
     86c:	2107      	movs	r1, #7
     86e:	9101      	str	r1, [sp, #4]
     870:	2180      	movs	r1, #128	; 0x80
     872:	03c9      	lsls	r1, r1, #15
     874:	9100      	str	r1, [sp, #0]
     876:	9b03      	ldr	r3, [sp, #12]
     878:	0029      	movs	r1, r5
     87a:	4e1c      	ldr	r6, [pc, #112]	; (8ec <init+0x118>)
     87c:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
     87e:	2280      	movs	r2, #128	; 0x80
     880:	2180      	movs	r1, #128	; 0x80
     882:	481b      	ldr	r0, [pc, #108]	; (8f0 <init+0x11c>)
     884:	3408      	adds	r4, #8
     886:	9400      	str	r4, [sp, #0]
     888:	002b      	movs	r3, r5
     88a:	0092      	lsls	r2, r2, #2
     88c:	0109      	lsls	r1, r1, #4
     88e:	4c19      	ldr	r4, [pc, #100]	; (8f4 <init+0x120>)
     890:	47a0      	blx	r4
	return selftest();
     892:	4b19      	ldr	r3, [pc, #100]	; (8f8 <init+0x124>)
     894:	4798      	blx	r3
}
     896:	b004      	add	sp, #16
     898:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     89a:	4b18      	ldr	r3, [pc, #96]	; (8fc <init+0x128>)
     89c:	4798      	blx	r3
     89e:	e7c4      	b.n	82a <init+0x56>
	if (!serial_init()) SOS();
     8a0:	4b16      	ldr	r3, [pc, #88]	; (8fc <init+0x128>)
     8a2:	4798      	blx	r3
     8a4:	e7c7      	b.n	836 <init+0x62>
	if (!imu_init()) SOS();
     8a6:	4b15      	ldr	r3, [pc, #84]	; (8fc <init+0x128>)
     8a8:	4798      	blx	r3
     8aa:	e7c8      	b.n	83e <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
     8ac:	4b13      	ldr	r3, [pc, #76]	; (8fc <init+0x128>)
     8ae:	4798      	blx	r3
     8b0:	e7d2      	b.n	858 <init+0x84>
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	00001505 	.word	0x00001505
     8b8:	000014e5 	.word	0x000014e5
     8bc:	000014d5 	.word	0x000014d5
     8c0:	005b8d80 	.word	0x005b8d80
     8c4:	42001400 	.word	0x42001400
     8c8:	00001969 	.word	0x00001969
     8cc:	00000c51 	.word	0x00000c51
     8d0:	00000645 	.word	0x00000645
     8d4:	0000028d 	.word	0x0000028d
     8d8:	20000270 	.word	0x20000270
     8dc:	00000bdd 	.word	0x00000bdd
     8e0:	000001cd 	.word	0x000001cd
     8e4:	00004910 	.word	0x00004910
     8e8:	2000028c 	.word	0x2000028c
     8ec:	00000f6d 	.word	0x00000f6d
     8f0:	20000214 	.word	0x20000214
     8f4:	00002eed 	.word	0x00002eed
     8f8:	00000791 	.word	0x00000791
     8fc:	00002721 	.word	0x00002721

00000900 <main>:
int main(void) {
     900:	b570      	push	{r4, r5, r6, lr}
     902:	b0aa      	sub	sp, #168	; 0xa8
	if (!init()) SOS();
     904:	4b29      	ldr	r3, [pc, #164]	; (9ac <main+0xac>)
     906:	4798      	blx	r3
     908:	2800      	cmp	r0, #0
     90a:	d011      	beq.n	930 <main+0x30>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
     90c:	2380      	movs	r3, #128	; 0x80
     90e:	22e0      	movs	r2, #224	; 0xe0
     910:	4927      	ldr	r1, [pc, #156]	; (9b0 <main+0xb0>)
     912:	005b      	lsls	r3, r3, #1
     914:	00d2      	lsls	r2, r2, #3
     916:	a820      	add	r0, sp, #128	; 0x80
     918:	4c26      	ldr	r4, [pc, #152]	; (9b4 <main+0xb4>)
     91a:	47a0      	blx	r4
	dispatch_process(&bz);
     91c:	a820      	add	r0, sp, #128	; 0x80
     91e:	4b26      	ldr	r3, [pc, #152]	; (9b8 <main+0xb8>)
     920:	4798      	blx	r3
	start_navigation();
     922:	4b26      	ldr	r3, [pc, #152]	; (9bc <main+0xbc>)
     924:	4798      	blx	r3
	uint32_t time = time_read_ticks();
     926:	4b26      	ldr	r3, [pc, #152]	; (9c0 <main+0xc0>)
     928:	4798      	blx	r3
     92a:	0006      	movs	r6, r0
	for (int i = 0; i < 256; ++i) {
     92c:	2400      	movs	r4, #0
     92e:	e003      	b.n	938 <main+0x38>
	if (!init()) SOS();
     930:	4b24      	ldr	r3, [pc, #144]	; (9c4 <main+0xc4>)
     932:	4798      	blx	r3
     934:	e7ea      	b.n	90c <main+0xc>
	for (int i = 0; i < 256; ++i) {
     936:	3401      	adds	r4, #1
     938:	2cff      	cmp	r4, #255	; 0xff
     93a:	dc1d      	bgt.n	978 <main+0x78>
		uint8_t ff = 0xFF;
     93c:	466b      	mov	r3, sp
     93e:	22ff      	movs	r2, #255	; 0xff
     940:	709a      	strb	r2, [r3, #2]
		uint8_t value = 0;
     942:	2300      	movs	r3, #0
     944:	466a      	mov	r2, sp
     946:	70d3      	strb	r3, [r2, #3]
		eeprom_read_request(&r, i, &value, 1);
     948:	3301      	adds	r3, #1
     94a:	3203      	adds	r2, #3
     94c:	0021      	movs	r1, r4
     94e:	a801      	add	r0, sp, #4
     950:	4d1d      	ldr	r5, [pc, #116]	; (9c8 <main+0xc8>)
     952:	47a8      	blx	r5
		eeprom_wait_until_done(&r);
     954:	a801      	add	r0, sp, #4
     956:	4b1d      	ldr	r3, [pc, #116]	; (9cc <main+0xcc>)
     958:	4798      	blx	r3
		if (value != 0xFF) {
     95a:	466b      	mov	r3, sp
     95c:	78db      	ldrb	r3, [r3, #3]
     95e:	2bff      	cmp	r3, #255	; 0xff
     960:	d0e9      	beq.n	936 <main+0x36>
			eeprom_write_request(&r2, i, &ff, 1);
     962:	2301      	movs	r3, #1
     964:	466a      	mov	r2, sp
     966:	3202      	adds	r2, #2
     968:	0021      	movs	r1, r4
     96a:	a80b      	add	r0, sp, #44	; 0x2c
     96c:	4d18      	ldr	r5, [pc, #96]	; (9d0 <main+0xd0>)
     96e:	47a8      	blx	r5
			eeprom_wait_until_done(&r2);
     970:	a80b      	add	r0, sp, #44	; 0x2c
     972:	4b16      	ldr	r3, [pc, #88]	; (9cc <main+0xcc>)
     974:	4798      	blx	r3
     976:	e7de      	b.n	936 <main+0x36>
	time = time_read_ticks() - time;
     978:	4b11      	ldr	r3, [pc, #68]	; (9c0 <main+0xc0>)
     97a:	4798      	blx	r3
     97c:	1b80      	subs	r0, r0, r6
	volatile uint32_t timeus = TIME_US_MULT * time;
     97e:	4b15      	ldr	r3, [pc, #84]	; (9d4 <main+0xd4>)
     980:	4798      	blx	r3
     982:	4b15      	ldr	r3, [pc, #84]	; (9d8 <main+0xd8>)
     984:	4915      	ldr	r1, [pc, #84]	; (9dc <main+0xdc>)
     986:	4798      	blx	r3
     988:	4b15      	ldr	r3, [pc, #84]	; (9e0 <main+0xe0>)
     98a:	4798      	blx	r3
     98c:	901f      	str	r0, [sp, #124]	; 0x7c
	eeprom_read_request(&read_request, 0, usbbuffer, ARRLEN(usbbuffer));
     98e:	4a15      	ldr	r2, [pc, #84]	; (9e4 <main+0xe4>)
     990:	2380      	movs	r3, #128	; 0x80
     992:	2100      	movs	r1, #0
     994:	a815      	add	r0, sp, #84	; 0x54
     996:	4c0c      	ldr	r4, [pc, #48]	; (9c8 <main+0xc8>)
     998:	47a0      	blx	r4
	eeprom_wait_until_done(&read_request);
     99a:	a815      	add	r0, sp, #84	; 0x54
     99c:	4b0b      	ldr	r3, [pc, #44]	; (9cc <main+0xcc>)
     99e:	4798      	blx	r3
		rtos_delay_ms(1);
     9a0:	4b11      	ldr	r3, [pc, #68]	; (9e8 <main+0xe8>)
     9a2:	6818      	ldr	r0, [r3, #0]
     9a4:	4b11      	ldr	r3, [pc, #68]	; (9ec <main+0xec>)
     9a6:	4798      	blx	r3
	while (1) {
     9a8:	e7fa      	b.n	9a0 <main+0xa0>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	000007d5 	.word	0x000007d5
     9b0:	000006d1 	.word	0x000006d1
     9b4:	000027e1 	.word	0x000027e1
     9b8:	000028c9 	.word	0x000028c9
     9bc:	00000a15 	.word	0x00000a15
     9c0:	00001b2d 	.word	0x00001b2d
     9c4:	00002721 	.word	0x00002721
     9c8:	00000231 	.word	0x00000231
     9cc:	00003285 	.word	0x00003285
     9d0:	0000025d 	.word	0x0000025d
     9d4:	00004575 	.word	0x00004575
     9d8:	00003efd 	.word	0x00003efd
     9dc:	3caaaaab 	.word	0x3caaaaab
     9e0:	000037fd 	.word	0x000037fd
     9e4:	20000168 	.word	0x20000168
     9e8:	00004a6c 	.word	0x00004a6c
     9ec:	00002c49 	.word	0x00002c49

000009f0 <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
     9f0:	b510      	push	{r4, lr}
	while (1) {
        // led_on();
		request_imu_data();
     9f2:	4b04      	ldr	r3, [pc, #16]	; (a04 <navigation+0x14>)
     9f4:	4798      	blx	r3
		wait_for_imu_data();
     9f6:	4b04      	ldr	r3, [pc, #16]	; (a08 <navigation+0x18>)
     9f8:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(1);
     9fa:	4b04      	ldr	r3, [pc, #16]	; (a0c <navigation+0x1c>)
     9fc:	6818      	ldr	r0, [r3, #0]
     9fe:	4b04      	ldr	r3, [pc, #16]	; (a10 <navigation+0x20>)
     a00:	4798      	blx	r3
	while (1) {
     a02:	e7f6      	b.n	9f2 <navigation+0x2>
     a04:	00000351 	.word	0x00000351
     a08:	00000389 	.word	0x00000389
     a0c:	00004a6c 	.word	0x00004a6c
     a10:	00002c49 	.word	0x00002c49

00000a14 <start_navigation>:
	}
}

void start_navigation() {
     a14:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
     a16:	23c0      	movs	r3, #192	; 0xc0
     a18:	22a0      	movs	r2, #160	; 0xa0
     a1a:	4905      	ldr	r1, [pc, #20]	; (a30 <start_navigation+0x1c>)
     a1c:	4c05      	ldr	r4, [pc, #20]	; (a34 <start_navigation+0x20>)
     a1e:	009b      	lsls	r3, r3, #2
     a20:	0112      	lsls	r2, r2, #4
     a22:	0020      	movs	r0, r4
     a24:	4d04      	ldr	r5, [pc, #16]	; (a38 <start_navigation+0x24>)
     a26:	47a8      	blx	r5
    dispatch_process(&navigation_process);
     a28:	0020      	movs	r0, r4
     a2a:	4b04      	ldr	r3, [pc, #16]	; (a3c <start_navigation+0x28>)
     a2c:	4798      	blx	r3
     a2e:	bd70      	pop	{r4, r5, r6, pc}
     a30:	000009f1 	.word	0x000009f1
     a34:	200001e8 	.word	0x200001e8
     a38:	000027e1 	.word	0x000027e1
     a3c:	000028c9 	.word	0x000028c9

00000a40 <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
     a40:	b570      	push	{r4, r5, r6, lr}
     a42:	0004      	movs	r4, r0
     a44:	000e      	movs	r6, r1
     a46:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
     a48:	7d03      	ldrb	r3, [r0, #20]
     a4a:	7d42      	ldrb	r2, [r0, #21]
     a4c:	0212      	lsls	r2, r2, #8
     a4e:	431a      	orrs	r2, r3
     a50:	7d83      	ldrb	r3, [r0, #22]
     a52:	041b      	lsls	r3, r3, #16
     a54:	4313      	orrs	r3, r2
     a56:	7dc1      	ldrb	r1, [r0, #23]
     a58:	0609      	lsls	r1, r1, #24
     a5a:	4319      	orrs	r1, r3
     a5c:	7e00      	ldrb	r0, [r0, #24]
     a5e:	4b11      	ldr	r3, [pc, #68]	; (aa4 <baro_send_command+0x64>)
     a60:	4798      	blx	r3
	spi_command(desc->sercom, command);
     a62:	7c23      	ldrb	r3, [r4, #16]
     a64:	7c62      	ldrb	r2, [r4, #17]
     a66:	0212      	lsls	r2, r2, #8
     a68:	431a      	orrs	r2, r3
     a6a:	7ca3      	ldrb	r3, [r4, #18]
     a6c:	041b      	lsls	r3, r3, #16
     a6e:	4313      	orrs	r3, r2
     a70:	7ce0      	ldrb	r0, [r4, #19]
     a72:	0600      	lsls	r0, r0, #24
     a74:	4318      	orrs	r0, r3
     a76:	0031      	movs	r1, r6
     a78:	4b0b      	ldr	r3, [pc, #44]	; (aa8 <baro_send_command+0x68>)
     a7a:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
     a7c:	7d23      	ldrb	r3, [r4, #20]
     a7e:	7d62      	ldrb	r2, [r4, #21]
     a80:	0212      	lsls	r2, r2, #8
     a82:	431a      	orrs	r2, r3
     a84:	7da3      	ldrb	r3, [r4, #22]
     a86:	041b      	lsls	r3, r3, #16
     a88:	4313      	orrs	r3, r2
     a8a:	7de1      	ldrb	r1, [r4, #23]
     a8c:	0609      	lsls	r1, r1, #24
     a8e:	4319      	orrs	r1, r3
     a90:	7e20      	ldrb	r0, [r4, #24]
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <baro_send_command+0x6c>)
     a94:	4798      	blx	r3
	delay_us(delay);
     a96:	0068      	lsls	r0, r5, #1
     a98:	1940      	adds	r0, r0, r5
     a9a:	0040      	lsls	r0, r0, #1
     a9c:	4b04      	ldr	r3, [pc, #16]	; (ab0 <baro_send_command+0x70>)
     a9e:	4798      	blx	r3
}
     aa0:	bd70      	pop	{r4, r5, r6, pc}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	000014f5 	.word	0x000014f5
     aa8:	000019d1 	.word	0x000019d1
     aac:	000014e5 	.word	0x000014e5
     ab0:	00001ab5 	.word	0x00001ab5

00000ab4 <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
     ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ab6:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
     ab8:	26a0      	movs	r6, #160	; 0xa0
     aba:	e047      	b.n	b4c <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
     abc:	7d23      	ldrb	r3, [r4, #20]
     abe:	7d62      	ldrb	r2, [r4, #21]
     ac0:	0212      	lsls	r2, r2, #8
     ac2:	431a      	orrs	r2, r3
     ac4:	7da3      	ldrb	r3, [r4, #22]
     ac6:	041b      	lsls	r3, r3, #16
     ac8:	4313      	orrs	r3, r2
     aca:	7de1      	ldrb	r1, [r4, #23]
     acc:	0609      	lsls	r1, r1, #24
     ace:	4319      	orrs	r1, r3
     ad0:	7e20      	ldrb	r0, [r4, #24]
     ad2:	4b20      	ldr	r3, [pc, #128]	; (b54 <baro_read_prom+0xa0>)
     ad4:	4798      	blx	r3
		spi_command(desc->sercom, addr);
     ad6:	7c23      	ldrb	r3, [r4, #16]
     ad8:	7c62      	ldrb	r2, [r4, #17]
     ada:	0212      	lsls	r2, r2, #8
     adc:	431a      	orrs	r2, r3
     ade:	7ca3      	ldrb	r3, [r4, #18]
     ae0:	041b      	lsls	r3, r3, #16
     ae2:	4313      	orrs	r3, r2
     ae4:	7ce0      	ldrb	r0, [r4, #19]
     ae6:	0600      	lsls	r0, r0, #24
     ae8:	4318      	orrs	r0, r3
     aea:	0031      	movs	r1, r6
     aec:	4f1a      	ldr	r7, [pc, #104]	; (b58 <baro_read_prom+0xa4>)
     aee:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
     af0:	7c23      	ldrb	r3, [r4, #16]
     af2:	7c62      	ldrb	r2, [r4, #17]
     af4:	0212      	lsls	r2, r2, #8
     af6:	431a      	orrs	r2, r3
     af8:	7ca3      	ldrb	r3, [r4, #18]
     afa:	041b      	lsls	r3, r3, #16
     afc:	4313      	orrs	r3, r2
     afe:	7ce0      	ldrb	r0, [r4, #19]
     b00:	0600      	lsls	r0, r0, #24
     b02:	4318      	orrs	r0, r3
     b04:	2100      	movs	r1, #0
     b06:	47b8      	blx	r7
     b08:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
     b0a:	7c23      	ldrb	r3, [r4, #16]
     b0c:	7c62      	ldrb	r2, [r4, #17]
     b0e:	0212      	lsls	r2, r2, #8
     b10:	431a      	orrs	r2, r3
     b12:	7ca3      	ldrb	r3, [r4, #18]
     b14:	041b      	lsls	r3, r3, #16
     b16:	4313      	orrs	r3, r2
     b18:	7ce0      	ldrb	r0, [r4, #19]
     b1a:	0600      	lsls	r0, r0, #24
     b1c:	4318      	orrs	r0, r3
     b1e:	2100      	movs	r1, #0
     b20:	47b8      	blx	r7
     b22:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
     b24:	7d23      	ldrb	r3, [r4, #20]
     b26:	7d62      	ldrb	r2, [r4, #21]
     b28:	0212      	lsls	r2, r2, #8
     b2a:	431a      	orrs	r2, r3
     b2c:	7da3      	ldrb	r3, [r4, #22]
     b2e:	041b      	lsls	r3, r3, #16
     b30:	4313      	orrs	r3, r2
     b32:	7de1      	ldrb	r1, [r4, #23]
     b34:	0609      	lsls	r1, r1, #24
     b36:	4319      	orrs	r1, r3
     b38:	7e20      	ldrb	r0, [r4, #24]
     b3a:	4b08      	ldr	r3, [pc, #32]	; (b5c <baro_read_prom+0xa8>)
     b3c:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
     b3e:	0033      	movs	r3, r6
     b40:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
     b42:	022d      	lsls	r5, r5, #8
     b44:	433d      	orrs	r5, r7
     b46:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
     b48:	3602      	adds	r6, #2
     b4a:	b2f6      	uxtb	r6, r6
     b4c:	2eae      	cmp	r6, #174	; 0xae
     b4e:	d9b5      	bls.n	abc <baro_read_prom+0x8>
}
     b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	000014f5 	.word	0x000014f5
     b58:	000019d1 	.word	0x000019d1
     b5c:	000014e5 	.word	0x000014e5

00000b60 <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
     b60:	b530      	push	{r4, r5, lr}
     b62:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
     b64:	7b83      	ldrb	r3, [r0, #14]
     b66:	7bc5      	ldrb	r5, [r0, #15]
     b68:	022d      	lsls	r5, r5, #8
     b6a:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
     b6c:	23ff      	movs	r3, #255	; 0xff
     b6e:	002a      	movs	r2, r5
     b70:	439a      	bics	r2, r3
     b72:	0013      	movs	r3, r2
     b74:	2200      	movs	r2, #0
     b76:	7382      	strb	r2, [r0, #14]
     b78:	0a1b      	lsrs	r3, r3, #8
     b7a:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
     b7c:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
     b7e:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
     b80:	e014      	b.n	bac <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
     b82:	1042      	asrs	r2, r0, #1
     b84:	0052      	lsls	r2, r2, #1
     b86:	5aa2      	ldrh	r2, [r4, r2]
     b88:	0a12      	lsrs	r2, r2, #8
     b8a:	e018      	b.n	bbe <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
     b8c:	005b      	lsls	r3, r3, #1
     b8e:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
     b90:	3201      	adds	r2, #1
     b92:	2a07      	cmp	r2, #7
     b94:	dc09      	bgt.n	baa <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
     b96:	b219      	sxth	r1, r3
     b98:	2900      	cmp	r1, #0
     b9a:	daf7      	bge.n	b8c <baro_check+0x2c>
     b9c:	0059      	lsls	r1, r3, #1
     b9e:	23c0      	movs	r3, #192	; 0xc0
     ba0:	019b      	lsls	r3, r3, #6
     ba2:	404b      	eors	r3, r1
     ba4:	b21b      	sxth	r3, r3
     ba6:	b29b      	uxth	r3, r3
     ba8:	e7f2      	b.n	b90 <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
     baa:	3001      	adds	r0, #1
     bac:	280f      	cmp	r0, #15
     bae:	dc09      	bgt.n	bc4 <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
     bb0:	07c2      	lsls	r2, r0, #31
     bb2:	d5e6      	bpl.n	b82 <baro_check+0x22>
     bb4:	1042      	asrs	r2, r0, #1
     bb6:	0052      	lsls	r2, r2, #1
     bb8:	5aa1      	ldrh	r1, [r4, r2]
     bba:	22ff      	movs	r2, #255	; 0xff
     bbc:	400a      	ands	r2, r1
		n_rem ^= byte;
     bbe:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
     bc0:	2200      	movs	r2, #0
     bc2:	e7e6      	b.n	b92 <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
     bc4:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
     bc6:	73a5      	strb	r5, [r4, #14]
     bc8:	0a2a      	lsrs	r2, r5, #8
     bca:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
     bcc:	200f      	movs	r0, #15
     bce:	4028      	ands	r0, r5
     bd0:	1ac0      	subs	r0, r0, r3
     bd2:	4243      	negs	r3, r0
     bd4:	4158      	adcs	r0, r3
     bd6:	b2c0      	uxtb	r0, r0
}
     bd8:	bd30      	pop	{r4, r5, pc}
	...

00000bdc <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
     bdc:	b570      	push	{r4, r5, r6, lr}
     bde:	b082      	sub	sp, #8
     be0:	0005      	movs	r5, r0
     be2:	000c      	movs	r4, r1
     be4:	9200      	str	r2, [sp, #0]
     be6:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
     be8:	0008      	movs	r0, r1
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <baro_init+0x48>)
     bec:	4798      	blx	r3
     bee:	1e06      	subs	r6, r0, #0
     bf0:	d102      	bne.n	bf8 <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
     bf2:	0030      	movs	r0, r6
     bf4:	b002      	add	sp, #8
     bf6:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
     bf8:	742c      	strb	r4, [r5, #16]
     bfa:	0a23      	lsrs	r3, r4, #8
     bfc:	746b      	strb	r3, [r5, #17]
     bfe:	0c23      	lsrs	r3, r4, #16
     c00:	74ab      	strb	r3, [r5, #18]
     c02:	0e24      	lsrs	r4, r4, #24
     c04:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
     c06:	0028      	movs	r0, r5
     c08:	3014      	adds	r0, #20
     c0a:	2205      	movs	r2, #5
     c0c:	4669      	mov	r1, sp
     c0e:	4b06      	ldr	r3, [pc, #24]	; (c28 <baro_init+0x4c>)
     c10:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
     c12:	4a06      	ldr	r2, [pc, #24]	; (c2c <baro_init+0x50>)
     c14:	211e      	movs	r1, #30
     c16:	0028      	movs	r0, r5
     c18:	4b05      	ldr	r3, [pc, #20]	; (c30 <baro_init+0x54>)
     c1a:	4798      	blx	r3
	baro_read_prom(desc);
     c1c:	0028      	movs	r0, r5
     c1e:	4b05      	ldr	r3, [pc, #20]	; (c34 <baro_init+0x58>)
     c20:	4798      	blx	r3
	return true;
     c22:	e7e6      	b.n	bf2 <baro_init+0x16>
     c24:	000017e1 	.word	0x000017e1
     c28:	0000472d 	.word	0x0000472d
     c2c:	00000bb8 	.word	0x00000bb8
     c30:	00000a41 	.word	0x00000a41
     c34:	00000ab5 	.word	0x00000ab5

00000c38 <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
     c38:	280b      	cmp	r0, #11
     c3a:	d804      	bhi.n	c46 <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
     c3c:	4a03      	ldr	r2, [pc, #12]	; (c4c <dma_set_channel+0x14>)
     c3e:	233f      	movs	r3, #63	; 0x3f
     c40:	54d0      	strb	r0, [r2, r3]
		return true;
     c42:	2001      	movs	r0, #1
	}
	else return false;
}
     c44:	4770      	bx	lr
	else return false;
     c46:	2000      	movs	r0, #0
     c48:	e7fc      	b.n	c44 <dma_set_channel+0xc>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	41004800 	.word	0x41004800

00000c50 <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
     c50:	4b07      	ldr	r3, [pc, #28]	; (c70 <dma_init+0x20>)
     c52:	695a      	ldr	r2, [r3, #20]
     c54:	2120      	movs	r1, #32
     c56:	430a      	orrs	r2, r1
     c58:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
     c5a:	69da      	ldr	r2, [r3, #28]
     c5c:	430a      	orrs	r2, r1
     c5e:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
     c60:	4a04      	ldr	r2, [pc, #16]	; (c74 <dma_init+0x24>)
     c62:	4b05      	ldr	r3, [pc, #20]	; (c78 <dma_init+0x28>)
     c64:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
     c66:	4a05      	ldr	r2, [pc, #20]	; (c7c <dma_init+0x2c>)
     c68:	639a      	str	r2, [r3, #56]	; 0x38
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
     c6a:	4a05      	ldr	r2, [pc, #20]	; (c80 <dma_init+0x30>)
     c6c:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
     c6e:	4770      	bx	lr
     c70:	40000400 	.word	0x40000400
     c74:	20000340 	.word	0x20000340
     c78:	41004800 	.word	0x41004800
     c7c:	200002a0 	.word	0x200002a0
     c80:	00000f02 	.word	0x00000f02

00000c84 <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	ac05      	add	r4, sp, #20
     c88:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
     c8a:	2b02      	cmp	r3, #2
     c8c:	d82d      	bhi.n	cea <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
     c8e:	2900      	cmp	r1, #0
     c90:	d023      	beq.n	cda <dma_create_descriptor+0x56>
     c92:	2480      	movs	r4, #128	; 0x80
     c94:	00e4      	lsls	r4, r4, #3
     c96:	2a00      	cmp	r2, #0
     c98:	d021      	beq.n	cde <dma_create_descriptor+0x5a>
     c9a:	2580      	movs	r5, #128	; 0x80
     c9c:	012d      	lsls	r5, r5, #4
     c9e:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
     ca0:	021d      	lsls	r5, r3, #8
     ca2:	27c0      	movs	r7, #192	; 0xc0
     ca4:	00bf      	lsls	r7, r7, #2
     ca6:	403d      	ands	r5, r7
     ca8:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
     caa:	2501      	movs	r5, #1
     cac:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
     cae:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
     cb0:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
     cb2:	2900      	cmp	r1, #0
     cb4:	d015      	beq.n	ce2 <dma_create_descriptor+0x5e>
     cb6:	1c59      	adds	r1, r3, #1
     cb8:	4371      	muls	r1, r6
     cba:	9c06      	ldr	r4, [sp, #24]
     cbc:	46a4      	mov	ip, r4
     cbe:	4461      	add	r1, ip
     cc0:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
     cc2:	2a00      	cmp	r2, #0
     cc4:	d00f      	beq.n	ce6 <dma_create_descriptor+0x62>
     cc6:	3301      	adds	r3, #1
     cc8:	4373      	muls	r3, r6
     cca:	9a07      	ldr	r2, [sp, #28]
     ccc:	4694      	mov	ip, r2
     cce:	4463      	add	r3, ip
     cd0:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
     cd2:	9b08      	ldr	r3, [sp, #32]
     cd4:	60c3      	str	r3, [r0, #12]
	
	return true;
     cd6:	2001      	movs	r0, #1
}
     cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
     cda:	2400      	movs	r4, #0
     cdc:	e7db      	b.n	c96 <dma_create_descriptor+0x12>
     cde:	2500      	movs	r5, #0
     ce0:	e7dd      	b.n	c9e <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
     ce2:	9906      	ldr	r1, [sp, #24]
     ce4:	e7ec      	b.n	cc0 <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
     ce6:	9b07      	ldr	r3, [sp, #28]
     ce8:	e7f2      	b.n	cd0 <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
     cea:	2000      	movs	r0, #0
     cec:	e7f4      	b.n	cd8 <dma_create_descriptor+0x54>
	...

00000cf0 <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
     cf0:	b570      	push	{r4, r5, r6, lr}
     cf2:	000c      	movs	r4, r1
     cf4:	0015      	movs	r5, r2
     cf6:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
     cf8:	4b0e      	ldr	r3, [pc, #56]	; (d34 <dma_init_channel+0x44>)
     cfa:	4798      	blx	r3
     cfc:	2800      	cmp	r0, #0
     cfe:	d012      	beq.n	d26 <dma_init_channel+0x36>
	if (priority > 3) return false;
     d00:	2e03      	cmp	r6, #3
     d02:	d811      	bhi.n	d28 <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
     d04:	2c03      	cmp	r4, #3
     d06:	d811      	bhi.n	d2c <dma_init_channel+0x3c>
     d08:	2c01      	cmp	r4, #1
     d0a:	d011      	beq.n	d30 <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
     d0c:	05a4      	lsls	r4, r4, #22
     d0e:	23c0      	movs	r3, #192	; 0xc0
     d10:	041b      	lsls	r3, r3, #16
     d12:	401c      	ands	r4, r3
     d14:	022d      	lsls	r5, r5, #8
     d16:	23fc      	movs	r3, #252	; 0xfc
     d18:	019b      	lsls	r3, r3, #6
     d1a:	401d      	ands	r5, r3
     d1c:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
     d1e:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
     d20:	4334      	orrs	r4, r6
     d22:	4a05      	ldr	r2, [pc, #20]	; (d38 <dma_init_channel+0x48>)
     d24:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
     d26:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
     d28:	2000      	movs	r0, #0
     d2a:	e7fc      	b.n	d26 <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
     d2c:	2000      	movs	r0, #0
     d2e:	e7fa      	b.n	d26 <dma_init_channel+0x36>
     d30:	2000      	movs	r0, #0
     d32:	e7f8      	b.n	d26 <dma_init_channel+0x36>
     d34:	00000c39 	.word	0x00000c39
     d38:	41004800 	.word	0x41004800

00000d3c <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
     d3c:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
     d3e:	4b07      	ldr	r3, [pc, #28]	; (d5c <dma_enable_channel+0x20>)
     d40:	4798      	blx	r3
     d42:	2800      	cmp	r0, #0
     d44:	d009      	beq.n	d5a <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
     d46:	4a06      	ldr	r2, [pc, #24]	; (d60 <dma_enable_channel+0x24>)
     d48:	234e      	movs	r3, #78	; 0x4e
     d4a:	2102      	movs	r1, #2
     d4c:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
     d4e:	313e      	adds	r1, #62	; 0x3e
     d50:	5c53      	ldrb	r3, [r2, r1]
     d52:	2402      	movs	r4, #2
     d54:	4323      	orrs	r3, r4
     d56:	b2db      	uxtb	r3, r3
     d58:	5453      	strb	r3, [r2, r1]
	return true;
}
     d5a:	bd10      	pop	{r4, pc}
     d5c:	00000c39 	.word	0x00000c39
     d60:	41004800 	.word	0x41004800

00000d64 <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
     d64:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
     d66:	4b05      	ldr	r3, [pc, #20]	; (d7c <dma_disable_channel+0x18>)
     d68:	4798      	blx	r3
     d6a:	2800      	cmp	r0, #0
     d6c:	d005      	beq.n	d7a <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
     d6e:	4904      	ldr	r1, [pc, #16]	; (d80 <dma_disable_channel+0x1c>)
     d70:	2240      	movs	r2, #64	; 0x40
     d72:	5c8b      	ldrb	r3, [r1, r2]
     d74:	2402      	movs	r4, #2
     d76:	43a3      	bics	r3, r4
     d78:	548b      	strb	r3, [r1, r2]
	return true;
}
     d7a:	bd10      	pop	{r4, pc}
     d7c:	00000c39 	.word	0x00000c39
     d80:	41004800 	.word	0x41004800

00000d84 <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
     d84:	b530      	push	{r4, r5, lr}
     d86:	b083      	sub	sp, #12
     d88:	0004      	movs	r4, r0
     d8a:	9200      	str	r2, [sp, #0]
     d8c:	9301      	str	r3, [sp, #4]
     d8e:	ab06      	add	r3, sp, #24
     d90:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
     d92:	7001      	strb	r1, [r0, #0]
     d94:	0a0b      	lsrs	r3, r1, #8
     d96:	7043      	strb	r3, [r0, #1]
     d98:	0c0b      	lsrs	r3, r1, #16
     d9a:	7083      	strb	r3, [r0, #2]
     d9c:	0e09      	lsrs	r1, r1, #24
     d9e:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
     da0:	3004      	adds	r0, #4
     da2:	2205      	movs	r2, #5
     da4:	4669      	mov	r1, sp
     da6:	4b10      	ldr	r3, [pc, #64]	; (de8 <eeprom_init+0x64>)
     da8:	4798      	blx	r3
	desc->size = size;
     daa:	7265      	strb	r5, [r4, #9]
     dac:	0a2d      	lsrs	r5, r5, #8
     dae:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
     db0:	7923      	ldrb	r3, [r4, #4]
     db2:	7962      	ldrb	r2, [r4, #5]
     db4:	0212      	lsls	r2, r2, #8
     db6:	431a      	orrs	r2, r3
     db8:	79a3      	ldrb	r3, [r4, #6]
     dba:	041b      	lsls	r3, r3, #16
     dbc:	4313      	orrs	r3, r2
     dbe:	79e1      	ldrb	r1, [r4, #7]
     dc0:	0609      	lsls	r1, r1, #24
     dc2:	4319      	orrs	r1, r3
     dc4:	7a20      	ldrb	r0, [r4, #8]
     dc6:	4b09      	ldr	r3, [pc, #36]	; (dec <eeprom_init+0x68>)
     dc8:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
     dca:	7923      	ldrb	r3, [r4, #4]
     dcc:	7962      	ldrb	r2, [r4, #5]
     dce:	0212      	lsls	r2, r2, #8
     dd0:	431a      	orrs	r2, r3
     dd2:	79a3      	ldrb	r3, [r4, #6]
     dd4:	041b      	lsls	r3, r3, #16
     dd6:	4313      	orrs	r3, r2
     dd8:	79e1      	ldrb	r1, [r4, #7]
     dda:	0609      	lsls	r1, r1, #24
     ddc:	4319      	orrs	r1, r3
     dde:	7a20      	ldrb	r0, [r4, #8]
     de0:	4b03      	ldr	r3, [pc, #12]	; (df0 <eeprom_init+0x6c>)
     de2:	4798      	blx	r3
}
     de4:	b003      	add	sp, #12
     de6:	bd30      	pop	{r4, r5, pc}
     de8:	0000472d 	.word	0x0000472d
     dec:	000014d5 	.word	0x000014d5
     df0:	000014e5 	.word	0x000014e5

00000df4 <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
     df4:	b510      	push	{r4, lr}
     df6:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
     df8:	7903      	ldrb	r3, [r0, #4]
     dfa:	7942      	ldrb	r2, [r0, #5]
     dfc:	0212      	lsls	r2, r2, #8
     dfe:	431a      	orrs	r2, r3
     e00:	7983      	ldrb	r3, [r0, #6]
     e02:	041b      	lsls	r3, r3, #16
     e04:	4313      	orrs	r3, r2
     e06:	79c1      	ldrb	r1, [r0, #7]
     e08:	0609      	lsls	r1, r1, #24
     e0a:	4319      	orrs	r1, r3
     e0c:	7a00      	ldrb	r0, [r0, #8]
     e0e:	4b0e      	ldr	r3, [pc, #56]	; (e48 <eeprom_write_enable+0x54>)
     e10:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
     e12:	7823      	ldrb	r3, [r4, #0]
     e14:	7862      	ldrb	r2, [r4, #1]
     e16:	0212      	lsls	r2, r2, #8
     e18:	431a      	orrs	r2, r3
     e1a:	78a3      	ldrb	r3, [r4, #2]
     e1c:	041b      	lsls	r3, r3, #16
     e1e:	4313      	orrs	r3, r2
     e20:	78e0      	ldrb	r0, [r4, #3]
     e22:	0600      	lsls	r0, r0, #24
     e24:	4318      	orrs	r0, r3
     e26:	2106      	movs	r1, #6
     e28:	4b08      	ldr	r3, [pc, #32]	; (e4c <eeprom_write_enable+0x58>)
     e2a:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
     e2c:	7923      	ldrb	r3, [r4, #4]
     e2e:	7962      	ldrb	r2, [r4, #5]
     e30:	0212      	lsls	r2, r2, #8
     e32:	431a      	orrs	r2, r3
     e34:	79a3      	ldrb	r3, [r4, #6]
     e36:	041b      	lsls	r3, r3, #16
     e38:	4313      	orrs	r3, r2
     e3a:	79e1      	ldrb	r1, [r4, #7]
     e3c:	0609      	lsls	r1, r1, #24
     e3e:	4319      	orrs	r1, r3
     e40:	7a20      	ldrb	r0, [r4, #8]
     e42:	4b03      	ldr	r3, [pc, #12]	; (e50 <eeprom_write_enable+0x5c>)
     e44:	4798      	blx	r3
}
     e46:	bd10      	pop	{r4, pc}
     e48:	000014f5 	.word	0x000014f5
     e4c:	000019d1 	.word	0x000019d1
     e50:	000014e5 	.word	0x000014e5

00000e54 <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
     e54:	b510      	push	{r4, lr}
     e56:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
     e58:	7903      	ldrb	r3, [r0, #4]
     e5a:	7942      	ldrb	r2, [r0, #5]
     e5c:	0212      	lsls	r2, r2, #8
     e5e:	431a      	orrs	r2, r3
     e60:	7983      	ldrb	r3, [r0, #6]
     e62:	041b      	lsls	r3, r3, #16
     e64:	4313      	orrs	r3, r2
     e66:	79c1      	ldrb	r1, [r0, #7]
     e68:	0609      	lsls	r1, r1, #24
     e6a:	4319      	orrs	r1, r3
     e6c:	7a00      	ldrb	r0, [r0, #8]
     e6e:	4b0e      	ldr	r3, [pc, #56]	; (ea8 <eeprom_write_disable+0x54>)
     e70:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
     e72:	7823      	ldrb	r3, [r4, #0]
     e74:	7862      	ldrb	r2, [r4, #1]
     e76:	0212      	lsls	r2, r2, #8
     e78:	431a      	orrs	r2, r3
     e7a:	78a3      	ldrb	r3, [r4, #2]
     e7c:	041b      	lsls	r3, r3, #16
     e7e:	4313      	orrs	r3, r2
     e80:	78e0      	ldrb	r0, [r4, #3]
     e82:	0600      	lsls	r0, r0, #24
     e84:	4318      	orrs	r0, r3
     e86:	2104      	movs	r1, #4
     e88:	4b08      	ldr	r3, [pc, #32]	; (eac <eeprom_write_disable+0x58>)
     e8a:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
     e8c:	7923      	ldrb	r3, [r4, #4]
     e8e:	7962      	ldrb	r2, [r4, #5]
     e90:	0212      	lsls	r2, r2, #8
     e92:	431a      	orrs	r2, r3
     e94:	79a3      	ldrb	r3, [r4, #6]
     e96:	041b      	lsls	r3, r3, #16
     e98:	4313      	orrs	r3, r2
     e9a:	79e1      	ldrb	r1, [r4, #7]
     e9c:	0609      	lsls	r1, r1, #24
     e9e:	4319      	orrs	r1, r3
     ea0:	7a20      	ldrb	r0, [r4, #8]
     ea2:	4b03      	ldr	r3, [pc, #12]	; (eb0 <eeprom_write_disable+0x5c>)
     ea4:	4798      	blx	r3
}
     ea6:	bd10      	pop	{r4, pc}
     ea8:	000014f5 	.word	0x000014f5
     eac:	000019d1 	.word	0x000019d1
     eb0:	000014e5 	.word	0x000014e5

00000eb4 <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
     eb4:	b570      	push	{r4, r5, r6, lr}
     eb6:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
     eb8:	7903      	ldrb	r3, [r0, #4]
     eba:	7942      	ldrb	r2, [r0, #5]
     ebc:	0212      	lsls	r2, r2, #8
     ebe:	431a      	orrs	r2, r3
     ec0:	7983      	ldrb	r3, [r0, #6]
     ec2:	041b      	lsls	r3, r3, #16
     ec4:	4313      	orrs	r3, r2
     ec6:	79c1      	ldrb	r1, [r0, #7]
     ec8:	0609      	lsls	r1, r1, #24
     eca:	4319      	orrs	r1, r3
     ecc:	7a00      	ldrb	r0, [r0, #8]
     ece:	4b15      	ldr	r3, [pc, #84]	; (f24 <eeprom_read_status+0x70>)
     ed0:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
     ed2:	7823      	ldrb	r3, [r4, #0]
     ed4:	7862      	ldrb	r2, [r4, #1]
     ed6:	0212      	lsls	r2, r2, #8
     ed8:	431a      	orrs	r2, r3
     eda:	78a3      	ldrb	r3, [r4, #2]
     edc:	041b      	lsls	r3, r3, #16
     ede:	4313      	orrs	r3, r2
     ee0:	78e0      	ldrb	r0, [r4, #3]
     ee2:	0600      	lsls	r0, r0, #24
     ee4:	4318      	orrs	r0, r3
     ee6:	2105      	movs	r1, #5
     ee8:	4d0f      	ldr	r5, [pc, #60]	; (f28 <eeprom_read_status+0x74>)
     eea:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
     eec:	7823      	ldrb	r3, [r4, #0]
     eee:	7862      	ldrb	r2, [r4, #1]
     ef0:	0212      	lsls	r2, r2, #8
     ef2:	431a      	orrs	r2, r3
     ef4:	78a3      	ldrb	r3, [r4, #2]
     ef6:	041b      	lsls	r3, r3, #16
     ef8:	4313      	orrs	r3, r2
     efa:	78e0      	ldrb	r0, [r4, #3]
     efc:	0600      	lsls	r0, r0, #24
     efe:	4318      	orrs	r0, r3
     f00:	2100      	movs	r1, #0
     f02:	47a8      	blx	r5
     f04:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
     f06:	7923      	ldrb	r3, [r4, #4]
     f08:	7962      	ldrb	r2, [r4, #5]
     f0a:	0212      	lsls	r2, r2, #8
     f0c:	431a      	orrs	r2, r3
     f0e:	79a3      	ldrb	r3, [r4, #6]
     f10:	041b      	lsls	r3, r3, #16
     f12:	4313      	orrs	r3, r2
     f14:	79e1      	ldrb	r1, [r4, #7]
     f16:	0609      	lsls	r1, r1, #24
     f18:	4319      	orrs	r1, r3
     f1a:	7a20      	ldrb	r0, [r4, #8]
     f1c:	4b03      	ldr	r3, [pc, #12]	; (f2c <eeprom_read_status+0x78>)
     f1e:	4798      	blx	r3
}
     f20:	0028      	movs	r0, r5
     f22:	bd70      	pop	{r4, r5, r6, pc}
     f24:	000014f5 	.word	0x000014f5
     f28:	000019d1 	.word	0x000019d1
     f2c:	000014e5 	.word	0x000014e5

00000f30 <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
     f30:	b510      	push	{r4, lr}
     f32:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
     f34:	4b0a      	ldr	r3, [pc, #40]	; (f60 <eeprom_check+0x30>)
     f36:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
     f38:	0020      	movs	r0, r4
     f3a:	4b0a      	ldr	r3, [pc, #40]	; (f64 <eeprom_check+0x34>)
     f3c:	4798      	blx	r3
     f3e:	0780      	lsls	r0, r0, #30
     f40:	d401      	bmi.n	f46 <eeprom_check+0x16>
     f42:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
     f44:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
     f46:	0020      	movs	r0, r4
     f48:	4b07      	ldr	r3, [pc, #28]	; (f68 <eeprom_check+0x38>)
     f4a:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
     f4c:	0020      	movs	r0, r4
     f4e:	4b05      	ldr	r3, [pc, #20]	; (f64 <eeprom_check+0x34>)
     f50:	4798      	blx	r3
     f52:	0780      	lsls	r0, r0, #30
     f54:	d401      	bmi.n	f5a <eeprom_check+0x2a>
	return true;
     f56:	2001      	movs	r0, #1
     f58:	e7f4      	b.n	f44 <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
     f5a:	2000      	movs	r0, #0
     f5c:	e7f2      	b.n	f44 <eeprom_check+0x14>
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	00000df5 	.word	0x00000df5
     f64:	00000eb5 	.word	0x00000eb5
     f68:	00000e55 	.word	0x00000e55

00000f6c <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
     f6c:	b570      	push	{r4, r5, r6, lr}
     f6e:	b082      	sub	sp, #8
     f70:	0004      	movs	r4, r0
     f72:	9200      	str	r2, [sp, #0]
     f74:	9301      	str	r3, [sp, #4]
     f76:	ab06      	add	r3, sp, #24
     f78:	cb20      	ldmia	r3!, {r5}
     f7a:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
     f7c:	7001      	strb	r1, [r0, #0]
     f7e:	0a0b      	lsrs	r3, r1, #8
     f80:	7043      	strb	r3, [r0, #1]
     f82:	0c0b      	lsrs	r3, r1, #16
     f84:	7083      	strb	r3, [r0, #2]
     f86:	0e09      	lsrs	r1, r1, #24
     f88:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
     f8a:	3008      	adds	r0, #8
     f8c:	2205      	movs	r2, #5
     f8e:	4669      	mov	r1, sp
     f90:	4b15      	ldr	r3, [pc, #84]	; (fe8 <flash_init+0x7c>)
     f92:	4798      	blx	r3
	desc->size = size;
     f94:	7125      	strb	r5, [r4, #4]
     f96:	0a2b      	lsrs	r3, r5, #8
     f98:	7163      	strb	r3, [r4, #5]
     f9a:	0c2b      	lsrs	r3, r5, #16
     f9c:	71a3      	strb	r3, [r4, #6]
     f9e:	0e2d      	lsrs	r5, r5, #24
     fa0:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
     fa2:	221f      	movs	r2, #31
     fa4:	4032      	ands	r2, r6
     fa6:	7b63      	ldrb	r3, [r4, #13]
     fa8:	211f      	movs	r1, #31
     faa:	438b      	bics	r3, r1
     fac:	4313      	orrs	r3, r2
     fae:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
     fb0:	7a23      	ldrb	r3, [r4, #8]
     fb2:	7a62      	ldrb	r2, [r4, #9]
     fb4:	0212      	lsls	r2, r2, #8
     fb6:	431a      	orrs	r2, r3
     fb8:	7aa3      	ldrb	r3, [r4, #10]
     fba:	041b      	lsls	r3, r3, #16
     fbc:	4313      	orrs	r3, r2
     fbe:	7ae1      	ldrb	r1, [r4, #11]
     fc0:	0609      	lsls	r1, r1, #24
     fc2:	4319      	orrs	r1, r3
     fc4:	7b20      	ldrb	r0, [r4, #12]
     fc6:	4b09      	ldr	r3, [pc, #36]	; (fec <flash_init+0x80>)
     fc8:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
     fca:	7a23      	ldrb	r3, [r4, #8]
     fcc:	7a62      	ldrb	r2, [r4, #9]
     fce:	0212      	lsls	r2, r2, #8
     fd0:	431a      	orrs	r2, r3
     fd2:	7aa3      	ldrb	r3, [r4, #10]
     fd4:	041b      	lsls	r3, r3, #16
     fd6:	4313      	orrs	r3, r2
     fd8:	7ae1      	ldrb	r1, [r4, #11]
     fda:	0609      	lsls	r1, r1, #24
     fdc:	4319      	orrs	r1, r3
     fde:	7b20      	ldrb	r0, [r4, #12]
     fe0:	4b03      	ldr	r3, [pc, #12]	; (ff0 <flash_init+0x84>)
     fe2:	4798      	blx	r3
}
     fe4:	b002      	add	sp, #8
     fe6:	bd70      	pop	{r4, r5, r6, pc}
     fe8:	0000472d 	.word	0x0000472d
     fec:	000014d5 	.word	0x000014d5
     ff0:	000014e5 	.word	0x000014e5

00000ff4 <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
     ff4:	b530      	push	{r4, r5, lr}
     ff6:	b083      	sub	sp, #12
     ff8:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
     ffa:	7a03      	ldrb	r3, [r0, #8]
     ffc:	7a42      	ldrb	r2, [r0, #9]
     ffe:	0212      	lsls	r2, r2, #8
    1000:	431a      	orrs	r2, r3
    1002:	7a83      	ldrb	r3, [r0, #10]
    1004:	041b      	lsls	r3, r3, #16
    1006:	4313      	orrs	r3, r2
    1008:	7ac1      	ldrb	r1, [r0, #11]
    100a:	0609      	lsls	r1, r1, #24
    100c:	4319      	orrs	r1, r3
    100e:	7b00      	ldrb	r0, [r0, #12]
    1010:	4b24      	ldr	r3, [pc, #144]	; (10a4 <flash_check+0xb0>)
    1012:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    1014:	7823      	ldrb	r3, [r4, #0]
    1016:	7862      	ldrb	r2, [r4, #1]
    1018:	0212      	lsls	r2, r2, #8
    101a:	431a      	orrs	r2, r3
    101c:	78a3      	ldrb	r3, [r4, #2]
    101e:	041b      	lsls	r3, r3, #16
    1020:	4313      	orrs	r3, r2
    1022:	78e0      	ldrb	r0, [r4, #3]
    1024:	0600      	lsls	r0, r0, #24
    1026:	4318      	orrs	r0, r3
    1028:	219f      	movs	r1, #159	; 0x9f
    102a:	4b1f      	ldr	r3, [pc, #124]	; (10a8 <flash_check+0xb4>)
    102c:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    102e:	2500      	movs	r5, #0
    1030:	e00f      	b.n	1052 <flash_check+0x5e>
    1032:	7823      	ldrb	r3, [r4, #0]
    1034:	7862      	ldrb	r2, [r4, #1]
    1036:	0212      	lsls	r2, r2, #8
    1038:	431a      	orrs	r2, r3
    103a:	78a3      	ldrb	r3, [r4, #2]
    103c:	041b      	lsls	r3, r3, #16
    103e:	4313      	orrs	r3, r2
    1040:	78e0      	ldrb	r0, [r4, #3]
    1042:	0600      	lsls	r0, r0, #24
    1044:	4318      	orrs	r0, r3
    1046:	2100      	movs	r1, #0
    1048:	4b17      	ldr	r3, [pc, #92]	; (10a8 <flash_check+0xb4>)
    104a:	4798      	blx	r3
    104c:	ab01      	add	r3, sp, #4
    104e:	5558      	strb	r0, [r3, r5]
    1050:	3501      	adds	r5, #1
    1052:	2d02      	cmp	r5, #2
    1054:	dded      	ble.n	1032 <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    1056:	7a23      	ldrb	r3, [r4, #8]
    1058:	7a62      	ldrb	r2, [r4, #9]
    105a:	0212      	lsls	r2, r2, #8
    105c:	431a      	orrs	r2, r3
    105e:	7aa3      	ldrb	r3, [r4, #10]
    1060:	041b      	lsls	r3, r3, #16
    1062:	4313      	orrs	r3, r2
    1064:	7ae1      	ldrb	r1, [r4, #11]
    1066:	0609      	lsls	r1, r1, #24
    1068:	4319      	orrs	r1, r3
    106a:	7b20      	ldrb	r0, [r4, #12]
    106c:	4b0f      	ldr	r3, [pc, #60]	; (10ac <flash_check+0xb8>)
    106e:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1070:	ab01      	add	r3, sp, #4
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	2b1f      	cmp	r3, #31
    1076:	d10e      	bne.n	1096 <flash_check+0xa2>
    1078:	ab01      	add	r3, sp, #4
    107a:	785a      	ldrb	r2, [r3, #1]
    107c:	7b63      	ldrb	r3, [r4, #13]
    107e:	06db      	lsls	r3, r3, #27
    1080:	0edb      	lsrs	r3, r3, #27
    1082:	2180      	movs	r1, #128	; 0x80
    1084:	430b      	orrs	r3, r1
    1086:	429a      	cmp	r2, r3
    1088:	d108      	bne.n	109c <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    108a:	ab01      	add	r3, sp, #4
    108c:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    108e:	2b01      	cmp	r3, #1
    1090:	d006      	beq.n	10a0 <flash_check+0xac>
	else return false;
    1092:	2000      	movs	r0, #0
    1094:	e000      	b.n	1098 <flash_check+0xa4>
    1096:	2000      	movs	r0, #0
}
    1098:	b003      	add	sp, #12
    109a:	bd30      	pop	{r4, r5, pc}
	else return false;
    109c:	2000      	movs	r0, #0
    109e:	e7fb      	b.n	1098 <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    10a0:	2001      	movs	r0, #1
    10a2:	e7f9      	b.n	1098 <flash_check+0xa4>
    10a4:	000014f5 	.word	0x000014f5
    10a8:	000019d1 	.word	0x000019d1
    10ac:	000014e5 	.word	0x000014e5

000010b0 <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    10b0:	b570      	push	{r4, r5, r6, lr}
    10b2:	0004      	movs	r4, r0
    10b4:	000e      	movs	r6, r1
    10b6:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    10b8:	7902      	ldrb	r2, [r0, #4]
    10ba:	7943      	ldrb	r3, [r0, #5]
    10bc:	021b      	lsls	r3, r3, #8
    10be:	4313      	orrs	r3, r2
    10c0:	7982      	ldrb	r2, [r0, #6]
    10c2:	0412      	lsls	r2, r2, #16
    10c4:	431a      	orrs	r2, r3
    10c6:	79c1      	ldrb	r1, [r0, #7]
    10c8:	0609      	lsls	r1, r1, #24
    10ca:	4311      	orrs	r1, r2
    10cc:	7a00      	ldrb	r0, [r0, #8]
    10ce:	4b15      	ldr	r3, [pc, #84]	; (1124 <imu_icm20948_write_byte+0x74>)
    10d0:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    10d2:	217f      	movs	r1, #127	; 0x7f
    10d4:	4031      	ands	r1, r6
    10d6:	7823      	ldrb	r3, [r4, #0]
    10d8:	7862      	ldrb	r2, [r4, #1]
    10da:	0212      	lsls	r2, r2, #8
    10dc:	431a      	orrs	r2, r3
    10de:	78a3      	ldrb	r3, [r4, #2]
    10e0:	041b      	lsls	r3, r3, #16
    10e2:	4313      	orrs	r3, r2
    10e4:	78e0      	ldrb	r0, [r4, #3]
    10e6:	0600      	lsls	r0, r0, #24
    10e8:	4318      	orrs	r0, r3
    10ea:	4e0f      	ldr	r6, [pc, #60]	; (1128 <imu_icm20948_write_byte+0x78>)
    10ec:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    10ee:	7823      	ldrb	r3, [r4, #0]
    10f0:	7862      	ldrb	r2, [r4, #1]
    10f2:	0212      	lsls	r2, r2, #8
    10f4:	431a      	orrs	r2, r3
    10f6:	78a3      	ldrb	r3, [r4, #2]
    10f8:	041b      	lsls	r3, r3, #16
    10fa:	4313      	orrs	r3, r2
    10fc:	78e0      	ldrb	r0, [r4, #3]
    10fe:	0600      	lsls	r0, r0, #24
    1100:	4318      	orrs	r0, r3
    1102:	0029      	movs	r1, r5
    1104:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1106:	7923      	ldrb	r3, [r4, #4]
    1108:	7962      	ldrb	r2, [r4, #5]
    110a:	0212      	lsls	r2, r2, #8
    110c:	431a      	orrs	r2, r3
    110e:	79a3      	ldrb	r3, [r4, #6]
    1110:	041b      	lsls	r3, r3, #16
    1112:	4313      	orrs	r3, r2
    1114:	79e1      	ldrb	r1, [r4, #7]
    1116:	0609      	lsls	r1, r1, #24
    1118:	4319      	orrs	r1, r3
    111a:	7a20      	ldrb	r0, [r4, #8]
    111c:	4b03      	ldr	r3, [pc, #12]	; (112c <imu_icm20948_write_byte+0x7c>)
    111e:	4798      	blx	r3
}
    1120:	bd70      	pop	{r4, r5, r6, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	000014f5 	.word	0x000014f5
    1128:	000019d1 	.word	0x000019d1
    112c:	000014e5 	.word	0x000014e5

00001130 <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    1130:	b570      	push	{r4, r5, r6, lr}
    1132:	0004      	movs	r4, r0
    1134:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1136:	7903      	ldrb	r3, [r0, #4]
    1138:	7942      	ldrb	r2, [r0, #5]
    113a:	0212      	lsls	r2, r2, #8
    113c:	431a      	orrs	r2, r3
    113e:	7983      	ldrb	r3, [r0, #6]
    1140:	041b      	lsls	r3, r3, #16
    1142:	4313      	orrs	r3, r2
    1144:	79c1      	ldrb	r1, [r0, #7]
    1146:	0609      	lsls	r1, r1, #24
    1148:	4319      	orrs	r1, r3
    114a:	7a00      	ldrb	r0, [r0, #8]
    114c:	4b16      	ldr	r3, [pc, #88]	; (11a8 <imu_icm20948_read_byte+0x78>)
    114e:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1150:	2180      	movs	r1, #128	; 0x80
    1152:	4249      	negs	r1, r1
    1154:	4329      	orrs	r1, r5
    1156:	b2c9      	uxtb	r1, r1
    1158:	7823      	ldrb	r3, [r4, #0]
    115a:	7862      	ldrb	r2, [r4, #1]
    115c:	0212      	lsls	r2, r2, #8
    115e:	431a      	orrs	r2, r3
    1160:	78a3      	ldrb	r3, [r4, #2]
    1162:	041b      	lsls	r3, r3, #16
    1164:	4313      	orrs	r3, r2
    1166:	78e0      	ldrb	r0, [r4, #3]
    1168:	0600      	lsls	r0, r0, #24
    116a:	4318      	orrs	r0, r3
    116c:	4d0f      	ldr	r5, [pc, #60]	; (11ac <imu_icm20948_read_byte+0x7c>)
    116e:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    1170:	7823      	ldrb	r3, [r4, #0]
    1172:	7862      	ldrb	r2, [r4, #1]
    1174:	0212      	lsls	r2, r2, #8
    1176:	431a      	orrs	r2, r3
    1178:	78a3      	ldrb	r3, [r4, #2]
    117a:	041b      	lsls	r3, r3, #16
    117c:	4313      	orrs	r3, r2
    117e:	78e0      	ldrb	r0, [r4, #3]
    1180:	0600      	lsls	r0, r0, #24
    1182:	4318      	orrs	r0, r3
    1184:	2100      	movs	r1, #0
    1186:	47a8      	blx	r5
    1188:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    118a:	7923      	ldrb	r3, [r4, #4]
    118c:	7962      	ldrb	r2, [r4, #5]
    118e:	0212      	lsls	r2, r2, #8
    1190:	431a      	orrs	r2, r3
    1192:	79a3      	ldrb	r3, [r4, #6]
    1194:	041b      	lsls	r3, r3, #16
    1196:	4313      	orrs	r3, r2
    1198:	79e1      	ldrb	r1, [r4, #7]
    119a:	0609      	lsls	r1, r1, #24
    119c:	4319      	orrs	r1, r3
    119e:	7a20      	ldrb	r0, [r4, #8]
    11a0:	4b03      	ldr	r3, [pc, #12]	; (11b0 <imu_icm20948_read_byte+0x80>)
    11a2:	4798      	blx	r3
	return out;
}
    11a4:	0028      	movs	r0, r5
    11a6:	bd70      	pop	{r4, r5, r6, pc}
    11a8:	000014f5 	.word	0x000014f5
    11ac:	000019d1 	.word	0x000019d1
    11b0:	000014e5 	.word	0x000014e5

000011b4 <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    11b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11b6:	46c6      	mov	lr, r8
    11b8:	b500      	push	{lr}
    11ba:	0004      	movs	r4, r0
    11bc:	000d      	movs	r5, r1
    11be:	0017      	movs	r7, r2
    11c0:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    11c2:	7902      	ldrb	r2, [r0, #4]
    11c4:	7943      	ldrb	r3, [r0, #5]
    11c6:	021b      	lsls	r3, r3, #8
    11c8:	4313      	orrs	r3, r2
    11ca:	7982      	ldrb	r2, [r0, #6]
    11cc:	0412      	lsls	r2, r2, #16
    11ce:	431a      	orrs	r2, r3
    11d0:	79c1      	ldrb	r1, [r0, #7]
    11d2:	0609      	lsls	r1, r1, #24
    11d4:	4311      	orrs	r1, r2
    11d6:	7a00      	ldrb	r0, [r0, #8]
    11d8:	4b19      	ldr	r3, [pc, #100]	; (1240 <imu_icm20948_write+0x8c>)
    11da:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    11dc:	217f      	movs	r1, #127	; 0x7f
    11de:	4029      	ands	r1, r5
    11e0:	7823      	ldrb	r3, [r4, #0]
    11e2:	7862      	ldrb	r2, [r4, #1]
    11e4:	0212      	lsls	r2, r2, #8
    11e6:	431a      	orrs	r2, r3
    11e8:	78a3      	ldrb	r3, [r4, #2]
    11ea:	041b      	lsls	r3, r3, #16
    11ec:	4313      	orrs	r3, r2
    11ee:	78e0      	ldrb	r0, [r4, #3]
    11f0:	0600      	lsls	r0, r0, #24
    11f2:	4318      	orrs	r0, r3
    11f4:	4b13      	ldr	r3, [pc, #76]	; (1244 <imu_icm20948_write+0x90>)
    11f6:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    11f8:	2600      	movs	r6, #0
    11fa:	e00e      	b.n	121a <imu_icm20948_write+0x66>
		spi_command(desc->sercom, data[i]);
    11fc:	4643      	mov	r3, r8
    11fe:	5d99      	ldrb	r1, [r3, r6]
    1200:	7822      	ldrb	r2, [r4, #0]
    1202:	7863      	ldrb	r3, [r4, #1]
    1204:	021b      	lsls	r3, r3, #8
    1206:	4313      	orrs	r3, r2
    1208:	78a5      	ldrb	r5, [r4, #2]
    120a:	042d      	lsls	r5, r5, #16
    120c:	431d      	orrs	r5, r3
    120e:	78e0      	ldrb	r0, [r4, #3]
    1210:	0600      	lsls	r0, r0, #24
    1212:	4328      	orrs	r0, r5
    1214:	4b0b      	ldr	r3, [pc, #44]	; (1244 <imu_icm20948_write+0x90>)
    1216:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    1218:	3601      	adds	r6, #1
    121a:	42be      	cmp	r6, r7
    121c:	dbee      	blt.n	11fc <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    121e:	7923      	ldrb	r3, [r4, #4]
    1220:	7962      	ldrb	r2, [r4, #5]
    1222:	0212      	lsls	r2, r2, #8
    1224:	431a      	orrs	r2, r3
    1226:	79a3      	ldrb	r3, [r4, #6]
    1228:	041b      	lsls	r3, r3, #16
    122a:	4313      	orrs	r3, r2
    122c:	79e1      	ldrb	r1, [r4, #7]
    122e:	0609      	lsls	r1, r1, #24
    1230:	4319      	orrs	r1, r3
    1232:	7a20      	ldrb	r0, [r4, #8]
    1234:	4b04      	ldr	r3, [pc, #16]	; (1248 <imu_icm20948_write+0x94>)
    1236:	4798      	blx	r3
}
    1238:	bc80      	pop	{r7}
    123a:	46b8      	mov	r8, r7
    123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	000014f5 	.word	0x000014f5
    1244:	000019d1 	.word	0x000019d1
    1248:	000014e5 	.word	0x000014e5

0000124c <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    124c:	b5f0      	push	{r4, r5, r6, r7, lr}
    124e:	46c6      	mov	lr, r8
    1250:	b500      	push	{lr}
    1252:	0004      	movs	r4, r0
    1254:	000d      	movs	r5, r1
    1256:	0017      	movs	r7, r2
    1258:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    125a:	7903      	ldrb	r3, [r0, #4]
    125c:	7942      	ldrb	r2, [r0, #5]
    125e:	0212      	lsls	r2, r2, #8
    1260:	431a      	orrs	r2, r3
    1262:	7983      	ldrb	r3, [r0, #6]
    1264:	041b      	lsls	r3, r3, #16
    1266:	4313      	orrs	r3, r2
    1268:	79c1      	ldrb	r1, [r0, #7]
    126a:	0609      	lsls	r1, r1, #24
    126c:	4319      	orrs	r1, r3
    126e:	7a00      	ldrb	r0, [r0, #8]
    1270:	4b1b      	ldr	r3, [pc, #108]	; (12e0 <imu_icm20948_read+0x94>)
    1272:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1274:	2180      	movs	r1, #128	; 0x80
    1276:	4249      	negs	r1, r1
    1278:	4329      	orrs	r1, r5
    127a:	b2c9      	uxtb	r1, r1
    127c:	7823      	ldrb	r3, [r4, #0]
    127e:	7862      	ldrb	r2, [r4, #1]
    1280:	0212      	lsls	r2, r2, #8
    1282:	431a      	orrs	r2, r3
    1284:	78a3      	ldrb	r3, [r4, #2]
    1286:	041b      	lsls	r3, r3, #16
    1288:	4313      	orrs	r3, r2
    128a:	78e0      	ldrb	r0, [r4, #3]
    128c:	0600      	lsls	r0, r0, #24
    128e:	4318      	orrs	r0, r3
    1290:	4b14      	ldr	r3, [pc, #80]	; (12e4 <imu_icm20948_read+0x98>)
    1292:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1294:	2500      	movs	r5, #0
    1296:	e010      	b.n	12ba <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    1298:	4643      	mov	r3, r8
    129a:	195e      	adds	r6, r3, r5
    129c:	7823      	ldrb	r3, [r4, #0]
    129e:	7862      	ldrb	r2, [r4, #1]
    12a0:	0212      	lsls	r2, r2, #8
    12a2:	431a      	orrs	r2, r3
    12a4:	78a3      	ldrb	r3, [r4, #2]
    12a6:	041b      	lsls	r3, r3, #16
    12a8:	4313      	orrs	r3, r2
    12aa:	78e0      	ldrb	r0, [r4, #3]
    12ac:	0600      	lsls	r0, r0, #24
    12ae:	4318      	orrs	r0, r3
    12b0:	2100      	movs	r1, #0
    12b2:	4b0c      	ldr	r3, [pc, #48]	; (12e4 <imu_icm20948_read+0x98>)
    12b4:	4798      	blx	r3
    12b6:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    12b8:	3501      	adds	r5, #1
    12ba:	42bd      	cmp	r5, r7
    12bc:	dbec      	blt.n	1298 <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    12be:	7923      	ldrb	r3, [r4, #4]
    12c0:	7962      	ldrb	r2, [r4, #5]
    12c2:	0212      	lsls	r2, r2, #8
    12c4:	431a      	orrs	r2, r3
    12c6:	79a3      	ldrb	r3, [r4, #6]
    12c8:	041b      	lsls	r3, r3, #16
    12ca:	4313      	orrs	r3, r2
    12cc:	79e1      	ldrb	r1, [r4, #7]
    12ce:	0609      	lsls	r1, r1, #24
    12d0:	4319      	orrs	r1, r3
    12d2:	7a20      	ldrb	r0, [r4, #8]
    12d4:	4b04      	ldr	r3, [pc, #16]	; (12e8 <imu_icm20948_read+0x9c>)
    12d6:	4798      	blx	r3
}
    12d8:	bc80      	pop	{r7}
    12da:	46b8      	mov	r8, r7
    12dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	000014f5 	.word	0x000014f5
    12e4:	000019d1 	.word	0x000019d1
    12e8:	000014e5 	.word	0x000014e5

000012ec <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    12ec:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    12ee:	2903      	cmp	r1, #3
    12f0:	d900      	bls.n	12f4 <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    12f2:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    12f4:	0109      	lsls	r1, r1, #4
    12f6:	b2ca      	uxtb	r2, r1
    12f8:	217f      	movs	r1, #127	; 0x7f
    12fa:	4b01      	ldr	r3, [pc, #4]	; (1300 <imu_icm20948_user_bank+0x14>)
    12fc:	4798      	blx	r3
}
    12fe:	e7f8      	b.n	12f2 <imu_icm20948_user_bank+0x6>
    1300:	000010b1 	.word	0x000010b1

00001304 <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    1304:	b5f0      	push	{r4, r5, r6, r7, lr}
    1306:	b083      	sub	sp, #12
    1308:	0005      	movs	r5, r0
    130a:	000c      	movs	r4, r1
    130c:	9200      	str	r2, [sp, #0]
    130e:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    1310:	0008      	movs	r0, r1
    1312:	4b13      	ldr	r3, [pc, #76]	; (1360 <imu_icm20948_init+0x5c>)
    1314:	4798      	blx	r3
    1316:	1e06      	subs	r6, r0, #0
    1318:	d102      	bne.n	1320 <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    131a:	0030      	movs	r0, r6
    131c:	b003      	add	sp, #12
    131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    1320:	702c      	strb	r4, [r5, #0]
    1322:	0a23      	lsrs	r3, r4, #8
    1324:	706b      	strb	r3, [r5, #1]
    1326:	0c23      	lsrs	r3, r4, #16
    1328:	70ab      	strb	r3, [r5, #2]
    132a:	0e24      	lsrs	r4, r4, #24
    132c:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    132e:	1d28      	adds	r0, r5, #4
    1330:	2205      	movs	r2, #5
    1332:	4669      	mov	r1, sp
    1334:	4b0b      	ldr	r3, [pc, #44]	; (1364 <imu_icm20948_init+0x60>)
    1336:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    1338:	2280      	movs	r2, #128	; 0x80
    133a:	2106      	movs	r1, #6
    133c:	0028      	movs	r0, r5
    133e:	4c0a      	ldr	r4, [pc, #40]	; (1368 <imu_icm20948_init+0x64>)
    1340:	47a0      	blx	r4
	delay_ms(11);
    1342:	480a      	ldr	r0, [pc, #40]	; (136c <imu_icm20948_init+0x68>)
    1344:	4f0a      	ldr	r7, [pc, #40]	; (1370 <imu_icm20948_init+0x6c>)
    1346:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    1348:	2210      	movs	r2, #16
    134a:	2103      	movs	r1, #3
    134c:	0028      	movs	r0, r5
    134e:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    1350:	2201      	movs	r2, #1
    1352:	2106      	movs	r1, #6
    1354:	0028      	movs	r0, r5
    1356:	47a0      	blx	r4
	delay_us(80);
    1358:	20f0      	movs	r0, #240	; 0xf0
    135a:	0040      	lsls	r0, r0, #1
    135c:	47b8      	blx	r7
	return true;
    135e:	e7dc      	b.n	131a <imu_icm20948_init+0x16>
    1360:	000017e1 	.word	0x000017e1
    1364:	0000472d 	.word	0x0000472d
    1368:	000010b1 	.word	0x000010b1
    136c:	000101d0 	.word	0x000101d0
    1370:	00001ab5 	.word	0x00001ab5

00001374 <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1374:	b510      	push	{r4, lr}
    1376:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    1378:	2100      	movs	r1, #0
    137a:	4b06      	ldr	r3, [pc, #24]	; (1394 <imu_icm20948_check+0x20>)
    137c:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    137e:	2100      	movs	r1, #0
    1380:	0020      	movs	r0, r4
    1382:	4b05      	ldr	r3, [pc, #20]	; (1398 <imu_icm20948_check+0x24>)
    1384:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    1386:	28ea      	cmp	r0, #234	; 0xea
    1388:	d001      	beq.n	138e <imu_icm20948_check+0x1a>
	else return false;
    138a:	2000      	movs	r0, #0
}
    138c:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    138e:	38e9      	subs	r0, #233	; 0xe9
    1390:	e7fc      	b.n	138c <imu_icm20948_check+0x18>
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	000012ed 	.word	0x000012ed
    1398:	00001131 	.word	0x00001131

0000139c <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    139e:	0004      	movs	r4, r0
    13a0:	000f      	movs	r7, r1
    13a2:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    13a4:	2103      	movs	r1, #3
    13a6:	4b0b      	ldr	r3, [pc, #44]	; (13d4 <mag_icm20948_write_byte+0x38>)
    13a8:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    13aa:	220c      	movs	r2, #12
    13ac:	2103      	movs	r1, #3
    13ae:	0020      	movs	r0, r4
    13b0:	4d09      	ldr	r5, [pc, #36]	; (13d8 <mag_icm20948_write_byte+0x3c>)
    13b2:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    13b4:	003a      	movs	r2, r7
    13b6:	2104      	movs	r1, #4
    13b8:	0020      	movs	r0, r4
    13ba:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    13bc:	0032      	movs	r2, r6
    13be:	2106      	movs	r1, #6
    13c0:	0020      	movs	r0, r4
    13c2:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    13c4:	2281      	movs	r2, #129	; 0x81
    13c6:	2105      	movs	r1, #5
    13c8:	0020      	movs	r0, r4
    13ca:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    13cc:	4803      	ldr	r0, [pc, #12]	; (13dc <mag_icm20948_write_byte+0x40>)
    13ce:	4b04      	ldr	r3, [pc, #16]	; (13e0 <mag_icm20948_write_byte+0x44>)
    13d0:	4798      	blx	r3
}
    13d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13d4:	000012ed 	.word	0x000012ed
    13d8:	000010b1 	.word	0x000010b1
    13dc:	0000ea60 	.word	0x0000ea60
    13e0:	00001ab5 	.word	0x00001ab5

000013e4 <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    13e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13e6:	46c6      	mov	lr, r8
    13e8:	b500      	push	{lr}
    13ea:	b082      	sub	sp, #8
    13ec:	0004      	movs	r4, r0
    13ee:	000f      	movs	r7, r1
    13f0:	0015      	movs	r5, r2
    13f2:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    13f4:	2103      	movs	r1, #3
    13f6:	4e0f      	ldr	r6, [pc, #60]	; (1434 <mag_icm20948_read+0x50>)
    13f8:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    13fa:	ab01      	add	r3, sp, #4
    13fc:	228c      	movs	r2, #140	; 0x8c
    13fe:	701a      	strb	r2, [r3, #0]
    1400:	705f      	strb	r7, [r3, #1]
    1402:	3a0d      	subs	r2, #13
    1404:	3aff      	subs	r2, #255	; 0xff
    1406:	432a      	orrs	r2, r5
    1408:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    140a:	2203      	movs	r2, #3
    140c:	2103      	movs	r1, #3
    140e:	0020      	movs	r0, r4
    1410:	4f09      	ldr	r7, [pc, #36]	; (1438 <mag_icm20948_read+0x54>)
    1412:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    1414:	4809      	ldr	r0, [pc, #36]	; (143c <mag_icm20948_read+0x58>)
    1416:	4b0a      	ldr	r3, [pc, #40]	; (1440 <mag_icm20948_read+0x5c>)
    1418:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    141a:	2100      	movs	r1, #0
    141c:	0020      	movs	r0, r4
    141e:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    1420:	4643      	mov	r3, r8
    1422:	002a      	movs	r2, r5
    1424:	213b      	movs	r1, #59	; 0x3b
    1426:	0020      	movs	r0, r4
    1428:	4c06      	ldr	r4, [pc, #24]	; (1444 <mag_icm20948_read+0x60>)
    142a:	47a0      	blx	r4
}
    142c:	b002      	add	sp, #8
    142e:	bc80      	pop	{r7}
    1430:	46b8      	mov	r8, r7
    1432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1434:	000012ed 	.word	0x000012ed
    1438:	000011b5 	.word	0x000011b5
    143c:	00001770 	.word	0x00001770
    1440:	00001ab5 	.word	0x00001ab5
    1444:	0000124d 	.word	0x0000124d

00001448 <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    1448:	b570      	push	{r4, r5, r6, lr}
    144a:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    144c:	2100      	movs	r1, #0
    144e:	4e10      	ldr	r6, [pc, #64]	; (1490 <mag_icm20948_init+0x48>)
    1450:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    1452:	2220      	movs	r2, #32
    1454:	2103      	movs	r1, #3
    1456:	0020      	movs	r0, r4
    1458:	4d0e      	ldr	r5, [pc, #56]	; (1494 <mag_icm20948_init+0x4c>)
    145a:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    145c:	2103      	movs	r1, #3
    145e:	0020      	movs	r0, r4
    1460:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    1462:	2207      	movs	r2, #7
    1464:	2101      	movs	r1, #1
    1466:	0020      	movs	r0, r4
    1468:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    146a:	2201      	movs	r2, #1
    146c:	2102      	movs	r1, #2
    146e:	0020      	movs	r0, r4
    1470:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    1472:	4809      	ldr	r0, [pc, #36]	; (1498 <mag_icm20948_init+0x50>)
    1474:	4b09      	ldr	r3, [pc, #36]	; (149c <mag_icm20948_init+0x54>)
    1476:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    1478:	2201      	movs	r2, #1
    147a:	2132      	movs	r1, #50	; 0x32
    147c:	0020      	movs	r0, r4
    147e:	4d08      	ldr	r5, [pc, #32]	; (14a0 <mag_icm20948_init+0x58>)
    1480:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    1482:	2208      	movs	r2, #8
    1484:	2131      	movs	r1, #49	; 0x31
    1486:	0020      	movs	r0, r4
    1488:	47a8      	blx	r5
	
	return true;
}
    148a:	2001      	movs	r0, #1
    148c:	bd70      	pop	{r4, r5, r6, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	000012ed 	.word	0x000012ed
    1494:	000010b1 	.word	0x000010b1
    1498:	00001770 	.word	0x00001770
    149c:	00001ab5 	.word	0x00001ab5
    14a0:	0000139d 	.word	0x0000139d

000014a4 <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    14a4:	b530      	push	{r4, r5, lr}
    14a6:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    14a8:	ac01      	add	r4, sp, #4
    14aa:	0023      	movs	r3, r4
    14ac:	2202      	movs	r2, #2
    14ae:	2100      	movs	r1, #0
    14b0:	4d07      	ldr	r5, [pc, #28]	; (14d0 <mag_icm20948_check+0x2c>)
    14b2:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    14b4:	7823      	ldrb	r3, [r4, #0]
    14b6:	2b48      	cmp	r3, #72	; 0x48
    14b8:	d104      	bne.n	14c4 <mag_icm20948_check+0x20>
    14ba:	7863      	ldrb	r3, [r4, #1]
    14bc:	2b09      	cmp	r3, #9
    14be:	d004      	beq.n	14ca <mag_icm20948_check+0x26>
	else return false;
    14c0:	2000      	movs	r0, #0
    14c2:	e000      	b.n	14c6 <mag_icm20948_check+0x22>
    14c4:	2000      	movs	r0, #0
    14c6:	b003      	add	sp, #12
    14c8:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    14ca:	2001      	movs	r0, #1
    14cc:	e7fb      	b.n	14c6 <mag_icm20948_check+0x22>
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	000013e5 	.word	0x000013e5

000014d4 <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    14d4:	01c0      	lsls	r0, r0, #7
    14d6:	4b02      	ldr	r3, [pc, #8]	; (14e0 <port_set_output+0xc>)
    14d8:	469c      	mov	ip, r3
    14da:	4460      	add	r0, ip
    14dc:	6081      	str	r1, [r0, #8]
}
    14de:	4770      	bx	lr
    14e0:	41004400 	.word	0x41004400

000014e4 <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    14e4:	01c0      	lsls	r0, r0, #7
    14e6:	4b02      	ldr	r3, [pc, #8]	; (14f0 <port_set+0xc>)
    14e8:	469c      	mov	ip, r3
    14ea:	4460      	add	r0, ip
    14ec:	6181      	str	r1, [r0, #24]
}
    14ee:	4770      	bx	lr
    14f0:	41004400 	.word	0x41004400

000014f4 <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    14f4:	01c0      	lsls	r0, r0, #7
    14f6:	4b02      	ldr	r3, [pc, #8]	; (1500 <port_clear+0xc>)
    14f8:	469c      	mov	ip, r3
    14fa:	4460      	add	r0, ip
    14fc:	6141      	str	r1, [r0, #20]
}
    14fe:	4770      	bx	lr
    1500:	41004400 	.word	0x41004400

00001504 <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    1504:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    1506:	060b      	lsls	r3, r1, #24
    1508:	21f0      	movs	r1, #240	; 0xf0
    150a:	0509      	lsls	r1, r1, #20
    150c:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    150e:	490e      	ldr	r1, [pc, #56]	; (1548 <port_wrconfig+0x44>)
    1510:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    1512:	0413      	lsls	r3, r2, #16
    1514:	0c1c      	lsrs	r4, r3, #16
    1516:	2b00      	cmp	r3, #0
    1518:	d005      	beq.n	1526 <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    151a:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    151c:	01c3      	lsls	r3, r0, #7
    151e:	4c0b      	ldr	r4, [pc, #44]	; (154c <port_wrconfig+0x48>)
    1520:	46a4      	mov	ip, r4
    1522:	4463      	add	r3, ip
    1524:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    1526:	2380      	movs	r3, #128	; 0x80
    1528:	025b      	lsls	r3, r3, #9
    152a:	429a      	cmp	r2, r3
    152c:	d30b      	bcc.n	1546 <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    152e:	0c09      	lsrs	r1, r1, #16
    1530:	0409      	lsls	r1, r1, #16
    1532:	2380      	movs	r3, #128	; 0x80
    1534:	061b      	lsls	r3, r3, #24
    1536:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    1538:	0c12      	lsrs	r2, r2, #16
    153a:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    153c:	01c0      	lsls	r0, r0, #7
    153e:	4b03      	ldr	r3, [pc, #12]	; (154c <port_wrconfig+0x48>)
    1540:	469c      	mov	ip, r3
    1542:	4460      	add	r0, ip
    1544:	6282      	str	r2, [r0, #40]	; 0x28
	}
    1546:	bd10      	pop	{r4, pc}
    1548:	50010000 	.word	0x50010000
    154c:	41004400 	.word	0x41004400

00001550 <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    1550:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    1552:	4c2a      	ldr	r4, [pc, #168]	; (15fc <pwm_init_tc+0xac>)
    1554:	42a0      	cmp	r0, r4
    1556:	d03c      	beq.n	15d2 <pwm_init_tc+0x82>
    1558:	d90f      	bls.n	157a <pwm_init_tc+0x2a>
    155a:	4c29      	ldr	r4, [pc, #164]	; (1600 <pwm_init_tc+0xb0>)
    155c:	42a0      	cmp	r0, r4
    155e:	d042      	beq.n	15e6 <pwm_init_tc+0x96>
    1560:	4c28      	ldr	r4, [pc, #160]	; (1604 <pwm_init_tc+0xb4>)
    1562:	42a0      	cmp	r0, r4
    1564:	d11b      	bne.n	159e <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    1566:	4a28      	ldr	r2, [pc, #160]	; (1608 <pwm_init_tc+0xb8>)
    1568:	6a14      	ldr	r4, [r2, #32]
    156a:	2380      	movs	r3, #128	; 0x80
    156c:	021b      	lsls	r3, r3, #8
    156e:	4323      	orrs	r3, r4
    1570:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1572:	4b26      	ldr	r3, [pc, #152]	; (160c <pwm_init_tc+0xbc>)
    1574:	4a26      	ldr	r2, [pc, #152]	; (1610 <pwm_init_tc+0xc0>)
    1576:	805a      	strh	r2, [r3, #2]
		break;
    1578:	e01c      	b.n	15b4 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    157a:	4c26      	ldr	r4, [pc, #152]	; (1614 <pwm_init_tc+0xc4>)
    157c:	42a0      	cmp	r0, r4
    157e:	d010      	beq.n	15a2 <pwm_init_tc+0x52>
    1580:	4c25      	ldr	r4, [pc, #148]	; (1618 <pwm_init_tc+0xc8>)
    1582:	42a0      	cmp	r0, r4
    1584:	d109      	bne.n	159a <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    1586:	4a20      	ldr	r2, [pc, #128]	; (1608 <pwm_init_tc+0xb8>)
    1588:	6a14      	ldr	r4, [r2, #32]
    158a:	2380      	movs	r3, #128	; 0x80
    158c:	015b      	lsls	r3, r3, #5
    158e:	4323      	orrs	r3, r4
    1590:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1592:	4b1e      	ldr	r3, [pc, #120]	; (160c <pwm_init_tc+0xbc>)
    1594:	4a21      	ldr	r2, [pc, #132]	; (161c <pwm_init_tc+0xcc>)
    1596:	805a      	strh	r2, [r3, #2]
		break;
    1598:	e00c      	b.n	15b4 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    159a:	2000      	movs	r0, #0
    159c:	e018      	b.n	15d0 <pwm_init_tc+0x80>
    159e:	2000      	movs	r0, #0
    15a0:	e016      	b.n	15d0 <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    15a2:	4a19      	ldr	r2, [pc, #100]	; (1608 <pwm_init_tc+0xb8>)
    15a4:	6a14      	ldr	r4, [r2, #32]
    15a6:	2380      	movs	r3, #128	; 0x80
    15a8:	011b      	lsls	r3, r3, #4
    15aa:	4323      	orrs	r3, r4
    15ac:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    15ae:	4b17      	ldr	r3, [pc, #92]	; (160c <pwm_init_tc+0xbc>)
    15b0:	4a1b      	ldr	r2, [pc, #108]	; (1620 <pwm_init_tc+0xd0>)
    15b2:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    15b4:	4b15      	ldr	r3, [pc, #84]	; (160c <pwm_init_tc+0xbc>)
    15b6:	785b      	ldrb	r3, [r3, #1]
    15b8:	b25b      	sxtb	r3, r3
    15ba:	2b00      	cmp	r3, #0
    15bc:	dbfa      	blt.n	15b4 <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    15be:	020b      	lsls	r3, r1, #8
    15c0:	22e0      	movs	r2, #224	; 0xe0
    15c2:	00d2      	lsls	r2, r2, #3
    15c4:	4013      	ands	r3, r2
    15c6:	2244      	movs	r2, #68	; 0x44
    15c8:	4313      	orrs	r3, r2
    15ca:	b29b      	uxth	r3, r3
    15cc:	8003      	strh	r3, [r0, #0]
	
	return true;
    15ce:	2001      	movs	r0, #1
}
    15d0:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    15d2:	4a0d      	ldr	r2, [pc, #52]	; (1608 <pwm_init_tc+0xb8>)
    15d4:	6a14      	ldr	r4, [r2, #32]
    15d6:	2380      	movs	r3, #128	; 0x80
    15d8:	019b      	lsls	r3, r3, #6
    15da:	4323      	orrs	r3, r4
    15dc:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    15de:	4b0b      	ldr	r3, [pc, #44]	; (160c <pwm_init_tc+0xbc>)
    15e0:	4a0e      	ldr	r2, [pc, #56]	; (161c <pwm_init_tc+0xcc>)
    15e2:	805a      	strh	r2, [r3, #2]
		break;
    15e4:	e7e6      	b.n	15b4 <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    15e6:	4a08      	ldr	r2, [pc, #32]	; (1608 <pwm_init_tc+0xb8>)
    15e8:	6a14      	ldr	r4, [r2, #32]
    15ea:	2380      	movs	r3, #128	; 0x80
    15ec:	01db      	lsls	r3, r3, #7
    15ee:	4323      	orrs	r3, r4
    15f0:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    15f2:	4b06      	ldr	r3, [pc, #24]	; (160c <pwm_init_tc+0xbc>)
    15f4:	4a06      	ldr	r2, [pc, #24]	; (1610 <pwm_init_tc+0xc0>)
    15f6:	805a      	strh	r2, [r3, #2]
		break;
    15f8:	e7dc      	b.n	15b4 <pwm_init_tc+0x64>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	42003400 	.word	0x42003400
    1600:	42003800 	.word	0x42003800
    1604:	42003c00 	.word	0x42003c00
    1608:	40000400 	.word	0x40000400
    160c:	40000c00 	.word	0x40000c00
    1610:	0000401d 	.word	0x0000401d
    1614:	42002c00 	.word	0x42002c00
    1618:	42003000 	.word	0x42003000
    161c:	0000401c 	.word	0x0000401c
    1620:	0000401b 	.word	0x0000401b

00001624 <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    1624:	4a0f      	ldr	r2, [pc, #60]	; (1664 <pwm_enable_tc+0x40>)
    1626:	4290      	cmp	r0, r2
    1628:	d010      	beq.n	164c <pwm_enable_tc+0x28>
    162a:	d807      	bhi.n	163c <pwm_enable_tc+0x18>
    162c:	4a0e      	ldr	r2, [pc, #56]	; (1668 <pwm_enable_tc+0x44>)
    162e:	4290      	cmp	r0, r2
    1630:	d00c      	beq.n	164c <pwm_enable_tc+0x28>
    1632:	4a0e      	ldr	r2, [pc, #56]	; (166c <pwm_enable_tc+0x48>)
    1634:	4290      	cmp	r0, r2
    1636:	d009      	beq.n	164c <pwm_enable_tc+0x28>
    1638:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    163a:	4770      	bx	lr
	switch ((uint32_t)tc) {
    163c:	4a0c      	ldr	r2, [pc, #48]	; (1670 <pwm_enable_tc+0x4c>)
    163e:	4290      	cmp	r0, r2
    1640:	d004      	beq.n	164c <pwm_enable_tc+0x28>
    1642:	4a0c      	ldr	r2, [pc, #48]	; (1674 <pwm_enable_tc+0x50>)
    1644:	4290      	cmp	r0, r2
    1646:	d001      	beq.n	164c <pwm_enable_tc+0x28>
    1648:	2000      	movs	r0, #0
    164a:	e7f6      	b.n	163a <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    164c:	8803      	ldrh	r3, [r0, #0]
    164e:	2202      	movs	r2, #2
    1650:	4313      	orrs	r3, r2
    1652:	b29b      	uxth	r3, r3
    1654:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1656:	7bc3      	ldrb	r3, [r0, #15]
    1658:	b25b      	sxtb	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	dbfb      	blt.n	1656 <pwm_enable_tc+0x32>
	return true;
    165e:	2001      	movs	r0, #1
    1660:	e7eb      	b.n	163a <pwm_enable_tc+0x16>
    1662:	46c0      	nop			; (mov r8, r8)
    1664:	42003400 	.word	0x42003400
    1668:	42002c00 	.word	0x42002c00
    166c:	42003000 	.word	0x42003000
    1670:	42003800 	.word	0x42003800
    1674:	42003c00 	.word	0x42003c00

00001678 <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    1678:	2307      	movs	r3, #7
    167a:	4018      	ands	r0, r3
	switch (prescaler) {
    167c:	2807      	cmp	r0, #7
    167e:	d813      	bhi.n	16a8 <pwm_get_div_val+0x30>
    1680:	0080      	lsls	r0, r0, #2
    1682:	4b0b      	ldr	r3, [pc, #44]	; (16b0 <pwm_get_div_val+0x38>)
    1684:	581b      	ldr	r3, [r3, r0]
    1686:	469f      	mov	pc, r3
    1688:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    168a:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    168c:	2004      	movs	r0, #4
    168e:	e7fc      	b.n	168a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    1690:	2008      	movs	r0, #8
    1692:	e7fa      	b.n	168a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    1694:	2010      	movs	r0, #16
    1696:	e7f8      	b.n	168a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    1698:	2040      	movs	r0, #64	; 0x40
    169a:	e7f6      	b.n	168a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    169c:	2080      	movs	r0, #128	; 0x80
    169e:	0040      	lsls	r0, r0, #1
    16a0:	e7f3      	b.n	168a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    16a2:	2080      	movs	r0, #128	; 0x80
    16a4:	00c0      	lsls	r0, r0, #3
    16a6:	e7f0      	b.n	168a <pwm_get_div_val+0x12>
	return 0;
    16a8:	2000      	movs	r0, #0
    16aa:	e7ee      	b.n	168a <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    16ac:	2002      	movs	r0, #2
    16ae:	e7ec      	b.n	168a <pwm_get_div_val+0x12>
    16b0:	00004988 	.word	0x00004988

000016b4 <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    16b4:	b570      	push	{r4, r5, r6, lr}
    16b6:	0004      	movs	r4, r0
    16b8:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    16ba:	4a16      	ldr	r2, [pc, #88]	; (1714 <pwm_set_frequency_tc+0x60>)
    16bc:	4290      	cmp	r0, r2
    16be:	d010      	beq.n	16e2 <pwm_set_frequency_tc+0x2e>
    16c0:	d807      	bhi.n	16d2 <pwm_set_frequency_tc+0x1e>
    16c2:	4a15      	ldr	r2, [pc, #84]	; (1718 <pwm_set_frequency_tc+0x64>)
    16c4:	4290      	cmp	r0, r2
    16c6:	d00c      	beq.n	16e2 <pwm_set_frequency_tc+0x2e>
    16c8:	4a14      	ldr	r2, [pc, #80]	; (171c <pwm_set_frequency_tc+0x68>)
    16ca:	4290      	cmp	r0, r2
    16cc:	d009      	beq.n	16e2 <pwm_set_frequency_tc+0x2e>
    16ce:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    16d0:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    16d2:	4a13      	ldr	r2, [pc, #76]	; (1720 <pwm_set_frequency_tc+0x6c>)
    16d4:	4290      	cmp	r0, r2
    16d6:	d004      	beq.n	16e2 <pwm_set_frequency_tc+0x2e>
    16d8:	4a12      	ldr	r2, [pc, #72]	; (1724 <pwm_set_frequency_tc+0x70>)
    16da:	4290      	cmp	r0, r2
    16dc:	d001      	beq.n	16e2 <pwm_set_frequency_tc+0x2e>
    16de:	2000      	movs	r0, #0
    16e0:	e7f6      	b.n	16d0 <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    16e2:	8823      	ldrh	r3, [r4, #0]
    16e4:	0a1b      	lsrs	r3, r3, #8
    16e6:	2007      	movs	r0, #7
    16e8:	4018      	ands	r0, r3
    16ea:	4b0f      	ldr	r3, [pc, #60]	; (1728 <pwm_set_frequency_tc+0x74>)
    16ec:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    16ee:	4b0f      	ldr	r3, [pc, #60]	; (172c <pwm_set_frequency_tc+0x78>)
    16f0:	4798      	blx	r3
    16f2:	4b0f      	ldr	r3, [pc, #60]	; (1730 <pwm_set_frequency_tc+0x7c>)
    16f4:	1c29      	adds	r1, r5, #0
    16f6:	4798      	blx	r3
    16f8:	1c01      	adds	r1, r0, #0
    16fa:	4b0e      	ldr	r3, [pc, #56]	; (1734 <pwm_set_frequency_tc+0x80>)
    16fc:	480e      	ldr	r0, [pc, #56]	; (1738 <pwm_set_frequency_tc+0x84>)
    16fe:	4798      	blx	r3
    1700:	4b0e      	ldr	r3, [pc, #56]	; (173c <pwm_set_frequency_tc+0x88>)
    1702:	4798      	blx	r3
	if (per > 0xFF) return false;
    1704:	28ff      	cmp	r0, #255	; 0xff
    1706:	d803      	bhi.n	1710 <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    1708:	b2c0      	uxtb	r0, r0
    170a:	7520      	strb	r0, [r4, #20]
	return true;
    170c:	2001      	movs	r0, #1
    170e:	e7df      	b.n	16d0 <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    1710:	2000      	movs	r0, #0
    1712:	e7dd      	b.n	16d0 <pwm_set_frequency_tc+0x1c>
    1714:	42003400 	.word	0x42003400
    1718:	42002c00 	.word	0x42002c00
    171c:	42003000 	.word	0x42003000
    1720:	42003800 	.word	0x42003800
    1724:	42003c00 	.word	0x42003c00
    1728:	00001679 	.word	0x00001679
    172c:	000044dd 	.word	0x000044dd
    1730:	00003efd 	.word	0x00003efd
    1734:	00003b31 	.word	0x00003b31
    1738:	4c371b00 	.word	0x4c371b00
    173c:	000037fd 	.word	0x000037fd

00001740 <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    1740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1742:	0004      	movs	r4, r0
    1744:	000e      	movs	r6, r1
    1746:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    1748:	4a1b      	ldr	r2, [pc, #108]	; (17b8 <pwm_set_duty_tc+0x78>)
    174a:	4290      	cmp	r0, r2
    174c:	d010      	beq.n	1770 <pwm_set_duty_tc+0x30>
    174e:	d807      	bhi.n	1760 <pwm_set_duty_tc+0x20>
    1750:	4a1a      	ldr	r2, [pc, #104]	; (17bc <pwm_set_duty_tc+0x7c>)
    1752:	4290      	cmp	r0, r2
    1754:	d00c      	beq.n	1770 <pwm_set_duty_tc+0x30>
    1756:	4a1a      	ldr	r2, [pc, #104]	; (17c0 <pwm_set_duty_tc+0x80>)
    1758:	4290      	cmp	r0, r2
    175a:	d009      	beq.n	1770 <pwm_set_duty_tc+0x30>
    175c:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    1760:	4a18      	ldr	r2, [pc, #96]	; (17c4 <pwm_set_duty_tc+0x84>)
    1762:	4290      	cmp	r0, r2
    1764:	d004      	beq.n	1770 <pwm_set_duty_tc+0x30>
    1766:	4a18      	ldr	r2, [pc, #96]	; (17c8 <pwm_set_duty_tc+0x88>)
    1768:	4290      	cmp	r0, r2
    176a:	d001      	beq.n	1770 <pwm_set_duty_tc+0x30>
    176c:	2000      	movs	r0, #0
    176e:	e7f6      	b.n	175e <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1770:	4b16      	ldr	r3, [pc, #88]	; (17cc <pwm_set_duty_tc+0x8c>)
    1772:	2100      	movs	r1, #0
    1774:	1c28      	adds	r0, r5, #0
    1776:	4798      	blx	r3
    1778:	2800      	cmp	r0, #0
    177a:	d11b      	bne.n	17b4 <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    177c:	4b14      	ldr	r3, [pc, #80]	; (17d0 <pwm_set_duty_tc+0x90>)
    177e:	21fe      	movs	r1, #254	; 0xfe
    1780:	0589      	lsls	r1, r1, #22
    1782:	1c28      	adds	r0, r5, #0
    1784:	4798      	blx	r3
    1786:	2800      	cmp	r0, #0
    1788:	d001      	beq.n	178e <pwm_set_duty_tc+0x4e>
    178a:	25fe      	movs	r5, #254	; 0xfe
    178c:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    178e:	7d27      	ldrb	r7, [r4, #20]
    1790:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    1792:	4b10      	ldr	r3, [pc, #64]	; (17d4 <pwm_set_duty_tc+0x94>)
    1794:	0038      	movs	r0, r7
    1796:	4798      	blx	r3
    1798:	4b0f      	ldr	r3, [pc, #60]	; (17d8 <pwm_set_duty_tc+0x98>)
    179a:	1c29      	adds	r1, r5, #0
    179c:	4798      	blx	r3
    179e:	4b0f      	ldr	r3, [pc, #60]	; (17dc <pwm_set_duty_tc+0x9c>)
    17a0:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    17a2:	003b      	movs	r3, r7
    17a4:	4287      	cmp	r7, r0
    17a6:	d300      	bcc.n	17aa <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    17a8:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    17aa:	b2db      	uxtb	r3, r3
    17ac:	19a4      	adds	r4, r4, r6
    17ae:	7623      	strb	r3, [r4, #24]
	return true;
    17b0:	2001      	movs	r0, #1
    17b2:	e7d4      	b.n	175e <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    17b4:	2500      	movs	r5, #0
    17b6:	e7e1      	b.n	177c <pwm_set_duty_tc+0x3c>
    17b8:	42003400 	.word	0x42003400
    17bc:	42002c00 	.word	0x42002c00
    17c0:	42003000 	.word	0x42003000
    17c4:	42003800 	.word	0x42003800
    17c8:	42003c00 	.word	0x42003c00
    17cc:	000037ad 	.word	0x000037ad
    17d0:	000037d5 	.word	0x000037d5
    17d4:	000044dd 	.word	0x000044dd
    17d8:	00003efd 	.word	0x00003efd
    17dc:	000037fd 	.word	0x000037fd

000017e0 <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    17e0:	4b11      	ldr	r3, [pc, #68]	; (1828 <sercom_check+0x48>)
    17e2:	4298      	cmp	r0, r3
    17e4:	d017      	beq.n	1816 <sercom_check+0x36>
    17e6:	d80c      	bhi.n	1802 <sercom_check+0x22>
    17e8:	4b10      	ldr	r3, [pc, #64]	; (182c <sercom_check+0x4c>)
    17ea:	4298      	cmp	r0, r3
    17ec:	d015      	beq.n	181a <sercom_check+0x3a>
    17ee:	4b10      	ldr	r3, [pc, #64]	; (1830 <sercom_check+0x50>)
    17f0:	4298      	cmp	r0, r3
    17f2:	d014      	beq.n	181e <sercom_check+0x3e>
    17f4:	4b0f      	ldr	r3, [pc, #60]	; (1834 <sercom_check+0x54>)
    17f6:	4298      	cmp	r0, r3
    17f8:	d001      	beq.n	17fe <sercom_check+0x1e>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    17fa:	2000      	movs	r0, #0
		break;
	}
}
    17fc:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    17fe:	2001      	movs	r0, #1
    1800:	e7fc      	b.n	17fc <sercom_check+0x1c>
    1802:	4b0d      	ldr	r3, [pc, #52]	; (1838 <sercom_check+0x58>)
    1804:	4298      	cmp	r0, r3
    1806:	d00c      	beq.n	1822 <sercom_check+0x42>
    1808:	4b0c      	ldr	r3, [pc, #48]	; (183c <sercom_check+0x5c>)
    180a:	4298      	cmp	r0, r3
    180c:	d001      	beq.n	1812 <sercom_check+0x32>
		return false;
    180e:	2000      	movs	r0, #0
    1810:	e7f4      	b.n	17fc <sercom_check+0x1c>
	switch ((uint32_t)sercom) {
    1812:	2001      	movs	r0, #1
    1814:	e7f2      	b.n	17fc <sercom_check+0x1c>
    1816:	2001      	movs	r0, #1
    1818:	e7f0      	b.n	17fc <sercom_check+0x1c>
    181a:	2001      	movs	r0, #1
    181c:	e7ee      	b.n	17fc <sercom_check+0x1c>
    181e:	2001      	movs	r0, #1
    1820:	e7ec      	b.n	17fc <sercom_check+0x1c>
    1822:	2001      	movs	r0, #1
    1824:	e7ea      	b.n	17fc <sercom_check+0x1c>
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	42001400 	.word	0x42001400
    182c:	42000c00 	.word	0x42000c00
    1830:	42001000 	.word	0x42001000
    1834:	42000800 	.word	0x42000800
    1838:	42001800 	.word	0x42001800
    183c:	42001c00 	.word	0x42001c00

00001840 <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    1840:	4b29      	ldr	r3, [pc, #164]	; (18e8 <sercom_init+0xa8>)
    1842:	4298      	cmp	r0, r3
    1844:	d03d      	beq.n	18c2 <sercom_init+0x82>
    1846:	d822      	bhi.n	188e <sercom_init+0x4e>
    1848:	4b28      	ldr	r3, [pc, #160]	; (18ec <sercom_init+0xac>)
    184a:	4298      	cmp	r0, r3
    184c:	d030      	beq.n	18b0 <sercom_init+0x70>
    184e:	4b28      	ldr	r3, [pc, #160]	; (18f0 <sercom_init+0xb0>)
    1850:	4298      	cmp	r0, r3
    1852:	d108      	bne.n	1866 <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    1854:	4a27      	ldr	r2, [pc, #156]	; (18f4 <sercom_init+0xb4>)
    1856:	6a13      	ldr	r3, [r2, #32]
    1858:	2110      	movs	r1, #16
    185a:	430b      	orrs	r3, r1
    185c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    185e:	4b26      	ldr	r3, [pc, #152]	; (18f8 <sercom_init+0xb8>)
    1860:	4a26      	ldr	r2, [pc, #152]	; (18fc <sercom_init+0xbc>)
    1862:	805a      	strh	r2, [r3, #2]
		break;
    1864:	e00a      	b.n	187c <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    1866:	4b26      	ldr	r3, [pc, #152]	; (1900 <sercom_init+0xc0>)
    1868:	4298      	cmp	r0, r3
    186a:	d10e      	bne.n	188a <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    186c:	4a21      	ldr	r2, [pc, #132]	; (18f4 <sercom_init+0xb4>)
    186e:	6a13      	ldr	r3, [r2, #32]
    1870:	2104      	movs	r1, #4
    1872:	430b      	orrs	r3, r1
    1874:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    1876:	4b20      	ldr	r3, [pc, #128]	; (18f8 <sercom_init+0xb8>)
    1878:	4a22      	ldr	r2, [pc, #136]	; (1904 <sercom_init+0xc4>)
    187a:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    187c:	4b1e      	ldr	r3, [pc, #120]	; (18f8 <sercom_init+0xb8>)
    187e:	785b      	ldrb	r3, [r3, #1]
    1880:	b25b      	sxtb	r3, r3
    1882:	2b00      	cmp	r3, #0
    1884:	dbfa      	blt.n	187c <sercom_init+0x3c>
	
	return true;
    1886:	2001      	movs	r0, #1
    1888:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    188a:	2000      	movs	r0, #0
    188c:	e7fc      	b.n	1888 <sercom_init+0x48>
    188e:	4b1e      	ldr	r3, [pc, #120]	; (1908 <sercom_init+0xc8>)
    1890:	4298      	cmp	r0, r3
    1892:	d01f      	beq.n	18d4 <sercom_init+0x94>
    1894:	4b1d      	ldr	r3, [pc, #116]	; (190c <sercom_init+0xcc>)
    1896:	4298      	cmp	r0, r3
    1898:	d108      	bne.n	18ac <sercom_init+0x6c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    189a:	4a16      	ldr	r2, [pc, #88]	; (18f4 <sercom_init+0xb4>)
    189c:	6a13      	ldr	r3, [r2, #32]
    189e:	2180      	movs	r1, #128	; 0x80
    18a0:	430b      	orrs	r3, r1
    18a2:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    18a4:	4b14      	ldr	r3, [pc, #80]	; (18f8 <sercom_init+0xb8>)
    18a6:	4a1a      	ldr	r2, [pc, #104]	; (1910 <sercom_init+0xd0>)
    18a8:	805a      	strh	r2, [r3, #2]
		break;
    18aa:	e7e7      	b.n	187c <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    18ac:	2000      	movs	r0, #0
    18ae:	e7eb      	b.n	1888 <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    18b0:	4a10      	ldr	r2, [pc, #64]	; (18f4 <sercom_init+0xb4>)
    18b2:	6a13      	ldr	r3, [r2, #32]
    18b4:	2108      	movs	r1, #8
    18b6:	430b      	orrs	r3, r1
    18b8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    18ba:	4b0f      	ldr	r3, [pc, #60]	; (18f8 <sercom_init+0xb8>)
    18bc:	4a15      	ldr	r2, [pc, #84]	; (1914 <sercom_init+0xd4>)
    18be:	805a      	strh	r2, [r3, #2]
		break;
    18c0:	e7dc      	b.n	187c <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    18c2:	4a0c      	ldr	r2, [pc, #48]	; (18f4 <sercom_init+0xb4>)
    18c4:	6a13      	ldr	r3, [r2, #32]
    18c6:	2120      	movs	r1, #32
    18c8:	430b      	orrs	r3, r1
    18ca:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    18cc:	4b0a      	ldr	r3, [pc, #40]	; (18f8 <sercom_init+0xb8>)
    18ce:	4a12      	ldr	r2, [pc, #72]	; (1918 <sercom_init+0xd8>)
    18d0:	805a      	strh	r2, [r3, #2]
		break;
    18d2:	e7d3      	b.n	187c <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    18d4:	4a07      	ldr	r2, [pc, #28]	; (18f4 <sercom_init+0xb4>)
    18d6:	6a13      	ldr	r3, [r2, #32]
    18d8:	2140      	movs	r1, #64	; 0x40
    18da:	430b      	orrs	r3, r1
    18dc:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    18de:	4b06      	ldr	r3, [pc, #24]	; (18f8 <sercom_init+0xb8>)
    18e0:	4a0e      	ldr	r2, [pc, #56]	; (191c <sercom_init+0xdc>)
    18e2:	805a      	strh	r2, [r3, #2]
		break;
    18e4:	e7ca      	b.n	187c <sercom_init+0x3c>
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	42001400 	.word	0x42001400
    18ec:	42000c00 	.word	0x42000c00
    18f0:	42001000 	.word	0x42001000
    18f4:	40000400 	.word	0x40000400
    18f8:	40000c00 	.word	0x40000c00
    18fc:	00004016 	.word	0x00004016
    1900:	42000800 	.word	0x42000800
    1904:	00004014 	.word	0x00004014
    1908:	42001800 	.word	0x42001800
    190c:	42001c00 	.word	0x42001c00
    1910:	00004019 	.word	0x00004019
    1914:	00004015 	.word	0x00004015
    1918:	00004017 	.word	0x00004017
    191c:	00004018 	.word	0x00004018

00001920 <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    1920:	b570      	push	{r4, r5, r6, lr}
    1922:	0006      	movs	r6, r0
    1924:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    1926:	4b0a      	ldr	r3, [pc, #40]	; (1950 <spi_set_baud+0x30>)
    1928:	4798      	blx	r3
    192a:	1e04      	subs	r4, r0, #0
    192c:	d00e      	beq.n	194c <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    192e:	0068      	lsls	r0, r5, #1
    1930:	4b08      	ldr	r3, [pc, #32]	; (1954 <spi_set_baud+0x34>)
    1932:	4798      	blx	r3
    1934:	1c01      	adds	r1, r0, #0
    1936:	4b08      	ldr	r3, [pc, #32]	; (1958 <spi_set_baud+0x38>)
    1938:	4808      	ldr	r0, [pc, #32]	; (195c <spi_set_baud+0x3c>)
    193a:	4798      	blx	r3
    193c:	4b08      	ldr	r3, [pc, #32]	; (1960 <spi_set_baud+0x40>)
    193e:	21fe      	movs	r1, #254	; 0xfe
    1940:	0589      	lsls	r1, r1, #22
    1942:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    1944:	4b07      	ldr	r3, [pc, #28]	; (1964 <spi_set_baud+0x44>)
    1946:	4798      	blx	r3
    1948:	b2c0      	uxtb	r0, r0
    194a:	7330      	strb	r0, [r6, #12]
	return true;
}
    194c:	0020      	movs	r0, r4
    194e:	bd70      	pop	{r4, r5, r6, pc}
    1950:	000017e1 	.word	0x000017e1
    1954:	00004575 	.word	0x00004575
    1958:	00003b31 	.word	0x00003b31
    195c:	4c371b00 	.word	0x4c371b00
    1960:	00004179 	.word	0x00004179
    1964:	000037fd 	.word	0x000037fd

00001968 <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    1968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196a:	46ce      	mov	lr, r9
    196c:	4647      	mov	r7, r8
    196e:	b580      	push	{r7, lr}
    1970:	0004      	movs	r4, r0
    1972:	000d      	movs	r5, r1
    1974:	0017      	movs	r7, r2
    1976:	001e      	movs	r6, r3
    1978:	ab08      	add	r3, sp, #32
    197a:	781b      	ldrb	r3, [r3, #0]
    197c:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    197e:	4b12      	ldr	r3, [pc, #72]	; (19c8 <spi_init+0x60>)
    1980:	4798      	blx	r3
    1982:	4680      	mov	r8, r0
    1984:	2800      	cmp	r0, #0
    1986:	d104      	bne.n	1992 <spi_init+0x2a>
}
    1988:	4640      	mov	r0, r8
    198a:	bcc0      	pop	{r6, r7}
    198c:	46b9      	mov	r9, r7
    198e:	46b0      	mov	r8, r6
    1990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    1992:	076d      	lsls	r5, r5, #29
    1994:	073f      	lsls	r7, r7, #28
    1996:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    1998:	0536      	lsls	r6, r6, #20
    199a:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    199c:	464b      	mov	r3, r9
    199e:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    19a0:	431d      	orrs	r5, r3
    19a2:	230c      	movs	r3, #12
    19a4:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    19a6:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    19a8:	2380      	movs	r3, #128	; 0x80
    19aa:	029b      	lsls	r3, r3, #10
    19ac:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    19ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    19b0:	0020      	movs	r0, r4
    19b2:	4b06      	ldr	r3, [pc, #24]	; (19cc <spi_init+0x64>)
    19b4:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    19b6:	6823      	ldr	r3, [r4, #0]
    19b8:	2202      	movs	r2, #2
    19ba:	4313      	orrs	r3, r2
    19bc:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    19be:	69e3      	ldr	r3, [r4, #28]
    19c0:	079b      	lsls	r3, r3, #30
    19c2:	d4fc      	bmi.n	19be <spi_init+0x56>
    19c4:	e7e0      	b.n	1988 <spi_init+0x20>
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	00001841 	.word	0x00001841
    19cc:	00001921 	.word	0x00001921

000019d0 <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    19d0:	7e03      	ldrb	r3, [r0, #24]
    19d2:	07db      	lsls	r3, r3, #31
    19d4:	d5fc      	bpl.n	19d0 <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    19d6:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    19d8:	7e03      	ldrb	r3, [r0, #24]
    19da:	079b      	lsls	r3, r3, #30
    19dc:	d5fc      	bpl.n	19d8 <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    19de:	6a80      	ldr	r0, [r0, #40]	; 0x28
    19e0:	b2c0      	uxtb	r0, r0
}
    19e2:	4770      	bx	lr

000019e4 <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    19e4:	e000      	b.n	19e8 <spi_flush+0x4>
    19e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    19e8:	7e03      	ldrb	r3, [r0, #24]
    19ea:	075b      	lsls	r3, r3, #29
    19ec:	d4fb      	bmi.n	19e6 <spi_flush+0x2>
    19ee:	4770      	bx	lr

000019f0 <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    19f0:	4a27      	ldr	r2, [pc, #156]	; (1a90 <set_clock_48m+0xa0>)
    19f2:	6853      	ldr	r3, [r2, #4]
    19f4:	2102      	movs	r1, #2
    19f6:	430b      	orrs	r3, r1
    19f8:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    19fa:	4a26      	ldr	r2, [pc, #152]	; (1a94 <set_clock_48m+0xa4>)
    19fc:	4b26      	ldr	r3, [pc, #152]	; (1a98 <set_clock_48m+0xa8>)
    19fe:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    1a00:	8a93      	ldrh	r3, [r2, #20]
    1a02:	430b      	orrs	r3, r1
    1a04:	b29b      	uxth	r3, r3
    1a06:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    1a08:	4b22      	ldr	r3, [pc, #136]	; (1a94 <set_clock_48m+0xa4>)
    1a0a:	68db      	ldr	r3, [r3, #12]
    1a0c:	079b      	lsls	r3, r3, #30
    1a0e:	d5fb      	bpl.n	1a08 <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    1a10:	4b22      	ldr	r3, [pc, #136]	; (1a9c <set_clock_48m+0xac>)
    1a12:	2202      	movs	r2, #2
    1a14:	32ff      	adds	r2, #255	; 0xff
    1a16:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    1a18:	4a21      	ldr	r2, [pc, #132]	; (1aa0 <set_clock_48m+0xb0>)
    1a1a:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1a1c:	4b1f      	ldr	r3, [pc, #124]	; (1a9c <set_clock_48m+0xac>)
    1a1e:	785b      	ldrb	r3, [r3, #1]
    1a20:	b25b      	sxtb	r3, r3
    1a22:	2b00      	cmp	r3, #0
    1a24:	dbfa      	blt.n	1a1c <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    1a26:	4b1d      	ldr	r3, [pc, #116]	; (1a9c <set_clock_48m+0xac>)
    1a28:	2282      	movs	r2, #130	; 0x82
    1a2a:	01d2      	lsls	r2, r2, #7
    1a2c:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    1a2e:	4b19      	ldr	r3, [pc, #100]	; (1a94 <set_clock_48m+0xa4>)
    1a30:	68db      	ldr	r3, [r3, #12]
    1a32:	06db      	lsls	r3, r3, #27
    1a34:	d5fb      	bpl.n	1a2e <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    1a36:	4b17      	ldr	r3, [pc, #92]	; (1a94 <set_clock_48m+0xa4>)
    1a38:	2202      	movs	r2, #2
    1a3a:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    1a3c:	4b15      	ldr	r3, [pc, #84]	; (1a94 <set_clock_48m+0xa4>)
    1a3e:	68db      	ldr	r3, [r3, #12]
    1a40:	06db      	lsls	r3, r3, #27
    1a42:	d5fb      	bpl.n	1a3c <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    1a44:	4b13      	ldr	r3, [pc, #76]	; (1a94 <set_clock_48m+0xa4>)
    1a46:	4a17      	ldr	r2, [pc, #92]	; (1aa4 <set_clock_48m+0xb4>)
    1a48:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    1a4a:	4b12      	ldr	r3, [pc, #72]	; (1a94 <set_clock_48m+0xa4>)
    1a4c:	68db      	ldr	r3, [r3, #12]
    1a4e:	06db      	lsls	r3, r3, #27
    1a50:	d5fb      	bpl.n	1a4a <set_clock_48m+0x5a>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    1a52:	4b15      	ldr	r3, [pc, #84]	; (1aa8 <set_clock_48m+0xb8>)
    1a54:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    1a56:	4b0f      	ldr	r3, [pc, #60]	; (1a94 <set_clock_48m+0xa4>)
    1a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a5a:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    1a5c:	4b0d      	ldr	r3, [pc, #52]	; (1a94 <set_clock_48m+0xa4>)
    1a5e:	68db      	ldr	r3, [r3, #12]
    1a60:	06db      	lsls	r3, r3, #27
    1a62:	d5fb      	bpl.n	1a5c <set_clock_48m+0x6c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    1a64:	4a0b      	ldr	r2, [pc, #44]	; (1a94 <set_clock_48m+0xa4>)
    1a66:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1a68:	4910      	ldr	r1, [pc, #64]	; (1aac <set_clock_48m+0xbc>)
    1a6a:	430b      	orrs	r3, r1
    1a6c:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    1a6e:	4b09      	ldr	r3, [pc, #36]	; (1a94 <set_clock_48m+0xa4>)
    1a70:	68db      	ldr	r3, [r3, #12]
    1a72:	061b      	lsls	r3, r3, #24
    1a74:	d5fb      	bpl.n	1a6e <set_clock_48m+0x7e>
    1a76:	4b07      	ldr	r3, [pc, #28]	; (1a94 <set_clock_48m+0xa4>)
    1a78:	68db      	ldr	r3, [r3, #12]
    1a7a:	065b      	lsls	r3, r3, #25
    1a7c:	d5f7      	bpl.n	1a6e <set_clock_48m+0x7e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    1a7e:	4b07      	ldr	r3, [pc, #28]	; (1a9c <set_clock_48m+0xac>)
    1a80:	4a0b      	ldr	r2, [pc, #44]	; (1ab0 <set_clock_48m+0xc0>)
    1a82:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1a84:	4b05      	ldr	r3, [pc, #20]	; (1a9c <set_clock_48m+0xac>)
    1a86:	785b      	ldrb	r3, [r3, #1]
    1a88:	b25b      	sxtb	r3, r3
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	dbfa      	blt.n	1a84 <set_clock_48m+0x94>
}
    1a8e:	4770      	bx	lr
    1a90:	41004000 	.word	0x41004000
    1a94:	40000800 	.word	0x40000800
    1a98:	0000040c 	.word	0x0000040c
    1a9c:	40000c00 	.word	0x40000c00
    1aa0:	00030501 	.word	0x00030501
    1aa4:	7dff05b9 	.word	0x7dff05b9
    1aa8:	00806020 	.word	0x00806020
    1aac:	00000806 	.word	0x00000806
    1ab0:	00030700 	.word	0x00030700

00001ab4 <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    1ab4:	3801      	subs	r0, #1
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	46c0      	nop			; (mov r8, r8)
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	46c0      	nop			; (mov r8, r8)
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	d1f8      	bne.n	1ab4 <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    1ac2:	4770      	bx	lr

00001ac4 <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    1ac4:	4a14      	ldr	r2, [pc, #80]	; (1b18 <init_timer+0x54>)
    1ac6:	6a11      	ldr	r1, [r2, #32]
    1ac8:	2380      	movs	r3, #128	; 0x80
    1aca:	015b      	lsls	r3, r3, #5
    1acc:	430b      	orrs	r3, r1
    1ace:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1ad0:	4b12      	ldr	r3, [pc, #72]	; (1b1c <init_timer+0x58>)
    1ad2:	4a13      	ldr	r2, [pc, #76]	; (1b20 <init_timer+0x5c>)
    1ad4:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1ad6:	4b11      	ldr	r3, [pc, #68]	; (1b1c <init_timer+0x58>)
    1ad8:	785b      	ldrb	r3, [r3, #1]
    1ada:	b25b      	sxtb	r3, r3
    1adc:	2b00      	cmp	r3, #0
    1ade:	dbfa      	blt.n	1ad6 <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    1ae0:	4b10      	ldr	r3, [pc, #64]	; (1b24 <init_timer+0x60>)
    1ae2:	2208      	movs	r2, #8
    1ae4:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1ae6:	4b0f      	ldr	r3, [pc, #60]	; (1b24 <init_timer+0x60>)
    1ae8:	7bdb      	ldrb	r3, [r3, #15]
    1aea:	b25b      	sxtb	r3, r3
    1aec:	2b00      	cmp	r3, #0
    1aee:	dbfa      	blt.n	1ae6 <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    1af0:	4a0c      	ldr	r2, [pc, #48]	; (1b24 <init_timer+0x60>)
    1af2:	8813      	ldrh	r3, [r2, #0]
    1af4:	2102      	movs	r1, #2
    1af6:	430b      	orrs	r3, r1
    1af8:	b29b      	uxth	r3, r3
    1afa:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1afc:	4b09      	ldr	r3, [pc, #36]	; (1b24 <init_timer+0x60>)
    1afe:	7bdb      	ldrb	r3, [r3, #15]
    1b00:	b25b      	sxtb	r3, r3
    1b02:	2b00      	cmp	r3, #0
    1b04:	dbfa      	blt.n	1afc <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    1b06:	4b07      	ldr	r3, [pc, #28]	; (1b24 <init_timer+0x60>)
    1b08:	4a07      	ldr	r2, [pc, #28]	; (1b28 <init_timer+0x64>)
    1b0a:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1b0c:	4b05      	ldr	r3, [pc, #20]	; (1b24 <init_timer+0x60>)
    1b0e:	7bdb      	ldrb	r3, [r3, #15]
    1b10:	b25b      	sxtb	r3, r3
    1b12:	2b00      	cmp	r3, #0
    1b14:	dbfa      	blt.n	1b0c <init_timer+0x48>
}
    1b16:	4770      	bx	lr
    1b18:	40000400 	.word	0x40000400
    1b1c:	40000c00 	.word	0x40000c00
    1b20:	0000401c 	.word	0x0000401c
    1b24:	42003000 	.word	0x42003000
    1b28:	00004010 	.word	0x00004010

00001b2c <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    1b2c:	4b01      	ldr	r3, [pc, #4]	; (1b34 <read_timer_20ns+0x8>)
    1b2e:	6918      	ldr	r0, [r3, #16]
}
    1b30:	4770      	bx	lr
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	42003000 	.word	0x42003000

00001b38 <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    1b38:	4b04      	ldr	r3, [pc, #16]	; (1b4c <init_timer_interrupt+0x14>)
    1b3a:	2210      	movs	r2, #16
    1b3c:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1b3e:	4b03      	ldr	r3, [pc, #12]	; (1b4c <init_timer_interrupt+0x14>)
    1b40:	7bdb      	ldrb	r3, [r3, #15]
    1b42:	b25b      	sxtb	r3, r3
    1b44:	2b00      	cmp	r3, #0
    1b46:	dbfa      	blt.n	1b3e <init_timer_interrupt+0x6>
}
    1b48:	4770      	bx	lr
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	42003000 	.word	0x42003000

00001b50 <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b50:	4b02      	ldr	r3, [pc, #8]	; (1b5c <timer_enable_interrupt+0xc>)
    1b52:	2280      	movs	r2, #128	; 0x80
    1b54:	0312      	lsls	r2, r2, #12
    1b56:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    1b58:	4770      	bx	lr
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	e000e100 	.word	0xe000e100

00001b60 <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b60:	4a04      	ldr	r2, [pc, #16]	; (1b74 <timer_disable_interrupt+0x14>)
    1b62:	2380      	movs	r3, #128	; 0x80
    1b64:	2180      	movs	r1, #128	; 0x80
    1b66:	0309      	lsls	r1, r1, #12
    1b68:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1b6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b6e:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    1b72:	4770      	bx	lr
    1b74:	e000e100 	.word	0xe000e100

00001b78 <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    1b78:	4b04      	ldr	r3, [pc, #16]	; (1b8c <timer_clear_interrupt+0x14>)
    1b7a:	2210      	movs	r2, #16
    1b7c:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b7e:	4a04      	ldr	r2, [pc, #16]	; (1b90 <timer_clear_interrupt+0x18>)
    1b80:	23c0      	movs	r3, #192	; 0xc0
    1b82:	005b      	lsls	r3, r3, #1
    1b84:	2180      	movs	r1, #128	; 0x80
    1b86:	0309      	lsls	r1, r1, #12
    1b88:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    1b8a:	4770      	bx	lr
    1b8c:	42003000 	.word	0x42003000
    1b90:	e000e100 	.word	0xe000e100

00001b94 <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    1b94:	4a02      	ldr	r2, [pc, #8]	; (1ba0 <timer_set_interrupt_time+0xc>)
    1b96:	6993      	ldr	r3, [r2, #24]
    1b98:	4303      	orrs	r3, r0
    1b9a:	6193      	str	r3, [r2, #24]
    1b9c:	4770      	bx	lr
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	42003000 	.word	0x42003000

00001ba4 <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    1ba4:	b570      	push	{r4, r5, r6, lr}
    1ba6:	0006      	movs	r6, r0
    1ba8:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    1baa:	4b10      	ldr	r3, [pc, #64]	; (1bec <uart_set_baud+0x48>)
    1bac:	4798      	blx	r3
    1bae:	1e04      	subs	r4, r0, #0
    1bb0:	d018      	beq.n	1be4 <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    1bb2:	4b0f      	ldr	r3, [pc, #60]	; (1bf0 <uart_set_baud+0x4c>)
    1bb4:	429d      	cmp	r5, r3
    1bb6:	d817      	bhi.n	1be8 <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    1bb8:	4b0e      	ldr	r3, [pc, #56]	; (1bf4 <uart_set_baud+0x50>)
    1bba:	0028      	movs	r0, r5
    1bbc:	4798      	blx	r3
    1bbe:	4b0e      	ldr	r3, [pc, #56]	; (1bf8 <uart_set_baud+0x54>)
    1bc0:	490e      	ldr	r1, [pc, #56]	; (1bfc <uart_set_baud+0x58>)
    1bc2:	4798      	blx	r3
    1bc4:	4d0e      	ldr	r5, [pc, #56]	; (1c00 <uart_set_baud+0x5c>)
    1bc6:	2183      	movs	r1, #131	; 0x83
    1bc8:	05c9      	lsls	r1, r1, #23
    1bca:	47a8      	blx	r5
    1bcc:	1c01      	adds	r1, r0, #0
    1bce:	4b0d      	ldr	r3, [pc, #52]	; (1c04 <uart_set_baud+0x60>)
    1bd0:	20fe      	movs	r0, #254	; 0xfe
    1bd2:	0580      	lsls	r0, r0, #22
    1bd4:	4798      	blx	r3
    1bd6:	218f      	movs	r1, #143	; 0x8f
    1bd8:	05c9      	lsls	r1, r1, #23
    1bda:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    1bdc:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <uart_set_baud+0x64>)
    1bde:	4798      	blx	r3
    1be0:	b280      	uxth	r0, r0
    1be2:	81b0      	strh	r0, [r6, #12]
    return true;
}
    1be4:	0020      	movs	r0, r4
    1be6:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    1be8:	2400      	movs	r4, #0
    1bea:	e7fb      	b.n	1be4 <uart_set_baud+0x40>
    1bec:	000017e1 	.word	0x000017e1
    1bf0:	002dc6c0 	.word	0x002dc6c0
    1bf4:	00004575 	.word	0x00004575
    1bf8:	00003b31 	.word	0x00003b31
    1bfc:	4c371b00 	.word	0x4c371b00
    1c00:	00003efd 	.word	0x00003efd
    1c04:	00004179 	.word	0x00004179
    1c08:	000037fd 	.word	0x000037fd

00001c0c <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    1c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c0e:	0004      	movs	r4, r0
    1c10:	000e      	movs	r6, r1
    1c12:	0017      	movs	r7, r2
    1c14:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    1c16:	4b11      	ldr	r3, [pc, #68]	; (1c5c <uart_init+0x50>)
    1c18:	4798      	blx	r3
    1c1a:	2800      	cmp	r0, #0
    1c1c:	d01c      	beq.n	1c58 <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    1c1e:	0536      	lsls	r6, r6, #20
    1c20:	23c0      	movs	r3, #192	; 0xc0
    1c22:	039b      	lsls	r3, r3, #14
    1c24:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    1c26:	043f      	lsls	r7, r7, #16
    1c28:	22c0      	movs	r2, #192	; 0xc0
    1c2a:	0292      	lsls	r2, r2, #10
    1c2c:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    1c2e:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    1c30:	4b0b      	ldr	r3, [pc, #44]	; (1c60 <uart_init+0x54>)
    1c32:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    1c34:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    1c36:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    1c38:	69e2      	ldr	r2, [r4, #28]
    1c3a:	0752      	lsls	r2, r2, #29
    1c3c:	d4fc      	bmi.n	1c38 <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    1c3e:	0029      	movs	r1, r5
    1c40:	0020      	movs	r0, r4
    1c42:	4b08      	ldr	r3, [pc, #32]	; (1c64 <uart_init+0x58>)
    1c44:	4798      	blx	r3
    1c46:	2800      	cmp	r0, #0
    1c48:	d006      	beq.n	1c58 <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    1c4a:	6823      	ldr	r3, [r4, #0]
    1c4c:	2202      	movs	r2, #2
    1c4e:	4313      	orrs	r3, r2
    1c50:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    1c52:	69e3      	ldr	r3, [r4, #28]
    1c54:	079b      	lsls	r3, r3, #30
    1c56:	d4fc      	bmi.n	1c52 <uart_init+0x46>
}
    1c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	00001841 	.word	0x00001841
    1c60:	40000004 	.word	0x40000004
    1c64:	00001ba5 	.word	0x00001ba5

00001c68 <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    1c68:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    1c6a:	4b10      	ldr	r3, [pc, #64]	; (1cac <usb_ep0_in_multi+0x44>)
    1c6c:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    1c6e:	2c40      	cmp	r4, #64	; 0x40
    1c70:	d900      	bls.n	1c74 <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    1c72:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    1c74:	0026      	movs	r6, r4
    1c76:	4b0d      	ldr	r3, [pc, #52]	; (1cac <usb_ep0_in_multi+0x44>)
    1c78:	1d1d      	adds	r5, r3, #4
    1c7a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    1c7c:	0022      	movs	r2, r4
    1c7e:	0028      	movs	r0, r5
    1c80:	4b0b      	ldr	r3, [pc, #44]	; (1cb0 <usb_ep0_in_multi+0x48>)
    1c82:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    1c84:	2300      	movs	r3, #0
    1c86:	0022      	movs	r2, r4
    1c88:	0029      	movs	r1, r5
    1c8a:	2080      	movs	r0, #128	; 0x80
    1c8c:	4d09      	ldr	r5, [pc, #36]	; (1cb4 <usb_ep0_in_multi+0x4c>)
    1c8e:	47a8      	blx	r5

	if (tsize == 0) {
    1c90:	2c00      	cmp	r4, #0
    1c92:	d007      	beq.n	1ca4 <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    1c94:	4b05      	ldr	r3, [pc, #20]	; (1cac <usb_ep0_in_multi+0x44>)
    1c96:	881a      	ldrh	r2, [r3, #0]
    1c98:	1b12      	subs	r2, r2, r4
    1c9a:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    1c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1c9e:	1992      	adds	r2, r2, r6
    1ca0:	645a      	str	r2, [r3, #68]	; 0x44
}
    1ca2:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    1ca4:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <usb_ep0_in_multi+0x50>)
    1ca6:	4798      	blx	r3
    1ca8:	e7f4      	b.n	1c94 <usb_ep0_in_multi+0x2c>
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	200003e0 	.word	0x200003e0
    1cb0:	0000472d 	.word	0x0000472d
    1cb4:	00002179 	.word	0x00002179
    1cb8:	00002281 	.word	0x00002281

00001cbc <usb_handle_setup>:

void usb_handle_setup(void){
    1cbc:	b510      	push	{r4, lr}
    1cbe:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    1cc0:	4b40      	ldr	r3, [pc, #256]	; (1dc4 <usb_handle_setup+0x108>)
    1cc2:	2248      	movs	r2, #72	; 0x48
    1cc4:	5c9b      	ldrb	r3, [r3, r2]
    1cc6:	3218      	adds	r2, #24
    1cc8:	421a      	tst	r2, r3
    1cca:	d177      	bne.n	1dbc <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    1ccc:	4b3e      	ldr	r3, [pc, #248]	; (1dc8 <usb_handle_setup+0x10c>)
    1cce:	785b      	ldrb	r3, [r3, #1]
    1cd0:	2b0b      	cmp	r3, #11
    1cd2:	d870      	bhi.n	1db6 <usb_handle_setup+0xfa>
    1cd4:	009b      	lsls	r3, r3, #2
    1cd6:	4a3d      	ldr	r2, [pc, #244]	; (1dcc <usb_handle_setup+0x110>)
    1cd8:	58d3      	ldr	r3, [r2, r3]
    1cda:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    1cdc:	4b39      	ldr	r3, [pc, #228]	; (1dc4 <usb_handle_setup+0x108>)
    1cde:	2200      	movs	r2, #0
    1ce0:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    1ce2:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    1ce4:	2002      	movs	r0, #2
    1ce6:	4b3a      	ldr	r3, [pc, #232]	; (1dd0 <usb_handle_setup+0x114>)
    1ce8:	4798      	blx	r3
				return usb_ep0_out();
    1cea:	4b3a      	ldr	r3, [pc, #232]	; (1dd4 <usb_handle_setup+0x118>)
    1cec:	4798      	blx	r3
    1cee:	e067      	b.n	1dc0 <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    1cf0:	2000      	movs	r0, #0
    1cf2:	4b37      	ldr	r3, [pc, #220]	; (1dd0 <usb_handle_setup+0x114>)
    1cf4:	4798      	blx	r3
				return usb_ep0_out();
    1cf6:	4b37      	ldr	r3, [pc, #220]	; (1dd4 <usb_handle_setup+0x118>)
    1cf8:	4798      	blx	r3
    1cfa:	e061      	b.n	1dc0 <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    1cfc:	2000      	movs	r0, #0
    1cfe:	4b34      	ldr	r3, [pc, #208]	; (1dd0 <usb_handle_setup+0x114>)
    1d00:	4798      	blx	r3
				return usb_ep0_out();
    1d02:	4b34      	ldr	r3, [pc, #208]	; (1dd4 <usb_handle_setup+0x118>)
    1d04:	4798      	blx	r3
    1d06:	e05b      	b.n	1dc0 <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    1d08:	4b2f      	ldr	r3, [pc, #188]	; (1dc8 <usb_handle_setup+0x10c>)
    1d0a:	8859      	ldrh	r1, [r3, #2]
    1d0c:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    1d0e:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    1d10:	2300      	movs	r3, #0
    1d12:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    1d14:	aa01      	add	r2, sp, #4
    1d16:	4b30      	ldr	r3, [pc, #192]	; (1dd8 <usb_handle_setup+0x11c>)
    1d18:	4798      	blx	r3

				if (size && descriptor){
    1d1a:	2800      	cmp	r0, #0
    1d1c:	d019      	beq.n	1d52 <usb_handle_setup+0x96>
    1d1e:	9901      	ldr	r1, [sp, #4]
    1d20:	2900      	cmp	r1, #0
    1d22:	d016      	beq.n	1d52 <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    1d24:	4a28      	ldr	r2, [pc, #160]	; (1dc8 <usb_handle_setup+0x10c>)
    1d26:	88d2      	ldrh	r2, [r2, #6]
    1d28:	4282      	cmp	r2, r0
    1d2a:	d300      	bcc.n	1d2e <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    1d2c:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    1d2e:	4b2b      	ldr	r3, [pc, #172]	; (1ddc <usb_handle_setup+0x120>)
    1d30:	4299      	cmp	r1, r3
    1d32:	d005      	beq.n	1d40 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    1d34:	4b23      	ldr	r3, [pc, #140]	; (1dc4 <usb_handle_setup+0x108>)
    1d36:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    1d38:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    1d3a:	4b29      	ldr	r3, [pc, #164]	; (1de0 <usb_handle_setup+0x124>)
    1d3c:	4798      	blx	r3
					}

					return;
    1d3e:	e03f      	b.n	1dc0 <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    1d40:	4920      	ldr	r1, [pc, #128]	; (1dc4 <usb_handle_setup+0x108>)
    1d42:	2300      	movs	r3, #0
    1d44:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    1d46:	3104      	adds	r1, #4
    1d48:	3301      	adds	r3, #1
    1d4a:	2080      	movs	r0, #128	; 0x80
    1d4c:	4c25      	ldr	r4, [pc, #148]	; (1de4 <usb_handle_setup+0x128>)
    1d4e:	47a0      	blx	r4
    1d50:	e036      	b.n	1dc0 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    1d52:	4b25      	ldr	r3, [pc, #148]	; (1de8 <usb_handle_setup+0x12c>)
    1d54:	4798      	blx	r3
    1d56:	e033      	b.n	1dc0 <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    1d58:	4b1a      	ldr	r3, [pc, #104]	; (1dc4 <usb_handle_setup+0x108>)
    1d5a:	2250      	movs	r2, #80	; 0x50
    1d5c:	5c9a      	ldrb	r2, [r3, r2]
    1d5e:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    1d60:	2001      	movs	r0, #1
    1d62:	4b1b      	ldr	r3, [pc, #108]	; (1dd0 <usb_handle_setup+0x114>)
    1d64:	4798      	blx	r3
				return usb_ep0_out();
    1d66:	4b1b      	ldr	r3, [pc, #108]	; (1dd4 <usb_handle_setup+0x118>)
    1d68:	4798      	blx	r3
    1d6a:	e029      	b.n	1dc0 <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    1d6c:	4b16      	ldr	r3, [pc, #88]	; (1dc8 <usb_handle_setup+0x10c>)
    1d6e:	7898      	ldrb	r0, [r3, #2]
    1d70:	4b1e      	ldr	r3, [pc, #120]	; (1dec <usb_handle_setup+0x130>)
    1d72:	4798      	blx	r3
    1d74:	2800      	cmp	r0, #0
    1d76:	d00b      	beq.n	1d90 <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    1d78:	2000      	movs	r0, #0
    1d7a:	4b15      	ldr	r3, [pc, #84]	; (1dd0 <usb_handle_setup+0x114>)
    1d7c:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    1d7e:	4b11      	ldr	r3, [pc, #68]	; (1dc4 <usb_handle_setup+0x108>)
    1d80:	001a      	movs	r2, r3
    1d82:	3248      	adds	r2, #72	; 0x48
    1d84:	7891      	ldrb	r1, [r2, #2]
    1d86:	2250      	movs	r2, #80	; 0x50
    1d88:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    1d8a:	4b12      	ldr	r3, [pc, #72]	; (1dd4 <usb_handle_setup+0x118>)
    1d8c:	4798      	blx	r3
    1d8e:	e017      	b.n	1dc0 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    1d90:	4b15      	ldr	r3, [pc, #84]	; (1de8 <usb_handle_setup+0x12c>)
    1d92:	4798      	blx	r3
    1d94:	e014      	b.n	1dc0 <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    1d96:	4b0c      	ldr	r3, [pc, #48]	; (1dc8 <usb_handle_setup+0x10c>)
    1d98:	8859      	ldrh	r1, [r3, #2]
    1d9a:	8898      	ldrh	r0, [r3, #4]
    1d9c:	4b14      	ldr	r3, [pc, #80]	; (1df0 <usb_handle_setup+0x134>)
    1d9e:	4798      	blx	r3
    1da0:	2800      	cmp	r0, #0
    1da2:	d005      	beq.n	1db0 <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    1da4:	2000      	movs	r0, #0
    1da6:	4b0a      	ldr	r3, [pc, #40]	; (1dd0 <usb_handle_setup+0x114>)
    1da8:	4798      	blx	r3
					return usb_ep0_out();
    1daa:	4b0a      	ldr	r3, [pc, #40]	; (1dd4 <usb_handle_setup+0x118>)
    1dac:	4798      	blx	r3
    1dae:	e007      	b.n	1dc0 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    1db0:	4b0d      	ldr	r3, [pc, #52]	; (1de8 <usb_handle_setup+0x12c>)
    1db2:	4798      	blx	r3
    1db4:	e004      	b.n	1dc0 <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    1db6:	4b0c      	ldr	r3, [pc, #48]	; (1de8 <usb_handle_setup+0x12c>)
    1db8:	4798      	blx	r3
    1dba:	e001      	b.n	1dc0 <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    1dbc:	4b0d      	ldr	r3, [pc, #52]	; (1df4 <usb_handle_setup+0x138>)
    1dbe:	4798      	blx	r3
}
    1dc0:	b002      	add	sp, #8
    1dc2:	bd10      	pop	{r4, pc}
    1dc4:	200003e0 	.word	0x200003e0
    1dc8:	20000428 	.word	0x20000428
    1dcc:	000049a8 	.word	0x000049a8
    1dd0:	00002299 	.word	0x00002299
    1dd4:	00002281 	.word	0x00002281
    1dd8:	00002619 	.word	0x00002619
    1ddc:	200003e4 	.word	0x200003e4
    1de0:	00001c69 	.word	0x00001c69
    1de4:	00002179 	.word	0x00002179
    1de8:	000022b1 	.word	0x000022b1
    1dec:	000025dd 	.word	0x000025dd
    1df0:	000025f5 	.word	0x000025f5
    1df4:	000024cd 	.word	0x000024cd

00001df8 <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    1df8:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    1dfa:	4b05      	ldr	r3, [pc, #20]	; (1e10 <usb_handle_control_out_complete+0x18>)
    1dfc:	2248      	movs	r2, #72	; 0x48
    1dfe:	5c9b      	ldrb	r3, [r3, r2]
    1e00:	3218      	adds	r2, #24
    1e02:	421a      	tst	r2, r3
    1e04:	d100      	bne.n	1e08 <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    1e06:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    1e08:	4b02      	ldr	r3, [pc, #8]	; (1e14 <usb_handle_control_out_complete+0x1c>)
    1e0a:	4798      	blx	r3
}
    1e0c:	e7fb      	b.n	1e06 <usb_handle_control_out_complete+0xe>
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	200003e0 	.word	0x200003e0
    1e14:	000025db 	.word	0x000025db

00001e18 <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    1e18:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    1e1a:	4b0d      	ldr	r3, [pc, #52]	; (1e50 <usb_handle_control_in_complete+0x38>)
    1e1c:	2248      	movs	r2, #72	; 0x48
    1e1e:	5c9b      	ldrb	r3, [r3, r2]
    1e20:	3218      	adds	r2, #24
    1e22:	421a      	tst	r2, r3
    1e24:	d110      	bne.n	1e48 <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    1e26:	4b0b      	ldr	r3, [pc, #44]	; (1e54 <usb_handle_control_in_complete+0x3c>)
    1e28:	785b      	ldrb	r3, [r3, #1]
    1e2a:	2b05      	cmp	r3, #5
    1e2c:	d002      	beq.n	1e34 <usb_handle_control_in_complete+0x1c>
    1e2e:	2b06      	cmp	r3, #6
    1e30:	d007      	beq.n	1e42 <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    1e32:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    1e34:	4b07      	ldr	r3, [pc, #28]	; (1e54 <usb_handle_control_in_complete+0x3c>)
    1e36:	789b      	ldrb	r3, [r3, #2]
    1e38:	207f      	movs	r0, #127	; 0x7f
    1e3a:	4018      	ands	r0, r3
    1e3c:	4b06      	ldr	r3, [pc, #24]	; (1e58 <usb_handle_control_in_complete+0x40>)
    1e3e:	4798      	blx	r3
				return;
    1e40:	e7f7      	b.n	1e32 <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    1e42:	4b06      	ldr	r3, [pc, #24]	; (1e5c <usb_handle_control_in_complete+0x44>)
    1e44:	4798      	blx	r3
				return;
    1e46:	e7f4      	b.n	1e32 <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <usb_handle_control_in_complete+0x48>)
    1e4a:	4798      	blx	r3
    1e4c:	e7f1      	b.n	1e32 <usb_handle_control_in_complete+0x1a>
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	200003e0 	.word	0x200003e0
    1e54:	20000428 	.word	0x20000428
    1e58:	00001fc5 	.word	0x00001fc5
    1e5c:	00001c69 	.word	0x00001c69
    1e60:	000025d9 	.word	0x000025d9

00001e64 <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    1e64:	b570      	push	{r4, r5, r6, lr}
    1e66:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    1e68:	4b0b      	ldr	r3, [pc, #44]	; (1e98 <usb_string_to_descriptor+0x34>)
    1e6a:	4798      	blx	r3
    1e6c:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    1e6e:	281f      	cmp	r0, #31
    1e70:	d900      	bls.n	1e74 <usb_string_to_descriptor+0x10>
    1e72:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    1e74:	1c43      	adds	r3, r0, #1
    1e76:	005b      	lsls	r3, r3, #1
    1e78:	4a08      	ldr	r2, [pc, #32]	; (1e9c <usb_string_to_descriptor+0x38>)
    1e7a:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    1e7c:	2303      	movs	r3, #3
    1e7e:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    1e80:	2200      	movs	r2, #0
    1e82:	e005      	b.n	1e90 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    1e84:	5cb1      	ldrb	r1, [r6, r2]
    1e86:	4b05      	ldr	r3, [pc, #20]	; (1e9c <usb_string_to_descriptor+0x38>)
    1e88:	0054      	lsls	r4, r2, #1
    1e8a:	191b      	adds	r3, r3, r4
    1e8c:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    1e8e:	3201      	adds	r2, #1
    1e90:	4290      	cmp	r0, r2
    1e92:	dcf7      	bgt.n	1e84 <usb_string_to_descriptor+0x20>
	}
	return desc;
    1e94:	4802      	ldr	r0, [pc, #8]	; (1ea0 <usb_string_to_descriptor+0x3c>)
}
    1e96:	bd70      	pop	{r4, r5, r6, pc}
    1e98:	000047bd 	.word	0x000047bd
    1e9c:	200003e0 	.word	0x200003e0
    1ea0:	200003e4 	.word	0x200003e4

00001ea4 <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    1ea4:	4a12      	ldr	r2, [pc, #72]	; (1ef0 <usb_reset+0x4c>)
    1ea6:	4b13      	ldr	r3, [pc, #76]	; (1ef4 <usb_reset+0x50>)
    1ea8:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    1eaa:	685a      	ldr	r2, [r3, #4]
    1eac:	4812      	ldr	r0, [pc, #72]	; (1ef8 <usb_reset+0x54>)
    1eae:	4002      	ands	r2, r0
    1eb0:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    1eb2:	6859      	ldr	r1, [r3, #4]
    1eb4:	22c0      	movs	r2, #192	; 0xc0
    1eb6:	0592      	lsls	r2, r2, #22
    1eb8:	4311      	orrs	r1, r2
    1eba:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    1ebc:	490f      	ldr	r1, [pc, #60]	; (1efc <usb_reset+0x58>)
    1ebe:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    1ec0:	6959      	ldr	r1, [r3, #20]
    1ec2:	4001      	ands	r1, r0
    1ec4:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    1ec6:	6959      	ldr	r1, [r3, #20]
    1ec8:	430a      	orrs	r2, r1
    1eca:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    1ecc:	695a      	ldr	r2, [r3, #20]
    1ece:	0052      	lsls	r2, r2, #1
    1ed0:	0852      	lsrs	r2, r2, #1
    1ed2:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    1ed4:	6959      	ldr	r1, [r3, #20]
    1ed6:	2280      	movs	r2, #128	; 0x80
    1ed8:	0612      	lsls	r2, r2, #24
    1eda:	430a      	orrs	r2, r1
    1edc:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    1ede:	4b08      	ldr	r3, [pc, #32]	; (1f00 <usb_reset+0x5c>)
    1ee0:	220a      	movs	r2, #10
    1ee2:	32ff      	adds	r2, #255	; 0xff
    1ee4:	2110      	movs	r1, #16
    1ee6:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    1ee8:	3a09      	subs	r2, #9
    1eea:	3101      	adds	r1, #1
    1eec:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    1eee:	4770      	bx	lr
    1ef0:	20000434 	.word	0x20000434
    1ef4:	200004c0 	.word	0x200004c0
    1ef8:	8fffffff 	.word	0x8fffffff
    1efc:	200003e4 	.word	0x200003e4
    1f00:	41005000 	.word	0x41005000

00001f04 <usb_init>:
void usb_init(){
    1f04:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    1f06:	4a26      	ldr	r2, [pc, #152]	; (1fa0 <usb_init+0x9c>)
    1f08:	69d3      	ldr	r3, [r2, #28]
    1f0a:	2120      	movs	r1, #32
    1f0c:	430b      	orrs	r3, r1
    1f0e:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    1f10:	4b24      	ldr	r3, [pc, #144]	; (1fa4 <usb_init+0xa0>)
    1f12:	4a25      	ldr	r2, [pc, #148]	; (1fa8 <usb_init+0xa4>)
    1f14:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    1f16:	4b25      	ldr	r3, [pc, #148]	; (1fac <usb_init+0xa8>)
    1f18:	2201      	movs	r2, #1
    1f1a:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    1f1c:	4b23      	ldr	r3, [pc, #140]	; (1fac <usb_init+0xa8>)
    1f1e:	789b      	ldrb	r3, [r3, #2]
    1f20:	07db      	lsls	r3, r3, #31
    1f22:	d4fb      	bmi.n	1f1c <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    1f24:	4b21      	ldr	r3, [pc, #132]	; (1fac <usb_init+0xa8>)
    1f26:	2202      	movs	r2, #2
    1f28:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    1f2a:	4b20      	ldr	r3, [pc, #128]	; (1fac <usb_init+0xa8>)
    1f2c:	789b      	ldrb	r3, [r3, #2]
    1f2e:	079b      	lsls	r3, r3, #30
    1f30:	d4fb      	bmi.n	1f2a <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    1f32:	4b1f      	ldr	r3, [pc, #124]	; (1fb0 <usb_init+0xac>)
    1f34:	685b      	ldr	r3, [r3, #4]
    1f36:	035b      	lsls	r3, r3, #13
    1f38:	22f8      	movs	r2, #248	; 0xf8
    1f3a:	0292      	lsls	r2, r2, #10
    1f3c:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    1f3e:	2b1f      	cmp	r3, #31
    1f40:	d028      	beq.n	1f94 <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    1f42:	4a1b      	ldr	r2, [pc, #108]	; (1fb0 <usb_init+0xac>)
    1f44:	6851      	ldr	r1, [r2, #4]
    1f46:	0489      	lsls	r1, r1, #18
    1f48:	22f8      	movs	r2, #248	; 0xf8
    1f4a:	03d2      	lsls	r2, r2, #15
    1f4c:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    1f4e:	291f      	cmp	r1, #31
    1f50:	d022      	beq.n	1f98 <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    1f52:	4a17      	ldr	r2, [pc, #92]	; (1fb0 <usb_init+0xac>)
    1f54:	6852      	ldr	r2, [r2, #4]
    1f56:	05d2      	lsls	r2, r2, #23
    1f58:	20e0      	movs	r0, #224	; 0xe0
    1f5a:	0480      	lsls	r0, r0, #18
    1f5c:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    1f5e:	2a07      	cmp	r2, #7
    1f60:	d01c      	beq.n	1f9c <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1f62:	019b      	lsls	r3, r3, #6
    1f64:	20f8      	movs	r0, #248	; 0xf8
    1f66:	00c0      	lsls	r0, r0, #3
    1f68:	4003      	ands	r3, r0
    1f6a:	201f      	movs	r0, #31
    1f6c:	4001      	ands	r1, r0
    1f6e:	430b      	orrs	r3, r1
    1f70:	0312      	lsls	r2, r2, #12
    1f72:	4313      	orrs	r3, r2
    1f74:	4d0d      	ldr	r5, [pc, #52]	; (1fac <usb_init+0xa8>)
    1f76:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    1f78:	4b0e      	ldr	r3, [pc, #56]	; (1fb4 <usb_init+0xb0>)
    1f7a:	781a      	ldrb	r2, [r3, #0]
    1f7c:	0112      	lsls	r2, r2, #4
    1f7e:	4c0e      	ldr	r4, [pc, #56]	; (1fb8 <usb_init+0xb4>)
    1f80:	2100      	movs	r1, #0
    1f82:	0020      	movs	r0, r4
    1f84:	4b0d      	ldr	r3, [pc, #52]	; (1fbc <usb_init+0xb8>)
    1f86:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    1f88:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    1f8a:	2308      	movs	r3, #8
    1f8c:	832b      	strh	r3, [r5, #24]
	usb_reset();
    1f8e:	4b0c      	ldr	r3, [pc, #48]	; (1fc0 <usb_init+0xbc>)
    1f90:	4798      	blx	r3
}
    1f92:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    1f94:	3b1a      	subs	r3, #26
    1f96:	e7d4      	b.n	1f42 <usb_init+0x3e>
		pad_transp = 29;
    1f98:	3902      	subs	r1, #2
    1f9a:	e7da      	b.n	1f52 <usb_init+0x4e>
		pad_trim = 3;
    1f9c:	3a04      	subs	r2, #4
    1f9e:	e7e0      	b.n	1f62 <usb_init+0x5e>
    1fa0:	40000400 	.word	0x40000400
    1fa4:	40000c00 	.word	0x40000c00
    1fa8:	00004006 	.word	0x00004006
    1fac:	41005000 	.word	0x41005000
    1fb0:	00806020 	.word	0x00806020
    1fb4:	00004a2a 	.word	0x00004a2a
    1fb8:	200004c0 	.word	0x200004c0
    1fbc:	00004635 	.word	0x00004635
    1fc0:	00001ea5 	.word	0x00001ea5

00001fc4 <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    1fc4:	2380      	movs	r3, #128	; 0x80
    1fc6:	425b      	negs	r3, r3
    1fc8:	4318      	orrs	r0, r3
    1fca:	b2c0      	uxtb	r0, r0
    1fcc:	4b01      	ldr	r3, [pc, #4]	; (1fd4 <usb_set_address+0x10>)
    1fce:	7298      	strb	r0, [r3, #10]
}
    1fd0:	4770      	bx	lr
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	41005000 	.word	0x41005000

00001fd8 <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    1fd8:	b530      	push	{r4, r5, lr}
    1fda:	0003      	movs	r3, r0
	if (ep & 0x80) {
    1fdc:	b240      	sxtb	r0, r0
    1fde:	2800      	cmp	r0, #0
    1fe0:	db24      	blt.n	202c <STACK_SIZE+0x2c>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    1fe2:	203f      	movs	r0, #63	; 0x3f
    1fe4:	4018      	ands	r0, r3
    1fe6:	4b49      	ldr	r3, [pc, #292]	; (210c <STACK_SIZE+0x10c>)
    1fe8:	0144      	lsls	r4, r0, #5
    1fea:	191b      	adds	r3, r3, r4
    1fec:	685c      	ldr	r4, [r3, #4]
    1fee:	4d48      	ldr	r5, [pc, #288]	; (2110 <STACK_SIZE+0x110>)
    1ff0:	402c      	ands	r4, r5
    1ff2:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    1ff4:	685b      	ldr	r3, [r3, #4]
    1ff6:	2a08      	cmp	r2, #8
    1ff8:	d95f      	bls.n	20ba <STACK_SIZE+0xba>
    1ffa:	2a10      	cmp	r2, #16
    1ffc:	d800      	bhi.n	2000 <STACK_SIZE>
    1ffe:	e072      	b.n	20e6 <STACK_SIZE+0xe6>
    2000:	2a20      	cmp	r2, #32
    2002:	d800      	bhi.n	2006 <STACK_SIZE+0x6>
    2004:	e072      	b.n	20ec <STACK_SIZE+0xec>
    2006:	2a40      	cmp	r2, #64	; 0x40
    2008:	d800      	bhi.n	200c <STACK_SIZE+0xc>
    200a:	e072      	b.n	20f2 <STACK_SIZE+0xf2>
    200c:	2a80      	cmp	r2, #128	; 0x80
    200e:	d800      	bhi.n	2012 <STACK_SIZE+0x12>
    2010:	e072      	b.n	20f8 <STACK_SIZE+0xf8>
    2012:	2480      	movs	r4, #128	; 0x80
    2014:	0064      	lsls	r4, r4, #1
    2016:	42a2      	cmp	r2, r4
    2018:	d800      	bhi.n	201c <STACK_SIZE+0x1c>
    201a:	e070      	b.n	20fe <STACK_SIZE+0xfe>
    201c:	3401      	adds	r4, #1
    201e:	34ff      	adds	r4, #255	; 0xff
    2020:	42a2      	cmp	r2, r4
    2022:	d900      	bls.n	2026 <STACK_SIZE+0x26>
    2024:	e06e      	b.n	2104 <STACK_SIZE+0x104>
    2026:	22c0      	movs	r2, #192	; 0xc0
    2028:	05d2      	lsls	r2, r2, #23
    202a:	e047      	b.n	20bc <STACK_SIZE+0xbc>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    202c:	203f      	movs	r0, #63	; 0x3f
    202e:	4003      	ands	r3, r0
    2030:	4836      	ldr	r0, [pc, #216]	; (210c <STACK_SIZE+0x10c>)
    2032:	015c      	lsls	r4, r3, #5
    2034:	1900      	adds	r0, r0, r4
    2036:	6944      	ldr	r4, [r0, #20]
    2038:	4d35      	ldr	r5, [pc, #212]	; (2110 <STACK_SIZE+0x110>)
    203a:	402c      	ands	r4, r5
    203c:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    203e:	6940      	ldr	r0, [r0, #20]
    2040:	2a08      	cmp	r2, #8
    2042:	d912      	bls.n	206a <STACK_SIZE+0x6a>
    2044:	2a10      	cmp	r2, #16
    2046:	d926      	bls.n	2096 <STACK_SIZE+0x96>
    2048:	2a20      	cmp	r2, #32
    204a:	d927      	bls.n	209c <STACK_SIZE+0x9c>
    204c:	2a40      	cmp	r2, #64	; 0x40
    204e:	d928      	bls.n	20a2 <STACK_SIZE+0xa2>
    2050:	2a80      	cmp	r2, #128	; 0x80
    2052:	d929      	bls.n	20a8 <STACK_SIZE+0xa8>
    2054:	2480      	movs	r4, #128	; 0x80
    2056:	0064      	lsls	r4, r4, #1
    2058:	42a2      	cmp	r2, r4
    205a:	d928      	bls.n	20ae <STACK_SIZE+0xae>
    205c:	3401      	adds	r4, #1
    205e:	34ff      	adds	r4, #255	; 0xff
    2060:	42a2      	cmp	r2, r4
    2062:	d827      	bhi.n	20b4 <STACK_SIZE+0xb4>
    2064:	22c0      	movs	r2, #192	; 0xc0
    2066:	05d2      	lsls	r2, r2, #23
    2068:	e000      	b.n	206c <STACK_SIZE+0x6c>
    206a:	2200      	movs	r2, #0
    206c:	4310      	orrs	r0, r2
    206e:	4a27      	ldr	r2, [pc, #156]	; (210c <STACK_SIZE+0x10c>)
    2070:	015c      	lsls	r4, r3, #5
    2072:	1912      	adds	r2, r2, r4
    2074:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    2076:	4c27      	ldr	r4, [pc, #156]	; (2114 <STACK_SIZE+0x114>)
    2078:	3308      	adds	r3, #8
    207a:	015b      	lsls	r3, r3, #5
    207c:	5d1a      	ldrb	r2, [r3, r4]
    207e:	3101      	adds	r1, #1
    2080:	b2c9      	uxtb	r1, r1
    2082:	0109      	lsls	r1, r1, #4
    2084:	2070      	movs	r0, #112	; 0x70
    2086:	4001      	ands	r1, r0
    2088:	430a      	orrs	r2, r1
    208a:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    208c:	46a4      	mov	ip, r4
    208e:	4463      	add	r3, ip
    2090:	22a2      	movs	r2, #162	; 0xa2
    2092:	711a      	strb	r2, [r3, #4]
    2094:	e026      	b.n	20e4 <STACK_SIZE+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2096:	2280      	movs	r2, #128	; 0x80
    2098:	0552      	lsls	r2, r2, #21
    209a:	e7e7      	b.n	206c <STACK_SIZE+0x6c>
    209c:	2280      	movs	r2, #128	; 0x80
    209e:	0592      	lsls	r2, r2, #22
    20a0:	e7e4      	b.n	206c <STACK_SIZE+0x6c>
    20a2:	22c0      	movs	r2, #192	; 0xc0
    20a4:	0592      	lsls	r2, r2, #22
    20a6:	e7e1      	b.n	206c <STACK_SIZE+0x6c>
    20a8:	2280      	movs	r2, #128	; 0x80
    20aa:	05d2      	lsls	r2, r2, #23
    20ac:	e7de      	b.n	206c <STACK_SIZE+0x6c>
    20ae:	22a0      	movs	r2, #160	; 0xa0
    20b0:	05d2      	lsls	r2, r2, #23
    20b2:	e7db      	b.n	206c <STACK_SIZE+0x6c>
    20b4:	22e0      	movs	r2, #224	; 0xe0
    20b6:	05d2      	lsls	r2, r2, #23
    20b8:	e7d8      	b.n	206c <STACK_SIZE+0x6c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    20ba:	2200      	movs	r2, #0
    20bc:	431a      	orrs	r2, r3
    20be:	4b13      	ldr	r3, [pc, #76]	; (210c <STACK_SIZE+0x10c>)
    20c0:	0144      	lsls	r4, r0, #5
    20c2:	191b      	adds	r3, r3, r4
    20c4:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    20c6:	4a13      	ldr	r2, [pc, #76]	; (2114 <STACK_SIZE+0x114>)
    20c8:	3008      	adds	r0, #8
    20ca:	0140      	lsls	r0, r0, #5
    20cc:	5c83      	ldrb	r3, [r0, r2]
    20ce:	3101      	adds	r1, #1
    20d0:	2407      	movs	r4, #7
    20d2:	4021      	ands	r1, r4
    20d4:	430b      	orrs	r3, r1
    20d6:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    20d8:	4694      	mov	ip, r2
    20da:	4460      	add	r0, ip
    20dc:	2340      	movs	r3, #64	; 0x40
    20de:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    20e0:	3b2f      	subs	r3, #47	; 0x2f
    20e2:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    20e4:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    20e6:	2280      	movs	r2, #128	; 0x80
    20e8:	0552      	lsls	r2, r2, #21
    20ea:	e7e7      	b.n	20bc <STACK_SIZE+0xbc>
    20ec:	2280      	movs	r2, #128	; 0x80
    20ee:	0592      	lsls	r2, r2, #22
    20f0:	e7e4      	b.n	20bc <STACK_SIZE+0xbc>
    20f2:	22c0      	movs	r2, #192	; 0xc0
    20f4:	0592      	lsls	r2, r2, #22
    20f6:	e7e1      	b.n	20bc <STACK_SIZE+0xbc>
    20f8:	2280      	movs	r2, #128	; 0x80
    20fa:	05d2      	lsls	r2, r2, #23
    20fc:	e7de      	b.n	20bc <STACK_SIZE+0xbc>
    20fe:	22a0      	movs	r2, #160	; 0xa0
    2100:	05d2      	lsls	r2, r2, #23
    2102:	e7db      	b.n	20bc <STACK_SIZE+0xbc>
    2104:	22e0      	movs	r2, #224	; 0xe0
    2106:	05d2      	lsls	r2, r2, #23
    2108:	e7d8      	b.n	20bc <STACK_SIZE+0xbc>
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	200004c0 	.word	0x200004c0
    2110:	8fffffff 	.word	0x8fffffff
    2114:	41005000 	.word	0x41005000

00002118 <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    2118:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    211a:	4d12      	ldr	r5, [pc, #72]	; (2164 <usb_ep_start_out+0x4c>)
    211c:	0144      	lsls	r4, r0, #5
    211e:	192b      	adds	r3, r5, r4
    2120:	685e      	ldr	r6, [r3, #4]
    2122:	4f11      	ldr	r7, [pc, #68]	; (2168 <usb_ep_start_out+0x50>)
    2124:	403e      	ands	r6, r7
    2126:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    2128:	685e      	ldr	r6, [r3, #4]
    212a:	0392      	lsls	r2, r2, #14
    212c:	4f0f      	ldr	r7, [pc, #60]	; (216c <usb_ep_start_out+0x54>)
    212e:	403a      	ands	r2, r7
    2130:	4316      	orrs	r6, r2
    2132:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2134:	685a      	ldr	r2, [r3, #4]
    2136:	0b92      	lsrs	r2, r2, #14
    2138:	0392      	lsls	r2, r2, #14
    213a:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    213c:	685a      	ldr	r2, [r3, #4]
    213e:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    2140:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    2142:	3008      	adds	r0, #8
    2144:	0140      	lsls	r0, r0, #5
    2146:	4b0a      	ldr	r3, [pc, #40]	; (2170 <usb_ep_start_out+0x58>)
    2148:	469c      	mov	ip, r3
    214a:	4460      	add	r0, ip
    214c:	2305      	movs	r3, #5
    214e:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    2150:	4b08      	ldr	r3, [pc, #32]	; (2174 <usb_ep_start_out+0x5c>)
    2152:	469c      	mov	ip, r3
    2154:	4464      	add	r4, ip
    2156:	2301      	movs	r3, #1
    2158:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    215a:	333f      	adds	r3, #63	; 0x3f
    215c:	7103      	strb	r3, [r0, #4]
	return 0;
}
    215e:	2000      	movs	r0, #0
    2160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	200004c0 	.word	0x200004c0
    2168:	f0003fff 	.word	0xf0003fff
    216c:	0fffc000 	.word	0x0fffc000
    2170:	41005000 	.word	0x41005000
    2174:	41005109 	.word	0x41005109

00002178 <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    2178:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    217a:	243f      	movs	r4, #63	; 0x3f
    217c:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    217e:	4c15      	ldr	r4, [pc, #84]	; (21d4 <usb_ep_start_in+0x5c>)
    2180:	0146      	lsls	r6, r0, #5
    2182:	19a4      	adds	r4, r4, r6
    2184:	6965      	ldr	r5, [r4, #20]
    2186:	006d      	lsls	r5, r5, #1
    2188:	086d      	lsrs	r5, r5, #1
    218a:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    218c:	6965      	ldr	r5, [r4, #20]
    218e:	07db      	lsls	r3, r3, #31
    2190:	431d      	orrs	r5, r3
    2192:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    2194:	6963      	ldr	r3, [r4, #20]
    2196:	4d10      	ldr	r5, [pc, #64]	; (21d8 <usb_ep_start_in+0x60>)
    2198:	402b      	ands	r3, r5
    219a:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    219c:	6963      	ldr	r3, [r4, #20]
    219e:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    21a0:	6963      	ldr	r3, [r4, #20]
    21a2:	0b9b      	lsrs	r3, r3, #14
    21a4:	039b      	lsls	r3, r3, #14
    21a6:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    21a8:	6963      	ldr	r3, [r4, #20]
    21aa:	0492      	lsls	r2, r2, #18
    21ac:	0c92      	lsrs	r2, r2, #18
    21ae:	4313      	orrs	r3, r2
    21b0:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    21b2:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    21b4:	3008      	adds	r0, #8
    21b6:	0140      	lsls	r0, r0, #5
    21b8:	4b08      	ldr	r3, [pc, #32]	; (21dc <usb_ep_start_in+0x64>)
    21ba:	469c      	mov	ip, r3
    21bc:	4460      	add	r0, ip
    21be:	230a      	movs	r3, #10
    21c0:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    21c2:	4b07      	ldr	r3, [pc, #28]	; (21e0 <usb_ep_start_in+0x68>)
    21c4:	469c      	mov	ip, r3
    21c6:	4466      	add	r6, ip
    21c8:	2302      	movs	r3, #2
    21ca:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    21cc:	337e      	adds	r3, #126	; 0x7e
    21ce:	7143      	strb	r3, [r0, #5]
	return 0;
}
    21d0:	2000      	movs	r0, #0
    21d2:	bd70      	pop	{r4, r5, r6, pc}
    21d4:	200004c0 	.word	0x200004c0
    21d8:	f0003fff 	.word	0xf0003fff
    21dc:	41005000 	.word	0x41005000
    21e0:	41005109 	.word	0x41005109

000021e4 <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    21e4:	b243      	sxtb	r3, r0
    21e6:	2b00      	cmp	r3, #0
    21e8:	db0a      	blt.n	2200 <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    21ea:	233f      	movs	r3, #63	; 0x3f
    21ec:	4003      	ands	r3, r0
    21ee:	3308      	adds	r3, #8
    21f0:	015b      	lsls	r3, r3, #5
    21f2:	4a09      	ldr	r2, [pc, #36]	; (2218 <usb_ep_pending+0x34>)
    21f4:	4694      	mov	ip, r2
    21f6:	4463      	add	r3, ip
    21f8:	79d8      	ldrb	r0, [r3, #7]
    21fa:	2301      	movs	r3, #1
    21fc:	4018      	ands	r0, r3
	}
}
    21fe:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    2200:	233f      	movs	r3, #63	; 0x3f
    2202:	4003      	ands	r3, r0
    2204:	3308      	adds	r3, #8
    2206:	015b      	lsls	r3, r3, #5
    2208:	4a03      	ldr	r2, [pc, #12]	; (2218 <usb_ep_pending+0x34>)
    220a:	4694      	mov	ip, r2
    220c:	4463      	add	r3, ip
    220e:	79db      	ldrb	r3, [r3, #7]
    2210:	085b      	lsrs	r3, r3, #1
    2212:	2001      	movs	r0, #1
    2214:	4018      	ands	r0, r3
    2216:	e7f2      	b.n	21fe <usb_ep_pending+0x1a>
    2218:	41005000 	.word	0x41005000

0000221c <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    221c:	b243      	sxtb	r3, r0
    221e:	2b00      	cmp	r3, #0
    2220:	db09      	blt.n	2236 <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    2222:	233f      	movs	r3, #63	; 0x3f
    2224:	4003      	ands	r3, r0
    2226:	3308      	adds	r3, #8
    2228:	015b      	lsls	r3, r3, #5
    222a:	4a08      	ldr	r2, [pc, #32]	; (224c <usb_ep_handled+0x30>)
    222c:	4694      	mov	ip, r2
    222e:	4463      	add	r3, ip
    2230:	2201      	movs	r2, #1
    2232:	71da      	strb	r2, [r3, #7]
	}
}
    2234:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    2236:	233f      	movs	r3, #63	; 0x3f
    2238:	4003      	ands	r3, r0
    223a:	3308      	adds	r3, #8
    223c:	015b      	lsls	r3, r3, #5
    223e:	4a03      	ldr	r2, [pc, #12]	; (224c <usb_ep_handled+0x30>)
    2240:	4694      	mov	ip, r2
    2242:	4463      	add	r3, ip
    2244:	2202      	movs	r2, #2
    2246:	71da      	strb	r2, [r3, #7]
    2248:	e7f4      	b.n	2234 <usb_ep_handled+0x18>
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	41005000 	.word	0x41005000

00002250 <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    2250:	4b03      	ldr	r3, [pc, #12]	; (2260 <usb_ep_out_length+0x10>)
    2252:	0140      	lsls	r0, r0, #5
    2254:	181b      	adds	r3, r3, r0
    2256:	6858      	ldr	r0, [r3, #4]
    2258:	0480      	lsls	r0, r0, #18
    225a:	0c80      	lsrs	r0, r0, #18
}
    225c:	4770      	bx	lr
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	200004c0 	.word	0x200004c0

00002264 <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2264:	4b04      	ldr	r3, [pc, #16]	; (2278 <usb_attach+0x14>)
    2266:	2280      	movs	r2, #128	; 0x80
    2268:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    226a:	4a04      	ldr	r2, [pc, #16]	; (227c <usb_attach+0x18>)
    226c:	8913      	ldrh	r3, [r2, #8]
    226e:	2101      	movs	r1, #1
    2270:	438b      	bics	r3, r1
    2272:	8113      	strh	r3, [r2, #8]
}
    2274:	4770      	bx	lr
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	e000e100 	.word	0xe000e100
    227c:	41005000 	.word	0x41005000

00002280 <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    2280:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    2282:	4903      	ldr	r1, [pc, #12]	; (2290 <usb_ep0_out+0x10>)
    2284:	2240      	movs	r2, #64	; 0x40
    2286:	2000      	movs	r0, #0
    2288:	4b02      	ldr	r3, [pc, #8]	; (2294 <usb_ep0_out+0x14>)
    228a:	4798      	blx	r3
}
    228c:	bd10      	pop	{r4, pc}
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	20000434 	.word	0x20000434
    2294:	00002119 	.word	0x00002119

00002298 <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    2298:	b510      	push	{r4, lr}
    229a:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    229c:	4902      	ldr	r1, [pc, #8]	; (22a8 <usb_ep0_in+0x10>)
    229e:	2301      	movs	r3, #1
    22a0:	2080      	movs	r0, #128	; 0x80
    22a2:	4c02      	ldr	r4, [pc, #8]	; (22ac <usb_ep0_in+0x14>)
    22a4:	47a0      	blx	r4
}
    22a6:	bd10      	pop	{r4, pc}
    22a8:	200003e4 	.word	0x200003e4
    22ac:	00002179 	.word	0x00002179

000022b0 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    22b0:	4a02      	ldr	r2, [pc, #8]	; (22bc <usb_ep0_stall+0xc>)
    22b2:	2306      	movs	r3, #6
    22b4:	33ff      	adds	r3, #255	; 0xff
    22b6:	2130      	movs	r1, #48	; 0x30
    22b8:	54d1      	strb	r1, [r2, r3]
}
    22ba:	4770      	bx	lr
    22bc:	41005000 	.word	0x41005000

000022c0 <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    22c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    22c2:	4b25      	ldr	r3, [pc, #148]	; (2358 <usb_handle_function+0x98>)
    22c4:	8c1c      	ldrh	r4, [r3, #32]
    22c6:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    22c8:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    22ca:	071b      	lsls	r3, r3, #28
    22cc:	d410      	bmi.n	22f0 <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    22ce:	07e3      	lsls	r3, r4, #31
    22d0:	d50c      	bpl.n	22ec <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    22d2:	4921      	ldr	r1, [pc, #132]	; (2358 <usb_handle_function+0x98>)
    22d4:	2208      	movs	r2, #8
    22d6:	32ff      	adds	r2, #255	; 0xff
    22d8:	5c8b      	ldrb	r3, [r1, r2]
    22da:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    22dc:	2013      	movs	r0, #19
    22de:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    22e0:	06db      	lsls	r3, r3, #27
    22e2:	d40d      	bmi.n	2300 <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    22e4:	07eb      	lsls	r3, r5, #31
    22e6:	d413      	bmi.n	2310 <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    22e8:	07ad      	lsls	r5, r5, #30
    22ea:	d414      	bmi.n	2316 <usb_handle_function+0x56>
void usb_handle_function() {
    22ec:	2301      	movs	r3, #1
    22ee:	e016      	b.n	231e <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    22f0:	4b19      	ldr	r3, [pc, #100]	; (2358 <usb_handle_function+0x98>)
    22f2:	2208      	movs	r2, #8
    22f4:	839a      	strh	r2, [r3, #28]
		usb_reset();
    22f6:	4b19      	ldr	r3, [pc, #100]	; (235c <usb_handle_function+0x9c>)
    22f8:	4798      	blx	r3
		usb_cb_reset();
    22fa:	4b19      	ldr	r3, [pc, #100]	; (2360 <usb_handle_function+0xa0>)
    22fc:	4798      	blx	r3
		goto usb_handle_function_end;
    22fe:	e026      	b.n	234e <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    2300:	4818      	ldr	r0, [pc, #96]	; (2364 <usb_handle_function+0xa4>)
    2302:	4919      	ldr	r1, [pc, #100]	; (2368 <usb_handle_function+0xa8>)
    2304:	3aff      	subs	r2, #255	; 0xff
    2306:	4b19      	ldr	r3, [pc, #100]	; (236c <usb_handle_function+0xac>)
    2308:	4798      	blx	r3
			usb_handle_setup();
    230a:	4b19      	ldr	r3, [pc, #100]	; (2370 <usb_handle_function+0xb0>)
    230c:	4798      	blx	r3
    230e:	e7e9      	b.n	22e4 <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    2310:	4b18      	ldr	r3, [pc, #96]	; (2374 <usb_handle_function+0xb4>)
    2312:	4798      	blx	r3
    2314:	e7e8      	b.n	22e8 <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    2316:	4b18      	ldr	r3, [pc, #96]	; (2378 <usb_handle_function+0xb8>)
    2318:	4798      	blx	r3
    231a:	e7e7      	b.n	22ec <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    231c:	3301      	adds	r3, #1
    231e:	4a17      	ldr	r2, [pc, #92]	; (237c <usb_handle_function+0xbc>)
    2320:	7812      	ldrb	r2, [r2, #0]
    2322:	429a      	cmp	r2, r3
    2324:	dd11      	ble.n	234a <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    2326:	2201      	movs	r2, #1
    2328:	409a      	lsls	r2, r3
    232a:	4214      	tst	r4, r2
    232c:	d0f6      	beq.n	231c <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    232e:	001a      	movs	r2, r3
    2330:	3208      	adds	r2, #8
    2332:	0152      	lsls	r2, r2, #5
    2334:	4908      	ldr	r1, [pc, #32]	; (2358 <usb_handle_function+0x98>)
    2336:	468c      	mov	ip, r1
    2338:	4462      	add	r2, ip
    233a:	79d1      	ldrb	r1, [r2, #7]
    233c:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    233e:	015a      	lsls	r2, r3, #5
    2340:	480f      	ldr	r0, [pc, #60]	; (2380 <usb_handle_function+0xc0>)
    2342:	4684      	mov	ip, r0
    2344:	4462      	add	r2, ip
    2346:	7011      	strb	r1, [r2, #0]
    2348:	e7e8      	b.n	231c <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    234a:	4b0e      	ldr	r3, [pc, #56]	; (2384 <usb_handle_function+0xc4>)
    234c:	4798      	blx	r3
    234e:	4b0e      	ldr	r3, [pc, #56]	; (2388 <usb_handle_function+0xc8>)
    2350:	2280      	movs	r2, #128	; 0x80
    2352:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    2354:	bd70      	pop	{r4, r5, r6, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	41005000 	.word	0x41005000
    235c:	00001ea5 	.word	0x00001ea5
    2360:	000024c9 	.word	0x000024c9
    2364:	20000428 	.word	0x20000428
    2368:	20000434 	.word	0x20000434
    236c:	0000472d 	.word	0x0000472d
    2370:	00001cbd 	.word	0x00001cbd
    2374:	00001df9 	.word	0x00001df9
    2378:	00001e19 	.word	0x00001e19
    237c:	00004a2a 	.word	0x00004a2a
    2380:	41005108 	.word	0x41005108
    2384:	00002599 	.word	0x00002599
    2388:	e000e100 	.word	0xe000e100

0000238c <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    238c:	b510      	push	{r4, lr}
    238e:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    2390:	2000      	movs	r0, #0
    2392:	e01c      	b.n	23ce <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    2394:	0082      	lsls	r2, r0, #2
    2396:	1812      	adds	r2, r2, r0
    2398:	17d4      	asrs	r4, r2, #31
    239a:	2307      	movs	r3, #7
    239c:	0019      	movs	r1, r3
    239e:	4021      	ands	r1, r4
    23a0:	1889      	adds	r1, r1, r2
    23a2:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    23a4:	0f64      	lsrs	r4, r4, #29
    23a6:	1912      	adds	r2, r2, r4
    23a8:	4013      	ands	r3, r2
    23aa:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    23ac:	4a0c      	ldr	r2, [pc, #48]	; (23e0 <samd_serial_number_string_descriptor+0x54>)
    23ae:	5c8a      	ldrb	r2, [r1, r2]
    23b0:	411a      	asrs	r2, r3
    23b2:	4c0c      	ldr	r4, [pc, #48]	; (23e4 <samd_serial_number_string_descriptor+0x58>)
    23b4:	5d09      	ldrb	r1, [r1, r4]
    23b6:	2408      	movs	r4, #8
    23b8:	1ae3      	subs	r3, r4, r3
    23ba:	4099      	lsls	r1, r3
    23bc:	000b      	movs	r3, r1
    23be:	4313      	orrs	r3, r2
    23c0:	221f      	movs	r2, #31
    23c2:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    23c4:	4a08      	ldr	r2, [pc, #32]	; (23e8 <samd_serial_number_string_descriptor+0x5c>)
    23c6:	5cd2      	ldrb	r2, [r2, r3]
    23c8:	ab01      	add	r3, sp, #4
    23ca:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    23cc:	3001      	adds	r0, #1
    23ce:	2819      	cmp	r0, #25
    23d0:	dde0      	ble.n	2394 <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    23d2:	a801      	add	r0, sp, #4
    23d4:	2300      	movs	r3, #0
    23d6:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    23d8:	4b04      	ldr	r3, [pc, #16]	; (23ec <samd_serial_number_string_descriptor+0x60>)
    23da:	4798      	blx	r3
}
    23dc:	b008      	add	sp, #32
    23de:	bd10      	pop	{r4, pc}
    23e0:	0080a00c 	.word	0x0080a00c
    23e4:	0080a00d 	.word	0x0080a00d
    23e8:	000049d8 	.word	0x000049d8
    23ec:	00001e65 	.word	0x00001e65

000023f0 <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    23f0:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    23f2:	2208      	movs	r2, #8
    23f4:	2103      	movs	r1, #3
    23f6:	2081      	movs	r0, #129	; 0x81
    23f8:	4c09      	ldr	r4, [pc, #36]	; (2420 <usb_serial_init+0x30>)
    23fa:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    23fc:	2220      	movs	r2, #32
    23fe:	2102      	movs	r1, #2
    2400:	2002      	movs	r0, #2
    2402:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2404:	2220      	movs	r2, #32
    2406:	2102      	movs	r1, #2
    2408:	2082      	movs	r0, #130	; 0x82
    240a:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    240c:	4c05      	ldr	r4, [pc, #20]	; (2424 <usb_serial_init+0x34>)
    240e:	2220      	movs	r2, #32
    2410:	0021      	movs	r1, r4
    2412:	2002      	movs	r0, #2
    2414:	4b04      	ldr	r3, [pc, #16]	; (2428 <usb_serial_init+0x38>)
    2416:	4798      	blx	r3
	
	usb_tx_busy = false;
    2418:	2320      	movs	r3, #32
    241a:	2200      	movs	r2, #0
    241c:	54e2      	strb	r2, [r4, r3]
}
    241e:	bd10      	pop	{r4, pc}
    2420:	00001fd9 	.word	0x00001fd9
    2424:	20000474 	.word	0x20000474
    2428:	00002119 	.word	0x00002119

0000242c <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    242c:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    242e:	2002      	movs	r0, #2
    2430:	4b02      	ldr	r3, [pc, #8]	; (243c <usb_serial_out_completion+0x10>)
    2432:	4798      	blx	r3
    2434:	4b02      	ldr	r3, [pc, #8]	; (2440 <usb_serial_out_completion+0x14>)
    2436:	6258      	str	r0, [r3, #36]	; 0x24
}
    2438:	bd10      	pop	{r4, pc}
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	00002251 	.word	0x00002251
    2440:	20000474 	.word	0x20000474

00002444 <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    2444:	4b02      	ldr	r3, [pc, #8]	; (2450 <usb_serial_in_completion+0xc>)
    2446:	2220      	movs	r2, #32
    2448:	2100      	movs	r1, #0
    244a:	5499      	strb	r1, [r3, r2]
}
    244c:	4770      	bx	lr
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	20000474 	.word	0x20000474

00002454 <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    2454:	b570      	push	{r4, r5, r6, lr}
    2456:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    2458:	2920      	cmp	r1, #32
    245a:	dd00      	ble.n	245e <usb_serial_send_buffer+0xa>
    245c:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    245e:	4d09      	ldr	r5, [pc, #36]	; (2484 <usb_serial_send_buffer+0x30>)
    2460:	002e      	movs	r6, r5
    2462:	3628      	adds	r6, #40	; 0x28
    2464:	0022      	movs	r2, r4
    2466:	0001      	movs	r1, r0
    2468:	0030      	movs	r0, r6
    246a:	4b07      	ldr	r3, [pc, #28]	; (2488 <usb_serial_send_buffer+0x34>)
    246c:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    246e:	2300      	movs	r3, #0
    2470:	0022      	movs	r2, r4
    2472:	0031      	movs	r1, r6
    2474:	2082      	movs	r0, #130	; 0x82
    2476:	4e05      	ldr	r6, [pc, #20]	; (248c <usb_serial_send_buffer+0x38>)
    2478:	47b0      	blx	r6
	usb_tx_busy = true;
    247a:	2320      	movs	r3, #32
    247c:	2201      	movs	r2, #1
    247e:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    2480:	0020      	movs	r0, r4
    2482:	bd70      	pop	{r4, r5, r6, pc}
    2484:	20000474 	.word	0x20000474
    2488:	0000472d 	.word	0x0000472d
    248c:	00002179 	.word	0x00002179

00002490 <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    2490:	b570      	push	{r4, r5, r6, lr}
    2492:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    2494:	4b09      	ldr	r3, [pc, #36]	; (24bc <usb_serial_read_buffer+0x2c>)
    2496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2498:	4299      	cmp	r1, r3
    249a:	d901      	bls.n	24a0 <usb_serial_read_buffer+0x10>
    249c:	4b07      	ldr	r3, [pc, #28]	; (24bc <usb_serial_read_buffer+0x2c>)
    249e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    24a0:	4d06      	ldr	r5, [pc, #24]	; (24bc <usb_serial_read_buffer+0x2c>)
    24a2:	0022      	movs	r2, r4
    24a4:	0029      	movs	r1, r5
    24a6:	4b06      	ldr	r3, [pc, #24]	; (24c0 <usb_serial_read_buffer+0x30>)
    24a8:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    24aa:	2220      	movs	r2, #32
    24ac:	0029      	movs	r1, r5
    24ae:	2002      	movs	r0, #2
    24b0:	4b04      	ldr	r3, [pc, #16]	; (24c4 <usb_serial_read_buffer+0x34>)
    24b2:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    24b4:	2300      	movs	r3, #0
    24b6:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    24b8:	0020      	movs	r0, r4
    24ba:	bd70      	pop	{r4, r5, r6, pc}
    24bc:	20000474 	.word	0x20000474
    24c0:	0000472d 	.word	0x0000472d
    24c4:	00002119 	.word	0x00002119

000024c8 <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    24c8:	4770      	bx	lr
	...

000024cc <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    24cc:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    24ce:	4b2a      	ldr	r3, [pc, #168]	; (2578 <usb_cb_control_setup+0xac>)
    24d0:	781a      	ldrb	r2, [r3, #0]
    24d2:	2360      	movs	r3, #96	; 0x60
    24d4:	4013      	ands	r3, r2
    24d6:	2b20      	cmp	r3, #32
    24d8:	d000      	beq.n	24dc <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    24da:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    24dc:	4b26      	ldr	r3, [pc, #152]	; (2578 <usb_cb_control_setup+0xac>)
    24de:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    24e0:	231f      	movs	r3, #31
    24e2:	4013      	ands	r3, r2
    24e4:	2b01      	cmp	r3, #1
    24e6:	d144      	bne.n	2572 <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    24e8:	2900      	cmp	r1, #0
    24ea:	d1f6      	bne.n	24da <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    24ec:	4b22      	ldr	r3, [pc, #136]	; (2578 <usb_cb_control_setup+0xac>)
    24ee:	785b      	ldrb	r3, [r3, #1]
    24f0:	2b22      	cmp	r3, #34	; 0x22
    24f2:	d031      	beq.n	2558 <usb_cb_control_setup+0x8c>
    24f4:	d80c      	bhi.n	2510 <usb_cb_control_setup+0x44>
    24f6:	2b20      	cmp	r3, #32
    24f8:	d026      	beq.n	2548 <usb_cb_control_setup+0x7c>
    24fa:	2b21      	cmp	r3, #33	; 0x21
    24fc:	d136      	bne.n	256c <usb_cb_control_setup+0xa0>
    24fe:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2500:	2b06      	cmp	r3, #6
    2502:	d823      	bhi.n	254c <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    2504:	4a1d      	ldr	r2, [pc, #116]	; (257c <usb_cb_control_setup+0xb0>)
    2506:	5cd1      	ldrb	r1, [r2, r3]
    2508:	4a1d      	ldr	r2, [pc, #116]	; (2580 <usb_cb_control_setup+0xb4>)
    250a:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    250c:	3301      	adds	r3, #1
    250e:	e7f7      	b.n	2500 <usb_cb_control_setup+0x34>
    2510:	2b23      	cmp	r3, #35	; 0x23
    2512:	d12b      	bne.n	256c <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    2514:	2000      	movs	r0, #0
    2516:	4b1b      	ldr	r3, [pc, #108]	; (2584 <usb_cb_control_setup+0xb8>)
    2518:	4798      	blx	r3
					usb_ep0_out();
    251a:	4b1b      	ldr	r3, [pc, #108]	; (2588 <usb_cb_control_setup+0xbc>)
    251c:	4798      	blx	r3
					break;
    251e:	e7dc      	b.n	24da <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    2520:	4b16      	ldr	r3, [pc, #88]	; (257c <usb_cb_control_setup+0xb0>)
    2522:	491a      	ldr	r1, [pc, #104]	; (258c <usb_cb_control_setup+0xc0>)
    2524:	5c89      	ldrb	r1, [r1, r2]
    2526:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    2528:	3201      	adds	r2, #1
    252a:	4b13      	ldr	r3, [pc, #76]	; (2578 <usb_cb_control_setup+0xac>)
    252c:	7999      	ldrb	r1, [r3, #6]
    252e:	79db      	ldrb	r3, [r3, #7]
    2530:	021b      	lsls	r3, r3, #8
    2532:	430b      	orrs	r3, r1
    2534:	4293      	cmp	r3, r2
    2536:	dd01      	ble.n	253c <usb_cb_control_setup+0x70>
    2538:	2a06      	cmp	r2, #6
    253a:	d9f1      	bls.n	2520 <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    253c:	2000      	movs	r0, #0
    253e:	4b11      	ldr	r3, [pc, #68]	; (2584 <usb_cb_control_setup+0xb8>)
    2540:	4798      	blx	r3
					usb_ep0_out();
    2542:	4b11      	ldr	r3, [pc, #68]	; (2588 <usb_cb_control_setup+0xbc>)
    2544:	4798      	blx	r3
					break;
    2546:	e7c8      	b.n	24da <usb_cb_control_setup+0xe>
    2548:	2200      	movs	r2, #0
    254a:	e7ee      	b.n	252a <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    254c:	2007      	movs	r0, #7
    254e:	4b0d      	ldr	r3, [pc, #52]	; (2584 <usb_cb_control_setup+0xb8>)
    2550:	4798      	blx	r3
					usb_ep0_out();
    2552:	4b0d      	ldr	r3, [pc, #52]	; (2588 <usb_cb_control_setup+0xbc>)
    2554:	4798      	blx	r3
					break;
    2556:	e7c0      	b.n	24da <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    2558:	4b07      	ldr	r3, [pc, #28]	; (2578 <usb_cb_control_setup+0xac>)
    255a:	789a      	ldrb	r2, [r3, #2]
    255c:	4b0c      	ldr	r3, [pc, #48]	; (2590 <usb_cb_control_setup+0xc4>)
    255e:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    2560:	2000      	movs	r0, #0
    2562:	4b08      	ldr	r3, [pc, #32]	; (2584 <usb_cb_control_setup+0xb8>)
    2564:	4798      	blx	r3
					usb_ep0_out();
    2566:	4b08      	ldr	r3, [pc, #32]	; (2588 <usb_cb_control_setup+0xbc>)
    2568:	4798      	blx	r3
					break;
    256a:	e7b6      	b.n	24da <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    256c:	4b09      	ldr	r3, [pc, #36]	; (2594 <usb_cb_control_setup+0xc8>)
    256e:	4798      	blx	r3
					break;
    2570:	e7b3      	b.n	24da <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    2572:	4b08      	ldr	r3, [pc, #32]	; (2594 <usb_cb_control_setup+0xc8>)
    2574:	4798      	blx	r3
}
    2576:	e7b0      	b.n	24da <usb_cb_control_setup+0xe>
    2578:	20000428 	.word	0x20000428
    257c:	20000000 	.word	0x20000000
    2580:	200003e4 	.word	0x200003e4
    2584:	00002299 	.word	0x00002299
    2588:	00002281 	.word	0x00002281
    258c:	20000434 	.word	0x20000434
    2590:	200004bc 	.word	0x200004bc
    2594:	000022b1 	.word	0x000022b1

00002598 <usb_cb_completion>:

void usb_cb_completion(void) {
    2598:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    259a:	2002      	movs	r0, #2
    259c:	4b0a      	ldr	r3, [pc, #40]	; (25c8 <usb_cb_completion+0x30>)
    259e:	4798      	blx	r3
    25a0:	2800      	cmp	r0, #0
    25a2:	d105      	bne.n	25b0 <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    25a4:	2082      	movs	r0, #130	; 0x82
    25a6:	4b08      	ldr	r3, [pc, #32]	; (25c8 <usb_cb_completion+0x30>)
    25a8:	4798      	blx	r3
    25aa:	2800      	cmp	r0, #0
    25ac:	d106      	bne.n	25bc <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    25ae:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    25b0:	2002      	movs	r0, #2
    25b2:	4b06      	ldr	r3, [pc, #24]	; (25cc <usb_cb_completion+0x34>)
    25b4:	4798      	blx	r3
		usb_serial_out_completion();
    25b6:	4b06      	ldr	r3, [pc, #24]	; (25d0 <usb_cb_completion+0x38>)
    25b8:	4798      	blx	r3
    25ba:	e7f3      	b.n	25a4 <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    25bc:	2082      	movs	r0, #130	; 0x82
    25be:	4b03      	ldr	r3, [pc, #12]	; (25cc <usb_cb_completion+0x34>)
    25c0:	4798      	blx	r3
		usb_serial_in_completion();
    25c2:	4b04      	ldr	r3, [pc, #16]	; (25d4 <usb_cb_completion+0x3c>)
    25c4:	4798      	blx	r3
}
    25c6:	e7f2      	b.n	25ae <usb_cb_completion+0x16>
    25c8:	000021e5 	.word	0x000021e5
    25cc:	0000221d 	.word	0x0000221d
    25d0:	0000242d 	.word	0x0000242d
    25d4:	00002445 	.word	0x00002445

000025d8 <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    25d8:	4770      	bx	lr

000025da <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    25da:	4770      	bx	lr

000025dc <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    25dc:	b510      	push	{r4, lr}
	if (config <= 1) {
    25de:	2801      	cmp	r0, #1
    25e0:	d901      	bls.n	25e6 <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    25e2:	2000      	movs	r0, #0
}
    25e4:	bd10      	pop	{r4, pc}
		usb_serial_init();
    25e6:	4b02      	ldr	r3, [pc, #8]	; (25f0 <usb_cb_set_configuration+0x14>)
    25e8:	4798      	blx	r3
		return true;
    25ea:	2001      	movs	r0, #1
    25ec:	e7fa      	b.n	25e4 <usb_cb_set_configuration+0x8>
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	000023f1 	.word	0x000023f1

000025f4 <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    25f4:	2800      	cmp	r0, #0
    25f6:	d003      	beq.n	2600 <usb_cb_set_interface+0xc>
    25f8:	2801      	cmp	r0, #1
    25fa:	d005      	beq.n	2608 <usb_cb_set_interface+0x14>
    25fc:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    25fe:	4770      	bx	lr
		if (altsetting == 0) return true;
    2600:	2900      	cmp	r1, #0
    2602:	d005      	beq.n	2610 <usb_cb_set_interface+0x1c>
	return false;
    2604:	2000      	movs	r0, #0
    2606:	e7fa      	b.n	25fe <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2608:	2900      	cmp	r1, #0
    260a:	d003      	beq.n	2614 <usb_cb_set_interface+0x20>
	return false;
    260c:	2000      	movs	r0, #0
    260e:	e7f6      	b.n	25fe <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2610:	2001      	movs	r0, #1
    2612:	e7f4      	b.n	25fe <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2614:	2001      	movs	r0, #1
    2616:	e7f2      	b.n	25fe <usb_cb_set_interface+0xa>

00002618 <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    2618:	b510      	push	{r4, lr}
    261a:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    261c:	2802      	cmp	r0, #2
    261e:	d028      	beq.n	2672 <usb_cb_get_descriptor+0x5a>
    2620:	2803      	cmp	r0, #3
    2622:	d008      	beq.n	2636 <usb_cb_get_descriptor+0x1e>
    2624:	2801      	cmp	r0, #1
    2626:	d003      	beq.n	2630 <usb_cb_get_descriptor+0x18>
    2628:	2000      	movs	r0, #0
    262a:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    262c:	6023      	str	r3, [r4, #0]
	return size;
    262e:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    2630:	3011      	adds	r0, #17
		address = &device_descriptor;
    2632:	4b11      	ldr	r3, [pc, #68]	; (2678 <usb_cb_get_descriptor+0x60>)
    2634:	e7fa      	b.n	262c <usb_cb_get_descriptor+0x14>
		switch (index) {
    2636:	2902      	cmp	r1, #2
    2638:	d00f      	beq.n	265a <usb_cb_get_descriptor+0x42>
    263a:	d808      	bhi.n	264e <usb_cb_get_descriptor+0x36>
    263c:	2900      	cmp	r1, #0
    263e:	d015      	beq.n	266c <usb_cb_get_descriptor+0x54>
    2640:	2901      	cmp	r1, #1
    2642:	d10f      	bne.n	2664 <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    2644:	480d      	ldr	r0, [pc, #52]	; (267c <usb_cb_get_descriptor+0x64>)
    2646:	4b0e      	ldr	r3, [pc, #56]	; (2680 <usb_cb_get_descriptor+0x68>)
    2648:	4798      	blx	r3
    264a:	0003      	movs	r3, r0
			break;
    264c:	e00f      	b.n	266e <usb_cb_get_descriptor+0x56>
    264e:	2903      	cmp	r1, #3
    2650:	d108      	bne.n	2664 <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    2652:	4b0c      	ldr	r3, [pc, #48]	; (2684 <usb_cb_get_descriptor+0x6c>)
    2654:	4798      	blx	r3
    2656:	0003      	movs	r3, r0
			break;
    2658:	e009      	b.n	266e <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    265a:	480b      	ldr	r0, [pc, #44]	; (2688 <usb_cb_get_descriptor+0x70>)
    265c:	4b08      	ldr	r3, [pc, #32]	; (2680 <usb_cb_get_descriptor+0x68>)
    265e:	4798      	blx	r3
    2660:	0003      	movs	r3, r0
			break;
    2662:	e004      	b.n	266e <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    2664:	2300      	movs	r3, #0
    2666:	6023      	str	r3, [r4, #0]
			return 0;
    2668:	2000      	movs	r0, #0
    266a:	e7e0      	b.n	262e <usb_cb_get_descriptor+0x16>
    266c:	4b07      	ldr	r3, [pc, #28]	; (268c <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    266e:	7818      	ldrb	r0, [r3, #0]
		break;
    2670:	e7dc      	b.n	262c <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    2672:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    2674:	4b06      	ldr	r3, [pc, #24]	; (2690 <usb_cb_get_descriptor+0x78>)
    2676:	e7d9      	b.n	262c <usb_cb_get_descriptor+0x14>
    2678:	00004a18 	.word	0x00004a18
    267c:	000049fc 	.word	0x000049fc
    2680:	00001e65 	.word	0x00001e65
    2684:	0000238d 	.word	0x0000238d
    2688:	00004a0c 	.word	0x00004a0c
    268c:	00004a14 	.word	0x00004a14
    2690:	20000008 	.word	0x20000008

00002694 <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    2694:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    2696:	4b07      	ldr	r3, [pc, #28]	; (26b4 <rtos_init+0x20>)
    2698:	4798      	blx	r3
	#endif
	
	time_init();
    269a:	4b07      	ldr	r3, [pc, #28]	; (26b8 <rtos_init+0x24>)
    269c:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    269e:	2180      	movs	r1, #128	; 0x80
    26a0:	03c9      	lsls	r1, r1, #15
    26a2:	2001      	movs	r0, #1
    26a4:	4b05      	ldr	r3, [pc, #20]	; (26bc <rtos_init+0x28>)
    26a6:	4798      	blx	r3
	#endif
	
	init_process_queue();
    26a8:	4b05      	ldr	r3, [pc, #20]	; (26c0 <rtos_init+0x2c>)
    26aa:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    26ac:	4b05      	ldr	r3, [pc, #20]	; (26c4 <rtos_init+0x30>)
    26ae:	4798      	blx	r3
	#endif
	
	return true;
}
    26b0:	2001      	movs	r0, #1
    26b2:	bd10      	pop	{r4, pc}
    26b4:	000019f1 	.word	0x000019f1
    26b8:	00001ac5 	.word	0x00001ac5
    26bc:	000014d5 	.word	0x000014d5
    26c0:	000028b5 	.word	0x000028b5
    26c4:	00001b39 	.word	0x00001b39

000026c8 <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    26c8:	b570      	push	{r4, r5, r6, lr}
    26ca:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    26cc:	e011      	b.n	26f2 <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    26ce:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    26d0:	2680      	movs	r6, #128	; 0x80
    26d2:	03f6      	lsls	r6, r6, #15
    26d4:	0031      	movs	r1, r6
    26d6:	2001      	movs	r0, #1
    26d8:	4b0c      	ldr	r3, [pc, #48]	; (270c <morse+0x44>)
    26da:	4798      	blx	r3
		delay_ms(delay);
    26dc:	480c      	ldr	r0, [pc, #48]	; (2710 <morse+0x48>)
    26de:	4368      	muls	r0, r5
    26e0:	4d0c      	ldr	r5, [pc, #48]	; (2714 <morse+0x4c>)
    26e2:	47a8      	blx	r5
		led_off();
    26e4:	0031      	movs	r1, r6
    26e6:	2001      	movs	r0, #1
    26e8:	4b0b      	ldr	r3, [pc, #44]	; (2718 <morse+0x50>)
    26ea:	4798      	blx	r3
		delay_ms(100);
    26ec:	480b      	ldr	r0, [pc, #44]	; (271c <morse+0x54>)
    26ee:	47a8      	blx	r5
		++c;
    26f0:	3401      	adds	r4, #1
	while (*c != '\0') {
    26f2:	7823      	ldrb	r3, [r4, #0]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d007      	beq.n	2708 <morse+0x40>
		if (*c == '.') delay = 100;
    26f8:	2b2e      	cmp	r3, #46	; 0x2e
    26fa:	d0e8      	beq.n	26ce <morse+0x6>
		else if (*c == '-') delay = 200;
    26fc:	2b2d      	cmp	r3, #45	; 0x2d
    26fe:	d001      	beq.n	2704 <morse+0x3c>
		int delay = 0;
    2700:	2500      	movs	r5, #0
    2702:	e7e5      	b.n	26d0 <morse+0x8>
		else if (*c == '-') delay = 200;
    2704:	25c8      	movs	r5, #200	; 0xc8
    2706:	e7e3      	b.n	26d0 <morse+0x8>
	}
}
    2708:	bd70      	pop	{r4, r5, r6, pc}
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	000014e5 	.word	0x000014e5
    2710:	00001770 	.word	0x00001770
    2714:	00001ab5 	.word	0x00001ab5
    2718:	000014f5 	.word	0x000014f5
    271c:	000927c0 	.word	0x000927c0

00002720 <SOS>:

void SOS() {
    2720:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2722:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    2724:	4803      	ldr	r0, [pc, #12]	; (2734 <SOS+0x14>)
    2726:	4b04      	ldr	r3, [pc, #16]	; (2738 <SOS+0x18>)
    2728:	4798      	blx	r3
		delay_ms(600);
    272a:	4804      	ldr	r0, [pc, #16]	; (273c <SOS+0x1c>)
    272c:	4b04      	ldr	r3, [pc, #16]	; (2740 <SOS+0x20>)
    272e:	4798      	blx	r3
	while(1) {
    2730:	e7f8      	b.n	2724 <SOS+0x4>
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	00004a2c 	.word	0x00004a2c
    2738:	000026c9 	.word	0x000026c9
    273c:	0036ee80 	.word	0x0036ee80
    2740:	00001ab5 	.word	0x00001ab5

00002744 <rtos_main>:
int rtos_main(void) {
    2744:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    2746:	4b13      	ldr	r3, [pc, #76]	; (2794 <rtos_main+0x50>)
    2748:	4798      	blx	r3
	mainproc = &_mainproc;
    274a:	4c13      	ldr	r4, [pc, #76]	; (2798 <rtos_main+0x54>)
    274c:	1d20      	adds	r0, r4, #4
    274e:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    2750:	22c0      	movs	r2, #192	; 0xc0
    2752:	0092      	lsls	r2, r2, #2
    2754:	4911      	ldr	r1, [pc, #68]	; (279c <rtos_main+0x58>)
    2756:	0013      	movs	r3, r2
    2758:	4d11      	ldr	r5, [pc, #68]	; (27a0 <rtos_main+0x5c>)
    275a:	47a8      	blx	r5
	dispatch_process(mainproc);
    275c:	6820      	ldr	r0, [r4, #0]
    275e:	4b11      	ldr	r3, [pc, #68]	; (27a4 <rtos_main+0x60>)
    2760:	4798      	blx	r3
	while (process_count) {
    2762:	e001      	b.n	2768 <rtos_main+0x24>
		dispatch_process(lastproc);
    2764:	4b0f      	ldr	r3, [pc, #60]	; (27a4 <rtos_main+0x60>)
    2766:	4798      	blx	r3
	while (process_count) {
    2768:	4b0f      	ldr	r3, [pc, #60]	; (27a8 <rtos_main+0x64>)
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	2b00      	cmp	r3, #0
    276e:	d003      	beq.n	2778 <rtos_main+0x34>
		if (!(lastproc = next_process())) break;
    2770:	4b0e      	ldr	r3, [pc, #56]	; (27ac <rtos_main+0x68>)
    2772:	4798      	blx	r3
    2774:	2800      	cmp	r0, #0
    2776:	d1f5      	bne.n	2764 <rtos_main+0x20>
	if (process_count) SOS();
    2778:	4b0b      	ldr	r3, [pc, #44]	; (27a8 <rtos_main+0x64>)
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	2b00      	cmp	r3, #0
    277e:	d106      	bne.n	278e <rtos_main+0x4a>
	led_on();
    2780:	2180      	movs	r1, #128	; 0x80
    2782:	03c9      	lsls	r1, r1, #15
    2784:	2001      	movs	r0, #1
    2786:	4b0a      	ldr	r3, [pc, #40]	; (27b0 <rtos_main+0x6c>)
    2788:	4798      	blx	r3
}
    278a:	2000      	movs	r0, #0
    278c:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    278e:	4b09      	ldr	r3, [pc, #36]	; (27b4 <rtos_main+0x70>)
    2790:	4798      	blx	r3
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	00002695 	.word	0x00002695
    2798:	20000540 	.word	0x20000540
    279c:	00000901 	.word	0x00000901
    27a0:	000027e1 	.word	0x000027e1
    27a4:	000028c9 	.word	0x000028c9
    27a8:	20000578 	.word	0x20000578
    27ac:	0000297d 	.word	0x0000297d
    27b0:	000014e5 	.word	0x000014e5
    27b4:	00002721 	.word	0x00002721

000027b8 <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    27b8:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    27ba:	4b05      	ldr	r3, [pc, #20]	; (27d0 <TC4_Handler+0x18>)
    27bc:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    27be:	4b05      	ldr	r3, [pc, #20]	; (27d4 <TC4_Handler+0x1c>)
    27c0:	681c      	ldr	r4, [r3, #0]
    27c2:	4b05      	ldr	r3, [pc, #20]	; (27d8 <TC4_Handler+0x20>)
    27c4:	4798      	blx	r3
    27c6:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    27c8:	2001      	movs	r0, #1
    27ca:	4b04      	ldr	r3, [pc, #16]	; (27dc <TC4_Handler+0x24>)
    27cc:	4798      	blx	r3
}
    27ce:	bd10      	pop	{r4, pc}
    27d0:	00001b79 	.word	0x00001b79
    27d4:	2000056c 	.word	0x2000056c
    27d8:	00001b2d 	.word	0x00001b2d
    27dc:	00002aed 	.word	0x00002aed

000027e0 <init_process>:
Process* current_process;

//uint32_t process_pc;


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    27e0:	b510      	push	{r4, lr}
    27e2:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    27e4:	4807      	ldr	r0, [pc, #28]	; (2804 <init_process+0x24>)
    27e6:	1a82      	subs	r2, r0, r2
    27e8:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    27ea:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    27ec:	1e4b      	subs	r3, r1, #1
    27ee:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    27f0:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    27f2:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    27f4:	4b04      	ldr	r3, [pc, #16]	; (2808 <init_process+0x28>)
    27f6:	4798      	blx	r3
    27f8:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    27fa:	2300      	movs	r3, #0
    27fc:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    27fe:	2224      	movs	r2, #36	; 0x24
    2800:	54a3      	strb	r3, [r4, r2]
	#endif
}
    2802:	bd10      	pop	{r4, pc}
    2804:	200027c0 	.word	0x200027c0
    2808:	00001b2d 	.word	0x00001b2d

0000280c <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    280c:	b5f0      	push	{r4, r5, r6, r7, lr}
    280e:	465f      	mov	r7, fp
    2810:	4656      	mov	r6, sl
    2812:	464d      	mov	r5, r9
    2814:	4644      	mov	r4, r8
    2816:	b4f0      	push	{r4, r5, r6, r7}
    2818:	b083      	sub	sp, #12
    281a:	9001      	str	r0, [sp, #4]
    281c:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    281e:	2324      	movs	r3, #36	; 0x24
    2820:	5cc3      	ldrb	r3, [r0, r3]
    2822:	2b00      	cmp	r3, #0
    2824:	d124      	bne.n	2870 <switch_process+0x64>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    2826:	4b1c      	ldr	r3, [pc, #112]	; (2898 <switch_process+0x8c>)
    2828:	9a01      	ldr	r2, [sp, #4]
    282a:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    282c:	2303      	movs	r3, #3
    282e:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    2830:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2832:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2836:	2302      	movs	r3, #2
    2838:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    283c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2840:	b662      	cpsie	i
	USE_PSP();
	
	__enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    2842:	9201      	str	r2, [sp, #4]
    2844:	6813      	ldr	r3, [r2, #0]
    2846:	3301      	adds	r3, #1
    2848:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    284a:	b672      	cpsid	i
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    284c:	2300      	movs	r3, #0
    284e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2852:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    2856:	3324      	adds	r3, #36	; 0x24
    2858:	9a01      	ldr	r2, [sp, #4]
    285a:	5cd3      	ldrb	r3, [r2, r3]
    285c:	2b00      	cmp	r3, #0
    285e:	d118      	bne.n	2892 <switch_process+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
    2860:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    2862:	b003      	add	sp, #12
    2864:	bcf0      	pop	{r4, r5, r6, r7}
    2866:	46bb      	mov	fp, r7
    2868:	46b2      	mov	sl, r6
    286a:	46a9      	mov	r9, r5
    286c:	46a0      	mov	r8, r4
    286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    2870:	4b0a      	ldr	r3, [pc, #40]	; (289c <switch_process+0x90>)
    2872:	4798      	blx	r3
    2874:	4b0a      	ldr	r3, [pc, #40]	; (28a0 <switch_process+0x94>)
    2876:	681a      	ldr	r2, [r3, #0]
    2878:	0153      	lsls	r3, r2, #5
    287a:	1a9b      	subs	r3, r3, r2
    287c:	009b      	lsls	r3, r3, #2
    287e:	189b      	adds	r3, r3, r2
    2880:	00db      	lsls	r3, r3, #3
    2882:	18c0      	adds	r0, r0, r3
    2884:	4b07      	ldr	r3, [pc, #28]	; (28a4 <switch_process+0x98>)
    2886:	4798      	blx	r3
		preempt_clear_interrupts();
    2888:	4b07      	ldr	r3, [pc, #28]	; (28a8 <switch_process+0x9c>)
    288a:	4798      	blx	r3
		preempt_enable_interrupts();
    288c:	4b07      	ldr	r3, [pc, #28]	; (28ac <switch_process+0xa0>)
    288e:	4798      	blx	r3
    2890:	e7c9      	b.n	2826 <switch_process+0x1a>
		preempt_disable_interrupts();
    2892:	4b07      	ldr	r3, [pc, #28]	; (28b0 <switch_process+0xa4>)
    2894:	4798      	blx	r3
    2896:	e7e3      	b.n	2860 <switch_process+0x54>
    2898:	2000056c 	.word	0x2000056c
    289c:	00001b2d 	.word	0x00001b2d
    28a0:	00004a68 	.word	0x00004a68
    28a4:	00001b95 	.word	0x00001b95
    28a8:	00001b79 	.word	0x00001b79
    28ac:	00001b51 	.word	0x00001b51
    28b0:	00001b61 	.word	0x00001b61

000028b4 <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    28b4:	4b03      	ldr	r3, [pc, #12]	; (28c4 <init_process_queue+0x10>)
    28b6:	2200      	movs	r2, #0
    28b8:	605a      	str	r2, [r3, #4]
    28ba:	609a      	str	r2, [r3, #8]
	current_process = 0;
    28bc:	601a      	str	r2, [r3, #0]
	process_count = 0;
    28be:	60da      	str	r2, [r3, #12]
}
    28c0:	4770      	bx	lr
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	2000056c 	.word	0x2000056c

000028c8 <dispatch_process>:

bool dispatch_process(Process* process) {
    28c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ca:	464f      	mov	r7, r9
    28cc:	4646      	mov	r6, r8
    28ce:	b4c0      	push	{r6, r7}
    28d0:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    28d2:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    28d4:	6983      	ldr	r3, [r0, #24]
    28d6:	2b03      	cmp	r3, #3
    28d8:	d049      	beq.n	296e <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    28da:	4b26      	ldr	r3, [pc, #152]	; (2974 <dispatch_process+0xac>)
    28dc:	68db      	ldr	r3, [r3, #12]
    28de:	2b0f      	cmp	r3, #15
    28e0:	dd04      	ble.n	28ec <dispatch_process+0x24>
    28e2:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    28e4:	bcc0      	pop	{r6, r7}
    28e6:	46b9      	mov	r9, r7
    28e8:	46b0      	mov	r8, r6
    28ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    28ec:	4b22      	ldr	r3, [pc, #136]	; (2978 <dispatch_process+0xb0>)
    28ee:	4798      	blx	r3
    28f0:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    28f2:	464b      	mov	r3, r9
    28f4:	699b      	ldr	r3, [r3, #24]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d007      	beq.n	290a <dispatch_process+0x42>
    28fa:	464b      	mov	r3, r9
    28fc:	695f      	ldr	r7, [r3, #20]
    28fe:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    2900:	4b1c      	ldr	r3, [pc, #112]	; (2974 <dispatch_process+0xac>)
    2902:	685b      	ldr	r3, [r3, #4]
    2904:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    2906:	2500      	movs	r5, #0
    2908:	e00c      	b.n	2924 <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    290a:	2700      	movs	r7, #0
    290c:	e7f8      	b.n	2900 <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    290e:	3110      	adds	r1, #16
    2910:	e00e      	b.n	2930 <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    2912:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    2914:	42ba      	cmp	r2, r7
    2916:	dd16      	ble.n	2946 <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    2918:	4a16      	ldr	r2, [pc, #88]	; (2974 <dispatch_process+0xac>)
    291a:	009e      	lsls	r6, r3, #2
    291c:	1993      	adds	r3, r2, r6
    291e:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    2920:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    2922:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    2924:	4a13      	ldr	r2, [pc, #76]	; (2974 <dispatch_process+0xac>)
    2926:	68d6      	ldr	r6, [r2, #12]
    2928:	42ae      	cmp	r6, r5
    292a:	dd0c      	ble.n	2946 <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    292c:	1e59      	subs	r1, r3, #1
    292e:	d4ee      	bmi.n	290e <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    2930:	4a10      	ldr	r2, [pc, #64]	; (2974 <dispatch_process+0xac>)
    2932:	0088      	lsls	r0, r1, #2
    2934:	1812      	adds	r2, r2, r0
    2936:	6910      	ldr	r0, [r2, #16]
    2938:	6982      	ldr	r2, [r0, #24]
    293a:	2a00      	cmp	r2, #0
    293c:	d0e9      	beq.n	2912 <dispatch_process+0x4a>
    293e:	6942      	ldr	r2, [r0, #20]
    2940:	4644      	mov	r4, r8
    2942:	1b12      	subs	r2, r2, r4
    2944:	e7e6      	b.n	2914 <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    2946:	4a0b      	ldr	r2, [pc, #44]	; (2974 <dispatch_process+0xac>)
    2948:	009b      	lsls	r3, r3, #2
    294a:	18d3      	adds	r3, r2, r3
    294c:	4649      	mov	r1, r9
    294e:	6119      	str	r1, [r3, #16]
	++process_count;
    2950:	1c73      	adds	r3, r6, #1
    2952:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    2954:	4666      	mov	r6, ip
    2956:	3601      	adds	r6, #1
    2958:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    295a:	17f1      	asrs	r1, r6, #31
    295c:	0f09      	lsrs	r1, r1, #28
    295e:	1876      	adds	r6, r6, r1
    2960:	230f      	movs	r3, #15
    2962:	4033      	ands	r3, r6
    2964:	1a5b      	subs	r3, r3, r1
    2966:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    2968:	b662      	cpsie	i
	return true;
    296a:	2001      	movs	r0, #1
    296c:	e7ba      	b.n	28e4 <dispatch_process+0x1c>
		return false;
    296e:	2000      	movs	r0, #0
    2970:	e7b8      	b.n	28e4 <dispatch_process+0x1c>
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	2000056c 	.word	0x2000056c
    2978:	00001b2d 	.word	0x00001b2d

0000297c <next_process>:

Process* next_process() {
    297c:	b5f0      	push	{r4, r5, r6, r7, lr}
    297e:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    2980:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    2982:	4b57      	ldr	r3, [pc, #348]	; (2ae0 <next_process+0x164>)
    2984:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    2986:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    2988:	e015      	b.n	29b6 <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    298a:	6823      	ldr	r3, [r4, #0]
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	e03d      	b.n	2a0c <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    2990:	6823      	ldr	r3, [r4, #0]
    2992:	881b      	ldrh	r3, [r3, #0]
    2994:	e03a      	b.n	2a0c <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    2996:	6863      	ldr	r3, [r4, #4]
    2998:	42bb      	cmp	r3, r7
    299a:	d041      	beq.n	2a20 <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    299c:	466b      	mov	r3, sp
    299e:	3307      	adds	r3, #7
    29a0:	781b      	ldrb	r3, [r3, #0]
    29a2:	2b00      	cmp	r3, #0
    29a4:	d163      	bne.n	2a6e <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    29a6:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    29a8:	17f3      	asrs	r3, r6, #31
    29aa:	0f1b      	lsrs	r3, r3, #28
    29ac:	18f6      	adds	r6, r6, r3
    29ae:	220f      	movs	r2, #15
    29b0:	4016      	ands	r6, r2
    29b2:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    29b4:	3501      	adds	r5, #1
    29b6:	4b4a      	ldr	r3, [pc, #296]	; (2ae0 <next_process+0x164>)
    29b8:	68db      	ldr	r3, [r3, #12]
    29ba:	42ab      	cmp	r3, r5
    29bc:	dd59      	ble.n	2a72 <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    29be:	4b48      	ldr	r3, [pc, #288]	; (2ae0 <next_process+0x164>)
    29c0:	00b2      	lsls	r2, r6, #2
    29c2:	189a      	adds	r2, r3, r2
    29c4:	6912      	ldr	r2, [r2, #16]
    29c6:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    29c8:	6993      	ldr	r3, [r2, #24]
    29ca:	2b02      	cmp	r3, #2
    29cc:	d151      	bne.n	2a72 <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    29ce:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    29d0:	466b      	mov	r3, sp
    29d2:	2200      	movs	r2, #0
    29d4:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    29d6:	68e3      	ldr	r3, [r4, #12]
    29d8:	2b00      	cmp	r3, #0
    29da:	d001      	beq.n	29e0 <next_process+0x64>
    29dc:	68e3      	ldr	r3, [r4, #12]
    29de:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    29e0:	4b3f      	ldr	r3, [pc, #252]	; (2ae0 <next_process+0x164>)
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	6993      	ldr	r3, [r2, #24]
    29e6:	2b01      	cmp	r3, #1
    29e8:	d043      	beq.n	2a72 <next_process+0xf6>
			if (data->mask) {
    29ea:	68a3      	ldr	r3, [r4, #8]
    29ec:	2b00      	cmp	r3, #0
    29ee:	d00f      	beq.n	2a10 <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    29f0:	68a1      	ldr	r1, [r4, #8]
    29f2:	23ff      	movs	r3, #255	; 0xff
    29f4:	400b      	ands	r3, r1
    29f6:	68a1      	ldr	r1, [r4, #8]
    29f8:	428b      	cmp	r3, r1
    29fa:	d0c6      	beq.n	298a <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    29fc:	68a3      	ldr	r3, [r4, #8]
    29fe:	041b      	lsls	r3, r3, #16
    2a00:	0c1b      	lsrs	r3, r3, #16
    2a02:	68a1      	ldr	r1, [r4, #8]
    2a04:	428b      	cmp	r3, r1
    2a06:	d0c3      	beq.n	2990 <next_process+0x14>
				else variable = *(data->variable);
    2a08:	6823      	ldr	r3, [r4, #0]
    2a0a:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    2a0c:	68a7      	ldr	r7, [r4, #8]
    2a0e:	401f      	ands	r7, r3
			switch (data->condition) {
    2a10:	7c23      	ldrb	r3, [r4, #16]
    2a12:	b2db      	uxtb	r3, r3
    2a14:	2b06      	cmp	r3, #6
    2a16:	d861      	bhi.n	2adc <next_process+0x160>
    2a18:	009b      	lsls	r3, r3, #2
    2a1a:	4932      	ldr	r1, [pc, #200]	; (2ae4 <next_process+0x168>)
    2a1c:	58cb      	ldr	r3, [r1, r3]
    2a1e:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    2a20:	466b      	mov	r3, sp
    2a22:	2101      	movs	r1, #1
    2a24:	71d9      	strb	r1, [r3, #7]
    2a26:	e7b9      	b.n	299c <next_process+0x20>
				if (variable != data->value) unblocked = true;
    2a28:	6863      	ldr	r3, [r4, #4]
    2a2a:	42bb      	cmp	r3, r7
    2a2c:	d0b6      	beq.n	299c <next_process+0x20>
    2a2e:	466b      	mov	r3, sp
    2a30:	2101      	movs	r1, #1
    2a32:	71d9      	strb	r1, [r3, #7]
    2a34:	e7b2      	b.n	299c <next_process+0x20>
				if (variable > data->value) unblocked = true;
    2a36:	6863      	ldr	r3, [r4, #4]
    2a38:	42bb      	cmp	r3, r7
    2a3a:	d2af      	bcs.n	299c <next_process+0x20>
    2a3c:	466b      	mov	r3, sp
    2a3e:	2101      	movs	r1, #1
    2a40:	71d9      	strb	r1, [r3, #7]
    2a42:	e7ab      	b.n	299c <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    2a44:	6863      	ldr	r3, [r4, #4]
    2a46:	42bb      	cmp	r3, r7
    2a48:	d8a8      	bhi.n	299c <next_process+0x20>
    2a4a:	466b      	mov	r3, sp
    2a4c:	2101      	movs	r1, #1
    2a4e:	71d9      	strb	r1, [r3, #7]
    2a50:	e7a4      	b.n	299c <next_process+0x20>
				if (variable < data->value) unblocked = true;
    2a52:	6863      	ldr	r3, [r4, #4]
    2a54:	42bb      	cmp	r3, r7
    2a56:	d9a1      	bls.n	299c <next_process+0x20>
    2a58:	466b      	mov	r3, sp
    2a5a:	2101      	movs	r1, #1
    2a5c:	71d9      	strb	r1, [r3, #7]
    2a5e:	e79d      	b.n	299c <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    2a60:	6863      	ldr	r3, [r4, #4]
    2a62:	42bb      	cmp	r3, r7
    2a64:	d39a      	bcc.n	299c <next_process+0x20>
    2a66:	466b      	mov	r3, sp
    2a68:	2101      	movs	r1, #1
    2a6a:	71d9      	strb	r1, [r3, #7]
    2a6c:	e796      	b.n	299c <next_process+0x20>
				current_process->status = Process_State_Running;
    2a6e:	2301      	movs	r3, #1
    2a70:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    2a72:	4b1b      	ldr	r3, [pc, #108]	; (2ae0 <next_process+0x164>)
    2a74:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    2a76:	0028      	movs	r0, r5
    2a78:	e015      	b.n	2aa6 <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    2a7a:	4919      	ldr	r1, [pc, #100]	; (2ae0 <next_process+0x164>)
    2a7c:	688e      	ldr	r6, [r1, #8]
    2a7e:	1986      	adds	r6, r0, r6
    2a80:	1e73      	subs	r3, r6, #1
    2a82:	17df      	asrs	r7, r3, #31
    2a84:	0f3f      	lsrs	r7, r7, #28
    2a86:	19db      	adds	r3, r3, r7
    2a88:	220f      	movs	r2, #15
    2a8a:	4013      	ands	r3, r2
    2a8c:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    2a8e:	17f7      	asrs	r7, r6, #31
    2a90:	0f3f      	lsrs	r7, r7, #28
    2a92:	19f6      	adds	r6, r6, r7
    2a94:	4032      	ands	r2, r6
    2a96:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    2a98:	009b      	lsls	r3, r3, #2
    2a9a:	18cb      	adds	r3, r1, r3
    2a9c:	691b      	ldr	r3, [r3, #16]
    2a9e:	0092      	lsls	r2, r2, #2
    2aa0:	1889      	adds	r1, r1, r2
    2aa2:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    2aa4:	3801      	subs	r0, #1
    2aa6:	2800      	cmp	r0, #0
    2aa8:	dce7      	bgt.n	2a7a <next_process+0xfe>
	}

	--process_count;
    2aaa:	490d      	ldr	r1, [pc, #52]	; (2ae0 <next_process+0x164>)
    2aac:	1e63      	subs	r3, r4, #1
    2aae:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    2ab0:	688b      	ldr	r3, [r1, #8]
    2ab2:	3301      	adds	r3, #1
    2ab4:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    2ab6:	17d8      	asrs	r0, r3, #31
    2ab8:	0f00      	lsrs	r0, r0, #28
    2aba:	181b      	adds	r3, r3, r0
    2abc:	220f      	movs	r2, #15
    2abe:	4013      	ands	r3, r2
    2ac0:	1a1b      	subs	r3, r3, r0
    2ac2:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    2ac4:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    2ac6:	42ac      	cmp	r4, r5
    2ac8:	d103      	bne.n	2ad2 <next_process+0x156>
	
	return current_process;
    2aca:	4b05      	ldr	r3, [pc, #20]	; (2ae0 <next_process+0x164>)
    2acc:	6818      	ldr	r0, [r3, #0]
}
    2ace:	b003      	add	sp, #12
    2ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    2ad2:	4b03      	ldr	r3, [pc, #12]	; (2ae0 <next_process+0x164>)
    2ad4:	6818      	ldr	r0, [r3, #0]
    2ad6:	4b04      	ldr	r3, [pc, #16]	; (2ae8 <next_process+0x16c>)
    2ad8:	4798      	blx	r3
    2ada:	e7f6      	b.n	2aca <next_process+0x14e>
			switch (data->condition) {
    2adc:	2000      	movs	r0, #0
    2ade:	e7f6      	b.n	2ace <next_process+0x152>
    2ae0:	2000056c 	.word	0x2000056c
    2ae4:	00004a38 	.word	0x00004a38
    2ae8:	0000280d 	.word	0x0000280d

00002aec <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    2aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aee:	465f      	mov	r7, fp
    2af0:	4656      	mov	r6, sl
    2af2:	464d      	mov	r5, r9
    2af4:	4644      	mov	r4, r8
    2af6:	b4f0      	push	{r4, r5, r6, r7}
    2af8:	b083      	sub	sp, #12
    2afa:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2afc:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    2b00:	2b00      	cmp	r3, #0
    2b02:	d01c      	beq.n	2b3e <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    2b04:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    2b06:	4b0f      	ldr	r3, [pc, #60]	; (2b44 <yield_process+0x58>)
    2b08:	9301      	str	r3, [sp, #4]
    2b0a:	681b      	ldr	r3, [r3, #0]
    2b0c:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    2b0e:	2208      	movs	r2, #8
    2b10:	4252      	negs	r2, r2
    2b12:	446a      	add	r2, sp
    2b14:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    2b16:	685a      	ldr	r2, [r3, #4]
    2b18:	3a04      	subs	r2, #4
    2b1a:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    2b1c:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    2b1e:	3204      	adds	r2, #4
    2b20:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    2b22:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    2b24:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    2b26:	9b01      	ldr	r3, [sp, #4]
    2b28:	681b      	ldr	r3, [r3, #0]
    2b2a:	2203      	movs	r2, #3
    2b2c:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    2b2e:	b662      	cpsie	i
	
	__enable_irq();
}
    2b30:	b003      	add	sp, #12
    2b32:	bcf0      	pop	{r4, r5, r6, r7}
    2b34:	46bb      	mov	fp, r7
    2b36:	46b2      	mov	sl, r6
    2b38:	46a9      	mov	r9, r5
    2b3a:	46a0      	mov	r8, r4
    2b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    2b3e:	4b02      	ldr	r3, [pc, #8]	; (2b48 <yield_process+0x5c>)
    2b40:	4798      	blx	r3
    2b42:	e7df      	b.n	2b04 <yield_process+0x18>
    2b44:	2000056c 	.word	0x2000056c
    2b48:	00002721 	.word	0x00002721

00002b4c <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    2b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b4e:	464f      	mov	r7, r9
    2b50:	4646      	mov	r6, r8
    2b52:	b4c0      	push	{r6, r7}
    2b54:	b08b      	sub	sp, #44	; 0x2c
    2b56:	4681      	mov	r9, r0
    2b58:	000f      	movs	r7, r1
    2b5a:	4690      	mov	r8, r2
    2b5c:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    2b5e:	4e0f      	ldr	r6, [pc, #60]	; (2b9c <wait_until+0x50>)
    2b60:	6834      	ldr	r4, [r6, #0]
    2b62:	4b0f      	ldr	r3, [pc, #60]	; (2ba0 <wait_until+0x54>)
    2b64:	4798      	blx	r3
    2b66:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    2b68:	ac05      	add	r4, sp, #20
    2b6a:	464b      	mov	r3, r9
    2b6c:	9305      	str	r3, [sp, #20]
    2b6e:	9706      	str	r7, [sp, #24]
    2b70:	4643      	mov	r3, r8
    2b72:	9307      	str	r3, [sp, #28]
    2b74:	2300      	movs	r3, #0
    2b76:	9308      	str	r3, [sp, #32]
    2b78:	7425      	strb	r5, [r4, #16]
    2b7a:	466b      	mov	r3, sp
    2b7c:	001a      	movs	r2, r3
    2b7e:	cc23      	ldmia	r4!, {r0, r1, r5}
    2b80:	c223      	stmia	r2!, {r0, r1, r5}
    2b82:	cc03      	ldmia	r4!, {r0, r1}
    2b84:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    2b86:	6832      	ldr	r2, [r6, #0]
    2b88:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    2b8a:	2002      	movs	r0, #2
    2b8c:	4b05      	ldr	r3, [pc, #20]	; (2ba4 <wait_until+0x58>)
    2b8e:	4798      	blx	r3
}
    2b90:	b00b      	add	sp, #44	; 0x2c
    2b92:	bcc0      	pop	{r6, r7}
    2b94:	46b9      	mov	r9, r7
    2b96:	46b0      	mov	r8, r6
    2b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	2000056c 	.word	0x2000056c
    2ba0:	00001b2d 	.word	0x00001b2d
    2ba4:	00002aed 	.word	0x00002aed

00002ba8 <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    2ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2baa:	464f      	mov	r7, r9
    2bac:	4646      	mov	r6, r8
    2bae:	b4c0      	push	{r6, r7}
    2bb0:	b08b      	sub	sp, #44	; 0x2c
    2bb2:	4681      	mov	r9, r0
    2bb4:	000f      	movs	r7, r1
    2bb6:	4690      	mov	r8, r2
    2bb8:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    2bba:	4e0f      	ldr	r6, [pc, #60]	; (2bf8 <wait_until_callback+0x50>)
    2bbc:	6834      	ldr	r4, [r6, #0]
    2bbe:	4b0f      	ldr	r3, [pc, #60]	; (2bfc <wait_until_callback+0x54>)
    2bc0:	4798      	blx	r3
    2bc2:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    2bc4:	ac05      	add	r4, sp, #20
    2bc6:	464b      	mov	r3, r9
    2bc8:	9305      	str	r3, [sp, #20]
    2bca:	9706      	str	r7, [sp, #24]
    2bcc:	4643      	mov	r3, r8
    2bce:	9307      	str	r3, [sp, #28]
    2bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2bd2:	9308      	str	r3, [sp, #32]
    2bd4:	7425      	strb	r5, [r4, #16]
    2bd6:	466b      	mov	r3, sp
    2bd8:	001a      	movs	r2, r3
    2bda:	cc23      	ldmia	r4!, {r0, r1, r5}
    2bdc:	c223      	stmia	r2!, {r0, r1, r5}
    2bde:	cc03      	ldmia	r4!, {r0, r1}
    2be0:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    2be2:	6832      	ldr	r2, [r6, #0]
    2be4:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    2be6:	2002      	movs	r0, #2
    2be8:	4b05      	ldr	r3, [pc, #20]	; (2c00 <wait_until_callback+0x58>)
    2bea:	4798      	blx	r3
    2bec:	b00b      	add	sp, #44	; 0x2c
    2bee:	bcc0      	pop	{r6, r7}
    2bf0:	46b9      	mov	r9, r7
    2bf2:	46b0      	mov	r8, r6
    2bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	2000056c 	.word	0x2000056c
    2bfc:	00001b2d 	.word	0x00001b2d
    2c00:	00002aed 	.word	0x00002aed

00002c04 <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    2c04:	b500      	push	{lr}
    2c06:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    2c08:	4b0c      	ldr	r3, [pc, #48]	; (2c3c <rtos_delay_callback+0x38>)
    2c0a:	4798      	blx	r3
    2c0c:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    2c0e:	4b0c      	ldr	r3, [pc, #48]	; (2c40 <rtos_delay_callback+0x3c>)
    2c10:	681a      	ldr	r2, [r3, #0]
    2c12:	6953      	ldr	r3, [r2, #20]
    2c14:	9901      	ldr	r1, [sp, #4]
    2c16:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    2c18:	490a      	ldr	r1, [pc, #40]	; (2c44 <rtos_delay_callback+0x40>)
    2c1a:	6809      	ldr	r1, [r1, #0]
    2c1c:	4299      	cmp	r1, r3
    2c1e:	dc07      	bgt.n	2c30 <rtos_delay_callback+0x2c>
    2c20:	4908      	ldr	r1, [pc, #32]	; (2c44 <rtos_delay_callback+0x40>)
    2c22:	6808      	ldr	r0, [r1, #0]
    2c24:	4907      	ldr	r1, [pc, #28]	; (2c44 <rtos_delay_callback+0x40>)
    2c26:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    2c28:	2b00      	cmp	r3, #0
    2c2a:	dd03      	ble.n	2c34 <rtos_delay_callback+0x30>
}
    2c2c:	b003      	add	sp, #12
    2c2e:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    2c30:	0018      	movs	r0, r3
    2c32:	e7f7      	b.n	2c24 <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    2c34:	2301      	movs	r3, #1
    2c36:	6193      	str	r3, [r2, #24]
}
    2c38:	e7f8      	b.n	2c2c <rtos_delay_callback+0x28>
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	00001b2d 	.word	0x00001b2d
    2c40:	2000056c 	.word	0x2000056c
    2c44:	20000050 	.word	0x20000050

00002c48 <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    2c48:	b570      	push	{r4, r5, r6, lr}
    2c4a:	b086      	sub	sp, #24
    2c4c:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    2c4e:	4b09      	ldr	r3, [pc, #36]	; (2c74 <rtos_delay_ctick+0x2c>)
    2c50:	4798      	blx	r3
    2c52:	4b09      	ldr	r3, [pc, #36]	; (2c78 <rtos_delay_ctick+0x30>)
    2c54:	681d      	ldr	r5, [r3, #0]
    2c56:	1900      	adds	r0, r0, r4
    2c58:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    2c5a:	aa01      	add	r2, sp, #4
    2c5c:	4b07      	ldr	r3, [pc, #28]	; (2c7c <rtos_delay_ctick+0x34>)
    2c5e:	0011      	movs	r1, r2
    2c60:	cb51      	ldmia	r3!, {r0, r4, r6}
    2c62:	c151      	stmia	r1!, {r0, r4, r6}
    2c64:	cb11      	ldmia	r3!, {r0, r4}
    2c66:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    2c68:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    2c6a:	2002      	movs	r0, #2
    2c6c:	4b04      	ldr	r3, [pc, #16]	; (2c80 <rtos_delay_ctick+0x38>)
    2c6e:	4798      	blx	r3
    2c70:	b006      	add	sp, #24
    2c72:	bd70      	pop	{r4, r5, r6, pc}
    2c74:	00001b2d 	.word	0x00001b2d
    2c78:	2000056c 	.word	0x2000056c
    2c7c:	00004a54 	.word	0x00004a54
    2c80:	00002aed 	.word	0x00002aed

00002c84 <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    2c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    2c86:	4b16      	ldr	r3, [pc, #88]	; (2ce0 <busmanager_process_wait_callback+0x5c>)
    2c88:	681b      	ldr	r3, [r3, #0]
    2c8a:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    2c8c:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    2c8e:	2500      	movs	r5, #0
    2c90:	e00b      	b.n	2caa <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    2c92:	4b13      	ldr	r3, [pc, #76]	; (2ce0 <busmanager_process_wait_callback+0x5c>)
    2c94:	681b      	ldr	r3, [r3, #0]
    2c96:	2201      	movs	r2, #1
    2c98:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    2c9a:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    2c9c:	17e3      	asrs	r3, r4, #31
    2c9e:	0f5b      	lsrs	r3, r3, #29
    2ca0:	18e4      	adds	r4, r4, r3
    2ca2:	2207      	movs	r2, #7
    2ca4:	4014      	ands	r4, r2
    2ca6:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    2ca8:	3501      	adds	r5, #1
    2caa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2cac:	42ab      	cmp	r3, r5
    2cae:	dd15      	ble.n	2cdc <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    2cb0:	1ca3      	adds	r3, r4, #2
    2cb2:	009b      	lsls	r3, r3, #2
    2cb4:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    2cb6:	7d1a      	ldrb	r2, [r3, #20]
    2cb8:	2a00      	cmp	r2, #0
    2cba:	d0ee      	beq.n	2c9a <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    2cbc:	7c1a      	ldrb	r2, [r3, #16]
    2cbe:	7c59      	ldrb	r1, [r3, #17]
    2cc0:	0209      	lsls	r1, r1, #8
    2cc2:	4311      	orrs	r1, r2
    2cc4:	7c9a      	ldrb	r2, [r3, #18]
    2cc6:	0412      	lsls	r2, r2, #16
    2cc8:	430a      	orrs	r2, r1
    2cca:	7cdf      	ldrb	r7, [r3, #19]
    2ccc:	063f      	lsls	r7, r7, #24
    2cce:	4317      	orrs	r7, r2
    2cd0:	4b04      	ldr	r3, [pc, #16]	; (2ce4 <busmanager_process_wait_callback+0x60>)
    2cd2:	4798      	blx	r3
    2cd4:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    2cd6:	2f00      	cmp	r7, #0
    2cd8:	dcdf      	bgt.n	2c9a <busmanager_process_wait_callback+0x16>
    2cda:	e7da      	b.n	2c92 <busmanager_process_wait_callback+0xe>
	}
}
    2cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cde:	46c0      	nop			; (mov r8, r8)
    2ce0:	2000056c 	.word	0x2000056c
    2ce4:	00001b2d 	.word	0x00001b2d

00002ce8 <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    2ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    2cea:	780c      	ldrb	r4, [r1, #0]
    2cec:	784d      	ldrb	r5, [r1, #1]
    2cee:	022d      	lsls	r5, r5, #8
    2cf0:	4325      	orrs	r5, r4
    2cf2:	788c      	ldrb	r4, [r1, #2]
    2cf4:	0424      	lsls	r4, r4, #16
    2cf6:	432c      	orrs	r4, r5
    2cf8:	78cf      	ldrb	r7, [r1, #3]
    2cfa:	063f      	lsls	r7, r7, #24
    2cfc:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    2cfe:	2601      	movs	r6, #1
    2d00:	e000      	b.n	2d04 <set_matching_id_status+0x1c>
    2d02:	3601      	adds	r6, #1
    2d04:	6b01      	ldr	r1, [r0, #48]	; 0x30
    2d06:	42b1      	cmp	r1, r6
    2d08:	dd17      	ble.n	2d3a <set_matching_id_status+0x52>
		++queue_pointer;
    2d0a:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    2d0c:	17d1      	asrs	r1, r2, #31
    2d0e:	0f49      	lsrs	r1, r1, #29
    2d10:	1852      	adds	r2, r2, r1
    2d12:	2407      	movs	r4, #7
    2d14:	4022      	ands	r2, r4
    2d16:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    2d18:	1c91      	adds	r1, r2, #2
    2d1a:	0089      	lsls	r1, r1, #2
    2d1c:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    2d1e:	782c      	ldrb	r4, [r5, #0]
    2d20:	7869      	ldrb	r1, [r5, #1]
    2d22:	0209      	lsls	r1, r1, #8
    2d24:	4321      	orrs	r1, r4
    2d26:	78ac      	ldrb	r4, [r5, #2]
    2d28:	0424      	lsls	r4, r4, #16
    2d2a:	430c      	orrs	r4, r1
    2d2c:	78e9      	ldrb	r1, [r5, #3]
    2d2e:	0609      	lsls	r1, r1, #24
    2d30:	4321      	orrs	r1, r4
    2d32:	42b9      	cmp	r1, r7
    2d34:	d1e5      	bne.n	2d02 <set_matching_id_status+0x1a>
    2d36:	756b      	strb	r3, [r5, #21]
    2d38:	e7e3      	b.n	2d02 <set_matching_id_status+0x1a>
}
    2d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d3c <busmanager_process_function>:

void busmanager_process_function() {
    2d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d3e:	46ce      	mov	lr, r9
    2d40:	4647      	mov	r7, r8
    2d42:	b580      	push	{r7, lr}
    2d44:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    2d46:	4b62      	ldr	r3, [pc, #392]	; (2ed0 <busmanager_process_function+0x194>)
    2d48:	681b      	ldr	r3, [r3, #0]
    2d4a:	6a1f      	ldr	r7, [r3, #32]
    2d4c:	e05d      	b.n	2e0a <busmanager_process_function+0xce>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    2d4e:	0038      	movs	r0, r7
    2d50:	3030      	adds	r0, #48	; 0x30
    2d52:	2201      	movs	r2, #1
    2d54:	3302      	adds	r3, #2
    2d56:	4252      	negs	r2, r2
    2d58:	2100      	movs	r1, #0
    2d5a:	4c5e      	ldr	r4, [pc, #376]	; (2ed4 <busmanager_process_function+0x198>)
    2d5c:	47a0      	blx	r4
    2d5e:	e057      	b.n	2e10 <busmanager_process_function+0xd4>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    2d60:	7d2b      	ldrb	r3, [r5, #20]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d158      	bne.n	2e18 <busmanager_process_function+0xdc>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    2d66:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    2d68:	17e3      	asrs	r3, r4, #31
    2d6a:	0f5b      	lsrs	r3, r3, #29
    2d6c:	18e4      	adds	r4, r4, r3
    2d6e:	2207      	movs	r2, #7
    2d70:	4014      	ands	r4, r2
    2d72:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    2d74:	2301      	movs	r3, #1
    2d76:	469c      	mov	ip, r3
    2d78:	44e1      	add	r9, ip
    2d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d7c:	454b      	cmp	r3, r9
    2d7e:	dd09      	ble.n	2d94 <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    2d80:	1ca3      	adds	r3, r4, #2
    2d82:	009b      	lsls	r3, r3, #2
    2d84:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    2d86:	2315      	movs	r3, #21
    2d88:	56eb      	ldrsb	r3, [r5, r3]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d1e8      	bne.n	2d60 <busmanager_process_function+0x24>
    2d8e:	7d2b      	ldrb	r3, [r5, #20]
    2d90:	2b00      	cmp	r3, #0
    2d92:	d1e5      	bne.n	2d60 <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    2d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
    2d96:	4549      	cmp	r1, r9
    2d98:	d05e      	beq.n	2e58 <busmanager_process_function+0x11c>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    2d9a:	2315      	movs	r3, #21
    2d9c:	56eb      	ldrsb	r3, [r5, r3]
    2d9e:	2b02      	cmp	r3, #2
    2da0:	d02f      	beq.n	2e02 <busmanager_process_function+0xc6>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    2da2:	7b2a      	ldrb	r2, [r5, #12]
    2da4:	7b6b      	ldrb	r3, [r5, #13]
    2da6:	021b      	lsls	r3, r3, #8
    2da8:	4313      	orrs	r3, r2
    2daa:	7baa      	ldrb	r2, [r5, #14]
    2dac:	0412      	lsls	r2, r2, #16
    2dae:	431a      	orrs	r2, r3
    2db0:	7beb      	ldrb	r3, [r5, #15]
    2db2:	061b      	lsls	r3, r3, #24
    2db4:	4313      	orrs	r3, r2
    2db6:	d059      	beq.n	2e6c <busmanager_process_function+0x130>
				SOS();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    2db8:	7b2b      	ldrb	r3, [r5, #12]
    2dba:	7b6a      	ldrb	r2, [r5, #13]
    2dbc:	0212      	lsls	r2, r2, #8
    2dbe:	431a      	orrs	r2, r3
    2dc0:	7bab      	ldrb	r3, [r5, #14]
    2dc2:	041b      	lsls	r3, r3, #16
    2dc4:	4313      	orrs	r3, r2
    2dc6:	7bec      	ldrb	r4, [r5, #15]
    2dc8:	0624      	lsls	r4, r4, #24
    2dca:	431c      	orrs	r4, r3
    2dcc:	7a2b      	ldrb	r3, [r5, #8]
    2dce:	7a6a      	ldrb	r2, [r5, #9]
    2dd0:	0212      	lsls	r2, r2, #8
    2dd2:	431a      	orrs	r2, r3
    2dd4:	7aab      	ldrb	r3, [r5, #10]
    2dd6:	041b      	lsls	r3, r3, #16
    2dd8:	4313      	orrs	r3, r2
    2dda:	7aea      	ldrb	r2, [r5, #11]
    2ddc:	0612      	lsls	r2, r2, #24
    2dde:	431a      	orrs	r2, r3
    2de0:	6879      	ldr	r1, [r7, #4]
    2de2:	792b      	ldrb	r3, [r5, #4]
    2de4:	7968      	ldrb	r0, [r5, #5]
    2de6:	0200      	lsls	r0, r0, #8
    2de8:	4318      	orrs	r0, r3
    2dea:	79ab      	ldrb	r3, [r5, #6]
    2dec:	041b      	lsls	r3, r3, #16
    2dee:	4303      	orrs	r3, r0
    2df0:	79e8      	ldrb	r0, [r5, #7]
    2df2:	0600      	lsls	r0, r0, #24
    2df4:	4318      	orrs	r0, r3
    2df6:	002b      	movs	r3, r5
    2df8:	47a0      	blx	r4
    2dfa:	2800      	cmp	r0, #0
    2dfc:	d001      	beq.n	2e02 <busmanager_process_function+0xc6>
				current_request->status = BusManager_Request_Complete;
    2dfe:	2302      	movs	r3, #2
    2e00:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    2e02:	2315      	movs	r3, #21
    2e04:	56eb      	ldrsb	r3, [r5, r3]
    2e06:	2b02      	cmp	r3, #2
    2e08:	d033      	beq.n	2e72 <busmanager_process_function+0x136>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    2e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d09e      	beq.n	2d4e <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    2e10:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    2e12:	2300      	movs	r3, #0
    2e14:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    2e16:	e7b0      	b.n	2d7a <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    2e18:	7c2a      	ldrb	r2, [r5, #16]
    2e1a:	7c6b      	ldrb	r3, [r5, #17]
    2e1c:	021b      	lsls	r3, r3, #8
    2e1e:	4313      	orrs	r3, r2
    2e20:	7caa      	ldrb	r2, [r5, #18]
    2e22:	0412      	lsls	r2, r2, #16
    2e24:	431a      	orrs	r2, r3
    2e26:	7ceb      	ldrb	r3, [r5, #19]
    2e28:	061b      	lsls	r3, r3, #24
    2e2a:	4313      	orrs	r3, r2
    2e2c:	4698      	mov	r8, r3
    2e2e:	4b2a      	ldr	r3, [pc, #168]	; (2ed8 <busmanager_process_function+0x19c>)
    2e30:	4798      	blx	r3
    2e32:	4643      	mov	r3, r8
    2e34:	1a18      	subs	r0, r3, r0
    2e36:	2800      	cmp	r0, #0
    2e38:	dd06      	ble.n	2e48 <busmanager_process_function+0x10c>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    2e3a:	2301      	movs	r3, #1
    2e3c:	0022      	movs	r2, r4
    2e3e:	0029      	movs	r1, r5
    2e40:	0038      	movs	r0, r7
    2e42:	4e26      	ldr	r6, [pc, #152]	; (2edc <busmanager_process_function+0x1a0>)
    2e44:	47b0      	blx	r6
			if (unblocked) break;
    2e46:	e78e      	b.n	2d66 <busmanager_process_function+0x2a>
					current_request->busy = false;
    2e48:	2300      	movs	r3, #0
    2e4a:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    2e4c:	0022      	movs	r2, r4
    2e4e:	0029      	movs	r1, r5
    2e50:	0038      	movs	r0, r7
    2e52:	4c22      	ldr	r4, [pc, #136]	; (2edc <busmanager_process_function+0x1a0>)
    2e54:	47a0      	blx	r4
			if (unblocked) break;
    2e56:	e79d      	b.n	2d94 <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    2e58:	0038      	movs	r0, r7
    2e5a:	3030      	adds	r0, #48	; 0x30
    2e5c:	2201      	movs	r2, #1
    2e5e:	4b20      	ldr	r3, [pc, #128]	; (2ee0 <busmanager_process_function+0x1a4>)
    2e60:	9300      	str	r3, [sp, #0]
    2e62:	2301      	movs	r3, #1
    2e64:	4252      	negs	r2, r2
    2e66:	4c1f      	ldr	r4, [pc, #124]	; (2ee4 <busmanager_process_function+0x1a8>)
    2e68:	47a0      	blx	r4
			continue;
    2e6a:	e7ce      	b.n	2e0a <busmanager_process_function+0xce>
				SOS();
    2e6c:	4b1e      	ldr	r3, [pc, #120]	; (2ee8 <busmanager_process_function+0x1ac>)
    2e6e:	4798      	blx	r3
    2e70:	e7a2      	b.n	2db8 <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    2e72:	7d2b      	ldrb	r3, [r5, #20]
    2e74:	2b00      	cmp	r3, #0
    2e76:	d1c8      	bne.n	2e0a <busmanager_process_function+0xce>
			current_request->status = BusManager_Request_CompleteNotBusy;
    2e78:	3303      	adds	r3, #3
    2e7a:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    2e7c:	e017      	b.n	2eae <busmanager_process_function+0x172>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    2e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    2e80:	4449      	add	r1, r9
    2e82:	1e4b      	subs	r3, r1, #1
    2e84:	17d8      	asrs	r0, r3, #31
    2e86:	0f40      	lsrs	r0, r0, #29
    2e88:	181b      	adds	r3, r3, r0
    2e8a:	2207      	movs	r2, #7
    2e8c:	4013      	ands	r3, r2
    2e8e:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    2e90:	17c8      	asrs	r0, r1, #31
    2e92:	0f40      	lsrs	r0, r0, #29
    2e94:	1809      	adds	r1, r1, r0
    2e96:	400a      	ands	r2, r1
    2e98:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    2e9a:	3302      	adds	r3, #2
    2e9c:	009b      	lsls	r3, r3, #2
    2e9e:	59d9      	ldr	r1, [r3, r7]
    2ea0:	3202      	adds	r2, #2
    2ea2:	0093      	lsls	r3, r2, #2
    2ea4:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    2ea6:	2301      	movs	r3, #1
    2ea8:	425b      	negs	r3, r3
    2eaa:	469c      	mov	ip, r3
    2eac:	44e1      	add	r9, ip
    2eae:	464b      	mov	r3, r9
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	dce4      	bgt.n	2e7e <busmanager_process_function+0x142>
			}

			--(data->request_count);
    2eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2eb6:	3b01      	subs	r3, #1
    2eb8:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    2eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ebc:	3301      	adds	r3, #1
    2ebe:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    2ec0:	17d9      	asrs	r1, r3, #31
    2ec2:	0f49      	lsrs	r1, r1, #29
    2ec4:	185b      	adds	r3, r3, r1
    2ec6:	2207      	movs	r2, #7
    2ec8:	4013      	ands	r3, r2
    2eca:	1a5b      	subs	r3, r3, r1
    2ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    2ece:	e79c      	b.n	2e0a <busmanager_process_function+0xce>
    2ed0:	2000056c 	.word	0x2000056c
    2ed4:	00002b4d 	.word	0x00002b4d
    2ed8:	00001b2d 	.word	0x00001b2d
    2edc:	00002ce9 	.word	0x00002ce9
    2ee0:	00002c85 	.word	0x00002c85
    2ee4:	00002ba9 	.word	0x00002ba9
    2ee8:	00002721 	.word	0x00002721

00002eec <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    2eec:	b570      	push	{r4, r5, r6, lr}
    2eee:	0004      	movs	r4, r0
    2ef0:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    2ef2:	480a      	ldr	r0, [pc, #40]	; (2f1c <busmanager_new_process+0x30>)
    2ef4:	0013      	movs	r3, r2
    2ef6:	000a      	movs	r2, r1
    2ef8:	0001      	movs	r1, r0
    2efa:	0020      	movs	r0, r4
    2efc:	4e08      	ldr	r6, [pc, #32]	; (2f20 <busmanager_new_process+0x34>)
    2efe:	47b0      	blx	r6
	proc->data.sercom = sercom;
    2f00:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    2f02:	9b04      	ldr	r3, [sp, #16]
    2f04:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    2f06:	2300      	movs	r3, #0
    2f08:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    2f0a:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    2f0c:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    2f0e:	0023      	movs	r3, r4
    2f10:	3328      	adds	r3, #40	; 0x28
    2f12:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    2f14:	0020      	movs	r0, r4
    2f16:	4b03      	ldr	r3, [pc, #12]	; (2f24 <busmanager_new_process+0x38>)
    2f18:	4798      	blx	r3
}
    2f1a:	bd70      	pop	{r4, r5, r6, pc}
    2f1c:	00002d3d 	.word	0x00002d3d
    2f20:	000027e1 	.word	0x000027e1
    2f24:	000028c9 	.word	0x000028c9

00002f28 <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    2f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f2a:	0004      	movs	r4, r0
    2f2c:	000d      	movs	r5, r1
    2f2e:	9806      	ldr	r0, [sp, #24]
    2f30:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    2f32:	2600      	movs	r6, #0
    2f34:	702a      	strb	r2, [r5, #0]
    2f36:	0a17      	lsrs	r7, r2, #8
    2f38:	706f      	strb	r7, [r5, #1]
    2f3a:	0c17      	lsrs	r7, r2, #16
    2f3c:	70af      	strb	r7, [r5, #2]
    2f3e:	0e12      	lsrs	r2, r2, #24
    2f40:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    2f42:	712b      	strb	r3, [r5, #4]
    2f44:	0a1a      	lsrs	r2, r3, #8
    2f46:	716a      	strb	r2, [r5, #5]
    2f48:	0c1a      	lsrs	r2, r3, #16
    2f4a:	71aa      	strb	r2, [r5, #6]
    2f4c:	0e1b      	lsrs	r3, r3, #24
    2f4e:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    2f50:	7228      	strb	r0, [r5, #8]
    2f52:	0a03      	lsrs	r3, r0, #8
    2f54:	726b      	strb	r3, [r5, #9]
    2f56:	0c03      	lsrs	r3, r0, #16
    2f58:	72ab      	strb	r3, [r5, #10]
    2f5a:	0e00      	lsrs	r0, r0, #24
    2f5c:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    2f5e:	7329      	strb	r1, [r5, #12]
    2f60:	0a0b      	lsrs	r3, r1, #8
    2f62:	736b      	strb	r3, [r5, #13]
    2f64:	0c0b      	lsrs	r3, r1, #16
    2f66:	73ab      	strb	r3, [r5, #14]
    2f68:	0e09      	lsrs	r1, r1, #24
    2f6a:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    2f6c:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    2f6e:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    2f70:	e007      	b.n	2f82 <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    2f72:	0020      	movs	r0, r4
    2f74:	3058      	adds	r0, #88	; 0x58
    2f76:	2201      	movs	r2, #1
    2f78:	2301      	movs	r3, #1
    2f7a:	4252      	negs	r2, r2
    2f7c:	2108      	movs	r1, #8
    2f7e:	4e0b      	ldr	r6, [pc, #44]	; (2fac <busmanager_request_transaction+0x84>)
    2f80:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    2f82:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2f84:	2b08      	cmp	r3, #8
    2f86:	d0f4      	beq.n	2f72 <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    2f88:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2f8a:	0011      	movs	r1, r2
    2f8c:	310c      	adds	r1, #12
    2f8e:	0089      	lsls	r1, r1, #2
    2f90:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    2f92:	3301      	adds	r3, #1
    2f94:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    2f96:	3201      	adds	r2, #1
    2f98:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    2f9a:	17d1      	asrs	r1, r2, #31
    2f9c:	0f49      	lsrs	r1, r1, #29
    2f9e:	1853      	adds	r3, r2, r1
    2fa0:	2207      	movs	r2, #7
    2fa2:	4013      	ands	r3, r2
    2fa4:	1a5b      	subs	r3, r3, r1
    2fa6:	6563      	str	r3, [r4, #84]	; 0x54
    2fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2faa:	46c0      	nop			; (mov r8, r8)
    2fac:	00002b4d 	.word	0x00002b4d

00002fb0 <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    2fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fb2:	46de      	mov	lr, fp
    2fb4:	4657      	mov	r7, sl
    2fb6:	464e      	mov	r6, r9
    2fb8:	4645      	mov	r5, r8
    2fba:	b5e0      	push	{r5, r6, r7, lr}
    2fbc:	b089      	sub	sp, #36	; 0x24
    2fbe:	0004      	movs	r4, r0
    2fc0:	000e      	movs	r6, r1
    2fc2:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    2fc4:	ab07      	add	r3, sp, #28
    2fc6:	2003      	movs	r0, #3
    2fc8:	4682      	mov	sl, r0
    2fca:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    2fcc:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    2fce:	2115      	movs	r1, #21
    2fd0:	a802      	add	r0, sp, #8
    2fd2:	4684      	mov	ip, r0
    2fd4:	4461      	add	r1, ip
    2fd6:	0a10      	lsrs	r0, r2, #8
    2fd8:	7008      	strb	r0, [r1, #0]
    2fda:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    2fdc:	7822      	ldrb	r2, [r4, #0]
    2fde:	7861      	ldrb	r1, [r4, #1]
    2fe0:	0209      	lsls	r1, r1, #8
    2fe2:	4311      	orrs	r1, r2
    2fe4:	78a2      	ldrb	r2, [r4, #2]
    2fe6:	0412      	lsls	r2, r2, #16
    2fe8:	430a      	orrs	r2, r1
    2fea:	78e5      	ldrb	r5, [r4, #3]
    2fec:	062d      	lsls	r5, r5, #24
    2fee:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    2ff0:	9604      	str	r6, [sp, #16]
    2ff2:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    2ff4:	2128      	movs	r1, #40	; 0x28
    2ff6:	4689      	mov	r9, r1
    2ff8:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    2ffa:	0100      	lsls	r0, r0, #4
    2ffc:	4e24      	ldr	r6, [pc, #144]	; (3090 <dma_eeprom_read+0xe0>)
    2ffe:	1980      	adds	r0, r0, r6
    3000:	4924      	ldr	r1, [pc, #144]	; (3094 <dma_eeprom_read+0xe4>)
    3002:	468b      	mov	fp, r1
    3004:	9103      	str	r1, [sp, #12]
    3006:	4649      	mov	r1, r9
    3008:	9102      	str	r1, [sp, #8]
    300a:	9301      	str	r3, [sp, #4]
    300c:	4651      	mov	r1, sl
    300e:	9100      	str	r1, [sp, #0]
    3010:	2300      	movs	r3, #0
    3012:	2200      	movs	r2, #0
    3014:	3902      	subs	r1, #2
    3016:	4f20      	ldr	r7, [pc, #128]	; (3098 <dma_eeprom_read+0xe8>)
    3018:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    301a:	466b      	mov	r3, sp
    301c:	8a9b      	ldrh	r3, [r3, #20]
    301e:	4698      	mov	r8, r3
    3020:	2300      	movs	r3, #0
    3022:	9303      	str	r3, [sp, #12]
    3024:	4649      	mov	r1, r9
    3026:	9102      	str	r1, [sp, #8]
    3028:	4b1c      	ldr	r3, [pc, #112]	; (309c <dma_eeprom_read+0xec>)
    302a:	9301      	str	r3, [sp, #4]
    302c:	4641      	mov	r1, r8
    302e:	9100      	str	r1, [sp, #0]
    3030:	2300      	movs	r3, #0
    3032:	2200      	movs	r2, #0
    3034:	2100      	movs	r1, #0
    3036:	4658      	mov	r0, fp
    3038:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    303a:	9a04      	ldr	r2, [sp, #16]
    303c:	7850      	ldrb	r0, [r2, #1]
    303e:	0100      	lsls	r0, r0, #4
    3040:	1980      	adds	r0, r0, r6
    3042:	4917      	ldr	r1, [pc, #92]	; (30a0 <dma_eeprom_read+0xf0>)
    3044:	468b      	mov	fp, r1
    3046:	9103      	str	r1, [sp, #12]
    3048:	4b16      	ldr	r3, [pc, #88]	; (30a4 <dma_eeprom_read+0xf4>)
    304a:	9302      	str	r3, [sp, #8]
    304c:	4649      	mov	r1, r9
    304e:	9101      	str	r1, [sp, #4]
    3050:	4651      	mov	r1, sl
    3052:	9100      	str	r1, [sp, #0]
    3054:	2300      	movs	r3, #0
    3056:	2200      	movs	r2, #0
    3058:	2100      	movs	r1, #0
    305a:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    305c:	2300      	movs	r3, #0
    305e:	9303      	str	r3, [sp, #12]
    3060:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3062:	9302      	str	r3, [sp, #8]
    3064:	464b      	mov	r3, r9
    3066:	9301      	str	r3, [sp, #4]
    3068:	4643      	mov	r3, r8
    306a:	9300      	str	r3, [sp, #0]
    306c:	2300      	movs	r3, #0
    306e:	2201      	movs	r2, #1
    3070:	2100      	movs	r1, #0
    3072:	4658      	mov	r0, fp
    3074:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3076:	1d21      	adds	r1, r4, #4
    3078:	9a04      	ldr	r2, [sp, #16]
    307a:	0028      	movs	r0, r5
    307c:	4b0a      	ldr	r3, [pc, #40]	; (30a8 <dma_eeprom_read+0xf8>)
    307e:	4798      	blx	r3
}
    3080:	b009      	add	sp, #36	; 0x24
    3082:	bcf0      	pop	{r4, r5, r6, r7}
    3084:	46bb      	mov	fp, r7
    3086:	46b2      	mov	sl, r6
    3088:	46a9      	mov	r9, r5
    308a:	46a0      	mov	r8, r4
    308c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	20000340 	.word	0x20000340
    3094:	200005d0 	.word	0x200005d0
    3098:	00000c85 	.word	0x00000c85
    309c:	00004985 	.word	0x00004985
    30a0:	200005c0 	.word	0x200005c0
    30a4:	20000210 	.word	0x20000210
    30a8:	00003545 	.word	0x00003545

000030ac <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    30ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ae:	46de      	mov	lr, fp
    30b0:	4657      	mov	r7, sl
    30b2:	464e      	mov	r6, r9
    30b4:	4645      	mov	r5, r8
    30b6:	b5e0      	push	{r5, r6, r7, lr}
    30b8:	b089      	sub	sp, #36	; 0x24
    30ba:	0004      	movs	r4, r0
    30bc:	000e      	movs	r6, r1
    30be:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    30c0:	ab07      	add	r3, sp, #28
    30c2:	2102      	movs	r1, #2
    30c4:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    30c6:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    30c8:	3113      	adds	r1, #19
    30ca:	a802      	add	r0, sp, #8
    30cc:	4684      	mov	ip, r0
    30ce:	4461      	add	r1, ip
    30d0:	0a10      	lsrs	r0, r2, #8
    30d2:	7008      	strb	r0, [r1, #0]
    30d4:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    30d6:	7822      	ldrb	r2, [r4, #0]
    30d8:	7861      	ldrb	r1, [r4, #1]
    30da:	0209      	lsls	r1, r1, #8
    30dc:	4311      	orrs	r1, r2
    30de:	78a2      	ldrb	r2, [r4, #2]
    30e0:	0412      	lsls	r2, r2, #16
    30e2:	430a      	orrs	r2, r1
    30e4:	78e5      	ldrb	r5, [r4, #3]
    30e6:	062d      	lsls	r5, r5, #24
    30e8:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    30ea:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    30ec:	2228      	movs	r2, #40	; 0x28
    30ee:	4690      	mov	r8, r2
    30f0:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    30f2:	0100      	lsls	r0, r0, #4
    30f4:	4a25      	ldr	r2, [pc, #148]	; (318c <dma_eeprom_write+0xe0>)
    30f6:	4691      	mov	r9, r2
    30f8:	4448      	add	r0, r9
    30fa:	4a25      	ldr	r2, [pc, #148]	; (3190 <dma_eeprom_write+0xe4>)
    30fc:	4693      	mov	fp, r2
    30fe:	9203      	str	r2, [sp, #12]
    3100:	4642      	mov	r2, r8
    3102:	9202      	str	r2, [sp, #8]
    3104:	9301      	str	r3, [sp, #4]
    3106:	2203      	movs	r2, #3
    3108:	9200      	str	r2, [sp, #0]
    310a:	2300      	movs	r3, #0
    310c:	2200      	movs	r2, #0
    310e:	2101      	movs	r1, #1
    3110:	4f20      	ldr	r7, [pc, #128]	; (3194 <dma_eeprom_write+0xe8>)
    3112:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3114:	466b      	mov	r3, sp
    3116:	8a9b      	ldrh	r3, [r3, #20]
    3118:	469a      	mov	sl, r3
    311a:	2300      	movs	r3, #0
    311c:	9303      	str	r3, [sp, #12]
    311e:	4641      	mov	r1, r8
    3120:	9102      	str	r1, [sp, #8]
    3122:	9912      	ldr	r1, [sp, #72]	; 0x48
    3124:	9101      	str	r1, [sp, #4]
    3126:	4651      	mov	r1, sl
    3128:	9100      	str	r1, [sp, #0]
    312a:	2200      	movs	r2, #0
    312c:	2101      	movs	r1, #1
    312e:	4658      	mov	r0, fp
    3130:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3132:	7870      	ldrb	r0, [r6, #1]
    3134:	0100      	lsls	r0, r0, #4
    3136:	4448      	add	r0, r9
    3138:	4917      	ldr	r1, [pc, #92]	; (3198 <dma_eeprom_write+0xec>)
    313a:	4689      	mov	r9, r1
    313c:	9103      	str	r1, [sp, #12]
    313e:	4917      	ldr	r1, [pc, #92]	; (319c <dma_eeprom_write+0xf0>)
    3140:	468b      	mov	fp, r1
    3142:	9102      	str	r1, [sp, #8]
    3144:	4641      	mov	r1, r8
    3146:	9101      	str	r1, [sp, #4]
    3148:	2203      	movs	r2, #3
    314a:	9200      	str	r2, [sp, #0]
    314c:	2300      	movs	r3, #0
    314e:	2200      	movs	r2, #0
    3150:	2100      	movs	r1, #0
    3152:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3154:	2300      	movs	r3, #0
    3156:	9303      	str	r3, [sp, #12]
    3158:	465b      	mov	r3, fp
    315a:	9302      	str	r3, [sp, #8]
    315c:	4643      	mov	r3, r8
    315e:	9301      	str	r3, [sp, #4]
    3160:	4653      	mov	r3, sl
    3162:	9300      	str	r3, [sp, #0]
    3164:	2300      	movs	r3, #0
    3166:	2200      	movs	r2, #0
    3168:	2100      	movs	r1, #0
    316a:	4648      	mov	r0, r9
    316c:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    316e:	0020      	movs	r0, r4
    3170:	4b0b      	ldr	r3, [pc, #44]	; (31a0 <dma_eeprom_write+0xf4>)
    3172:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3174:	1d21      	adds	r1, r4, #4
    3176:	0032      	movs	r2, r6
    3178:	0028      	movs	r0, r5
    317a:	4b0a      	ldr	r3, [pc, #40]	; (31a4 <dma_eeprom_write+0xf8>)
    317c:	4798      	blx	r3
}
    317e:	b009      	add	sp, #36	; 0x24
    3180:	bcf0      	pop	{r4, r5, r6, r7}
    3182:	46bb      	mov	fp, r7
    3184:	46b2      	mov	sl, r6
    3186:	46a9      	mov	r9, r5
    3188:	46a0      	mov	r8, r4
    318a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    318c:	20000340 	.word	0x20000340
    3190:	200005d0 	.word	0x200005d0
    3194:	00000c85 	.word	0x00000c85
    3198:	200005c0 	.word	0x200005c0
    319c:	20000210 	.word	0x20000210
    31a0:	00000df5 	.word	0x00000df5
    31a4:	00003545 	.word	0x00003545

000031a8 <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    31a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31aa:	b083      	sub	sp, #12
    31ac:	0014      	movs	r4, r2
    31ae:	001d      	movs	r5, r3
	switch (request->type) {
    31b0:	2324      	movs	r3, #36	; 0x24
    31b2:	5cd3      	ldrb	r3, [r2, r3]
    31b4:	2b00      	cmp	r3, #0
    31b6:	d004      	beq.n	31c2 <dma_eeprom_process_request+0x1a>
    31b8:	2b01      	cmp	r3, #1
    31ba:	d00a      	beq.n	31d2 <dma_eeprom_process_request+0x2a>
    31bc:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    31be:	b003      	add	sp, #12
    31c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    31c2:	69d3      	ldr	r3, [r2, #28]
    31c4:	6992      	ldr	r2, [r2, #24]
    31c6:	6a24      	ldr	r4, [r4, #32]
    31c8:	9400      	str	r4, [sp, #0]
    31ca:	4c1a      	ldr	r4, [pc, #104]	; (3234 <dma_eeprom_process_request+0x8c>)
    31cc:	47a0      	blx	r4
	return true;
    31ce:	2001      	movs	r0, #1
		break;
    31d0:	e7f5      	b.n	31be <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    31d2:	6992      	ldr	r2, [r2, #24]
    31d4:	69e6      	ldr	r6, [r4, #28]
    31d6:	1993      	adds	r3, r2, r6
    31d8:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    31da:	233f      	movs	r3, #63	; 0x3f
    31dc:	0017      	movs	r7, r2
    31de:	439f      	bics	r7, r3
    31e0:	003b      	movs	r3, r7
    31e2:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    31e4:	459c      	cmp	ip, r3
    31e6:	d300      	bcc.n	31ea <dma_eeprom_process_request+0x42>
    31e8:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    31ea:	6a23      	ldr	r3, [r4, #32]
    31ec:	9300      	str	r3, [sp, #0]
    31ee:	0033      	movs	r3, r6
    31f0:	4f11      	ldr	r7, [pc, #68]	; (3238 <dma_eeprom_process_request+0x90>)
    31f2:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    31f4:	4b11      	ldr	r3, [pc, #68]	; (323c <dma_eeprom_process_request+0x94>)
    31f6:	4798      	blx	r3
    31f8:	4b11      	ldr	r3, [pc, #68]	; (3240 <dma_eeprom_process_request+0x98>)
    31fa:	4798      	blx	r3
    31fc:	4b11      	ldr	r3, [pc, #68]	; (3244 <dma_eeprom_process_request+0x9c>)
    31fe:	4912      	ldr	r1, [pc, #72]	; (3248 <dma_eeprom_process_request+0xa0>)
    3200:	4798      	blx	r3
    3202:	4b12      	ldr	r3, [pc, #72]	; (324c <dma_eeprom_process_request+0xa4>)
    3204:	4798      	blx	r3
    3206:	7428      	strb	r0, [r5, #16]
    3208:	0a03      	lsrs	r3, r0, #8
    320a:	746b      	strb	r3, [r5, #17]
    320c:	0c03      	lsrs	r3, r0, #16
    320e:	74ab      	strb	r3, [r5, #18]
    3210:	0e00      	lsrs	r0, r0, #24
    3212:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    3214:	2301      	movs	r3, #1
    3216:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    3218:	69e3      	ldr	r3, [r4, #28]
    321a:	1b9b      	subs	r3, r3, r6
    321c:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    321e:	d101      	bne.n	3224 <dma_eeprom_process_request+0x7c>
	return true;
    3220:	2001      	movs	r0, #1
    3222:	e7cc      	b.n	31be <dma_eeprom_process_request+0x16>
				request->address += count;
    3224:	69a3      	ldr	r3, [r4, #24]
    3226:	199b      	adds	r3, r3, r6
    3228:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    322a:	6a23      	ldr	r3, [r4, #32]
    322c:	199b      	adds	r3, r3, r6
    322e:	6223      	str	r3, [r4, #32]
				return false;
    3230:	2000      	movs	r0, #0
    3232:	e7c4      	b.n	31be <dma_eeprom_process_request+0x16>
    3234:	00002fb1 	.word	0x00002fb1
    3238:	000030ad 	.word	0x000030ad
    323c:	00001b2d 	.word	0x00001b2d
    3240:	00004575 	.word	0x00004575
    3244:	0000382d 	.word	0x0000382d
    3248:	486a6000 	.word	0x486a6000
    324c:	000037fd 	.word	0x000037fd

00003250 <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    3250:	b530      	push	{r4, r5, lr}
    3252:	b083      	sub	sp, #12
    3254:	0014      	movs	r4, r2
    3256:	001a      	movs	r2, r3
    3258:	ab06      	add	r3, sp, #24
    325a:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    325c:	2324      	movs	r3, #36	; 0x24
    325e:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    3260:	9b07      	ldr	r3, [sp, #28]
    3262:	618b      	str	r3, [r1, #24]
	request->count = count;
    3264:	9b08      	ldr	r3, [sp, #32]
    3266:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3268:	9b09      	ldr	r3, [sp, #36]	; 0x24
    326a:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    326c:	4b03      	ldr	r3, [pc, #12]	; (327c <eeprom_request+0x2c>)
    326e:	9301      	str	r3, [sp, #4]
    3270:	9100      	str	r1, [sp, #0]
    3272:	0023      	movs	r3, r4
    3274:	4c02      	ldr	r4, [pc, #8]	; (3280 <eeprom_request+0x30>)
    3276:	47a0      	blx	r4
}
    3278:	b003      	add	sp, #12
    327a:	bd30      	pop	{r4, r5, pc}
    327c:	000031a9 	.word	0x000031a9
    3280:	00002f29 	.word	0x00002f29

00003284 <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    3284:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3286:	3015      	adds	r0, #21
    3288:	2300      	movs	r3, #0
    328a:	22ff      	movs	r2, #255	; 0xff
    328c:	2103      	movs	r1, #3
    328e:	4c01      	ldr	r4, [pc, #4]	; (3294 <eeprom_wait_until_done+0x10>)
    3290:	47a0      	blx	r4
    3292:	bd10      	pop	{r4, pc}
    3294:	00002b4d 	.word	0x00002b4d

00003298 <dma_imu_icm20948_read>:
void dma_imu_icm20948_read(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* writeback) {
    3298:	b5f0      	push	{r4, r5, r6, r7, lr}
    329a:	46de      	mov	lr, fp
    329c:	4657      	mov	r7, sl
    329e:	464e      	mov	r6, r9
    32a0:	4645      	mov	r5, r8
    32a2:	b5e0      	push	{r5, r6, r7, lr}
    32a4:	b087      	sub	sp, #28
    32a6:	0004      	movs	r4, r0
    32a8:	000e      	movs	r6, r1
    32aa:	9304      	str	r3, [sp, #16]
    32ac:	2317      	movs	r3, #23
    32ae:	446b      	add	r3, sp
    32b0:	701a      	strb	r2, [r3, #0]
	address |= IMU_READ_MASK;
    32b2:	b2d1      	uxtb	r1, r2
    32b4:	2280      	movs	r2, #128	; 0x80
    32b6:	4252      	negs	r2, r2
    32b8:	430a      	orrs	r2, r1
    32ba:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    32bc:	7802      	ldrb	r2, [r0, #0]
    32be:	7841      	ldrb	r1, [r0, #1]
    32c0:	0209      	lsls	r1, r1, #8
    32c2:	4311      	orrs	r1, r2
    32c4:	7882      	ldrb	r2, [r0, #2]
    32c6:	0412      	lsls	r2, r2, #16
    32c8:	430a      	orrs	r2, r1
    32ca:	78c5      	ldrb	r5, [r0, #3]
    32cc:	062d      	lsls	r5, r5, #24
    32ce:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    32d0:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    32d2:	2228      	movs	r2, #40	; 0x28
    32d4:	4691      	mov	r9, r2
    32d6:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    32d8:	0100      	lsls	r0, r0, #4
    32da:	4a24      	ldr	r2, [pc, #144]	; (336c <dma_imu_icm20948_read+0xd4>)
    32dc:	4692      	mov	sl, r2
    32de:	4450      	add	r0, sl
    32e0:	4a23      	ldr	r2, [pc, #140]	; (3370 <dma_imu_icm20948_read+0xd8>)
    32e2:	4693      	mov	fp, r2
    32e4:	9203      	str	r2, [sp, #12]
    32e6:	464a      	mov	r2, r9
    32e8:	9202      	str	r2, [sp, #8]
    32ea:	9301      	str	r3, [sp, #4]
    32ec:	2201      	movs	r2, #1
    32ee:	9200      	str	r2, [sp, #0]
    32f0:	2300      	movs	r3, #0
    32f2:	2200      	movs	r2, #0
    32f4:	2100      	movs	r1, #0
    32f6:	4f1f      	ldr	r7, [pc, #124]	; (3374 <dma_imu_icm20948_read+0xdc>)
    32f8:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    32fa:	466b      	mov	r3, sp
    32fc:	8a1b      	ldrh	r3, [r3, #16]
    32fe:	4698      	mov	r8, r3
    3300:	2300      	movs	r3, #0
    3302:	9303      	str	r3, [sp, #12]
    3304:	4649      	mov	r1, r9
    3306:	9102      	str	r1, [sp, #8]
    3308:	4b1b      	ldr	r3, [pc, #108]	; (3378 <dma_imu_icm20948_read+0xe0>)
    330a:	9301      	str	r3, [sp, #4]
    330c:	4641      	mov	r1, r8
    330e:	9100      	str	r1, [sp, #0]
    3310:	2300      	movs	r3, #0
    3312:	2200      	movs	r2, #0
    3314:	2100      	movs	r1, #0
    3316:	4658      	mov	r0, fp
    3318:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    331a:	7870      	ldrb	r0, [r6, #1]
    331c:	0100      	lsls	r0, r0, #4
    331e:	4450      	add	r0, sl
    3320:	4916      	ldr	r1, [pc, #88]	; (337c <dma_imu_icm20948_read+0xe4>)
    3322:	468b      	mov	fp, r1
    3324:	9103      	str	r1, [sp, #12]
    3326:	4b16      	ldr	r3, [pc, #88]	; (3380 <dma_imu_icm20948_read+0xe8>)
    3328:	9302      	str	r3, [sp, #8]
    332a:	4649      	mov	r1, r9
    332c:	9101      	str	r1, [sp, #4]
    332e:	2201      	movs	r2, #1
    3330:	9200      	str	r2, [sp, #0]
    3332:	2300      	movs	r3, #0
    3334:	2200      	movs	r2, #0
    3336:	2100      	movs	r1, #0
    3338:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    333a:	2300      	movs	r3, #0
    333c:	9303      	str	r3, [sp, #12]
    333e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3340:	9302      	str	r3, [sp, #8]
    3342:	464b      	mov	r3, r9
    3344:	9301      	str	r3, [sp, #4]
    3346:	4643      	mov	r3, r8
    3348:	9300      	str	r3, [sp, #0]
    334a:	2300      	movs	r3, #0
    334c:	2201      	movs	r2, #1
    334e:	2100      	movs	r1, #0
    3350:	4658      	mov	r0, fp
    3352:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3354:	1d21      	adds	r1, r4, #4
    3356:	0032      	movs	r2, r6
    3358:	0028      	movs	r0, r5
    335a:	4b0a      	ldr	r3, [pc, #40]	; (3384 <dma_imu_icm20948_read+0xec>)
    335c:	4798      	blx	r3
}
    335e:	b007      	add	sp, #28
    3360:	bcf0      	pop	{r4, r5, r6, r7}
    3362:	46bb      	mov	fp, r7
    3364:	46b2      	mov	sl, r6
    3366:	46a9      	mov	r9, r5
    3368:	46a0      	mov	r8, r4
    336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    336c:	20000340 	.word	0x20000340
    3370:	200005d0 	.word	0x200005d0
    3374:	00000c85 	.word	0x00000c85
    3378:	00004985 	.word	0x00004985
    337c:	200005c0 	.word	0x200005c0
    3380:	20000210 	.word	0x20000210
    3384:	00003545 	.word	0x00003545

00003388 <dma_imu_icm20948_write>:
void dma_imu_icm20948_write(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* data) {
    3388:	b5f0      	push	{r4, r5, r6, r7, lr}
    338a:	46de      	mov	lr, fp
    338c:	4657      	mov	r7, sl
    338e:	464e      	mov	r6, r9
    3390:	4645      	mov	r5, r8
    3392:	b5e0      	push	{r5, r6, r7, lr}
    3394:	b087      	sub	sp, #28
    3396:	0004      	movs	r4, r0
    3398:	000e      	movs	r6, r1
    339a:	9304      	str	r3, [sp, #16]
    339c:	2317      	movs	r3, #23
    339e:	446b      	add	r3, sp
    33a0:	701a      	strb	r2, [r3, #0]
	address &= IMU_WRITE_MASK;
    33a2:	b2d1      	uxtb	r1, r2
    33a4:	227f      	movs	r2, #127	; 0x7f
    33a6:	400a      	ands	r2, r1
    33a8:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    33aa:	7802      	ldrb	r2, [r0, #0]
    33ac:	7841      	ldrb	r1, [r0, #1]
    33ae:	0209      	lsls	r1, r1, #8
    33b0:	4311      	orrs	r1, r2
    33b2:	7882      	ldrb	r2, [r0, #2]
    33b4:	0412      	lsls	r2, r2, #16
    33b6:	430a      	orrs	r2, r1
    33b8:	78c5      	ldrb	r5, [r0, #3]
    33ba:	062d      	lsls	r5, r5, #24
    33bc:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    33be:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    33c0:	2228      	movs	r2, #40	; 0x28
    33c2:	4690      	mov	r8, r2
    33c4:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    33c6:	0100      	lsls	r0, r0, #4
    33c8:	4a24      	ldr	r2, [pc, #144]	; (345c <dma_imu_icm20948_write+0xd4>)
    33ca:	4691      	mov	r9, r2
    33cc:	4448      	add	r0, r9
    33ce:	4a24      	ldr	r2, [pc, #144]	; (3460 <dma_imu_icm20948_write+0xd8>)
    33d0:	4693      	mov	fp, r2
    33d2:	9203      	str	r2, [sp, #12]
    33d4:	4642      	mov	r2, r8
    33d6:	9202      	str	r2, [sp, #8]
    33d8:	9301      	str	r3, [sp, #4]
    33da:	2201      	movs	r2, #1
    33dc:	9200      	str	r2, [sp, #0]
    33de:	2300      	movs	r3, #0
    33e0:	2200      	movs	r2, #0
    33e2:	2100      	movs	r1, #0
    33e4:	4f1f      	ldr	r7, [pc, #124]	; (3464 <dma_imu_icm20948_write+0xdc>)
    33e6:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    33e8:	466b      	mov	r3, sp
    33ea:	8a1b      	ldrh	r3, [r3, #16]
    33ec:	469a      	mov	sl, r3
    33ee:	2300      	movs	r3, #0
    33f0:	9303      	str	r3, [sp, #12]
    33f2:	4641      	mov	r1, r8
    33f4:	9102      	str	r1, [sp, #8]
    33f6:	9910      	ldr	r1, [sp, #64]	; 0x40
    33f8:	9101      	str	r1, [sp, #4]
    33fa:	4651      	mov	r1, sl
    33fc:	9100      	str	r1, [sp, #0]
    33fe:	2200      	movs	r2, #0
    3400:	2101      	movs	r1, #1
    3402:	4658      	mov	r0, fp
    3404:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3406:	7870      	ldrb	r0, [r6, #1]
    3408:	0100      	lsls	r0, r0, #4
    340a:	4448      	add	r0, r9
    340c:	4916      	ldr	r1, [pc, #88]	; (3468 <dma_imu_icm20948_write+0xe0>)
    340e:	4689      	mov	r9, r1
    3410:	9103      	str	r1, [sp, #12]
    3412:	4916      	ldr	r1, [pc, #88]	; (346c <dma_imu_icm20948_write+0xe4>)
    3414:	468b      	mov	fp, r1
    3416:	9102      	str	r1, [sp, #8]
    3418:	4641      	mov	r1, r8
    341a:	9101      	str	r1, [sp, #4]
    341c:	2201      	movs	r2, #1
    341e:	9200      	str	r2, [sp, #0]
    3420:	2300      	movs	r3, #0
    3422:	2200      	movs	r2, #0
    3424:	2100      	movs	r1, #0
    3426:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3428:	2300      	movs	r3, #0
    342a:	9303      	str	r3, [sp, #12]
    342c:	465b      	mov	r3, fp
    342e:	9302      	str	r3, [sp, #8]
    3430:	4643      	mov	r3, r8
    3432:	9301      	str	r3, [sp, #4]
    3434:	4653      	mov	r3, sl
    3436:	9300      	str	r3, [sp, #0]
    3438:	2300      	movs	r3, #0
    343a:	2200      	movs	r2, #0
    343c:	2100      	movs	r1, #0
    343e:	4648      	mov	r0, r9
    3440:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3442:	1d21      	adds	r1, r4, #4
    3444:	0032      	movs	r2, r6
    3446:	0028      	movs	r0, r5
    3448:	4b09      	ldr	r3, [pc, #36]	; (3470 <dma_imu_icm20948_write+0xe8>)
    344a:	4798      	blx	r3
}
    344c:	b007      	add	sp, #28
    344e:	bcf0      	pop	{r4, r5, r6, r7}
    3450:	46bb      	mov	fp, r7
    3452:	46b2      	mov	sl, r6
    3454:	46a9      	mov	r9, r5
    3456:	46a0      	mov	r8, r4
    3458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	20000340 	.word	0x20000340
    3460:	200005d0 	.word	0x200005d0
    3464:	00000c85 	.word	0x00000c85
    3468:	200005c0 	.word	0x200005c0
    346c:	20000210 	.word	0x20000210
    3470:	00003545 	.word	0x00003545

00003474 <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    3474:	b5f0      	push	{r4, r5, r6, r7, lr}
    3476:	b085      	sub	sp, #20
    3478:	0005      	movs	r5, r0
    347a:	000e      	movs	r6, r1
    347c:	0014      	movs	r4, r2
	IMU_ON_BUS();
    347e:	2180      	movs	r1, #128	; 0x80
    3480:	0389      	lsls	r1, r1, #14
    3482:	2000      	movs	r0, #0
    3484:	4b17      	ldr	r3, [pc, #92]	; (34e4 <dma_imu_icm20948_process_request+0x70>)
    3486:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    3488:	2325      	movs	r3, #37	; 0x25
    348a:	5ce3      	ldrb	r3, [r4, r3]
    348c:	011b      	lsls	r3, r3, #4
    348e:	220f      	movs	r2, #15
    3490:	446a      	add	r2, sp
    3492:	7013      	strb	r3, [r2, #0]
	dma_imu_icm20948_write(imudesc, dmadesc, REG_BANK_SEL, 1, &bank);
    3494:	9200      	str	r2, [sp, #0]
    3496:	2301      	movs	r3, #1
    3498:	227f      	movs	r2, #127	; 0x7f
    349a:	0031      	movs	r1, r6
    349c:	0028      	movs	r0, r5
    349e:	4f12      	ldr	r7, [pc, #72]	; (34e8 <dma_imu_icm20948_process_request+0x74>)
    34a0:	47b8      	blx	r7
	switch (request->type) {
    34a2:	2324      	movs	r3, #36	; 0x24
    34a4:	5ce3      	ldrb	r3, [r4, r3]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d009      	beq.n	34be <dma_imu_icm20948_process_request+0x4a>
    34aa:	2b01      	cmp	r3, #1
    34ac:	d010      	beq.n	34d0 <dma_imu_icm20948_process_request+0x5c>
	IMU_OFF_BUS();
    34ae:	2180      	movs	r1, #128	; 0x80
    34b0:	0389      	lsls	r1, r1, #14
    34b2:	2000      	movs	r0, #0
    34b4:	4b0d      	ldr	r3, [pc, #52]	; (34ec <dma_imu_icm20948_process_request+0x78>)
    34b6:	4798      	blx	r3
}
    34b8:	2001      	movs	r0, #1
    34ba:	b005      	add	sp, #20
    34bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dma_imu_icm20948_read(imudesc, dmadesc, request->address, request->count, request->data);
    34be:	69e3      	ldr	r3, [r4, #28]
    34c0:	7e22      	ldrb	r2, [r4, #24]
    34c2:	6a21      	ldr	r1, [r4, #32]
    34c4:	9100      	str	r1, [sp, #0]
    34c6:	0031      	movs	r1, r6
    34c8:	0028      	movs	r0, r5
    34ca:	4c09      	ldr	r4, [pc, #36]	; (34f0 <dma_imu_icm20948_process_request+0x7c>)
    34cc:	47a0      	blx	r4
		break;
    34ce:	e7ee      	b.n	34ae <dma_imu_icm20948_process_request+0x3a>
		dma_imu_icm20948_write(imudesc, dmadesc, request->address, request->count, request->data);
    34d0:	69e3      	ldr	r3, [r4, #28]
    34d2:	7e22      	ldrb	r2, [r4, #24]
    34d4:	6a21      	ldr	r1, [r4, #32]
    34d6:	9100      	str	r1, [sp, #0]
    34d8:	0031      	movs	r1, r6
    34da:	0028      	movs	r0, r5
    34dc:	4c02      	ldr	r4, [pc, #8]	; (34e8 <dma_imu_icm20948_process_request+0x74>)
    34de:	47a0      	blx	r4
		break;
    34e0:	e7e5      	b.n	34ae <dma_imu_icm20948_process_request+0x3a>
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	000014e5 	.word	0x000014e5
    34e8:	00003389 	.word	0x00003389
    34ec:	000014f5 	.word	0x000014f5
    34f0:	00003299 	.word	0x00003299

000034f4 <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    34f4:	b570      	push	{r4, r5, r6, lr}
    34f6:	b082      	sub	sp, #8
    34f8:	0014      	movs	r4, r2
    34fa:	001a      	movs	r2, r3
    34fc:	ab06      	add	r3, sp, #24
    34fe:	781e      	ldrb	r6, [r3, #0]
    3500:	ab07      	add	r3, sp, #28
    3502:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3504:	2324      	movs	r3, #36	; 0x24
    3506:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    3508:	9b08      	ldr	r3, [sp, #32]
    350a:	618b      	str	r3, [r1, #24]
	request->count = count;
    350c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    350e:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3512:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    3514:	2325      	movs	r3, #37	; 0x25
    3516:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    3518:	4b03      	ldr	r3, [pc, #12]	; (3528 <imu_icm20948_request+0x34>)
    351a:	9301      	str	r3, [sp, #4]
    351c:	9100      	str	r1, [sp, #0]
    351e:	0023      	movs	r3, r4
    3520:	4c02      	ldr	r4, [pc, #8]	; (352c <imu_icm20948_request+0x38>)
    3522:	47a0      	blx	r4
}
    3524:	b002      	add	sp, #8
    3526:	bd70      	pop	{r4, r5, r6, pc}
    3528:	00003475 	.word	0x00003475
    352c:	00002f29 	.word	0x00002f29

00003530 <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    3530:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3532:	3015      	adds	r0, #21
    3534:	2300      	movs	r3, #0
    3536:	22ff      	movs	r2, #255	; 0xff
    3538:	2103      	movs	r1, #3
    353a:	4c01      	ldr	r4, [pc, #4]	; (3540 <imu_icm20948_wait_until_done+0x10>)
    353c:	47a0      	blx	r4
}
    353e:	bd10      	pop	{r4, pc}
    3540:	00002b4d 	.word	0x00002b4d

00003544 <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    3544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3546:	0007      	movs	r7, r0
    3548:	000d      	movs	r5, r1
    354a:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    354c:	7810      	ldrb	r0, [r2, #0]
    354e:	4e1c      	ldr	r6, [pc, #112]	; (35c0 <dma_spi_transaction+0x7c>)
    3550:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3552:	7860      	ldrb	r0, [r4, #1]
    3554:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    3556:	0038      	movs	r0, r7
    3558:	4b1a      	ldr	r3, [pc, #104]	; (35c4 <dma_spi_transaction+0x80>)
    355a:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    355c:	7923      	ldrb	r3, [r4, #4]
    355e:	78e2      	ldrb	r2, [r4, #3]
    3560:	7820      	ldrb	r0, [r4, #0]
    3562:	2102      	movs	r1, #2
    3564:	4f18      	ldr	r7, [pc, #96]	; (35c8 <dma_spi_transaction+0x84>)
    3566:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    3568:	7923      	ldrb	r3, [r4, #4]
    356a:	78a2      	ldrb	r2, [r4, #2]
    356c:	7860      	ldrb	r0, [r4, #1]
    356e:	2102      	movs	r1, #2
    3570:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    3572:	782b      	ldrb	r3, [r5, #0]
    3574:	786a      	ldrb	r2, [r5, #1]
    3576:	0212      	lsls	r2, r2, #8
    3578:	431a      	orrs	r2, r3
    357a:	78ab      	ldrb	r3, [r5, #2]
    357c:	041b      	lsls	r3, r3, #16
    357e:	4313      	orrs	r3, r2
    3580:	78e9      	ldrb	r1, [r5, #3]
    3582:	0609      	lsls	r1, r1, #24
    3584:	4319      	orrs	r1, r3
    3586:	7928      	ldrb	r0, [r5, #4]
    3588:	4b10      	ldr	r3, [pc, #64]	; (35cc <dma_spi_transaction+0x88>)
    358a:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    358c:	7820      	ldrb	r0, [r4, #0]
    358e:	4f10      	ldr	r7, [pc, #64]	; (35d0 <dma_spi_transaction+0x8c>)
    3590:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    3592:	7860      	ldrb	r0, [r4, #1]
    3594:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    3596:	7860      	ldrb	r0, [r4, #1]
    3598:	4b0e      	ldr	r3, [pc, #56]	; (35d4 <dma_spi_transaction+0x90>)
    359a:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    359c:	7820      	ldrb	r0, [r4, #0]
    359e:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    35a0:	7860      	ldrb	r0, [r4, #1]
    35a2:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    35a4:	782b      	ldrb	r3, [r5, #0]
    35a6:	786a      	ldrb	r2, [r5, #1]
    35a8:	0212      	lsls	r2, r2, #8
    35aa:	431a      	orrs	r2, r3
    35ac:	78ab      	ldrb	r3, [r5, #2]
    35ae:	041b      	lsls	r3, r3, #16
    35b0:	4313      	orrs	r3, r2
    35b2:	78e9      	ldrb	r1, [r5, #3]
    35b4:	0609      	lsls	r1, r1, #24
    35b6:	4319      	orrs	r1, r3
    35b8:	7928      	ldrb	r0, [r5, #4]
    35ba:	4b07      	ldr	r3, [pc, #28]	; (35d8 <dma_spi_transaction+0x94>)
    35bc:	4798      	blx	r3
    35be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35c0:	00000d65 	.word	0x00000d65
    35c4:	000019e5 	.word	0x000019e5
    35c8:	00000cf1 	.word	0x00000cf1
    35cc:	000014f5 	.word	0x000014f5
    35d0:	00000d3d 	.word	0x00000d3d
    35d4:	000035f5 	.word	0x000035f5
    35d8:	000014e5 	.word	0x000014e5

000035dc <rtos_dma_wait_until_end_callback>:
#include "rtos_dma.h"
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    35dc:	4b03      	ldr	r3, [pc, #12]	; (35ec <rtos_dma_wait_until_end_callback+0x10>)
    35de:	681b      	ldr	r3, [r3, #0]
    35e0:	6a1b      	ldr	r3, [r3, #32]
    35e2:	7819      	ldrb	r1, [r3, #0]
    35e4:	4a02      	ldr	r2, [pc, #8]	; (35f0 <rtos_dma_wait_until_end_callback+0x14>)
    35e6:	233f      	movs	r3, #63	; 0x3f
    35e8:	54d1      	strb	r1, [r2, r3]
}
    35ea:	4770      	bx	lr
    35ec:	2000056c 	.word	0x2000056c
    35f0:	41004800 	.word	0x41004800

000035f4 <rtos_dma_wait_until_end>:

void rtos_dma_wait_until_end(int channel) {
    35f4:	b570      	push	{r4, r5, r6, lr}
    35f6:	b084      	sub	sp, #16
    35f8:	9003      	str	r0, [sp, #12]
	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    35fa:	4c08      	ldr	r4, [pc, #32]	; (361c <rtos_dma_wait_until_end+0x28>)
    35fc:	6823      	ldr	r3, [r4, #0]
    35fe:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    3600:	aa03      	add	r2, sp, #12
    3602:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    3604:	4b06      	ldr	r3, [pc, #24]	; (3620 <rtos_dma_wait_until_end+0x2c>)
    3606:	9300      	str	r3, [sp, #0]
    3608:	2300      	movs	r3, #0
    360a:	2202      	movs	r2, #2
    360c:	2102      	movs	r1, #2
    360e:	4805      	ldr	r0, [pc, #20]	; (3624 <rtos_dma_wait_until_end+0x30>)
    3610:	4e05      	ldr	r6, [pc, #20]	; (3628 <rtos_dma_wait_until_end+0x34>)
    3612:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_callback);
	current_process->data = data;
    3614:	6823      	ldr	r3, [r4, #0]
    3616:	621d      	str	r5, [r3, #32]
    3618:	b004      	add	sp, #16
    361a:	bd70      	pop	{r4, r5, r6, pc}
    361c:	2000056c 	.word	0x2000056c
    3620:	000035dd 	.word	0x000035dd
    3624:	4100484e 	.word	0x4100484e
    3628:	00002ba9 	.word	0x00002ba9

0000362c <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    362c:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    362e:	4b25      	ldr	r3, [pc, #148]	; (36c4 <usb_proc_loop+0x98>)
    3630:	2200      	movs	r2, #0
    3632:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    3634:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    3636:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    3638:	70da      	strb	r2, [r3, #3]
    363a:	e00f      	b.n	365c <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    363c:	4c21      	ldr	r4, [pc, #132]	; (36c4 <usb_proc_loop+0x98>)
    363e:	68e0      	ldr	r0, [r4, #12]
    3640:	18c0      	adds	r0, r0, r3
    3642:	4b21      	ldr	r3, [pc, #132]	; (36c8 <usb_proc_loop+0x9c>)
    3644:	4798      	blx	r3
    3646:	68a3      	ldr	r3, [r4, #8]
    3648:	181b      	adds	r3, r3, r0
    364a:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    364c:	4b1d      	ldr	r3, [pc, #116]	; (36c4 <usb_proc_loop+0x98>)
    364e:	78db      	ldrb	r3, [r3, #3]
    3650:	2b00      	cmp	r3, #0
    3652:	d003      	beq.n	365c <usb_proc_loop+0x30>
    3654:	4b1d      	ldr	r3, [pc, #116]	; (36cc <usb_proc_loop+0xa0>)
    3656:	681b      	ldr	r3, [r3, #0]
    3658:	2b00      	cmp	r3, #0
    365a:	d11f      	bne.n	369c <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    365c:	4c19      	ldr	r4, [pc, #100]	; (36c4 <usb_proc_loop+0x98>)
    365e:	2301      	movs	r3, #1
    3660:	22ff      	movs	r2, #255	; 0xff
    3662:	2100      	movs	r1, #0
    3664:	0020      	movs	r0, r4
    3666:	4d1a      	ldr	r5, [pc, #104]	; (36d0 <usb_proc_loop+0xa4>)
    3668:	47a8      	blx	r5
		usb_interrupt = false;
    366a:	2300      	movs	r3, #0
    366c:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    366e:	7863      	ldrb	r3, [r4, #1]
    3670:	2b00      	cmp	r3, #0
    3672:	d125      	bne.n	36c0 <usb_proc_loop+0x94>
		usb_handle_function();
    3674:	4b17      	ldr	r3, [pc, #92]	; (36d4 <usb_proc_loop+0xa8>)
    3676:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    3678:	4b12      	ldr	r3, [pc, #72]	; (36c4 <usb_proc_loop+0x98>)
    367a:	789b      	ldrb	r3, [r3, #2]
    367c:	2b00      	cmp	r3, #0
    367e:	d0e5      	beq.n	364c <usb_proc_loop+0x20>
    3680:	4b15      	ldr	r3, [pc, #84]	; (36d8 <usb_proc_loop+0xac>)
    3682:	781b      	ldrb	r3, [r3, #0]
    3684:	2b00      	cmp	r3, #0
    3686:	d1e1      	bne.n	364c <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    3688:	4b0e      	ldr	r3, [pc, #56]	; (36c4 <usb_proc_loop+0x98>)
    368a:	685a      	ldr	r2, [r3, #4]
    368c:	689b      	ldr	r3, [r3, #8]
    368e:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    3690:	429a      	cmp	r2, r3
    3692:	d1d3      	bne.n	363c <usb_proc_loop+0x10>
    3694:	4b0b      	ldr	r3, [pc, #44]	; (36c4 <usb_proc_loop+0x98>)
    3696:	2200      	movs	r2, #0
    3698:	709a      	strb	r2, [r3, #2]
    369a:	e7d7      	b.n	364c <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    369c:	4b0b      	ldr	r3, [pc, #44]	; (36cc <usb_proc_loop+0xa0>)
    369e:	6819      	ldr	r1, [r3, #0]
    36a0:	4c08      	ldr	r4, [pc, #32]	; (36c4 <usb_proc_loop+0x98>)
    36a2:	6920      	ldr	r0, [r4, #16]
    36a4:	6963      	ldr	r3, [r4, #20]
    36a6:	18c0      	adds	r0, r0, r3
    36a8:	4b0c      	ldr	r3, [pc, #48]	; (36dc <usb_proc_loop+0xb0>)
    36aa:	4798      	blx	r3
    36ac:	6963      	ldr	r3, [r4, #20]
    36ae:	18c0      	adds	r0, r0, r3
    36b0:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    36b2:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    36b4:	4298      	cmp	r0, r3
    36b6:	d1d1      	bne.n	365c <usb_proc_loop+0x30>
    36b8:	4b02      	ldr	r3, [pc, #8]	; (36c4 <usb_proc_loop+0x98>)
    36ba:	2200      	movs	r2, #0
    36bc:	70da      	strb	r2, [r3, #3]
    36be:	e7cd      	b.n	365c <usb_proc_loop+0x30>
		}
	}
}
    36c0:	bd70      	pop	{r4, r5, r6, pc}
    36c2:	46c0      	nop			; (mov r8, r8)
    36c4:	200005e0 	.word	0x200005e0
    36c8:	00002455 	.word	0x00002455
    36cc:	20000498 	.word	0x20000498
    36d0:	00002b4d 	.word	0x00002b4d
    36d4:	000022c1 	.word	0x000022c1
    36d8:	20000494 	.word	0x20000494
    36dc:	00002491 	.word	0x00002491

000036e0 <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    36e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36e2:	46ce      	mov	lr, r9
    36e4:	4647      	mov	r7, r8
    36e6:	b580      	push	{r7, lr}
    36e8:	0006      	movs	r6, r0
    36ea:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36ec:	4f15      	ldr	r7, [pc, #84]	; (3744 <rtos_usb_init+0x64>)
    36ee:	2580      	movs	r5, #128	; 0x80
    36f0:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    36f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36f6:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    36fa:	22c0      	movs	r2, #192	; 0xc0
    36fc:	0492      	lsls	r2, r2, #18
    36fe:	2106      	movs	r1, #6
    3700:	2000      	movs	r0, #0
    3702:	4b11      	ldr	r3, [pc, #68]	; (3748 <rtos_usb_init+0x68>)
    3704:	4798      	blx	r3
	usb_init();
    3706:	4b11      	ldr	r3, [pc, #68]	; (374c <rtos_usb_init+0x6c>)
    3708:	4798      	blx	r3
	usb_attach();
    370a:	4b11      	ldr	r3, [pc, #68]	; (3750 <rtos_usb_init+0x70>)
    370c:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    370e:	4911      	ldr	r1, [pc, #68]	; (3754 <rtos_usb_init+0x74>)
    3710:	4c11      	ldr	r4, [pc, #68]	; (3758 <rtos_usb_init+0x78>)
    3712:	231c      	movs	r3, #28
    3714:	4699      	mov	r9, r3
    3716:	44a1      	add	r9, r4
    3718:	4643      	mov	r3, r8
    371a:	0032      	movs	r2, r6
    371c:	4648      	mov	r0, r9
    371e:	4e0f      	ldr	r6, [pc, #60]	; (375c <rtos_usb_init+0x7c>)
    3720:	47b0      	blx	r6
	dispatch_process(&usbproc);
    3722:	4648      	mov	r0, r9
    3724:	4b0e      	ldr	r3, [pc, #56]	; (3760 <rtos_usb_init+0x80>)
    3726:	4798      	blx	r3
	wait_until_started(&usbproc);
    3728:	2201      	movs	r2, #1
    372a:	0020      	movs	r0, r4
    372c:	3034      	adds	r0, #52	; 0x34
    372e:	2301      	movs	r3, #1
    3730:	4252      	negs	r2, r2
    3732:	2100      	movs	r1, #0
    3734:	4c0b      	ldr	r4, [pc, #44]	; (3764 <rtos_usb_init+0x84>)
    3736:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3738:	603d      	str	r5, [r7, #0]
}
    373a:	bcc0      	pop	{r6, r7}
    373c:	46b9      	mov	r9, r7
    373e:	46b0      	mov	r8, r6
    3740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	e000e100 	.word	0xe000e100
    3748:	00001505 	.word	0x00001505
    374c:	00001f05 	.word	0x00001f05
    3750:	00002265 	.word	0x00002265
    3754:	0000362d 	.word	0x0000362d
    3758:	200005e0 	.word	0x200005e0
    375c:	000027e1 	.word	0x000027e1
    3760:	000028c9 	.word	0x000028c9
    3764:	00002b4d 	.word	0x00002b4d

00003768 <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3768:	2380      	movs	r3, #128	; 0x80
    376a:	4a05      	ldr	r2, [pc, #20]	; (3780 <USB_Handler+0x18>)
    376c:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    376e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3772:	f3bf 8f6f 	isb	sy

void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);
	
	usb_interrupt = true;
    3776:	4b03      	ldr	r3, [pc, #12]	; (3784 <USB_Handler+0x1c>)
    3778:	2201      	movs	r2, #1
    377a:	701a      	strb	r2, [r3, #0]
}
    377c:	4770      	bx	lr
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	e000e100 	.word	0xe000e100
    3784:	200005e0 	.word	0x200005e0

00003788 <__aeabi_cfrcmple>:
    3788:	4684      	mov	ip, r0
    378a:	0008      	movs	r0, r1
    378c:	4661      	mov	r1, ip
    378e:	e7ff      	b.n	3790 <__aeabi_cfcmpeq>

00003790 <__aeabi_cfcmpeq>:
    3790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3792:	f000 fb65 	bl	3e60 <__lesf2>
    3796:	2800      	cmp	r0, #0
    3798:	d401      	bmi.n	379e <__aeabi_cfcmpeq+0xe>
    379a:	2100      	movs	r1, #0
    379c:	42c8      	cmn	r0, r1
    379e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000037a0 <__aeabi_fcmpeq>:
    37a0:	b510      	push	{r4, lr}
    37a2:	f000 fae5 	bl	3d70 <__eqsf2>
    37a6:	4240      	negs	r0, r0
    37a8:	3001      	adds	r0, #1
    37aa:	bd10      	pop	{r4, pc}

000037ac <__aeabi_fcmplt>:
    37ac:	b510      	push	{r4, lr}
    37ae:	f000 fb57 	bl	3e60 <__lesf2>
    37b2:	2800      	cmp	r0, #0
    37b4:	db01      	blt.n	37ba <__aeabi_fcmplt+0xe>
    37b6:	2000      	movs	r0, #0
    37b8:	bd10      	pop	{r4, pc}
    37ba:	2001      	movs	r0, #1
    37bc:	bd10      	pop	{r4, pc}
    37be:	46c0      	nop			; (mov r8, r8)

000037c0 <__aeabi_fcmple>:
    37c0:	b510      	push	{r4, lr}
    37c2:	f000 fb4d 	bl	3e60 <__lesf2>
    37c6:	2800      	cmp	r0, #0
    37c8:	dd01      	ble.n	37ce <__aeabi_fcmple+0xe>
    37ca:	2000      	movs	r0, #0
    37cc:	bd10      	pop	{r4, pc}
    37ce:	2001      	movs	r0, #1
    37d0:	bd10      	pop	{r4, pc}
    37d2:	46c0      	nop			; (mov r8, r8)

000037d4 <__aeabi_fcmpgt>:
    37d4:	b510      	push	{r4, lr}
    37d6:	f000 faf3 	bl	3dc0 <__gesf2>
    37da:	2800      	cmp	r0, #0
    37dc:	dc01      	bgt.n	37e2 <__aeabi_fcmpgt+0xe>
    37de:	2000      	movs	r0, #0
    37e0:	bd10      	pop	{r4, pc}
    37e2:	2001      	movs	r0, #1
    37e4:	bd10      	pop	{r4, pc}
    37e6:	46c0      	nop			; (mov r8, r8)

000037e8 <__aeabi_fcmpge>:
    37e8:	b510      	push	{r4, lr}
    37ea:	f000 fae9 	bl	3dc0 <__gesf2>
    37ee:	2800      	cmp	r0, #0
    37f0:	da01      	bge.n	37f6 <__aeabi_fcmpge+0xe>
    37f2:	2000      	movs	r0, #0
    37f4:	bd10      	pop	{r4, pc}
    37f6:	2001      	movs	r0, #1
    37f8:	bd10      	pop	{r4, pc}
    37fa:	46c0      	nop			; (mov r8, r8)

000037fc <__aeabi_f2uiz>:
    37fc:	219e      	movs	r1, #158	; 0x9e
    37fe:	b510      	push	{r4, lr}
    3800:	05c9      	lsls	r1, r1, #23
    3802:	1c04      	adds	r4, r0, #0
    3804:	f7ff fff0 	bl	37e8 <__aeabi_fcmpge>
    3808:	2800      	cmp	r0, #0
    380a:	d103      	bne.n	3814 <__aeabi_f2uiz+0x18>
    380c:	1c20      	adds	r0, r4, #0
    380e:	f000 fe45 	bl	449c <__aeabi_f2iz>
    3812:	bd10      	pop	{r4, pc}
    3814:	219e      	movs	r1, #158	; 0x9e
    3816:	1c20      	adds	r0, r4, #0
    3818:	05c9      	lsls	r1, r1, #23
    381a:	f000 fcad 	bl	4178 <__aeabi_fsub>
    381e:	f000 fe3d 	bl	449c <__aeabi_f2iz>
    3822:	2380      	movs	r3, #128	; 0x80
    3824:	061b      	lsls	r3, r3, #24
    3826:	469c      	mov	ip, r3
    3828:	4460      	add	r0, ip
    382a:	e7f2      	b.n	3812 <__aeabi_f2uiz+0x16>

0000382c <__aeabi_fadd>:
    382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    382e:	0243      	lsls	r3, r0, #9
    3830:	0045      	lsls	r5, r0, #1
    3832:	0fc4      	lsrs	r4, r0, #31
    3834:	0248      	lsls	r0, r1, #9
    3836:	0a42      	lsrs	r2, r0, #9
    3838:	4694      	mov	ip, r2
    383a:	004a      	lsls	r2, r1, #1
    383c:	0a5f      	lsrs	r7, r3, #9
    383e:	0e2d      	lsrs	r5, r5, #24
    3840:	099b      	lsrs	r3, r3, #6
    3842:	0e12      	lsrs	r2, r2, #24
    3844:	0fc9      	lsrs	r1, r1, #31
    3846:	0980      	lsrs	r0, r0, #6
    3848:	428c      	cmp	r4, r1
    384a:	d022      	beq.n	3892 <__aeabi_fadd+0x66>
    384c:	1aae      	subs	r6, r5, r2
    384e:	2e00      	cmp	r6, #0
    3850:	dd0d      	ble.n	386e <__aeabi_fadd+0x42>
    3852:	2a00      	cmp	r2, #0
    3854:	d12d      	bne.n	38b2 <__aeabi_fadd+0x86>
    3856:	2800      	cmp	r0, #0
    3858:	d100      	bne.n	385c <__aeabi_fadd+0x30>
    385a:	e083      	b.n	3964 <__aeabi_fadd+0x138>
    385c:	1e72      	subs	r2, r6, #1
    385e:	2e01      	cmp	r6, #1
    3860:	d100      	bne.n	3864 <__aeabi_fadd+0x38>
    3862:	e11b      	b.n	3a9c <__aeabi_fadd+0x270>
    3864:	2eff      	cmp	r6, #255	; 0xff
    3866:	d100      	bne.n	386a <__aeabi_fadd+0x3e>
    3868:	e0a2      	b.n	39b0 <__aeabi_fadd+0x184>
    386a:	0016      	movs	r6, r2
    386c:	e027      	b.n	38be <__aeabi_fadd+0x92>
    386e:	2e00      	cmp	r6, #0
    3870:	d048      	beq.n	3904 <__aeabi_fadd+0xd8>
    3872:	1b56      	subs	r6, r2, r5
    3874:	2d00      	cmp	r5, #0
    3876:	d000      	beq.n	387a <__aeabi_fadd+0x4e>
    3878:	e0c1      	b.n	39fe <__aeabi_fadd+0x1d2>
    387a:	2b00      	cmp	r3, #0
    387c:	d100      	bne.n	3880 <__aeabi_fadd+0x54>
    387e:	e0f7      	b.n	3a70 <__aeabi_fadd+0x244>
    3880:	1e74      	subs	r4, r6, #1
    3882:	2e01      	cmp	r6, #1
    3884:	d100      	bne.n	3888 <__aeabi_fadd+0x5c>
    3886:	e12d      	b.n	3ae4 <__aeabi_fadd+0x2b8>
    3888:	2eff      	cmp	r6, #255	; 0xff
    388a:	d100      	bne.n	388e <__aeabi_fadd+0x62>
    388c:	e08e      	b.n	39ac <__aeabi_fadd+0x180>
    388e:	0026      	movs	r6, r4
    3890:	e0ba      	b.n	3a08 <__aeabi_fadd+0x1dc>
    3892:	1aa9      	subs	r1, r5, r2
    3894:	2900      	cmp	r1, #0
    3896:	dc00      	bgt.n	389a <__aeabi_fadd+0x6e>
    3898:	e08c      	b.n	39b4 <__aeabi_fadd+0x188>
    389a:	2a00      	cmp	r2, #0
    389c:	d046      	beq.n	392c <__aeabi_fadd+0x100>
    389e:	2dff      	cmp	r5, #255	; 0xff
    38a0:	d100      	bne.n	38a4 <__aeabi_fadd+0x78>
    38a2:	e085      	b.n	39b0 <__aeabi_fadd+0x184>
    38a4:	2280      	movs	r2, #128	; 0x80
    38a6:	04d2      	lsls	r2, r2, #19
    38a8:	4310      	orrs	r0, r2
    38aa:	291b      	cmp	r1, #27
    38ac:	dd49      	ble.n	3942 <__aeabi_fadd+0x116>
    38ae:	3301      	adds	r3, #1
    38b0:	e016      	b.n	38e0 <__aeabi_fadd+0xb4>
    38b2:	2dff      	cmp	r5, #255	; 0xff
    38b4:	d100      	bne.n	38b8 <__aeabi_fadd+0x8c>
    38b6:	e07b      	b.n	39b0 <__aeabi_fadd+0x184>
    38b8:	2280      	movs	r2, #128	; 0x80
    38ba:	04d2      	lsls	r2, r2, #19
    38bc:	4310      	orrs	r0, r2
    38be:	2201      	movs	r2, #1
    38c0:	2e1b      	cmp	r6, #27
    38c2:	dc07      	bgt.n	38d4 <__aeabi_fadd+0xa8>
    38c4:	2120      	movs	r1, #32
    38c6:	1b89      	subs	r1, r1, r6
    38c8:	0002      	movs	r2, r0
    38ca:	4088      	lsls	r0, r1
    38cc:	40f2      	lsrs	r2, r6
    38ce:	1e41      	subs	r1, r0, #1
    38d0:	4188      	sbcs	r0, r1
    38d2:	4302      	orrs	r2, r0
    38d4:	1a9b      	subs	r3, r3, r2
    38d6:	015a      	lsls	r2, r3, #5
    38d8:	d451      	bmi.n	397e <__aeabi_fadd+0x152>
    38da:	2207      	movs	r2, #7
    38dc:	401a      	ands	r2, r3
    38de:	d042      	beq.n	3966 <__aeabi_fadd+0x13a>
    38e0:	220f      	movs	r2, #15
    38e2:	401a      	ands	r2, r3
    38e4:	2a04      	cmp	r2, #4
    38e6:	d000      	beq.n	38ea <__aeabi_fadd+0xbe>
    38e8:	3304      	adds	r3, #4
    38ea:	015a      	lsls	r2, r3, #5
    38ec:	d53b      	bpl.n	3966 <__aeabi_fadd+0x13a>
    38ee:	1c68      	adds	r0, r5, #1
    38f0:	2dfe      	cmp	r5, #254	; 0xfe
    38f2:	d034      	beq.n	395e <__aeabi_fadd+0x132>
    38f4:	019b      	lsls	r3, r3, #6
    38f6:	0a5b      	lsrs	r3, r3, #9
    38f8:	b2c0      	uxtb	r0, r0
    38fa:	05c0      	lsls	r0, r0, #23
    38fc:	4318      	orrs	r0, r3
    38fe:	07e4      	lsls	r4, r4, #31
    3900:	4320      	orrs	r0, r4
    3902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3904:	26fe      	movs	r6, #254	; 0xfe
    3906:	1c6a      	adds	r2, r5, #1
    3908:	4216      	tst	r6, r2
    390a:	d000      	beq.n	390e <__aeabi_fadd+0xe2>
    390c:	e08b      	b.n	3a26 <__aeabi_fadd+0x1fa>
    390e:	2d00      	cmp	r5, #0
    3910:	d000      	beq.n	3914 <__aeabi_fadd+0xe8>
    3912:	e0b1      	b.n	3a78 <__aeabi_fadd+0x24c>
    3914:	2b00      	cmp	r3, #0
    3916:	d100      	bne.n	391a <__aeabi_fadd+0xee>
    3918:	e0df      	b.n	3ada <__aeabi_fadd+0x2ae>
    391a:	2800      	cmp	r0, #0
    391c:	d069      	beq.n	39f2 <__aeabi_fadd+0x1c6>
    391e:	1a1a      	subs	r2, r3, r0
    3920:	0156      	lsls	r6, r2, #5
    3922:	d400      	bmi.n	3926 <__aeabi_fadd+0xfa>
    3924:	e0fb      	b.n	3b1e <__aeabi_fadd+0x2f2>
    3926:	000c      	movs	r4, r1
    3928:	1ac3      	subs	r3, r0, r3
    392a:	e03c      	b.n	39a6 <__aeabi_fadd+0x17a>
    392c:	2800      	cmp	r0, #0
    392e:	d100      	bne.n	3932 <__aeabi_fadd+0x106>
    3930:	e0b7      	b.n	3aa2 <__aeabi_fadd+0x276>
    3932:	1e4a      	subs	r2, r1, #1
    3934:	2901      	cmp	r1, #1
    3936:	d100      	bne.n	393a <__aeabi_fadd+0x10e>
    3938:	e0aa      	b.n	3a90 <__aeabi_fadd+0x264>
    393a:	29ff      	cmp	r1, #255	; 0xff
    393c:	d038      	beq.n	39b0 <__aeabi_fadd+0x184>
    393e:	0011      	movs	r1, r2
    3940:	e7b3      	b.n	38aa <__aeabi_fadd+0x7e>
    3942:	0002      	movs	r2, r0
    3944:	2620      	movs	r6, #32
    3946:	40ca      	lsrs	r2, r1
    3948:	1a71      	subs	r1, r6, r1
    394a:	4088      	lsls	r0, r1
    394c:	1e41      	subs	r1, r0, #1
    394e:	4188      	sbcs	r0, r1
    3950:	4310      	orrs	r0, r2
    3952:	181b      	adds	r3, r3, r0
    3954:	015a      	lsls	r2, r3, #5
    3956:	d5c0      	bpl.n	38da <__aeabi_fadd+0xae>
    3958:	3501      	adds	r5, #1
    395a:	2dff      	cmp	r5, #255	; 0xff
    395c:	d16c      	bne.n	3a38 <__aeabi_fadd+0x20c>
    395e:	20ff      	movs	r0, #255	; 0xff
    3960:	2300      	movs	r3, #0
    3962:	e7ca      	b.n	38fa <__aeabi_fadd+0xce>
    3964:	0035      	movs	r5, r6
    3966:	08db      	lsrs	r3, r3, #3
    3968:	2dff      	cmp	r5, #255	; 0xff
    396a:	d144      	bne.n	39f6 <__aeabi_fadd+0x1ca>
    396c:	2b00      	cmp	r3, #0
    396e:	d0f6      	beq.n	395e <__aeabi_fadd+0x132>
    3970:	2280      	movs	r2, #128	; 0x80
    3972:	03d2      	lsls	r2, r2, #15
    3974:	4313      	orrs	r3, r2
    3976:	025b      	lsls	r3, r3, #9
    3978:	20ff      	movs	r0, #255	; 0xff
    397a:	0a5b      	lsrs	r3, r3, #9
    397c:	e7bd      	b.n	38fa <__aeabi_fadd+0xce>
    397e:	019e      	lsls	r6, r3, #6
    3980:	09b6      	lsrs	r6, r6, #6
    3982:	0030      	movs	r0, r6
    3984:	f000 fe38 	bl	45f8 <__clzsi2>
    3988:	3805      	subs	r0, #5
    398a:	4086      	lsls	r6, r0
    398c:	4285      	cmp	r5, r0
    398e:	dc20      	bgt.n	39d2 <__aeabi_fadd+0x1a6>
    3990:	2220      	movs	r2, #32
    3992:	1b40      	subs	r0, r0, r5
    3994:	3001      	adds	r0, #1
    3996:	1a12      	subs	r2, r2, r0
    3998:	0033      	movs	r3, r6
    399a:	4096      	lsls	r6, r2
    399c:	40c3      	lsrs	r3, r0
    399e:	1e72      	subs	r2, r6, #1
    39a0:	4196      	sbcs	r6, r2
    39a2:	2500      	movs	r5, #0
    39a4:	4333      	orrs	r3, r6
    39a6:	075a      	lsls	r2, r3, #29
    39a8:	d19a      	bne.n	38e0 <__aeabi_fadd+0xb4>
    39aa:	e79e      	b.n	38ea <__aeabi_fadd+0xbe>
    39ac:	000c      	movs	r4, r1
    39ae:	0003      	movs	r3, r0
    39b0:	08db      	lsrs	r3, r3, #3
    39b2:	e7db      	b.n	396c <__aeabi_fadd+0x140>
    39b4:	2900      	cmp	r1, #0
    39b6:	d010      	beq.n	39da <__aeabi_fadd+0x1ae>
    39b8:	1b51      	subs	r1, r2, r5
    39ba:	2d00      	cmp	r5, #0
    39bc:	d143      	bne.n	3a46 <__aeabi_fadd+0x21a>
    39be:	2b00      	cmp	r3, #0
    39c0:	d100      	bne.n	39c4 <__aeabi_fadd+0x198>
    39c2:	e093      	b.n	3aec <__aeabi_fadd+0x2c0>
    39c4:	1e4d      	subs	r5, r1, #1
    39c6:	2901      	cmp	r1, #1
    39c8:	d062      	beq.n	3a90 <__aeabi_fadd+0x264>
    39ca:	29ff      	cmp	r1, #255	; 0xff
    39cc:	d0ef      	beq.n	39ae <__aeabi_fadd+0x182>
    39ce:	0029      	movs	r1, r5
    39d0:	e03e      	b.n	3a50 <__aeabi_fadd+0x224>
    39d2:	4b55      	ldr	r3, [pc, #340]	; (3b28 <__aeabi_fadd+0x2fc>)
    39d4:	1a2d      	subs	r5, r5, r0
    39d6:	4033      	ands	r3, r6
    39d8:	e7e5      	b.n	39a6 <__aeabi_fadd+0x17a>
    39da:	21fe      	movs	r1, #254	; 0xfe
    39dc:	1c6a      	adds	r2, r5, #1
    39de:	4211      	tst	r1, r2
    39e0:	d13b      	bne.n	3a5a <__aeabi_fadd+0x22e>
    39e2:	2d00      	cmp	r5, #0
    39e4:	d16a      	bne.n	3abc <__aeabi_fadd+0x290>
    39e6:	2b00      	cmp	r3, #0
    39e8:	d100      	bne.n	39ec <__aeabi_fadd+0x1c0>
    39ea:	e08e      	b.n	3b0a <__aeabi_fadd+0x2de>
    39ec:	2800      	cmp	r0, #0
    39ee:	d000      	beq.n	39f2 <__aeabi_fadd+0x1c6>
    39f0:	e08d      	b.n	3b0e <__aeabi_fadd+0x2e2>
    39f2:	2500      	movs	r5, #0
    39f4:	08db      	lsrs	r3, r3, #3
    39f6:	025b      	lsls	r3, r3, #9
    39f8:	0a5b      	lsrs	r3, r3, #9
    39fa:	b2e8      	uxtb	r0, r5
    39fc:	e77d      	b.n	38fa <__aeabi_fadd+0xce>
    39fe:	2aff      	cmp	r2, #255	; 0xff
    3a00:	d0d4      	beq.n	39ac <__aeabi_fadd+0x180>
    3a02:	2480      	movs	r4, #128	; 0x80
    3a04:	04e4      	lsls	r4, r4, #19
    3a06:	4323      	orrs	r3, r4
    3a08:	2401      	movs	r4, #1
    3a0a:	2e1b      	cmp	r6, #27
    3a0c:	dc07      	bgt.n	3a1e <__aeabi_fadd+0x1f2>
    3a0e:	2520      	movs	r5, #32
    3a10:	1bad      	subs	r5, r5, r6
    3a12:	001c      	movs	r4, r3
    3a14:	40ab      	lsls	r3, r5
    3a16:	40f4      	lsrs	r4, r6
    3a18:	1e5d      	subs	r5, r3, #1
    3a1a:	41ab      	sbcs	r3, r5
    3a1c:	431c      	orrs	r4, r3
    3a1e:	1b03      	subs	r3, r0, r4
    3a20:	0015      	movs	r5, r2
    3a22:	000c      	movs	r4, r1
    3a24:	e757      	b.n	38d6 <__aeabi_fadd+0xaa>
    3a26:	1a1e      	subs	r6, r3, r0
    3a28:	0172      	lsls	r2, r6, #5
    3a2a:	d42e      	bmi.n	3a8a <__aeabi_fadd+0x25e>
    3a2c:	2e00      	cmp	r6, #0
    3a2e:	d1a8      	bne.n	3982 <__aeabi_fadd+0x156>
    3a30:	2400      	movs	r4, #0
    3a32:	2000      	movs	r0, #0
    3a34:	2300      	movs	r3, #0
    3a36:	e760      	b.n	38fa <__aeabi_fadd+0xce>
    3a38:	2201      	movs	r2, #1
    3a3a:	493c      	ldr	r1, [pc, #240]	; (3b2c <__aeabi_fadd+0x300>)
    3a3c:	401a      	ands	r2, r3
    3a3e:	085b      	lsrs	r3, r3, #1
    3a40:	400b      	ands	r3, r1
    3a42:	4313      	orrs	r3, r2
    3a44:	e7af      	b.n	39a6 <__aeabi_fadd+0x17a>
    3a46:	2aff      	cmp	r2, #255	; 0xff
    3a48:	d0b1      	beq.n	39ae <__aeabi_fadd+0x182>
    3a4a:	2580      	movs	r5, #128	; 0x80
    3a4c:	04ed      	lsls	r5, r5, #19
    3a4e:	432b      	orrs	r3, r5
    3a50:	291b      	cmp	r1, #27
    3a52:	dd28      	ble.n	3aa6 <__aeabi_fadd+0x27a>
    3a54:	0015      	movs	r5, r2
    3a56:	1c43      	adds	r3, r0, #1
    3a58:	e742      	b.n	38e0 <__aeabi_fadd+0xb4>
    3a5a:	2aff      	cmp	r2, #255	; 0xff
    3a5c:	d100      	bne.n	3a60 <__aeabi_fadd+0x234>
    3a5e:	e77e      	b.n	395e <__aeabi_fadd+0x132>
    3a60:	181b      	adds	r3, r3, r0
    3a62:	085b      	lsrs	r3, r3, #1
    3a64:	0015      	movs	r5, r2
    3a66:	075a      	lsls	r2, r3, #29
    3a68:	d000      	beq.n	3a6c <__aeabi_fadd+0x240>
    3a6a:	e739      	b.n	38e0 <__aeabi_fadd+0xb4>
    3a6c:	08db      	lsrs	r3, r3, #3
    3a6e:	e7c2      	b.n	39f6 <__aeabi_fadd+0x1ca>
    3a70:	000c      	movs	r4, r1
    3a72:	0035      	movs	r5, r6
    3a74:	0003      	movs	r3, r0
    3a76:	e776      	b.n	3966 <__aeabi_fadd+0x13a>
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d13a      	bne.n	3af2 <__aeabi_fadd+0x2c6>
    3a7c:	2800      	cmp	r0, #0
    3a7e:	d195      	bne.n	39ac <__aeabi_fadd+0x180>
    3a80:	2380      	movs	r3, #128	; 0x80
    3a82:	2400      	movs	r4, #0
    3a84:	20ff      	movs	r0, #255	; 0xff
    3a86:	03db      	lsls	r3, r3, #15
    3a88:	e737      	b.n	38fa <__aeabi_fadd+0xce>
    3a8a:	000c      	movs	r4, r1
    3a8c:	1ac6      	subs	r6, r0, r3
    3a8e:	e778      	b.n	3982 <__aeabi_fadd+0x156>
    3a90:	181b      	adds	r3, r3, r0
    3a92:	2502      	movs	r5, #2
    3a94:	015a      	lsls	r2, r3, #5
    3a96:	d4cf      	bmi.n	3a38 <__aeabi_fadd+0x20c>
    3a98:	3d01      	subs	r5, #1
    3a9a:	e71e      	b.n	38da <__aeabi_fadd+0xae>
    3a9c:	2501      	movs	r5, #1
    3a9e:	1a1b      	subs	r3, r3, r0
    3aa0:	e719      	b.n	38d6 <__aeabi_fadd+0xaa>
    3aa2:	000d      	movs	r5, r1
    3aa4:	e75f      	b.n	3966 <__aeabi_fadd+0x13a>
    3aa6:	001d      	movs	r5, r3
    3aa8:	2620      	movs	r6, #32
    3aaa:	40cd      	lsrs	r5, r1
    3aac:	1a71      	subs	r1, r6, r1
    3aae:	408b      	lsls	r3, r1
    3ab0:	1e59      	subs	r1, r3, #1
    3ab2:	418b      	sbcs	r3, r1
    3ab4:	432b      	orrs	r3, r5
    3ab6:	181b      	adds	r3, r3, r0
    3ab8:	0015      	movs	r5, r2
    3aba:	e74b      	b.n	3954 <__aeabi_fadd+0x128>
    3abc:	2b00      	cmp	r3, #0
    3abe:	d100      	bne.n	3ac2 <__aeabi_fadd+0x296>
    3ac0:	e775      	b.n	39ae <__aeabi_fadd+0x182>
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d100      	bne.n	3ac8 <__aeabi_fadd+0x29c>
    3ac6:	e773      	b.n	39b0 <__aeabi_fadd+0x184>
    3ac8:	2280      	movs	r2, #128	; 0x80
    3aca:	03d2      	lsls	r2, r2, #15
    3acc:	4297      	cmp	r7, r2
    3ace:	d302      	bcc.n	3ad6 <__aeabi_fadd+0x2aa>
    3ad0:	4594      	cmp	ip, r2
    3ad2:	d200      	bcs.n	3ad6 <__aeabi_fadd+0x2aa>
    3ad4:	0003      	movs	r3, r0
    3ad6:	08db      	lsrs	r3, r3, #3
    3ad8:	e74a      	b.n	3970 <__aeabi_fadd+0x144>
    3ada:	2800      	cmp	r0, #0
    3adc:	d0a8      	beq.n	3a30 <__aeabi_fadd+0x204>
    3ade:	000c      	movs	r4, r1
    3ae0:	0003      	movs	r3, r0
    3ae2:	e786      	b.n	39f2 <__aeabi_fadd+0x1c6>
    3ae4:	000c      	movs	r4, r1
    3ae6:	1ac3      	subs	r3, r0, r3
    3ae8:	3501      	adds	r5, #1
    3aea:	e6f4      	b.n	38d6 <__aeabi_fadd+0xaa>
    3aec:	000d      	movs	r5, r1
    3aee:	0003      	movs	r3, r0
    3af0:	e739      	b.n	3966 <__aeabi_fadd+0x13a>
    3af2:	2800      	cmp	r0, #0
    3af4:	d100      	bne.n	3af8 <__aeabi_fadd+0x2cc>
    3af6:	e75b      	b.n	39b0 <__aeabi_fadd+0x184>
    3af8:	2280      	movs	r2, #128	; 0x80
    3afa:	03d2      	lsls	r2, r2, #15
    3afc:	4297      	cmp	r7, r2
    3afe:	d3ea      	bcc.n	3ad6 <__aeabi_fadd+0x2aa>
    3b00:	4594      	cmp	ip, r2
    3b02:	d2e8      	bcs.n	3ad6 <__aeabi_fadd+0x2aa>
    3b04:	000c      	movs	r4, r1
    3b06:	0003      	movs	r3, r0
    3b08:	e7e5      	b.n	3ad6 <__aeabi_fadd+0x2aa>
    3b0a:	0003      	movs	r3, r0
    3b0c:	e771      	b.n	39f2 <__aeabi_fadd+0x1c6>
    3b0e:	181b      	adds	r3, r3, r0
    3b10:	015a      	lsls	r2, r3, #5
    3b12:	d5ab      	bpl.n	3a6c <__aeabi_fadd+0x240>
    3b14:	4a04      	ldr	r2, [pc, #16]	; (3b28 <__aeabi_fadd+0x2fc>)
    3b16:	3501      	adds	r5, #1
    3b18:	4013      	ands	r3, r2
    3b1a:	08db      	lsrs	r3, r3, #3
    3b1c:	e76b      	b.n	39f6 <__aeabi_fadd+0x1ca>
    3b1e:	1e13      	subs	r3, r2, #0
    3b20:	d086      	beq.n	3a30 <__aeabi_fadd+0x204>
    3b22:	08db      	lsrs	r3, r3, #3
    3b24:	e767      	b.n	39f6 <__aeabi_fadd+0x1ca>
    3b26:	46c0      	nop			; (mov r8, r8)
    3b28:	fbffffff 	.word	0xfbffffff
    3b2c:	7dffffff 	.word	0x7dffffff

00003b30 <__aeabi_fdiv>:
    3b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b32:	464f      	mov	r7, r9
    3b34:	4646      	mov	r6, r8
    3b36:	46d6      	mov	lr, sl
    3b38:	0244      	lsls	r4, r0, #9
    3b3a:	b5c0      	push	{r6, r7, lr}
    3b3c:	0047      	lsls	r7, r0, #1
    3b3e:	1c0e      	adds	r6, r1, #0
    3b40:	0a64      	lsrs	r4, r4, #9
    3b42:	0e3f      	lsrs	r7, r7, #24
    3b44:	0fc5      	lsrs	r5, r0, #31
    3b46:	2f00      	cmp	r7, #0
    3b48:	d03c      	beq.n	3bc4 <__aeabi_fdiv+0x94>
    3b4a:	2fff      	cmp	r7, #255	; 0xff
    3b4c:	d042      	beq.n	3bd4 <__aeabi_fdiv+0xa4>
    3b4e:	2300      	movs	r3, #0
    3b50:	2280      	movs	r2, #128	; 0x80
    3b52:	4699      	mov	r9, r3
    3b54:	469a      	mov	sl, r3
    3b56:	00e4      	lsls	r4, r4, #3
    3b58:	04d2      	lsls	r2, r2, #19
    3b5a:	4314      	orrs	r4, r2
    3b5c:	3f7f      	subs	r7, #127	; 0x7f
    3b5e:	0273      	lsls	r3, r6, #9
    3b60:	0a5b      	lsrs	r3, r3, #9
    3b62:	4698      	mov	r8, r3
    3b64:	0073      	lsls	r3, r6, #1
    3b66:	0e1b      	lsrs	r3, r3, #24
    3b68:	0ff6      	lsrs	r6, r6, #31
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d01b      	beq.n	3ba6 <__aeabi_fdiv+0x76>
    3b6e:	2bff      	cmp	r3, #255	; 0xff
    3b70:	d013      	beq.n	3b9a <__aeabi_fdiv+0x6a>
    3b72:	4642      	mov	r2, r8
    3b74:	2180      	movs	r1, #128	; 0x80
    3b76:	00d2      	lsls	r2, r2, #3
    3b78:	04c9      	lsls	r1, r1, #19
    3b7a:	4311      	orrs	r1, r2
    3b7c:	4688      	mov	r8, r1
    3b7e:	2000      	movs	r0, #0
    3b80:	3b7f      	subs	r3, #127	; 0x7f
    3b82:	0029      	movs	r1, r5
    3b84:	1aff      	subs	r7, r7, r3
    3b86:	464b      	mov	r3, r9
    3b88:	4071      	eors	r1, r6
    3b8a:	b2c9      	uxtb	r1, r1
    3b8c:	2b0f      	cmp	r3, #15
    3b8e:	d900      	bls.n	3b92 <__aeabi_fdiv+0x62>
    3b90:	e0b5      	b.n	3cfe <__aeabi_fdiv+0x1ce>
    3b92:	4a74      	ldr	r2, [pc, #464]	; (3d64 <__aeabi_fdiv+0x234>)
    3b94:	009b      	lsls	r3, r3, #2
    3b96:	58d3      	ldr	r3, [r2, r3]
    3b98:	469f      	mov	pc, r3
    3b9a:	4643      	mov	r3, r8
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d13f      	bne.n	3c20 <__aeabi_fdiv+0xf0>
    3ba0:	3fff      	subs	r7, #255	; 0xff
    3ba2:	3302      	adds	r3, #2
    3ba4:	e003      	b.n	3bae <__aeabi_fdiv+0x7e>
    3ba6:	4643      	mov	r3, r8
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d12d      	bne.n	3c08 <__aeabi_fdiv+0xd8>
    3bac:	2301      	movs	r3, #1
    3bae:	0029      	movs	r1, r5
    3bb0:	464a      	mov	r2, r9
    3bb2:	4071      	eors	r1, r6
    3bb4:	b2c9      	uxtb	r1, r1
    3bb6:	431a      	orrs	r2, r3
    3bb8:	2a0e      	cmp	r2, #14
    3bba:	d838      	bhi.n	3c2e <__aeabi_fdiv+0xfe>
    3bbc:	486a      	ldr	r0, [pc, #424]	; (3d68 <__aeabi_fdiv+0x238>)
    3bbe:	0092      	lsls	r2, r2, #2
    3bc0:	5882      	ldr	r2, [r0, r2]
    3bc2:	4697      	mov	pc, r2
    3bc4:	2c00      	cmp	r4, #0
    3bc6:	d113      	bne.n	3bf0 <__aeabi_fdiv+0xc0>
    3bc8:	2304      	movs	r3, #4
    3bca:	4699      	mov	r9, r3
    3bcc:	3b03      	subs	r3, #3
    3bce:	2700      	movs	r7, #0
    3bd0:	469a      	mov	sl, r3
    3bd2:	e7c4      	b.n	3b5e <__aeabi_fdiv+0x2e>
    3bd4:	2c00      	cmp	r4, #0
    3bd6:	d105      	bne.n	3be4 <__aeabi_fdiv+0xb4>
    3bd8:	2308      	movs	r3, #8
    3bda:	4699      	mov	r9, r3
    3bdc:	3b06      	subs	r3, #6
    3bde:	27ff      	movs	r7, #255	; 0xff
    3be0:	469a      	mov	sl, r3
    3be2:	e7bc      	b.n	3b5e <__aeabi_fdiv+0x2e>
    3be4:	230c      	movs	r3, #12
    3be6:	4699      	mov	r9, r3
    3be8:	3b09      	subs	r3, #9
    3bea:	27ff      	movs	r7, #255	; 0xff
    3bec:	469a      	mov	sl, r3
    3bee:	e7b6      	b.n	3b5e <__aeabi_fdiv+0x2e>
    3bf0:	0020      	movs	r0, r4
    3bf2:	f000 fd01 	bl	45f8 <__clzsi2>
    3bf6:	2776      	movs	r7, #118	; 0x76
    3bf8:	1f43      	subs	r3, r0, #5
    3bfa:	409c      	lsls	r4, r3
    3bfc:	2300      	movs	r3, #0
    3bfe:	427f      	negs	r7, r7
    3c00:	4699      	mov	r9, r3
    3c02:	469a      	mov	sl, r3
    3c04:	1a3f      	subs	r7, r7, r0
    3c06:	e7aa      	b.n	3b5e <__aeabi_fdiv+0x2e>
    3c08:	4640      	mov	r0, r8
    3c0a:	f000 fcf5 	bl	45f8 <__clzsi2>
    3c0e:	4642      	mov	r2, r8
    3c10:	1f43      	subs	r3, r0, #5
    3c12:	409a      	lsls	r2, r3
    3c14:	2376      	movs	r3, #118	; 0x76
    3c16:	425b      	negs	r3, r3
    3c18:	1a1b      	subs	r3, r3, r0
    3c1a:	4690      	mov	r8, r2
    3c1c:	2000      	movs	r0, #0
    3c1e:	e7b0      	b.n	3b82 <__aeabi_fdiv+0x52>
    3c20:	2303      	movs	r3, #3
    3c22:	464a      	mov	r2, r9
    3c24:	431a      	orrs	r2, r3
    3c26:	4691      	mov	r9, r2
    3c28:	2003      	movs	r0, #3
    3c2a:	33fc      	adds	r3, #252	; 0xfc
    3c2c:	e7a9      	b.n	3b82 <__aeabi_fdiv+0x52>
    3c2e:	000d      	movs	r5, r1
    3c30:	20ff      	movs	r0, #255	; 0xff
    3c32:	2200      	movs	r2, #0
    3c34:	05c0      	lsls	r0, r0, #23
    3c36:	07ed      	lsls	r5, r5, #31
    3c38:	4310      	orrs	r0, r2
    3c3a:	4328      	orrs	r0, r5
    3c3c:	bce0      	pop	{r5, r6, r7}
    3c3e:	46ba      	mov	sl, r7
    3c40:	46b1      	mov	r9, r6
    3c42:	46a8      	mov	r8, r5
    3c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c46:	000d      	movs	r5, r1
    3c48:	2000      	movs	r0, #0
    3c4a:	2200      	movs	r2, #0
    3c4c:	e7f2      	b.n	3c34 <__aeabi_fdiv+0x104>
    3c4e:	4653      	mov	r3, sl
    3c50:	2b02      	cmp	r3, #2
    3c52:	d0ed      	beq.n	3c30 <__aeabi_fdiv+0x100>
    3c54:	2b03      	cmp	r3, #3
    3c56:	d033      	beq.n	3cc0 <__aeabi_fdiv+0x190>
    3c58:	46a0      	mov	r8, r4
    3c5a:	2b01      	cmp	r3, #1
    3c5c:	d105      	bne.n	3c6a <__aeabi_fdiv+0x13a>
    3c5e:	2000      	movs	r0, #0
    3c60:	2200      	movs	r2, #0
    3c62:	e7e7      	b.n	3c34 <__aeabi_fdiv+0x104>
    3c64:	0035      	movs	r5, r6
    3c66:	2803      	cmp	r0, #3
    3c68:	d07a      	beq.n	3d60 <__aeabi_fdiv+0x230>
    3c6a:	003b      	movs	r3, r7
    3c6c:	337f      	adds	r3, #127	; 0x7f
    3c6e:	2b00      	cmp	r3, #0
    3c70:	dd2d      	ble.n	3cce <__aeabi_fdiv+0x19e>
    3c72:	4642      	mov	r2, r8
    3c74:	0752      	lsls	r2, r2, #29
    3c76:	d007      	beq.n	3c88 <__aeabi_fdiv+0x158>
    3c78:	220f      	movs	r2, #15
    3c7a:	4641      	mov	r1, r8
    3c7c:	400a      	ands	r2, r1
    3c7e:	2a04      	cmp	r2, #4
    3c80:	d002      	beq.n	3c88 <__aeabi_fdiv+0x158>
    3c82:	2204      	movs	r2, #4
    3c84:	4694      	mov	ip, r2
    3c86:	44e0      	add	r8, ip
    3c88:	4642      	mov	r2, r8
    3c8a:	0112      	lsls	r2, r2, #4
    3c8c:	d505      	bpl.n	3c9a <__aeabi_fdiv+0x16a>
    3c8e:	4642      	mov	r2, r8
    3c90:	4b36      	ldr	r3, [pc, #216]	; (3d6c <__aeabi_fdiv+0x23c>)
    3c92:	401a      	ands	r2, r3
    3c94:	003b      	movs	r3, r7
    3c96:	4690      	mov	r8, r2
    3c98:	3380      	adds	r3, #128	; 0x80
    3c9a:	2bfe      	cmp	r3, #254	; 0xfe
    3c9c:	dcc8      	bgt.n	3c30 <__aeabi_fdiv+0x100>
    3c9e:	4642      	mov	r2, r8
    3ca0:	0192      	lsls	r2, r2, #6
    3ca2:	0a52      	lsrs	r2, r2, #9
    3ca4:	b2d8      	uxtb	r0, r3
    3ca6:	e7c5      	b.n	3c34 <__aeabi_fdiv+0x104>
    3ca8:	2280      	movs	r2, #128	; 0x80
    3caa:	2500      	movs	r5, #0
    3cac:	20ff      	movs	r0, #255	; 0xff
    3cae:	03d2      	lsls	r2, r2, #15
    3cb0:	e7c0      	b.n	3c34 <__aeabi_fdiv+0x104>
    3cb2:	2280      	movs	r2, #128	; 0x80
    3cb4:	03d2      	lsls	r2, r2, #15
    3cb6:	4214      	tst	r4, r2
    3cb8:	d002      	beq.n	3cc0 <__aeabi_fdiv+0x190>
    3cba:	4643      	mov	r3, r8
    3cbc:	4213      	tst	r3, r2
    3cbe:	d049      	beq.n	3d54 <__aeabi_fdiv+0x224>
    3cc0:	2280      	movs	r2, #128	; 0x80
    3cc2:	03d2      	lsls	r2, r2, #15
    3cc4:	4322      	orrs	r2, r4
    3cc6:	0252      	lsls	r2, r2, #9
    3cc8:	20ff      	movs	r0, #255	; 0xff
    3cca:	0a52      	lsrs	r2, r2, #9
    3ccc:	e7b2      	b.n	3c34 <__aeabi_fdiv+0x104>
    3cce:	2201      	movs	r2, #1
    3cd0:	1ad3      	subs	r3, r2, r3
    3cd2:	2b1b      	cmp	r3, #27
    3cd4:	dcc3      	bgt.n	3c5e <__aeabi_fdiv+0x12e>
    3cd6:	4642      	mov	r2, r8
    3cd8:	40da      	lsrs	r2, r3
    3cda:	4643      	mov	r3, r8
    3cdc:	379e      	adds	r7, #158	; 0x9e
    3cde:	40bb      	lsls	r3, r7
    3ce0:	1e59      	subs	r1, r3, #1
    3ce2:	418b      	sbcs	r3, r1
    3ce4:	431a      	orrs	r2, r3
    3ce6:	0753      	lsls	r3, r2, #29
    3ce8:	d004      	beq.n	3cf4 <__aeabi_fdiv+0x1c4>
    3cea:	230f      	movs	r3, #15
    3cec:	4013      	ands	r3, r2
    3cee:	2b04      	cmp	r3, #4
    3cf0:	d000      	beq.n	3cf4 <__aeabi_fdiv+0x1c4>
    3cf2:	3204      	adds	r2, #4
    3cf4:	0153      	lsls	r3, r2, #5
    3cf6:	d529      	bpl.n	3d4c <__aeabi_fdiv+0x21c>
    3cf8:	2001      	movs	r0, #1
    3cfa:	2200      	movs	r2, #0
    3cfc:	e79a      	b.n	3c34 <__aeabi_fdiv+0x104>
    3cfe:	4642      	mov	r2, r8
    3d00:	0163      	lsls	r3, r4, #5
    3d02:	0155      	lsls	r5, r2, #5
    3d04:	42ab      	cmp	r3, r5
    3d06:	d215      	bcs.n	3d34 <__aeabi_fdiv+0x204>
    3d08:	201b      	movs	r0, #27
    3d0a:	2200      	movs	r2, #0
    3d0c:	3f01      	subs	r7, #1
    3d0e:	2601      	movs	r6, #1
    3d10:	001c      	movs	r4, r3
    3d12:	0052      	lsls	r2, r2, #1
    3d14:	005b      	lsls	r3, r3, #1
    3d16:	2c00      	cmp	r4, #0
    3d18:	db01      	blt.n	3d1e <__aeabi_fdiv+0x1ee>
    3d1a:	429d      	cmp	r5, r3
    3d1c:	d801      	bhi.n	3d22 <__aeabi_fdiv+0x1f2>
    3d1e:	1b5b      	subs	r3, r3, r5
    3d20:	4332      	orrs	r2, r6
    3d22:	3801      	subs	r0, #1
    3d24:	2800      	cmp	r0, #0
    3d26:	d1f3      	bne.n	3d10 <__aeabi_fdiv+0x1e0>
    3d28:	1e58      	subs	r0, r3, #1
    3d2a:	4183      	sbcs	r3, r0
    3d2c:	4313      	orrs	r3, r2
    3d2e:	4698      	mov	r8, r3
    3d30:	000d      	movs	r5, r1
    3d32:	e79a      	b.n	3c6a <__aeabi_fdiv+0x13a>
    3d34:	201a      	movs	r0, #26
    3d36:	2201      	movs	r2, #1
    3d38:	1b5b      	subs	r3, r3, r5
    3d3a:	e7e8      	b.n	3d0e <__aeabi_fdiv+0x1de>
    3d3c:	3b02      	subs	r3, #2
    3d3e:	425a      	negs	r2, r3
    3d40:	4153      	adcs	r3, r2
    3d42:	425b      	negs	r3, r3
    3d44:	0035      	movs	r5, r6
    3d46:	2200      	movs	r2, #0
    3d48:	b2d8      	uxtb	r0, r3
    3d4a:	e773      	b.n	3c34 <__aeabi_fdiv+0x104>
    3d4c:	0192      	lsls	r2, r2, #6
    3d4e:	2000      	movs	r0, #0
    3d50:	0a52      	lsrs	r2, r2, #9
    3d52:	e76f      	b.n	3c34 <__aeabi_fdiv+0x104>
    3d54:	431a      	orrs	r2, r3
    3d56:	0252      	lsls	r2, r2, #9
    3d58:	0035      	movs	r5, r6
    3d5a:	20ff      	movs	r0, #255	; 0xff
    3d5c:	0a52      	lsrs	r2, r2, #9
    3d5e:	e769      	b.n	3c34 <__aeabi_fdiv+0x104>
    3d60:	4644      	mov	r4, r8
    3d62:	e7ad      	b.n	3cc0 <__aeabi_fdiv+0x190>
    3d64:	00004a74 	.word	0x00004a74
    3d68:	00004ab4 	.word	0x00004ab4
    3d6c:	f7ffffff 	.word	0xf7ffffff

00003d70 <__eqsf2>:
    3d70:	b570      	push	{r4, r5, r6, lr}
    3d72:	0042      	lsls	r2, r0, #1
    3d74:	024e      	lsls	r6, r1, #9
    3d76:	004c      	lsls	r4, r1, #1
    3d78:	0245      	lsls	r5, r0, #9
    3d7a:	0a6d      	lsrs	r5, r5, #9
    3d7c:	0e12      	lsrs	r2, r2, #24
    3d7e:	0fc3      	lsrs	r3, r0, #31
    3d80:	0a76      	lsrs	r6, r6, #9
    3d82:	0e24      	lsrs	r4, r4, #24
    3d84:	0fc9      	lsrs	r1, r1, #31
    3d86:	2aff      	cmp	r2, #255	; 0xff
    3d88:	d010      	beq.n	3dac <__eqsf2+0x3c>
    3d8a:	2cff      	cmp	r4, #255	; 0xff
    3d8c:	d00c      	beq.n	3da8 <__eqsf2+0x38>
    3d8e:	2001      	movs	r0, #1
    3d90:	42a2      	cmp	r2, r4
    3d92:	d10a      	bne.n	3daa <__eqsf2+0x3a>
    3d94:	42b5      	cmp	r5, r6
    3d96:	d108      	bne.n	3daa <__eqsf2+0x3a>
    3d98:	428b      	cmp	r3, r1
    3d9a:	d00f      	beq.n	3dbc <__eqsf2+0x4c>
    3d9c:	2a00      	cmp	r2, #0
    3d9e:	d104      	bne.n	3daa <__eqsf2+0x3a>
    3da0:	0028      	movs	r0, r5
    3da2:	1e43      	subs	r3, r0, #1
    3da4:	4198      	sbcs	r0, r3
    3da6:	e000      	b.n	3daa <__eqsf2+0x3a>
    3da8:	2001      	movs	r0, #1
    3daa:	bd70      	pop	{r4, r5, r6, pc}
    3dac:	2001      	movs	r0, #1
    3dae:	2cff      	cmp	r4, #255	; 0xff
    3db0:	d1fb      	bne.n	3daa <__eqsf2+0x3a>
    3db2:	4335      	orrs	r5, r6
    3db4:	d1f9      	bne.n	3daa <__eqsf2+0x3a>
    3db6:	404b      	eors	r3, r1
    3db8:	0018      	movs	r0, r3
    3dba:	e7f6      	b.n	3daa <__eqsf2+0x3a>
    3dbc:	2000      	movs	r0, #0
    3dbe:	e7f4      	b.n	3daa <__eqsf2+0x3a>

00003dc0 <__gesf2>:
    3dc0:	b530      	push	{r4, r5, lr}
    3dc2:	0042      	lsls	r2, r0, #1
    3dc4:	0244      	lsls	r4, r0, #9
    3dc6:	024d      	lsls	r5, r1, #9
    3dc8:	0fc3      	lsrs	r3, r0, #31
    3dca:	0048      	lsls	r0, r1, #1
    3dcc:	0a64      	lsrs	r4, r4, #9
    3dce:	0e12      	lsrs	r2, r2, #24
    3dd0:	0a6d      	lsrs	r5, r5, #9
    3dd2:	0e00      	lsrs	r0, r0, #24
    3dd4:	0fc9      	lsrs	r1, r1, #31
    3dd6:	2aff      	cmp	r2, #255	; 0xff
    3dd8:	d019      	beq.n	3e0e <__gesf2+0x4e>
    3dda:	28ff      	cmp	r0, #255	; 0xff
    3ddc:	d00b      	beq.n	3df6 <__gesf2+0x36>
    3dde:	2a00      	cmp	r2, #0
    3de0:	d11e      	bne.n	3e20 <__gesf2+0x60>
    3de2:	2800      	cmp	r0, #0
    3de4:	d10b      	bne.n	3dfe <__gesf2+0x3e>
    3de6:	2d00      	cmp	r5, #0
    3de8:	d027      	beq.n	3e3a <__gesf2+0x7a>
    3dea:	2c00      	cmp	r4, #0
    3dec:	d134      	bne.n	3e58 <__gesf2+0x98>
    3dee:	2900      	cmp	r1, #0
    3df0:	d02f      	beq.n	3e52 <__gesf2+0x92>
    3df2:	0008      	movs	r0, r1
    3df4:	bd30      	pop	{r4, r5, pc}
    3df6:	2d00      	cmp	r5, #0
    3df8:	d128      	bne.n	3e4c <__gesf2+0x8c>
    3dfa:	2a00      	cmp	r2, #0
    3dfc:	d101      	bne.n	3e02 <__gesf2+0x42>
    3dfe:	2c00      	cmp	r4, #0
    3e00:	d0f5      	beq.n	3dee <__gesf2+0x2e>
    3e02:	428b      	cmp	r3, r1
    3e04:	d107      	bne.n	3e16 <__gesf2+0x56>
    3e06:	2b00      	cmp	r3, #0
    3e08:	d023      	beq.n	3e52 <__gesf2+0x92>
    3e0a:	0018      	movs	r0, r3
    3e0c:	e7f2      	b.n	3df4 <__gesf2+0x34>
    3e0e:	2c00      	cmp	r4, #0
    3e10:	d11c      	bne.n	3e4c <__gesf2+0x8c>
    3e12:	28ff      	cmp	r0, #255	; 0xff
    3e14:	d014      	beq.n	3e40 <__gesf2+0x80>
    3e16:	1e58      	subs	r0, r3, #1
    3e18:	2302      	movs	r3, #2
    3e1a:	4018      	ands	r0, r3
    3e1c:	3801      	subs	r0, #1
    3e1e:	e7e9      	b.n	3df4 <__gesf2+0x34>
    3e20:	2800      	cmp	r0, #0
    3e22:	d0f8      	beq.n	3e16 <__gesf2+0x56>
    3e24:	428b      	cmp	r3, r1
    3e26:	d1f6      	bne.n	3e16 <__gesf2+0x56>
    3e28:	4282      	cmp	r2, r0
    3e2a:	dcf4      	bgt.n	3e16 <__gesf2+0x56>
    3e2c:	dbeb      	blt.n	3e06 <__gesf2+0x46>
    3e2e:	42ac      	cmp	r4, r5
    3e30:	d8f1      	bhi.n	3e16 <__gesf2+0x56>
    3e32:	2000      	movs	r0, #0
    3e34:	42ac      	cmp	r4, r5
    3e36:	d2dd      	bcs.n	3df4 <__gesf2+0x34>
    3e38:	e7e5      	b.n	3e06 <__gesf2+0x46>
    3e3a:	2c00      	cmp	r4, #0
    3e3c:	d0da      	beq.n	3df4 <__gesf2+0x34>
    3e3e:	e7ea      	b.n	3e16 <__gesf2+0x56>
    3e40:	2d00      	cmp	r5, #0
    3e42:	d103      	bne.n	3e4c <__gesf2+0x8c>
    3e44:	428b      	cmp	r3, r1
    3e46:	d1e6      	bne.n	3e16 <__gesf2+0x56>
    3e48:	2000      	movs	r0, #0
    3e4a:	e7d3      	b.n	3df4 <__gesf2+0x34>
    3e4c:	2002      	movs	r0, #2
    3e4e:	4240      	negs	r0, r0
    3e50:	e7d0      	b.n	3df4 <__gesf2+0x34>
    3e52:	2001      	movs	r0, #1
    3e54:	4240      	negs	r0, r0
    3e56:	e7cd      	b.n	3df4 <__gesf2+0x34>
    3e58:	428b      	cmp	r3, r1
    3e5a:	d0e8      	beq.n	3e2e <__gesf2+0x6e>
    3e5c:	e7db      	b.n	3e16 <__gesf2+0x56>
    3e5e:	46c0      	nop			; (mov r8, r8)

00003e60 <__lesf2>:
    3e60:	b530      	push	{r4, r5, lr}
    3e62:	0042      	lsls	r2, r0, #1
    3e64:	0244      	lsls	r4, r0, #9
    3e66:	024d      	lsls	r5, r1, #9
    3e68:	0fc3      	lsrs	r3, r0, #31
    3e6a:	0048      	lsls	r0, r1, #1
    3e6c:	0a64      	lsrs	r4, r4, #9
    3e6e:	0e12      	lsrs	r2, r2, #24
    3e70:	0a6d      	lsrs	r5, r5, #9
    3e72:	0e00      	lsrs	r0, r0, #24
    3e74:	0fc9      	lsrs	r1, r1, #31
    3e76:	2aff      	cmp	r2, #255	; 0xff
    3e78:	d01a      	beq.n	3eb0 <__lesf2+0x50>
    3e7a:	28ff      	cmp	r0, #255	; 0xff
    3e7c:	d00e      	beq.n	3e9c <__lesf2+0x3c>
    3e7e:	2a00      	cmp	r2, #0
    3e80:	d11e      	bne.n	3ec0 <__lesf2+0x60>
    3e82:	2800      	cmp	r0, #0
    3e84:	d10e      	bne.n	3ea4 <__lesf2+0x44>
    3e86:	2d00      	cmp	r5, #0
    3e88:	d02a      	beq.n	3ee0 <__lesf2+0x80>
    3e8a:	2c00      	cmp	r4, #0
    3e8c:	d00c      	beq.n	3ea8 <__lesf2+0x48>
    3e8e:	428b      	cmp	r3, r1
    3e90:	d01d      	beq.n	3ece <__lesf2+0x6e>
    3e92:	1e58      	subs	r0, r3, #1
    3e94:	2302      	movs	r3, #2
    3e96:	4018      	ands	r0, r3
    3e98:	3801      	subs	r0, #1
    3e9a:	e010      	b.n	3ebe <__lesf2+0x5e>
    3e9c:	2d00      	cmp	r5, #0
    3e9e:	d10d      	bne.n	3ebc <__lesf2+0x5c>
    3ea0:	2a00      	cmp	r2, #0
    3ea2:	d120      	bne.n	3ee6 <__lesf2+0x86>
    3ea4:	2c00      	cmp	r4, #0
    3ea6:	d11e      	bne.n	3ee6 <__lesf2+0x86>
    3ea8:	2900      	cmp	r1, #0
    3eaa:	d023      	beq.n	3ef4 <__lesf2+0x94>
    3eac:	0008      	movs	r0, r1
    3eae:	e006      	b.n	3ebe <__lesf2+0x5e>
    3eb0:	2c00      	cmp	r4, #0
    3eb2:	d103      	bne.n	3ebc <__lesf2+0x5c>
    3eb4:	28ff      	cmp	r0, #255	; 0xff
    3eb6:	d1ec      	bne.n	3e92 <__lesf2+0x32>
    3eb8:	2d00      	cmp	r5, #0
    3eba:	d017      	beq.n	3eec <__lesf2+0x8c>
    3ebc:	2002      	movs	r0, #2
    3ebe:	bd30      	pop	{r4, r5, pc}
    3ec0:	2800      	cmp	r0, #0
    3ec2:	d0e6      	beq.n	3e92 <__lesf2+0x32>
    3ec4:	428b      	cmp	r3, r1
    3ec6:	d1e4      	bne.n	3e92 <__lesf2+0x32>
    3ec8:	4282      	cmp	r2, r0
    3eca:	dce2      	bgt.n	3e92 <__lesf2+0x32>
    3ecc:	db04      	blt.n	3ed8 <__lesf2+0x78>
    3ece:	42ac      	cmp	r4, r5
    3ed0:	d8df      	bhi.n	3e92 <__lesf2+0x32>
    3ed2:	2000      	movs	r0, #0
    3ed4:	42ac      	cmp	r4, r5
    3ed6:	d2f2      	bcs.n	3ebe <__lesf2+0x5e>
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d00b      	beq.n	3ef4 <__lesf2+0x94>
    3edc:	0018      	movs	r0, r3
    3ede:	e7ee      	b.n	3ebe <__lesf2+0x5e>
    3ee0:	2c00      	cmp	r4, #0
    3ee2:	d0ec      	beq.n	3ebe <__lesf2+0x5e>
    3ee4:	e7d5      	b.n	3e92 <__lesf2+0x32>
    3ee6:	428b      	cmp	r3, r1
    3ee8:	d1d3      	bne.n	3e92 <__lesf2+0x32>
    3eea:	e7f5      	b.n	3ed8 <__lesf2+0x78>
    3eec:	2000      	movs	r0, #0
    3eee:	428b      	cmp	r3, r1
    3ef0:	d0e5      	beq.n	3ebe <__lesf2+0x5e>
    3ef2:	e7ce      	b.n	3e92 <__lesf2+0x32>
    3ef4:	2001      	movs	r0, #1
    3ef6:	4240      	negs	r0, r0
    3ef8:	e7e1      	b.n	3ebe <__lesf2+0x5e>
    3efa:	46c0      	nop			; (mov r8, r8)

00003efc <__aeabi_fmul>:
    3efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3efe:	464f      	mov	r7, r9
    3f00:	4646      	mov	r6, r8
    3f02:	46d6      	mov	lr, sl
    3f04:	0243      	lsls	r3, r0, #9
    3f06:	0a5b      	lsrs	r3, r3, #9
    3f08:	4699      	mov	r9, r3
    3f0a:	0043      	lsls	r3, r0, #1
    3f0c:	b5c0      	push	{r6, r7, lr}
    3f0e:	0e1b      	lsrs	r3, r3, #24
    3f10:	1c0e      	adds	r6, r1, #0
    3f12:	0fc5      	lsrs	r5, r0, #31
    3f14:	2b00      	cmp	r3, #0
    3f16:	d100      	bne.n	3f1a <__aeabi_fmul+0x1e>
    3f18:	e085      	b.n	4026 <__aeabi_fmul+0x12a>
    3f1a:	2bff      	cmp	r3, #255	; 0xff
    3f1c:	d100      	bne.n	3f20 <__aeabi_fmul+0x24>
    3f1e:	e08b      	b.n	4038 <__aeabi_fmul+0x13c>
    3f20:	464a      	mov	r2, r9
    3f22:	2180      	movs	r1, #128	; 0x80
    3f24:	00d2      	lsls	r2, r2, #3
    3f26:	04c9      	lsls	r1, r1, #19
    3f28:	4311      	orrs	r1, r2
    3f2a:	227f      	movs	r2, #127	; 0x7f
    3f2c:	4252      	negs	r2, r2
    3f2e:	4690      	mov	r8, r2
    3f30:	4498      	add	r8, r3
    3f32:	2300      	movs	r3, #0
    3f34:	4689      	mov	r9, r1
    3f36:	2700      	movs	r7, #0
    3f38:	469a      	mov	sl, r3
    3f3a:	0274      	lsls	r4, r6, #9
    3f3c:	0073      	lsls	r3, r6, #1
    3f3e:	0a64      	lsrs	r4, r4, #9
    3f40:	0e1b      	lsrs	r3, r3, #24
    3f42:	0ff6      	lsrs	r6, r6, #31
    3f44:	2b00      	cmp	r3, #0
    3f46:	d064      	beq.n	4012 <__aeabi_fmul+0x116>
    3f48:	2bff      	cmp	r3, #255	; 0xff
    3f4a:	d01f      	beq.n	3f8c <__aeabi_fmul+0x90>
    3f4c:	2280      	movs	r2, #128	; 0x80
    3f4e:	3b7f      	subs	r3, #127	; 0x7f
    3f50:	00e4      	lsls	r4, r4, #3
    3f52:	04d2      	lsls	r2, r2, #19
    3f54:	4443      	add	r3, r8
    3f56:	2000      	movs	r0, #0
    3f58:	4314      	orrs	r4, r2
    3f5a:	1c59      	adds	r1, r3, #1
    3f5c:	2f0a      	cmp	r7, #10
    3f5e:	dc2b      	bgt.n	3fb8 <__aeabi_fmul+0xbc>
    3f60:	4075      	eors	r5, r6
    3f62:	2f02      	cmp	r7, #2
    3f64:	dc22      	bgt.n	3fac <__aeabi_fmul+0xb0>
    3f66:	3f01      	subs	r7, #1
    3f68:	2f01      	cmp	r7, #1
    3f6a:	d900      	bls.n	3f6e <__aeabi_fmul+0x72>
    3f6c:	e0bb      	b.n	40e6 <__aeabi_fmul+0x1ea>
    3f6e:	2802      	cmp	r0, #2
    3f70:	d06b      	beq.n	404a <__aeabi_fmul+0x14e>
    3f72:	2801      	cmp	r0, #1
    3f74:	d12a      	bne.n	3fcc <__aeabi_fmul+0xd0>
    3f76:	2000      	movs	r0, #0
    3f78:	2200      	movs	r2, #0
    3f7a:	05c0      	lsls	r0, r0, #23
    3f7c:	07ed      	lsls	r5, r5, #31
    3f7e:	4310      	orrs	r0, r2
    3f80:	4328      	orrs	r0, r5
    3f82:	bce0      	pop	{r5, r6, r7}
    3f84:	46ba      	mov	sl, r7
    3f86:	46b1      	mov	r9, r6
    3f88:	46a8      	mov	r8, r5
    3f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f8c:	2c00      	cmp	r4, #0
    3f8e:	d064      	beq.n	405a <__aeabi_fmul+0x15e>
    3f90:	2203      	movs	r2, #3
    3f92:	4641      	mov	r1, r8
    3f94:	4643      	mov	r3, r8
    3f96:	4317      	orrs	r7, r2
    3f98:	002a      	movs	r2, r5
    3f9a:	3101      	adds	r1, #1
    3f9c:	33ff      	adds	r3, #255	; 0xff
    3f9e:	4072      	eors	r2, r6
    3fa0:	31ff      	adds	r1, #255	; 0xff
    3fa2:	2f0a      	cmp	r7, #10
    3fa4:	dd00      	ble.n	3fa8 <__aeabi_fmul+0xac>
    3fa6:	e0d7      	b.n	4158 <__aeabi_fmul+0x25c>
    3fa8:	0015      	movs	r5, r2
    3faa:	2003      	movs	r0, #3
    3fac:	2201      	movs	r2, #1
    3fae:	40ba      	lsls	r2, r7
    3fb0:	27a6      	movs	r7, #166	; 0xa6
    3fb2:	00ff      	lsls	r7, r7, #3
    3fb4:	423a      	tst	r2, r7
    3fb6:	d020      	beq.n	3ffa <__aeabi_fmul+0xfe>
    3fb8:	4653      	mov	r3, sl
    3fba:	2b02      	cmp	r3, #2
    3fbc:	d045      	beq.n	404a <__aeabi_fmul+0x14e>
    3fbe:	2b03      	cmp	r3, #3
    3fc0:	d100      	bne.n	3fc4 <__aeabi_fmul+0xc8>
    3fc2:	e0bb      	b.n	413c <__aeabi_fmul+0x240>
    3fc4:	4650      	mov	r0, sl
    3fc6:	464c      	mov	r4, r9
    3fc8:	2801      	cmp	r0, #1
    3fca:	d0d4      	beq.n	3f76 <__aeabi_fmul+0x7a>
    3fcc:	000b      	movs	r3, r1
    3fce:	337f      	adds	r3, #127	; 0x7f
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	dd70      	ble.n	40b6 <__aeabi_fmul+0x1ba>
    3fd4:	0762      	lsls	r2, r4, #29
    3fd6:	d004      	beq.n	3fe2 <__aeabi_fmul+0xe6>
    3fd8:	220f      	movs	r2, #15
    3fda:	4022      	ands	r2, r4
    3fdc:	2a04      	cmp	r2, #4
    3fde:	d000      	beq.n	3fe2 <__aeabi_fmul+0xe6>
    3fe0:	3404      	adds	r4, #4
    3fe2:	0122      	lsls	r2, r4, #4
    3fe4:	d503      	bpl.n	3fee <__aeabi_fmul+0xf2>
    3fe6:	4b63      	ldr	r3, [pc, #396]	; (4174 <__aeabi_fmul+0x278>)
    3fe8:	401c      	ands	r4, r3
    3fea:	000b      	movs	r3, r1
    3fec:	3380      	adds	r3, #128	; 0x80
    3fee:	2bfe      	cmp	r3, #254	; 0xfe
    3ff0:	dc2b      	bgt.n	404a <__aeabi_fmul+0x14e>
    3ff2:	01a2      	lsls	r2, r4, #6
    3ff4:	0a52      	lsrs	r2, r2, #9
    3ff6:	b2d8      	uxtb	r0, r3
    3ff8:	e7bf      	b.n	3f7a <__aeabi_fmul+0x7e>
    3ffa:	2790      	movs	r7, #144	; 0x90
    3ffc:	00bf      	lsls	r7, r7, #2
    3ffe:	423a      	tst	r2, r7
    4000:	d126      	bne.n	4050 <__aeabi_fmul+0x154>
    4002:	3fb9      	subs	r7, #185	; 0xb9
    4004:	3fff      	subs	r7, #255	; 0xff
    4006:	4217      	tst	r7, r2
    4008:	d06d      	beq.n	40e6 <__aeabi_fmul+0x1ea>
    400a:	0035      	movs	r5, r6
    400c:	46a1      	mov	r9, r4
    400e:	4682      	mov	sl, r0
    4010:	e7d2      	b.n	3fb8 <__aeabi_fmul+0xbc>
    4012:	2c00      	cmp	r4, #0
    4014:	d141      	bne.n	409a <__aeabi_fmul+0x19e>
    4016:	2301      	movs	r3, #1
    4018:	431f      	orrs	r7, r3
    401a:	4643      	mov	r3, r8
    401c:	2001      	movs	r0, #1
    401e:	1c59      	adds	r1, r3, #1
    4020:	2f0a      	cmp	r7, #10
    4022:	dd9d      	ble.n	3f60 <__aeabi_fmul+0x64>
    4024:	e7c8      	b.n	3fb8 <__aeabi_fmul+0xbc>
    4026:	464b      	mov	r3, r9
    4028:	2b00      	cmp	r3, #0
    402a:	d127      	bne.n	407c <__aeabi_fmul+0x180>
    402c:	2300      	movs	r3, #0
    402e:	4698      	mov	r8, r3
    4030:	3301      	adds	r3, #1
    4032:	2704      	movs	r7, #4
    4034:	469a      	mov	sl, r3
    4036:	e780      	b.n	3f3a <__aeabi_fmul+0x3e>
    4038:	464b      	mov	r3, r9
    403a:	2b00      	cmp	r3, #0
    403c:	d118      	bne.n	4070 <__aeabi_fmul+0x174>
    403e:	23ff      	movs	r3, #255	; 0xff
    4040:	4698      	mov	r8, r3
    4042:	3bfd      	subs	r3, #253	; 0xfd
    4044:	2708      	movs	r7, #8
    4046:	469a      	mov	sl, r3
    4048:	e777      	b.n	3f3a <__aeabi_fmul+0x3e>
    404a:	20ff      	movs	r0, #255	; 0xff
    404c:	2200      	movs	r2, #0
    404e:	e794      	b.n	3f7a <__aeabi_fmul+0x7e>
    4050:	2280      	movs	r2, #128	; 0x80
    4052:	2500      	movs	r5, #0
    4054:	20ff      	movs	r0, #255	; 0xff
    4056:	03d2      	lsls	r2, r2, #15
    4058:	e78f      	b.n	3f7a <__aeabi_fmul+0x7e>
    405a:	2302      	movs	r3, #2
    405c:	431f      	orrs	r7, r3
    405e:	4643      	mov	r3, r8
    4060:	1c59      	adds	r1, r3, #1
    4062:	31ff      	adds	r1, #255	; 0xff
    4064:	2f0a      	cmp	r7, #10
    4066:	dca7      	bgt.n	3fb8 <__aeabi_fmul+0xbc>
    4068:	2002      	movs	r0, #2
    406a:	33ff      	adds	r3, #255	; 0xff
    406c:	4075      	eors	r5, r6
    406e:	e778      	b.n	3f62 <__aeabi_fmul+0x66>
    4070:	23ff      	movs	r3, #255	; 0xff
    4072:	4698      	mov	r8, r3
    4074:	3bfc      	subs	r3, #252	; 0xfc
    4076:	270c      	movs	r7, #12
    4078:	469a      	mov	sl, r3
    407a:	e75e      	b.n	3f3a <__aeabi_fmul+0x3e>
    407c:	4648      	mov	r0, r9
    407e:	f000 fabb 	bl	45f8 <__clzsi2>
    4082:	464a      	mov	r2, r9
    4084:	1f43      	subs	r3, r0, #5
    4086:	409a      	lsls	r2, r3
    4088:	2376      	movs	r3, #118	; 0x76
    408a:	425b      	negs	r3, r3
    408c:	1a1b      	subs	r3, r3, r0
    408e:	4698      	mov	r8, r3
    4090:	2300      	movs	r3, #0
    4092:	4691      	mov	r9, r2
    4094:	2700      	movs	r7, #0
    4096:	469a      	mov	sl, r3
    4098:	e74f      	b.n	3f3a <__aeabi_fmul+0x3e>
    409a:	0020      	movs	r0, r4
    409c:	f000 faac 	bl	45f8 <__clzsi2>
    40a0:	1f43      	subs	r3, r0, #5
    40a2:	409c      	lsls	r4, r3
    40a4:	4643      	mov	r3, r8
    40a6:	1a1b      	subs	r3, r3, r0
    40a8:	3b76      	subs	r3, #118	; 0x76
    40aa:	2000      	movs	r0, #0
    40ac:	1c59      	adds	r1, r3, #1
    40ae:	2f0a      	cmp	r7, #10
    40b0:	dc00      	bgt.n	40b4 <__aeabi_fmul+0x1b8>
    40b2:	e755      	b.n	3f60 <__aeabi_fmul+0x64>
    40b4:	e780      	b.n	3fb8 <__aeabi_fmul+0xbc>
    40b6:	2201      	movs	r2, #1
    40b8:	1ad3      	subs	r3, r2, r3
    40ba:	2b1b      	cmp	r3, #27
    40bc:	dd00      	ble.n	40c0 <__aeabi_fmul+0x1c4>
    40be:	e75a      	b.n	3f76 <__aeabi_fmul+0x7a>
    40c0:	319e      	adds	r1, #158	; 0x9e
    40c2:	0022      	movs	r2, r4
    40c4:	408c      	lsls	r4, r1
    40c6:	40da      	lsrs	r2, r3
    40c8:	1e63      	subs	r3, r4, #1
    40ca:	419c      	sbcs	r4, r3
    40cc:	4322      	orrs	r2, r4
    40ce:	0753      	lsls	r3, r2, #29
    40d0:	d004      	beq.n	40dc <__aeabi_fmul+0x1e0>
    40d2:	230f      	movs	r3, #15
    40d4:	4013      	ands	r3, r2
    40d6:	2b04      	cmp	r3, #4
    40d8:	d000      	beq.n	40dc <__aeabi_fmul+0x1e0>
    40da:	3204      	adds	r2, #4
    40dc:	0153      	lsls	r3, r2, #5
    40de:	d537      	bpl.n	4150 <__aeabi_fmul+0x254>
    40e0:	2001      	movs	r0, #1
    40e2:	2200      	movs	r2, #0
    40e4:	e749      	b.n	3f7a <__aeabi_fmul+0x7e>
    40e6:	0c20      	lsrs	r0, r4, #16
    40e8:	464a      	mov	r2, r9
    40ea:	0424      	lsls	r4, r4, #16
    40ec:	0c24      	lsrs	r4, r4, #16
    40ee:	0027      	movs	r7, r4
    40f0:	0c16      	lsrs	r6, r2, #16
    40f2:	0412      	lsls	r2, r2, #16
    40f4:	0c12      	lsrs	r2, r2, #16
    40f6:	4374      	muls	r4, r6
    40f8:	4357      	muls	r7, r2
    40fa:	4346      	muls	r6, r0
    40fc:	4350      	muls	r0, r2
    40fe:	0c3a      	lsrs	r2, r7, #16
    4100:	1900      	adds	r0, r0, r4
    4102:	1812      	adds	r2, r2, r0
    4104:	4294      	cmp	r4, r2
    4106:	d903      	bls.n	4110 <__aeabi_fmul+0x214>
    4108:	2080      	movs	r0, #128	; 0x80
    410a:	0240      	lsls	r0, r0, #9
    410c:	4684      	mov	ip, r0
    410e:	4466      	add	r6, ip
    4110:	043f      	lsls	r7, r7, #16
    4112:	0410      	lsls	r0, r2, #16
    4114:	0c3f      	lsrs	r7, r7, #16
    4116:	19c0      	adds	r0, r0, r7
    4118:	0184      	lsls	r4, r0, #6
    411a:	1e67      	subs	r7, r4, #1
    411c:	41bc      	sbcs	r4, r7
    411e:	0c12      	lsrs	r2, r2, #16
    4120:	0e80      	lsrs	r0, r0, #26
    4122:	1992      	adds	r2, r2, r6
    4124:	4304      	orrs	r4, r0
    4126:	0192      	lsls	r2, r2, #6
    4128:	4314      	orrs	r4, r2
    412a:	0112      	lsls	r2, r2, #4
    412c:	d50e      	bpl.n	414c <__aeabi_fmul+0x250>
    412e:	2301      	movs	r3, #1
    4130:	0862      	lsrs	r2, r4, #1
    4132:	401c      	ands	r4, r3
    4134:	4314      	orrs	r4, r2
    4136:	e749      	b.n	3fcc <__aeabi_fmul+0xd0>
    4138:	0035      	movs	r5, r6
    413a:	46a1      	mov	r9, r4
    413c:	2280      	movs	r2, #128	; 0x80
    413e:	464b      	mov	r3, r9
    4140:	03d2      	lsls	r2, r2, #15
    4142:	431a      	orrs	r2, r3
    4144:	0252      	lsls	r2, r2, #9
    4146:	20ff      	movs	r0, #255	; 0xff
    4148:	0a52      	lsrs	r2, r2, #9
    414a:	e716      	b.n	3f7a <__aeabi_fmul+0x7e>
    414c:	0019      	movs	r1, r3
    414e:	e73d      	b.n	3fcc <__aeabi_fmul+0xd0>
    4150:	0192      	lsls	r2, r2, #6
    4152:	2000      	movs	r0, #0
    4154:	0a52      	lsrs	r2, r2, #9
    4156:	e710      	b.n	3f7a <__aeabi_fmul+0x7e>
    4158:	2f0f      	cmp	r7, #15
    415a:	d1ed      	bne.n	4138 <__aeabi_fmul+0x23c>
    415c:	2280      	movs	r2, #128	; 0x80
    415e:	464b      	mov	r3, r9
    4160:	03d2      	lsls	r2, r2, #15
    4162:	4213      	tst	r3, r2
    4164:	d0ea      	beq.n	413c <__aeabi_fmul+0x240>
    4166:	4214      	tst	r4, r2
    4168:	d1e8      	bne.n	413c <__aeabi_fmul+0x240>
    416a:	0035      	movs	r5, r6
    416c:	20ff      	movs	r0, #255	; 0xff
    416e:	4322      	orrs	r2, r4
    4170:	e703      	b.n	3f7a <__aeabi_fmul+0x7e>
    4172:	46c0      	nop			; (mov r8, r8)
    4174:	f7ffffff 	.word	0xf7ffffff

00004178 <__aeabi_fsub>:
    4178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    417a:	0243      	lsls	r3, r0, #9
    417c:	0045      	lsls	r5, r0, #1
    417e:	0fc4      	lsrs	r4, r0, #31
    4180:	0248      	lsls	r0, r1, #9
    4182:	0a42      	lsrs	r2, r0, #9
    4184:	4694      	mov	ip, r2
    4186:	004a      	lsls	r2, r1, #1
    4188:	0a5e      	lsrs	r6, r3, #9
    418a:	0e2d      	lsrs	r5, r5, #24
    418c:	099b      	lsrs	r3, r3, #6
    418e:	0e12      	lsrs	r2, r2, #24
    4190:	0fc9      	lsrs	r1, r1, #31
    4192:	0980      	lsrs	r0, r0, #6
    4194:	2aff      	cmp	r2, #255	; 0xff
    4196:	d023      	beq.n	41e0 <__aeabi_fsub+0x68>
    4198:	2701      	movs	r7, #1
    419a:	4079      	eors	r1, r7
    419c:	1aaf      	subs	r7, r5, r2
    419e:	428c      	cmp	r4, r1
    41a0:	d00f      	beq.n	41c2 <__aeabi_fsub+0x4a>
    41a2:	2f00      	cmp	r7, #0
    41a4:	dc00      	bgt.n	41a8 <__aeabi_fsub+0x30>
    41a6:	e15d      	b.n	4464 <__aeabi_fsub+0x2ec>
    41a8:	2a00      	cmp	r2, #0
    41aa:	d12f      	bne.n	420c <__aeabi_fsub+0x94>
    41ac:	2800      	cmp	r0, #0
    41ae:	d100      	bne.n	41b2 <__aeabi_fsub+0x3a>
    41b0:	e090      	b.n	42d4 <__aeabi_fsub+0x15c>
    41b2:	1e7a      	subs	r2, r7, #1
    41b4:	2f01      	cmp	r7, #1
    41b6:	d100      	bne.n	41ba <__aeabi_fsub+0x42>
    41b8:	e11a      	b.n	43f0 <__aeabi_fsub+0x278>
    41ba:	2fff      	cmp	r7, #255	; 0xff
    41bc:	d01c      	beq.n	41f8 <__aeabi_fsub+0x80>
    41be:	0017      	movs	r7, r2
    41c0:	e029      	b.n	4216 <__aeabi_fsub+0x9e>
    41c2:	2f00      	cmp	r7, #0
    41c4:	dc00      	bgt.n	41c8 <__aeabi_fsub+0x50>
    41c6:	e159      	b.n	447c <__aeabi_fsub+0x304>
    41c8:	2a00      	cmp	r2, #0
    41ca:	d052      	beq.n	4272 <__aeabi_fsub+0xfa>
    41cc:	2dff      	cmp	r5, #255	; 0xff
    41ce:	d013      	beq.n	41f8 <__aeabi_fsub+0x80>
    41d0:	2280      	movs	r2, #128	; 0x80
    41d2:	04d2      	lsls	r2, r2, #19
    41d4:	4310      	orrs	r0, r2
    41d6:	2f1b      	cmp	r7, #27
    41d8:	dc00      	bgt.n	41dc <__aeabi_fsub+0x64>
    41da:	e06a      	b.n	42b2 <__aeabi_fsub+0x13a>
    41dc:	3301      	adds	r3, #1
    41de:	e02b      	b.n	4238 <__aeabi_fsub+0xc0>
    41e0:	2800      	cmp	r0, #0
    41e2:	d03b      	beq.n	425c <__aeabi_fsub+0xe4>
    41e4:	428c      	cmp	r4, r1
    41e6:	d04d      	beq.n	4284 <__aeabi_fsub+0x10c>
    41e8:	2dff      	cmp	r5, #255	; 0xff
    41ea:	d100      	bne.n	41ee <__aeabi_fsub+0x76>
    41ec:	e08f      	b.n	430e <__aeabi_fsub+0x196>
    41ee:	2d00      	cmp	r5, #0
    41f0:	d100      	bne.n	41f4 <__aeabi_fsub+0x7c>
    41f2:	e0ab      	b.n	434c <__aeabi_fsub+0x1d4>
    41f4:	000c      	movs	r4, r1
    41f6:	0003      	movs	r3, r0
    41f8:	08db      	lsrs	r3, r3, #3
    41fa:	2b00      	cmp	r3, #0
    41fc:	d067      	beq.n	42ce <__aeabi_fsub+0x156>
    41fe:	2280      	movs	r2, #128	; 0x80
    4200:	03d2      	lsls	r2, r2, #15
    4202:	4313      	orrs	r3, r2
    4204:	025b      	lsls	r3, r3, #9
    4206:	20ff      	movs	r0, #255	; 0xff
    4208:	0a5b      	lsrs	r3, r3, #9
    420a:	e022      	b.n	4252 <__aeabi_fsub+0xda>
    420c:	2dff      	cmp	r5, #255	; 0xff
    420e:	d0f3      	beq.n	41f8 <__aeabi_fsub+0x80>
    4210:	2280      	movs	r2, #128	; 0x80
    4212:	04d2      	lsls	r2, r2, #19
    4214:	4310      	orrs	r0, r2
    4216:	2201      	movs	r2, #1
    4218:	2f1b      	cmp	r7, #27
    421a:	dc07      	bgt.n	422c <__aeabi_fsub+0xb4>
    421c:	2120      	movs	r1, #32
    421e:	1bc9      	subs	r1, r1, r7
    4220:	0002      	movs	r2, r0
    4222:	4088      	lsls	r0, r1
    4224:	40fa      	lsrs	r2, r7
    4226:	1e41      	subs	r1, r0, #1
    4228:	4188      	sbcs	r0, r1
    422a:	4302      	orrs	r2, r0
    422c:	1a9b      	subs	r3, r3, r2
    422e:	015a      	lsls	r2, r3, #5
    4230:	d456      	bmi.n	42e0 <__aeabi_fsub+0x168>
    4232:	2207      	movs	r2, #7
    4234:	401a      	ands	r2, r3
    4236:	d04e      	beq.n	42d6 <__aeabi_fsub+0x15e>
    4238:	220f      	movs	r2, #15
    423a:	401a      	ands	r2, r3
    423c:	2a04      	cmp	r2, #4
    423e:	d000      	beq.n	4242 <__aeabi_fsub+0xca>
    4240:	3304      	adds	r3, #4
    4242:	015a      	lsls	r2, r3, #5
    4244:	d547      	bpl.n	42d6 <__aeabi_fsub+0x15e>
    4246:	1c68      	adds	r0, r5, #1
    4248:	2dfe      	cmp	r5, #254	; 0xfe
    424a:	d040      	beq.n	42ce <__aeabi_fsub+0x156>
    424c:	019b      	lsls	r3, r3, #6
    424e:	0a5b      	lsrs	r3, r3, #9
    4250:	b2c0      	uxtb	r0, r0
    4252:	05c0      	lsls	r0, r0, #23
    4254:	4318      	orrs	r0, r3
    4256:	07e4      	lsls	r4, r4, #31
    4258:	4320      	orrs	r0, r4
    425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    425c:	2701      	movs	r7, #1
    425e:	4079      	eors	r1, r7
    4260:	428c      	cmp	r4, r1
    4262:	d1c1      	bne.n	41e8 <__aeabi_fsub+0x70>
    4264:	2dff      	cmp	r5, #255	; 0xff
    4266:	d010      	beq.n	428a <__aeabi_fsub+0x112>
    4268:	2d00      	cmp	r5, #0
    426a:	d100      	bne.n	426e <__aeabi_fsub+0xf6>
    426c:	e0e7      	b.n	443e <__aeabi_fsub+0x2c6>
    426e:	2300      	movs	r3, #0
    4270:	e7c2      	b.n	41f8 <__aeabi_fsub+0x80>
    4272:	2800      	cmp	r0, #0
    4274:	d02e      	beq.n	42d4 <__aeabi_fsub+0x15c>
    4276:	1e7a      	subs	r2, r7, #1
    4278:	2f01      	cmp	r7, #1
    427a:	d07f      	beq.n	437c <__aeabi_fsub+0x204>
    427c:	2fff      	cmp	r7, #255	; 0xff
    427e:	d0bb      	beq.n	41f8 <__aeabi_fsub+0x80>
    4280:	0017      	movs	r7, r2
    4282:	e7a8      	b.n	41d6 <__aeabi_fsub+0x5e>
    4284:	2dff      	cmp	r5, #255	; 0xff
    4286:	d000      	beq.n	428a <__aeabi_fsub+0x112>
    4288:	e083      	b.n	4392 <__aeabi_fsub+0x21a>
    428a:	27fe      	movs	r7, #254	; 0xfe
    428c:	1c6a      	adds	r2, r5, #1
    428e:	4217      	tst	r7, r2
    4290:	d000      	beq.n	4294 <__aeabi_fsub+0x11c>
    4292:	e08d      	b.n	43b0 <__aeabi_fsub+0x238>
    4294:	2d00      	cmp	r5, #0
    4296:	d000      	beq.n	429a <__aeabi_fsub+0x122>
    4298:	e0ad      	b.n	43f6 <__aeabi_fsub+0x27e>
    429a:	2b00      	cmp	r3, #0
    429c:	d100      	bne.n	42a0 <__aeabi_fsub+0x128>
    429e:	e0d2      	b.n	4446 <__aeabi_fsub+0x2ce>
    42a0:	2800      	cmp	r0, #0
    42a2:	d000      	beq.n	42a6 <__aeabi_fsub+0x12e>
    42a4:	e0d1      	b.n	444a <__aeabi_fsub+0x2d2>
    42a6:	2500      	movs	r5, #0
    42a8:	08db      	lsrs	r3, r3, #3
    42aa:	025b      	lsls	r3, r3, #9
    42ac:	0a5b      	lsrs	r3, r3, #9
    42ae:	b2e8      	uxtb	r0, r5
    42b0:	e7cf      	b.n	4252 <__aeabi_fsub+0xda>
    42b2:	2120      	movs	r1, #32
    42b4:	1bc9      	subs	r1, r1, r7
    42b6:	0002      	movs	r2, r0
    42b8:	4088      	lsls	r0, r1
    42ba:	40fa      	lsrs	r2, r7
    42bc:	1e41      	subs	r1, r0, #1
    42be:	4188      	sbcs	r0, r1
    42c0:	4310      	orrs	r0, r2
    42c2:	181b      	adds	r3, r3, r0
    42c4:	015a      	lsls	r2, r3, #5
    42c6:	d5b4      	bpl.n	4232 <__aeabi_fsub+0xba>
    42c8:	3501      	adds	r5, #1
    42ca:	2dff      	cmp	r5, #255	; 0xff
    42cc:	d15a      	bne.n	4384 <__aeabi_fsub+0x20c>
    42ce:	20ff      	movs	r0, #255	; 0xff
    42d0:	2300      	movs	r3, #0
    42d2:	e7be      	b.n	4252 <__aeabi_fsub+0xda>
    42d4:	003d      	movs	r5, r7
    42d6:	08db      	lsrs	r3, r3, #3
    42d8:	2dff      	cmp	r5, #255	; 0xff
    42da:	d100      	bne.n	42de <__aeabi_fsub+0x166>
    42dc:	e78d      	b.n	41fa <__aeabi_fsub+0x82>
    42de:	e7e4      	b.n	42aa <__aeabi_fsub+0x132>
    42e0:	019e      	lsls	r6, r3, #6
    42e2:	09b6      	lsrs	r6, r6, #6
    42e4:	0030      	movs	r0, r6
    42e6:	f000 f987 	bl	45f8 <__clzsi2>
    42ea:	3805      	subs	r0, #5
    42ec:	4086      	lsls	r6, r0
    42ee:	4285      	cmp	r5, r0
    42f0:	dc1f      	bgt.n	4332 <__aeabi_fsub+0x1ba>
    42f2:	2220      	movs	r2, #32
    42f4:	1b40      	subs	r0, r0, r5
    42f6:	3001      	adds	r0, #1
    42f8:	1a12      	subs	r2, r2, r0
    42fa:	0033      	movs	r3, r6
    42fc:	4096      	lsls	r6, r2
    42fe:	40c3      	lsrs	r3, r0
    4300:	1e72      	subs	r2, r6, #1
    4302:	4196      	sbcs	r6, r2
    4304:	2500      	movs	r5, #0
    4306:	4333      	orrs	r3, r6
    4308:	075a      	lsls	r2, r3, #29
    430a:	d195      	bne.n	4238 <__aeabi_fsub+0xc0>
    430c:	e799      	b.n	4242 <__aeabi_fsub+0xca>
    430e:	27fe      	movs	r7, #254	; 0xfe
    4310:	1c6a      	adds	r2, r5, #1
    4312:	4217      	tst	r7, r2
    4314:	d111      	bne.n	433a <__aeabi_fsub+0x1c2>
    4316:	2d00      	cmp	r5, #0
    4318:	d15a      	bne.n	43d0 <__aeabi_fsub+0x258>
    431a:	2b00      	cmp	r3, #0
    431c:	d100      	bne.n	4320 <__aeabi_fsub+0x1a8>
    431e:	e089      	b.n	4434 <__aeabi_fsub+0x2bc>
    4320:	2800      	cmp	r0, #0
    4322:	d0c0      	beq.n	42a6 <__aeabi_fsub+0x12e>
    4324:	1a1a      	subs	r2, r3, r0
    4326:	0156      	lsls	r6, r2, #5
    4328:	d400      	bmi.n	432c <__aeabi_fsub+0x1b4>
    432a:	e096      	b.n	445a <__aeabi_fsub+0x2e2>
    432c:	000c      	movs	r4, r1
    432e:	1ac3      	subs	r3, r0, r3
    4330:	e7ea      	b.n	4308 <__aeabi_fsub+0x190>
    4332:	4b58      	ldr	r3, [pc, #352]	; (4494 <__aeabi_fsub+0x31c>)
    4334:	1a2d      	subs	r5, r5, r0
    4336:	4033      	ands	r3, r6
    4338:	e7e6      	b.n	4308 <__aeabi_fsub+0x190>
    433a:	1a1e      	subs	r6, r3, r0
    433c:	0172      	lsls	r2, r6, #5
    433e:	d444      	bmi.n	43ca <__aeabi_fsub+0x252>
    4340:	2e00      	cmp	r6, #0
    4342:	d1cf      	bne.n	42e4 <__aeabi_fsub+0x16c>
    4344:	2400      	movs	r4, #0
    4346:	2000      	movs	r0, #0
    4348:	2300      	movs	r3, #0
    434a:	e782      	b.n	4252 <__aeabi_fsub+0xda>
    434c:	25ff      	movs	r5, #255	; 0xff
    434e:	2b00      	cmp	r3, #0
    4350:	d038      	beq.n	43c4 <__aeabi_fsub+0x24c>
    4352:	1e6e      	subs	r6, r5, #1
    4354:	2d01      	cmp	r5, #1
    4356:	d06a      	beq.n	442e <__aeabi_fsub+0x2b6>
    4358:	2dff      	cmp	r5, #255	; 0xff
    435a:	d100      	bne.n	435e <__aeabi_fsub+0x1e6>
    435c:	e74a      	b.n	41f4 <__aeabi_fsub+0x7c>
    435e:	2401      	movs	r4, #1
    4360:	2e1b      	cmp	r6, #27
    4362:	dc07      	bgt.n	4374 <__aeabi_fsub+0x1fc>
    4364:	2520      	movs	r5, #32
    4366:	1bad      	subs	r5, r5, r6
    4368:	001c      	movs	r4, r3
    436a:	40ab      	lsls	r3, r5
    436c:	40f4      	lsrs	r4, r6
    436e:	1e5d      	subs	r5, r3, #1
    4370:	41ab      	sbcs	r3, r5
    4372:	431c      	orrs	r4, r3
    4374:	1b03      	subs	r3, r0, r4
    4376:	0015      	movs	r5, r2
    4378:	000c      	movs	r4, r1
    437a:	e758      	b.n	422e <__aeabi_fsub+0xb6>
    437c:	181b      	adds	r3, r3, r0
    437e:	2502      	movs	r5, #2
    4380:	015a      	lsls	r2, r3, #5
    4382:	d533      	bpl.n	43ec <__aeabi_fsub+0x274>
    4384:	2201      	movs	r2, #1
    4386:	4944      	ldr	r1, [pc, #272]	; (4498 <__aeabi_fsub+0x320>)
    4388:	401a      	ands	r2, r3
    438a:	085b      	lsrs	r3, r3, #1
    438c:	400b      	ands	r3, r1
    438e:	4313      	orrs	r3, r2
    4390:	e7ba      	b.n	4308 <__aeabi_fsub+0x190>
    4392:	2d00      	cmp	r5, #0
    4394:	d131      	bne.n	43fa <__aeabi_fsub+0x282>
    4396:	35ff      	adds	r5, #255	; 0xff
    4398:	2b00      	cmp	r3, #0
    439a:	d052      	beq.n	4442 <__aeabi_fsub+0x2ca>
    439c:	1e69      	subs	r1, r5, #1
    439e:	2d01      	cmp	r5, #1
    43a0:	d020      	beq.n	43e4 <__aeabi_fsub+0x26c>
    43a2:	2dff      	cmp	r5, #255	; 0xff
    43a4:	d029      	beq.n	43fa <__aeabi_fsub+0x282>
    43a6:	291b      	cmp	r1, #27
    43a8:	dd36      	ble.n	4418 <__aeabi_fsub+0x2a0>
    43aa:	0015      	movs	r5, r2
    43ac:	1c43      	adds	r3, r0, #1
    43ae:	e743      	b.n	4238 <__aeabi_fsub+0xc0>
    43b0:	2aff      	cmp	r2, #255	; 0xff
    43b2:	d08c      	beq.n	42ce <__aeabi_fsub+0x156>
    43b4:	181b      	adds	r3, r3, r0
    43b6:	085b      	lsrs	r3, r3, #1
    43b8:	0015      	movs	r5, r2
    43ba:	075a      	lsls	r2, r3, #29
    43bc:	d000      	beq.n	43c0 <__aeabi_fsub+0x248>
    43be:	e73b      	b.n	4238 <__aeabi_fsub+0xc0>
    43c0:	08db      	lsrs	r3, r3, #3
    43c2:	e772      	b.n	42aa <__aeabi_fsub+0x132>
    43c4:	000c      	movs	r4, r1
    43c6:	0003      	movs	r3, r0
    43c8:	e785      	b.n	42d6 <__aeabi_fsub+0x15e>
    43ca:	000c      	movs	r4, r1
    43cc:	1ac6      	subs	r6, r0, r3
    43ce:	e789      	b.n	42e4 <__aeabi_fsub+0x16c>
    43d0:	2b00      	cmp	r3, #0
    43d2:	d114      	bne.n	43fe <__aeabi_fsub+0x286>
    43d4:	2800      	cmp	r0, #0
    43d6:	d000      	beq.n	43da <__aeabi_fsub+0x262>
    43d8:	e70c      	b.n	41f4 <__aeabi_fsub+0x7c>
    43da:	2380      	movs	r3, #128	; 0x80
    43dc:	2400      	movs	r4, #0
    43de:	20ff      	movs	r0, #255	; 0xff
    43e0:	03db      	lsls	r3, r3, #15
    43e2:	e736      	b.n	4252 <__aeabi_fsub+0xda>
    43e4:	181b      	adds	r3, r3, r0
    43e6:	3501      	adds	r5, #1
    43e8:	015a      	lsls	r2, r3, #5
    43ea:	d4cb      	bmi.n	4384 <__aeabi_fsub+0x20c>
    43ec:	3d01      	subs	r5, #1
    43ee:	e720      	b.n	4232 <__aeabi_fsub+0xba>
    43f0:	2501      	movs	r5, #1
    43f2:	1a1b      	subs	r3, r3, r0
    43f4:	e71b      	b.n	422e <__aeabi_fsub+0xb6>
    43f6:	2b00      	cmp	r3, #0
    43f8:	d101      	bne.n	43fe <__aeabi_fsub+0x286>
    43fa:	0003      	movs	r3, r0
    43fc:	e6fc      	b.n	41f8 <__aeabi_fsub+0x80>
    43fe:	2800      	cmp	r0, #0
    4400:	d100      	bne.n	4404 <__aeabi_fsub+0x28c>
    4402:	e6f9      	b.n	41f8 <__aeabi_fsub+0x80>
    4404:	2280      	movs	r2, #128	; 0x80
    4406:	03d2      	lsls	r2, r2, #15
    4408:	4296      	cmp	r6, r2
    440a:	d303      	bcc.n	4414 <__aeabi_fsub+0x29c>
    440c:	4594      	cmp	ip, r2
    440e:	d201      	bcs.n	4414 <__aeabi_fsub+0x29c>
    4410:	000c      	movs	r4, r1
    4412:	0003      	movs	r3, r0
    4414:	08db      	lsrs	r3, r3, #3
    4416:	e6f2      	b.n	41fe <__aeabi_fsub+0x86>
    4418:	001d      	movs	r5, r3
    441a:	2620      	movs	r6, #32
    441c:	40cd      	lsrs	r5, r1
    441e:	1a71      	subs	r1, r6, r1
    4420:	408b      	lsls	r3, r1
    4422:	1e59      	subs	r1, r3, #1
    4424:	418b      	sbcs	r3, r1
    4426:	432b      	orrs	r3, r5
    4428:	181b      	adds	r3, r3, r0
    442a:	0015      	movs	r5, r2
    442c:	e74a      	b.n	42c4 <__aeabi_fsub+0x14c>
    442e:	000c      	movs	r4, r1
    4430:	1ac3      	subs	r3, r0, r3
    4432:	e6fc      	b.n	422e <__aeabi_fsub+0xb6>
    4434:	2800      	cmp	r0, #0
    4436:	d085      	beq.n	4344 <__aeabi_fsub+0x1cc>
    4438:	000c      	movs	r4, r1
    443a:	0003      	movs	r3, r0
    443c:	e733      	b.n	42a6 <__aeabi_fsub+0x12e>
    443e:	25ff      	movs	r5, #255	; 0xff
    4440:	e7aa      	b.n	4398 <__aeabi_fsub+0x220>
    4442:	0003      	movs	r3, r0
    4444:	e747      	b.n	42d6 <__aeabi_fsub+0x15e>
    4446:	0003      	movs	r3, r0
    4448:	e72d      	b.n	42a6 <__aeabi_fsub+0x12e>
    444a:	181b      	adds	r3, r3, r0
    444c:	015a      	lsls	r2, r3, #5
    444e:	d5b7      	bpl.n	43c0 <__aeabi_fsub+0x248>
    4450:	4a10      	ldr	r2, [pc, #64]	; (4494 <__aeabi_fsub+0x31c>)
    4452:	3501      	adds	r5, #1
    4454:	4013      	ands	r3, r2
    4456:	08db      	lsrs	r3, r3, #3
    4458:	e727      	b.n	42aa <__aeabi_fsub+0x132>
    445a:	1e13      	subs	r3, r2, #0
    445c:	d100      	bne.n	4460 <__aeabi_fsub+0x2e8>
    445e:	e771      	b.n	4344 <__aeabi_fsub+0x1cc>
    4460:	08db      	lsrs	r3, r3, #3
    4462:	e722      	b.n	42aa <__aeabi_fsub+0x132>
    4464:	2f00      	cmp	r7, #0
    4466:	d100      	bne.n	446a <__aeabi_fsub+0x2f2>
    4468:	e751      	b.n	430e <__aeabi_fsub+0x196>
    446a:	1b56      	subs	r6, r2, r5
    446c:	2d00      	cmp	r5, #0
    446e:	d101      	bne.n	4474 <__aeabi_fsub+0x2fc>
    4470:	0035      	movs	r5, r6
    4472:	e76c      	b.n	434e <__aeabi_fsub+0x1d6>
    4474:	2480      	movs	r4, #128	; 0x80
    4476:	04e4      	lsls	r4, r4, #19
    4478:	4323      	orrs	r3, r4
    447a:	e770      	b.n	435e <__aeabi_fsub+0x1e6>
    447c:	2f00      	cmp	r7, #0
    447e:	d100      	bne.n	4482 <__aeabi_fsub+0x30a>
    4480:	e703      	b.n	428a <__aeabi_fsub+0x112>
    4482:	1b51      	subs	r1, r2, r5
    4484:	2d00      	cmp	r5, #0
    4486:	d101      	bne.n	448c <__aeabi_fsub+0x314>
    4488:	000d      	movs	r5, r1
    448a:	e785      	b.n	4398 <__aeabi_fsub+0x220>
    448c:	2580      	movs	r5, #128	; 0x80
    448e:	04ed      	lsls	r5, r5, #19
    4490:	432b      	orrs	r3, r5
    4492:	e788      	b.n	43a6 <__aeabi_fsub+0x22e>
    4494:	fbffffff 	.word	0xfbffffff
    4498:	7dffffff 	.word	0x7dffffff

0000449c <__aeabi_f2iz>:
    449c:	0241      	lsls	r1, r0, #9
    449e:	0042      	lsls	r2, r0, #1
    44a0:	0fc3      	lsrs	r3, r0, #31
    44a2:	0a49      	lsrs	r1, r1, #9
    44a4:	2000      	movs	r0, #0
    44a6:	0e12      	lsrs	r2, r2, #24
    44a8:	2a7e      	cmp	r2, #126	; 0x7e
    44aa:	dd03      	ble.n	44b4 <__aeabi_f2iz+0x18>
    44ac:	2a9d      	cmp	r2, #157	; 0x9d
    44ae:	dd02      	ble.n	44b6 <__aeabi_f2iz+0x1a>
    44b0:	4a09      	ldr	r2, [pc, #36]	; (44d8 <__aeabi_f2iz+0x3c>)
    44b2:	1898      	adds	r0, r3, r2
    44b4:	4770      	bx	lr
    44b6:	2080      	movs	r0, #128	; 0x80
    44b8:	0400      	lsls	r0, r0, #16
    44ba:	4301      	orrs	r1, r0
    44bc:	2a95      	cmp	r2, #149	; 0x95
    44be:	dc07      	bgt.n	44d0 <__aeabi_f2iz+0x34>
    44c0:	2096      	movs	r0, #150	; 0x96
    44c2:	1a82      	subs	r2, r0, r2
    44c4:	40d1      	lsrs	r1, r2
    44c6:	4248      	negs	r0, r1
    44c8:	2b00      	cmp	r3, #0
    44ca:	d1f3      	bne.n	44b4 <__aeabi_f2iz+0x18>
    44cc:	0008      	movs	r0, r1
    44ce:	e7f1      	b.n	44b4 <__aeabi_f2iz+0x18>
    44d0:	3a96      	subs	r2, #150	; 0x96
    44d2:	4091      	lsls	r1, r2
    44d4:	e7f7      	b.n	44c6 <__aeabi_f2iz+0x2a>
    44d6:	46c0      	nop			; (mov r8, r8)
    44d8:	7fffffff 	.word	0x7fffffff

000044dc <__aeabi_i2f>:
    44dc:	b570      	push	{r4, r5, r6, lr}
    44de:	2800      	cmp	r0, #0
    44e0:	d013      	beq.n	450a <__aeabi_i2f+0x2e>
    44e2:	17c3      	asrs	r3, r0, #31
    44e4:	18c5      	adds	r5, r0, r3
    44e6:	405d      	eors	r5, r3
    44e8:	0fc4      	lsrs	r4, r0, #31
    44ea:	0028      	movs	r0, r5
    44ec:	f000 f884 	bl	45f8 <__clzsi2>
    44f0:	239e      	movs	r3, #158	; 0x9e
    44f2:	0001      	movs	r1, r0
    44f4:	1a1b      	subs	r3, r3, r0
    44f6:	2b96      	cmp	r3, #150	; 0x96
    44f8:	dc0f      	bgt.n	451a <__aeabi_i2f+0x3e>
    44fa:	2808      	cmp	r0, #8
    44fc:	d034      	beq.n	4568 <__aeabi_i2f+0x8c>
    44fe:	3908      	subs	r1, #8
    4500:	408d      	lsls	r5, r1
    4502:	026d      	lsls	r5, r5, #9
    4504:	0a6d      	lsrs	r5, r5, #9
    4506:	b2d8      	uxtb	r0, r3
    4508:	e002      	b.n	4510 <__aeabi_i2f+0x34>
    450a:	2400      	movs	r4, #0
    450c:	2000      	movs	r0, #0
    450e:	2500      	movs	r5, #0
    4510:	05c0      	lsls	r0, r0, #23
    4512:	4328      	orrs	r0, r5
    4514:	07e4      	lsls	r4, r4, #31
    4516:	4320      	orrs	r0, r4
    4518:	bd70      	pop	{r4, r5, r6, pc}
    451a:	2b99      	cmp	r3, #153	; 0x99
    451c:	dc16      	bgt.n	454c <__aeabi_i2f+0x70>
    451e:	1f42      	subs	r2, r0, #5
    4520:	2805      	cmp	r0, #5
    4522:	d000      	beq.n	4526 <__aeabi_i2f+0x4a>
    4524:	4095      	lsls	r5, r2
    4526:	002a      	movs	r2, r5
    4528:	4811      	ldr	r0, [pc, #68]	; (4570 <__aeabi_i2f+0x94>)
    452a:	4002      	ands	r2, r0
    452c:	076e      	lsls	r6, r5, #29
    452e:	d009      	beq.n	4544 <__aeabi_i2f+0x68>
    4530:	260f      	movs	r6, #15
    4532:	4035      	ands	r5, r6
    4534:	2d04      	cmp	r5, #4
    4536:	d005      	beq.n	4544 <__aeabi_i2f+0x68>
    4538:	3204      	adds	r2, #4
    453a:	0155      	lsls	r5, r2, #5
    453c:	d502      	bpl.n	4544 <__aeabi_i2f+0x68>
    453e:	239f      	movs	r3, #159	; 0x9f
    4540:	4002      	ands	r2, r0
    4542:	1a5b      	subs	r3, r3, r1
    4544:	0192      	lsls	r2, r2, #6
    4546:	0a55      	lsrs	r5, r2, #9
    4548:	b2d8      	uxtb	r0, r3
    454a:	e7e1      	b.n	4510 <__aeabi_i2f+0x34>
    454c:	2205      	movs	r2, #5
    454e:	1a12      	subs	r2, r2, r0
    4550:	0028      	movs	r0, r5
    4552:	40d0      	lsrs	r0, r2
    4554:	0002      	movs	r2, r0
    4556:	0008      	movs	r0, r1
    4558:	301b      	adds	r0, #27
    455a:	4085      	lsls	r5, r0
    455c:	0028      	movs	r0, r5
    455e:	1e45      	subs	r5, r0, #1
    4560:	41a8      	sbcs	r0, r5
    4562:	4302      	orrs	r2, r0
    4564:	0015      	movs	r5, r2
    4566:	e7de      	b.n	4526 <__aeabi_i2f+0x4a>
    4568:	026d      	lsls	r5, r5, #9
    456a:	2096      	movs	r0, #150	; 0x96
    456c:	0a6d      	lsrs	r5, r5, #9
    456e:	e7cf      	b.n	4510 <__aeabi_i2f+0x34>
    4570:	fbffffff 	.word	0xfbffffff

00004574 <__aeabi_ui2f>:
    4574:	b570      	push	{r4, r5, r6, lr}
    4576:	1e04      	subs	r4, r0, #0
    4578:	d00e      	beq.n	4598 <__aeabi_ui2f+0x24>
    457a:	f000 f83d 	bl	45f8 <__clzsi2>
    457e:	239e      	movs	r3, #158	; 0x9e
    4580:	0001      	movs	r1, r0
    4582:	1a1b      	subs	r3, r3, r0
    4584:	2b96      	cmp	r3, #150	; 0x96
    4586:	dc0c      	bgt.n	45a2 <__aeabi_ui2f+0x2e>
    4588:	2808      	cmp	r0, #8
    458a:	d02f      	beq.n	45ec <__aeabi_ui2f+0x78>
    458c:	3908      	subs	r1, #8
    458e:	408c      	lsls	r4, r1
    4590:	0264      	lsls	r4, r4, #9
    4592:	0a64      	lsrs	r4, r4, #9
    4594:	b2d8      	uxtb	r0, r3
    4596:	e001      	b.n	459c <__aeabi_ui2f+0x28>
    4598:	2000      	movs	r0, #0
    459a:	2400      	movs	r4, #0
    459c:	05c0      	lsls	r0, r0, #23
    459e:	4320      	orrs	r0, r4
    45a0:	bd70      	pop	{r4, r5, r6, pc}
    45a2:	2b99      	cmp	r3, #153	; 0x99
    45a4:	dc16      	bgt.n	45d4 <__aeabi_ui2f+0x60>
    45a6:	1f42      	subs	r2, r0, #5
    45a8:	2805      	cmp	r0, #5
    45aa:	d000      	beq.n	45ae <__aeabi_ui2f+0x3a>
    45ac:	4094      	lsls	r4, r2
    45ae:	0022      	movs	r2, r4
    45b0:	4810      	ldr	r0, [pc, #64]	; (45f4 <__aeabi_ui2f+0x80>)
    45b2:	4002      	ands	r2, r0
    45b4:	0765      	lsls	r5, r4, #29
    45b6:	d009      	beq.n	45cc <__aeabi_ui2f+0x58>
    45b8:	250f      	movs	r5, #15
    45ba:	402c      	ands	r4, r5
    45bc:	2c04      	cmp	r4, #4
    45be:	d005      	beq.n	45cc <__aeabi_ui2f+0x58>
    45c0:	3204      	adds	r2, #4
    45c2:	0154      	lsls	r4, r2, #5
    45c4:	d502      	bpl.n	45cc <__aeabi_ui2f+0x58>
    45c6:	239f      	movs	r3, #159	; 0x9f
    45c8:	4002      	ands	r2, r0
    45ca:	1a5b      	subs	r3, r3, r1
    45cc:	0192      	lsls	r2, r2, #6
    45ce:	0a54      	lsrs	r4, r2, #9
    45d0:	b2d8      	uxtb	r0, r3
    45d2:	e7e3      	b.n	459c <__aeabi_ui2f+0x28>
    45d4:	0002      	movs	r2, r0
    45d6:	0020      	movs	r0, r4
    45d8:	321b      	adds	r2, #27
    45da:	4090      	lsls	r0, r2
    45dc:	0002      	movs	r2, r0
    45de:	1e50      	subs	r0, r2, #1
    45e0:	4182      	sbcs	r2, r0
    45e2:	2005      	movs	r0, #5
    45e4:	1a40      	subs	r0, r0, r1
    45e6:	40c4      	lsrs	r4, r0
    45e8:	4314      	orrs	r4, r2
    45ea:	e7e0      	b.n	45ae <__aeabi_ui2f+0x3a>
    45ec:	0264      	lsls	r4, r4, #9
    45ee:	2096      	movs	r0, #150	; 0x96
    45f0:	0a64      	lsrs	r4, r4, #9
    45f2:	e7d3      	b.n	459c <__aeabi_ui2f+0x28>
    45f4:	fbffffff 	.word	0xfbffffff

000045f8 <__clzsi2>:
    45f8:	211c      	movs	r1, #28
    45fa:	2301      	movs	r3, #1
    45fc:	041b      	lsls	r3, r3, #16
    45fe:	4298      	cmp	r0, r3
    4600:	d301      	bcc.n	4606 <__clzsi2+0xe>
    4602:	0c00      	lsrs	r0, r0, #16
    4604:	3910      	subs	r1, #16
    4606:	0a1b      	lsrs	r3, r3, #8
    4608:	4298      	cmp	r0, r3
    460a:	d301      	bcc.n	4610 <__clzsi2+0x18>
    460c:	0a00      	lsrs	r0, r0, #8
    460e:	3908      	subs	r1, #8
    4610:	091b      	lsrs	r3, r3, #4
    4612:	4298      	cmp	r0, r3
    4614:	d301      	bcc.n	461a <__clzsi2+0x22>
    4616:	0900      	lsrs	r0, r0, #4
    4618:	3904      	subs	r1, #4
    461a:	a202      	add	r2, pc, #8	; (adr r2, 4624 <__clzsi2+0x2c>)
    461c:	5c10      	ldrb	r0, [r2, r0]
    461e:	1840      	adds	r0, r0, r1
    4620:	4770      	bx	lr
    4622:	46c0      	nop			; (mov r8, r8)
    4624:	02020304 	.word	0x02020304
    4628:	01010101 	.word	0x01010101
	...

00004634 <memset>:
    4634:	b5f0      	push	{r4, r5, r6, r7, lr}
    4636:	0005      	movs	r5, r0
    4638:	0783      	lsls	r3, r0, #30
    463a:	d049      	beq.n	46d0 <memset+0x9c>
    463c:	1e54      	subs	r4, r2, #1
    463e:	2a00      	cmp	r2, #0
    4640:	d045      	beq.n	46ce <memset+0x9a>
    4642:	0003      	movs	r3, r0
    4644:	2603      	movs	r6, #3
    4646:	b2ca      	uxtb	r2, r1
    4648:	e002      	b.n	4650 <memset+0x1c>
    464a:	3501      	adds	r5, #1
    464c:	3c01      	subs	r4, #1
    464e:	d33e      	bcc.n	46ce <memset+0x9a>
    4650:	3301      	adds	r3, #1
    4652:	702a      	strb	r2, [r5, #0]
    4654:	4233      	tst	r3, r6
    4656:	d1f8      	bne.n	464a <memset+0x16>
    4658:	2c03      	cmp	r4, #3
    465a:	d930      	bls.n	46be <memset+0x8a>
    465c:	22ff      	movs	r2, #255	; 0xff
    465e:	400a      	ands	r2, r1
    4660:	0215      	lsls	r5, r2, #8
    4662:	18ad      	adds	r5, r5, r2
    4664:	042a      	lsls	r2, r5, #16
    4666:	18ad      	adds	r5, r5, r2
    4668:	2c0f      	cmp	r4, #15
    466a:	d934      	bls.n	46d6 <memset+0xa2>
    466c:	0027      	movs	r7, r4
    466e:	3f10      	subs	r7, #16
    4670:	093f      	lsrs	r7, r7, #4
    4672:	013e      	lsls	r6, r7, #4
    4674:	46b4      	mov	ip, r6
    4676:	001e      	movs	r6, r3
    4678:	001a      	movs	r2, r3
    467a:	3610      	adds	r6, #16
    467c:	4466      	add	r6, ip
    467e:	6015      	str	r5, [r2, #0]
    4680:	6055      	str	r5, [r2, #4]
    4682:	6095      	str	r5, [r2, #8]
    4684:	60d5      	str	r5, [r2, #12]
    4686:	3210      	adds	r2, #16
    4688:	4296      	cmp	r6, r2
    468a:	d1f8      	bne.n	467e <memset+0x4a>
    468c:	3701      	adds	r7, #1
    468e:	013f      	lsls	r7, r7, #4
    4690:	19db      	adds	r3, r3, r7
    4692:	270f      	movs	r7, #15
    4694:	220c      	movs	r2, #12
    4696:	4027      	ands	r7, r4
    4698:	4022      	ands	r2, r4
    469a:	003c      	movs	r4, r7
    469c:	2a00      	cmp	r2, #0
    469e:	d00e      	beq.n	46be <memset+0x8a>
    46a0:	1f3e      	subs	r6, r7, #4
    46a2:	08b6      	lsrs	r6, r6, #2
    46a4:	00b4      	lsls	r4, r6, #2
    46a6:	46a4      	mov	ip, r4
    46a8:	001a      	movs	r2, r3
    46aa:	1d1c      	adds	r4, r3, #4
    46ac:	4464      	add	r4, ip
    46ae:	c220      	stmia	r2!, {r5}
    46b0:	42a2      	cmp	r2, r4
    46b2:	d1fc      	bne.n	46ae <memset+0x7a>
    46b4:	2403      	movs	r4, #3
    46b6:	3601      	adds	r6, #1
    46b8:	00b6      	lsls	r6, r6, #2
    46ba:	199b      	adds	r3, r3, r6
    46bc:	403c      	ands	r4, r7
    46be:	2c00      	cmp	r4, #0
    46c0:	d005      	beq.n	46ce <memset+0x9a>
    46c2:	b2c9      	uxtb	r1, r1
    46c4:	191c      	adds	r4, r3, r4
    46c6:	7019      	strb	r1, [r3, #0]
    46c8:	3301      	adds	r3, #1
    46ca:	429c      	cmp	r4, r3
    46cc:	d1fb      	bne.n	46c6 <memset+0x92>
    46ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46d0:	0003      	movs	r3, r0
    46d2:	0014      	movs	r4, r2
    46d4:	e7c0      	b.n	4658 <memset+0x24>
    46d6:	0027      	movs	r7, r4
    46d8:	e7e2      	b.n	46a0 <memset+0x6c>
    46da:	46c0      	nop			; (mov r8, r8)

000046dc <__libc_init_array>:
    46dc:	b570      	push	{r4, r5, r6, lr}
    46de:	4b0d      	ldr	r3, [pc, #52]	; (4714 <__libc_init_array+0x38>)
    46e0:	4d0d      	ldr	r5, [pc, #52]	; (4718 <__libc_init_array+0x3c>)
    46e2:	1b5e      	subs	r6, r3, r5
    46e4:	10b6      	asrs	r6, r6, #2
    46e6:	42ab      	cmp	r3, r5
    46e8:	d005      	beq.n	46f6 <__libc_init_array+0x1a>
    46ea:	2400      	movs	r4, #0
    46ec:	cd08      	ldmia	r5!, {r3}
    46ee:	3401      	adds	r4, #1
    46f0:	4798      	blx	r3
    46f2:	42a6      	cmp	r6, r4
    46f4:	d8fa      	bhi.n	46ec <__libc_init_array+0x10>
    46f6:	f000 f9fb 	bl	4af0 <_init>
    46fa:	4b08      	ldr	r3, [pc, #32]	; (471c <__libc_init_array+0x40>)
    46fc:	4d08      	ldr	r5, [pc, #32]	; (4720 <__libc_init_array+0x44>)
    46fe:	1b5e      	subs	r6, r3, r5
    4700:	10b6      	asrs	r6, r6, #2
    4702:	42ab      	cmp	r3, r5
    4704:	d005      	beq.n	4712 <__libc_init_array+0x36>
    4706:	2400      	movs	r4, #0
    4708:	cd08      	ldmia	r5!, {r3}
    470a:	3401      	adds	r4, #1
    470c:	4798      	blx	r3
    470e:	42a6      	cmp	r6, r4
    4710:	d8fa      	bhi.n	4708 <__libc_init_array+0x2c>
    4712:	bd70      	pop	{r4, r5, r6, pc}
    4714:	00004afc 	.word	0x00004afc
    4718:	00004afc 	.word	0x00004afc
    471c:	00004b04 	.word	0x00004b04
    4720:	00004afc 	.word	0x00004afc

00004724 <__retarget_lock_acquire_recursive>:
    4724:	4770      	bx	lr
    4726:	46c0      	nop			; (mov r8, r8)

00004728 <__retarget_lock_release_recursive>:
    4728:	4770      	bx	lr
    472a:	46c0      	nop			; (mov r8, r8)

0000472c <memcpy>:
    472c:	b5f0      	push	{r4, r5, r6, r7, lr}
    472e:	0005      	movs	r5, r0
    4730:	2a0f      	cmp	r2, #15
    4732:	d933      	bls.n	479c <memcpy+0x70>
    4734:	2403      	movs	r4, #3
    4736:	0003      	movs	r3, r0
    4738:	0026      	movs	r6, r4
    473a:	430b      	orrs	r3, r1
    473c:	401e      	ands	r6, r3
    473e:	421c      	tst	r4, r3
    4740:	d137      	bne.n	47b2 <memcpy+0x86>
    4742:	0015      	movs	r5, r2
    4744:	3d10      	subs	r5, #16
    4746:	092d      	lsrs	r5, r5, #4
    4748:	0003      	movs	r3, r0
    474a:	000c      	movs	r4, r1
    474c:	46ac      	mov	ip, r5
    474e:	012f      	lsls	r7, r5, #4
    4750:	183f      	adds	r7, r7, r0
    4752:	6865      	ldr	r5, [r4, #4]
    4754:	605d      	str	r5, [r3, #4]
    4756:	68a5      	ldr	r5, [r4, #8]
    4758:	609d      	str	r5, [r3, #8]
    475a:	68e5      	ldr	r5, [r4, #12]
    475c:	60dd      	str	r5, [r3, #12]
    475e:	6825      	ldr	r5, [r4, #0]
    4760:	3410      	adds	r4, #16
    4762:	601d      	str	r5, [r3, #0]
    4764:	001d      	movs	r5, r3
    4766:	3310      	adds	r3, #16
    4768:	42bd      	cmp	r5, r7
    476a:	d1f2      	bne.n	4752 <memcpy+0x26>
    476c:	4665      	mov	r5, ip
    476e:	230f      	movs	r3, #15
    4770:	240c      	movs	r4, #12
    4772:	3501      	adds	r5, #1
    4774:	012d      	lsls	r5, r5, #4
    4776:	1949      	adds	r1, r1, r5
    4778:	4013      	ands	r3, r2
    477a:	1945      	adds	r5, r0, r5
    477c:	4214      	tst	r4, r2
    477e:	d01a      	beq.n	47b6 <memcpy+0x8a>
    4780:	598c      	ldr	r4, [r1, r6]
    4782:	51ac      	str	r4, [r5, r6]
    4784:	3604      	adds	r6, #4
    4786:	1b9c      	subs	r4, r3, r6
    4788:	2c03      	cmp	r4, #3
    478a:	d8f9      	bhi.n	4780 <memcpy+0x54>
    478c:	3b04      	subs	r3, #4
    478e:	089b      	lsrs	r3, r3, #2
    4790:	3301      	adds	r3, #1
    4792:	009b      	lsls	r3, r3, #2
    4794:	18ed      	adds	r5, r5, r3
    4796:	18c9      	adds	r1, r1, r3
    4798:	2303      	movs	r3, #3
    479a:	401a      	ands	r2, r3
    479c:	1e56      	subs	r6, r2, #1
    479e:	2a00      	cmp	r2, #0
    47a0:	d006      	beq.n	47b0 <memcpy+0x84>
    47a2:	2300      	movs	r3, #0
    47a4:	5ccc      	ldrb	r4, [r1, r3]
    47a6:	001a      	movs	r2, r3
    47a8:	54ec      	strb	r4, [r5, r3]
    47aa:	3301      	adds	r3, #1
    47ac:	4296      	cmp	r6, r2
    47ae:	d1f9      	bne.n	47a4 <memcpy+0x78>
    47b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47b2:	1e56      	subs	r6, r2, #1
    47b4:	e7f5      	b.n	47a2 <memcpy+0x76>
    47b6:	001a      	movs	r2, r3
    47b8:	e7f0      	b.n	479c <memcpy+0x70>
    47ba:	46c0      	nop			; (mov r8, r8)

000047bc <strlen>:
    47bc:	b510      	push	{r4, lr}
    47be:	0783      	lsls	r3, r0, #30
    47c0:	d00a      	beq.n	47d8 <strlen+0x1c>
    47c2:	0003      	movs	r3, r0
    47c4:	2103      	movs	r1, #3
    47c6:	e002      	b.n	47ce <strlen+0x12>
    47c8:	3301      	adds	r3, #1
    47ca:	420b      	tst	r3, r1
    47cc:	d005      	beq.n	47da <strlen+0x1e>
    47ce:	781a      	ldrb	r2, [r3, #0]
    47d0:	2a00      	cmp	r2, #0
    47d2:	d1f9      	bne.n	47c8 <strlen+0xc>
    47d4:	1a18      	subs	r0, r3, r0
    47d6:	bd10      	pop	{r4, pc}
    47d8:	0003      	movs	r3, r0
    47da:	6819      	ldr	r1, [r3, #0]
    47dc:	4a0c      	ldr	r2, [pc, #48]	; (4810 <strlen+0x54>)
    47de:	4c0d      	ldr	r4, [pc, #52]	; (4814 <strlen+0x58>)
    47e0:	188a      	adds	r2, r1, r2
    47e2:	438a      	bics	r2, r1
    47e4:	4222      	tst	r2, r4
    47e6:	d10f      	bne.n	4808 <strlen+0x4c>
    47e8:	6859      	ldr	r1, [r3, #4]
    47ea:	4a09      	ldr	r2, [pc, #36]	; (4810 <strlen+0x54>)
    47ec:	3304      	adds	r3, #4
    47ee:	188a      	adds	r2, r1, r2
    47f0:	438a      	bics	r2, r1
    47f2:	4222      	tst	r2, r4
    47f4:	d108      	bne.n	4808 <strlen+0x4c>
    47f6:	6859      	ldr	r1, [r3, #4]
    47f8:	4a05      	ldr	r2, [pc, #20]	; (4810 <strlen+0x54>)
    47fa:	3304      	adds	r3, #4
    47fc:	188a      	adds	r2, r1, r2
    47fe:	438a      	bics	r2, r1
    4800:	4222      	tst	r2, r4
    4802:	d0f1      	beq.n	47e8 <strlen+0x2c>
    4804:	e000      	b.n	4808 <strlen+0x4c>
    4806:	3301      	adds	r3, #1
    4808:	781a      	ldrb	r2, [r3, #0]
    480a:	2a00      	cmp	r2, #0
    480c:	d1fb      	bne.n	4806 <strlen+0x4a>
    480e:	e7e1      	b.n	47d4 <strlen+0x18>
    4810:	fefefeff 	.word	0xfefefeff
    4814:	80808080 	.word	0x80808080

00004818 <register_fini>:
    4818:	4b03      	ldr	r3, [pc, #12]	; (4828 <register_fini+0x10>)
    481a:	b510      	push	{r4, lr}
    481c:	2b00      	cmp	r3, #0
    481e:	d002      	beq.n	4826 <register_fini+0xe>
    4820:	4802      	ldr	r0, [pc, #8]	; (482c <register_fini+0x14>)
    4822:	f000 f805 	bl	4830 <atexit>
    4826:	bd10      	pop	{r4, pc}
    4828:	00000000 	.word	0x00000000
    482c:	00004841 	.word	0x00004841

00004830 <atexit>:
    4830:	b510      	push	{r4, lr}
    4832:	0001      	movs	r1, r0
    4834:	2300      	movs	r3, #0
    4836:	2200      	movs	r2, #0
    4838:	2000      	movs	r0, #0
    483a:	f000 f815 	bl	4868 <__register_exitproc>
    483e:	bd10      	pop	{r4, pc}

00004840 <__libc_fini_array>:
    4840:	b570      	push	{r4, r5, r6, lr}
    4842:	4c07      	ldr	r4, [pc, #28]	; (4860 <__libc_fini_array+0x20>)
    4844:	4d07      	ldr	r5, [pc, #28]	; (4864 <__libc_fini_array+0x24>)
    4846:	1b64      	subs	r4, r4, r5
    4848:	10a4      	asrs	r4, r4, #2
    484a:	d005      	beq.n	4858 <__libc_fini_array+0x18>
    484c:	3c01      	subs	r4, #1
    484e:	00a3      	lsls	r3, r4, #2
    4850:	58eb      	ldr	r3, [r5, r3]
    4852:	4798      	blx	r3
    4854:	2c00      	cmp	r4, #0
    4856:	d1f9      	bne.n	484c <__libc_fini_array+0xc>
    4858:	f000 f954 	bl	4b04 <_fini>
    485c:	bd70      	pop	{r4, r5, r6, pc}
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	00004b14 	.word	0x00004b14
    4864:	00004b10 	.word	0x00004b10

00004868 <__register_exitproc>:
    4868:	b5f0      	push	{r4, r5, r6, r7, lr}
    486a:	46d6      	mov	lr, sl
    486c:	464f      	mov	r7, r9
    486e:	4646      	mov	r6, r8
    4870:	4698      	mov	r8, r3
    4872:	4b22      	ldr	r3, [pc, #136]	; (48fc <__register_exitproc+0x94>)
    4874:	b5c0      	push	{r6, r7, lr}
    4876:	0006      	movs	r6, r0
    4878:	6818      	ldr	r0, [r3, #0]
    487a:	4699      	mov	r9, r3
    487c:	000f      	movs	r7, r1
    487e:	4692      	mov	sl, r2
    4880:	f7ff ff50 	bl	4724 <__retarget_lock_acquire_recursive>
    4884:	4b1e      	ldr	r3, [pc, #120]	; (4900 <__register_exitproc+0x98>)
    4886:	681d      	ldr	r5, [r3, #0]
    4888:	2d00      	cmp	r5, #0
    488a:	d02d      	beq.n	48e8 <__register_exitproc+0x80>
    488c:	686c      	ldr	r4, [r5, #4]
    488e:	2c1f      	cmp	r4, #31
    4890:	dc2d      	bgt.n	48ee <__register_exitproc+0x86>
    4892:	2e00      	cmp	r6, #0
    4894:	d10e      	bne.n	48b4 <__register_exitproc+0x4c>
    4896:	1c63      	adds	r3, r4, #1
    4898:	606b      	str	r3, [r5, #4]
    489a:	464b      	mov	r3, r9
    489c:	3402      	adds	r4, #2
    489e:	00a4      	lsls	r4, r4, #2
    48a0:	6818      	ldr	r0, [r3, #0]
    48a2:	5167      	str	r7, [r4, r5]
    48a4:	f7ff ff40 	bl	4728 <__retarget_lock_release_recursive>
    48a8:	2000      	movs	r0, #0
    48aa:	bce0      	pop	{r5, r6, r7}
    48ac:	46ba      	mov	sl, r7
    48ae:	46b1      	mov	r9, r6
    48b0:	46a8      	mov	r8, r5
    48b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48b4:	2288      	movs	r2, #136	; 0x88
    48b6:	4651      	mov	r1, sl
    48b8:	0028      	movs	r0, r5
    48ba:	00a3      	lsls	r3, r4, #2
    48bc:	18eb      	adds	r3, r5, r3
    48be:	5099      	str	r1, [r3, r2]
    48c0:	3a87      	subs	r2, #135	; 0x87
    48c2:	40a2      	lsls	r2, r4
    48c4:	3089      	adds	r0, #137	; 0x89
    48c6:	30ff      	adds	r0, #255	; 0xff
    48c8:	6801      	ldr	r1, [r0, #0]
    48ca:	4311      	orrs	r1, r2
    48cc:	6001      	str	r1, [r0, #0]
    48ce:	2184      	movs	r1, #132	; 0x84
    48d0:	4640      	mov	r0, r8
    48d2:	0049      	lsls	r1, r1, #1
    48d4:	5058      	str	r0, [r3, r1]
    48d6:	2e02      	cmp	r6, #2
    48d8:	d1dd      	bne.n	4896 <__register_exitproc+0x2e>
    48da:	0029      	movs	r1, r5
    48dc:	318d      	adds	r1, #141	; 0x8d
    48de:	31ff      	adds	r1, #255	; 0xff
    48e0:	680b      	ldr	r3, [r1, #0]
    48e2:	4313      	orrs	r3, r2
    48e4:	600b      	str	r3, [r1, #0]
    48e6:	e7d6      	b.n	4896 <__register_exitproc+0x2e>
    48e8:	4d06      	ldr	r5, [pc, #24]	; (4904 <__register_exitproc+0x9c>)
    48ea:	601d      	str	r5, [r3, #0]
    48ec:	e7ce      	b.n	488c <__register_exitproc+0x24>
    48ee:	464b      	mov	r3, r9
    48f0:	6818      	ldr	r0, [r3, #0]
    48f2:	f7ff ff19 	bl	4728 <__retarget_lock_release_recursive>
    48f6:	2001      	movs	r0, #1
    48f8:	4240      	negs	r0, r0
    48fa:	e7d6      	b.n	48aa <__register_exitproc+0x42>
    48fc:	20000054 	.word	0x20000054
    4900:	20000628 	.word	0x20000628
    4904:	2000062c 	.word	0x2000062c
    4908:	40000000 	.word	0x40000000
    490c:	00000001 	.word	0x00000001
    4910:	80000000 	.word	0x80000000
    4914:	00000001 	.word	0x00000001

00004918 <dma_spi_desc>:
    4918:	08070100 00000001                       ........

00004920 <lipsum>:
    4920:	65726f4c 7069206d 206d7573 6f6c6f64     Lorem ipsum dolo
    4930:	69732072 6d612074 202c7465 736e6f63     r sit amet, cons
    4940:	65746365 20727574 70696461 69637369     ectetur adipisci
    4950:	6520676e 2e74696c 73754620 6d206563     ng elit. Fusce m
    4960:	6d697861 64207375 62697061 6e207375     aximus dapibus n
    4970:	2c697369 63656e20 61726520 75632074     isi, nec erat cu
    4980:	2e656172                                 rae..

00004985 <zero>:
    4985:	88000000 ac000016 8c000016 90000016     ................
    4995:	94000016 98000016 9c000016 a2000016     ................
    49a5:	dc000016 f000001c b600001c f000001d     ................
    49b5:	b600001c fc00001d 0800001c b600001d     ................
    49c5:	5800001d 6c00001d b600001d 9600001d     ...X...l........
    49d5:	3000001d 34333231 38373635 43424139     ...0123456789ABC
    49e5:	48474644 4d4c4b4a 5251504e 57565453     DFGHJKLMNPQRSTVW
    49f5:	005a5958 46000000 656c6e69 6c422079     XYZ....Finley Bl
    4a05:	656e6961 47000000 0032434e               aine...GNC2....

00004a14 <language_string>:
    4a14:	04090304                                ....

00004a18 <device_descriptor>:
    4a18:	02000112 400102ef 000e1209 02010200     .......@........
    4a28:	                                         ..

00004a2a <usb_num_endpoints>:
    4a2a:	2e2e0003 2d2d2d2e 002e2e2e 29960000     .....---.......)
    4a3a:	2a280000 2a360000 2a440000 2a520000     ..(*..6*..D*..R*
    4a4a:	2a600000 299c0000 00000000 00000000     ..`*...)........
    4a5a:	00000000 2c050000 00060000               .......,......

00004a68 <time_ticks_us_mult>:
    4a68:	00000030                                0...

00004a6c <time_ticks_ms_mult>:
    4a6c:	0000bb80                                ....

00004a70 <time_ticks_s_mult>:
    4a70:	02dc6c00 00003cfe 00003c2e 00003c46     .l...<...<..F<..
    4a80:	00003c64 00003c46 00003ca8 00003c46     d<..F<...<..F<..
    4a90:	00003c64 00003c2e 00003c2e 00003ca8     d<...<...<...<..
    4aa0:	00003c64 00003c4e 00003c4e 00003c4e     d<..N<..N<..N<..
    4ab0:	00003cb2 00003c2e 00003c2e 00003c46     .<...<...<..F<..
    4ac0:	00003d3c 00003c46 00003ca8 00003c46     <=..F<...<..F<..
    4ad0:	00003d3c 00003c2e 00003c2e 00003ca8     <=...<...<...<..
    4ae0:	00003d3c 00003c4e 00003c4e 00003c4e     <=..N<..N<..N<..

00004af0 <_init>:
    4af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4af2:	46c0      	nop			; (mov r8, r8)
    4af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4af6:	bc08      	pop	{r3}
    4af8:	469e      	mov	lr, r3
    4afa:	4770      	bx	lr

00004afc <__init_array_start>:
    4afc:	00004819 	.word	0x00004819

00004b00 <__frame_dummy_init_array_entry>:
    4b00:	0000012d                                -...

00004b04 <_fini>:
    4b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b0a:	bc08      	pop	{r3}
    4b0c:	469e      	mov	lr, r3
    4b0e:	4770      	bx	lr

00004b10 <__do_global_dtors_aux_fini_array_entry>:
    4b10:	0101 0000                                   ....
