
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005990  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a4  20000000  00005990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007bc  200000b0  00005a40  000200a4  2**4
                  ALLOC
  3 .stack        00002004  2000086c  000061fc  000200a4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c221  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00006521  00000000  00000000  0003c339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 0000737f  00000000  00000000  0004285a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000e18  00000000  00000000  00049be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 00001030  00000000  00000000  0004a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  0000a03a  00000000  00000000  0004ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0001c0f4  00000000  00000000  00055a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b5bc5  00000000  00000000  00071b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001e70  00000000  00000000  0012771c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  0012958c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
    eeprom_read_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}

bool save_global(Global_Variable_IDs id) {
       0:	70 28 00 20 55 01 00 00 51 01 00 00 51 01 00 00     p(. U...Q...Q...
	...
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
    if (!get_address_from_id(type, id, &address, &size)) return false;
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...
    EEPROM_Request request;
    eeprom_write_request(&request, eeprom_address, address, size);
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
    eeprom_wait_until_done(&request);
    return true;
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      5c:	d9 40 00 00 51 01 00 00 51 01 00 00 51 01 00 00     .@..Q...Q...Q...
	// send adc read command
	spi_command(desc->sercom, BARO_ADC_READ);
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
	uint8_t data1 = spi_command(desc->sercom, 0);
	uint8_t data2 = spi_command(desc->sercom, 0);
      6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      8c:	39 2f 00 00 51 01 00 00 51 01 00 00 51 01 00 00     9/..Q...Q...Q...
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	00005990 	.word	0x00005990
      d0:	00005990 	.word	0x00005990
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	00005990 	.word	0x00005990
      f8:	00005990 	.word	0x00005990
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	200000b0 	.word	0x200000b0
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	00005990 	.word	0x00005990

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	200000b4 	.word	0x200000b4
     14c:	00005990 	.word	0x00005990

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	00005990 	.word	0x00005990
     1a4:	20000000 	.word	0x20000000
     1a8:	200000a4 	.word	0x200000a4
     1ac:	200000b0 	.word	0x200000b0
     1b0:	2000086c 	.word	0x2000086c
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	00005325 	.word	0x00005325
     1c4:	00000000 	.word	0x00000000
     1c8:	00002ec5 	.word	0x00002ec5

000001cc <getGlobalHash>:
uint8_t rxframe[GNCLINK_FRAME_TOTAL_LENGTH];
uint8_t txframe[GNCLINK_FRAME_TOTAL_LENGTH];

extern void SOS();

bool getGlobalHash() {
     1cc:	b510      	push	{r4, lr}
    uint32_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     1ce:	4c06      	ldr	r4, [pc, #24]	; (1e8 <getGlobalHash+0x1c>)
     1d0:	0020      	movs	r0, r4
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <getGlobalHash+0x20>)
     1d4:	4798      	blx	r3
    *payload = __GLOBAL_HASH;
     1d6:	4b06      	ldr	r3, [pc, #24]	; (1f0 <getGlobalHash+0x24>)
     1d8:	6003      	str	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetGlobalHash, GNClink_PacketFlags_Response, 4)) return false;
     1da:	2304      	movs	r3, #4
     1dc:	2202      	movs	r2, #2
     1de:	2101      	movs	r1, #1
     1e0:	0020      	movs	r0, r4
     1e2:	4c04      	ldr	r4, [pc, #16]	; (1f4 <getGlobalHash+0x28>)
     1e4:	47a0      	blx	r4
    return true;
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	200000cc 	.word	0x200000cc
     1ec:	000041e1 	.word	0x000041e1
     1f0:	9fc0b1d3 	.word	0x9fc0b1d3
     1f4:	000041e5 	.word	0x000041e5

000001f8 <getValueList>:

bool getValueList() {
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46c6      	mov	lr, r8
     1fc:	b500      	push	{lr}
     1fe:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     200:	4d1a      	ldr	r5, [pc, #104]	; (26c <getValueList+0x74>)
     202:	0028      	movs	r0, r5
     204:	3040      	adds	r0, #64	; 0x40
     206:	4c1a      	ldr	r4, [pc, #104]	; (270 <getValueList+0x78>)
     208:	47a0      	blx	r4
     20a:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     20c:	0028      	movs	r0, r5
     20e:	47a0      	blx	r4
     210:	4680      	mov	r8, r0
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     212:	783e      	ldrb	r6, [r7, #0]
     214:	b2f6      	uxtb	r6, r6
    if (IDCount > (GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1) / 2) {
     216:	2e1d      	cmp	r6, #29
     218:	d825      	bhi.n	266 <getValueList+0x6e>
        // too many IDs, do something...
        return false;
    }

    int payloadIndex = 0;
    for (int index = 0; index < IDCount; ++index) {
     21a:	2400      	movs	r4, #0
    int payloadIndex = 0;
     21c:	2500      	movs	r5, #0
     21e:	e007      	b.n	230 <getValueList+0x38>
            // no more space, do something...
            return false;
        }

        // copy value to payload
        memcpy(&txpayload[payloadIndex], address, size);
     220:	4643      	mov	r3, r8
     222:	1958      	adds	r0, r3, r5
     224:	9900      	ldr	r1, [sp, #0]
     226:	4b13      	ldr	r3, [pc, #76]	; (274 <getValueList+0x7c>)
     228:	4798      	blx	r3
        payloadIndex += size;
     22a:	9b01      	ldr	r3, [sp, #4]
     22c:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     22e:	3401      	adds	r4, #1
     230:	42b4      	cmp	r4, r6
     232:	da11      	bge.n	258 <getValueList+0x60>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     234:	0063      	lsls	r3, r4, #1
     236:	18fb      	adds	r3, r7, r3
     238:	7858      	ldrb	r0, [r3, #1]
        if (!get_global_address_size(ID, &address, &size)) {
     23a:	aa01      	add	r2, sp, #4
     23c:	4669      	mov	r1, sp
     23e:	4b0e      	ldr	r3, [pc, #56]	; (278 <getValueList+0x80>)
     240:	4798      	blx	r3
     242:	2800      	cmp	r0, #0
     244:	d003      	beq.n	24e <getValueList+0x56>
        if (payloadIndex + size > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     246:	9a01      	ldr	r2, [sp, #4]
     248:	1953      	adds	r3, r2, r5
     24a:	2b3b      	cmp	r3, #59	; 0x3b
     24c:	d9e8      	bls.n	220 <getValueList+0x28>
            return false;
     24e:	2000      	movs	r0, #0
    }

    // construct packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
    return true;
}
     250:	b002      	add	sp, #8
     252:	bc80      	pop	{r7}
     254:	46b8      	mov	r8, r7
     256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
     258:	4804      	ldr	r0, [pc, #16]	; (26c <getValueList+0x74>)
     25a:	002b      	movs	r3, r5
     25c:	2202      	movs	r2, #2
     25e:	2102      	movs	r1, #2
     260:	4c06      	ldr	r4, [pc, #24]	; (27c <getValueList+0x84>)
     262:	47a0      	blx	r4
     264:	e7f4      	b.n	250 <getValueList+0x58>
        return false;
     266:	2000      	movs	r0, #0
     268:	e7f2      	b.n	250 <getValueList+0x58>
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	200000cc 	.word	0x200000cc
     270:	000041e1 	.word	0x000041e1
     274:	00005375 	.word	0x00005375
     278:	00000629 	.word	0x00000629
     27c:	000041e5 	.word	0x000041e5

00000280 <getValueCount>:

bool getValueCount() {
     280:	b510      	push	{r4, lr}
    uint16_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     282:	4c06      	ldr	r4, [pc, #24]	; (29c <getValueCount+0x1c>)
     284:	0020      	movs	r0, r4
     286:	4b06      	ldr	r3, [pc, #24]	; (2a0 <getValueCount+0x20>)
     288:	4798      	blx	r3
    *payload = __GLOBAL_ID_END - __GLOBAL_ID_START;
     28a:	2311      	movs	r3, #17
     28c:	8003      	strh	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueCount, GNClink_PacketFlags_Response, 2)) return false;
     28e:	3b0f      	subs	r3, #15
     290:	2202      	movs	r2, #2
     292:	2106      	movs	r1, #6
     294:	0020      	movs	r0, r4
     296:	4c03      	ldr	r4, [pc, #12]	; (2a4 <getValueCount+0x24>)
     298:	47a0      	blx	r4
    return true;
}
     29a:	bd10      	pop	{r4, pc}
     29c:	200000cc 	.word	0x200000cc
     2a0:	000041e1 	.word	0x000041e1
     2a4:	000041e5 	.word	0x000041e5

000002a8 <getValueName>:

bool getValueName() {
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	b082      	sub	sp, #8
    uint16_t* rxpayload = (uint16_t*)GNClink_Get_Packet_Payload_Pointer(rxpacket);
     2ac:	4e14      	ldr	r6, [pc, #80]	; (300 <getValueName+0x58>)
     2ae:	0030      	movs	r0, r6
     2b0:	3040      	adds	r0, #64	; 0x40
     2b2:	4d14      	ldr	r5, [pc, #80]	; (304 <getValueName+0x5c>)
     2b4:	47a8      	blx	r5
     2b6:	0004      	movs	r4, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     2b8:	0030      	movs	r0, r6
     2ba:	47a8      	blx	r5
     2bc:	0005      	movs	r5, r0

    // get variable ID
    uint16_t id = *rxpayload;
     2be:	8824      	ldrh	r4, [r4, #0]

    int length = 0;
     2c0:	2300      	movs	r3, #0
     2c2:	9301      	str	r3, [sp, #4]

    __Global_Variable_Types type;
    if (!get_global_type_from_id(id, &type)) return false;
     2c4:	b2e4      	uxtb	r4, r4
     2c6:	466b      	mov	r3, sp
     2c8:	1cd9      	adds	r1, r3, #3
     2ca:	0020      	movs	r0, r4
     2cc:	4b0e      	ldr	r3, [pc, #56]	; (308 <getValueName+0x60>)
     2ce:	4798      	blx	r3
     2d0:	2800      	cmp	r0, #0
     2d2:	d101      	bne.n	2d8 <getValueName+0x30>

    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;

    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
    return true;
}
     2d4:	b002      	add	sp, #8
     2d6:	bd70      	pop	{r4, r5, r6, pc}
    *txpayload = (uint8_t*)type;
     2d8:	466b      	mov	r3, sp
     2da:	3303      	adds	r3, #3
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	702b      	strb	r3, [r5, #0]
    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;
     2e0:	1c69      	adds	r1, r5, #1
     2e2:	233a      	movs	r3, #58	; 0x3a
     2e4:	aa01      	add	r2, sp, #4
     2e6:	0020      	movs	r0, r4
     2e8:	4c08      	ldr	r4, [pc, #32]	; (30c <getValueName+0x64>)
     2ea:	47a0      	blx	r4
     2ec:	2800      	cmp	r0, #0
     2ee:	d0f1      	beq.n	2d4 <getValueName+0x2c>
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
     2f0:	9b01      	ldr	r3, [sp, #4]
     2f2:	3301      	adds	r3, #1
     2f4:	4802      	ldr	r0, [pc, #8]	; (300 <getValueName+0x58>)
     2f6:	2202      	movs	r2, #2
     2f8:	2107      	movs	r1, #7
     2fa:	4c05      	ldr	r4, [pc, #20]	; (310 <getValueName+0x68>)
     2fc:	47a0      	blx	r4
     2fe:	e7e9      	b.n	2d4 <getValueName+0x2c>
     300:	200000cc 	.word	0x200000cc
     304:	000041e1 	.word	0x000041e1
     308:	000005ed 	.word	0x000005ed
     30c:	00000661 	.word	0x00000661
     310:	000041e5 	.word	0x000041e5

00000314 <evaluatePacket>:

bool evaluatePacket() {
     314:	b510      	push	{r4, lr}
    // check packet
    if (!GNClink_Check_Packet(rxpacket)) {
     316:	4815      	ldr	r0, [pc, #84]	; (36c <evaluatePacket+0x58>)
     318:	4b15      	ldr	r3, [pc, #84]	; (370 <evaluatePacket+0x5c>)
     31a:	4798      	blx	r3
     31c:	2800      	cmp	r0, #0
     31e:	d006      	beq.n	32e <evaluatePacket+0x1a>
    // reset_process(&bz);
    // bz_count = (int)(*GNClink_Get_Packet_Payload_Pointer(rxpacket));
    // dispatch_process(&bz);

    // check packet is not response packet
    GNClink_PacketFlags flags = GNClink_Get_Packet_Flags(rxpacket);
     320:	4812      	ldr	r0, [pc, #72]	; (36c <evaluatePacket+0x58>)
     322:	4b14      	ldr	r3, [pc, #80]	; (374 <evaluatePacket+0x60>)
     324:	4798      	blx	r3
    if (flags & GNClink_PacketFlags_Response) return false;
     326:	0780      	lsls	r0, r0, #30
     328:	d504      	bpl.n	334 <evaluatePacket+0x20>
     32a:	2000      	movs	r0, #0
        default:
        return false;
    }

    return false;
}
     32c:	bd10      	pop	{r4, pc}
        SOS();
     32e:	4b12      	ldr	r3, [pc, #72]	; (378 <evaluatePacket+0x64>)
     330:	4798      	blx	r3
     332:	e7f5      	b.n	320 <evaluatePacket+0xc>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     334:	480d      	ldr	r0, [pc, #52]	; (36c <evaluatePacket+0x58>)
     336:	4b11      	ldr	r3, [pc, #68]	; (37c <evaluatePacket+0x68>)
     338:	4798      	blx	r3
     33a:	2806      	cmp	r0, #6
     33c:	d013      	beq.n	366 <evaluatePacket+0x52>
     33e:	d808      	bhi.n	352 <evaluatePacket+0x3e>
     340:	2801      	cmp	r0, #1
     342:	d00d      	beq.n	360 <evaluatePacket+0x4c>
     344:	2802      	cmp	r0, #2
     346:	d102      	bne.n	34e <evaluatePacket+0x3a>
        return getValueList();
     348:	4b0d      	ldr	r3, [pc, #52]	; (380 <evaluatePacket+0x6c>)
     34a:	4798      	blx	r3
     34c:	e7ee      	b.n	32c <evaluatePacket+0x18>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     34e:	2000      	movs	r0, #0
     350:	e7ec      	b.n	32c <evaluatePacket+0x18>
     352:	2807      	cmp	r0, #7
     354:	d102      	bne.n	35c <evaluatePacket+0x48>
        return getValueName();
     356:	4b0b      	ldr	r3, [pc, #44]	; (384 <evaluatePacket+0x70>)
     358:	4798      	blx	r3
     35a:	e7e7      	b.n	32c <evaluatePacket+0x18>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     35c:	2000      	movs	r0, #0
     35e:	e7e5      	b.n	32c <evaluatePacket+0x18>
        return getGlobalHash();
     360:	4b09      	ldr	r3, [pc, #36]	; (388 <evaluatePacket+0x74>)
     362:	4798      	blx	r3
     364:	e7e2      	b.n	32c <evaluatePacket+0x18>
        return getValueCount();
     366:	4b09      	ldr	r3, [pc, #36]	; (38c <evaluatePacket+0x78>)
     368:	4798      	blx	r3
     36a:	e7df      	b.n	32c <evaluatePacket+0x18>
     36c:	2000010c 	.word	0x2000010c
     370:	00004211 	.word	0x00004211
     374:	00004245 	.word	0x00004245
     378:	00002ea1 	.word	0x00002ea1
     37c:	00004241 	.word	0x00004241
     380:	000001f9 	.word	0x000001f9
     384:	000002a9 	.word	0x000002a9
     388:	000001cd 	.word	0x000001cd
     38c:	00000281 	.word	0x00000281

00000390 <get_packet>:

// returns false if resend is being requested
bool get_packet() {
     390:	b5f0      	push	{r4, r5, r6, r7, lr}
     392:	b083      	sub	sp, #12
    // set previous received packets to zero to avoid any propagation
    memset(rxpacket, 0, sizeof(rxpacket));
     394:	4835      	ldr	r0, [pc, #212]	; (46c <get_packet+0xdc>)
     396:	2240      	movs	r2, #64	; 0x40
     398:	2100      	movs	r1, #0
     39a:	4c35      	ldr	r4, [pc, #212]	; (470 <get_packet+0xe0>)
     39c:	47a0      	blx	r4
    memset(rxframe, 0, sizeof(rxframe));
     39e:	4835      	ldr	r0, [pc, #212]	; (474 <get_packet+0xe4>)
     3a0:	2214      	movs	r2, #20
     3a2:	2100      	movs	r1, #0
     3a4:	47a0      	blx	r4

    bool receivedFrames[GNCLINK_MAX_FRAMES_PER_PACKET];
    for (int i = 0; i < GNCLINK_MAX_FRAMES_PER_PACKET; ++i) receivedFrames[i] = false;
     3a6:	2300      	movs	r3, #0
     3a8:	e003      	b.n	3b2 <get_packet+0x22>
     3aa:	aa01      	add	r2, sp, #4
     3ac:	2100      	movs	r1, #0
     3ae:	54d1      	strb	r1, [r2, r3]
     3b0:	3301      	adds	r3, #1
     3b2:	2b03      	cmp	r3, #3
     3b4:	ddf9      	ble.n	3aa <get_packet+0x1a>
     3b6:	e02a      	b.n	40e <get_packet+0x7e>
            continue;
        }

        // check if frame is requesting resend
        if (GNClink_Frame_RequestResend(rxframe)) {
            return false;
     3b8:	2500      	movs	r5, #0
            // packet fully received
            else break;
        }
    }
    return true;
}
     3ba:	0028      	movs	r0, r5
     3bc:	b003      	add	sp, #12
     3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     3c0:	3401      	adds	r4, #1
     3c2:	482c      	ldr	r0, [pc, #176]	; (474 <get_packet+0xe4>)
     3c4:	4b2c      	ldr	r3, [pc, #176]	; (478 <get_packet+0xe8>)
     3c6:	4798      	blx	r3
     3c8:	42a0      	cmp	r0, r4
     3ca:	dd07      	ble.n	3dc <get_packet+0x4c>
                if (!receivedFrames[i]) payload->resendIndexes[resendCount++] = (uint8_t)i;
     3cc:	ab01      	add	r3, sp, #4
     3ce:	5d1b      	ldrb	r3, [r3, r4]
     3d0:	2b00      	cmp	r3, #0
     3d2:	d1f5      	bne.n	3c0 <get_packet+0x30>
     3d4:	19bb      	adds	r3, r7, r6
     3d6:	705c      	strb	r4, [r3, #1]
     3d8:	3601      	adds	r6, #1
     3da:	e7f1      	b.n	3c0 <get_packet+0x30>
            if (resendCount) {
     3dc:	2e00      	cmp	r6, #0
     3de:	d0ec      	beq.n	3ba <get_packet+0x2a>
                payload->resendCount = (uint8_t)resendCount;
     3e0:	703e      	strb	r6, [r7, #0]
                GNClink_Construct_RequestResendFrame(txframe);
     3e2:	4d26      	ldr	r5, [pc, #152]	; (47c <get_packet+0xec>)
     3e4:	0028      	movs	r0, r5
     3e6:	4b26      	ldr	r3, [pc, #152]	; (480 <get_packet+0xf0>)
     3e8:	4798      	blx	r3
                led_on(); // only flash if resend is being performed
     3ea:	2480      	movs	r4, #128	; 0x80
     3ec:	03e4      	lsls	r4, r4, #15
     3ee:	0021      	movs	r1, r4
     3f0:	2001      	movs	r0, #1
     3f2:	4b24      	ldr	r3, [pc, #144]	; (484 <get_packet+0xf4>)
     3f4:	4798      	blx	r3
                serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     3f6:	2214      	movs	r2, #20
     3f8:	0029      	movs	r1, r5
     3fa:	2000      	movs	r0, #0
     3fc:	4b22      	ldr	r3, [pc, #136]	; (488 <get_packet+0xf8>)
     3fe:	4798      	blx	r3
                serial_write_wait_until_complete(PORT0);
     400:	2000      	movs	r0, #0
     402:	4b22      	ldr	r3, [pc, #136]	; (48c <get_packet+0xfc>)
     404:	4798      	blx	r3
                led_off();
     406:	0021      	movs	r1, r4
     408:	2001      	movs	r0, #1
     40a:	4b21      	ldr	r3, [pc, #132]	; (490 <get_packet+0x100>)
     40c:	4798      	blx	r3
        serial_read_start(PORT0, rxframe, GNCLINK_FRAME_TOTAL_LENGTH);
     40e:	4c19      	ldr	r4, [pc, #100]	; (474 <get_packet+0xe4>)
     410:	2214      	movs	r2, #20
     412:	0021      	movs	r1, r4
     414:	2000      	movs	r0, #0
     416:	4b1f      	ldr	r3, [pc, #124]	; (494 <get_packet+0x104>)
     418:	4798      	blx	r3
        serial_read_wait_until_complete_or_timeout(PORT0, 300);
     41a:	2196      	movs	r1, #150	; 0x96
     41c:	0049      	lsls	r1, r1, #1
     41e:	2000      	movs	r0, #0
     420:	4b1d      	ldr	r3, [pc, #116]	; (498 <get_packet+0x108>)
     422:	4798      	blx	r3
        if (!GNClink_Check_Frame(rxframe)) {
     424:	0020      	movs	r0, r4
     426:	4b1d      	ldr	r3, [pc, #116]	; (49c <get_packet+0x10c>)
     428:	4798      	blx	r3
     42a:	1e05      	subs	r5, r0, #0
     42c:	d0ef      	beq.n	40e <get_packet+0x7e>
        if (GNClink_Frame_RequestResend(rxframe)) {
     42e:	4811      	ldr	r0, [pc, #68]	; (474 <get_packet+0xe4>)
     430:	4b1b      	ldr	r3, [pc, #108]	; (4a0 <get_packet+0x110>)
     432:	4798      	blx	r3
     434:	2800      	cmp	r0, #0
     436:	d1bf      	bne.n	3b8 <get_packet+0x28>
        receivedFrames[GNClink_Get_Frame_Index(rxframe)] = true;
     438:	4c0e      	ldr	r4, [pc, #56]	; (474 <get_packet+0xe4>)
     43a:	0020      	movs	r0, r4
     43c:	4b0e      	ldr	r3, [pc, #56]	; (478 <get_packet+0xe8>)
     43e:	4798      	blx	r3
     440:	2301      	movs	r3, #1
     442:	aa01      	add	r2, sp, #4
     444:	5413      	strb	r3, [r2, r0]
        bool moreFrames = true;
     446:	466a      	mov	r2, sp
     448:	70d3      	strb	r3, [r2, #3]
        GNClink_Reconstruct_Packet_From_Frames(rxframe, rxpacket, &moreFrames);
     44a:	4908      	ldr	r1, [pc, #32]	; (46c <get_packet+0xdc>)
     44c:	3203      	adds	r2, #3
     44e:	0020      	movs	r0, r4
     450:	4b14      	ldr	r3, [pc, #80]	; (4a4 <get_packet+0x114>)
     452:	4798      	blx	r3
        if (!moreFrames) {
     454:	466b      	mov	r3, sp
     456:	78db      	ldrb	r3, [r3, #3]
     458:	2b00      	cmp	r3, #0
     45a:	d1d8      	bne.n	40e <get_packet+0x7e>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(txframe);
     45c:	4807      	ldr	r0, [pc, #28]	; (47c <get_packet+0xec>)
     45e:	4b12      	ldr	r3, [pc, #72]	; (4a8 <get_packet+0x118>)
     460:	4798      	blx	r3
     462:	0007      	movs	r7, r0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     464:	2400      	movs	r4, #0
            int resendCount = 0;
     466:	2600      	movs	r6, #0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     468:	e7ab      	b.n	3c2 <get_packet+0x32>
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	2000010c 	.word	0x2000010c
     470:	0000527d 	.word	0x0000527d
     474:	2000014c 	.word	0x2000014c
     478:	00004307 	.word	0x00004307
     47c:	20000160 	.word	0x20000160
     480:	0000430d 	.word	0x0000430d
     484:	00001c59 	.word	0x00001c59
     488:	00000bf1 	.word	0x00000bf1
     48c:	00000c79 	.word	0x00000c79
     490:	00001c69 	.word	0x00001c69
     494:	00000cd9 	.word	0x00000cd9
     498:	00000dc1 	.word	0x00000dc1
     49c:	000042d1 	.word	0x000042d1
     4a0:	000042fd 	.word	0x000042fd
     4a4:	0000432d 	.word	0x0000432d
     4a8:	00004249 	.word	0x00004249

000004ac <send_packet>:

bool send_packet(bool resendFrames) {
     4ac:	b570      	push	{r4, r5, r6, lr}
     4ae:	b084      	sub	sp, #16
     4b0:	0005      	movs	r5, r0
    int count = 0;
    bool moreFrames = true;
     4b2:	230f      	movs	r3, #15
     4b4:	446b      	add	r3, sp
     4b6:	2201      	movs	r2, #1
     4b8:	701a      	strb	r2, [r3, #0]
    int count = 0;
     4ba:	2400      	movs	r4, #0
    while (moreFrames) {
     4bc:	e01a      	b.n	4f4 <send_packet+0x48>
        // check if frames are being resent
        if (resendFrames) {
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
            // break if all have been sent
            if (count == payload->resendCount) break;
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     4be:	2202      	movs	r2, #2
     4c0:	e029      	b.n	516 <send_packet+0x6a>
        int frameIndex = count;
     4c2:	0023      	movs	r3, r4
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     4c4:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
        }

        // send frames
        GNClink_Get_Frame(txpacket, txframe, frameFlags, frameIndex, &moreFrames);
     4c6:	491a      	ldr	r1, [pc, #104]	; (530 <send_packet+0x84>)
     4c8:	481a      	ldr	r0, [pc, #104]	; (534 <send_packet+0x88>)
     4ca:	260f      	movs	r6, #15
     4cc:	446e      	add	r6, sp
     4ce:	9600      	str	r6, [sp, #0]
     4d0:	4e19      	ldr	r6, [pc, #100]	; (538 <send_packet+0x8c>)
     4d2:	47b0      	blx	r6

        

        // send frame
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     4d4:	2d00      	cmp	r5, #0
     4d6:	d121      	bne.n	51c <send_packet+0x70>
        serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     4d8:	4915      	ldr	r1, [pc, #84]	; (530 <send_packet+0x84>)
     4da:	2214      	movs	r2, #20
     4dc:	2000      	movs	r0, #0
     4de:	4b17      	ldr	r3, [pc, #92]	; (53c <send_packet+0x90>)
     4e0:	4798      	blx	r3
        serial_write_wait_until_complete(PORT0);
     4e2:	2000      	movs	r0, #0
     4e4:	4b16      	ldr	r3, [pc, #88]	; (540 <send_packet+0x94>)
     4e6:	4798      	blx	r3
        led_off();
     4e8:	2180      	movs	r1, #128	; 0x80
     4ea:	03c9      	lsls	r1, r1, #15
     4ec:	2001      	movs	r0, #1
     4ee:	4b15      	ldr	r3, [pc, #84]	; (544 <send_packet+0x98>)
     4f0:	4798      	blx	r3

        ++count;
     4f2:	3401      	adds	r4, #1
    while (moreFrames) {
     4f4:	230f      	movs	r3, #15
     4f6:	446b      	add	r3, sp
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	2b00      	cmp	r3, #0
     4fc:	d014      	beq.n	528 <send_packet+0x7c>
        if (resendFrames) {
     4fe:	2d00      	cmp	r5, #0
     500:	d0df      	beq.n	4c2 <send_packet+0x16>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
     502:	4811      	ldr	r0, [pc, #68]	; (548 <send_packet+0x9c>)
     504:	4b11      	ldr	r3, [pc, #68]	; (54c <send_packet+0xa0>)
     506:	4798      	blx	r3
            if (count == payload->resendCount) break;
     508:	7803      	ldrb	r3, [r0, #0]
     50a:	42a3      	cmp	r3, r4
     50c:	d00c      	beq.n	528 <send_packet+0x7c>
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     50e:	3b01      	subs	r3, #1
     510:	42a3      	cmp	r3, r4
     512:	d0d4      	beq.n	4be <send_packet+0x12>
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     514:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
     516:	1900      	adds	r0, r0, r4
     518:	7843      	ldrb	r3, [r0, #1]
     51a:	e7d4      	b.n	4c6 <send_packet+0x1a>
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     51c:	2180      	movs	r1, #128	; 0x80
     51e:	03c9      	lsls	r1, r1, #15
     520:	2001      	movs	r0, #1
     522:	4b0b      	ldr	r3, [pc, #44]	; (550 <send_packet+0xa4>)
     524:	4798      	blx	r3
     526:	e7d7      	b.n	4d8 <send_packet+0x2c>
    }
    return true;
}
     528:	2001      	movs	r0, #1
     52a:	b004      	add	sp, #16
     52c:	bd70      	pop	{r4, r5, r6, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	20000160 	.word	0x20000160
     534:	200000cc 	.word	0x200000cc
     538:	0000424d 	.word	0x0000424d
     53c:	00000bf1 	.word	0x00000bf1
     540:	00000c79 	.word	0x00000c79
     544:	00001c69 	.word	0x00001c69
     548:	2000014c 	.word	0x2000014c
     54c:	00004249 	.word	0x00004249
     550:	00001c59 	.word	0x00001c59

00000554 <comms_loop>:

bool comms_loop() {
     554:	b510      	push	{r4, lr}
    bool run = true;
    while (run) {
     556:	e002      	b.n	55e <comms_loop+0xa>
        // get packet, resend if required
        while (!get_packet()) {
            send_packet(true);
     558:	2001      	movs	r0, #1
     55a:	4b07      	ldr	r3, [pc, #28]	; (578 <comms_loop+0x24>)
     55c:	4798      	blx	r3
        while (!get_packet()) {
     55e:	4b07      	ldr	r3, [pc, #28]	; (57c <comms_loop+0x28>)
     560:	4798      	blx	r3
     562:	2800      	cmp	r0, #0
     564:	d0f8      	beq.n	558 <comms_loop+0x4>
        }

        if (evaluatePacket()) {
     566:	4b06      	ldr	r3, [pc, #24]	; (580 <comms_loop+0x2c>)
     568:	4798      	blx	r3
     56a:	2800      	cmp	r0, #0
     56c:	d0f7      	beq.n	55e <comms_loop+0xa>
            send_packet(false);
     56e:	2000      	movs	r0, #0
     570:	4b01      	ldr	r3, [pc, #4]	; (578 <comms_loop+0x24>)
     572:	4798      	blx	r3
     574:	e7f3      	b.n	55e <comms_loop+0xa>
     576:	46c0      	nop			; (mov r8, r8)
     578:	000004ad 	.word	0x000004ad
     57c:	00000391 	.word	0x00000391
     580:	00000315 	.word	0x00000315

00000584 <get_address_from_id>:
    switch (type) {
     584:	2804      	cmp	r0, #4
     586:	d011      	beq.n	5ac <get_address_from_id+0x28>
     588:	280b      	cmp	r0, #11
     58a:	d01c      	beq.n	5c6 <get_address_from_id+0x42>
     58c:	2803      	cmp	r0, #3
     58e:	d001      	beq.n	594 <get_address_from_id+0x10>
}
     590:	2000      	movs	r0, #0
     592:	4770      	bx	lr
        if (id < __GLOBAL_I32_ID_START || id >= __GLOBAL_I32_ID_END) return false;
     594:	1e48      	subs	r0, r1, #1
     596:	b2c0      	uxtb	r0, r0
     598:	280b      	cmp	r0, #11
     59a:	d8f9      	bhi.n	590 <get_address_from_id+0xc>
        *size = 4;
     59c:	2004      	movs	r0, #4
     59e:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_I32_ID_START;
     5a0:	3901      	subs	r1, #1
        *address = &(globals.__GLOBAL_I32_START_VARIABLE) + index;
     5a2:	4b0f      	ldr	r3, [pc, #60]	; (5e0 <get_address_from_id+0x5c>)
     5a4:	0089      	lsls	r1, r1, #2
     5a6:	185b      	adds	r3, r3, r1
     5a8:	6013      	str	r3, [r2, #0]
        break;
     5aa:	e7f2      	b.n	592 <get_address_from_id+0xe>
        if (id < __GLOBAL_U32_ID_START || id >= __GLOBAL_U32_ID_END) return false;
     5ac:	0008      	movs	r0, r1
     5ae:	380d      	subs	r0, #13
     5b0:	b2c0      	uxtb	r0, r0
     5b2:	2801      	cmp	r0, #1
     5b4:	d8ec      	bhi.n	590 <get_address_from_id+0xc>
        *size = 4;
     5b6:	2004      	movs	r0, #4
     5b8:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U32_ID_START;
     5ba:	390d      	subs	r1, #13
        *address = &(globals.__GLOBAL_U32_START_VARIABLE) + index;
     5bc:	4b09      	ldr	r3, [pc, #36]	; (5e4 <get_address_from_id+0x60>)
     5be:	0089      	lsls	r1, r1, #2
     5c0:	185b      	adds	r3, r3, r1
     5c2:	6013      	str	r3, [r2, #0]
        break;
     5c4:	e7e5      	b.n	592 <get_address_from_id+0xe>
        if (id < __GLOBAL_BOOL_ID_START || id >= __GLOBAL_BOOL_ID_END) return false;
     5c6:	0008      	movs	r0, r1
     5c8:	380f      	subs	r0, #15
     5ca:	b2c0      	uxtb	r0, r0
     5cc:	2802      	cmp	r0, #2
     5ce:	d8df      	bhi.n	590 <get_address_from_id+0xc>
        *size = 1;
     5d0:	2001      	movs	r0, #1
     5d2:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_BOOL_ID_START;
     5d4:	390f      	subs	r1, #15
        *address = &(globals.__GLOBAL_BOOL_START_VARIABLE) + index;
     5d6:	4b04      	ldr	r3, [pc, #16]	; (5e8 <get_address_from_id+0x64>)
     5d8:	185b      	adds	r3, r3, r1
     5da:	6013      	str	r3, [r2, #0]
}
     5dc:	e7d9      	b.n	592 <get_address_from_id+0xe>
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	20000178 	.word	0x20000178
     5e4:	200001a8 	.word	0x200001a8
     5e8:	200001b0 	.word	0x200001b0

000005ec <get_global_type_from_id>:
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     5ec:	1e43      	subs	r3, r0, #1
     5ee:	b2db      	uxtb	r3, r3
     5f0:	2b10      	cmp	r3, #16
     5f2:	d817      	bhi.n	624 <get_global_type_from_id+0x38>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     5f4:	2800      	cmp	r0, #0
     5f6:	d009      	beq.n	60c <get_global_type_from_id+0x20>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     5f8:	280c      	cmp	r0, #12
     5fa:	d90b      	bls.n	614 <get_global_type_from_id+0x28>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     5fc:	280e      	cmp	r0, #14
     5fe:	d90d      	bls.n	61c <get_global_type_from_id+0x30>
    if (id - __GLOBAL_BOOL_ID_END < 0) {*type = __BOOL; return true;}
     600:	2811      	cmp	r0, #17
     602:	d810      	bhi.n	626 <get_global_type_from_id+0x3a>
     604:	230b      	movs	r3, #11
     606:	700b      	strb	r3, [r1, #0]
     608:	2001      	movs	r0, #1
     60a:	e00c      	b.n	626 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     60c:	2301      	movs	r3, #1
     60e:	700b      	strb	r3, [r1, #0]
     610:	3001      	adds	r0, #1
     612:	e008      	b.n	626 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     614:	2303      	movs	r3, #3
     616:	700b      	strb	r3, [r1, #0]
     618:	2001      	movs	r0, #1
     61a:	e004      	b.n	626 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     61c:	2304      	movs	r3, #4
     61e:	700b      	strb	r3, [r1, #0]
     620:	2001      	movs	r0, #1
     622:	e000      	b.n	626 <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     624:	2000      	movs	r0, #0
}
     626:	4770      	bx	lr

00000628 <get_global_address_size>:
bool get_global_address_size(Global_Variable_IDs id, void** address, int* size) {
     628:	b570      	push	{r4, r5, r6, lr}
     62a:	b082      	sub	sp, #8
     62c:	0004      	movs	r4, r0
     62e:	000d      	movs	r5, r1
     630:	0016      	movs	r6, r2
    if (!get_global_type_from_id(id, &type)) return false;
     632:	466b      	mov	r3, sp
     634:	1dd9      	adds	r1, r3, #7
     636:	4b08      	ldr	r3, [pc, #32]	; (658 <get_global_address_size+0x30>)
     638:	4798      	blx	r3
     63a:	2800      	cmp	r0, #0
     63c:	d102      	bne.n	644 <get_global_address_size+0x1c>
}
     63e:	2000      	movs	r0, #0
     640:	b002      	add	sp, #8
     642:	bd70      	pop	{r4, r5, r6, pc}
    if (!get_address_from_id(type, id, address, size)) return false;
     644:	466b      	mov	r3, sp
     646:	79d8      	ldrb	r0, [r3, #7]
     648:	0033      	movs	r3, r6
     64a:	002a      	movs	r2, r5
     64c:	0021      	movs	r1, r4
     64e:	4c03      	ldr	r4, [pc, #12]	; (65c <get_global_address_size+0x34>)
     650:	47a0      	blx	r4
     652:	2800      	cmp	r0, #0
     654:	d1f4      	bne.n	640 <get_global_address_size+0x18>
     656:	e7f2      	b.n	63e <get_global_address_size+0x16>
     658:	000005ed 	.word	0x000005ed
     65c:	00000585 	.word	0x00000585

00000660 <get_global_name>:
}

bool get_global_name(Global_Variable_IDs id, uint8_t* buffer, int* length, int maxLength) {
     660:	b5f0      	push	{r4, r5, r6, r7, lr}
     662:	46c6      	mov	lr, r8
     664:	b500      	push	{lr}
     666:	000d      	movs	r5, r1
     668:	0017      	movs	r7, r2
     66a:	001c      	movs	r4, r3
    bool ret = true;
    if (id >= __GLOBAL_ID_END) {
     66c:	2811      	cmp	r0, #17
     66e:	d817      	bhi.n	6a0 <get_global_name+0x40>
    bool ret = true;
     670:	2301      	movs	r3, #1
     672:	4698      	mov	r8, r3
        id = 0;
        ret = false;
    }

    *length = MIN_2(maxLength, strlen(global_variable_names[id]) + 1);
     674:	0006      	movs	r6, r0
     676:	4b0c      	ldr	r3, [pc, #48]	; (6a8 <get_global_name+0x48>)
     678:	0080      	lsls	r0, r0, #2
     67a:	58c0      	ldr	r0, [r0, r3]
     67c:	4b0b      	ldr	r3, [pc, #44]	; (6ac <get_global_name+0x4c>)
     67e:	4798      	blx	r3
     680:	3001      	adds	r0, #1
     682:	42a0      	cmp	r0, r4
     684:	d800      	bhi.n	688 <get_global_name+0x28>
     686:	0004      	movs	r4, r0
     688:	603c      	str	r4, [r7, #0]

    memcpy(buffer, global_variable_names[id], *length);
     68a:	4b07      	ldr	r3, [pc, #28]	; (6a8 <get_global_name+0x48>)
     68c:	00b6      	lsls	r6, r6, #2
     68e:	58f1      	ldr	r1, [r6, r3]
     690:	0022      	movs	r2, r4
     692:	0028      	movs	r0, r5
     694:	4b06      	ldr	r3, [pc, #24]	; (6b0 <get_global_name+0x50>)
     696:	4798      	blx	r3

    return ret;
}
     698:	4640      	mov	r0, r8
     69a:	bc80      	pop	{r7}
     69c:	46b8      	mov	r8, r7
     69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = false;
     6a0:	2300      	movs	r3, #0
     6a2:	4698      	mov	r8, r3
        id = 0;
     6a4:	2000      	movs	r0, #0
     6a6:	e7e5      	b.n	674 <get_global_name+0x14>
     6a8:	20000000 	.word	0x20000000
     6ac:	00005405 	.word	0x00005405
     6b0:	00005375 	.word	0x00005375

000006b4 <init_globals>:

bool init_globals() {
     6b4:	b570      	push	{r4, r5, r6, lr}
     6b6:	b08a      	sub	sp, #40	; 0x28
    // load header
    EEPROM_Request request;
    eeprom_read_request(&request, 0, &__eeprom_header, sizeof(__eeprom_header));
     6b8:	4c1b      	ldr	r4, [pc, #108]	; (728 <init_globals+0x74>)
     6ba:	0022      	movs	r2, r4
     6bc:	3240      	adds	r2, #64	; 0x40
     6be:	2308      	movs	r3, #8
     6c0:	2100      	movs	r1, #0
     6c2:	4668      	mov	r0, sp
     6c4:	4d19      	ldr	r5, [pc, #100]	; (72c <init_globals+0x78>)
     6c6:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     6c8:	4668      	mov	r0, sp
     6ca:	4b19      	ldr	r3, [pc, #100]	; (730 <init_globals+0x7c>)
     6cc:	4798      	blx	r3
    
    // check and modify header values
    if (__eeprom_header.GlobalHash != __GLOBAL_HASH) {
     6ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
     6d0:	4b18      	ldr	r3, [pc, #96]	; (734 <init_globals+0x80>)
     6d2:	429a      	cmp	r2, r3
     6d4:	d11c      	bne.n	710 <init_globals+0x5c>
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
        eeprom_wait_until_done(&request);
    }
    
    ++__eeprom_header.StartupCount;
     6d6:	4c14      	ldr	r4, [pc, #80]	; (728 <init_globals+0x74>)
     6d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
     6da:	3301      	adds	r3, #1
     6dc:	6463      	str	r3, [r4, #68]	; 0x44
    eeprom_write_request(&request, 4, &(__eeprom_header.StartupCount), 4);
     6de:	0022      	movs	r2, r4
     6e0:	3244      	adds	r2, #68	; 0x44
     6e2:	2304      	movs	r3, #4
     6e4:	2104      	movs	r1, #4
     6e6:	4668      	mov	r0, sp
     6e8:	4d13      	ldr	r5, [pc, #76]	; (738 <init_globals+0x84>)
     6ea:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     6ec:	4668      	mov	r0, sp
     6ee:	4d10      	ldr	r5, [pc, #64]	; (730 <init_globals+0x7c>)
     6f0:	47a8      	blx	r5

    // load globals
    eeprom_read_request(&request, __EEPROM_GLOBAL_VARIABLES_START_ADDRESS, &globals, sizeof(globals));
     6f2:	2340      	movs	r3, #64	; 0x40
     6f4:	0022      	movs	r2, r4
     6f6:	2120      	movs	r1, #32
     6f8:	4668      	mov	r0, sp
     6fa:	4e0c      	ldr	r6, [pc, #48]	; (72c <init_globals+0x78>)
     6fc:	47b0      	blx	r6
    eeprom_wait_until_done(&request);
     6fe:	4668      	mov	r0, sp
     700:	47a8      	blx	r5

    globals.GlobalHash = __eeprom_header.GlobalHash;
     702:	6c23      	ldr	r3, [r4, #64]	; 0x40
     704:	6323      	str	r3, [r4, #48]	; 0x30
    globals.StartupCount = __eeprom_header.StartupCount;
     706:	6c63      	ldr	r3, [r4, #68]	; 0x44
     708:	6363      	str	r3, [r4, #52]	; 0x34

    return true;
     70a:	2001      	movs	r0, #1
     70c:	b00a      	add	sp, #40	; 0x28
     70e:	bd70      	pop	{r4, r5, r6, pc}
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
     710:	4a05      	ldr	r2, [pc, #20]	; (728 <init_globals+0x74>)
     712:	6413      	str	r3, [r2, #64]	; 0x40
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
     714:	3240      	adds	r2, #64	; 0x40
     716:	2304      	movs	r3, #4
     718:	2100      	movs	r1, #0
     71a:	4668      	mov	r0, sp
     71c:	4c06      	ldr	r4, [pc, #24]	; (738 <init_globals+0x84>)
     71e:	47a0      	blx	r4
        eeprom_wait_until_done(&request);
     720:	4668      	mov	r0, sp
     722:	4b03      	ldr	r3, [pc, #12]	; (730 <init_globals+0x7c>)
     724:	4798      	blx	r3
     726:	e7d6      	b.n	6d6 <init_globals+0x22>
     728:	20000178 	.word	0x20000178
     72c:	000007a5 	.word	0x000007a5
     730:	00003a3d 	.word	0x00003a3d
     734:	9fc0b1d3 	.word	0x9fc0b1d3
     738:	000007d1 	.word	0x000007d1

0000073c <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     73c:	b510      	push	{r4, lr}
     73e:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     740:	2480      	movs	r4, #128	; 0x80
     742:	05e4      	lsls	r4, r4, #23
     744:	0021      	movs	r1, r4
     746:	2001      	movs	r0, #1
     748:	4b0b      	ldr	r3, [pc, #44]	; (778 <init_eeprom+0x3c>)
     74a:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     74c:	0021      	movs	r1, r4
     74e:	2001      	movs	r0, #1
     750:	4b0a      	ldr	r3, [pc, #40]	; (77c <init_eeprom+0x40>)
     752:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     754:	ab02      	add	r3, sp, #8
     756:	490a      	ldr	r1, [pc, #40]	; (780 <init_eeprom+0x44>)
     758:	680a      	ldr	r2, [r1, #0]
     75a:	9202      	str	r2, [sp, #8]
     75c:	7909      	ldrb	r1, [r1, #4]
     75e:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     760:	4808      	ldr	r0, [pc, #32]	; (784 <init_eeprom+0x48>)
     762:	2180      	movs	r1, #128	; 0x80
     764:	0209      	lsls	r1, r1, #8
     766:	9100      	str	r1, [sp, #0]
     768:	9b03      	ldr	r3, [sp, #12]
     76a:	4907      	ldr	r1, [pc, #28]	; (788 <init_eeprom+0x4c>)
     76c:	4c07      	ldr	r4, [pc, #28]	; (78c <init_eeprom+0x50>)
     76e:	47a0      	blx	r4

    return true;
}
     770:	2001      	movs	r0, #1
     772:	b004      	add	sp, #16
     774:	bd10      	pop	{r4, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	00001c59 	.word	0x00001c59
     77c:	00001c49 	.word	0x00001c49
     780:	00005734 	.word	0x00005734
     784:	200001c0 	.word	0x200001c0
     788:	42001400 	.word	0x42001400
     78c:	000014f9 	.word	0x000014f9

00000790 <check_eeprom>:

bool check_eeprom() {
     790:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     792:	4802      	ldr	r0, [pc, #8]	; (79c <check_eeprom+0xc>)
     794:	4b02      	ldr	r3, [pc, #8]	; (7a0 <check_eeprom+0x10>)
     796:	4798      	blx	r3
}
     798:	bd10      	pop	{r4, pc}
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	200001c0 	.word	0x200001c0
     7a0:	000016a5 	.word	0x000016a5

000007a4 <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     7a4:	b530      	push	{r4, r5, lr}
     7a6:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     7a8:	4d06      	ldr	r5, [pc, #24]	; (7c4 <eeprom_read_request+0x20>)
     7aa:	4c07      	ldr	r4, [pc, #28]	; (7c8 <eeprom_read_request+0x24>)
     7ac:	9203      	str	r2, [sp, #12]
     7ae:	9302      	str	r3, [sp, #8]
     7b0:	9101      	str	r1, [sp, #4]
     7b2:	2300      	movs	r3, #0
     7b4:	9300      	str	r3, [sp, #0]
     7b6:	002a      	movs	r2, r5
     7b8:	0001      	movs	r1, r0
     7ba:	0020      	movs	r0, r4
     7bc:	4c03      	ldr	r4, [pc, #12]	; (7cc <eeprom_read_request+0x28>)
     7be:	47a0      	blx	r4
}
     7c0:	b005      	add	sp, #20
     7c2:	bd30      	pop	{r4, r5, pc}
     7c4:	200001c0 	.word	0x200001c0
     7c8:	200002c4 	.word	0x200002c4
     7cc:	00003a09 	.word	0x00003a09

000007d0 <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     7d0:	b530      	push	{r4, r5, lr}
     7d2:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     7d4:	4d07      	ldr	r5, [pc, #28]	; (7f4 <eeprom_write_request+0x24>)
     7d6:	4c08      	ldr	r4, [pc, #32]	; (7f8 <eeprom_write_request+0x28>)
     7d8:	9203      	str	r2, [sp, #12]
     7da:	9302      	str	r3, [sp, #8]
     7dc:	9101      	str	r1, [sp, #4]
     7de:	2301      	movs	r3, #1
     7e0:	9300      	str	r3, [sp, #0]
     7e2:	2300      	movs	r3, #0
     7e4:	002a      	movs	r2, r5
     7e6:	0001      	movs	r1, r0
     7e8:	0020      	movs	r0, r4
     7ea:	4c04      	ldr	r4, [pc, #16]	; (7fc <eeprom_write_request+0x2c>)
     7ec:	47a0      	blx	r4
     7ee:	b005      	add	sp, #20
     7f0:	bd30      	pop	{r4, r5, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	200001c0 	.word	0x200001c0
     7f8:	200002c4 	.word	0x200002c4
     7fc:	00003a09 	.word	0x00003a09

00000800 <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     800:	b5f0      	push	{r4, r5, r6, r7, lr}
     802:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     804:	2480      	movs	r4, #128	; 0x80
     806:	0524      	lsls	r4, r4, #20
     808:	0021      	movs	r1, r4
     80a:	2000      	movs	r0, #0
     80c:	4e15      	ldr	r6, [pc, #84]	; (864 <imu_init+0x64>)
     80e:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     810:	0021      	movs	r1, r4
     812:	2000      	movs	r0, #0
     814:	4f14      	ldr	r7, [pc, #80]	; (868 <imu_init+0x68>)
     816:	47b8      	blx	r7
	IMU_OFF_BUS();
     818:	2580      	movs	r5, #128	; 0x80
     81a:	03ad      	lsls	r5, r5, #14
     81c:	0029      	movs	r1, r5
     81e:	2000      	movs	r0, #0
     820:	4b12      	ldr	r3, [pc, #72]	; (86c <imu_init+0x6c>)
     822:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     824:	0029      	movs	r1, r5
     826:	2000      	movs	r0, #0
     828:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     82a:	0029      	movs	r1, r5
     82c:	2000      	movs	r0, #0
     82e:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     830:	9400      	str	r4, [sp, #0]
     832:	2300      	movs	r3, #0
     834:	466a      	mov	r2, sp
     836:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     838:	480d      	ldr	r0, [pc, #52]	; (870 <imu_init+0x70>)
     83a:	0022      	movs	r2, r4
     83c:	9b01      	ldr	r3, [sp, #4]
     83e:	490d      	ldr	r1, [pc, #52]	; (874 <imu_init+0x74>)
     840:	4c0d      	ldr	r4, [pc, #52]	; (878 <imu_init+0x78>)
     842:	47a0      	blx	r4
     844:	1e04      	subs	r4, r0, #0
     846:	d107      	bne.n	858 <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     848:	2180      	movs	r1, #128	; 0x80
     84a:	0389      	lsls	r1, r1, #14
     84c:	2000      	movs	r0, #0
     84e:	4b07      	ldr	r3, [pc, #28]	; (86c <imu_init+0x6c>)
     850:	4798      	blx	r3
    return ret;
}
     852:	0020      	movs	r0, r4
     854:	b003      	add	sp, #12
     856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     858:	4805      	ldr	r0, [pc, #20]	; (870 <imu_init+0x70>)
     85a:	4b08      	ldr	r3, [pc, #32]	; (87c <imu_init+0x7c>)
     85c:	4798      	blx	r3
     85e:	0004      	movs	r4, r0
     860:	e7f2      	b.n	848 <imu_init+0x48>
     862:	46c0      	nop			; (mov r8, r8)
     864:	00001c59 	.word	0x00001c59
     868:	00001c49 	.word	0x00001c49
     86c:	00001c69 	.word	0x00001c69
     870:	200001cc 	.word	0x200001cc
     874:	42001400 	.word	0x42001400
     878:	00001a79 	.word	0x00001a79
     87c:	00001bbd 	.word	0x00001bbd

00000880 <check_imu>:

bool check_imu() {
     880:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     882:	2180      	movs	r1, #128	; 0x80
     884:	0389      	lsls	r1, r1, #14
     886:	2000      	movs	r0, #0
     888:	4b09      	ldr	r3, [pc, #36]	; (8b0 <check_imu+0x30>)
     88a:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     88c:	4809      	ldr	r0, [pc, #36]	; (8b4 <check_imu+0x34>)
     88e:	4b0a      	ldr	r3, [pc, #40]	; (8b8 <check_imu+0x38>)
     890:	4798      	blx	r3
     892:	1e04      	subs	r4, r0, #0
     894:	d106      	bne.n	8a4 <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     896:	2180      	movs	r1, #128	; 0x80
     898:	0389      	lsls	r1, r1, #14
     89a:	2000      	movs	r0, #0
     89c:	4b07      	ldr	r3, [pc, #28]	; (8bc <check_imu+0x3c>)
     89e:	4798      	blx	r3
    return pass;
}
     8a0:	0020      	movs	r0, r4
     8a2:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     8a4:	4803      	ldr	r0, [pc, #12]	; (8b4 <check_imu+0x34>)
     8a6:	4b06      	ldr	r3, [pc, #24]	; (8c0 <check_imu+0x40>)
     8a8:	4798      	blx	r3
     8aa:	0004      	movs	r4, r0
     8ac:	e7f3      	b.n	896 <check_imu+0x16>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00001c59 	.word	0x00001c59
     8b4:	200001cc 	.word	0x200001cc
     8b8:	00001ae9 	.word	0x00001ae9
     8bc:	00001c69 	.word	0x00001c69
     8c0:	00001c19 	.word	0x00001c19

000008c4 <request_imu_data>:

void request_imu_data() {
     8c4:	b510      	push	{r4, lr}
     8c6:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     8c8:	4a09      	ldr	r2, [pc, #36]	; (8f0 <request_imu_data+0x2c>)
     8ca:	0011      	movs	r1, r2
     8cc:	310c      	adds	r1, #12
     8ce:	4809      	ldr	r0, [pc, #36]	; (8f4 <request_imu_data+0x30>)
     8d0:	0013      	movs	r3, r2
     8d2:	3334      	adds	r3, #52	; 0x34
     8d4:	9304      	str	r3, [sp, #16]
     8d6:	230e      	movs	r3, #14
     8d8:	9303      	str	r3, [sp, #12]
     8da:	331f      	adds	r3, #31
     8dc:	9302      	str	r3, [sp, #8]
     8de:	2300      	movs	r3, #0
     8e0:	9301      	str	r3, [sp, #4]
     8e2:	9300      	str	r3, [sp, #0]
     8e4:	3302      	adds	r3, #2
     8e6:	4c04      	ldr	r4, [pc, #16]	; (8f8 <request_imu_data+0x34>)
     8e8:	47a0      	blx	r4
}
     8ea:	b006      	add	sp, #24
     8ec:	bd10      	pop	{r4, pc}
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	200001cc 	.word	0x200001cc
     8f4:	200002c4 	.word	0x200002c4
     8f8:	00003cad 	.word	0x00003cad

000008fc <wait_for_imu_data>:

void wait_for_imu_data() {
     8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fe:	46c6      	mov	lr, r8
     900:	b500      	push	{lr}
     902:	b086      	sub	sp, #24
    imu_icm20948_wait_until_done(&data_request);
     904:	4c8c      	ldr	r4, [pc, #560]	; (b38 <wait_for_imu_data+0x23c>)
     906:	0020      	movs	r0, r4
     908:	300c      	adds	r0, #12
     90a:	4b8c      	ldr	r3, [pc, #560]	; (b3c <wait_for_imu_data+0x240>)
     90c:	4798      	blx	r3

    // float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
    int32_t accel_multiplier = (__G__ * ACCEL_MIN_RANGE_G) >> (15 - accel_fs_sel);
     90e:	6c66      	ldr	r6, [r4, #68]	; 0x44
     910:	230f      	movs	r3, #15
     912:	469c      	mov	ip, r3
     914:	1b9b      	subs	r3, r3, r6
     916:	488a      	ldr	r0, [pc, #552]	; (b40 <wait_for_imu_data+0x244>)
     918:	4118      	asrs	r0, r3
    globals.AccelerationXRaw = SWAPI16(raw_data.accel_x) * accel_multiplier;
     91a:	2234      	movs	r2, #52	; 0x34
     91c:	5ea3      	ldrsh	r3, [r4, r2]
     91e:	0219      	lsls	r1, r3, #8
     920:	b209      	sxth	r1, r1
     922:	b29b      	uxth	r3, r3
     924:	0a1b      	lsrs	r3, r3, #8
     926:	4319      	orrs	r1, r3
     928:	0003      	movs	r3, r0
     92a:	434b      	muls	r3, r1
     92c:	4f85      	ldr	r7, [pc, #532]	; (b44 <wait_for_imu_data+0x248>)
     92e:	603b      	str	r3, [r7, #0]
    globals.AccelerationYRaw = SWAPI16(raw_data.accel_y) * accel_multiplier;
     930:	2236      	movs	r2, #54	; 0x36
     932:	5ea3      	ldrsh	r3, [r4, r2]
     934:	021a      	lsls	r2, r3, #8
     936:	b212      	sxth	r2, r2
     938:	b29b      	uxth	r3, r3
     93a:	0a1b      	lsrs	r3, r3, #8
     93c:	431a      	orrs	r2, r3
     93e:	0003      	movs	r3, r0
     940:	4353      	muls	r3, r2
     942:	607b      	str	r3, [r7, #4]
    globals.AccelerationZRaw = SWAPI16(raw_data.accel_z) * accel_multiplier;
     944:	2338      	movs	r3, #56	; 0x38
     946:	5ee5      	ldrsh	r5, [r4, r3]
     948:	022b      	lsls	r3, r5, #8
     94a:	b21b      	sxth	r3, r3
     94c:	b2ad      	uxth	r5, r5
     94e:	0a2d      	lsrs	r5, r5, #8
     950:	432b      	orrs	r3, r5
     952:	4698      	mov	r8, r3
     954:	4358      	muls	r0, r3
     956:	60b8      	str	r0, [r7, #8]

    // float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
    int32_t gyro_multiplier = (GYRO_MIN_RANGE_MICRORADIANS) >> (15 - gyro_fs_sel);
     958:	6ca5      	ldr	r5, [r4, #72]	; 0x48
     95a:	4660      	mov	r0, ip
     95c:	1b45      	subs	r5, r0, r5
     95e:	487a      	ldr	r0, [pc, #488]	; (b48 <wait_for_imu_data+0x24c>)
     960:	4128      	asrs	r0, r5
    globals.AngularVelocityXRaw = SWAPI16(raw_data.gyro_x) * gyro_multiplier;
     962:	233a      	movs	r3, #58	; 0x3a
     964:	5ee5      	ldrsh	r5, [r4, r3]
     966:	46ac      	mov	ip, r5
     968:	022d      	lsls	r5, r5, #8
     96a:	b22d      	sxth	r5, r5
     96c:	4663      	mov	r3, ip
     96e:	b29b      	uxth	r3, r3
     970:	0a1b      	lsrs	r3, r3, #8
     972:	431d      	orrs	r5, r3
     974:	4345      	muls	r5, r0
     976:	60fd      	str	r5, [r7, #12]
    globals.AngularVelocityYRaw = SWAPI16(raw_data.gyro_y)* gyro_multiplier;
     978:	253c      	movs	r5, #60	; 0x3c
     97a:	5f63      	ldrsh	r3, [r4, r5]
     97c:	021d      	lsls	r5, r3, #8
     97e:	b22d      	sxth	r5, r5
     980:	b29b      	uxth	r3, r3
     982:	0a1b      	lsrs	r3, r3, #8
     984:	431d      	orrs	r5, r3
     986:	4345      	muls	r5, r0
     988:	613d      	str	r5, [r7, #16]
    globals.AngularVelocityZRaw = SWAPI16(raw_data.gyro_z) * gyro_multiplier;
     98a:	233e      	movs	r3, #62	; 0x3e
     98c:	5ee4      	ldrsh	r4, [r4, r3]
     98e:	0225      	lsls	r5, r4, #8
     990:	b22d      	sxth	r5, r5
     992:	b2a4      	uxth	r4, r4
     994:	0a24      	lsrs	r4, r4, #8
     996:	432c      	orrs	r4, r5
     998:	4360      	muls	r0, r4
     99a:	6178      	str	r0, [r7, #20]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     99c:	4643      	mov	r3, r8
     99e:	17d8      	asrs	r0, r3, #31
     9a0:	181b      	adds	r3, r3, r0
     9a2:	4043      	eors	r3, r0
     9a4:	b29b      	uxth	r3, r3
     9a6:	17d0      	asrs	r0, r2, #31
     9a8:	1812      	adds	r2, r2, r0
     9aa:	4042      	eors	r2, r0
     9ac:	b292      	uxth	r2, r2
     9ae:	17c8      	asrs	r0, r1, #31
     9b0:	1809      	adds	r1, r1, r0
     9b2:	4041      	eors	r1, r0
     9b4:	b289      	uxth	r1, r1
     9b6:	1c10      	adds	r0, r2, #0
     9b8:	428a      	cmp	r2, r1
     9ba:	d200      	bcs.n	9be <wait_for_imu_data+0xc2>
     9bc:	1c08      	adds	r0, r1, #0
     9be:	1c1a      	adds	r2, r3, #0
     9c0:	b281      	uxth	r1, r0
     9c2:	428b      	cmp	r3, r1
     9c4:	d200      	bcs.n	9c8 <wait_for_imu_data+0xcc>
     9c6:	1c02      	adds	r2, r0, #0
     9c8:	b212      	sxth	r2, r2
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     9ca:	2e03      	cmp	r6, #3
     9cc:	d002      	beq.n	9d4 <wait_for_imu_data+0xd8>
     9ce:	4b5f      	ldr	r3, [pc, #380]	; (b4c <wait_for_imu_data+0x250>)
     9d0:	429a      	cmp	r2, r3
     9d2:	dc40      	bgt.n	a56 <wait_for_imu_data+0x15a>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     9d4:	2e00      	cmp	r6, #0
     9d6:	d002      	beq.n	9de <wait_for_imu_data+0xe2>
     9d8:	4b5d      	ldr	r3, [pc, #372]	; (b50 <wait_for_imu_data+0x254>)
     9da:	429a      	cmp	r2, r3
     9dc:	dd55      	ble.n	a8a <wait_for_imu_data+0x18e>
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     9de:	4856      	ldr	r0, [pc, #344]	; (b38 <wait_for_imu_data+0x23c>)
     9e0:	233e      	movs	r3, #62	; 0x3e
     9e2:	5ec2      	ldrsh	r2, [r0, r3]
     9e4:	0213      	lsls	r3, r2, #8
     9e6:	b21b      	sxth	r3, r3
     9e8:	b292      	uxth	r2, r2
     9ea:	0a12      	lsrs	r2, r2, #8
     9ec:	4313      	orrs	r3, r2
     9ee:	17da      	asrs	r2, r3, #31
     9f0:	189b      	adds	r3, r3, r2
     9f2:	4053      	eors	r3, r2
     9f4:	b29b      	uxth	r3, r3
     9f6:	223c      	movs	r2, #60	; 0x3c
     9f8:	5e81      	ldrsh	r1, [r0, r2]
     9fa:	020a      	lsls	r2, r1, #8
     9fc:	b212      	sxth	r2, r2
     9fe:	b289      	uxth	r1, r1
     a00:	0a09      	lsrs	r1, r1, #8
     a02:	430a      	orrs	r2, r1
     a04:	17d1      	asrs	r1, r2, #31
     a06:	1852      	adds	r2, r2, r1
     a08:	404a      	eors	r2, r1
     a0a:	b292      	uxth	r2, r2
     a0c:	213a      	movs	r1, #58	; 0x3a
     a0e:	5e40      	ldrsh	r0, [r0, r1]
     a10:	0201      	lsls	r1, r0, #8
     a12:	b209      	sxth	r1, r1
     a14:	b280      	uxth	r0, r0
     a16:	0a00      	lsrs	r0, r0, #8
     a18:	4301      	orrs	r1, r0
     a1a:	17c8      	asrs	r0, r1, #31
     a1c:	1809      	adds	r1, r1, r0
     a1e:	4041      	eors	r1, r0
     a20:	b289      	uxth	r1, r1
     a22:	1c10      	adds	r0, r2, #0
     a24:	428a      	cmp	r2, r1
     a26:	d200      	bcs.n	a2a <wait_for_imu_data+0x12e>
     a28:	1c08      	adds	r0, r1, #0
     a2a:	1c1a      	adds	r2, r3, #0
     a2c:	b281      	uxth	r1, r0
     a2e:	428b      	cmp	r3, r1
     a30:	d200      	bcs.n	a34 <wait_for_imu_data+0x138>
     a32:	1c02      	adds	r2, r0, #0
     a34:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     a36:	4b40      	ldr	r3, [pc, #256]	; (b38 <wait_for_imu_data+0x23c>)
     a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     a3a:	2b03      	cmp	r3, #3
     a3c:	d002      	beq.n	a44 <wait_for_imu_data+0x148>
     a3e:	4943      	ldr	r1, [pc, #268]	; (b4c <wait_for_imu_data+0x250>)
     a40:	428a      	cmp	r2, r1
     a42:	dc3c      	bgt.n	abe <wait_for_imu_data+0x1c2>
        ++gyro_fs_sel;
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     a44:	2b00      	cmp	r3, #0
     a46:	d002      	beq.n	a4e <wait_for_imu_data+0x152>
     a48:	4941      	ldr	r1, [pc, #260]	; (b50 <wait_for_imu_data+0x254>)
     a4a:	428a      	cmp	r2, r1
     a4c:	dd55      	ble.n	afa <wait_for_imu_data+0x1fe>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_off();
    }

     a4e:	b006      	add	sp, #24
     a50:	bc80      	pop	{r7}
     a52:	46b8      	mov	r8, r7
     a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     a56:	3601      	adds	r6, #1
     a58:	4a37      	ldr	r2, [pc, #220]	; (b38 <wait_for_imu_data+0x23c>)
     a5a:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     a5c:	b2f6      	uxtb	r6, r6
     a5e:	0076      	lsls	r6, r6, #1
     a60:	2306      	movs	r3, #6
     a62:	401e      	ands	r6, r3
     a64:	3346      	adds	r3, #70	; 0x46
     a66:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     a68:	0011      	movs	r1, r2
     a6a:	3150      	adds	r1, #80	; 0x50
     a6c:	4839      	ldr	r0, [pc, #228]	; (b54 <wait_for_imu_data+0x258>)
     a6e:	0013      	movs	r3, r2
     a70:	334c      	adds	r3, #76	; 0x4c
     a72:	9304      	str	r3, [sp, #16]
     a74:	2301      	movs	r3, #1
     a76:	9303      	str	r3, [sp, #12]
     a78:	2414      	movs	r4, #20
     a7a:	9402      	str	r4, [sp, #8]
     a7c:	3c12      	subs	r4, #18
     a7e:	9401      	str	r4, [sp, #4]
     a80:	9300      	str	r3, [sp, #0]
     a82:	3301      	adds	r3, #1
     a84:	4c34      	ldr	r4, [pc, #208]	; (b58 <wait_for_imu_data+0x25c>)
     a86:	47a0      	blx	r4
     a88:	e7a9      	b.n	9de <wait_for_imu_data+0xe2>
        --accel_fs_sel;
     a8a:	3e01      	subs	r6, #1
     a8c:	4a2a      	ldr	r2, [pc, #168]	; (b38 <wait_for_imu_data+0x23c>)
     a8e:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     a90:	b2f6      	uxtb	r6, r6
     a92:	0076      	lsls	r6, r6, #1
     a94:	2306      	movs	r3, #6
     a96:	401e      	ands	r6, r3
     a98:	3346      	adds	r3, #70	; 0x46
     a9a:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     a9c:	0011      	movs	r1, r2
     a9e:	3150      	adds	r1, #80	; 0x50
     aa0:	482c      	ldr	r0, [pc, #176]	; (b54 <wait_for_imu_data+0x258>)
     aa2:	0013      	movs	r3, r2
     aa4:	334c      	adds	r3, #76	; 0x4c
     aa6:	9304      	str	r3, [sp, #16]
     aa8:	2301      	movs	r3, #1
     aaa:	9303      	str	r3, [sp, #12]
     aac:	2414      	movs	r4, #20
     aae:	9402      	str	r4, [sp, #8]
     ab0:	3c12      	subs	r4, #18
     ab2:	9401      	str	r4, [sp, #4]
     ab4:	9300      	str	r3, [sp, #0]
     ab6:	3301      	adds	r3, #1
     ab8:	4c27      	ldr	r4, [pc, #156]	; (b58 <wait_for_imu_data+0x25c>)
     aba:	47a0      	blx	r4
     abc:	e78f      	b.n	9de <wait_for_imu_data+0xe2>
        ++gyro_fs_sel;
     abe:	3301      	adds	r3, #1
     ac0:	4a1d      	ldr	r2, [pc, #116]	; (b38 <wait_for_imu_data+0x23c>)
     ac2:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     ac4:	b2db      	uxtb	r3, r3
     ac6:	005b      	lsls	r3, r3, #1
     ac8:	2106      	movs	r1, #6
     aca:	400b      	ands	r3, r1
     acc:	3172      	adds	r1, #114	; 0x72
     ace:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     ad0:	0011      	movs	r1, r2
     ad2:	317c      	adds	r1, #124	; 0x7c
     ad4:	481f      	ldr	r0, [pc, #124]	; (b54 <wait_for_imu_data+0x258>)
     ad6:	0013      	movs	r3, r2
     ad8:	3378      	adds	r3, #120	; 0x78
     ada:	9304      	str	r3, [sp, #16]
     adc:	2301      	movs	r3, #1
     ade:	9303      	str	r3, [sp, #12]
     ae0:	9302      	str	r3, [sp, #8]
     ae2:	2402      	movs	r4, #2
     ae4:	9401      	str	r4, [sp, #4]
     ae6:	9300      	str	r3, [sp, #0]
     ae8:	3301      	adds	r3, #1
     aea:	4c1b      	ldr	r4, [pc, #108]	; (b58 <wait_for_imu_data+0x25c>)
     aec:	47a0      	blx	r4
        led_on();
     aee:	2180      	movs	r1, #128	; 0x80
     af0:	03c9      	lsls	r1, r1, #15
     af2:	2001      	movs	r0, #1
     af4:	4b19      	ldr	r3, [pc, #100]	; (b5c <wait_for_imu_data+0x260>)
     af6:	4798      	blx	r3
     af8:	e7a9      	b.n	a4e <wait_for_imu_data+0x152>
        --gyro_fs_sel;
     afa:	3b01      	subs	r3, #1
     afc:	4a0e      	ldr	r2, [pc, #56]	; (b38 <wait_for_imu_data+0x23c>)
     afe:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     b00:	b2db      	uxtb	r3, r3
     b02:	005b      	lsls	r3, r3, #1
     b04:	2106      	movs	r1, #6
     b06:	400b      	ands	r3, r1
     b08:	3172      	adds	r1, #114	; 0x72
     b0a:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     b0c:	0011      	movs	r1, r2
     b0e:	317c      	adds	r1, #124	; 0x7c
     b10:	4810      	ldr	r0, [pc, #64]	; (b54 <wait_for_imu_data+0x258>)
     b12:	0013      	movs	r3, r2
     b14:	3378      	adds	r3, #120	; 0x78
     b16:	9304      	str	r3, [sp, #16]
     b18:	2301      	movs	r3, #1
     b1a:	9303      	str	r3, [sp, #12]
     b1c:	9302      	str	r3, [sp, #8]
     b1e:	2402      	movs	r4, #2
     b20:	9401      	str	r4, [sp, #4]
     b22:	9300      	str	r3, [sp, #0]
     b24:	3301      	adds	r3, #1
     b26:	4c0c      	ldr	r4, [pc, #48]	; (b58 <wait_for_imu_data+0x25c>)
     b28:	47a0      	blx	r4
        led_off();
     b2a:	2180      	movs	r1, #128	; 0x80
     b2c:	03c9      	lsls	r1, r1, #15
     b2e:	2001      	movs	r0, #1
     b30:	4b0b      	ldr	r3, [pc, #44]	; (b60 <wait_for_imu_data+0x264>)
     b32:	4798      	blx	r3
     b34:	e78b      	b.n	a4e <wait_for_imu_data+0x152>
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	200001cc 	.word	0x200001cc
     b3c:	00003ce9 	.word	0x00003ce9
     b40:	012b4674 	.word	0x012b4674
     b44:	20000178 	.word	0x20000178
     b48:	0042943b 	.word	0x0042943b
     b4c:	00007333 	.word	0x00007333
     b50:	00003333 	.word	0x00003333
     b54:	200002c4 	.word	0x200002c4
     b58:	00003cad 	.word	0x00003cad
     b5c:	00001c59 	.word	0x00001c59
     b60:	00001c69 	.word	0x00001c69

00000b64 <serial_init>:
    .rxtrig = UART4_DMA_RX_TRIGGER,
    .priority = UART4_DMA_PRIORITY
};


bool serial_init() {
     b64:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

	// init uart
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     b66:	22c0      	movs	r2, #192	; 0xc0
     b68:	0092      	lsls	r2, r2, #2
     b6a:	2102      	movs	r1, #2
     b6c:	2000      	movs	r0, #0
     b6e:	4c18      	ldr	r4, [pc, #96]	; (bd0 <serial_init+0x6c>)
     b70:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     b72:	22c0      	movs	r2, #192	; 0xc0
     b74:	0312      	lsls	r2, r2, #12
     b76:	2102      	movs	r1, #2
     b78:	2000      	movs	r0, #0
     b7a:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     b7c:	22c0      	movs	r2, #192	; 0xc0
     b7e:	0212      	lsls	r2, r2, #8
     b80:	2102      	movs	r1, #2
     b82:	2001      	movs	r0, #1
     b84:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     b86:	22c0      	movs	r2, #192	; 0xc0
     b88:	0292      	lsls	r2, r2, #10
     b8a:	2102      	movs	r1, #2
     b8c:	2001      	movs	r0, #1
     b8e:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     b90:	2596      	movs	r5, #150	; 0x96
     b92:	01ad      	lsls	r5, r5, #6
     b94:	002b      	movs	r3, r5
     b96:	2200      	movs	r2, #0
     b98:	2101      	movs	r1, #1
     b9a:	480e      	ldr	r0, [pc, #56]	; (bd4 <serial_init+0x70>)
     b9c:	4c0e      	ldr	r4, [pc, #56]	; (bd8 <serial_init+0x74>)
     b9e:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     ba0:	002b      	movs	r3, r5
     ba2:	2201      	movs	r2, #1
     ba4:	2103      	movs	r1, #3
     ba6:	480d      	ldr	r0, [pc, #52]	; (bdc <serial_init+0x78>)
     ba8:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     baa:	002b      	movs	r3, r5
     bac:	2201      	movs	r2, #1
     bae:	2103      	movs	r1, #3
     bb0:	480b      	ldr	r0, [pc, #44]	; (be0 <serial_init+0x7c>)
     bb2:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     bb4:	002b      	movs	r3, r5
     bb6:	2200      	movs	r2, #0
     bb8:	2101      	movs	r1, #1
     bba:	480a      	ldr	r0, [pc, #40]	; (be4 <serial_init+0x80>)
     bbc:	47a0      	blx	r4
    
	// init usb
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     bbe:	2180      	movs	r1, #128	; 0x80
     bc0:	20e0      	movs	r0, #224	; 0xe0
     bc2:	0049      	lsls	r1, r1, #1
     bc4:	00c0      	lsls	r0, r0, #3
     bc6:	4b08      	ldr	r3, [pc, #32]	; (be8 <serial_init+0x84>)
     bc8:	4798      	blx	r3
	usb_attach();
     bca:	4b08      	ldr	r3, [pc, #32]	; (bec <serial_init+0x88>)
     bcc:	4798      	blx	r3
}
     bce:	bd70      	pop	{r4, r5, r6, pc}
     bd0:	00001c79 	.word	0x00001c79
     bd4:	42000800 	.word	0x42000800
     bd8:	00002381 	.word	0x00002381
     bdc:	42000c00 	.word	0x42000c00
     be0:	42001800 	.word	0x42001800
     be4:	42001c00 	.word	0x42001c00
     be8:	00004051 	.word	0x00004051
     bec:	000029e5 	.word	0x000029e5

00000bf0 <serial_write_start>:
    // will kill usb process which would remain running
    rtos_usb_quit();
}


bool serial_write_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     bf0:	b570      	push	{r4, r5, r6, lr}
     bf2:	000e      	movs	r6, r1
     bf4:	0013      	movs	r3, r2
    switch (port) {
     bf6:	2804      	cmp	r0, #4
     bf8:	d825      	bhi.n	c46 <serial_write_start+0x56>
     bfa:	0080      	lsls	r0, r0, #2
     bfc:	4d13      	ldr	r5, [pc, #76]	; (c4c <serial_write_start+0x5c>)
     bfe:	582c      	ldr	r4, [r5, r0]
     c00:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_send_buffer(buffer, count);
     c02:	0011      	movs	r1, r2
     c04:	0030      	movs	r0, r6
     c06:	4b12      	ldr	r3, [pc, #72]	; (c50 <serial_write_start+0x60>)
     c08:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     c0a:	2001      	movs	r0, #1
}
     c0c:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_send_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     c0e:	4911      	ldr	r1, [pc, #68]	; (c54 <serial_write_start+0x64>)
     c10:	0032      	movs	r2, r6
     c12:	4811      	ldr	r0, [pc, #68]	; (c58 <serial_write_start+0x68>)
     c14:	4c11      	ldr	r4, [pc, #68]	; (c5c <serial_write_start+0x6c>)
     c16:	47a0      	blx	r4
    return true;
     c18:	2001      	movs	r0, #1
        break;
     c1a:	e7f7      	b.n	c0c <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     c1c:	4910      	ldr	r1, [pc, #64]	; (c60 <serial_write_start+0x70>)
     c1e:	0032      	movs	r2, r6
     c20:	4810      	ldr	r0, [pc, #64]	; (c64 <serial_write_start+0x74>)
     c22:	4c0e      	ldr	r4, [pc, #56]	; (c5c <serial_write_start+0x6c>)
     c24:	47a0      	blx	r4
    return true;
     c26:	2001      	movs	r0, #1
        break;
     c28:	e7f0      	b.n	c0c <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     c2a:	490f      	ldr	r1, [pc, #60]	; (c68 <serial_write_start+0x78>)
     c2c:	0032      	movs	r2, r6
     c2e:	480f      	ldr	r0, [pc, #60]	; (c6c <serial_write_start+0x7c>)
     c30:	4c0a      	ldr	r4, [pc, #40]	; (c5c <serial_write_start+0x6c>)
     c32:	47a0      	blx	r4
    return true;
     c34:	2001      	movs	r0, #1
        break;
     c36:	e7e9      	b.n	c0c <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     c38:	490d      	ldr	r1, [pc, #52]	; (c70 <serial_write_start+0x80>)
     c3a:	0032      	movs	r2, r6
     c3c:	480d      	ldr	r0, [pc, #52]	; (c74 <serial_write_start+0x84>)
     c3e:	4c07      	ldr	r4, [pc, #28]	; (c5c <serial_write_start+0x6c>)
     c40:	47a0      	blx	r4
    return true;
     c42:	2001      	movs	r0, #1
        break;
     c44:	e7e2      	b.n	c0c <serial_write_start+0x1c>
    switch (port) {
     c46:	2000      	movs	r0, #0
     c48:	e7e0      	b.n	c0c <serial_write_start+0x1c>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	0000573c 	.word	0x0000573c
     c50:	000040f9 	.word	0x000040f9
     c54:	000057b4 	.word	0x000057b4
     c58:	42000800 	.word	0x42000800
     c5c:	00003e81 	.word	0x00003e81
     c60:	000057bc 	.word	0x000057bc
     c64:	42000c00 	.word	0x42000c00
     c68:	000057c4 	.word	0x000057c4
     c6c:	42001800 	.word	0x42001800
     c70:	000057cc 	.word	0x000057cc
     c74:	42001c00 	.word	0x42001c00

00000c78 <serial_write_wait_until_complete>:

bool serial_write_wait_until_complete(Serial_Port_IDs port) {
     c78:	b510      	push	{r4, lr}
    switch (port) {
     c7a:	2804      	cmp	r0, #4
     c7c:	d81b      	bhi.n	cb6 <serial_write_wait_until_complete+0x3e>
     c7e:	0080      	lsls	r0, r0, #2
     c80:	4b0e      	ldr	r3, [pc, #56]	; (cbc <serial_write_wait_until_complete+0x44>)
     c82:	581b      	ldr	r3, [r3, r0]
     c84:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_send_complete();
     c86:	4b0e      	ldr	r3, [pc, #56]	; (cc0 <serial_write_wait_until_complete+0x48>)
     c88:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     c8a:	2001      	movs	r0, #1
}
     c8c:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_send_complete(&uart1_descriptor);
     c8e:	480d      	ldr	r0, [pc, #52]	; (cc4 <serial_write_wait_until_complete+0x4c>)
     c90:	4b0d      	ldr	r3, [pc, #52]	; (cc8 <serial_write_wait_until_complete+0x50>)
     c92:	4798      	blx	r3
    return true;
     c94:	2001      	movs	r0, #1
        break;
     c96:	e7f9      	b.n	c8c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart2_descriptor);
     c98:	480c      	ldr	r0, [pc, #48]	; (ccc <serial_write_wait_until_complete+0x54>)
     c9a:	4b0b      	ldr	r3, [pc, #44]	; (cc8 <serial_write_wait_until_complete+0x50>)
     c9c:	4798      	blx	r3
    return true;
     c9e:	2001      	movs	r0, #1
        break;
     ca0:	e7f4      	b.n	c8c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart3_descriptor);
     ca2:	480b      	ldr	r0, [pc, #44]	; (cd0 <serial_write_wait_until_complete+0x58>)
     ca4:	4b08      	ldr	r3, [pc, #32]	; (cc8 <serial_write_wait_until_complete+0x50>)
     ca6:	4798      	blx	r3
    return true;
     ca8:	2001      	movs	r0, #1
        break;
     caa:	e7ef      	b.n	c8c <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart4_descriptor);
     cac:	4809      	ldr	r0, [pc, #36]	; (cd4 <serial_write_wait_until_complete+0x5c>)
     cae:	4b06      	ldr	r3, [pc, #24]	; (cc8 <serial_write_wait_until_complete+0x50>)
     cb0:	4798      	blx	r3
    return true;
     cb2:	2001      	movs	r0, #1
        break;
     cb4:	e7ea      	b.n	c8c <serial_write_wait_until_complete+0x14>
    switch (port) {
     cb6:	2000      	movs	r0, #0
     cb8:	e7e8      	b.n	c8c <serial_write_wait_until_complete+0x14>
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	00005750 	.word	0x00005750
     cc0:	00004145 	.word	0x00004145
     cc4:	000057b4 	.word	0x000057b4
     cc8:	00003ef1 	.word	0x00003ef1
     ccc:	000057bc 	.word	0x000057bc
     cd0:	000057c4 	.word	0x000057c4
     cd4:	000057cc 	.word	0x000057cc

00000cd8 <serial_read_start>:


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     cd8:	b570      	push	{r4, r5, r6, lr}
     cda:	000e      	movs	r6, r1
     cdc:	0013      	movs	r3, r2
    switch (port) {
     cde:	2804      	cmp	r0, #4
     ce0:	d825      	bhi.n	d2e <serial_read_start+0x56>
     ce2:	0080      	lsls	r0, r0, #2
     ce4:	4d13      	ldr	r5, [pc, #76]	; (d34 <serial_read_start+0x5c>)
     ce6:	582c      	ldr	r4, [r5, r0]
     ce8:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_read_buffer(buffer, count);
     cea:	0011      	movs	r1, r2
     cec:	0030      	movs	r0, r6
     cee:	4b12      	ldr	r3, [pc, #72]	; (d38 <serial_read_start+0x60>)
     cf0:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     cf2:	2001      	movs	r0, #1
}
     cf4:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     cf6:	4911      	ldr	r1, [pc, #68]	; (d3c <serial_read_start+0x64>)
     cf8:	0032      	movs	r2, r6
     cfa:	4811      	ldr	r0, [pc, #68]	; (d40 <serial_read_start+0x68>)
     cfc:	4c11      	ldr	r4, [pc, #68]	; (d44 <serial_read_start+0x6c>)
     cfe:	47a0      	blx	r4
    return true;
     d00:	2001      	movs	r0, #1
        break;
     d02:	e7f7      	b.n	cf4 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     d04:	4910      	ldr	r1, [pc, #64]	; (d48 <serial_read_start+0x70>)
     d06:	0032      	movs	r2, r6
     d08:	4810      	ldr	r0, [pc, #64]	; (d4c <serial_read_start+0x74>)
     d0a:	4c0e      	ldr	r4, [pc, #56]	; (d44 <serial_read_start+0x6c>)
     d0c:	47a0      	blx	r4
    return true;
     d0e:	2001      	movs	r0, #1
        break;
     d10:	e7f0      	b.n	cf4 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     d12:	490f      	ldr	r1, [pc, #60]	; (d50 <serial_read_start+0x78>)
     d14:	0032      	movs	r2, r6
     d16:	480f      	ldr	r0, [pc, #60]	; (d54 <serial_read_start+0x7c>)
     d18:	4c0a      	ldr	r4, [pc, #40]	; (d44 <serial_read_start+0x6c>)
     d1a:	47a0      	blx	r4
    return true;
     d1c:	2001      	movs	r0, #1
        break;
     d1e:	e7e9      	b.n	cf4 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     d20:	490d      	ldr	r1, [pc, #52]	; (d58 <serial_read_start+0x80>)
     d22:	0032      	movs	r2, r6
     d24:	480d      	ldr	r0, [pc, #52]	; (d5c <serial_read_start+0x84>)
     d26:	4c07      	ldr	r4, [pc, #28]	; (d44 <serial_read_start+0x6c>)
     d28:	47a0      	blx	r4
    return true;
     d2a:	2001      	movs	r0, #1
        break;
     d2c:	e7e2      	b.n	cf4 <serial_read_start+0x1c>
    switch (port) {
     d2e:	2000      	movs	r0, #0
     d30:	e7e0      	b.n	cf4 <serial_read_start+0x1c>
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	00005764 	.word	0x00005764
     d38:	00004161 	.word	0x00004161
     d3c:	000057b4 	.word	0x000057b4
     d40:	42000800 	.word	0x42000800
     d44:	00003f01 	.word	0x00003f01
     d48:	000057bc 	.word	0x000057bc
     d4c:	42000c00 	.word	0x42000c00
     d50:	000057c4 	.word	0x000057c4
     d54:	42001800 	.word	0x42001800
     d58:	000057cc 	.word	0x000057cc
     d5c:	42001c00 	.word	0x42001c00

00000d60 <serial_read_wait_until_complete>:

bool serial_read_wait_until_complete(Serial_Port_IDs port) {
     d60:	b510      	push	{r4, lr}
    switch (port) {
     d62:	2804      	cmp	r0, #4
     d64:	d81b      	bhi.n	d9e <serial_read_wait_until_complete+0x3e>
     d66:	0080      	lsls	r0, r0, #2
     d68:	4b0e      	ldr	r3, [pc, #56]	; (da4 <serial_read_wait_until_complete+0x44>)
     d6a:	581b      	ldr	r3, [r3, r0]
     d6c:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete();
     d6e:	4b0e      	ldr	r3, [pc, #56]	; (da8 <serial_read_wait_until_complete+0x48>)
     d70:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     d72:	2001      	movs	r0, #1
}
     d74:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete(&uart1_descriptor);
     d76:	480d      	ldr	r0, [pc, #52]	; (dac <serial_read_wait_until_complete+0x4c>)
     d78:	4b0d      	ldr	r3, [pc, #52]	; (db0 <serial_read_wait_until_complete+0x50>)
     d7a:	4798      	blx	r3
    return true;
     d7c:	2001      	movs	r0, #1
        break;
     d7e:	e7f9      	b.n	d74 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart2_descriptor);
     d80:	480c      	ldr	r0, [pc, #48]	; (db4 <serial_read_wait_until_complete+0x54>)
     d82:	4b0b      	ldr	r3, [pc, #44]	; (db0 <serial_read_wait_until_complete+0x50>)
     d84:	4798      	blx	r3
    return true;
     d86:	2001      	movs	r0, #1
        break;
     d88:	e7f4      	b.n	d74 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart3_descriptor);
     d8a:	480b      	ldr	r0, [pc, #44]	; (db8 <serial_read_wait_until_complete+0x58>)
     d8c:	4b08      	ldr	r3, [pc, #32]	; (db0 <serial_read_wait_until_complete+0x50>)
     d8e:	4798      	blx	r3
    return true;
     d90:	2001      	movs	r0, #1
        break;
     d92:	e7ef      	b.n	d74 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart4_descriptor);
     d94:	4809      	ldr	r0, [pc, #36]	; (dbc <serial_read_wait_until_complete+0x5c>)
     d96:	4b06      	ldr	r3, [pc, #24]	; (db0 <serial_read_wait_until_complete+0x50>)
     d98:	4798      	blx	r3
    return true;
     d9a:	2001      	movs	r0, #1
        break;
     d9c:	e7ea      	b.n	d74 <serial_read_wait_until_complete+0x14>
    switch (port) {
     d9e:	2000      	movs	r0, #0
     da0:	e7e8      	b.n	d74 <serial_read_wait_until_complete+0x14>
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	00005778 	.word	0x00005778
     da8:	00004199 	.word	0x00004199
     dac:	000057b4 	.word	0x000057b4
     db0:	00003f71 	.word	0x00003f71
     db4:	000057bc 	.word	0x000057bc
     db8:	000057c4 	.word	0x000057c4
     dbc:	000057cc 	.word	0x000057cc

00000dc0 <serial_read_wait_until_complete_or_timeout>:

bool serial_read_wait_until_complete_or_timeout(Serial_Port_IDs port, uint32_t timeout_ms) {
     dc0:	b510      	push	{r4, lr}
    switch (port) {
     dc2:	2804      	cmp	r0, #4
     dc4:	d827      	bhi.n	e16 <serial_read_wait_until_complete_or_timeout+0x56>
     dc6:	0080      	lsls	r0, r0, #2
     dc8:	4b14      	ldr	r3, [pc, #80]	; (e1c <serial_read_wait_until_complete_or_timeout+0x5c>)
     dca:	581b      	ldr	r3, [r3, r0]
     dcc:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete(); // USB doesn't time out
     dce:	4b14      	ldr	r3, [pc, #80]	; (e20 <serial_read_wait_until_complete_or_timeout+0x60>)
     dd0:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     dd2:	2001      	movs	r0, #1
}
     dd4:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete_or_timeout(&uart1_descriptor, timeout_ms * time_ticks_ms_mult);
     dd6:	4b13      	ldr	r3, [pc, #76]	; (e24 <serial_read_wait_until_complete_or_timeout+0x64>)
     dd8:	681b      	ldr	r3, [r3, #0]
     dda:	4359      	muls	r1, r3
     ddc:	4812      	ldr	r0, [pc, #72]	; (e28 <serial_read_wait_until_complete_or_timeout+0x68>)
     dde:	4b13      	ldr	r3, [pc, #76]	; (e2c <serial_read_wait_until_complete_or_timeout+0x6c>)
     de0:	4798      	blx	r3
    return true;
     de2:	2001      	movs	r0, #1
        break;
     de4:	e7f6      	b.n	dd4 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart2_descriptor, timeout_ms * time_ticks_ms_mult);
     de6:	4b0f      	ldr	r3, [pc, #60]	; (e24 <serial_read_wait_until_complete_or_timeout+0x64>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	4359      	muls	r1, r3
     dec:	4810      	ldr	r0, [pc, #64]	; (e30 <serial_read_wait_until_complete_or_timeout+0x70>)
     dee:	4b0f      	ldr	r3, [pc, #60]	; (e2c <serial_read_wait_until_complete_or_timeout+0x6c>)
     df0:	4798      	blx	r3
    return true;
     df2:	2001      	movs	r0, #1
        break;
     df4:	e7ee      	b.n	dd4 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart3_descriptor, timeout_ms * time_ticks_ms_mult);
     df6:	4b0b      	ldr	r3, [pc, #44]	; (e24 <serial_read_wait_until_complete_or_timeout+0x64>)
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	4359      	muls	r1, r3
     dfc:	480d      	ldr	r0, [pc, #52]	; (e34 <serial_read_wait_until_complete_or_timeout+0x74>)
     dfe:	4b0b      	ldr	r3, [pc, #44]	; (e2c <serial_read_wait_until_complete_or_timeout+0x6c>)
     e00:	4798      	blx	r3
    return true;
     e02:	2001      	movs	r0, #1
        break;
     e04:	e7e6      	b.n	dd4 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart4_descriptor, timeout_ms * time_ticks_ms_mult);
     e06:	4b07      	ldr	r3, [pc, #28]	; (e24 <serial_read_wait_until_complete_or_timeout+0x64>)
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	4359      	muls	r1, r3
     e0c:	480a      	ldr	r0, [pc, #40]	; (e38 <serial_read_wait_until_complete_or_timeout+0x78>)
     e0e:	4b07      	ldr	r3, [pc, #28]	; (e2c <serial_read_wait_until_complete_or_timeout+0x6c>)
     e10:	4798      	blx	r3
    return true;
     e12:	2001      	movs	r0, #1
        break;
     e14:	e7de      	b.n	dd4 <serial_read_wait_until_complete_or_timeout+0x14>
    switch (port) {
     e16:	2000      	movs	r0, #0
     e18:	e7dc      	b.n	dd4 <serial_read_wait_until_complete_or_timeout+0x14>
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	0000578c 	.word	0x0000578c
     e20:	00004199 	.word	0x00004199
     e24:	000058c8 	.word	0x000058c8
     e28:	000057b4 	.word	0x000057b4
     e2c:	00003f81 	.word	0x00003f81
     e30:	000057bc 	.word	0x000057bc
     e34:	000057c4 	.word	0x000057c4
     e38:	000057cc 	.word	0x000057cc

00000e3c <serial_flush>:

bool serial_flush(Serial_Port_IDs port) {
     e3c:	b510      	push	{r4, lr}
    switch (port) {
     e3e:	2804      	cmp	r0, #4
     e40:	d803      	bhi.n	e4a <serial_flush+0xe>
     e42:	0080      	lsls	r0, r0, #2
     e44:	4b0d      	ldr	r3, [pc, #52]	; (e7c <serial_flush+0x40>)
     e46:	581b      	ldr	r3, [r3, r0]
     e48:	469f      	mov	pc, r3
     e4a:	2000      	movs	r0, #0
     e4c:	e014      	b.n	e78 <serial_flush+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_flush(UART1_SERCOM);
     e4e:	480c      	ldr	r0, [pc, #48]	; (e80 <serial_flush+0x44>)
     e50:	4b0c      	ldr	r3, [pc, #48]	; (e84 <serial_flush+0x48>)
     e52:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     e54:	2001      	movs	r0, #1
        break;
     e56:	e00f      	b.n	e78 <serial_flush+0x3c>
        uart_flush(UART2_SERCOM);
     e58:	480b      	ldr	r0, [pc, #44]	; (e88 <serial_flush+0x4c>)
     e5a:	4b0a      	ldr	r3, [pc, #40]	; (e84 <serial_flush+0x48>)
     e5c:	4798      	blx	r3
    return true;
     e5e:	2001      	movs	r0, #1
        break;
     e60:	e00a      	b.n	e78 <serial_flush+0x3c>
        uart_flush(UART3_SERCOM);
     e62:	480a      	ldr	r0, [pc, #40]	; (e8c <serial_flush+0x50>)
     e64:	4b07      	ldr	r3, [pc, #28]	; (e84 <serial_flush+0x48>)
     e66:	4798      	blx	r3
    return true;
     e68:	2001      	movs	r0, #1
        break;
     e6a:	e005      	b.n	e78 <serial_flush+0x3c>
        uart_flush(UART4_SERCOM);
     e6c:	4808      	ldr	r0, [pc, #32]	; (e90 <serial_flush+0x54>)
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <serial_flush+0x48>)
     e70:	4798      	blx	r3
    return true;
     e72:	2001      	movs	r0, #1
        break;
     e74:	e000      	b.n	e78 <serial_flush+0x3c>
    return true;
     e76:	2001      	movs	r0, #1
     e78:	bd10      	pop	{r4, pc}
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	000057a0 	.word	0x000057a0
     e80:	42000800 	.word	0x42000800
     e84:	000023dd 	.word	0x000023dd
     e88:	42000c00 	.word	0x42000c00
     e8c:	42001800 	.word	0x42001800
     e90:	42001c00 	.word	0x42001c00

00000e94 <buzzer>:

void shutdown() {
	serial_quit();
}

void buzzer() {
     e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e96:	46ce      	mov	lr, r9
     e98:	4647      	mov	r7, r8
     e9a:	b580      	push	{r7, lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     e9c:	2106      	movs	r1, #6
     e9e:	482a      	ldr	r0, [pc, #168]	; (f48 <buzzer+0xb4>)
     ea0:	4b2a      	ldr	r3, [pc, #168]	; (f4c <buzzer+0xb8>)
     ea2:	4798      	blx	r3
     ea4:	2800      	cmp	r0, #0
     ea6:	d019      	beq.n	edc <buzzer+0x48>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     ea8:	4929      	ldr	r1, [pc, #164]	; (f50 <buzzer+0xbc>)
     eaa:	4827      	ldr	r0, [pc, #156]	; (f48 <buzzer+0xb4>)
     eac:	4b29      	ldr	r3, [pc, #164]	; (f54 <buzzer+0xc0>)
     eae:	4798      	blx	r3
     eb0:	2800      	cmp	r0, #0
     eb2:	d016      	beq.n	ee2 <buzzer+0x4e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     eb4:	2200      	movs	r2, #0
     eb6:	2101      	movs	r1, #1
     eb8:	4823      	ldr	r0, [pc, #140]	; (f48 <buzzer+0xb4>)
     eba:	4b27      	ldr	r3, [pc, #156]	; (f58 <buzzer+0xc4>)
     ebc:	4798      	blx	r3
     ebe:	2800      	cmp	r0, #0
     ec0:	d012      	beq.n	ee8 <buzzer+0x54>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     ec2:	4821      	ldr	r0, [pc, #132]	; (f48 <buzzer+0xb4>)
     ec4:	4b25      	ldr	r3, [pc, #148]	; (f5c <buzzer+0xc8>)
     ec6:	4798      	blx	r3
     ec8:	2800      	cmp	r0, #0
     eca:	d010      	beq.n	eee <buzzer+0x5a>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
     ecc:	2280      	movs	r2, #128	; 0x80
     ece:	0412      	lsls	r2, r2, #16
     ed0:	2104      	movs	r1, #4
     ed2:	2001      	movs	r0, #1
     ed4:	4b22      	ldr	r3, [pc, #136]	; (f60 <buzzer+0xcc>)
     ed6:	4798      	blx	r3
	
	for (int i = 0; i < 2; ++i) {
     ed8:	2500      	movs	r5, #0
     eda:	e02e      	b.n	f3a <buzzer+0xa6>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     edc:	4b21      	ldr	r3, [pc, #132]	; (f64 <buzzer+0xd0>)
     ede:	4798      	blx	r3
     ee0:	e7e2      	b.n	ea8 <buzzer+0x14>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     ee2:	4b20      	ldr	r3, [pc, #128]	; (f64 <buzzer+0xd0>)
     ee4:	4798      	blx	r3
     ee6:	e7e5      	b.n	eb4 <buzzer+0x20>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     ee8:	4b1e      	ldr	r3, [pc, #120]	; (f64 <buzzer+0xd0>)
     eea:	4798      	blx	r3
     eec:	e7e9      	b.n	ec2 <buzzer+0x2e>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     eee:	4b1d      	ldr	r3, [pc, #116]	; (f64 <buzzer+0xd0>)
     ef0:	4798      	blx	r3
     ef2:	e7eb      	b.n	ecc <buzzer+0x38>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
     ef4:	4b14      	ldr	r3, [pc, #80]	; (f48 <buzzer+0xb4>)
     ef6:	4698      	mov	r8, r3
     ef8:	22fc      	movs	r2, #252	; 0xfc
     efa:	0592      	lsls	r2, r2, #22
     efc:	2101      	movs	r1, #1
     efe:	0018      	movs	r0, r3
     f00:	4f15      	ldr	r7, [pc, #84]	; (f58 <buzzer+0xc4>)
     f02:	47b8      	blx	r7
		led_on();
     f04:	2680      	movs	r6, #128	; 0x80
     f06:	03f6      	lsls	r6, r6, #15
     f08:	0031      	movs	r1, r6
     f0a:	2001      	movs	r0, #1
     f0c:	4b16      	ldr	r3, [pc, #88]	; (f68 <buzzer+0xd4>)
     f0e:	4798      	blx	r3
		rtos_delay_ms(75);
     f10:	4b16      	ldr	r3, [pc, #88]	; (f6c <buzzer+0xd8>)
     f12:	681a      	ldr	r2, [r3, #0]
     f14:	0093      	lsls	r3, r2, #2
     f16:	189b      	adds	r3, r3, r2
     f18:	011c      	lsls	r4, r3, #4
     f1a:	1ae4      	subs	r4, r4, r3
     f1c:	0020      	movs	r0, r4
     f1e:	4b14      	ldr	r3, [pc, #80]	; (f70 <buzzer+0xdc>)
     f20:	4699      	mov	r9, r3
     f22:	4798      	blx	r3
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
     f24:	2200      	movs	r2, #0
     f26:	2101      	movs	r1, #1
     f28:	4640      	mov	r0, r8
     f2a:	47b8      	blx	r7
		led_off();
     f2c:	0031      	movs	r1, r6
     f2e:	2001      	movs	r0, #1
     f30:	4b10      	ldr	r3, [pc, #64]	; (f74 <buzzer+0xe0>)
     f32:	4798      	blx	r3
		rtos_delay_ms(75);
     f34:	0020      	movs	r0, r4
     f36:	47c8      	blx	r9
	for (int i = 0; i < 2; ++i) {
     f38:	3501      	adds	r5, #1
     f3a:	2d01      	cmp	r5, #1
     f3c:	ddda      	ble.n	ef4 <buzzer+0x60>
	// 	led_on();
	// 	rtos_delay_ms(200);
	// 	led_off();
	// 	rtos_delay_ms(200);
	// }
     f3e:	bcc0      	pop	{r6, r7}
     f40:	46b9      	mov	r9, r7
     f42:	46b0      	mov	r8, r6
     f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	42003c00 	.word	0x42003c00
     f4c:	00001cc5 	.word	0x00001cc5
     f50:	45309000 	.word	0x45309000
     f54:	00001e29 	.word	0x00001e29
     f58:	00001eb5 	.word	0x00001eb5
     f5c:	00001d99 	.word	0x00001d99
     f60:	00001c79 	.word	0x00001c79
     f64:	00002ea1 	.word	0x00002ea1
     f68:	00001c59 	.word	0x00001c59
     f6c:	000058c8 	.word	0x000058c8
     f70:	00003401 	.word	0x00003401
     f74:	00001c69 	.word	0x00001c69

00000f78 <selftest>:
bool selftest() {
     f78:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
     f7a:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <selftest+0x2c>)
     f7c:	4798      	blx	r3
     f7e:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
     f80:	4809      	ldr	r0, [pc, #36]	; (fa8 <selftest+0x30>)
     f82:	4b0a      	ldr	r3, [pc, #40]	; (fac <selftest+0x34>)
     f84:	4798      	blx	r3
     f86:	1e05      	subs	r5, r0, #0
     f88:	d000      	beq.n	f8c <selftest+0x14>
     f8a:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
     f8c:	4b08      	ldr	r3, [pc, #32]	; (fb0 <selftest+0x38>)
     f8e:	4798      	blx	r3
     f90:	1e04      	subs	r4, r0, #0
     f92:	d000      	beq.n	f96 <selftest+0x1e>
     f94:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
     f96:	4807      	ldr	r0, [pc, #28]	; (fb4 <selftest+0x3c>)
     f98:	4b07      	ldr	r3, [pc, #28]	; (fb8 <selftest+0x40>)
     f9a:	4798      	blx	r3
     f9c:	2800      	cmp	r0, #0
     f9e:	d000      	beq.n	fa2 <selftest+0x2a>
     fa0:	0020      	movs	r0, r4
}
     fa2:	bd70      	pop	{r4, r5, r6, pc}
     fa4:	00000881 	.word	0x00000881
     fa8:	20000320 	.word	0x20000320
     fac:	000012d5 	.word	0x000012d5
     fb0:	00000791 	.word	0x00000791
     fb4:	2000033c 	.word	0x2000033c
     fb8:	00001769 	.word	0x00001769

00000fbc <init>:
bool init() {
     fbc:	b570      	push	{r4, r5, r6, lr}
     fbe:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
     fc0:	22c0      	movs	r2, #192	; 0xc0
     fc2:	0412      	lsls	r2, r2, #16
     fc4:	2102      	movs	r1, #2
     fc6:	2000      	movs	r0, #0
     fc8:	4c35      	ldr	r4, [pc, #212]	; (10a0 <init+0xe4>)
     fca:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
     fcc:	2280      	movs	r2, #128	; 0x80
     fce:	0352      	lsls	r2, r2, #13
     fd0:	2103      	movs	r1, #3
     fd2:	2000      	movs	r0, #0
     fd4:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
     fd6:	2480      	movs	r4, #128	; 0x80
     fd8:	0564      	lsls	r4, r4, #21
     fda:	0021      	movs	r1, r4
     fdc:	2000      	movs	r0, #0
     fde:	4e31      	ldr	r6, [pc, #196]	; (10a4 <init+0xe8>)
     fe0:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
     fe2:	2580      	movs	r5, #128	; 0x80
     fe4:	062d      	lsls	r5, r5, #24
     fe6:	0029      	movs	r1, r5
     fe8:	2001      	movs	r0, #1
     fea:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
     fec:	0021      	movs	r1, r4
     fee:	2000      	movs	r0, #0
     ff0:	4c2d      	ldr	r4, [pc, #180]	; (10a8 <init+0xec>)
     ff2:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
     ff4:	0029      	movs	r1, r5
     ff6:	2001      	movs	r0, #1
     ff8:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     ffa:	4b2c      	ldr	r3, [pc, #176]	; (10ac <init+0xf0>)
     ffc:	9301      	str	r3, [sp, #4]
     ffe:	2300      	movs	r3, #0
    1000:	9300      	str	r3, [sp, #0]
    1002:	3302      	adds	r3, #2
    1004:	2200      	movs	r2, #0
    1006:	2100      	movs	r1, #0
    1008:	4829      	ldr	r0, [pc, #164]	; (10b0 <init+0xf4>)
    100a:	4c2a      	ldr	r4, [pc, #168]	; (10b4 <init+0xf8>)
    100c:	47a0      	blx	r4
    100e:	2800      	cmp	r0, #0
    1010:	d039      	beq.n	1086 <init+0xca>
	dma_init();
    1012:	4b29      	ldr	r3, [pc, #164]	; (10b8 <init+0xfc>)
    1014:	4798      	blx	r3
	if (!serial_init()) SOS();
    1016:	4b29      	ldr	r3, [pc, #164]	; (10bc <init+0x100>)
    1018:	4798      	blx	r3
    101a:	2800      	cmp	r0, #0
    101c:	d036      	beq.n	108c <init+0xd0>
	if (!imu_init()) SOS();
    101e:	4b28      	ldr	r3, [pc, #160]	; (10c0 <init+0x104>)
    1020:	4798      	blx	r3
    1022:	2800      	cmp	r0, #0
    1024:	d035      	beq.n	1092 <init+0xd6>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
    1026:	ab02      	add	r3, sp, #8
    1028:	2280      	movs	r2, #128	; 0x80
    102a:	0552      	lsls	r2, r2, #21
    102c:	9202      	str	r2, [sp, #8]
    102e:	2100      	movs	r1, #0
    1030:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    1032:	4824      	ldr	r0, [pc, #144]	; (10c4 <init+0x108>)
    1034:	9b03      	ldr	r3, [sp, #12]
    1036:	491e      	ldr	r1, [pc, #120]	; (10b0 <init+0xf4>)
    1038:	4c23      	ldr	r4, [pc, #140]	; (10c8 <init+0x10c>)
    103a:	47a0      	blx	r4
    103c:	2800      	cmp	r0, #0
    103e:	d02b      	beq.n	1098 <init+0xdc>
	init_eeprom();
    1040:	4b22      	ldr	r3, [pc, #136]	; (10cc <init+0x110>)
    1042:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
    1044:	ab02      	add	r3, sp, #8
    1046:	4c22      	ldr	r4, [pc, #136]	; (10d0 <init+0x114>)
    1048:	6822      	ldr	r2, [r4, #0]
    104a:	9202      	str	r2, [sp, #8]
    104c:	7921      	ldrb	r1, [r4, #4]
    104e:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
    1050:	4d17      	ldr	r5, [pc, #92]	; (10b0 <init+0xf4>)
    1052:	4820      	ldr	r0, [pc, #128]	; (10d4 <init+0x118>)
    1054:	2107      	movs	r1, #7
    1056:	9101      	str	r1, [sp, #4]
    1058:	2180      	movs	r1, #128	; 0x80
    105a:	03c9      	lsls	r1, r1, #15
    105c:	9100      	str	r1, [sp, #0]
    105e:	9b03      	ldr	r3, [sp, #12]
    1060:	0029      	movs	r1, r5
    1062:	4e1d      	ldr	r6, [pc, #116]	; (10d8 <init+0x11c>)
    1064:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
    1066:	2280      	movs	r2, #128	; 0x80
    1068:	2190      	movs	r1, #144	; 0x90
    106a:	481c      	ldr	r0, [pc, #112]	; (10dc <init+0x120>)
    106c:	3408      	adds	r4, #8
    106e:	9400      	str	r4, [sp, #0]
    1070:	002b      	movs	r3, r5
    1072:	0092      	lsls	r2, r2, #2
    1074:	0109      	lsls	r1, r1, #4
    1076:	4c1a      	ldr	r4, [pc, #104]	; (10e0 <init+0x124>)
    1078:	47a0      	blx	r4
	init_globals();
    107a:	4b1a      	ldr	r3, [pc, #104]	; (10e4 <init+0x128>)
    107c:	4798      	blx	r3
	return selftest();
    107e:	4b1a      	ldr	r3, [pc, #104]	; (10e8 <init+0x12c>)
    1080:	4798      	blx	r3
}
    1082:	b004      	add	sp, #16
    1084:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    1086:	4b19      	ldr	r3, [pc, #100]	; (10ec <init+0x130>)
    1088:	4798      	blx	r3
    108a:	e7c2      	b.n	1012 <init+0x56>
	if (!serial_init()) SOS();
    108c:	4b17      	ldr	r3, [pc, #92]	; (10ec <init+0x130>)
    108e:	4798      	blx	r3
    1090:	e7c5      	b.n	101e <init+0x62>
	if (!imu_init()) SOS();
    1092:	4b16      	ldr	r3, [pc, #88]	; (10ec <init+0x130>)
    1094:	4798      	blx	r3
    1096:	e7c6      	b.n	1026 <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    1098:	4b14      	ldr	r3, [pc, #80]	; (10ec <init+0x130>)
    109a:	4798      	blx	r3
    109c:	e7d0      	b.n	1040 <init+0x84>
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	00001c79 	.word	0x00001c79
    10a4:	00001c59 	.word	0x00001c59
    10a8:	00001c49 	.word	0x00001c49
    10ac:	005b8d80 	.word	0x005b8d80
    10b0:	42001400 	.word	0x42001400
    10b4:	000020dd 	.word	0x000020dd
    10b8:	000013c5 	.word	0x000013c5
    10bc:	00000b65 	.word	0x00000b65
    10c0:	00000801 	.word	0x00000801
    10c4:	20000320 	.word	0x20000320
    10c8:	00001351 	.word	0x00001351
    10cc:	0000073d 	.word	0x0000073d
    10d0:	000057d4 	.word	0x000057d4
    10d4:	2000033c 	.word	0x2000033c
    10d8:	000016e1 	.word	0x000016e1
    10dc:	200002c4 	.word	0x200002c4
    10e0:	000036a5 	.word	0x000036a5
    10e4:	000006b5 	.word	0x000006b5
    10e8:	00000f79 	.word	0x00000f79
    10ec:	00002ea1 	.word	0x00002ea1

000010f0 <main>:
int main(void) {
    10f0:	b510      	push	{r4, lr}
    10f2:	b082      	sub	sp, #8
	if (!init()) SOS();
    10f4:	4b10      	ldr	r3, [pc, #64]	; (1138 <main+0x48>)
    10f6:	4798      	blx	r3
    10f8:	2800      	cmp	r0, #0
    10fa:	d01a      	beq.n	1132 <main+0x42>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
    10fc:	2380      	movs	r3, #128	; 0x80
    10fe:	2280      	movs	r2, #128	; 0x80
    1100:	490e      	ldr	r1, [pc, #56]	; (113c <main+0x4c>)
    1102:	480f      	ldr	r0, [pc, #60]	; (1140 <main+0x50>)
    1104:	005b      	lsls	r3, r3, #1
    1106:	0112      	lsls	r2, r2, #4
    1108:	4c0e      	ldr	r4, [pc, #56]	; (1144 <main+0x54>)
    110a:	47a0      	blx	r4
	start_navigation();
    110c:	4b0e      	ldr	r3, [pc, #56]	; (1148 <main+0x58>)
    110e:	4798      	blx	r3
	volatile fp32_t testvalue1 = FP32_FROM_MILLI(10);
    1110:	4b0e      	ldr	r3, [pc, #56]	; (114c <main+0x5c>)
    1112:	9301      	str	r3, [sp, #4]
	volatile fp32_t testvalue2 = FP32_FROM_INT(14);
    1114:	23e0      	movs	r3, #224	; 0xe0
    1116:	031b      	lsls	r3, r3, #12
    1118:	9300      	str	r3, [sp, #0]
	testvalue1 = fp_multiply(testvalue1, testvalue2);
    111a:	9801      	ldr	r0, [sp, #4]
    111c:	9900      	ldr	r1, [sp, #0]
    111e:	4b0c      	ldr	r3, [pc, #48]	; (1150 <main+0x60>)
    1120:	4798      	blx	r3
    1122:	9001      	str	r0, [sp, #4]
	comms_loop();
    1124:	4b0b      	ldr	r3, [pc, #44]	; (1154 <main+0x64>)
    1126:	4798      	blx	r3
		rtos_delay_ms(1);
    1128:	4b0b      	ldr	r3, [pc, #44]	; (1158 <main+0x68>)
    112a:	6818      	ldr	r0, [r3, #0]
    112c:	4b0b      	ldr	r3, [pc, #44]	; (115c <main+0x6c>)
    112e:	4798      	blx	r3
	while (1) {
    1130:	e7fa      	b.n	1128 <main+0x38>
	if (!init()) SOS();
    1132:	4b0b      	ldr	r3, [pc, #44]	; (1160 <main+0x70>)
    1134:	4798      	blx	r3
    1136:	e7e1      	b.n	10fc <main+0xc>
    1138:	00000fbd 	.word	0x00000fbd
    113c:	00000e95 	.word	0x00000e95
    1140:	20000270 	.word	0x20000270
    1144:	00002f61 	.word	0x00002f61
    1148:	00001189 	.word	0x00001189
    114c:	0000028f 	.word	0x0000028f
    1150:	0000435d 	.word	0x0000435d
    1154:	00000555 	.word	0x00000555
    1158:	000058c8 	.word	0x000058c8
    115c:	00003401 	.word	0x00003401
    1160:	00002ea1 	.word	0x00002ea1

00001164 <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
    1164:	b510      	push	{r4, lr}
	while (1) {
        // led_on();
		request_imu_data();
    1166:	4b04      	ldr	r3, [pc, #16]	; (1178 <navigation+0x14>)
    1168:	4798      	blx	r3
		wait_for_imu_data();
    116a:	4b04      	ldr	r3, [pc, #16]	; (117c <navigation+0x18>)
    116c:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(1);
    116e:	4b04      	ldr	r3, [pc, #16]	; (1180 <navigation+0x1c>)
    1170:	6818      	ldr	r0, [r3, #0]
    1172:	4b04      	ldr	r3, [pc, #16]	; (1184 <navigation+0x20>)
    1174:	4798      	blx	r3
	while (1) {
    1176:	e7f6      	b.n	1166 <navigation+0x2>
    1178:	000008c5 	.word	0x000008c5
    117c:	000008fd 	.word	0x000008fd
    1180:	000058c8 	.word	0x000058c8
    1184:	00003401 	.word	0x00003401

00001188 <start_navigation>:
	}
}

void start_navigation() {
    1188:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
    118a:	23c0      	movs	r3, #192	; 0xc0
    118c:	22b0      	movs	r2, #176	; 0xb0
    118e:	4905      	ldr	r1, [pc, #20]	; (11a4 <start_navigation+0x1c>)
    1190:	4c05      	ldr	r4, [pc, #20]	; (11a8 <start_navigation+0x20>)
    1192:	009b      	lsls	r3, r3, #2
    1194:	0112      	lsls	r2, r2, #4
    1196:	0020      	movs	r0, r4
    1198:	4d04      	ldr	r5, [pc, #16]	; (11ac <start_navigation+0x24>)
    119a:	47a8      	blx	r5
    dispatch_process(&navigation_process);
    119c:	0020      	movs	r0, r4
    119e:	4b04      	ldr	r3, [pc, #16]	; (11b0 <start_navigation+0x28>)
    11a0:	4798      	blx	r3
    11a2:	bd70      	pop	{r4, r5, r6, pc}
    11a4:	00001165 	.word	0x00001165
    11a8:	20000298 	.word	0x20000298
    11ac:	00002f61 	.word	0x00002f61
    11b0:	00003049 	.word	0x00003049

000011b4 <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
    11b4:	b570      	push	{r4, r5, r6, lr}
    11b6:	0004      	movs	r4, r0
    11b8:	000e      	movs	r6, r1
    11ba:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
    11bc:	7d03      	ldrb	r3, [r0, #20]
    11be:	7d42      	ldrb	r2, [r0, #21]
    11c0:	0212      	lsls	r2, r2, #8
    11c2:	431a      	orrs	r2, r3
    11c4:	7d83      	ldrb	r3, [r0, #22]
    11c6:	041b      	lsls	r3, r3, #16
    11c8:	4313      	orrs	r3, r2
    11ca:	7dc1      	ldrb	r1, [r0, #23]
    11cc:	0609      	lsls	r1, r1, #24
    11ce:	4319      	orrs	r1, r3
    11d0:	7e00      	ldrb	r0, [r0, #24]
    11d2:	4b11      	ldr	r3, [pc, #68]	; (1218 <baro_send_command+0x64>)
    11d4:	4798      	blx	r3
	spi_command(desc->sercom, command);
    11d6:	7c23      	ldrb	r3, [r4, #16]
    11d8:	7c62      	ldrb	r2, [r4, #17]
    11da:	0212      	lsls	r2, r2, #8
    11dc:	431a      	orrs	r2, r3
    11de:	7ca3      	ldrb	r3, [r4, #18]
    11e0:	041b      	lsls	r3, r3, #16
    11e2:	4313      	orrs	r3, r2
    11e4:	7ce0      	ldrb	r0, [r4, #19]
    11e6:	0600      	lsls	r0, r0, #24
    11e8:	4318      	orrs	r0, r3
    11ea:	0031      	movs	r1, r6
    11ec:	4b0b      	ldr	r3, [pc, #44]	; (121c <baro_send_command+0x68>)
    11ee:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    11f0:	7d23      	ldrb	r3, [r4, #20]
    11f2:	7d62      	ldrb	r2, [r4, #21]
    11f4:	0212      	lsls	r2, r2, #8
    11f6:	431a      	orrs	r2, r3
    11f8:	7da3      	ldrb	r3, [r4, #22]
    11fa:	041b      	lsls	r3, r3, #16
    11fc:	4313      	orrs	r3, r2
    11fe:	7de1      	ldrb	r1, [r4, #23]
    1200:	0609      	lsls	r1, r1, #24
    1202:	4319      	orrs	r1, r3
    1204:	7e20      	ldrb	r0, [r4, #24]
    1206:	4b06      	ldr	r3, [pc, #24]	; (1220 <baro_send_command+0x6c>)
    1208:	4798      	blx	r3
	delay_us(delay);
    120a:	0068      	lsls	r0, r5, #1
    120c:	1940      	adds	r0, r0, r5
    120e:	0040      	lsls	r0, r0, #1
    1210:	4b04      	ldr	r3, [pc, #16]	; (1224 <baro_send_command+0x70>)
    1212:	4798      	blx	r3
}
    1214:	bd70      	pop	{r4, r5, r6, pc}
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	00001c69 	.word	0x00001c69
    121c:	00002145 	.word	0x00002145
    1220:	00001c59 	.word	0x00001c59
    1224:	00002229 	.word	0x00002229

00001228 <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122a:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    122c:	26a0      	movs	r6, #160	; 0xa0
    122e:	e047      	b.n	12c0 <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
    1230:	7d23      	ldrb	r3, [r4, #20]
    1232:	7d62      	ldrb	r2, [r4, #21]
    1234:	0212      	lsls	r2, r2, #8
    1236:	431a      	orrs	r2, r3
    1238:	7da3      	ldrb	r3, [r4, #22]
    123a:	041b      	lsls	r3, r3, #16
    123c:	4313      	orrs	r3, r2
    123e:	7de1      	ldrb	r1, [r4, #23]
    1240:	0609      	lsls	r1, r1, #24
    1242:	4319      	orrs	r1, r3
    1244:	7e20      	ldrb	r0, [r4, #24]
    1246:	4b20      	ldr	r3, [pc, #128]	; (12c8 <baro_read_prom+0xa0>)
    1248:	4798      	blx	r3
		spi_command(desc->sercom, addr);
    124a:	7c23      	ldrb	r3, [r4, #16]
    124c:	7c62      	ldrb	r2, [r4, #17]
    124e:	0212      	lsls	r2, r2, #8
    1250:	431a      	orrs	r2, r3
    1252:	7ca3      	ldrb	r3, [r4, #18]
    1254:	041b      	lsls	r3, r3, #16
    1256:	4313      	orrs	r3, r2
    1258:	7ce0      	ldrb	r0, [r4, #19]
    125a:	0600      	lsls	r0, r0, #24
    125c:	4318      	orrs	r0, r3
    125e:	0031      	movs	r1, r6
    1260:	4f1a      	ldr	r7, [pc, #104]	; (12cc <baro_read_prom+0xa4>)
    1262:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
    1264:	7c23      	ldrb	r3, [r4, #16]
    1266:	7c62      	ldrb	r2, [r4, #17]
    1268:	0212      	lsls	r2, r2, #8
    126a:	431a      	orrs	r2, r3
    126c:	7ca3      	ldrb	r3, [r4, #18]
    126e:	041b      	lsls	r3, r3, #16
    1270:	4313      	orrs	r3, r2
    1272:	7ce0      	ldrb	r0, [r4, #19]
    1274:	0600      	lsls	r0, r0, #24
    1276:	4318      	orrs	r0, r3
    1278:	2100      	movs	r1, #0
    127a:	47b8      	blx	r7
    127c:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
    127e:	7c23      	ldrb	r3, [r4, #16]
    1280:	7c62      	ldrb	r2, [r4, #17]
    1282:	0212      	lsls	r2, r2, #8
    1284:	431a      	orrs	r2, r3
    1286:	7ca3      	ldrb	r3, [r4, #18]
    1288:	041b      	lsls	r3, r3, #16
    128a:	4313      	orrs	r3, r2
    128c:	7ce0      	ldrb	r0, [r4, #19]
    128e:	0600      	lsls	r0, r0, #24
    1290:	4318      	orrs	r0, r3
    1292:	2100      	movs	r1, #0
    1294:	47b8      	blx	r7
    1296:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
    1298:	7d23      	ldrb	r3, [r4, #20]
    129a:	7d62      	ldrb	r2, [r4, #21]
    129c:	0212      	lsls	r2, r2, #8
    129e:	431a      	orrs	r2, r3
    12a0:	7da3      	ldrb	r3, [r4, #22]
    12a2:	041b      	lsls	r3, r3, #16
    12a4:	4313      	orrs	r3, r2
    12a6:	7de1      	ldrb	r1, [r4, #23]
    12a8:	0609      	lsls	r1, r1, #24
    12aa:	4319      	orrs	r1, r3
    12ac:	7e20      	ldrb	r0, [r4, #24]
    12ae:	4b08      	ldr	r3, [pc, #32]	; (12d0 <baro_read_prom+0xa8>)
    12b0:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
    12b2:	0033      	movs	r3, r6
    12b4:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
    12b6:	022d      	lsls	r5, r5, #8
    12b8:	433d      	orrs	r5, r7
    12ba:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    12bc:	3602      	adds	r6, #2
    12be:	b2f6      	uxtb	r6, r6
    12c0:	2eae      	cmp	r6, #174	; 0xae
    12c2:	d9b5      	bls.n	1230 <baro_read_prom+0x8>
}
    12c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	00001c69 	.word	0x00001c69
    12cc:	00002145 	.word	0x00002145
    12d0:	00001c59 	.word	0x00001c59

000012d4 <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
    12d4:	b530      	push	{r4, r5, lr}
    12d6:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
    12d8:	7b83      	ldrb	r3, [r0, #14]
    12da:	7bc5      	ldrb	r5, [r0, #15]
    12dc:	022d      	lsls	r5, r5, #8
    12de:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
    12e0:	23ff      	movs	r3, #255	; 0xff
    12e2:	002a      	movs	r2, r5
    12e4:	439a      	bics	r2, r3
    12e6:	0013      	movs	r3, r2
    12e8:	2200      	movs	r2, #0
    12ea:	7382      	strb	r2, [r0, #14]
    12ec:	0a1b      	lsrs	r3, r3, #8
    12ee:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
    12f0:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
    12f2:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
    12f4:	e014      	b.n	1320 <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    12f6:	1042      	asrs	r2, r0, #1
    12f8:	0052      	lsls	r2, r2, #1
    12fa:	5aa2      	ldrh	r2, [r4, r2]
    12fc:	0a12      	lsrs	r2, r2, #8
    12fe:	e018      	b.n	1332 <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1300:	005b      	lsls	r3, r3, #1
    1302:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
    1304:	3201      	adds	r2, #1
    1306:	2a07      	cmp	r2, #7
    1308:	dc09      	bgt.n	131e <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    130a:	b219      	sxth	r1, r3
    130c:	2900      	cmp	r1, #0
    130e:	daf7      	bge.n	1300 <baro_check+0x2c>
    1310:	0059      	lsls	r1, r3, #1
    1312:	23c0      	movs	r3, #192	; 0xc0
    1314:	019b      	lsls	r3, r3, #6
    1316:	404b      	eors	r3, r1
    1318:	b21b      	sxth	r3, r3
    131a:	b29b      	uxth	r3, r3
    131c:	e7f2      	b.n	1304 <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
    131e:	3001      	adds	r0, #1
    1320:	280f      	cmp	r0, #15
    1322:	dc09      	bgt.n	1338 <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1324:	07c2      	lsls	r2, r0, #31
    1326:	d5e6      	bpl.n	12f6 <baro_check+0x22>
    1328:	1042      	asrs	r2, r0, #1
    132a:	0052      	lsls	r2, r2, #1
    132c:	5aa1      	ldrh	r1, [r4, r2]
    132e:	22ff      	movs	r2, #255	; 0xff
    1330:	400a      	ands	r2, r1
		n_rem ^= byte;
    1332:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
    1334:	2200      	movs	r2, #0
    1336:	e7e6      	b.n	1306 <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
    1338:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
    133a:	73a5      	strb	r5, [r4, #14]
    133c:	0a2a      	lsrs	r2, r5, #8
    133e:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
    1340:	200f      	movs	r0, #15
    1342:	4028      	ands	r0, r5
    1344:	1ac0      	subs	r0, r0, r3
    1346:	4243      	negs	r3, r0
    1348:	4158      	adcs	r0, r3
    134a:	b2c0      	uxtb	r0, r0
}
    134c:	bd30      	pop	{r4, r5, pc}
	...

00001350 <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    1350:	b570      	push	{r4, r5, r6, lr}
    1352:	b082      	sub	sp, #8
    1354:	0005      	movs	r5, r0
    1356:	000c      	movs	r4, r1
    1358:	9200      	str	r2, [sp, #0]
    135a:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    135c:	0008      	movs	r0, r1
    135e:	4b0e      	ldr	r3, [pc, #56]	; (1398 <baro_init+0x48>)
    1360:	4798      	blx	r3
    1362:	1e06      	subs	r6, r0, #0
    1364:	d102      	bne.n	136c <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
    1366:	0030      	movs	r0, r6
    1368:	b002      	add	sp, #8
    136a:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
    136c:	742c      	strb	r4, [r5, #16]
    136e:	0a23      	lsrs	r3, r4, #8
    1370:	746b      	strb	r3, [r5, #17]
    1372:	0c23      	lsrs	r3, r4, #16
    1374:	74ab      	strb	r3, [r5, #18]
    1376:	0e24      	lsrs	r4, r4, #24
    1378:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
    137a:	0028      	movs	r0, r5
    137c:	3014      	adds	r0, #20
    137e:	2205      	movs	r2, #5
    1380:	4669      	mov	r1, sp
    1382:	4b06      	ldr	r3, [pc, #24]	; (139c <baro_init+0x4c>)
    1384:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
    1386:	4a06      	ldr	r2, [pc, #24]	; (13a0 <baro_init+0x50>)
    1388:	211e      	movs	r1, #30
    138a:	0028      	movs	r0, r5
    138c:	4b05      	ldr	r3, [pc, #20]	; (13a4 <baro_init+0x54>)
    138e:	4798      	blx	r3
	baro_read_prom(desc);
    1390:	0028      	movs	r0, r5
    1392:	4b05      	ldr	r3, [pc, #20]	; (13a8 <baro_init+0x58>)
    1394:	4798      	blx	r3
	return true;
    1396:	e7e6      	b.n	1366 <baro_init+0x16>
    1398:	00001f55 	.word	0x00001f55
    139c:	00005375 	.word	0x00005375
    13a0:	00000bb8 	.word	0x00000bb8
    13a4:	000011b5 	.word	0x000011b5
    13a8:	00001229 	.word	0x00001229

000013ac <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
    13ac:	280b      	cmp	r0, #11
    13ae:	d804      	bhi.n	13ba <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
    13b0:	4a03      	ldr	r2, [pc, #12]	; (13c0 <dma_set_channel+0x14>)
    13b2:	233f      	movs	r3, #63	; 0x3f
    13b4:	54d0      	strb	r0, [r2, r3]
		return true;
    13b6:	2001      	movs	r0, #1
	}
	else return false;
}
    13b8:	4770      	bx	lr
	else return false;
    13ba:	2000      	movs	r0, #0
    13bc:	e7fc      	b.n	13b8 <dma_set_channel+0xc>
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	41004800 	.word	0x41004800

000013c4 <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
    13c4:	4b07      	ldr	r3, [pc, #28]	; (13e4 <dma_init+0x20>)
    13c6:	695a      	ldr	r2, [r3, #20]
    13c8:	2120      	movs	r1, #32
    13ca:	430a      	orrs	r2, r1
    13cc:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
    13ce:	69da      	ldr	r2, [r3, #28]
    13d0:	430a      	orrs	r2, r1
    13d2:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
    13d4:	4a04      	ldr	r2, [pc, #16]	; (13e8 <dma_init+0x24>)
    13d6:	4b05      	ldr	r3, [pc, #20]	; (13ec <dma_init+0x28>)
    13d8:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
    13da:	4a05      	ldr	r2, [pc, #20]	; (13f0 <dma_init+0x2c>)
    13dc:	639a      	str	r2, [r3, #56]	; 0x38
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
    13de:	4a05      	ldr	r2, [pc, #20]	; (13f4 <dma_init+0x30>)
    13e0:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
    13e2:	4770      	bx	lr
    13e4:	40000400 	.word	0x40000400
    13e8:	200003f0 	.word	0x200003f0
    13ec:	41004800 	.word	0x41004800
    13f0:	20000350 	.word	0x20000350
    13f4:	00000f02 	.word	0x00000f02

000013f8 <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
    13f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13fa:	ac05      	add	r4, sp, #20
    13fc:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
    13fe:	2b02      	cmp	r3, #2
    1400:	d82d      	bhi.n	145e <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1402:	2900      	cmp	r1, #0
    1404:	d023      	beq.n	144e <dma_create_descriptor+0x56>
    1406:	2480      	movs	r4, #128	; 0x80
    1408:	00e4      	lsls	r4, r4, #3
    140a:	2a00      	cmp	r2, #0
    140c:	d021      	beq.n	1452 <dma_create_descriptor+0x5a>
    140e:	2580      	movs	r5, #128	; 0x80
    1410:	012d      	lsls	r5, r5, #4
    1412:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
    1414:	021d      	lsls	r5, r3, #8
    1416:	27c0      	movs	r7, #192	; 0xc0
    1418:	00bf      	lsls	r7, r7, #2
    141a:	403d      	ands	r5, r7
    141c:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
    141e:	2501      	movs	r5, #1
    1420:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
    1422:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
    1424:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    1426:	2900      	cmp	r1, #0
    1428:	d015      	beq.n	1456 <dma_create_descriptor+0x5e>
    142a:	1c59      	adds	r1, r3, #1
    142c:	4371      	muls	r1, r6
    142e:	9c06      	ldr	r4, [sp, #24]
    1430:	46a4      	mov	ip, r4
    1432:	4461      	add	r1, ip
    1434:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    1436:	2a00      	cmp	r2, #0
    1438:	d00f      	beq.n	145a <dma_create_descriptor+0x62>
    143a:	3301      	adds	r3, #1
    143c:	4373      	muls	r3, r6
    143e:	9a07      	ldr	r2, [sp, #28]
    1440:	4694      	mov	ip, r2
    1442:	4463      	add	r3, ip
    1444:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
    1446:	9b08      	ldr	r3, [sp, #32]
    1448:	60c3      	str	r3, [r0, #12]
	
	return true;
    144a:	2001      	movs	r0, #1
}
    144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    144e:	2400      	movs	r4, #0
    1450:	e7db      	b.n	140a <dma_create_descriptor+0x12>
    1452:	2500      	movs	r5, #0
    1454:	e7dd      	b.n	1412 <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    1456:	9906      	ldr	r1, [sp, #24]
    1458:	e7ec      	b.n	1434 <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    145a:	9b07      	ldr	r3, [sp, #28]
    145c:	e7f2      	b.n	1444 <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
    145e:	2000      	movs	r0, #0
    1460:	e7f4      	b.n	144c <dma_create_descriptor+0x54>
	...

00001464 <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
    1464:	b570      	push	{r4, r5, r6, lr}
    1466:	000c      	movs	r4, r1
    1468:	0015      	movs	r5, r2
    146a:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
    146c:	4b0e      	ldr	r3, [pc, #56]	; (14a8 <dma_init_channel+0x44>)
    146e:	4798      	blx	r3
    1470:	2800      	cmp	r0, #0
    1472:	d012      	beq.n	149a <dma_init_channel+0x36>
	if (priority > 3) return false;
    1474:	2e03      	cmp	r6, #3
    1476:	d811      	bhi.n	149c <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
    1478:	2c03      	cmp	r4, #3
    147a:	d811      	bhi.n	14a0 <dma_init_channel+0x3c>
    147c:	2c01      	cmp	r4, #1
    147e:	d011      	beq.n	14a4 <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1480:	05a4      	lsls	r4, r4, #22
    1482:	23c0      	movs	r3, #192	; 0xc0
    1484:	041b      	lsls	r3, r3, #16
    1486:	401c      	ands	r4, r3
    1488:	022d      	lsls	r5, r5, #8
    148a:	23fc      	movs	r3, #252	; 0xfc
    148c:	019b      	lsls	r3, r3, #6
    148e:	401d      	ands	r5, r3
    1490:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
    1492:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1494:	4334      	orrs	r4, r6
    1496:	4a05      	ldr	r2, [pc, #20]	; (14ac <dma_init_channel+0x48>)
    1498:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
    149a:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
    149c:	2000      	movs	r0, #0
    149e:	e7fc      	b.n	149a <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
    14a0:	2000      	movs	r0, #0
    14a2:	e7fa      	b.n	149a <dma_init_channel+0x36>
    14a4:	2000      	movs	r0, #0
    14a6:	e7f8      	b.n	149a <dma_init_channel+0x36>
    14a8:	000013ad 	.word	0x000013ad
    14ac:	41004800 	.word	0x41004800

000014b0 <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
    14b0:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    14b2:	4b07      	ldr	r3, [pc, #28]	; (14d0 <dma_enable_channel+0x20>)
    14b4:	4798      	blx	r3
    14b6:	2800      	cmp	r0, #0
    14b8:	d009      	beq.n	14ce <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
    14ba:	4a06      	ldr	r2, [pc, #24]	; (14d4 <dma_enable_channel+0x24>)
    14bc:	234e      	movs	r3, #78	; 0x4e
    14be:	2102      	movs	r1, #2
    14c0:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
    14c2:	313e      	adds	r1, #62	; 0x3e
    14c4:	5c53      	ldrb	r3, [r2, r1]
    14c6:	2402      	movs	r4, #2
    14c8:	4323      	orrs	r3, r4
    14ca:	b2db      	uxtb	r3, r3
    14cc:	5453      	strb	r3, [r2, r1]
	return true;
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	000013ad 	.word	0x000013ad
    14d4:	41004800 	.word	0x41004800

000014d8 <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
    14d8:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    14da:	4b05      	ldr	r3, [pc, #20]	; (14f0 <dma_disable_channel+0x18>)
    14dc:	4798      	blx	r3
    14de:	2800      	cmp	r0, #0
    14e0:	d005      	beq.n	14ee <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
    14e2:	4904      	ldr	r1, [pc, #16]	; (14f4 <dma_disable_channel+0x1c>)
    14e4:	2240      	movs	r2, #64	; 0x40
    14e6:	5c8b      	ldrb	r3, [r1, r2]
    14e8:	2402      	movs	r4, #2
    14ea:	43a3      	bics	r3, r4
    14ec:	548b      	strb	r3, [r1, r2]
	return true;
}
    14ee:	bd10      	pop	{r4, pc}
    14f0:	000013ad 	.word	0x000013ad
    14f4:	41004800 	.word	0x41004800

000014f8 <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
    14f8:	b530      	push	{r4, r5, lr}
    14fa:	b083      	sub	sp, #12
    14fc:	0004      	movs	r4, r0
    14fe:	9200      	str	r2, [sp, #0]
    1500:	9301      	str	r3, [sp, #4]
    1502:	ab06      	add	r3, sp, #24
    1504:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
    1506:	7001      	strb	r1, [r0, #0]
    1508:	0a0b      	lsrs	r3, r1, #8
    150a:	7043      	strb	r3, [r0, #1]
    150c:	0c0b      	lsrs	r3, r1, #16
    150e:	7083      	strb	r3, [r0, #2]
    1510:	0e09      	lsrs	r1, r1, #24
    1512:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1514:	3004      	adds	r0, #4
    1516:	2205      	movs	r2, #5
    1518:	4669      	mov	r1, sp
    151a:	4b10      	ldr	r3, [pc, #64]	; (155c <eeprom_init+0x64>)
    151c:	4798      	blx	r3
	desc->size = size;
    151e:	7265      	strb	r5, [r4, #9]
    1520:	0a2d      	lsrs	r5, r5, #8
    1522:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1524:	7923      	ldrb	r3, [r4, #4]
    1526:	7962      	ldrb	r2, [r4, #5]
    1528:	0212      	lsls	r2, r2, #8
    152a:	431a      	orrs	r2, r3
    152c:	79a3      	ldrb	r3, [r4, #6]
    152e:	041b      	lsls	r3, r3, #16
    1530:	4313      	orrs	r3, r2
    1532:	79e1      	ldrb	r1, [r4, #7]
    1534:	0609      	lsls	r1, r1, #24
    1536:	4319      	orrs	r1, r3
    1538:	7a20      	ldrb	r0, [r4, #8]
    153a:	4b09      	ldr	r3, [pc, #36]	; (1560 <eeprom_init+0x68>)
    153c:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    153e:	7923      	ldrb	r3, [r4, #4]
    1540:	7962      	ldrb	r2, [r4, #5]
    1542:	0212      	lsls	r2, r2, #8
    1544:	431a      	orrs	r2, r3
    1546:	79a3      	ldrb	r3, [r4, #6]
    1548:	041b      	lsls	r3, r3, #16
    154a:	4313      	orrs	r3, r2
    154c:	79e1      	ldrb	r1, [r4, #7]
    154e:	0609      	lsls	r1, r1, #24
    1550:	4319      	orrs	r1, r3
    1552:	7a20      	ldrb	r0, [r4, #8]
    1554:	4b03      	ldr	r3, [pc, #12]	; (1564 <eeprom_init+0x6c>)
    1556:	4798      	blx	r3
}
    1558:	b003      	add	sp, #12
    155a:	bd30      	pop	{r4, r5, pc}
    155c:	00005375 	.word	0x00005375
    1560:	00001c49 	.word	0x00001c49
    1564:	00001c59 	.word	0x00001c59

00001568 <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
    1568:	b510      	push	{r4, lr}
    156a:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    156c:	7903      	ldrb	r3, [r0, #4]
    156e:	7942      	ldrb	r2, [r0, #5]
    1570:	0212      	lsls	r2, r2, #8
    1572:	431a      	orrs	r2, r3
    1574:	7983      	ldrb	r3, [r0, #6]
    1576:	041b      	lsls	r3, r3, #16
    1578:	4313      	orrs	r3, r2
    157a:	79c1      	ldrb	r1, [r0, #7]
    157c:	0609      	lsls	r1, r1, #24
    157e:	4319      	orrs	r1, r3
    1580:	7a00      	ldrb	r0, [r0, #8]
    1582:	4b0e      	ldr	r3, [pc, #56]	; (15bc <eeprom_write_enable+0x54>)
    1584:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
    1586:	7823      	ldrb	r3, [r4, #0]
    1588:	7862      	ldrb	r2, [r4, #1]
    158a:	0212      	lsls	r2, r2, #8
    158c:	431a      	orrs	r2, r3
    158e:	78a3      	ldrb	r3, [r4, #2]
    1590:	041b      	lsls	r3, r3, #16
    1592:	4313      	orrs	r3, r2
    1594:	78e0      	ldrb	r0, [r4, #3]
    1596:	0600      	lsls	r0, r0, #24
    1598:	4318      	orrs	r0, r3
    159a:	2106      	movs	r1, #6
    159c:	4b08      	ldr	r3, [pc, #32]	; (15c0 <eeprom_write_enable+0x58>)
    159e:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    15a0:	7923      	ldrb	r3, [r4, #4]
    15a2:	7962      	ldrb	r2, [r4, #5]
    15a4:	0212      	lsls	r2, r2, #8
    15a6:	431a      	orrs	r2, r3
    15a8:	79a3      	ldrb	r3, [r4, #6]
    15aa:	041b      	lsls	r3, r3, #16
    15ac:	4313      	orrs	r3, r2
    15ae:	79e1      	ldrb	r1, [r4, #7]
    15b0:	0609      	lsls	r1, r1, #24
    15b2:	4319      	orrs	r1, r3
    15b4:	7a20      	ldrb	r0, [r4, #8]
    15b6:	4b03      	ldr	r3, [pc, #12]	; (15c4 <eeprom_write_enable+0x5c>)
    15b8:	4798      	blx	r3
}
    15ba:	bd10      	pop	{r4, pc}
    15bc:	00001c69 	.word	0x00001c69
    15c0:	00002145 	.word	0x00002145
    15c4:	00001c59 	.word	0x00001c59

000015c8 <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
    15c8:	b510      	push	{r4, lr}
    15ca:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    15cc:	7903      	ldrb	r3, [r0, #4]
    15ce:	7942      	ldrb	r2, [r0, #5]
    15d0:	0212      	lsls	r2, r2, #8
    15d2:	431a      	orrs	r2, r3
    15d4:	7983      	ldrb	r3, [r0, #6]
    15d6:	041b      	lsls	r3, r3, #16
    15d8:	4313      	orrs	r3, r2
    15da:	79c1      	ldrb	r1, [r0, #7]
    15dc:	0609      	lsls	r1, r1, #24
    15de:	4319      	orrs	r1, r3
    15e0:	7a00      	ldrb	r0, [r0, #8]
    15e2:	4b0e      	ldr	r3, [pc, #56]	; (161c <eeprom_write_disable+0x54>)
    15e4:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
    15e6:	7823      	ldrb	r3, [r4, #0]
    15e8:	7862      	ldrb	r2, [r4, #1]
    15ea:	0212      	lsls	r2, r2, #8
    15ec:	431a      	orrs	r2, r3
    15ee:	78a3      	ldrb	r3, [r4, #2]
    15f0:	041b      	lsls	r3, r3, #16
    15f2:	4313      	orrs	r3, r2
    15f4:	78e0      	ldrb	r0, [r4, #3]
    15f6:	0600      	lsls	r0, r0, #24
    15f8:	4318      	orrs	r0, r3
    15fa:	2104      	movs	r1, #4
    15fc:	4b08      	ldr	r3, [pc, #32]	; (1620 <eeprom_write_disable+0x58>)
    15fe:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1600:	7923      	ldrb	r3, [r4, #4]
    1602:	7962      	ldrb	r2, [r4, #5]
    1604:	0212      	lsls	r2, r2, #8
    1606:	431a      	orrs	r2, r3
    1608:	79a3      	ldrb	r3, [r4, #6]
    160a:	041b      	lsls	r3, r3, #16
    160c:	4313      	orrs	r3, r2
    160e:	79e1      	ldrb	r1, [r4, #7]
    1610:	0609      	lsls	r1, r1, #24
    1612:	4319      	orrs	r1, r3
    1614:	7a20      	ldrb	r0, [r4, #8]
    1616:	4b03      	ldr	r3, [pc, #12]	; (1624 <eeprom_write_disable+0x5c>)
    1618:	4798      	blx	r3
}
    161a:	bd10      	pop	{r4, pc}
    161c:	00001c69 	.word	0x00001c69
    1620:	00002145 	.word	0x00002145
    1624:	00001c59 	.word	0x00001c59

00001628 <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
    1628:	b570      	push	{r4, r5, r6, lr}
    162a:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    162c:	7903      	ldrb	r3, [r0, #4]
    162e:	7942      	ldrb	r2, [r0, #5]
    1630:	0212      	lsls	r2, r2, #8
    1632:	431a      	orrs	r2, r3
    1634:	7983      	ldrb	r3, [r0, #6]
    1636:	041b      	lsls	r3, r3, #16
    1638:	4313      	orrs	r3, r2
    163a:	79c1      	ldrb	r1, [r0, #7]
    163c:	0609      	lsls	r1, r1, #24
    163e:	4319      	orrs	r1, r3
    1640:	7a00      	ldrb	r0, [r0, #8]
    1642:	4b15      	ldr	r3, [pc, #84]	; (1698 <eeprom_read_status+0x70>)
    1644:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
    1646:	7823      	ldrb	r3, [r4, #0]
    1648:	7862      	ldrb	r2, [r4, #1]
    164a:	0212      	lsls	r2, r2, #8
    164c:	431a      	orrs	r2, r3
    164e:	78a3      	ldrb	r3, [r4, #2]
    1650:	041b      	lsls	r3, r3, #16
    1652:	4313      	orrs	r3, r2
    1654:	78e0      	ldrb	r0, [r4, #3]
    1656:	0600      	lsls	r0, r0, #24
    1658:	4318      	orrs	r0, r3
    165a:	2105      	movs	r1, #5
    165c:	4d0f      	ldr	r5, [pc, #60]	; (169c <eeprom_read_status+0x74>)
    165e:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
    1660:	7823      	ldrb	r3, [r4, #0]
    1662:	7862      	ldrb	r2, [r4, #1]
    1664:	0212      	lsls	r2, r2, #8
    1666:	431a      	orrs	r2, r3
    1668:	78a3      	ldrb	r3, [r4, #2]
    166a:	041b      	lsls	r3, r3, #16
    166c:	4313      	orrs	r3, r2
    166e:	78e0      	ldrb	r0, [r4, #3]
    1670:	0600      	lsls	r0, r0, #24
    1672:	4318      	orrs	r0, r3
    1674:	2100      	movs	r1, #0
    1676:	47a8      	blx	r5
    1678:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
    167a:	7923      	ldrb	r3, [r4, #4]
    167c:	7962      	ldrb	r2, [r4, #5]
    167e:	0212      	lsls	r2, r2, #8
    1680:	431a      	orrs	r2, r3
    1682:	79a3      	ldrb	r3, [r4, #6]
    1684:	041b      	lsls	r3, r3, #16
    1686:	4313      	orrs	r3, r2
    1688:	79e1      	ldrb	r1, [r4, #7]
    168a:	0609      	lsls	r1, r1, #24
    168c:	4319      	orrs	r1, r3
    168e:	7a20      	ldrb	r0, [r4, #8]
    1690:	4b03      	ldr	r3, [pc, #12]	; (16a0 <eeprom_read_status+0x78>)
    1692:	4798      	blx	r3
}
    1694:	0028      	movs	r0, r5
    1696:	bd70      	pop	{r4, r5, r6, pc}
    1698:	00001c69 	.word	0x00001c69
    169c:	00002145 	.word	0x00002145
    16a0:	00001c59 	.word	0x00001c59

000016a4 <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
    16a4:	b510      	push	{r4, lr}
    16a6:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
    16a8:	4b0a      	ldr	r3, [pc, #40]	; (16d4 <eeprom_check+0x30>)
    16aa:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
    16ac:	0020      	movs	r0, r4
    16ae:	4b0a      	ldr	r3, [pc, #40]	; (16d8 <eeprom_check+0x34>)
    16b0:	4798      	blx	r3
    16b2:	0780      	lsls	r0, r0, #30
    16b4:	d401      	bmi.n	16ba <eeprom_check+0x16>
    16b6:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
    16b8:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
    16ba:	0020      	movs	r0, r4
    16bc:	4b07      	ldr	r3, [pc, #28]	; (16dc <eeprom_check+0x38>)
    16be:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    16c0:	0020      	movs	r0, r4
    16c2:	4b05      	ldr	r3, [pc, #20]	; (16d8 <eeprom_check+0x34>)
    16c4:	4798      	blx	r3
    16c6:	0780      	lsls	r0, r0, #30
    16c8:	d401      	bmi.n	16ce <eeprom_check+0x2a>
	return true;
    16ca:	2001      	movs	r0, #1
    16cc:	e7f4      	b.n	16b8 <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    16ce:	2000      	movs	r0, #0
    16d0:	e7f2      	b.n	16b8 <eeprom_check+0x14>
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	00001569 	.word	0x00001569
    16d8:	00001629 	.word	0x00001629
    16dc:	000015c9 	.word	0x000015c9

000016e0 <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
    16e0:	b570      	push	{r4, r5, r6, lr}
    16e2:	b082      	sub	sp, #8
    16e4:	0004      	movs	r4, r0
    16e6:	9200      	str	r2, [sp, #0]
    16e8:	9301      	str	r3, [sp, #4]
    16ea:	ab06      	add	r3, sp, #24
    16ec:	cb20      	ldmia	r3!, {r5}
    16ee:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
    16f0:	7001      	strb	r1, [r0, #0]
    16f2:	0a0b      	lsrs	r3, r1, #8
    16f4:	7043      	strb	r3, [r0, #1]
    16f6:	0c0b      	lsrs	r3, r1, #16
    16f8:	7083      	strb	r3, [r0, #2]
    16fa:	0e09      	lsrs	r1, r1, #24
    16fc:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    16fe:	3008      	adds	r0, #8
    1700:	2205      	movs	r2, #5
    1702:	4669      	mov	r1, sp
    1704:	4b15      	ldr	r3, [pc, #84]	; (175c <flash_init+0x7c>)
    1706:	4798      	blx	r3
	desc->size = size;
    1708:	7125      	strb	r5, [r4, #4]
    170a:	0a2b      	lsrs	r3, r5, #8
    170c:	7163      	strb	r3, [r4, #5]
    170e:	0c2b      	lsrs	r3, r5, #16
    1710:	71a3      	strb	r3, [r4, #6]
    1712:	0e2d      	lsrs	r5, r5, #24
    1714:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
    1716:	221f      	movs	r2, #31
    1718:	4032      	ands	r2, r6
    171a:	7b63      	ldrb	r3, [r4, #13]
    171c:	211f      	movs	r1, #31
    171e:	438b      	bics	r3, r1
    1720:	4313      	orrs	r3, r2
    1722:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1724:	7a23      	ldrb	r3, [r4, #8]
    1726:	7a62      	ldrb	r2, [r4, #9]
    1728:	0212      	lsls	r2, r2, #8
    172a:	431a      	orrs	r2, r3
    172c:	7aa3      	ldrb	r3, [r4, #10]
    172e:	041b      	lsls	r3, r3, #16
    1730:	4313      	orrs	r3, r2
    1732:	7ae1      	ldrb	r1, [r4, #11]
    1734:	0609      	lsls	r1, r1, #24
    1736:	4319      	orrs	r1, r3
    1738:	7b20      	ldrb	r0, [r4, #12]
    173a:	4b09      	ldr	r3, [pc, #36]	; (1760 <flash_init+0x80>)
    173c:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    173e:	7a23      	ldrb	r3, [r4, #8]
    1740:	7a62      	ldrb	r2, [r4, #9]
    1742:	0212      	lsls	r2, r2, #8
    1744:	431a      	orrs	r2, r3
    1746:	7aa3      	ldrb	r3, [r4, #10]
    1748:	041b      	lsls	r3, r3, #16
    174a:	4313      	orrs	r3, r2
    174c:	7ae1      	ldrb	r1, [r4, #11]
    174e:	0609      	lsls	r1, r1, #24
    1750:	4319      	orrs	r1, r3
    1752:	7b20      	ldrb	r0, [r4, #12]
    1754:	4b03      	ldr	r3, [pc, #12]	; (1764 <flash_init+0x84>)
    1756:	4798      	blx	r3
}
    1758:	b002      	add	sp, #8
    175a:	bd70      	pop	{r4, r5, r6, pc}
    175c:	00005375 	.word	0x00005375
    1760:	00001c49 	.word	0x00001c49
    1764:	00001c59 	.word	0x00001c59

00001768 <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
    1768:	b530      	push	{r4, r5, lr}
    176a:	b083      	sub	sp, #12
    176c:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    176e:	7a03      	ldrb	r3, [r0, #8]
    1770:	7a42      	ldrb	r2, [r0, #9]
    1772:	0212      	lsls	r2, r2, #8
    1774:	431a      	orrs	r2, r3
    1776:	7a83      	ldrb	r3, [r0, #10]
    1778:	041b      	lsls	r3, r3, #16
    177a:	4313      	orrs	r3, r2
    177c:	7ac1      	ldrb	r1, [r0, #11]
    177e:	0609      	lsls	r1, r1, #24
    1780:	4319      	orrs	r1, r3
    1782:	7b00      	ldrb	r0, [r0, #12]
    1784:	4b24      	ldr	r3, [pc, #144]	; (1818 <flash_check+0xb0>)
    1786:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    1788:	7823      	ldrb	r3, [r4, #0]
    178a:	7862      	ldrb	r2, [r4, #1]
    178c:	0212      	lsls	r2, r2, #8
    178e:	431a      	orrs	r2, r3
    1790:	78a3      	ldrb	r3, [r4, #2]
    1792:	041b      	lsls	r3, r3, #16
    1794:	4313      	orrs	r3, r2
    1796:	78e0      	ldrb	r0, [r4, #3]
    1798:	0600      	lsls	r0, r0, #24
    179a:	4318      	orrs	r0, r3
    179c:	219f      	movs	r1, #159	; 0x9f
    179e:	4b1f      	ldr	r3, [pc, #124]	; (181c <flash_check+0xb4>)
    17a0:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    17a2:	2500      	movs	r5, #0
    17a4:	e00f      	b.n	17c6 <flash_check+0x5e>
    17a6:	7823      	ldrb	r3, [r4, #0]
    17a8:	7862      	ldrb	r2, [r4, #1]
    17aa:	0212      	lsls	r2, r2, #8
    17ac:	431a      	orrs	r2, r3
    17ae:	78a3      	ldrb	r3, [r4, #2]
    17b0:	041b      	lsls	r3, r3, #16
    17b2:	4313      	orrs	r3, r2
    17b4:	78e0      	ldrb	r0, [r4, #3]
    17b6:	0600      	lsls	r0, r0, #24
    17b8:	4318      	orrs	r0, r3
    17ba:	2100      	movs	r1, #0
    17bc:	4b17      	ldr	r3, [pc, #92]	; (181c <flash_check+0xb4>)
    17be:	4798      	blx	r3
    17c0:	ab01      	add	r3, sp, #4
    17c2:	5558      	strb	r0, [r3, r5]
    17c4:	3501      	adds	r5, #1
    17c6:	2d02      	cmp	r5, #2
    17c8:	dded      	ble.n	17a6 <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    17ca:	7a23      	ldrb	r3, [r4, #8]
    17cc:	7a62      	ldrb	r2, [r4, #9]
    17ce:	0212      	lsls	r2, r2, #8
    17d0:	431a      	orrs	r2, r3
    17d2:	7aa3      	ldrb	r3, [r4, #10]
    17d4:	041b      	lsls	r3, r3, #16
    17d6:	4313      	orrs	r3, r2
    17d8:	7ae1      	ldrb	r1, [r4, #11]
    17da:	0609      	lsls	r1, r1, #24
    17dc:	4319      	orrs	r1, r3
    17de:	7b20      	ldrb	r0, [r4, #12]
    17e0:	4b0f      	ldr	r3, [pc, #60]	; (1820 <flash_check+0xb8>)
    17e2:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    17e4:	ab01      	add	r3, sp, #4
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	2b1f      	cmp	r3, #31
    17ea:	d10e      	bne.n	180a <flash_check+0xa2>
    17ec:	ab01      	add	r3, sp, #4
    17ee:	785a      	ldrb	r2, [r3, #1]
    17f0:	7b63      	ldrb	r3, [r4, #13]
    17f2:	06db      	lsls	r3, r3, #27
    17f4:	0edb      	lsrs	r3, r3, #27
    17f6:	2180      	movs	r1, #128	; 0x80
    17f8:	430b      	orrs	r3, r1
    17fa:	429a      	cmp	r2, r3
    17fc:	d108      	bne.n	1810 <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    17fe:	ab01      	add	r3, sp, #4
    1800:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1802:	2b01      	cmp	r3, #1
    1804:	d006      	beq.n	1814 <flash_check+0xac>
	else return false;
    1806:	2000      	movs	r0, #0
    1808:	e000      	b.n	180c <flash_check+0xa4>
    180a:	2000      	movs	r0, #0
}
    180c:	b003      	add	sp, #12
    180e:	bd30      	pop	{r4, r5, pc}
	else return false;
    1810:	2000      	movs	r0, #0
    1812:	e7fb      	b.n	180c <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    1814:	2001      	movs	r0, #1
    1816:	e7f9      	b.n	180c <flash_check+0xa4>
    1818:	00001c69 	.word	0x00001c69
    181c:	00002145 	.word	0x00002145
    1820:	00001c59 	.word	0x00001c59

00001824 <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1824:	b570      	push	{r4, r5, r6, lr}
    1826:	0004      	movs	r4, r0
    1828:	000e      	movs	r6, r1
    182a:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    182c:	7902      	ldrb	r2, [r0, #4]
    182e:	7943      	ldrb	r3, [r0, #5]
    1830:	021b      	lsls	r3, r3, #8
    1832:	4313      	orrs	r3, r2
    1834:	7982      	ldrb	r2, [r0, #6]
    1836:	0412      	lsls	r2, r2, #16
    1838:	431a      	orrs	r2, r3
    183a:	79c1      	ldrb	r1, [r0, #7]
    183c:	0609      	lsls	r1, r1, #24
    183e:	4311      	orrs	r1, r2
    1840:	7a00      	ldrb	r0, [r0, #8]
    1842:	4b15      	ldr	r3, [pc, #84]	; (1898 <imu_icm20948_write_byte+0x74>)
    1844:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    1846:	217f      	movs	r1, #127	; 0x7f
    1848:	4031      	ands	r1, r6
    184a:	7823      	ldrb	r3, [r4, #0]
    184c:	7862      	ldrb	r2, [r4, #1]
    184e:	0212      	lsls	r2, r2, #8
    1850:	431a      	orrs	r2, r3
    1852:	78a3      	ldrb	r3, [r4, #2]
    1854:	041b      	lsls	r3, r3, #16
    1856:	4313      	orrs	r3, r2
    1858:	78e0      	ldrb	r0, [r4, #3]
    185a:	0600      	lsls	r0, r0, #24
    185c:	4318      	orrs	r0, r3
    185e:	4e0f      	ldr	r6, [pc, #60]	; (189c <imu_icm20948_write_byte+0x78>)
    1860:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    1862:	7823      	ldrb	r3, [r4, #0]
    1864:	7862      	ldrb	r2, [r4, #1]
    1866:	0212      	lsls	r2, r2, #8
    1868:	431a      	orrs	r2, r3
    186a:	78a3      	ldrb	r3, [r4, #2]
    186c:	041b      	lsls	r3, r3, #16
    186e:	4313      	orrs	r3, r2
    1870:	78e0      	ldrb	r0, [r4, #3]
    1872:	0600      	lsls	r0, r0, #24
    1874:	4318      	orrs	r0, r3
    1876:	0029      	movs	r1, r5
    1878:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    187a:	7923      	ldrb	r3, [r4, #4]
    187c:	7962      	ldrb	r2, [r4, #5]
    187e:	0212      	lsls	r2, r2, #8
    1880:	431a      	orrs	r2, r3
    1882:	79a3      	ldrb	r3, [r4, #6]
    1884:	041b      	lsls	r3, r3, #16
    1886:	4313      	orrs	r3, r2
    1888:	79e1      	ldrb	r1, [r4, #7]
    188a:	0609      	lsls	r1, r1, #24
    188c:	4319      	orrs	r1, r3
    188e:	7a20      	ldrb	r0, [r4, #8]
    1890:	4b03      	ldr	r3, [pc, #12]	; (18a0 <imu_icm20948_write_byte+0x7c>)
    1892:	4798      	blx	r3
}
    1894:	bd70      	pop	{r4, r5, r6, pc}
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	00001c69 	.word	0x00001c69
    189c:	00002145 	.word	0x00002145
    18a0:	00001c59 	.word	0x00001c59

000018a4 <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    18a4:	b570      	push	{r4, r5, r6, lr}
    18a6:	0004      	movs	r4, r0
    18a8:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    18aa:	7903      	ldrb	r3, [r0, #4]
    18ac:	7942      	ldrb	r2, [r0, #5]
    18ae:	0212      	lsls	r2, r2, #8
    18b0:	431a      	orrs	r2, r3
    18b2:	7983      	ldrb	r3, [r0, #6]
    18b4:	041b      	lsls	r3, r3, #16
    18b6:	4313      	orrs	r3, r2
    18b8:	79c1      	ldrb	r1, [r0, #7]
    18ba:	0609      	lsls	r1, r1, #24
    18bc:	4319      	orrs	r1, r3
    18be:	7a00      	ldrb	r0, [r0, #8]
    18c0:	4b16      	ldr	r3, [pc, #88]	; (191c <imu_icm20948_read_byte+0x78>)
    18c2:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    18c4:	2180      	movs	r1, #128	; 0x80
    18c6:	4249      	negs	r1, r1
    18c8:	4329      	orrs	r1, r5
    18ca:	b2c9      	uxtb	r1, r1
    18cc:	7823      	ldrb	r3, [r4, #0]
    18ce:	7862      	ldrb	r2, [r4, #1]
    18d0:	0212      	lsls	r2, r2, #8
    18d2:	431a      	orrs	r2, r3
    18d4:	78a3      	ldrb	r3, [r4, #2]
    18d6:	041b      	lsls	r3, r3, #16
    18d8:	4313      	orrs	r3, r2
    18da:	78e0      	ldrb	r0, [r4, #3]
    18dc:	0600      	lsls	r0, r0, #24
    18de:	4318      	orrs	r0, r3
    18e0:	4d0f      	ldr	r5, [pc, #60]	; (1920 <imu_icm20948_read_byte+0x7c>)
    18e2:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    18e4:	7823      	ldrb	r3, [r4, #0]
    18e6:	7862      	ldrb	r2, [r4, #1]
    18e8:	0212      	lsls	r2, r2, #8
    18ea:	431a      	orrs	r2, r3
    18ec:	78a3      	ldrb	r3, [r4, #2]
    18ee:	041b      	lsls	r3, r3, #16
    18f0:	4313      	orrs	r3, r2
    18f2:	78e0      	ldrb	r0, [r4, #3]
    18f4:	0600      	lsls	r0, r0, #24
    18f6:	4318      	orrs	r0, r3
    18f8:	2100      	movs	r1, #0
    18fa:	47a8      	blx	r5
    18fc:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    18fe:	7923      	ldrb	r3, [r4, #4]
    1900:	7962      	ldrb	r2, [r4, #5]
    1902:	0212      	lsls	r2, r2, #8
    1904:	431a      	orrs	r2, r3
    1906:	79a3      	ldrb	r3, [r4, #6]
    1908:	041b      	lsls	r3, r3, #16
    190a:	4313      	orrs	r3, r2
    190c:	79e1      	ldrb	r1, [r4, #7]
    190e:	0609      	lsls	r1, r1, #24
    1910:	4319      	orrs	r1, r3
    1912:	7a20      	ldrb	r0, [r4, #8]
    1914:	4b03      	ldr	r3, [pc, #12]	; (1924 <imu_icm20948_read_byte+0x80>)
    1916:	4798      	blx	r3
	return out;
}
    1918:	0028      	movs	r0, r5
    191a:	bd70      	pop	{r4, r5, r6, pc}
    191c:	00001c69 	.word	0x00001c69
    1920:	00002145 	.word	0x00002145
    1924:	00001c59 	.word	0x00001c59

00001928 <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1928:	b5f0      	push	{r4, r5, r6, r7, lr}
    192a:	46c6      	mov	lr, r8
    192c:	b500      	push	{lr}
    192e:	0004      	movs	r4, r0
    1930:	000d      	movs	r5, r1
    1932:	0017      	movs	r7, r2
    1934:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1936:	7902      	ldrb	r2, [r0, #4]
    1938:	7943      	ldrb	r3, [r0, #5]
    193a:	021b      	lsls	r3, r3, #8
    193c:	4313      	orrs	r3, r2
    193e:	7982      	ldrb	r2, [r0, #6]
    1940:	0412      	lsls	r2, r2, #16
    1942:	431a      	orrs	r2, r3
    1944:	79c1      	ldrb	r1, [r0, #7]
    1946:	0609      	lsls	r1, r1, #24
    1948:	4311      	orrs	r1, r2
    194a:	7a00      	ldrb	r0, [r0, #8]
    194c:	4b19      	ldr	r3, [pc, #100]	; (19b4 <imu_icm20948_write+0x8c>)
    194e:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    1950:	217f      	movs	r1, #127	; 0x7f
    1952:	4029      	ands	r1, r5
    1954:	7823      	ldrb	r3, [r4, #0]
    1956:	7862      	ldrb	r2, [r4, #1]
    1958:	0212      	lsls	r2, r2, #8
    195a:	431a      	orrs	r2, r3
    195c:	78a3      	ldrb	r3, [r4, #2]
    195e:	041b      	lsls	r3, r3, #16
    1960:	4313      	orrs	r3, r2
    1962:	78e0      	ldrb	r0, [r4, #3]
    1964:	0600      	lsls	r0, r0, #24
    1966:	4318      	orrs	r0, r3
    1968:	4b13      	ldr	r3, [pc, #76]	; (19b8 <imu_icm20948_write+0x90>)
    196a:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    196c:	2600      	movs	r6, #0
    196e:	e00e      	b.n	198e <imu_icm20948_write+0x66>
		spi_command(desc->sercom, data[i]);
    1970:	4643      	mov	r3, r8
    1972:	5d99      	ldrb	r1, [r3, r6]
    1974:	7822      	ldrb	r2, [r4, #0]
    1976:	7863      	ldrb	r3, [r4, #1]
    1978:	021b      	lsls	r3, r3, #8
    197a:	4313      	orrs	r3, r2
    197c:	78a5      	ldrb	r5, [r4, #2]
    197e:	042d      	lsls	r5, r5, #16
    1980:	431d      	orrs	r5, r3
    1982:	78e0      	ldrb	r0, [r4, #3]
    1984:	0600      	lsls	r0, r0, #24
    1986:	4328      	orrs	r0, r5
    1988:	4b0b      	ldr	r3, [pc, #44]	; (19b8 <imu_icm20948_write+0x90>)
    198a:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    198c:	3601      	adds	r6, #1
    198e:	42be      	cmp	r6, r7
    1990:	dbee      	blt.n	1970 <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1992:	7923      	ldrb	r3, [r4, #4]
    1994:	7962      	ldrb	r2, [r4, #5]
    1996:	0212      	lsls	r2, r2, #8
    1998:	431a      	orrs	r2, r3
    199a:	79a3      	ldrb	r3, [r4, #6]
    199c:	041b      	lsls	r3, r3, #16
    199e:	4313      	orrs	r3, r2
    19a0:	79e1      	ldrb	r1, [r4, #7]
    19a2:	0609      	lsls	r1, r1, #24
    19a4:	4319      	orrs	r1, r3
    19a6:	7a20      	ldrb	r0, [r4, #8]
    19a8:	4b04      	ldr	r3, [pc, #16]	; (19bc <imu_icm20948_write+0x94>)
    19aa:	4798      	blx	r3
}
    19ac:	bc80      	pop	{r7}
    19ae:	46b8      	mov	r8, r7
    19b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	00001c69 	.word	0x00001c69
    19b8:	00002145 	.word	0x00002145
    19bc:	00001c59 	.word	0x00001c59

000019c0 <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    19c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19c2:	46c6      	mov	lr, r8
    19c4:	b500      	push	{lr}
    19c6:	0004      	movs	r4, r0
    19c8:	000d      	movs	r5, r1
    19ca:	0017      	movs	r7, r2
    19cc:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    19ce:	7903      	ldrb	r3, [r0, #4]
    19d0:	7942      	ldrb	r2, [r0, #5]
    19d2:	0212      	lsls	r2, r2, #8
    19d4:	431a      	orrs	r2, r3
    19d6:	7983      	ldrb	r3, [r0, #6]
    19d8:	041b      	lsls	r3, r3, #16
    19da:	4313      	orrs	r3, r2
    19dc:	79c1      	ldrb	r1, [r0, #7]
    19de:	0609      	lsls	r1, r1, #24
    19e0:	4319      	orrs	r1, r3
    19e2:	7a00      	ldrb	r0, [r0, #8]
    19e4:	4b1b      	ldr	r3, [pc, #108]	; (1a54 <imu_icm20948_read+0x94>)
    19e6:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    19e8:	2180      	movs	r1, #128	; 0x80
    19ea:	4249      	negs	r1, r1
    19ec:	4329      	orrs	r1, r5
    19ee:	b2c9      	uxtb	r1, r1
    19f0:	7823      	ldrb	r3, [r4, #0]
    19f2:	7862      	ldrb	r2, [r4, #1]
    19f4:	0212      	lsls	r2, r2, #8
    19f6:	431a      	orrs	r2, r3
    19f8:	78a3      	ldrb	r3, [r4, #2]
    19fa:	041b      	lsls	r3, r3, #16
    19fc:	4313      	orrs	r3, r2
    19fe:	78e0      	ldrb	r0, [r4, #3]
    1a00:	0600      	lsls	r0, r0, #24
    1a02:	4318      	orrs	r0, r3
    1a04:	4b14      	ldr	r3, [pc, #80]	; (1a58 <imu_icm20948_read+0x98>)
    1a06:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1a08:	2500      	movs	r5, #0
    1a0a:	e010      	b.n	1a2e <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    1a0c:	4643      	mov	r3, r8
    1a0e:	195e      	adds	r6, r3, r5
    1a10:	7823      	ldrb	r3, [r4, #0]
    1a12:	7862      	ldrb	r2, [r4, #1]
    1a14:	0212      	lsls	r2, r2, #8
    1a16:	431a      	orrs	r2, r3
    1a18:	78a3      	ldrb	r3, [r4, #2]
    1a1a:	041b      	lsls	r3, r3, #16
    1a1c:	4313      	orrs	r3, r2
    1a1e:	78e0      	ldrb	r0, [r4, #3]
    1a20:	0600      	lsls	r0, r0, #24
    1a22:	4318      	orrs	r0, r3
    1a24:	2100      	movs	r1, #0
    1a26:	4b0c      	ldr	r3, [pc, #48]	; (1a58 <imu_icm20948_read+0x98>)
    1a28:	4798      	blx	r3
    1a2a:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    1a2c:	3501      	adds	r5, #1
    1a2e:	42bd      	cmp	r5, r7
    1a30:	dbec      	blt.n	1a0c <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1a32:	7923      	ldrb	r3, [r4, #4]
    1a34:	7962      	ldrb	r2, [r4, #5]
    1a36:	0212      	lsls	r2, r2, #8
    1a38:	431a      	orrs	r2, r3
    1a3a:	79a3      	ldrb	r3, [r4, #6]
    1a3c:	041b      	lsls	r3, r3, #16
    1a3e:	4313      	orrs	r3, r2
    1a40:	79e1      	ldrb	r1, [r4, #7]
    1a42:	0609      	lsls	r1, r1, #24
    1a44:	4319      	orrs	r1, r3
    1a46:	7a20      	ldrb	r0, [r4, #8]
    1a48:	4b04      	ldr	r3, [pc, #16]	; (1a5c <imu_icm20948_read+0x9c>)
    1a4a:	4798      	blx	r3
}
    1a4c:	bc80      	pop	{r7}
    1a4e:	46b8      	mov	r8, r7
    1a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	00001c69 	.word	0x00001c69
    1a58:	00002145 	.word	0x00002145
    1a5c:	00001c59 	.word	0x00001c59

00001a60 <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    1a60:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    1a62:	2903      	cmp	r1, #3
    1a64:	d900      	bls.n	1a68 <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    1a66:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    1a68:	0109      	lsls	r1, r1, #4
    1a6a:	b2ca      	uxtb	r2, r1
    1a6c:	217f      	movs	r1, #127	; 0x7f
    1a6e:	4b01      	ldr	r3, [pc, #4]	; (1a74 <imu_icm20948_user_bank+0x14>)
    1a70:	4798      	blx	r3
}
    1a72:	e7f8      	b.n	1a66 <imu_icm20948_user_bank+0x6>
    1a74:	00001825 	.word	0x00001825

00001a78 <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    1a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a7a:	b083      	sub	sp, #12
    1a7c:	0005      	movs	r5, r0
    1a7e:	000c      	movs	r4, r1
    1a80:	9200      	str	r2, [sp, #0]
    1a82:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    1a84:	0008      	movs	r0, r1
    1a86:	4b13      	ldr	r3, [pc, #76]	; (1ad4 <imu_icm20948_init+0x5c>)
    1a88:	4798      	blx	r3
    1a8a:	1e06      	subs	r6, r0, #0
    1a8c:	d102      	bne.n	1a94 <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    1a8e:	0030      	movs	r0, r6
    1a90:	b003      	add	sp, #12
    1a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    1a94:	702c      	strb	r4, [r5, #0]
    1a96:	0a23      	lsrs	r3, r4, #8
    1a98:	706b      	strb	r3, [r5, #1]
    1a9a:	0c23      	lsrs	r3, r4, #16
    1a9c:	70ab      	strb	r3, [r5, #2]
    1a9e:	0e24      	lsrs	r4, r4, #24
    1aa0:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    1aa2:	1d28      	adds	r0, r5, #4
    1aa4:	2205      	movs	r2, #5
    1aa6:	4669      	mov	r1, sp
    1aa8:	4b0b      	ldr	r3, [pc, #44]	; (1ad8 <imu_icm20948_init+0x60>)
    1aaa:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    1aac:	2280      	movs	r2, #128	; 0x80
    1aae:	2106      	movs	r1, #6
    1ab0:	0028      	movs	r0, r5
    1ab2:	4c0a      	ldr	r4, [pc, #40]	; (1adc <imu_icm20948_init+0x64>)
    1ab4:	47a0      	blx	r4
	delay_ms(11);
    1ab6:	480a      	ldr	r0, [pc, #40]	; (1ae0 <imu_icm20948_init+0x68>)
    1ab8:	4f0a      	ldr	r7, [pc, #40]	; (1ae4 <imu_icm20948_init+0x6c>)
    1aba:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    1abc:	2210      	movs	r2, #16
    1abe:	2103      	movs	r1, #3
    1ac0:	0028      	movs	r0, r5
    1ac2:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    1ac4:	2201      	movs	r2, #1
    1ac6:	2106      	movs	r1, #6
    1ac8:	0028      	movs	r0, r5
    1aca:	47a0      	blx	r4
	delay_us(80);
    1acc:	20f0      	movs	r0, #240	; 0xf0
    1ace:	0040      	lsls	r0, r0, #1
    1ad0:	47b8      	blx	r7
	return true;
    1ad2:	e7dc      	b.n	1a8e <imu_icm20948_init+0x16>
    1ad4:	00001f55 	.word	0x00001f55
    1ad8:	00005375 	.word	0x00005375
    1adc:	00001825 	.word	0x00001825
    1ae0:	000101d0 	.word	0x000101d0
    1ae4:	00002229 	.word	0x00002229

00001ae8 <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1ae8:	b510      	push	{r4, lr}
    1aea:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    1aec:	2100      	movs	r1, #0
    1aee:	4b06      	ldr	r3, [pc, #24]	; (1b08 <imu_icm20948_check+0x20>)
    1af0:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    1af2:	2100      	movs	r1, #0
    1af4:	0020      	movs	r0, r4
    1af6:	4b05      	ldr	r3, [pc, #20]	; (1b0c <imu_icm20948_check+0x24>)
    1af8:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    1afa:	28ea      	cmp	r0, #234	; 0xea
    1afc:	d001      	beq.n	1b02 <imu_icm20948_check+0x1a>
	else return false;
    1afe:	2000      	movs	r0, #0
}
    1b00:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    1b02:	38e9      	subs	r0, #233	; 0xe9
    1b04:	e7fc      	b.n	1b00 <imu_icm20948_check+0x18>
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	00001a61 	.word	0x00001a61
    1b0c:	000018a5 	.word	0x000018a5

00001b10 <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b12:	0004      	movs	r4, r0
    1b14:	000f      	movs	r7, r1
    1b16:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1b18:	2103      	movs	r1, #3
    1b1a:	4b0b      	ldr	r3, [pc, #44]	; (1b48 <mag_icm20948_write_byte+0x38>)
    1b1c:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    1b1e:	220c      	movs	r2, #12
    1b20:	2103      	movs	r1, #3
    1b22:	0020      	movs	r0, r4
    1b24:	4d09      	ldr	r5, [pc, #36]	; (1b4c <mag_icm20948_write_byte+0x3c>)
    1b26:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    1b28:	003a      	movs	r2, r7
    1b2a:	2104      	movs	r1, #4
    1b2c:	0020      	movs	r0, r4
    1b2e:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    1b30:	0032      	movs	r2, r6
    1b32:	2106      	movs	r1, #6
    1b34:	0020      	movs	r0, r4
    1b36:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    1b38:	2281      	movs	r2, #129	; 0x81
    1b3a:	2105      	movs	r1, #5
    1b3c:	0020      	movs	r0, r4
    1b3e:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    1b40:	4803      	ldr	r0, [pc, #12]	; (1b50 <mag_icm20948_write_byte+0x40>)
    1b42:	4b04      	ldr	r3, [pc, #16]	; (1b54 <mag_icm20948_write_byte+0x44>)
    1b44:	4798      	blx	r3
}
    1b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b48:	00001a61 	.word	0x00001a61
    1b4c:	00001825 	.word	0x00001825
    1b50:	0000ea60 	.word	0x0000ea60
    1b54:	00002229 	.word	0x00002229

00001b58 <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	46c6      	mov	lr, r8
    1b5c:	b500      	push	{lr}
    1b5e:	b082      	sub	sp, #8
    1b60:	0004      	movs	r4, r0
    1b62:	000f      	movs	r7, r1
    1b64:	0015      	movs	r5, r2
    1b66:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1b68:	2103      	movs	r1, #3
    1b6a:	4e0f      	ldr	r6, [pc, #60]	; (1ba8 <mag_icm20948_read+0x50>)
    1b6c:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    1b6e:	ab01      	add	r3, sp, #4
    1b70:	228c      	movs	r2, #140	; 0x8c
    1b72:	701a      	strb	r2, [r3, #0]
    1b74:	705f      	strb	r7, [r3, #1]
    1b76:	3a0d      	subs	r2, #13
    1b78:	3aff      	subs	r2, #255	; 0xff
    1b7a:	432a      	orrs	r2, r5
    1b7c:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    1b7e:	2203      	movs	r2, #3
    1b80:	2103      	movs	r1, #3
    1b82:	0020      	movs	r0, r4
    1b84:	4f09      	ldr	r7, [pc, #36]	; (1bac <mag_icm20948_read+0x54>)
    1b86:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    1b88:	4809      	ldr	r0, [pc, #36]	; (1bb0 <mag_icm20948_read+0x58>)
    1b8a:	4b0a      	ldr	r3, [pc, #40]	; (1bb4 <mag_icm20948_read+0x5c>)
    1b8c:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1b8e:	2100      	movs	r1, #0
    1b90:	0020      	movs	r0, r4
    1b92:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    1b94:	4643      	mov	r3, r8
    1b96:	002a      	movs	r2, r5
    1b98:	213b      	movs	r1, #59	; 0x3b
    1b9a:	0020      	movs	r0, r4
    1b9c:	4c06      	ldr	r4, [pc, #24]	; (1bb8 <mag_icm20948_read+0x60>)
    1b9e:	47a0      	blx	r4
}
    1ba0:	b002      	add	sp, #8
    1ba2:	bc80      	pop	{r7}
    1ba4:	46b8      	mov	r8, r7
    1ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ba8:	00001a61 	.word	0x00001a61
    1bac:	00001929 	.word	0x00001929
    1bb0:	00001770 	.word	0x00001770
    1bb4:	00002229 	.word	0x00002229
    1bb8:	000019c1 	.word	0x000019c1

00001bbc <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    1bbc:	b570      	push	{r4, r5, r6, lr}
    1bbe:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1bc0:	2100      	movs	r1, #0
    1bc2:	4e10      	ldr	r6, [pc, #64]	; (1c04 <mag_icm20948_init+0x48>)
    1bc4:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    1bc6:	2220      	movs	r2, #32
    1bc8:	2103      	movs	r1, #3
    1bca:	0020      	movs	r0, r4
    1bcc:	4d0e      	ldr	r5, [pc, #56]	; (1c08 <mag_icm20948_init+0x4c>)
    1bce:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1bd0:	2103      	movs	r1, #3
    1bd2:	0020      	movs	r0, r4
    1bd4:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    1bd6:	2207      	movs	r2, #7
    1bd8:	2101      	movs	r1, #1
    1bda:	0020      	movs	r0, r4
    1bdc:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    1bde:	2201      	movs	r2, #1
    1be0:	2102      	movs	r1, #2
    1be2:	0020      	movs	r0, r4
    1be4:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    1be6:	4809      	ldr	r0, [pc, #36]	; (1c0c <mag_icm20948_init+0x50>)
    1be8:	4b09      	ldr	r3, [pc, #36]	; (1c10 <mag_icm20948_init+0x54>)
    1bea:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    1bec:	2201      	movs	r2, #1
    1bee:	2132      	movs	r1, #50	; 0x32
    1bf0:	0020      	movs	r0, r4
    1bf2:	4d08      	ldr	r5, [pc, #32]	; (1c14 <mag_icm20948_init+0x58>)
    1bf4:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    1bf6:	2208      	movs	r2, #8
    1bf8:	2131      	movs	r1, #49	; 0x31
    1bfa:	0020      	movs	r0, r4
    1bfc:	47a8      	blx	r5
	
	return true;
}
    1bfe:	2001      	movs	r0, #1
    1c00:	bd70      	pop	{r4, r5, r6, pc}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	00001a61 	.word	0x00001a61
    1c08:	00001825 	.word	0x00001825
    1c0c:	00001770 	.word	0x00001770
    1c10:	00002229 	.word	0x00002229
    1c14:	00001b11 	.word	0x00001b11

00001c18 <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1c18:	b530      	push	{r4, r5, lr}
    1c1a:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    1c1c:	ac01      	add	r4, sp, #4
    1c1e:	0023      	movs	r3, r4
    1c20:	2202      	movs	r2, #2
    1c22:	2100      	movs	r1, #0
    1c24:	4d07      	ldr	r5, [pc, #28]	; (1c44 <mag_icm20948_check+0x2c>)
    1c26:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1c28:	7823      	ldrb	r3, [r4, #0]
    1c2a:	2b48      	cmp	r3, #72	; 0x48
    1c2c:	d104      	bne.n	1c38 <mag_icm20948_check+0x20>
    1c2e:	7863      	ldrb	r3, [r4, #1]
    1c30:	2b09      	cmp	r3, #9
    1c32:	d004      	beq.n	1c3e <mag_icm20948_check+0x26>
	else return false;
    1c34:	2000      	movs	r0, #0
    1c36:	e000      	b.n	1c3a <mag_icm20948_check+0x22>
    1c38:	2000      	movs	r0, #0
    1c3a:	b003      	add	sp, #12
    1c3c:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1c3e:	2001      	movs	r0, #1
    1c40:	e7fb      	b.n	1c3a <mag_icm20948_check+0x22>
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	00001b59 	.word	0x00001b59

00001c48 <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    1c48:	01c0      	lsls	r0, r0, #7
    1c4a:	4b02      	ldr	r3, [pc, #8]	; (1c54 <port_set_output+0xc>)
    1c4c:	469c      	mov	ip, r3
    1c4e:	4460      	add	r0, ip
    1c50:	6081      	str	r1, [r0, #8]
}
    1c52:	4770      	bx	lr
    1c54:	41004400 	.word	0x41004400

00001c58 <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    1c58:	01c0      	lsls	r0, r0, #7
    1c5a:	4b02      	ldr	r3, [pc, #8]	; (1c64 <port_set+0xc>)
    1c5c:	469c      	mov	ip, r3
    1c5e:	4460      	add	r0, ip
    1c60:	6181      	str	r1, [r0, #24]
}
    1c62:	4770      	bx	lr
    1c64:	41004400 	.word	0x41004400

00001c68 <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    1c68:	01c0      	lsls	r0, r0, #7
    1c6a:	4b02      	ldr	r3, [pc, #8]	; (1c74 <port_clear+0xc>)
    1c6c:	469c      	mov	ip, r3
    1c6e:	4460      	add	r0, ip
    1c70:	6141      	str	r1, [r0, #20]
}
    1c72:	4770      	bx	lr
    1c74:	41004400 	.word	0x41004400

00001c78 <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    1c78:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    1c7a:	060b      	lsls	r3, r1, #24
    1c7c:	21f0      	movs	r1, #240	; 0xf0
    1c7e:	0509      	lsls	r1, r1, #20
    1c80:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    1c82:	490e      	ldr	r1, [pc, #56]	; (1cbc <port_wrconfig+0x44>)
    1c84:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    1c86:	0413      	lsls	r3, r2, #16
    1c88:	0c1c      	lsrs	r4, r3, #16
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d005      	beq.n	1c9a <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    1c8e:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1c90:	01c3      	lsls	r3, r0, #7
    1c92:	4c0b      	ldr	r4, [pc, #44]	; (1cc0 <port_wrconfig+0x48>)
    1c94:	46a4      	mov	ip, r4
    1c96:	4463      	add	r3, ip
    1c98:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    1c9a:	2380      	movs	r3, #128	; 0x80
    1c9c:	025b      	lsls	r3, r3, #9
    1c9e:	429a      	cmp	r2, r3
    1ca0:	d30b      	bcc.n	1cba <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    1ca2:	0c09      	lsrs	r1, r1, #16
    1ca4:	0409      	lsls	r1, r1, #16
    1ca6:	2380      	movs	r3, #128	; 0x80
    1ca8:	061b      	lsls	r3, r3, #24
    1caa:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    1cac:	0c12      	lsrs	r2, r2, #16
    1cae:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1cb0:	01c0      	lsls	r0, r0, #7
    1cb2:	4b03      	ldr	r3, [pc, #12]	; (1cc0 <port_wrconfig+0x48>)
    1cb4:	469c      	mov	ip, r3
    1cb6:	4460      	add	r0, ip
    1cb8:	6282      	str	r2, [r0, #40]	; 0x28
	}
    1cba:	bd10      	pop	{r4, pc}
    1cbc:	50010000 	.word	0x50010000
    1cc0:	41004400 	.word	0x41004400

00001cc4 <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    1cc4:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    1cc6:	4c2a      	ldr	r4, [pc, #168]	; (1d70 <pwm_init_tc+0xac>)
    1cc8:	42a0      	cmp	r0, r4
    1cca:	d03c      	beq.n	1d46 <pwm_init_tc+0x82>
    1ccc:	d90f      	bls.n	1cee <pwm_init_tc+0x2a>
    1cce:	4c29      	ldr	r4, [pc, #164]	; (1d74 <pwm_init_tc+0xb0>)
    1cd0:	42a0      	cmp	r0, r4
    1cd2:	d042      	beq.n	1d5a <pwm_init_tc+0x96>
    1cd4:	4c28      	ldr	r4, [pc, #160]	; (1d78 <pwm_init_tc+0xb4>)
    1cd6:	42a0      	cmp	r0, r4
    1cd8:	d11b      	bne.n	1d12 <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    1cda:	4a28      	ldr	r2, [pc, #160]	; (1d7c <pwm_init_tc+0xb8>)
    1cdc:	6a14      	ldr	r4, [r2, #32]
    1cde:	2380      	movs	r3, #128	; 0x80
    1ce0:	021b      	lsls	r3, r3, #8
    1ce2:	4323      	orrs	r3, r4
    1ce4:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1ce6:	4b26      	ldr	r3, [pc, #152]	; (1d80 <pwm_init_tc+0xbc>)
    1ce8:	4a26      	ldr	r2, [pc, #152]	; (1d84 <pwm_init_tc+0xc0>)
    1cea:	805a      	strh	r2, [r3, #2]
		break;
    1cec:	e01c      	b.n	1d28 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1cee:	4c26      	ldr	r4, [pc, #152]	; (1d88 <pwm_init_tc+0xc4>)
    1cf0:	42a0      	cmp	r0, r4
    1cf2:	d010      	beq.n	1d16 <pwm_init_tc+0x52>
    1cf4:	4c25      	ldr	r4, [pc, #148]	; (1d8c <pwm_init_tc+0xc8>)
    1cf6:	42a0      	cmp	r0, r4
    1cf8:	d109      	bne.n	1d0e <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    1cfa:	4a20      	ldr	r2, [pc, #128]	; (1d7c <pwm_init_tc+0xb8>)
    1cfc:	6a14      	ldr	r4, [r2, #32]
    1cfe:	2380      	movs	r3, #128	; 0x80
    1d00:	015b      	lsls	r3, r3, #5
    1d02:	4323      	orrs	r3, r4
    1d04:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1d06:	4b1e      	ldr	r3, [pc, #120]	; (1d80 <pwm_init_tc+0xbc>)
    1d08:	4a21      	ldr	r2, [pc, #132]	; (1d90 <pwm_init_tc+0xcc>)
    1d0a:	805a      	strh	r2, [r3, #2]
		break;
    1d0c:	e00c      	b.n	1d28 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1d0e:	2000      	movs	r0, #0
    1d10:	e018      	b.n	1d44 <pwm_init_tc+0x80>
    1d12:	2000      	movs	r0, #0
    1d14:	e016      	b.n	1d44 <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    1d16:	4a19      	ldr	r2, [pc, #100]	; (1d7c <pwm_init_tc+0xb8>)
    1d18:	6a14      	ldr	r4, [r2, #32]
    1d1a:	2380      	movs	r3, #128	; 0x80
    1d1c:	011b      	lsls	r3, r3, #4
    1d1e:	4323      	orrs	r3, r4
    1d20:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    1d22:	4b17      	ldr	r3, [pc, #92]	; (1d80 <pwm_init_tc+0xbc>)
    1d24:	4a1b      	ldr	r2, [pc, #108]	; (1d94 <pwm_init_tc+0xd0>)
    1d26:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1d28:	4b15      	ldr	r3, [pc, #84]	; (1d80 <pwm_init_tc+0xbc>)
    1d2a:	785b      	ldrb	r3, [r3, #1]
    1d2c:	b25b      	sxtb	r3, r3
    1d2e:	2b00      	cmp	r3, #0
    1d30:	dbfa      	blt.n	1d28 <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    1d32:	020b      	lsls	r3, r1, #8
    1d34:	22e0      	movs	r2, #224	; 0xe0
    1d36:	00d2      	lsls	r2, r2, #3
    1d38:	4013      	ands	r3, r2
    1d3a:	2244      	movs	r2, #68	; 0x44
    1d3c:	4313      	orrs	r3, r2
    1d3e:	b29b      	uxth	r3, r3
    1d40:	8003      	strh	r3, [r0, #0]
	
	return true;
    1d42:	2001      	movs	r0, #1
}
    1d44:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    1d46:	4a0d      	ldr	r2, [pc, #52]	; (1d7c <pwm_init_tc+0xb8>)
    1d48:	6a14      	ldr	r4, [r2, #32]
    1d4a:	2380      	movs	r3, #128	; 0x80
    1d4c:	019b      	lsls	r3, r3, #6
    1d4e:	4323      	orrs	r3, r4
    1d50:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1d52:	4b0b      	ldr	r3, [pc, #44]	; (1d80 <pwm_init_tc+0xbc>)
    1d54:	4a0e      	ldr	r2, [pc, #56]	; (1d90 <pwm_init_tc+0xcc>)
    1d56:	805a      	strh	r2, [r3, #2]
		break;
    1d58:	e7e6      	b.n	1d28 <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    1d5a:	4a08      	ldr	r2, [pc, #32]	; (1d7c <pwm_init_tc+0xb8>)
    1d5c:	6a14      	ldr	r4, [r2, #32]
    1d5e:	2380      	movs	r3, #128	; 0x80
    1d60:	01db      	lsls	r3, r3, #7
    1d62:	4323      	orrs	r3, r4
    1d64:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1d66:	4b06      	ldr	r3, [pc, #24]	; (1d80 <pwm_init_tc+0xbc>)
    1d68:	4a06      	ldr	r2, [pc, #24]	; (1d84 <pwm_init_tc+0xc0>)
    1d6a:	805a      	strh	r2, [r3, #2]
		break;
    1d6c:	e7dc      	b.n	1d28 <pwm_init_tc+0x64>
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	42003400 	.word	0x42003400
    1d74:	42003800 	.word	0x42003800
    1d78:	42003c00 	.word	0x42003c00
    1d7c:	40000400 	.word	0x40000400
    1d80:	40000c00 	.word	0x40000c00
    1d84:	0000401d 	.word	0x0000401d
    1d88:	42002c00 	.word	0x42002c00
    1d8c:	42003000 	.word	0x42003000
    1d90:	0000401c 	.word	0x0000401c
    1d94:	0000401b 	.word	0x0000401b

00001d98 <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    1d98:	4a0f      	ldr	r2, [pc, #60]	; (1dd8 <pwm_enable_tc+0x40>)
    1d9a:	4290      	cmp	r0, r2
    1d9c:	d010      	beq.n	1dc0 <pwm_enable_tc+0x28>
    1d9e:	d807      	bhi.n	1db0 <pwm_enable_tc+0x18>
    1da0:	4a0e      	ldr	r2, [pc, #56]	; (1ddc <pwm_enable_tc+0x44>)
    1da2:	4290      	cmp	r0, r2
    1da4:	d00c      	beq.n	1dc0 <pwm_enable_tc+0x28>
    1da6:	4a0e      	ldr	r2, [pc, #56]	; (1de0 <pwm_enable_tc+0x48>)
    1da8:	4290      	cmp	r0, r2
    1daa:	d009      	beq.n	1dc0 <pwm_enable_tc+0x28>
    1dac:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    1dae:	4770      	bx	lr
	switch ((uint32_t)tc) {
    1db0:	4a0c      	ldr	r2, [pc, #48]	; (1de4 <pwm_enable_tc+0x4c>)
    1db2:	4290      	cmp	r0, r2
    1db4:	d004      	beq.n	1dc0 <pwm_enable_tc+0x28>
    1db6:	4a0c      	ldr	r2, [pc, #48]	; (1de8 <pwm_enable_tc+0x50>)
    1db8:	4290      	cmp	r0, r2
    1dba:	d001      	beq.n	1dc0 <pwm_enable_tc+0x28>
    1dbc:	2000      	movs	r0, #0
    1dbe:	e7f6      	b.n	1dae <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    1dc0:	8803      	ldrh	r3, [r0, #0]
    1dc2:	2202      	movs	r2, #2
    1dc4:	4313      	orrs	r3, r2
    1dc6:	b29b      	uxth	r3, r3
    1dc8:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1dca:	7bc3      	ldrb	r3, [r0, #15]
    1dcc:	b25b      	sxtb	r3, r3
    1dce:	2b00      	cmp	r3, #0
    1dd0:	dbfb      	blt.n	1dca <pwm_enable_tc+0x32>
	return true;
    1dd2:	2001      	movs	r0, #1
    1dd4:	e7eb      	b.n	1dae <pwm_enable_tc+0x16>
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	42003400 	.word	0x42003400
    1ddc:	42002c00 	.word	0x42002c00
    1de0:	42003000 	.word	0x42003000
    1de4:	42003800 	.word	0x42003800
    1de8:	42003c00 	.word	0x42003c00

00001dec <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    1dec:	2307      	movs	r3, #7
    1dee:	4018      	ands	r0, r3
	switch (prescaler) {
    1df0:	2807      	cmp	r0, #7
    1df2:	d813      	bhi.n	1e1c <pwm_get_div_val+0x30>
    1df4:	0080      	lsls	r0, r0, #2
    1df6:	4b0b      	ldr	r3, [pc, #44]	; (1e24 <pwm_get_div_val+0x38>)
    1df8:	581b      	ldr	r3, [r3, r0]
    1dfa:	469f      	mov	pc, r3
    1dfc:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    1dfe:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    1e00:	2004      	movs	r0, #4
    1e02:	e7fc      	b.n	1dfe <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    1e04:	2008      	movs	r0, #8
    1e06:	e7fa      	b.n	1dfe <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    1e08:	2010      	movs	r0, #16
    1e0a:	e7f8      	b.n	1dfe <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    1e0c:	2040      	movs	r0, #64	; 0x40
    1e0e:	e7f6      	b.n	1dfe <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    1e10:	2080      	movs	r0, #128	; 0x80
    1e12:	0040      	lsls	r0, r0, #1
    1e14:	e7f3      	b.n	1dfe <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    1e16:	2080      	movs	r0, #128	; 0x80
    1e18:	00c0      	lsls	r0, r0, #3
    1e1a:	e7f0      	b.n	1dfe <pwm_get_div_val+0x12>
	return 0;
    1e1c:	2000      	movs	r0, #0
    1e1e:	e7ee      	b.n	1dfe <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    1e20:	2002      	movs	r0, #2
    1e22:	e7ec      	b.n	1dfe <pwm_get_div_val+0x12>
    1e24:	000057e4 	.word	0x000057e4

00001e28 <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    1e28:	b570      	push	{r4, r5, r6, lr}
    1e2a:	0004      	movs	r4, r0
    1e2c:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    1e2e:	4a16      	ldr	r2, [pc, #88]	; (1e88 <pwm_set_frequency_tc+0x60>)
    1e30:	4290      	cmp	r0, r2
    1e32:	d010      	beq.n	1e56 <pwm_set_frequency_tc+0x2e>
    1e34:	d807      	bhi.n	1e46 <pwm_set_frequency_tc+0x1e>
    1e36:	4a15      	ldr	r2, [pc, #84]	; (1e8c <pwm_set_frequency_tc+0x64>)
    1e38:	4290      	cmp	r0, r2
    1e3a:	d00c      	beq.n	1e56 <pwm_set_frequency_tc+0x2e>
    1e3c:	4a14      	ldr	r2, [pc, #80]	; (1e90 <pwm_set_frequency_tc+0x68>)
    1e3e:	4290      	cmp	r0, r2
    1e40:	d009      	beq.n	1e56 <pwm_set_frequency_tc+0x2e>
    1e42:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    1e44:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    1e46:	4a13      	ldr	r2, [pc, #76]	; (1e94 <pwm_set_frequency_tc+0x6c>)
    1e48:	4290      	cmp	r0, r2
    1e4a:	d004      	beq.n	1e56 <pwm_set_frequency_tc+0x2e>
    1e4c:	4a12      	ldr	r2, [pc, #72]	; (1e98 <pwm_set_frequency_tc+0x70>)
    1e4e:	4290      	cmp	r0, r2
    1e50:	d001      	beq.n	1e56 <pwm_set_frequency_tc+0x2e>
    1e52:	2000      	movs	r0, #0
    1e54:	e7f6      	b.n	1e44 <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    1e56:	8823      	ldrh	r3, [r4, #0]
    1e58:	0a1b      	lsrs	r3, r3, #8
    1e5a:	2007      	movs	r0, #7
    1e5c:	4018      	ands	r0, r3
    1e5e:	4b0f      	ldr	r3, [pc, #60]	; (1e9c <pwm_set_frequency_tc+0x74>)
    1e60:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    1e62:	4b0f      	ldr	r3, [pc, #60]	; (1ea0 <pwm_set_frequency_tc+0x78>)
    1e64:	4798      	blx	r3
    1e66:	4b0f      	ldr	r3, [pc, #60]	; (1ea4 <pwm_set_frequency_tc+0x7c>)
    1e68:	1c29      	adds	r1, r5, #0
    1e6a:	4798      	blx	r3
    1e6c:	1c01      	adds	r1, r0, #0
    1e6e:	4b0e      	ldr	r3, [pc, #56]	; (1ea8 <pwm_set_frequency_tc+0x80>)
    1e70:	480e      	ldr	r0, [pc, #56]	; (1eac <pwm_set_frequency_tc+0x84>)
    1e72:	4798      	blx	r3
    1e74:	4b0e      	ldr	r3, [pc, #56]	; (1eb0 <pwm_set_frequency_tc+0x88>)
    1e76:	4798      	blx	r3
	if (per > 0xFF) return false;
    1e78:	28ff      	cmp	r0, #255	; 0xff
    1e7a:	d803      	bhi.n	1e84 <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    1e7c:	b2c0      	uxtb	r0, r0
    1e7e:	7520      	strb	r0, [r4, #20]
	return true;
    1e80:	2001      	movs	r0, #1
    1e82:	e7df      	b.n	1e44 <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    1e84:	2000      	movs	r0, #0
    1e86:	e7dd      	b.n	1e44 <pwm_set_frequency_tc+0x1c>
    1e88:	42003400 	.word	0x42003400
    1e8c:	42002c00 	.word	0x42002c00
    1e90:	42003000 	.word	0x42003000
    1e94:	42003800 	.word	0x42003800
    1e98:	42003c00 	.word	0x42003c00
    1e9c:	00001ded 	.word	0x00001ded
    1ea0:	00005125 	.word	0x00005125
    1ea4:	00004b45 	.word	0x00004b45
    1ea8:	00004779 	.word	0x00004779
    1eac:	4c371b00 	.word	0x4c371b00
    1eb0:	00004445 	.word	0x00004445

00001eb4 <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    1eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eb6:	0004      	movs	r4, r0
    1eb8:	000e      	movs	r6, r1
    1eba:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    1ebc:	4a1b      	ldr	r2, [pc, #108]	; (1f2c <pwm_set_duty_tc+0x78>)
    1ebe:	4290      	cmp	r0, r2
    1ec0:	d010      	beq.n	1ee4 <pwm_set_duty_tc+0x30>
    1ec2:	d807      	bhi.n	1ed4 <pwm_set_duty_tc+0x20>
    1ec4:	4a1a      	ldr	r2, [pc, #104]	; (1f30 <pwm_set_duty_tc+0x7c>)
    1ec6:	4290      	cmp	r0, r2
    1ec8:	d00c      	beq.n	1ee4 <pwm_set_duty_tc+0x30>
    1eca:	4a1a      	ldr	r2, [pc, #104]	; (1f34 <pwm_set_duty_tc+0x80>)
    1ecc:	4290      	cmp	r0, r2
    1ece:	d009      	beq.n	1ee4 <pwm_set_duty_tc+0x30>
    1ed0:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    1ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    1ed4:	4a18      	ldr	r2, [pc, #96]	; (1f38 <pwm_set_duty_tc+0x84>)
    1ed6:	4290      	cmp	r0, r2
    1ed8:	d004      	beq.n	1ee4 <pwm_set_duty_tc+0x30>
    1eda:	4a18      	ldr	r2, [pc, #96]	; (1f3c <pwm_set_duty_tc+0x88>)
    1edc:	4290      	cmp	r0, r2
    1ede:	d001      	beq.n	1ee4 <pwm_set_duty_tc+0x30>
    1ee0:	2000      	movs	r0, #0
    1ee2:	e7f6      	b.n	1ed2 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1ee4:	4b16      	ldr	r3, [pc, #88]	; (1f40 <pwm_set_duty_tc+0x8c>)
    1ee6:	2100      	movs	r1, #0
    1ee8:	1c28      	adds	r0, r5, #0
    1eea:	4798      	blx	r3
    1eec:	2800      	cmp	r0, #0
    1eee:	d11b      	bne.n	1f28 <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    1ef0:	4b14      	ldr	r3, [pc, #80]	; (1f44 <pwm_set_duty_tc+0x90>)
    1ef2:	21fe      	movs	r1, #254	; 0xfe
    1ef4:	0589      	lsls	r1, r1, #22
    1ef6:	1c28      	adds	r0, r5, #0
    1ef8:	4798      	blx	r3
    1efa:	2800      	cmp	r0, #0
    1efc:	d001      	beq.n	1f02 <pwm_set_duty_tc+0x4e>
    1efe:	25fe      	movs	r5, #254	; 0xfe
    1f00:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    1f02:	7d27      	ldrb	r7, [r4, #20]
    1f04:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    1f06:	4b10      	ldr	r3, [pc, #64]	; (1f48 <pwm_set_duty_tc+0x94>)
    1f08:	0038      	movs	r0, r7
    1f0a:	4798      	blx	r3
    1f0c:	4b0f      	ldr	r3, [pc, #60]	; (1f4c <pwm_set_duty_tc+0x98>)
    1f0e:	1c29      	adds	r1, r5, #0
    1f10:	4798      	blx	r3
    1f12:	4b0f      	ldr	r3, [pc, #60]	; (1f50 <pwm_set_duty_tc+0x9c>)
    1f14:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    1f16:	003b      	movs	r3, r7
    1f18:	4287      	cmp	r7, r0
    1f1a:	d300      	bcc.n	1f1e <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    1f1c:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	19a4      	adds	r4, r4, r6
    1f22:	7623      	strb	r3, [r4, #24]
	return true;
    1f24:	2001      	movs	r0, #1
    1f26:	e7d4      	b.n	1ed2 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1f28:	2500      	movs	r5, #0
    1f2a:	e7e1      	b.n	1ef0 <pwm_set_duty_tc+0x3c>
    1f2c:	42003400 	.word	0x42003400
    1f30:	42002c00 	.word	0x42002c00
    1f34:	42003000 	.word	0x42003000
    1f38:	42003800 	.word	0x42003800
    1f3c:	42003c00 	.word	0x42003c00
    1f40:	00004399 	.word	0x00004399
    1f44:	000043c1 	.word	0x000043c1
    1f48:	00005125 	.word	0x00005125
    1f4c:	00004b45 	.word	0x00004b45
    1f50:	00004445 	.word	0x00004445

00001f54 <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    1f54:	4b11      	ldr	r3, [pc, #68]	; (1f9c <sercom_check+0x48>)
    1f56:	4298      	cmp	r0, r3
    1f58:	d017      	beq.n	1f8a <sercom_check+0x36>
    1f5a:	d80c      	bhi.n	1f76 <sercom_check+0x22>
    1f5c:	4b10      	ldr	r3, [pc, #64]	; (1fa0 <sercom_check+0x4c>)
    1f5e:	4298      	cmp	r0, r3
    1f60:	d015      	beq.n	1f8e <sercom_check+0x3a>
    1f62:	4b10      	ldr	r3, [pc, #64]	; (1fa4 <sercom_check+0x50>)
    1f64:	4298      	cmp	r0, r3
    1f66:	d014      	beq.n	1f92 <sercom_check+0x3e>
    1f68:	4b0f      	ldr	r3, [pc, #60]	; (1fa8 <sercom_check+0x54>)
    1f6a:	4298      	cmp	r0, r3
    1f6c:	d001      	beq.n	1f72 <sercom_check+0x1e>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    1f6e:	2000      	movs	r0, #0
		break;
	}
}
    1f70:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    1f72:	2001      	movs	r0, #1
    1f74:	e7fc      	b.n	1f70 <sercom_check+0x1c>
    1f76:	4b0d      	ldr	r3, [pc, #52]	; (1fac <sercom_check+0x58>)
    1f78:	4298      	cmp	r0, r3
    1f7a:	d00c      	beq.n	1f96 <sercom_check+0x42>
    1f7c:	4b0c      	ldr	r3, [pc, #48]	; (1fb0 <sercom_check+0x5c>)
    1f7e:	4298      	cmp	r0, r3
    1f80:	d001      	beq.n	1f86 <sercom_check+0x32>
		return false;
    1f82:	2000      	movs	r0, #0
    1f84:	e7f4      	b.n	1f70 <sercom_check+0x1c>
	switch ((uint32_t)sercom) {
    1f86:	2001      	movs	r0, #1
    1f88:	e7f2      	b.n	1f70 <sercom_check+0x1c>
    1f8a:	2001      	movs	r0, #1
    1f8c:	e7f0      	b.n	1f70 <sercom_check+0x1c>
    1f8e:	2001      	movs	r0, #1
    1f90:	e7ee      	b.n	1f70 <sercom_check+0x1c>
    1f92:	2001      	movs	r0, #1
    1f94:	e7ec      	b.n	1f70 <sercom_check+0x1c>
    1f96:	2001      	movs	r0, #1
    1f98:	e7ea      	b.n	1f70 <sercom_check+0x1c>
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	42001400 	.word	0x42001400
    1fa0:	42000c00 	.word	0x42000c00
    1fa4:	42001000 	.word	0x42001000
    1fa8:	42000800 	.word	0x42000800
    1fac:	42001800 	.word	0x42001800
    1fb0:	42001c00 	.word	0x42001c00

00001fb4 <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    1fb4:	4b29      	ldr	r3, [pc, #164]	; (205c <STACK_SIZE+0x5c>)
    1fb6:	4298      	cmp	r0, r3
    1fb8:	d03d      	beq.n	2036 <STACK_SIZE+0x36>
    1fba:	d822      	bhi.n	2002 <STACK_SIZE+0x2>
    1fbc:	4b28      	ldr	r3, [pc, #160]	; (2060 <STACK_SIZE+0x60>)
    1fbe:	4298      	cmp	r0, r3
    1fc0:	d030      	beq.n	2024 <STACK_SIZE+0x24>
    1fc2:	4b28      	ldr	r3, [pc, #160]	; (2064 <STACK_SIZE+0x64>)
    1fc4:	4298      	cmp	r0, r3
    1fc6:	d108      	bne.n	1fda <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    1fc8:	4a27      	ldr	r2, [pc, #156]	; (2068 <STACK_SIZE+0x68>)
    1fca:	6a13      	ldr	r3, [r2, #32]
    1fcc:	2110      	movs	r1, #16
    1fce:	430b      	orrs	r3, r1
    1fd0:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    1fd2:	4b26      	ldr	r3, [pc, #152]	; (206c <STACK_SIZE+0x6c>)
    1fd4:	4a26      	ldr	r2, [pc, #152]	; (2070 <STACK_SIZE+0x70>)
    1fd6:	805a      	strh	r2, [r3, #2]
		break;
    1fd8:	e00a      	b.n	1ff0 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    1fda:	4b26      	ldr	r3, [pc, #152]	; (2074 <STACK_SIZE+0x74>)
    1fdc:	4298      	cmp	r0, r3
    1fde:	d10e      	bne.n	1ffe <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    1fe0:	4a21      	ldr	r2, [pc, #132]	; (2068 <STACK_SIZE+0x68>)
    1fe2:	6a13      	ldr	r3, [r2, #32]
    1fe4:	2104      	movs	r1, #4
    1fe6:	430b      	orrs	r3, r1
    1fe8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    1fea:	4b20      	ldr	r3, [pc, #128]	; (206c <STACK_SIZE+0x6c>)
    1fec:	4a22      	ldr	r2, [pc, #136]	; (2078 <STACK_SIZE+0x78>)
    1fee:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1ff0:	4b1e      	ldr	r3, [pc, #120]	; (206c <STACK_SIZE+0x6c>)
    1ff2:	785b      	ldrb	r3, [r3, #1]
    1ff4:	b25b      	sxtb	r3, r3
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	dbfa      	blt.n	1ff0 <sercom_init+0x3c>
	
	return true;
    1ffa:	2001      	movs	r0, #1
    1ffc:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    1ffe:	2000      	movs	r0, #0
    2000:	e7fc      	b.n	1ffc <sercom_init+0x48>
    2002:	4b1e      	ldr	r3, [pc, #120]	; (207c <STACK_SIZE+0x7c>)
    2004:	4298      	cmp	r0, r3
    2006:	d01f      	beq.n	2048 <STACK_SIZE+0x48>
    2008:	4b1d      	ldr	r3, [pc, #116]	; (2080 <STACK_SIZE+0x80>)
    200a:	4298      	cmp	r0, r3
    200c:	d108      	bne.n	2020 <STACK_SIZE+0x20>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    200e:	4a16      	ldr	r2, [pc, #88]	; (2068 <STACK_SIZE+0x68>)
    2010:	6a13      	ldr	r3, [r2, #32]
    2012:	2180      	movs	r1, #128	; 0x80
    2014:	430b      	orrs	r3, r1
    2016:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    2018:	4b14      	ldr	r3, [pc, #80]	; (206c <STACK_SIZE+0x6c>)
    201a:	4a1a      	ldr	r2, [pc, #104]	; (2084 <STACK_SIZE+0x84>)
    201c:	805a      	strh	r2, [r3, #2]
		break;
    201e:	e7e7      	b.n	1ff0 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    2020:	2000      	movs	r0, #0
    2022:	e7eb      	b.n	1ffc <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    2024:	4a10      	ldr	r2, [pc, #64]	; (2068 <STACK_SIZE+0x68>)
    2026:	6a13      	ldr	r3, [r2, #32]
    2028:	2108      	movs	r1, #8
    202a:	430b      	orrs	r3, r1
    202c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    202e:	4b0f      	ldr	r3, [pc, #60]	; (206c <STACK_SIZE+0x6c>)
    2030:	4a15      	ldr	r2, [pc, #84]	; (2088 <STACK_SIZE+0x88>)
    2032:	805a      	strh	r2, [r3, #2]
		break;
    2034:	e7dc      	b.n	1ff0 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    2036:	4a0c      	ldr	r2, [pc, #48]	; (2068 <STACK_SIZE+0x68>)
    2038:	6a13      	ldr	r3, [r2, #32]
    203a:	2120      	movs	r1, #32
    203c:	430b      	orrs	r3, r1
    203e:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    2040:	4b0a      	ldr	r3, [pc, #40]	; (206c <STACK_SIZE+0x6c>)
    2042:	4a12      	ldr	r2, [pc, #72]	; (208c <STACK_SIZE+0x8c>)
    2044:	805a      	strh	r2, [r3, #2]
		break;
    2046:	e7d3      	b.n	1ff0 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    2048:	4a07      	ldr	r2, [pc, #28]	; (2068 <STACK_SIZE+0x68>)
    204a:	6a13      	ldr	r3, [r2, #32]
    204c:	2140      	movs	r1, #64	; 0x40
    204e:	430b      	orrs	r3, r1
    2050:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    2052:	4b06      	ldr	r3, [pc, #24]	; (206c <STACK_SIZE+0x6c>)
    2054:	4a0e      	ldr	r2, [pc, #56]	; (2090 <STACK_SIZE+0x90>)
    2056:	805a      	strh	r2, [r3, #2]
		break;
    2058:	e7ca      	b.n	1ff0 <sercom_init+0x3c>
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	42001400 	.word	0x42001400
    2060:	42000c00 	.word	0x42000c00
    2064:	42001000 	.word	0x42001000
    2068:	40000400 	.word	0x40000400
    206c:	40000c00 	.word	0x40000c00
    2070:	00004016 	.word	0x00004016
    2074:	42000800 	.word	0x42000800
    2078:	00004014 	.word	0x00004014
    207c:	42001800 	.word	0x42001800
    2080:	42001c00 	.word	0x42001c00
    2084:	00004019 	.word	0x00004019
    2088:	00004015 	.word	0x00004015
    208c:	00004017 	.word	0x00004017
    2090:	00004018 	.word	0x00004018

00002094 <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2094:	b570      	push	{r4, r5, r6, lr}
    2096:	0006      	movs	r6, r0
    2098:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    209a:	4b0a      	ldr	r3, [pc, #40]	; (20c4 <spi_set_baud+0x30>)
    209c:	4798      	blx	r3
    209e:	1e04      	subs	r4, r0, #0
    20a0:	d00e      	beq.n	20c0 <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    20a2:	0068      	lsls	r0, r5, #1
    20a4:	4b08      	ldr	r3, [pc, #32]	; (20c8 <spi_set_baud+0x34>)
    20a6:	4798      	blx	r3
    20a8:	1c01      	adds	r1, r0, #0
    20aa:	4b08      	ldr	r3, [pc, #32]	; (20cc <spi_set_baud+0x38>)
    20ac:	4808      	ldr	r0, [pc, #32]	; (20d0 <spi_set_baud+0x3c>)
    20ae:	4798      	blx	r3
    20b0:	4b08      	ldr	r3, [pc, #32]	; (20d4 <spi_set_baud+0x40>)
    20b2:	21fe      	movs	r1, #254	; 0xfe
    20b4:	0589      	lsls	r1, r1, #22
    20b6:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    20b8:	4b07      	ldr	r3, [pc, #28]	; (20d8 <spi_set_baud+0x44>)
    20ba:	4798      	blx	r3
    20bc:	b2c0      	uxtb	r0, r0
    20be:	7330      	strb	r0, [r6, #12]
	return true;
}
    20c0:	0020      	movs	r0, r4
    20c2:	bd70      	pop	{r4, r5, r6, pc}
    20c4:	00001f55 	.word	0x00001f55
    20c8:	000051bd 	.word	0x000051bd
    20cc:	00004779 	.word	0x00004779
    20d0:	4c371b00 	.word	0x4c371b00
    20d4:	00004dc1 	.word	0x00004dc1
    20d8:	00004445 	.word	0x00004445

000020dc <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    20dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20de:	46ce      	mov	lr, r9
    20e0:	4647      	mov	r7, r8
    20e2:	b580      	push	{r7, lr}
    20e4:	0004      	movs	r4, r0
    20e6:	000d      	movs	r5, r1
    20e8:	0017      	movs	r7, r2
    20ea:	001e      	movs	r6, r3
    20ec:	ab08      	add	r3, sp, #32
    20ee:	781b      	ldrb	r3, [r3, #0]
    20f0:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    20f2:	4b12      	ldr	r3, [pc, #72]	; (213c <spi_init+0x60>)
    20f4:	4798      	blx	r3
    20f6:	4680      	mov	r8, r0
    20f8:	2800      	cmp	r0, #0
    20fa:	d104      	bne.n	2106 <spi_init+0x2a>
}
    20fc:	4640      	mov	r0, r8
    20fe:	bcc0      	pop	{r6, r7}
    2100:	46b9      	mov	r9, r7
    2102:	46b0      	mov	r8, r6
    2104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    2106:	076d      	lsls	r5, r5, #29
    2108:	073f      	lsls	r7, r7, #28
    210a:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    210c:	0536      	lsls	r6, r6, #20
    210e:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    2110:	464b      	mov	r3, r9
    2112:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2114:	431d      	orrs	r5, r3
    2116:	230c      	movs	r3, #12
    2118:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    211a:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    211c:	2380      	movs	r3, #128	; 0x80
    211e:	029b      	lsls	r3, r3, #10
    2120:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    2122:	9909      	ldr	r1, [sp, #36]	; 0x24
    2124:	0020      	movs	r0, r4
    2126:	4b06      	ldr	r3, [pc, #24]	; (2140 <spi_init+0x64>)
    2128:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    212a:	6823      	ldr	r3, [r4, #0]
    212c:	2202      	movs	r2, #2
    212e:	4313      	orrs	r3, r2
    2130:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    2132:	69e3      	ldr	r3, [r4, #28]
    2134:	079b      	lsls	r3, r3, #30
    2136:	d4fc      	bmi.n	2132 <spi_init+0x56>
    2138:	e7e0      	b.n	20fc <spi_init+0x20>
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	00001fb5 	.word	0x00001fb5
    2140:	00002095 	.word	0x00002095

00002144 <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    2144:	7e03      	ldrb	r3, [r0, #24]
    2146:	07db      	lsls	r3, r3, #31
    2148:	d5fc      	bpl.n	2144 <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    214a:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    214c:	7e03      	ldrb	r3, [r0, #24]
    214e:	079b      	lsls	r3, r3, #30
    2150:	d5fc      	bpl.n	214c <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    2152:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2154:	b2c0      	uxtb	r0, r0
}
    2156:	4770      	bx	lr

00002158 <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    2158:	e000      	b.n	215c <spi_flush+0x4>
    215a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    215c:	7e03      	ldrb	r3, [r0, #24]
    215e:	075b      	lsls	r3, r3, #29
    2160:	d4fb      	bmi.n	215a <spi_flush+0x2>
    2162:	4770      	bx	lr

00002164 <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    2164:	4a27      	ldr	r2, [pc, #156]	; (2204 <set_clock_48m+0xa0>)
    2166:	6853      	ldr	r3, [r2, #4]
    2168:	2102      	movs	r1, #2
    216a:	430b      	orrs	r3, r1
    216c:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    216e:	4a26      	ldr	r2, [pc, #152]	; (2208 <set_clock_48m+0xa4>)
    2170:	4b26      	ldr	r3, [pc, #152]	; (220c <set_clock_48m+0xa8>)
    2172:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    2174:	8a93      	ldrh	r3, [r2, #20]
    2176:	430b      	orrs	r3, r1
    2178:	b29b      	uxth	r3, r3
    217a:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    217c:	4b22      	ldr	r3, [pc, #136]	; (2208 <set_clock_48m+0xa4>)
    217e:	68db      	ldr	r3, [r3, #12]
    2180:	079b      	lsls	r3, r3, #30
    2182:	d5fb      	bpl.n	217c <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    2184:	4b22      	ldr	r3, [pc, #136]	; (2210 <set_clock_48m+0xac>)
    2186:	2202      	movs	r2, #2
    2188:	32ff      	adds	r2, #255	; 0xff
    218a:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    218c:	4a21      	ldr	r2, [pc, #132]	; (2214 <set_clock_48m+0xb0>)
    218e:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2190:	4b1f      	ldr	r3, [pc, #124]	; (2210 <set_clock_48m+0xac>)
    2192:	785b      	ldrb	r3, [r3, #1]
    2194:	b25b      	sxtb	r3, r3
    2196:	2b00      	cmp	r3, #0
    2198:	dbfa      	blt.n	2190 <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    219a:	4b1d      	ldr	r3, [pc, #116]	; (2210 <set_clock_48m+0xac>)
    219c:	2282      	movs	r2, #130	; 0x82
    219e:	01d2      	lsls	r2, r2, #7
    21a0:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    21a2:	4b19      	ldr	r3, [pc, #100]	; (2208 <set_clock_48m+0xa4>)
    21a4:	68db      	ldr	r3, [r3, #12]
    21a6:	06db      	lsls	r3, r3, #27
    21a8:	d5fb      	bpl.n	21a2 <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    21aa:	4b17      	ldr	r3, [pc, #92]	; (2208 <set_clock_48m+0xa4>)
    21ac:	2202      	movs	r2, #2
    21ae:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    21b0:	4b15      	ldr	r3, [pc, #84]	; (2208 <set_clock_48m+0xa4>)
    21b2:	68db      	ldr	r3, [r3, #12]
    21b4:	06db      	lsls	r3, r3, #27
    21b6:	d5fb      	bpl.n	21b0 <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    21b8:	4b13      	ldr	r3, [pc, #76]	; (2208 <set_clock_48m+0xa4>)
    21ba:	4a17      	ldr	r2, [pc, #92]	; (2218 <set_clock_48m+0xb4>)
    21bc:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    21be:	4b12      	ldr	r3, [pc, #72]	; (2208 <set_clock_48m+0xa4>)
    21c0:	68db      	ldr	r3, [r3, #12]
    21c2:	06db      	lsls	r3, r3, #27
    21c4:	d5fb      	bpl.n	21be <set_clock_48m+0x5a>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    21c6:	4b15      	ldr	r3, [pc, #84]	; (221c <set_clock_48m+0xb8>)
    21c8:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    21ca:	4b0f      	ldr	r3, [pc, #60]	; (2208 <set_clock_48m+0xa4>)
    21cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    21ce:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    21d0:	4b0d      	ldr	r3, [pc, #52]	; (2208 <set_clock_48m+0xa4>)
    21d2:	68db      	ldr	r3, [r3, #12]
    21d4:	06db      	lsls	r3, r3, #27
    21d6:	d5fb      	bpl.n	21d0 <set_clock_48m+0x6c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    21d8:	4a0b      	ldr	r2, [pc, #44]	; (2208 <set_clock_48m+0xa4>)
    21da:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    21dc:	4910      	ldr	r1, [pc, #64]	; (2220 <set_clock_48m+0xbc>)
    21de:	430b      	orrs	r3, r1
    21e0:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    21e2:	4b09      	ldr	r3, [pc, #36]	; (2208 <set_clock_48m+0xa4>)
    21e4:	68db      	ldr	r3, [r3, #12]
    21e6:	061b      	lsls	r3, r3, #24
    21e8:	d5fb      	bpl.n	21e2 <set_clock_48m+0x7e>
    21ea:	4b07      	ldr	r3, [pc, #28]	; (2208 <set_clock_48m+0xa4>)
    21ec:	68db      	ldr	r3, [r3, #12]
    21ee:	065b      	lsls	r3, r3, #25
    21f0:	d5f7      	bpl.n	21e2 <set_clock_48m+0x7e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    21f2:	4b07      	ldr	r3, [pc, #28]	; (2210 <set_clock_48m+0xac>)
    21f4:	4a0b      	ldr	r2, [pc, #44]	; (2224 <set_clock_48m+0xc0>)
    21f6:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    21f8:	4b05      	ldr	r3, [pc, #20]	; (2210 <set_clock_48m+0xac>)
    21fa:	785b      	ldrb	r3, [r3, #1]
    21fc:	b25b      	sxtb	r3, r3
    21fe:	2b00      	cmp	r3, #0
    2200:	dbfa      	blt.n	21f8 <set_clock_48m+0x94>
}
    2202:	4770      	bx	lr
    2204:	41004000 	.word	0x41004000
    2208:	40000800 	.word	0x40000800
    220c:	0000040c 	.word	0x0000040c
    2210:	40000c00 	.word	0x40000c00
    2214:	00030501 	.word	0x00030501
    2218:	7dff05b9 	.word	0x7dff05b9
    221c:	00806020 	.word	0x00806020
    2220:	00000806 	.word	0x00000806
    2224:	00030700 	.word	0x00030700

00002228 <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    2228:	3801      	subs	r0, #1
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	46c0      	nop			; (mov r8, r8)
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	46c0      	nop			; (mov r8, r8)
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	d1f8      	bne.n	2228 <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    2236:	4770      	bx	lr

00002238 <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    2238:	4a14      	ldr	r2, [pc, #80]	; (228c <init_timer+0x54>)
    223a:	6a11      	ldr	r1, [r2, #32]
    223c:	2380      	movs	r3, #128	; 0x80
    223e:	015b      	lsls	r3, r3, #5
    2240:	430b      	orrs	r3, r1
    2242:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    2244:	4b12      	ldr	r3, [pc, #72]	; (2290 <init_timer+0x58>)
    2246:	4a13      	ldr	r2, [pc, #76]	; (2294 <init_timer+0x5c>)
    2248:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    224a:	4b11      	ldr	r3, [pc, #68]	; (2290 <init_timer+0x58>)
    224c:	785b      	ldrb	r3, [r3, #1]
    224e:	b25b      	sxtb	r3, r3
    2250:	2b00      	cmp	r3, #0
    2252:	dbfa      	blt.n	224a <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    2254:	4b10      	ldr	r3, [pc, #64]	; (2298 <init_timer+0x60>)
    2256:	2208      	movs	r2, #8
    2258:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    225a:	4b0f      	ldr	r3, [pc, #60]	; (2298 <init_timer+0x60>)
    225c:	7bdb      	ldrb	r3, [r3, #15]
    225e:	b25b      	sxtb	r3, r3
    2260:	2b00      	cmp	r3, #0
    2262:	dbfa      	blt.n	225a <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    2264:	4a0c      	ldr	r2, [pc, #48]	; (2298 <init_timer+0x60>)
    2266:	8813      	ldrh	r3, [r2, #0]
    2268:	2102      	movs	r1, #2
    226a:	430b      	orrs	r3, r1
    226c:	b29b      	uxth	r3, r3
    226e:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2270:	4b09      	ldr	r3, [pc, #36]	; (2298 <init_timer+0x60>)
    2272:	7bdb      	ldrb	r3, [r3, #15]
    2274:	b25b      	sxtb	r3, r3
    2276:	2b00      	cmp	r3, #0
    2278:	dbfa      	blt.n	2270 <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    227a:	4b07      	ldr	r3, [pc, #28]	; (2298 <init_timer+0x60>)
    227c:	4a07      	ldr	r2, [pc, #28]	; (229c <init_timer+0x64>)
    227e:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2280:	4b05      	ldr	r3, [pc, #20]	; (2298 <init_timer+0x60>)
    2282:	7bdb      	ldrb	r3, [r3, #15]
    2284:	b25b      	sxtb	r3, r3
    2286:	2b00      	cmp	r3, #0
    2288:	dbfa      	blt.n	2280 <init_timer+0x48>
}
    228a:	4770      	bx	lr
    228c:	40000400 	.word	0x40000400
    2290:	40000c00 	.word	0x40000c00
    2294:	0000401c 	.word	0x0000401c
    2298:	42003000 	.word	0x42003000
    229c:	00004010 	.word	0x00004010

000022a0 <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    22a0:	4b01      	ldr	r3, [pc, #4]	; (22a8 <read_timer_20ns+0x8>)
    22a2:	6918      	ldr	r0, [r3, #16]
}
    22a4:	4770      	bx	lr
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	42003000 	.word	0x42003000

000022ac <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    22ac:	4b04      	ldr	r3, [pc, #16]	; (22c0 <init_timer_interrupt+0x14>)
    22ae:	2210      	movs	r2, #16
    22b0:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    22b2:	4b03      	ldr	r3, [pc, #12]	; (22c0 <init_timer_interrupt+0x14>)
    22b4:	7bdb      	ldrb	r3, [r3, #15]
    22b6:	b25b      	sxtb	r3, r3
    22b8:	2b00      	cmp	r3, #0
    22ba:	dbfa      	blt.n	22b2 <init_timer_interrupt+0x6>
}
    22bc:	4770      	bx	lr
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	42003000 	.word	0x42003000

000022c4 <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22c4:	4b02      	ldr	r3, [pc, #8]	; (22d0 <timer_enable_interrupt+0xc>)
    22c6:	2280      	movs	r2, #128	; 0x80
    22c8:	0312      	lsls	r2, r2, #12
    22ca:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    22cc:	4770      	bx	lr
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	e000e100 	.word	0xe000e100

000022d4 <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22d4:	4a04      	ldr	r2, [pc, #16]	; (22e8 <timer_disable_interrupt+0x14>)
    22d6:	2380      	movs	r3, #128	; 0x80
    22d8:	2180      	movs	r1, #128	; 0x80
    22da:	0309      	lsls	r1, r1, #12
    22dc:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    22de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22e2:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    22e6:	4770      	bx	lr
    22e8:	e000e100 	.word	0xe000e100

000022ec <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    22ec:	4b04      	ldr	r3, [pc, #16]	; (2300 <timer_clear_interrupt+0x14>)
    22ee:	2210      	movs	r2, #16
    22f0:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22f2:	4a04      	ldr	r2, [pc, #16]	; (2304 <timer_clear_interrupt+0x18>)
    22f4:	23c0      	movs	r3, #192	; 0xc0
    22f6:	005b      	lsls	r3, r3, #1
    22f8:	2180      	movs	r1, #128	; 0x80
    22fa:	0309      	lsls	r1, r1, #12
    22fc:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    22fe:	4770      	bx	lr
    2300:	42003000 	.word	0x42003000
    2304:	e000e100 	.word	0xe000e100

00002308 <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    2308:	4a02      	ldr	r2, [pc, #8]	; (2314 <timer_set_interrupt_time+0xc>)
    230a:	6993      	ldr	r3, [r2, #24]
    230c:	4303      	orrs	r3, r0
    230e:	6193      	str	r3, [r2, #24]
    2310:	4770      	bx	lr
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	42003000 	.word	0x42003000

00002318 <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2318:	b570      	push	{r4, r5, r6, lr}
    231a:	0006      	movs	r6, r0
    231c:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    231e:	4b10      	ldr	r3, [pc, #64]	; (2360 <uart_set_baud+0x48>)
    2320:	4798      	blx	r3
    2322:	1e04      	subs	r4, r0, #0
    2324:	d018      	beq.n	2358 <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    2326:	4b0f      	ldr	r3, [pc, #60]	; (2364 <uart_set_baud+0x4c>)
    2328:	429d      	cmp	r5, r3
    232a:	d817      	bhi.n	235c <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    232c:	4b0e      	ldr	r3, [pc, #56]	; (2368 <uart_set_baud+0x50>)
    232e:	0028      	movs	r0, r5
    2330:	4798      	blx	r3
    2332:	4b0e      	ldr	r3, [pc, #56]	; (236c <uart_set_baud+0x54>)
    2334:	490e      	ldr	r1, [pc, #56]	; (2370 <uart_set_baud+0x58>)
    2336:	4798      	blx	r3
    2338:	4d0e      	ldr	r5, [pc, #56]	; (2374 <uart_set_baud+0x5c>)
    233a:	2183      	movs	r1, #131	; 0x83
    233c:	05c9      	lsls	r1, r1, #23
    233e:	47a8      	blx	r5
    2340:	1c01      	adds	r1, r0, #0
    2342:	4b0d      	ldr	r3, [pc, #52]	; (2378 <uart_set_baud+0x60>)
    2344:	20fe      	movs	r0, #254	; 0xfe
    2346:	0580      	lsls	r0, r0, #22
    2348:	4798      	blx	r3
    234a:	218f      	movs	r1, #143	; 0x8f
    234c:	05c9      	lsls	r1, r1, #23
    234e:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    2350:	4b0a      	ldr	r3, [pc, #40]	; (237c <uart_set_baud+0x64>)
    2352:	4798      	blx	r3
    2354:	b280      	uxth	r0, r0
    2356:	81b0      	strh	r0, [r6, #12]
    return true;
}
    2358:	0020      	movs	r0, r4
    235a:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    235c:	2400      	movs	r4, #0
    235e:	e7fb      	b.n	2358 <uart_set_baud+0x40>
    2360:	00001f55 	.word	0x00001f55
    2364:	002dc6c0 	.word	0x002dc6c0
    2368:	000051bd 	.word	0x000051bd
    236c:	00004779 	.word	0x00004779
    2370:	4c371b00 	.word	0x4c371b00
    2374:	00004b45 	.word	0x00004b45
    2378:	00004dc1 	.word	0x00004dc1
    237c:	00004445 	.word	0x00004445

00002380 <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    2380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2382:	0004      	movs	r4, r0
    2384:	000e      	movs	r6, r1
    2386:	0017      	movs	r7, r2
    2388:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    238a:	4b11      	ldr	r3, [pc, #68]	; (23d0 <uart_init+0x50>)
    238c:	4798      	blx	r3
    238e:	2800      	cmp	r0, #0
    2390:	d01c      	beq.n	23cc <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2392:	0536      	lsls	r6, r6, #20
    2394:	23c0      	movs	r3, #192	; 0xc0
    2396:	039b      	lsls	r3, r3, #14
    2398:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    239a:	043f      	lsls	r7, r7, #16
    239c:	22c0      	movs	r2, #192	; 0xc0
    239e:	0292      	lsls	r2, r2, #10
    23a0:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    23a2:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    23a4:	4b0b      	ldr	r3, [pc, #44]	; (23d4 <uart_init+0x54>)
    23a6:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    23a8:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    23aa:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    23ac:	69e2      	ldr	r2, [r4, #28]
    23ae:	0752      	lsls	r2, r2, #29
    23b0:	d4fc      	bmi.n	23ac <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    23b2:	0029      	movs	r1, r5
    23b4:	0020      	movs	r0, r4
    23b6:	4b08      	ldr	r3, [pc, #32]	; (23d8 <uart_init+0x58>)
    23b8:	4798      	blx	r3
    23ba:	2800      	cmp	r0, #0
    23bc:	d006      	beq.n	23cc <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    23be:	6823      	ldr	r3, [r4, #0]
    23c0:	2202      	movs	r2, #2
    23c2:	4313      	orrs	r3, r2
    23c4:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    23c6:	69e3      	ldr	r3, [r4, #28]
    23c8:	079b      	lsls	r3, r3, #30
    23ca:	d4fc      	bmi.n	23c6 <uart_init+0x46>
}
    23cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	00001fb5 	.word	0x00001fb5
    23d4:	40000004 	.word	0x40000004
    23d8:	00002319 	.word	0x00002319

000023dc <uart_flush>:

void uart_flush(sercom_registers_t* sercom) {
    while (sercom->USART_INT.SERCOM_INTFLAG & SERCOM_USART_INT_INTFLAG_RXC_Msk) sercom->USART_INT.SERCOM_DATA;
    23dc:	e000      	b.n	23e0 <uart_flush+0x4>
    23de:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    23e0:	7e03      	ldrb	r3, [r0, #24]
    23e2:	075b      	lsls	r3, r3, #29
    23e4:	d4fb      	bmi.n	23de <uart_flush+0x2>
}
    23e6:	4770      	bx	lr

000023e8 <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    23e8:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    23ea:	4b10      	ldr	r3, [pc, #64]	; (242c <usb_ep0_in_multi+0x44>)
    23ec:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    23ee:	2c40      	cmp	r4, #64	; 0x40
    23f0:	d900      	bls.n	23f4 <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    23f2:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    23f4:	0026      	movs	r6, r4
    23f6:	4b0d      	ldr	r3, [pc, #52]	; (242c <usb_ep0_in_multi+0x44>)
    23f8:	1d1d      	adds	r5, r3, #4
    23fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
    23fc:	0022      	movs	r2, r4
    23fe:	0028      	movs	r0, r5
    2400:	4b0b      	ldr	r3, [pc, #44]	; (2430 <usb_ep0_in_multi+0x48>)
    2402:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    2404:	2300      	movs	r3, #0
    2406:	0022      	movs	r2, r4
    2408:	0029      	movs	r1, r5
    240a:	2080      	movs	r0, #128	; 0x80
    240c:	4d09      	ldr	r5, [pc, #36]	; (2434 <usb_ep0_in_multi+0x4c>)
    240e:	47a8      	blx	r5

	if (tsize == 0) {
    2410:	2c00      	cmp	r4, #0
    2412:	d007      	beq.n	2424 <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    2414:	4b05      	ldr	r3, [pc, #20]	; (242c <usb_ep0_in_multi+0x44>)
    2416:	881a      	ldrh	r2, [r3, #0]
    2418:	1b12      	subs	r2, r2, r4
    241a:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    241c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    241e:	1992      	adds	r2, r2, r6
    2420:	645a      	str	r2, [r3, #68]	; 0x44
}
    2422:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    2424:	4b04      	ldr	r3, [pc, #16]	; (2438 <usb_ep0_in_multi+0x50>)
    2426:	4798      	blx	r3
    2428:	e7f4      	b.n	2414 <usb_ep0_in_multi+0x2c>
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	20000490 	.word	0x20000490
    2430:	00005375 	.word	0x00005375
    2434:	000028f9 	.word	0x000028f9
    2438:	00002a01 	.word	0x00002a01

0000243c <usb_handle_setup>:

void usb_handle_setup(void){
    243c:	b510      	push	{r4, lr}
    243e:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    2440:	4b40      	ldr	r3, [pc, #256]	; (2544 <usb_handle_setup+0x108>)
    2442:	2248      	movs	r2, #72	; 0x48
    2444:	5c9b      	ldrb	r3, [r3, r2]
    2446:	3218      	adds	r2, #24
    2448:	421a      	tst	r2, r3
    244a:	d177      	bne.n	253c <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    244c:	4b3e      	ldr	r3, [pc, #248]	; (2548 <usb_handle_setup+0x10c>)
    244e:	785b      	ldrb	r3, [r3, #1]
    2450:	2b0b      	cmp	r3, #11
    2452:	d870      	bhi.n	2536 <usb_handle_setup+0xfa>
    2454:	009b      	lsls	r3, r3, #2
    2456:	4a3d      	ldr	r2, [pc, #244]	; (254c <usb_handle_setup+0x110>)
    2458:	58d3      	ldr	r3, [r2, r3]
    245a:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    245c:	4b39      	ldr	r3, [pc, #228]	; (2544 <usb_handle_setup+0x108>)
    245e:	2200      	movs	r2, #0
    2460:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    2462:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    2464:	2002      	movs	r0, #2
    2466:	4b3a      	ldr	r3, [pc, #232]	; (2550 <usb_handle_setup+0x114>)
    2468:	4798      	blx	r3
				return usb_ep0_out();
    246a:	4b3a      	ldr	r3, [pc, #232]	; (2554 <usb_handle_setup+0x118>)
    246c:	4798      	blx	r3
    246e:	e067      	b.n	2540 <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    2470:	2000      	movs	r0, #0
    2472:	4b37      	ldr	r3, [pc, #220]	; (2550 <usb_handle_setup+0x114>)
    2474:	4798      	blx	r3
				return usb_ep0_out();
    2476:	4b37      	ldr	r3, [pc, #220]	; (2554 <usb_handle_setup+0x118>)
    2478:	4798      	blx	r3
    247a:	e061      	b.n	2540 <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    247c:	2000      	movs	r0, #0
    247e:	4b34      	ldr	r3, [pc, #208]	; (2550 <usb_handle_setup+0x114>)
    2480:	4798      	blx	r3
				return usb_ep0_out();
    2482:	4b34      	ldr	r3, [pc, #208]	; (2554 <usb_handle_setup+0x118>)
    2484:	4798      	blx	r3
    2486:	e05b      	b.n	2540 <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    2488:	4b2f      	ldr	r3, [pc, #188]	; (2548 <usb_handle_setup+0x10c>)
    248a:	8859      	ldrh	r1, [r3, #2]
    248c:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    248e:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    2490:	2300      	movs	r3, #0
    2492:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2494:	aa01      	add	r2, sp, #4
    2496:	4b30      	ldr	r3, [pc, #192]	; (2558 <usb_handle_setup+0x11c>)
    2498:	4798      	blx	r3

				if (size && descriptor){
    249a:	2800      	cmp	r0, #0
    249c:	d019      	beq.n	24d2 <usb_handle_setup+0x96>
    249e:	9901      	ldr	r1, [sp, #4]
    24a0:	2900      	cmp	r1, #0
    24a2:	d016      	beq.n	24d2 <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    24a4:	4a28      	ldr	r2, [pc, #160]	; (2548 <usb_handle_setup+0x10c>)
    24a6:	88d2      	ldrh	r2, [r2, #6]
    24a8:	4282      	cmp	r2, r0
    24aa:	d300      	bcc.n	24ae <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    24ac:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    24ae:	4b2b      	ldr	r3, [pc, #172]	; (255c <usb_handle_setup+0x120>)
    24b0:	4299      	cmp	r1, r3
    24b2:	d005      	beq.n	24c0 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    24b4:	4b23      	ldr	r3, [pc, #140]	; (2544 <usb_handle_setup+0x108>)
    24b6:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    24b8:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    24ba:	4b29      	ldr	r3, [pc, #164]	; (2560 <usb_handle_setup+0x124>)
    24bc:	4798      	blx	r3
					}

					return;
    24be:	e03f      	b.n	2540 <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    24c0:	4920      	ldr	r1, [pc, #128]	; (2544 <usb_handle_setup+0x108>)
    24c2:	2300      	movs	r3, #0
    24c4:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    24c6:	3104      	adds	r1, #4
    24c8:	3301      	adds	r3, #1
    24ca:	2080      	movs	r0, #128	; 0x80
    24cc:	4c25      	ldr	r4, [pc, #148]	; (2564 <usb_handle_setup+0x128>)
    24ce:	47a0      	blx	r4
    24d0:	e036      	b.n	2540 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    24d2:	4b25      	ldr	r3, [pc, #148]	; (2568 <usb_handle_setup+0x12c>)
    24d4:	4798      	blx	r3
    24d6:	e033      	b.n	2540 <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    24d8:	4b1a      	ldr	r3, [pc, #104]	; (2544 <usb_handle_setup+0x108>)
    24da:	2250      	movs	r2, #80	; 0x50
    24dc:	5c9a      	ldrb	r2, [r3, r2]
    24de:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    24e0:	2001      	movs	r0, #1
    24e2:	4b1b      	ldr	r3, [pc, #108]	; (2550 <usb_handle_setup+0x114>)
    24e4:	4798      	blx	r3
				return usb_ep0_out();
    24e6:	4b1b      	ldr	r3, [pc, #108]	; (2554 <usb_handle_setup+0x118>)
    24e8:	4798      	blx	r3
    24ea:	e029      	b.n	2540 <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    24ec:	4b16      	ldr	r3, [pc, #88]	; (2548 <usb_handle_setup+0x10c>)
    24ee:	7898      	ldrb	r0, [r3, #2]
    24f0:	4b1e      	ldr	r3, [pc, #120]	; (256c <usb_handle_setup+0x130>)
    24f2:	4798      	blx	r3
    24f4:	2800      	cmp	r0, #0
    24f6:	d00b      	beq.n	2510 <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    24f8:	2000      	movs	r0, #0
    24fa:	4b15      	ldr	r3, [pc, #84]	; (2550 <usb_handle_setup+0x114>)
    24fc:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    24fe:	4b11      	ldr	r3, [pc, #68]	; (2544 <usb_handle_setup+0x108>)
    2500:	001a      	movs	r2, r3
    2502:	3248      	adds	r2, #72	; 0x48
    2504:	7891      	ldrb	r1, [r2, #2]
    2506:	2250      	movs	r2, #80	; 0x50
    2508:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    250a:	4b12      	ldr	r3, [pc, #72]	; (2554 <usb_handle_setup+0x118>)
    250c:	4798      	blx	r3
    250e:	e017      	b.n	2540 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2510:	4b15      	ldr	r3, [pc, #84]	; (2568 <usb_handle_setup+0x12c>)
    2512:	4798      	blx	r3
    2514:	e014      	b.n	2540 <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    2516:	4b0c      	ldr	r3, [pc, #48]	; (2548 <usb_handle_setup+0x10c>)
    2518:	8859      	ldrh	r1, [r3, #2]
    251a:	8898      	ldrh	r0, [r3, #4]
    251c:	4b14      	ldr	r3, [pc, #80]	; (2570 <usb_handle_setup+0x134>)
    251e:	4798      	blx	r3
    2520:	2800      	cmp	r0, #0
    2522:	d005      	beq.n	2530 <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    2524:	2000      	movs	r0, #0
    2526:	4b0a      	ldr	r3, [pc, #40]	; (2550 <usb_handle_setup+0x114>)
    2528:	4798      	blx	r3
					return usb_ep0_out();
    252a:	4b0a      	ldr	r3, [pc, #40]	; (2554 <usb_handle_setup+0x118>)
    252c:	4798      	blx	r3
    252e:	e007      	b.n	2540 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2530:	4b0d      	ldr	r3, [pc, #52]	; (2568 <usb_handle_setup+0x12c>)
    2532:	4798      	blx	r3
    2534:	e004      	b.n	2540 <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    2536:	4b0c      	ldr	r3, [pc, #48]	; (2568 <usb_handle_setup+0x12c>)
    2538:	4798      	blx	r3
    253a:	e001      	b.n	2540 <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    253c:	4b0d      	ldr	r3, [pc, #52]	; (2574 <usb_handle_setup+0x138>)
    253e:	4798      	blx	r3
}
    2540:	b002      	add	sp, #8
    2542:	bd10      	pop	{r4, pc}
    2544:	20000490 	.word	0x20000490
    2548:	200004d8 	.word	0x200004d8
    254c:	00005804 	.word	0x00005804
    2550:	00002a19 	.word	0x00002a19
    2554:	00002a01 	.word	0x00002a01
    2558:	00002d99 	.word	0x00002d99
    255c:	20000494 	.word	0x20000494
    2560:	000023e9 	.word	0x000023e9
    2564:	000028f9 	.word	0x000028f9
    2568:	00002a31 	.word	0x00002a31
    256c:	00002d5d 	.word	0x00002d5d
    2570:	00002d75 	.word	0x00002d75
    2574:	00002c4d 	.word	0x00002c4d

00002578 <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    2578:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    257a:	4b05      	ldr	r3, [pc, #20]	; (2590 <usb_handle_control_out_complete+0x18>)
    257c:	2248      	movs	r2, #72	; 0x48
    257e:	5c9b      	ldrb	r3, [r3, r2]
    2580:	3218      	adds	r2, #24
    2582:	421a      	tst	r2, r3
    2584:	d100      	bne.n	2588 <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    2586:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    2588:	4b02      	ldr	r3, [pc, #8]	; (2594 <usb_handle_control_out_complete+0x1c>)
    258a:	4798      	blx	r3
}
    258c:	e7fb      	b.n	2586 <usb_handle_control_out_complete+0xe>
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	20000490 	.word	0x20000490
    2594:	00002d5b 	.word	0x00002d5b

00002598 <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    2598:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    259a:	4b0d      	ldr	r3, [pc, #52]	; (25d0 <usb_handle_control_in_complete+0x38>)
    259c:	2248      	movs	r2, #72	; 0x48
    259e:	5c9b      	ldrb	r3, [r3, r2]
    25a0:	3218      	adds	r2, #24
    25a2:	421a      	tst	r2, r3
    25a4:	d110      	bne.n	25c8 <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    25a6:	4b0b      	ldr	r3, [pc, #44]	; (25d4 <usb_handle_control_in_complete+0x3c>)
    25a8:	785b      	ldrb	r3, [r3, #1]
    25aa:	2b05      	cmp	r3, #5
    25ac:	d002      	beq.n	25b4 <usb_handle_control_in_complete+0x1c>
    25ae:	2b06      	cmp	r3, #6
    25b0:	d007      	beq.n	25c2 <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    25b2:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    25b4:	4b07      	ldr	r3, [pc, #28]	; (25d4 <usb_handle_control_in_complete+0x3c>)
    25b6:	789b      	ldrb	r3, [r3, #2]
    25b8:	207f      	movs	r0, #127	; 0x7f
    25ba:	4018      	ands	r0, r3
    25bc:	4b06      	ldr	r3, [pc, #24]	; (25d8 <usb_handle_control_in_complete+0x40>)
    25be:	4798      	blx	r3
				return;
    25c0:	e7f7      	b.n	25b2 <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    25c2:	4b06      	ldr	r3, [pc, #24]	; (25dc <usb_handle_control_in_complete+0x44>)
    25c4:	4798      	blx	r3
				return;
    25c6:	e7f4      	b.n	25b2 <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    25c8:	4b05      	ldr	r3, [pc, #20]	; (25e0 <usb_handle_control_in_complete+0x48>)
    25ca:	4798      	blx	r3
    25cc:	e7f1      	b.n	25b2 <usb_handle_control_in_complete+0x1a>
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	20000490 	.word	0x20000490
    25d4:	200004d8 	.word	0x200004d8
    25d8:	00002745 	.word	0x00002745
    25dc:	000023e9 	.word	0x000023e9
    25e0:	00002d59 	.word	0x00002d59

000025e4 <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    25e4:	b570      	push	{r4, r5, r6, lr}
    25e6:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    25e8:	4b0b      	ldr	r3, [pc, #44]	; (2618 <usb_string_to_descriptor+0x34>)
    25ea:	4798      	blx	r3
    25ec:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    25ee:	281f      	cmp	r0, #31
    25f0:	d900      	bls.n	25f4 <usb_string_to_descriptor+0x10>
    25f2:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    25f4:	1c43      	adds	r3, r0, #1
    25f6:	005b      	lsls	r3, r3, #1
    25f8:	4a08      	ldr	r2, [pc, #32]	; (261c <usb_string_to_descriptor+0x38>)
    25fa:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    25fc:	2303      	movs	r3, #3
    25fe:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    2600:	2200      	movs	r2, #0
    2602:	e005      	b.n	2610 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    2604:	5cb1      	ldrb	r1, [r6, r2]
    2606:	4b05      	ldr	r3, [pc, #20]	; (261c <usb_string_to_descriptor+0x38>)
    2608:	0054      	lsls	r4, r2, #1
    260a:	191b      	adds	r3, r3, r4
    260c:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    260e:	3201      	adds	r2, #1
    2610:	4290      	cmp	r0, r2
    2612:	dcf7      	bgt.n	2604 <usb_string_to_descriptor+0x20>
	}
	return desc;
    2614:	4802      	ldr	r0, [pc, #8]	; (2620 <usb_string_to_descriptor+0x3c>)
}
    2616:	bd70      	pop	{r4, r5, r6, pc}
    2618:	00005405 	.word	0x00005405
    261c:	20000490 	.word	0x20000490
    2620:	20000494 	.word	0x20000494

00002624 <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    2624:	4a12      	ldr	r2, [pc, #72]	; (2670 <usb_reset+0x4c>)
    2626:	4b13      	ldr	r3, [pc, #76]	; (2674 <usb_reset+0x50>)
    2628:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    262a:	685a      	ldr	r2, [r3, #4]
    262c:	4812      	ldr	r0, [pc, #72]	; (2678 <usb_reset+0x54>)
    262e:	4002      	ands	r2, r0
    2630:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    2632:	6859      	ldr	r1, [r3, #4]
    2634:	22c0      	movs	r2, #192	; 0xc0
    2636:	0592      	lsls	r2, r2, #22
    2638:	4311      	orrs	r1, r2
    263a:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    263c:	490f      	ldr	r1, [pc, #60]	; (267c <usb_reset+0x58>)
    263e:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2640:	6959      	ldr	r1, [r3, #20]
    2642:	4001      	ands	r1, r0
    2644:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    2646:	6959      	ldr	r1, [r3, #20]
    2648:	430a      	orrs	r2, r1
    264a:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    264c:	695a      	ldr	r2, [r3, #20]
    264e:	0052      	lsls	r2, r2, #1
    2650:	0852      	lsrs	r2, r2, #1
    2652:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    2654:	6959      	ldr	r1, [r3, #20]
    2656:	2280      	movs	r2, #128	; 0x80
    2658:	0612      	lsls	r2, r2, #24
    265a:	430a      	orrs	r2, r1
    265c:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    265e:	4b08      	ldr	r3, [pc, #32]	; (2680 <usb_reset+0x5c>)
    2660:	220a      	movs	r2, #10
    2662:	32ff      	adds	r2, #255	; 0xff
    2664:	2110      	movs	r1, #16
    2666:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    2668:	3a09      	subs	r2, #9
    266a:	3101      	adds	r1, #1
    266c:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    266e:	4770      	bx	lr
    2670:	200004e4 	.word	0x200004e4
    2674:	20000570 	.word	0x20000570
    2678:	8fffffff 	.word	0x8fffffff
    267c:	20000494 	.word	0x20000494
    2680:	41005000 	.word	0x41005000

00002684 <usb_init>:
void usb_init(){
    2684:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    2686:	4a26      	ldr	r2, [pc, #152]	; (2720 <usb_init+0x9c>)
    2688:	69d3      	ldr	r3, [r2, #28]
    268a:	2120      	movs	r1, #32
    268c:	430b      	orrs	r3, r1
    268e:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    2690:	4b24      	ldr	r3, [pc, #144]	; (2724 <usb_init+0xa0>)
    2692:	4a25      	ldr	r2, [pc, #148]	; (2728 <usb_init+0xa4>)
    2694:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    2696:	4b25      	ldr	r3, [pc, #148]	; (272c <usb_init+0xa8>)
    2698:	2201      	movs	r2, #1
    269a:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    269c:	4b23      	ldr	r3, [pc, #140]	; (272c <usb_init+0xa8>)
    269e:	789b      	ldrb	r3, [r3, #2]
    26a0:	07db      	lsls	r3, r3, #31
    26a2:	d4fb      	bmi.n	269c <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    26a4:	4b21      	ldr	r3, [pc, #132]	; (272c <usb_init+0xa8>)
    26a6:	2202      	movs	r2, #2
    26a8:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    26aa:	4b20      	ldr	r3, [pc, #128]	; (272c <usb_init+0xa8>)
    26ac:	789b      	ldrb	r3, [r3, #2]
    26ae:	079b      	lsls	r3, r3, #30
    26b0:	d4fb      	bmi.n	26aa <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    26b2:	4b1f      	ldr	r3, [pc, #124]	; (2730 <usb_init+0xac>)
    26b4:	685b      	ldr	r3, [r3, #4]
    26b6:	035b      	lsls	r3, r3, #13
    26b8:	22f8      	movs	r2, #248	; 0xf8
    26ba:	0292      	lsls	r2, r2, #10
    26bc:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    26be:	2b1f      	cmp	r3, #31
    26c0:	d028      	beq.n	2714 <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    26c2:	4a1b      	ldr	r2, [pc, #108]	; (2730 <usb_init+0xac>)
    26c4:	6851      	ldr	r1, [r2, #4]
    26c6:	0489      	lsls	r1, r1, #18
    26c8:	22f8      	movs	r2, #248	; 0xf8
    26ca:	03d2      	lsls	r2, r2, #15
    26cc:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    26ce:	291f      	cmp	r1, #31
    26d0:	d022      	beq.n	2718 <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    26d2:	4a17      	ldr	r2, [pc, #92]	; (2730 <usb_init+0xac>)
    26d4:	6852      	ldr	r2, [r2, #4]
    26d6:	05d2      	lsls	r2, r2, #23
    26d8:	20e0      	movs	r0, #224	; 0xe0
    26da:	0480      	lsls	r0, r0, #18
    26dc:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    26de:	2a07      	cmp	r2, #7
    26e0:	d01c      	beq.n	271c <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    26e2:	019b      	lsls	r3, r3, #6
    26e4:	20f8      	movs	r0, #248	; 0xf8
    26e6:	00c0      	lsls	r0, r0, #3
    26e8:	4003      	ands	r3, r0
    26ea:	201f      	movs	r0, #31
    26ec:	4001      	ands	r1, r0
    26ee:	430b      	orrs	r3, r1
    26f0:	0312      	lsls	r2, r2, #12
    26f2:	4313      	orrs	r3, r2
    26f4:	4d0d      	ldr	r5, [pc, #52]	; (272c <usb_init+0xa8>)
    26f6:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    26f8:	4b0e      	ldr	r3, [pc, #56]	; (2734 <usb_init+0xb0>)
    26fa:	781a      	ldrb	r2, [r3, #0]
    26fc:	0112      	lsls	r2, r2, #4
    26fe:	4c0e      	ldr	r4, [pc, #56]	; (2738 <usb_init+0xb4>)
    2700:	2100      	movs	r1, #0
    2702:	0020      	movs	r0, r4
    2704:	4b0d      	ldr	r3, [pc, #52]	; (273c <usb_init+0xb8>)
    2706:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    2708:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    270a:	2308      	movs	r3, #8
    270c:	832b      	strh	r3, [r5, #24]
	usb_reset();
    270e:	4b0c      	ldr	r3, [pc, #48]	; (2740 <usb_init+0xbc>)
    2710:	4798      	blx	r3
}
    2712:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    2714:	3b1a      	subs	r3, #26
    2716:	e7d4      	b.n	26c2 <usb_init+0x3e>
		pad_transp = 29;
    2718:	3902      	subs	r1, #2
    271a:	e7da      	b.n	26d2 <usb_init+0x4e>
		pad_trim = 3;
    271c:	3a04      	subs	r2, #4
    271e:	e7e0      	b.n	26e2 <usb_init+0x5e>
    2720:	40000400 	.word	0x40000400
    2724:	40000c00 	.word	0x40000c00
    2728:	00004006 	.word	0x00004006
    272c:	41005000 	.word	0x41005000
    2730:	00806020 	.word	0x00806020
    2734:	00005886 	.word	0x00005886
    2738:	20000570 	.word	0x20000570
    273c:	0000527d 	.word	0x0000527d
    2740:	00002625 	.word	0x00002625

00002744 <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    2744:	2380      	movs	r3, #128	; 0x80
    2746:	425b      	negs	r3, r3
    2748:	4318      	orrs	r0, r3
    274a:	b2c0      	uxtb	r0, r0
    274c:	4b01      	ldr	r3, [pc, #4]	; (2754 <usb_set_address+0x10>)
    274e:	7298      	strb	r0, [r3, #10]
}
    2750:	4770      	bx	lr
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	41005000 	.word	0x41005000

00002758 <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    2758:	b530      	push	{r4, r5, lr}
    275a:	0003      	movs	r3, r0
	if (ep & 0x80) {
    275c:	b240      	sxtb	r0, r0
    275e:	2800      	cmp	r0, #0
    2760:	db24      	blt.n	27ac <usb_enable_ep+0x54>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2762:	203f      	movs	r0, #63	; 0x3f
    2764:	4018      	ands	r0, r3
    2766:	4b49      	ldr	r3, [pc, #292]	; (288c <usb_enable_ep+0x134>)
    2768:	0144      	lsls	r4, r0, #5
    276a:	191b      	adds	r3, r3, r4
    276c:	685c      	ldr	r4, [r3, #4]
    276e:	4d48      	ldr	r5, [pc, #288]	; (2890 <usb_enable_ep+0x138>)
    2770:	402c      	ands	r4, r5
    2772:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2774:	685b      	ldr	r3, [r3, #4]
    2776:	2a08      	cmp	r2, #8
    2778:	d95f      	bls.n	283a <usb_enable_ep+0xe2>
    277a:	2a10      	cmp	r2, #16
    277c:	d800      	bhi.n	2780 <usb_enable_ep+0x28>
    277e:	e072      	b.n	2866 <usb_enable_ep+0x10e>
    2780:	2a20      	cmp	r2, #32
    2782:	d800      	bhi.n	2786 <usb_enable_ep+0x2e>
    2784:	e072      	b.n	286c <usb_enable_ep+0x114>
    2786:	2a40      	cmp	r2, #64	; 0x40
    2788:	d800      	bhi.n	278c <usb_enable_ep+0x34>
    278a:	e072      	b.n	2872 <usb_enable_ep+0x11a>
    278c:	2a80      	cmp	r2, #128	; 0x80
    278e:	d800      	bhi.n	2792 <usb_enable_ep+0x3a>
    2790:	e072      	b.n	2878 <usb_enable_ep+0x120>
    2792:	2480      	movs	r4, #128	; 0x80
    2794:	0064      	lsls	r4, r4, #1
    2796:	42a2      	cmp	r2, r4
    2798:	d800      	bhi.n	279c <usb_enable_ep+0x44>
    279a:	e070      	b.n	287e <usb_enable_ep+0x126>
    279c:	3401      	adds	r4, #1
    279e:	34ff      	adds	r4, #255	; 0xff
    27a0:	42a2      	cmp	r2, r4
    27a2:	d900      	bls.n	27a6 <usb_enable_ep+0x4e>
    27a4:	e06e      	b.n	2884 <usb_enable_ep+0x12c>
    27a6:	22c0      	movs	r2, #192	; 0xc0
    27a8:	05d2      	lsls	r2, r2, #23
    27aa:	e047      	b.n	283c <usb_enable_ep+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    27ac:	203f      	movs	r0, #63	; 0x3f
    27ae:	4003      	ands	r3, r0
    27b0:	4836      	ldr	r0, [pc, #216]	; (288c <usb_enable_ep+0x134>)
    27b2:	015c      	lsls	r4, r3, #5
    27b4:	1900      	adds	r0, r0, r4
    27b6:	6944      	ldr	r4, [r0, #20]
    27b8:	4d35      	ldr	r5, [pc, #212]	; (2890 <usb_enable_ep+0x138>)
    27ba:	402c      	ands	r4, r5
    27bc:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    27be:	6940      	ldr	r0, [r0, #20]
    27c0:	2a08      	cmp	r2, #8
    27c2:	d912      	bls.n	27ea <usb_enable_ep+0x92>
    27c4:	2a10      	cmp	r2, #16
    27c6:	d926      	bls.n	2816 <usb_enable_ep+0xbe>
    27c8:	2a20      	cmp	r2, #32
    27ca:	d927      	bls.n	281c <usb_enable_ep+0xc4>
    27cc:	2a40      	cmp	r2, #64	; 0x40
    27ce:	d928      	bls.n	2822 <usb_enable_ep+0xca>
    27d0:	2a80      	cmp	r2, #128	; 0x80
    27d2:	d929      	bls.n	2828 <usb_enable_ep+0xd0>
    27d4:	2480      	movs	r4, #128	; 0x80
    27d6:	0064      	lsls	r4, r4, #1
    27d8:	42a2      	cmp	r2, r4
    27da:	d928      	bls.n	282e <usb_enable_ep+0xd6>
    27dc:	3401      	adds	r4, #1
    27de:	34ff      	adds	r4, #255	; 0xff
    27e0:	42a2      	cmp	r2, r4
    27e2:	d827      	bhi.n	2834 <usb_enable_ep+0xdc>
    27e4:	22c0      	movs	r2, #192	; 0xc0
    27e6:	05d2      	lsls	r2, r2, #23
    27e8:	e000      	b.n	27ec <usb_enable_ep+0x94>
    27ea:	2200      	movs	r2, #0
    27ec:	4310      	orrs	r0, r2
    27ee:	4a27      	ldr	r2, [pc, #156]	; (288c <usb_enable_ep+0x134>)
    27f0:	015c      	lsls	r4, r3, #5
    27f2:	1912      	adds	r2, r2, r4
    27f4:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    27f6:	4c27      	ldr	r4, [pc, #156]	; (2894 <usb_enable_ep+0x13c>)
    27f8:	3308      	adds	r3, #8
    27fa:	015b      	lsls	r3, r3, #5
    27fc:	5d1a      	ldrb	r2, [r3, r4]
    27fe:	3101      	adds	r1, #1
    2800:	b2c9      	uxtb	r1, r1
    2802:	0109      	lsls	r1, r1, #4
    2804:	2070      	movs	r0, #112	; 0x70
    2806:	4001      	ands	r1, r0
    2808:	430a      	orrs	r2, r1
    280a:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    280c:	46a4      	mov	ip, r4
    280e:	4463      	add	r3, ip
    2810:	22a2      	movs	r2, #162	; 0xa2
    2812:	711a      	strb	r2, [r3, #4]
    2814:	e026      	b.n	2864 <usb_enable_ep+0x10c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2816:	2280      	movs	r2, #128	; 0x80
    2818:	0552      	lsls	r2, r2, #21
    281a:	e7e7      	b.n	27ec <usb_enable_ep+0x94>
    281c:	2280      	movs	r2, #128	; 0x80
    281e:	0592      	lsls	r2, r2, #22
    2820:	e7e4      	b.n	27ec <usb_enable_ep+0x94>
    2822:	22c0      	movs	r2, #192	; 0xc0
    2824:	0592      	lsls	r2, r2, #22
    2826:	e7e1      	b.n	27ec <usb_enable_ep+0x94>
    2828:	2280      	movs	r2, #128	; 0x80
    282a:	05d2      	lsls	r2, r2, #23
    282c:	e7de      	b.n	27ec <usb_enable_ep+0x94>
    282e:	22a0      	movs	r2, #160	; 0xa0
    2830:	05d2      	lsls	r2, r2, #23
    2832:	e7db      	b.n	27ec <usb_enable_ep+0x94>
    2834:	22e0      	movs	r2, #224	; 0xe0
    2836:	05d2      	lsls	r2, r2, #23
    2838:	e7d8      	b.n	27ec <usb_enable_ep+0x94>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    283a:	2200      	movs	r2, #0
    283c:	431a      	orrs	r2, r3
    283e:	4b13      	ldr	r3, [pc, #76]	; (288c <usb_enable_ep+0x134>)
    2840:	0144      	lsls	r4, r0, #5
    2842:	191b      	adds	r3, r3, r4
    2844:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    2846:	4a13      	ldr	r2, [pc, #76]	; (2894 <usb_enable_ep+0x13c>)
    2848:	3008      	adds	r0, #8
    284a:	0140      	lsls	r0, r0, #5
    284c:	5c83      	ldrb	r3, [r0, r2]
    284e:	3101      	adds	r1, #1
    2850:	2407      	movs	r4, #7
    2852:	4021      	ands	r1, r4
    2854:	430b      	orrs	r3, r1
    2856:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    2858:	4694      	mov	ip, r2
    285a:	4460      	add	r0, ip
    285c:	2340      	movs	r3, #64	; 0x40
    285e:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    2860:	3b2f      	subs	r3, #47	; 0x2f
    2862:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    2864:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2866:	2280      	movs	r2, #128	; 0x80
    2868:	0552      	lsls	r2, r2, #21
    286a:	e7e7      	b.n	283c <usb_enable_ep+0xe4>
    286c:	2280      	movs	r2, #128	; 0x80
    286e:	0592      	lsls	r2, r2, #22
    2870:	e7e4      	b.n	283c <usb_enable_ep+0xe4>
    2872:	22c0      	movs	r2, #192	; 0xc0
    2874:	0592      	lsls	r2, r2, #22
    2876:	e7e1      	b.n	283c <usb_enable_ep+0xe4>
    2878:	2280      	movs	r2, #128	; 0x80
    287a:	05d2      	lsls	r2, r2, #23
    287c:	e7de      	b.n	283c <usb_enable_ep+0xe4>
    287e:	22a0      	movs	r2, #160	; 0xa0
    2880:	05d2      	lsls	r2, r2, #23
    2882:	e7db      	b.n	283c <usb_enable_ep+0xe4>
    2884:	22e0      	movs	r2, #224	; 0xe0
    2886:	05d2      	lsls	r2, r2, #23
    2888:	e7d8      	b.n	283c <usb_enable_ep+0xe4>
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	20000570 	.word	0x20000570
    2890:	8fffffff 	.word	0x8fffffff
    2894:	41005000 	.word	0x41005000

00002898 <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    2898:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    289a:	4d12      	ldr	r5, [pc, #72]	; (28e4 <usb_ep_start_out+0x4c>)
    289c:	0144      	lsls	r4, r0, #5
    289e:	192b      	adds	r3, r5, r4
    28a0:	685e      	ldr	r6, [r3, #4]
    28a2:	4f11      	ldr	r7, [pc, #68]	; (28e8 <usb_ep_start_out+0x50>)
    28a4:	403e      	ands	r6, r7
    28a6:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    28a8:	685e      	ldr	r6, [r3, #4]
    28aa:	0392      	lsls	r2, r2, #14
    28ac:	4f0f      	ldr	r7, [pc, #60]	; (28ec <usb_ep_start_out+0x54>)
    28ae:	403a      	ands	r2, r7
    28b0:	4316      	orrs	r6, r2
    28b2:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    28b4:	685a      	ldr	r2, [r3, #4]
    28b6:	0b92      	lsrs	r2, r2, #14
    28b8:	0392      	lsls	r2, r2, #14
    28ba:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    28bc:	685a      	ldr	r2, [r3, #4]
    28be:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    28c0:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    28c2:	3008      	adds	r0, #8
    28c4:	0140      	lsls	r0, r0, #5
    28c6:	4b0a      	ldr	r3, [pc, #40]	; (28f0 <usb_ep_start_out+0x58>)
    28c8:	469c      	mov	ip, r3
    28ca:	4460      	add	r0, ip
    28cc:	2305      	movs	r3, #5
    28ce:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    28d0:	4b08      	ldr	r3, [pc, #32]	; (28f4 <usb_ep_start_out+0x5c>)
    28d2:	469c      	mov	ip, r3
    28d4:	4464      	add	r4, ip
    28d6:	2301      	movs	r3, #1
    28d8:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    28da:	333f      	adds	r3, #63	; 0x3f
    28dc:	7103      	strb	r3, [r0, #4]
	return 0;
}
    28de:	2000      	movs	r0, #0
    28e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28e2:	46c0      	nop			; (mov r8, r8)
    28e4:	20000570 	.word	0x20000570
    28e8:	f0003fff 	.word	0xf0003fff
    28ec:	0fffc000 	.word	0x0fffc000
    28f0:	41005000 	.word	0x41005000
    28f4:	41005109 	.word	0x41005109

000028f8 <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    28f8:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    28fa:	243f      	movs	r4, #63	; 0x3f
    28fc:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    28fe:	4c15      	ldr	r4, [pc, #84]	; (2954 <usb_ep_start_in+0x5c>)
    2900:	0146      	lsls	r6, r0, #5
    2902:	19a4      	adds	r4, r4, r6
    2904:	6965      	ldr	r5, [r4, #20]
    2906:	006d      	lsls	r5, r5, #1
    2908:	086d      	lsrs	r5, r5, #1
    290a:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    290c:	6965      	ldr	r5, [r4, #20]
    290e:	07db      	lsls	r3, r3, #31
    2910:	431d      	orrs	r5, r3
    2912:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    2914:	6963      	ldr	r3, [r4, #20]
    2916:	4d10      	ldr	r5, [pc, #64]	; (2958 <usb_ep_start_in+0x60>)
    2918:	402b      	ands	r3, r5
    291a:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    291c:	6963      	ldr	r3, [r4, #20]
    291e:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2920:	6963      	ldr	r3, [r4, #20]
    2922:	0b9b      	lsrs	r3, r3, #14
    2924:	039b      	lsls	r3, r3, #14
    2926:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    2928:	6963      	ldr	r3, [r4, #20]
    292a:	0492      	lsls	r2, r2, #18
    292c:	0c92      	lsrs	r2, r2, #18
    292e:	4313      	orrs	r3, r2
    2930:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    2932:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    2934:	3008      	adds	r0, #8
    2936:	0140      	lsls	r0, r0, #5
    2938:	4b08      	ldr	r3, [pc, #32]	; (295c <usb_ep_start_in+0x64>)
    293a:	469c      	mov	ip, r3
    293c:	4460      	add	r0, ip
    293e:	230a      	movs	r3, #10
    2940:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    2942:	4b07      	ldr	r3, [pc, #28]	; (2960 <usb_ep_start_in+0x68>)
    2944:	469c      	mov	ip, r3
    2946:	4466      	add	r6, ip
    2948:	2302      	movs	r3, #2
    294a:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    294c:	337e      	adds	r3, #126	; 0x7e
    294e:	7143      	strb	r3, [r0, #5]
	return 0;
}
    2950:	2000      	movs	r0, #0
    2952:	bd70      	pop	{r4, r5, r6, pc}
    2954:	20000570 	.word	0x20000570
    2958:	f0003fff 	.word	0xf0003fff
    295c:	41005000 	.word	0x41005000
    2960:	41005109 	.word	0x41005109

00002964 <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    2964:	b243      	sxtb	r3, r0
    2966:	2b00      	cmp	r3, #0
    2968:	db0a      	blt.n	2980 <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    296a:	233f      	movs	r3, #63	; 0x3f
    296c:	4003      	ands	r3, r0
    296e:	3308      	adds	r3, #8
    2970:	015b      	lsls	r3, r3, #5
    2972:	4a09      	ldr	r2, [pc, #36]	; (2998 <usb_ep_pending+0x34>)
    2974:	4694      	mov	ip, r2
    2976:	4463      	add	r3, ip
    2978:	79d8      	ldrb	r0, [r3, #7]
    297a:	2301      	movs	r3, #1
    297c:	4018      	ands	r0, r3
	}
}
    297e:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    2980:	233f      	movs	r3, #63	; 0x3f
    2982:	4003      	ands	r3, r0
    2984:	3308      	adds	r3, #8
    2986:	015b      	lsls	r3, r3, #5
    2988:	4a03      	ldr	r2, [pc, #12]	; (2998 <usb_ep_pending+0x34>)
    298a:	4694      	mov	ip, r2
    298c:	4463      	add	r3, ip
    298e:	79db      	ldrb	r3, [r3, #7]
    2990:	085b      	lsrs	r3, r3, #1
    2992:	2001      	movs	r0, #1
    2994:	4018      	ands	r0, r3
    2996:	e7f2      	b.n	297e <usb_ep_pending+0x1a>
    2998:	41005000 	.word	0x41005000

0000299c <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    299c:	b243      	sxtb	r3, r0
    299e:	2b00      	cmp	r3, #0
    29a0:	db09      	blt.n	29b6 <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    29a2:	233f      	movs	r3, #63	; 0x3f
    29a4:	4003      	ands	r3, r0
    29a6:	3308      	adds	r3, #8
    29a8:	015b      	lsls	r3, r3, #5
    29aa:	4a08      	ldr	r2, [pc, #32]	; (29cc <usb_ep_handled+0x30>)
    29ac:	4694      	mov	ip, r2
    29ae:	4463      	add	r3, ip
    29b0:	2201      	movs	r2, #1
    29b2:	71da      	strb	r2, [r3, #7]
	}
}
    29b4:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    29b6:	233f      	movs	r3, #63	; 0x3f
    29b8:	4003      	ands	r3, r0
    29ba:	3308      	adds	r3, #8
    29bc:	015b      	lsls	r3, r3, #5
    29be:	4a03      	ldr	r2, [pc, #12]	; (29cc <usb_ep_handled+0x30>)
    29c0:	4694      	mov	ip, r2
    29c2:	4463      	add	r3, ip
    29c4:	2202      	movs	r2, #2
    29c6:	71da      	strb	r2, [r3, #7]
    29c8:	e7f4      	b.n	29b4 <usb_ep_handled+0x18>
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	41005000 	.word	0x41005000

000029d0 <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    29d0:	4b03      	ldr	r3, [pc, #12]	; (29e0 <usb_ep_out_length+0x10>)
    29d2:	0140      	lsls	r0, r0, #5
    29d4:	181b      	adds	r3, r3, r0
    29d6:	6858      	ldr	r0, [r3, #4]
    29d8:	0480      	lsls	r0, r0, #18
    29da:	0c80      	lsrs	r0, r0, #18
}
    29dc:	4770      	bx	lr
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	20000570 	.word	0x20000570

000029e4 <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29e4:	4b04      	ldr	r3, [pc, #16]	; (29f8 <usb_attach+0x14>)
    29e6:	2280      	movs	r2, #128	; 0x80
    29e8:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    29ea:	4a04      	ldr	r2, [pc, #16]	; (29fc <usb_attach+0x18>)
    29ec:	8913      	ldrh	r3, [r2, #8]
    29ee:	2101      	movs	r1, #1
    29f0:	438b      	bics	r3, r1
    29f2:	8113      	strh	r3, [r2, #8]
}
    29f4:	4770      	bx	lr
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	e000e100 	.word	0xe000e100
    29fc:	41005000 	.word	0x41005000

00002a00 <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    2a00:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    2a02:	4903      	ldr	r1, [pc, #12]	; (2a10 <usb_ep0_out+0x10>)
    2a04:	2240      	movs	r2, #64	; 0x40
    2a06:	2000      	movs	r0, #0
    2a08:	4b02      	ldr	r3, [pc, #8]	; (2a14 <usb_ep0_out+0x14>)
    2a0a:	4798      	blx	r3
}
    2a0c:	bd10      	pop	{r4, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	200004e4 	.word	0x200004e4
    2a14:	00002899 	.word	0x00002899

00002a18 <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    2a18:	b510      	push	{r4, lr}
    2a1a:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2a1c:	4902      	ldr	r1, [pc, #8]	; (2a28 <usb_ep0_in+0x10>)
    2a1e:	2301      	movs	r3, #1
    2a20:	2080      	movs	r0, #128	; 0x80
    2a22:	4c02      	ldr	r4, [pc, #8]	; (2a2c <usb_ep0_in+0x14>)
    2a24:	47a0      	blx	r4
}
    2a26:	bd10      	pop	{r4, pc}
    2a28:	20000494 	.word	0x20000494
    2a2c:	000028f9 	.word	0x000028f9

00002a30 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    2a30:	4a02      	ldr	r2, [pc, #8]	; (2a3c <usb_ep0_stall+0xc>)
    2a32:	2306      	movs	r3, #6
    2a34:	33ff      	adds	r3, #255	; 0xff
    2a36:	2130      	movs	r1, #48	; 0x30
    2a38:	54d1      	strb	r1, [r2, r3]
}
    2a3a:	4770      	bx	lr
    2a3c:	41005000 	.word	0x41005000

00002a40 <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    2a40:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    2a42:	4b25      	ldr	r3, [pc, #148]	; (2ad8 <usb_handle_function+0x98>)
    2a44:	8c1c      	ldrh	r4, [r3, #32]
    2a46:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    2a48:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    2a4a:	071b      	lsls	r3, r3, #28
    2a4c:	d410      	bmi.n	2a70 <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    2a4e:	07e3      	lsls	r3, r4, #31
    2a50:	d50c      	bpl.n	2a6c <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    2a52:	4921      	ldr	r1, [pc, #132]	; (2ad8 <usb_handle_function+0x98>)
    2a54:	2208      	movs	r2, #8
    2a56:	32ff      	adds	r2, #255	; 0xff
    2a58:	5c8b      	ldrb	r3, [r1, r2]
    2a5a:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    2a5c:	2013      	movs	r0, #19
    2a5e:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    2a60:	06db      	lsls	r3, r3, #27
    2a62:	d40d      	bmi.n	2a80 <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    2a64:	07eb      	lsls	r3, r5, #31
    2a66:	d413      	bmi.n	2a90 <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    2a68:	07ad      	lsls	r5, r5, #30
    2a6a:	d414      	bmi.n	2a96 <usb_handle_function+0x56>
void usb_handle_function() {
    2a6c:	2301      	movs	r3, #1
    2a6e:	e016      	b.n	2a9e <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    2a70:	4b19      	ldr	r3, [pc, #100]	; (2ad8 <usb_handle_function+0x98>)
    2a72:	2208      	movs	r2, #8
    2a74:	839a      	strh	r2, [r3, #28]
		usb_reset();
    2a76:	4b19      	ldr	r3, [pc, #100]	; (2adc <usb_handle_function+0x9c>)
    2a78:	4798      	blx	r3
		usb_cb_reset();
    2a7a:	4b19      	ldr	r3, [pc, #100]	; (2ae0 <usb_handle_function+0xa0>)
    2a7c:	4798      	blx	r3
		goto usb_handle_function_end;
    2a7e:	e026      	b.n	2ace <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    2a80:	4818      	ldr	r0, [pc, #96]	; (2ae4 <usb_handle_function+0xa4>)
    2a82:	4919      	ldr	r1, [pc, #100]	; (2ae8 <usb_handle_function+0xa8>)
    2a84:	3aff      	subs	r2, #255	; 0xff
    2a86:	4b19      	ldr	r3, [pc, #100]	; (2aec <usb_handle_function+0xac>)
    2a88:	4798      	blx	r3
			usb_handle_setup();
    2a8a:	4b19      	ldr	r3, [pc, #100]	; (2af0 <usb_handle_function+0xb0>)
    2a8c:	4798      	blx	r3
    2a8e:	e7e9      	b.n	2a64 <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    2a90:	4b18      	ldr	r3, [pc, #96]	; (2af4 <usb_handle_function+0xb4>)
    2a92:	4798      	blx	r3
    2a94:	e7e8      	b.n	2a68 <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    2a96:	4b18      	ldr	r3, [pc, #96]	; (2af8 <usb_handle_function+0xb8>)
    2a98:	4798      	blx	r3
    2a9a:	e7e7      	b.n	2a6c <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    2a9c:	3301      	adds	r3, #1
    2a9e:	4a17      	ldr	r2, [pc, #92]	; (2afc <usb_handle_function+0xbc>)
    2aa0:	7812      	ldrb	r2, [r2, #0]
    2aa2:	429a      	cmp	r2, r3
    2aa4:	dd11      	ble.n	2aca <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    2aa6:	2201      	movs	r2, #1
    2aa8:	409a      	lsls	r2, r3
    2aaa:	4214      	tst	r4, r2
    2aac:	d0f6      	beq.n	2a9c <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    2aae:	001a      	movs	r2, r3
    2ab0:	3208      	adds	r2, #8
    2ab2:	0152      	lsls	r2, r2, #5
    2ab4:	4908      	ldr	r1, [pc, #32]	; (2ad8 <usb_handle_function+0x98>)
    2ab6:	468c      	mov	ip, r1
    2ab8:	4462      	add	r2, ip
    2aba:	79d1      	ldrb	r1, [r2, #7]
    2abc:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    2abe:	015a      	lsls	r2, r3, #5
    2ac0:	480f      	ldr	r0, [pc, #60]	; (2b00 <usb_handle_function+0xc0>)
    2ac2:	4684      	mov	ip, r0
    2ac4:	4462      	add	r2, ip
    2ac6:	7011      	strb	r1, [r2, #0]
    2ac8:	e7e8      	b.n	2a9c <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    2aca:	4b0e      	ldr	r3, [pc, #56]	; (2b04 <usb_handle_function+0xc4>)
    2acc:	4798      	blx	r3
    2ace:	4b0e      	ldr	r3, [pc, #56]	; (2b08 <usb_handle_function+0xc8>)
    2ad0:	2280      	movs	r2, #128	; 0x80
    2ad2:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    2ad4:	bd70      	pop	{r4, r5, r6, pc}
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	41005000 	.word	0x41005000
    2adc:	00002625 	.word	0x00002625
    2ae0:	00002c49 	.word	0x00002c49
    2ae4:	200004d8 	.word	0x200004d8
    2ae8:	200004e4 	.word	0x200004e4
    2aec:	00005375 	.word	0x00005375
    2af0:	0000243d 	.word	0x0000243d
    2af4:	00002579 	.word	0x00002579
    2af8:	00002599 	.word	0x00002599
    2afc:	00005886 	.word	0x00005886
    2b00:	41005108 	.word	0x41005108
    2b04:	00002d19 	.word	0x00002d19
    2b08:	e000e100 	.word	0xe000e100

00002b0c <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    2b0c:	b510      	push	{r4, lr}
    2b0e:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    2b10:	2000      	movs	r0, #0
    2b12:	e01c      	b.n	2b4e <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    2b14:	0082      	lsls	r2, r0, #2
    2b16:	1812      	adds	r2, r2, r0
    2b18:	17d4      	asrs	r4, r2, #31
    2b1a:	2307      	movs	r3, #7
    2b1c:	0019      	movs	r1, r3
    2b1e:	4021      	ands	r1, r4
    2b20:	1889      	adds	r1, r1, r2
    2b22:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    2b24:	0f64      	lsrs	r4, r4, #29
    2b26:	1912      	adds	r2, r2, r4
    2b28:	4013      	ands	r3, r2
    2b2a:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    2b2c:	4a0c      	ldr	r2, [pc, #48]	; (2b60 <samd_serial_number_string_descriptor+0x54>)
    2b2e:	5c8a      	ldrb	r2, [r1, r2]
    2b30:	411a      	asrs	r2, r3
    2b32:	4c0c      	ldr	r4, [pc, #48]	; (2b64 <samd_serial_number_string_descriptor+0x58>)
    2b34:	5d09      	ldrb	r1, [r1, r4]
    2b36:	2408      	movs	r4, #8
    2b38:	1ae3      	subs	r3, r4, r3
    2b3a:	4099      	lsls	r1, r3
    2b3c:	000b      	movs	r3, r1
    2b3e:	4313      	orrs	r3, r2
    2b40:	221f      	movs	r2, #31
    2b42:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    2b44:	4a08      	ldr	r2, [pc, #32]	; (2b68 <samd_serial_number_string_descriptor+0x5c>)
    2b46:	5cd2      	ldrb	r2, [r2, r3]
    2b48:	ab01      	add	r3, sp, #4
    2b4a:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    2b4c:	3001      	adds	r0, #1
    2b4e:	2819      	cmp	r0, #25
    2b50:	dde0      	ble.n	2b14 <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    2b52:	a801      	add	r0, sp, #4
    2b54:	2300      	movs	r3, #0
    2b56:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    2b58:	4b04      	ldr	r3, [pc, #16]	; (2b6c <samd_serial_number_string_descriptor+0x60>)
    2b5a:	4798      	blx	r3
}
    2b5c:	b008      	add	sp, #32
    2b5e:	bd10      	pop	{r4, pc}
    2b60:	0080a00c 	.word	0x0080a00c
    2b64:	0080a00d 	.word	0x0080a00d
    2b68:	00005834 	.word	0x00005834
    2b6c:	000025e5 	.word	0x000025e5

00002b70 <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    2b70:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    2b72:	2208      	movs	r2, #8
    2b74:	2103      	movs	r1, #3
    2b76:	2081      	movs	r0, #129	; 0x81
    2b78:	4c09      	ldr	r4, [pc, #36]	; (2ba0 <usb_serial_init+0x30>)
    2b7a:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2b7c:	2220      	movs	r2, #32
    2b7e:	2102      	movs	r1, #2
    2b80:	2002      	movs	r0, #2
    2b82:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2b84:	2220      	movs	r2, #32
    2b86:	2102      	movs	r1, #2
    2b88:	2082      	movs	r0, #130	; 0x82
    2b8a:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2b8c:	4c05      	ldr	r4, [pc, #20]	; (2ba4 <usb_serial_init+0x34>)
    2b8e:	2220      	movs	r2, #32
    2b90:	0021      	movs	r1, r4
    2b92:	2002      	movs	r0, #2
    2b94:	4b04      	ldr	r3, [pc, #16]	; (2ba8 <usb_serial_init+0x38>)
    2b96:	4798      	blx	r3
	
	usb_tx_busy = false;
    2b98:	2320      	movs	r3, #32
    2b9a:	2200      	movs	r2, #0
    2b9c:	54e2      	strb	r2, [r4, r3]
}
    2b9e:	bd10      	pop	{r4, pc}
    2ba0:	00002759 	.word	0x00002759
    2ba4:	20000524 	.word	0x20000524
    2ba8:	00002899 	.word	0x00002899

00002bac <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    2bac:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    2bae:	2002      	movs	r0, #2
    2bb0:	4b02      	ldr	r3, [pc, #8]	; (2bbc <usb_serial_out_completion+0x10>)
    2bb2:	4798      	blx	r3
    2bb4:	4b02      	ldr	r3, [pc, #8]	; (2bc0 <usb_serial_out_completion+0x14>)
    2bb6:	6258      	str	r0, [r3, #36]	; 0x24
}
    2bb8:	bd10      	pop	{r4, pc}
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	000029d1 	.word	0x000029d1
    2bc0:	20000524 	.word	0x20000524

00002bc4 <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    2bc4:	4b02      	ldr	r3, [pc, #8]	; (2bd0 <usb_serial_in_completion+0xc>)
    2bc6:	2220      	movs	r2, #32
    2bc8:	2100      	movs	r1, #0
    2bca:	5499      	strb	r1, [r3, r2]
}
    2bcc:	4770      	bx	lr
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	20000524 	.word	0x20000524

00002bd4 <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    2bd4:	b570      	push	{r4, r5, r6, lr}
    2bd6:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    2bd8:	2920      	cmp	r1, #32
    2bda:	dd00      	ble.n	2bde <usb_serial_send_buffer+0xa>
    2bdc:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    2bde:	4d09      	ldr	r5, [pc, #36]	; (2c04 <usb_serial_send_buffer+0x30>)
    2be0:	002e      	movs	r6, r5
    2be2:	3628      	adds	r6, #40	; 0x28
    2be4:	0022      	movs	r2, r4
    2be6:	0001      	movs	r1, r0
    2be8:	0030      	movs	r0, r6
    2bea:	4b07      	ldr	r3, [pc, #28]	; (2c08 <usb_serial_send_buffer+0x34>)
    2bec:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    2bee:	2300      	movs	r3, #0
    2bf0:	0022      	movs	r2, r4
    2bf2:	0031      	movs	r1, r6
    2bf4:	2082      	movs	r0, #130	; 0x82
    2bf6:	4e05      	ldr	r6, [pc, #20]	; (2c0c <usb_serial_send_buffer+0x38>)
    2bf8:	47b0      	blx	r6
	usb_tx_busy = true;
    2bfa:	2320      	movs	r3, #32
    2bfc:	2201      	movs	r2, #1
    2bfe:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    2c00:	0020      	movs	r0, r4
    2c02:	bd70      	pop	{r4, r5, r6, pc}
    2c04:	20000524 	.word	0x20000524
    2c08:	00005375 	.word	0x00005375
    2c0c:	000028f9 	.word	0x000028f9

00002c10 <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    2c10:	b570      	push	{r4, r5, r6, lr}
    2c12:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    2c14:	4b09      	ldr	r3, [pc, #36]	; (2c3c <usb_serial_read_buffer+0x2c>)
    2c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c18:	4299      	cmp	r1, r3
    2c1a:	d901      	bls.n	2c20 <usb_serial_read_buffer+0x10>
    2c1c:	4b07      	ldr	r3, [pc, #28]	; (2c3c <usb_serial_read_buffer+0x2c>)
    2c1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    2c20:	4d06      	ldr	r5, [pc, #24]	; (2c3c <usb_serial_read_buffer+0x2c>)
    2c22:	0022      	movs	r2, r4
    2c24:	0029      	movs	r1, r5
    2c26:	4b06      	ldr	r3, [pc, #24]	; (2c40 <usb_serial_read_buffer+0x30>)
    2c28:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2c2a:	2220      	movs	r2, #32
    2c2c:	0029      	movs	r1, r5
    2c2e:	2002      	movs	r0, #2
    2c30:	4b04      	ldr	r3, [pc, #16]	; (2c44 <usb_serial_read_buffer+0x34>)
    2c32:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    2c34:	2300      	movs	r3, #0
    2c36:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    2c38:	0020      	movs	r0, r4
    2c3a:	bd70      	pop	{r4, r5, r6, pc}
    2c3c:	20000524 	.word	0x20000524
    2c40:	00005375 	.word	0x00005375
    2c44:	00002899 	.word	0x00002899

00002c48 <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    2c48:	4770      	bx	lr
	...

00002c4c <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    2c4c:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    2c4e:	4b2a      	ldr	r3, [pc, #168]	; (2cf8 <usb_cb_control_setup+0xac>)
    2c50:	781a      	ldrb	r2, [r3, #0]
    2c52:	2360      	movs	r3, #96	; 0x60
    2c54:	4013      	ands	r3, r2
    2c56:	2b20      	cmp	r3, #32
    2c58:	d000      	beq.n	2c5c <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    2c5a:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    2c5c:	4b26      	ldr	r3, [pc, #152]	; (2cf8 <usb_cb_control_setup+0xac>)
    2c5e:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    2c60:	231f      	movs	r3, #31
    2c62:	4013      	ands	r3, r2
    2c64:	2b01      	cmp	r3, #1
    2c66:	d144      	bne.n	2cf2 <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    2c68:	2900      	cmp	r1, #0
    2c6a:	d1f6      	bne.n	2c5a <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    2c6c:	4b22      	ldr	r3, [pc, #136]	; (2cf8 <usb_cb_control_setup+0xac>)
    2c6e:	785b      	ldrb	r3, [r3, #1]
    2c70:	2b22      	cmp	r3, #34	; 0x22
    2c72:	d031      	beq.n	2cd8 <usb_cb_control_setup+0x8c>
    2c74:	d80c      	bhi.n	2c90 <usb_cb_control_setup+0x44>
    2c76:	2b20      	cmp	r3, #32
    2c78:	d026      	beq.n	2cc8 <usb_cb_control_setup+0x7c>
    2c7a:	2b21      	cmp	r3, #33	; 0x21
    2c7c:	d136      	bne.n	2cec <usb_cb_control_setup+0xa0>
    2c7e:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2c80:	2b06      	cmp	r3, #6
    2c82:	d823      	bhi.n	2ccc <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    2c84:	4a1d      	ldr	r2, [pc, #116]	; (2cfc <usb_cb_control_setup+0xb0>)
    2c86:	5cd1      	ldrb	r1, [r2, r3]
    2c88:	4a1d      	ldr	r2, [pc, #116]	; (2d00 <usb_cb_control_setup+0xb4>)
    2c8a:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2c8c:	3301      	adds	r3, #1
    2c8e:	e7f7      	b.n	2c80 <usb_cb_control_setup+0x34>
    2c90:	2b23      	cmp	r3, #35	; 0x23
    2c92:	d12b      	bne.n	2cec <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    2c94:	2000      	movs	r0, #0
    2c96:	4b1b      	ldr	r3, [pc, #108]	; (2d04 <usb_cb_control_setup+0xb8>)
    2c98:	4798      	blx	r3
					usb_ep0_out();
    2c9a:	4b1b      	ldr	r3, [pc, #108]	; (2d08 <usb_cb_control_setup+0xbc>)
    2c9c:	4798      	blx	r3
					break;
    2c9e:	e7dc      	b.n	2c5a <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    2ca0:	4b16      	ldr	r3, [pc, #88]	; (2cfc <usb_cb_control_setup+0xb0>)
    2ca2:	491a      	ldr	r1, [pc, #104]	; (2d0c <usb_cb_control_setup+0xc0>)
    2ca4:	5c89      	ldrb	r1, [r1, r2]
    2ca6:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    2ca8:	3201      	adds	r2, #1
    2caa:	4b13      	ldr	r3, [pc, #76]	; (2cf8 <usb_cb_control_setup+0xac>)
    2cac:	7999      	ldrb	r1, [r3, #6]
    2cae:	79db      	ldrb	r3, [r3, #7]
    2cb0:	021b      	lsls	r3, r3, #8
    2cb2:	430b      	orrs	r3, r1
    2cb4:	4293      	cmp	r3, r2
    2cb6:	dd01      	ble.n	2cbc <usb_cb_control_setup+0x70>
    2cb8:	2a06      	cmp	r2, #6
    2cba:	d9f1      	bls.n	2ca0 <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    2cbc:	2000      	movs	r0, #0
    2cbe:	4b11      	ldr	r3, [pc, #68]	; (2d04 <usb_cb_control_setup+0xb8>)
    2cc0:	4798      	blx	r3
					usb_ep0_out();
    2cc2:	4b11      	ldr	r3, [pc, #68]	; (2d08 <usb_cb_control_setup+0xbc>)
    2cc4:	4798      	blx	r3
					break;
    2cc6:	e7c8      	b.n	2c5a <usb_cb_control_setup+0xe>
    2cc8:	2200      	movs	r2, #0
    2cca:	e7ee      	b.n	2caa <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    2ccc:	2007      	movs	r0, #7
    2cce:	4b0d      	ldr	r3, [pc, #52]	; (2d04 <usb_cb_control_setup+0xb8>)
    2cd0:	4798      	blx	r3
					usb_ep0_out();
    2cd2:	4b0d      	ldr	r3, [pc, #52]	; (2d08 <usb_cb_control_setup+0xbc>)
    2cd4:	4798      	blx	r3
					break;
    2cd6:	e7c0      	b.n	2c5a <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    2cd8:	4b07      	ldr	r3, [pc, #28]	; (2cf8 <usb_cb_control_setup+0xac>)
    2cda:	789a      	ldrb	r2, [r3, #2]
    2cdc:	4b0c      	ldr	r3, [pc, #48]	; (2d10 <usb_cb_control_setup+0xc4>)
    2cde:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    2ce0:	2000      	movs	r0, #0
    2ce2:	4b08      	ldr	r3, [pc, #32]	; (2d04 <usb_cb_control_setup+0xb8>)
    2ce4:	4798      	blx	r3
					usb_ep0_out();
    2ce6:	4b08      	ldr	r3, [pc, #32]	; (2d08 <usb_cb_control_setup+0xbc>)
    2ce8:	4798      	blx	r3
					break;
    2cea:	e7b6      	b.n	2c5a <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    2cec:	4b09      	ldr	r3, [pc, #36]	; (2d14 <usb_cb_control_setup+0xc8>)
    2cee:	4798      	blx	r3
					break;
    2cf0:	e7b3      	b.n	2c5a <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    2cf2:	4b08      	ldr	r3, [pc, #32]	; (2d14 <usb_cb_control_setup+0xc8>)
    2cf4:	4798      	blx	r3
}
    2cf6:	e7b0      	b.n	2c5a <usb_cb_control_setup+0xe>
    2cf8:	200004d8 	.word	0x200004d8
    2cfc:	20000048 	.word	0x20000048
    2d00:	20000494 	.word	0x20000494
    2d04:	00002a19 	.word	0x00002a19
    2d08:	00002a01 	.word	0x00002a01
    2d0c:	200004e4 	.word	0x200004e4
    2d10:	2000056c 	.word	0x2000056c
    2d14:	00002a31 	.word	0x00002a31

00002d18 <usb_cb_completion>:

void usb_cb_completion(void) {
    2d18:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    2d1a:	2002      	movs	r0, #2
    2d1c:	4b0a      	ldr	r3, [pc, #40]	; (2d48 <usb_cb_completion+0x30>)
    2d1e:	4798      	blx	r3
    2d20:	2800      	cmp	r0, #0
    2d22:	d105      	bne.n	2d30 <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    2d24:	2082      	movs	r0, #130	; 0x82
    2d26:	4b08      	ldr	r3, [pc, #32]	; (2d48 <usb_cb_completion+0x30>)
    2d28:	4798      	blx	r3
    2d2a:	2800      	cmp	r0, #0
    2d2c:	d106      	bne.n	2d3c <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    2d2e:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    2d30:	2002      	movs	r0, #2
    2d32:	4b06      	ldr	r3, [pc, #24]	; (2d4c <usb_cb_completion+0x34>)
    2d34:	4798      	blx	r3
		usb_serial_out_completion();
    2d36:	4b06      	ldr	r3, [pc, #24]	; (2d50 <usb_cb_completion+0x38>)
    2d38:	4798      	blx	r3
    2d3a:	e7f3      	b.n	2d24 <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    2d3c:	2082      	movs	r0, #130	; 0x82
    2d3e:	4b03      	ldr	r3, [pc, #12]	; (2d4c <usb_cb_completion+0x34>)
    2d40:	4798      	blx	r3
		usb_serial_in_completion();
    2d42:	4b04      	ldr	r3, [pc, #16]	; (2d54 <usb_cb_completion+0x3c>)
    2d44:	4798      	blx	r3
}
    2d46:	e7f2      	b.n	2d2e <usb_cb_completion+0x16>
    2d48:	00002965 	.word	0x00002965
    2d4c:	0000299d 	.word	0x0000299d
    2d50:	00002bad 	.word	0x00002bad
    2d54:	00002bc5 	.word	0x00002bc5

00002d58 <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    2d58:	4770      	bx	lr

00002d5a <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    2d5a:	4770      	bx	lr

00002d5c <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    2d5c:	b510      	push	{r4, lr}
	if (config <= 1) {
    2d5e:	2801      	cmp	r0, #1
    2d60:	d901      	bls.n	2d66 <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    2d62:	2000      	movs	r0, #0
}
    2d64:	bd10      	pop	{r4, pc}
		usb_serial_init();
    2d66:	4b02      	ldr	r3, [pc, #8]	; (2d70 <usb_cb_set_configuration+0x14>)
    2d68:	4798      	blx	r3
		return true;
    2d6a:	2001      	movs	r0, #1
    2d6c:	e7fa      	b.n	2d64 <usb_cb_set_configuration+0x8>
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	00002b71 	.word	0x00002b71

00002d74 <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    2d74:	2800      	cmp	r0, #0
    2d76:	d003      	beq.n	2d80 <usb_cb_set_interface+0xc>
    2d78:	2801      	cmp	r0, #1
    2d7a:	d005      	beq.n	2d88 <usb_cb_set_interface+0x14>
    2d7c:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    2d7e:	4770      	bx	lr
		if (altsetting == 0) return true;
    2d80:	2900      	cmp	r1, #0
    2d82:	d005      	beq.n	2d90 <usb_cb_set_interface+0x1c>
	return false;
    2d84:	2000      	movs	r0, #0
    2d86:	e7fa      	b.n	2d7e <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2d88:	2900      	cmp	r1, #0
    2d8a:	d003      	beq.n	2d94 <usb_cb_set_interface+0x20>
	return false;
    2d8c:	2000      	movs	r0, #0
    2d8e:	e7f6      	b.n	2d7e <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2d90:	2001      	movs	r0, #1
    2d92:	e7f4      	b.n	2d7e <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2d94:	2001      	movs	r0, #1
    2d96:	e7f2      	b.n	2d7e <usb_cb_set_interface+0xa>

00002d98 <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    2d98:	b510      	push	{r4, lr}
    2d9a:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    2d9c:	2802      	cmp	r0, #2
    2d9e:	d028      	beq.n	2df2 <usb_cb_get_descriptor+0x5a>
    2da0:	2803      	cmp	r0, #3
    2da2:	d008      	beq.n	2db6 <usb_cb_get_descriptor+0x1e>
    2da4:	2801      	cmp	r0, #1
    2da6:	d003      	beq.n	2db0 <usb_cb_get_descriptor+0x18>
    2da8:	2000      	movs	r0, #0
    2daa:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    2dac:	6023      	str	r3, [r4, #0]
	return size;
    2dae:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    2db0:	3011      	adds	r0, #17
		address = &device_descriptor;
    2db2:	4b11      	ldr	r3, [pc, #68]	; (2df8 <usb_cb_get_descriptor+0x60>)
    2db4:	e7fa      	b.n	2dac <usb_cb_get_descriptor+0x14>
		switch (index) {
    2db6:	2902      	cmp	r1, #2
    2db8:	d00f      	beq.n	2dda <usb_cb_get_descriptor+0x42>
    2dba:	d808      	bhi.n	2dce <usb_cb_get_descriptor+0x36>
    2dbc:	2900      	cmp	r1, #0
    2dbe:	d015      	beq.n	2dec <usb_cb_get_descriptor+0x54>
    2dc0:	2901      	cmp	r1, #1
    2dc2:	d10f      	bne.n	2de4 <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    2dc4:	480d      	ldr	r0, [pc, #52]	; (2dfc <usb_cb_get_descriptor+0x64>)
    2dc6:	4b0e      	ldr	r3, [pc, #56]	; (2e00 <usb_cb_get_descriptor+0x68>)
    2dc8:	4798      	blx	r3
    2dca:	0003      	movs	r3, r0
			break;
    2dcc:	e00f      	b.n	2dee <usb_cb_get_descriptor+0x56>
    2dce:	2903      	cmp	r1, #3
    2dd0:	d108      	bne.n	2de4 <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    2dd2:	4b0c      	ldr	r3, [pc, #48]	; (2e04 <usb_cb_get_descriptor+0x6c>)
    2dd4:	4798      	blx	r3
    2dd6:	0003      	movs	r3, r0
			break;
    2dd8:	e009      	b.n	2dee <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    2dda:	480b      	ldr	r0, [pc, #44]	; (2e08 <usb_cb_get_descriptor+0x70>)
    2ddc:	4b08      	ldr	r3, [pc, #32]	; (2e00 <usb_cb_get_descriptor+0x68>)
    2dde:	4798      	blx	r3
    2de0:	0003      	movs	r3, r0
			break;
    2de2:	e004      	b.n	2dee <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    2de4:	2300      	movs	r3, #0
    2de6:	6023      	str	r3, [r4, #0]
			return 0;
    2de8:	2000      	movs	r0, #0
    2dea:	e7e0      	b.n	2dae <usb_cb_get_descriptor+0x16>
    2dec:	4b07      	ldr	r3, [pc, #28]	; (2e0c <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    2dee:	7818      	ldrb	r0, [r3, #0]
		break;
    2df0:	e7dc      	b.n	2dac <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    2df2:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    2df4:	4b06      	ldr	r3, [pc, #24]	; (2e10 <usb_cb_get_descriptor+0x78>)
    2df6:	e7d9      	b.n	2dac <usb_cb_get_descriptor+0x14>
    2df8:	00005874 	.word	0x00005874
    2dfc:	00005858 	.word	0x00005858
    2e00:	000025e5 	.word	0x000025e5
    2e04:	00002b0d 	.word	0x00002b0d
    2e08:	00005868 	.word	0x00005868
    2e0c:	00005870 	.word	0x00005870
    2e10:	20000050 	.word	0x20000050

00002e14 <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    2e14:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    2e16:	4b07      	ldr	r3, [pc, #28]	; (2e34 <rtos_init+0x20>)
    2e18:	4798      	blx	r3
	#endif
	
	time_init();
    2e1a:	4b07      	ldr	r3, [pc, #28]	; (2e38 <rtos_init+0x24>)
    2e1c:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    2e1e:	2180      	movs	r1, #128	; 0x80
    2e20:	03c9      	lsls	r1, r1, #15
    2e22:	2001      	movs	r0, #1
    2e24:	4b05      	ldr	r3, [pc, #20]	; (2e3c <rtos_init+0x28>)
    2e26:	4798      	blx	r3
	#endif
	
	init_process_queue();
    2e28:	4b05      	ldr	r3, [pc, #20]	; (2e40 <rtos_init+0x2c>)
    2e2a:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    2e2c:	4b05      	ldr	r3, [pc, #20]	; (2e44 <rtos_init+0x30>)
    2e2e:	4798      	blx	r3
	#endif
	
	return true;
}
    2e30:	2001      	movs	r0, #1
    2e32:	bd10      	pop	{r4, pc}
    2e34:	00002165 	.word	0x00002165
    2e38:	00002239 	.word	0x00002239
    2e3c:	00001c49 	.word	0x00001c49
    2e40:	00003035 	.word	0x00003035
    2e44:	000022ad 	.word	0x000022ad

00002e48 <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    2e48:	b570      	push	{r4, r5, r6, lr}
    2e4a:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    2e4c:	e011      	b.n	2e72 <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    2e4e:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    2e50:	2680      	movs	r6, #128	; 0x80
    2e52:	03f6      	lsls	r6, r6, #15
    2e54:	0031      	movs	r1, r6
    2e56:	2001      	movs	r0, #1
    2e58:	4b0c      	ldr	r3, [pc, #48]	; (2e8c <morse+0x44>)
    2e5a:	4798      	blx	r3
		delay_ms(delay);
    2e5c:	480c      	ldr	r0, [pc, #48]	; (2e90 <morse+0x48>)
    2e5e:	4368      	muls	r0, r5
    2e60:	4d0c      	ldr	r5, [pc, #48]	; (2e94 <morse+0x4c>)
    2e62:	47a8      	blx	r5
		led_off();
    2e64:	0031      	movs	r1, r6
    2e66:	2001      	movs	r0, #1
    2e68:	4b0b      	ldr	r3, [pc, #44]	; (2e98 <morse+0x50>)
    2e6a:	4798      	blx	r3
		delay_ms(100);
    2e6c:	480b      	ldr	r0, [pc, #44]	; (2e9c <morse+0x54>)
    2e6e:	47a8      	blx	r5
		++c;
    2e70:	3401      	adds	r4, #1
	while (*c != '\0') {
    2e72:	7823      	ldrb	r3, [r4, #0]
    2e74:	2b00      	cmp	r3, #0
    2e76:	d007      	beq.n	2e88 <morse+0x40>
		if (*c == '.') delay = 100;
    2e78:	2b2e      	cmp	r3, #46	; 0x2e
    2e7a:	d0e8      	beq.n	2e4e <morse+0x6>
		else if (*c == '-') delay = 200;
    2e7c:	2b2d      	cmp	r3, #45	; 0x2d
    2e7e:	d001      	beq.n	2e84 <morse+0x3c>
		int delay = 0;
    2e80:	2500      	movs	r5, #0
    2e82:	e7e5      	b.n	2e50 <morse+0x8>
		else if (*c == '-') delay = 200;
    2e84:	25c8      	movs	r5, #200	; 0xc8
    2e86:	e7e3      	b.n	2e50 <morse+0x8>
	}
}
    2e88:	bd70      	pop	{r4, r5, r6, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	00001c59 	.word	0x00001c59
    2e90:	00001770 	.word	0x00001770
    2e94:	00002229 	.word	0x00002229
    2e98:	00001c69 	.word	0x00001c69
    2e9c:	000927c0 	.word	0x000927c0

00002ea0 <SOS>:

void SOS() {
    2ea0:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2ea2:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    2ea4:	4803      	ldr	r0, [pc, #12]	; (2eb4 <SOS+0x14>)
    2ea6:	4b04      	ldr	r3, [pc, #16]	; (2eb8 <SOS+0x18>)
    2ea8:	4798      	blx	r3
		delay_ms(600);
    2eaa:	4804      	ldr	r0, [pc, #16]	; (2ebc <SOS+0x1c>)
    2eac:	4b04      	ldr	r3, [pc, #16]	; (2ec0 <SOS+0x20>)
    2eae:	4798      	blx	r3
	while(1) {
    2eb0:	e7f8      	b.n	2ea4 <SOS+0x4>
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	00005888 	.word	0x00005888
    2eb8:	00002e49 	.word	0x00002e49
    2ebc:	0036ee80 	.word	0x0036ee80
    2ec0:	00002229 	.word	0x00002229

00002ec4 <rtos_main>:
int rtos_main(void) {
    2ec4:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    2ec6:	4b13      	ldr	r3, [pc, #76]	; (2f14 <rtos_main+0x50>)
    2ec8:	4798      	blx	r3
	mainproc = &_mainproc;
    2eca:	4c13      	ldr	r4, [pc, #76]	; (2f18 <rtos_main+0x54>)
    2ecc:	1d20      	adds	r0, r4, #4
    2ece:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    2ed0:	2380      	movs	r3, #128	; 0x80
    2ed2:	22c0      	movs	r2, #192	; 0xc0
    2ed4:	4911      	ldr	r1, [pc, #68]	; (2f1c <rtos_main+0x58>)
    2ed6:	00db      	lsls	r3, r3, #3
    2ed8:	0092      	lsls	r2, r2, #2
    2eda:	4d11      	ldr	r5, [pc, #68]	; (2f20 <rtos_main+0x5c>)
    2edc:	47a8      	blx	r5
	dispatch_process(mainproc);
    2ede:	6820      	ldr	r0, [r4, #0]
    2ee0:	4b10      	ldr	r3, [pc, #64]	; (2f24 <rtos_main+0x60>)
    2ee2:	4798      	blx	r3
	while (process_count) {
    2ee4:	e001      	b.n	2eea <rtos_main+0x26>
		dispatch_process(lastproc);
    2ee6:	4b0f      	ldr	r3, [pc, #60]	; (2f24 <rtos_main+0x60>)
    2ee8:	4798      	blx	r3
	while (process_count) {
    2eea:	4b0f      	ldr	r3, [pc, #60]	; (2f28 <rtos_main+0x64>)
    2eec:	681b      	ldr	r3, [r3, #0]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d003      	beq.n	2efa <rtos_main+0x36>
		if (!(lastproc = next_process())) break;
    2ef2:	4b0e      	ldr	r3, [pc, #56]	; (2f2c <rtos_main+0x68>)
    2ef4:	4798      	blx	r3
    2ef6:	2800      	cmp	r0, #0
    2ef8:	d1f5      	bne.n	2ee6 <rtos_main+0x22>
	if (process_count) SOS();
    2efa:	4b0b      	ldr	r3, [pc, #44]	; (2f28 <rtos_main+0x64>)
    2efc:	681b      	ldr	r3, [r3, #0]
    2efe:	2b00      	cmp	r3, #0
    2f00:	d106      	bne.n	2f10 <rtos_main+0x4c>
	led_on();
    2f02:	2180      	movs	r1, #128	; 0x80
    2f04:	03c9      	lsls	r1, r1, #15
    2f06:	2001      	movs	r0, #1
    2f08:	4b09      	ldr	r3, [pc, #36]	; (2f30 <rtos_main+0x6c>)
    2f0a:	4798      	blx	r3
}
    2f0c:	2000      	movs	r0, #0
    2f0e:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    2f10:	4b08      	ldr	r3, [pc, #32]	; (2f34 <rtos_main+0x70>)
    2f12:	4798      	blx	r3
    2f14:	00002e15 	.word	0x00002e15
    2f18:	200005f0 	.word	0x200005f0
    2f1c:	000010f1 	.word	0x000010f1
    2f20:	00002f61 	.word	0x00002f61
    2f24:	00003049 	.word	0x00003049
    2f28:	20000628 	.word	0x20000628
    2f2c:	000030fd 	.word	0x000030fd
    2f30:	00001c59 	.word	0x00001c59
    2f34:	00002ea1 	.word	0x00002ea1

00002f38 <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    2f38:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    2f3a:	4b05      	ldr	r3, [pc, #20]	; (2f50 <TC4_Handler+0x18>)
    2f3c:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    2f3e:	4b05      	ldr	r3, [pc, #20]	; (2f54 <TC4_Handler+0x1c>)
    2f40:	681c      	ldr	r4, [r3, #0]
    2f42:	4b05      	ldr	r3, [pc, #20]	; (2f58 <TC4_Handler+0x20>)
    2f44:	4798      	blx	r3
    2f46:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    2f48:	2001      	movs	r0, #1
    2f4a:	4b04      	ldr	r3, [pc, #16]	; (2f5c <TC4_Handler+0x24>)
    2f4c:	4798      	blx	r3
}
    2f4e:	bd10      	pop	{r4, pc}
    2f50:	000022ed 	.word	0x000022ed
    2f54:	2000061c 	.word	0x2000061c
    2f58:	000022a1 	.word	0x000022a1
    2f5c:	0000326d 	.word	0x0000326d

00002f60 <init_process>:
Process* current_process;

//uint32_t process_pc;


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    2f60:	b510      	push	{r4, lr}
    2f62:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    2f64:	4807      	ldr	r0, [pc, #28]	; (2f84 <init_process+0x24>)
    2f66:	1a82      	subs	r2, r0, r2
    2f68:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    2f6a:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    2f6c:	1e4b      	subs	r3, r1, #1
    2f6e:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    2f70:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    2f72:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    2f74:	4b04      	ldr	r3, [pc, #16]	; (2f88 <init_process+0x28>)
    2f76:	4798      	blx	r3
    2f78:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    2f7a:	2300      	movs	r3, #0
    2f7c:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    2f7e:	2224      	movs	r2, #36	; 0x24
    2f80:	54a3      	strb	r3, [r4, r2]
	#endif
}
    2f82:	bd10      	pop	{r4, pc}
    2f84:	20002870 	.word	0x20002870
    2f88:	000022a1 	.word	0x000022a1

00002f8c <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8e:	465f      	mov	r7, fp
    2f90:	4656      	mov	r6, sl
    2f92:	464d      	mov	r5, r9
    2f94:	4644      	mov	r4, r8
    2f96:	b4f0      	push	{r4, r5, r6, r7}
    2f98:	b083      	sub	sp, #12
    2f9a:	9001      	str	r0, [sp, #4]
    2f9c:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    2f9e:	2324      	movs	r3, #36	; 0x24
    2fa0:	5cc3      	ldrb	r3, [r0, r3]
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d124      	bne.n	2ff0 <switch_process+0x64>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    2fa6:	4b1c      	ldr	r3, [pc, #112]	; (3018 <switch_process+0x8c>)
    2fa8:	9a01      	ldr	r2, [sp, #4]
    2faa:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    2fac:	2303      	movs	r3, #3
    2fae:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    2fb0:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2fb2:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2fb6:	2302      	movs	r3, #2
    2fb8:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2fbc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2fc0:	b662      	cpsie	i
	USE_PSP();
	
	__enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    2fc2:	9201      	str	r2, [sp, #4]
    2fc4:	6813      	ldr	r3, [r2, #0]
    2fc6:	3301      	adds	r3, #1
    2fc8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2fca:	b672      	cpsid	i
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2fcc:	2300      	movs	r3, #0
    2fce:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2fd2:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    2fd6:	3324      	adds	r3, #36	; 0x24
    2fd8:	9a01      	ldr	r2, [sp, #4]
    2fda:	5cd3      	ldrb	r3, [r2, r3]
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d118      	bne.n	3012 <switch_process+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
    2fe0:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    2fe2:	b003      	add	sp, #12
    2fe4:	bcf0      	pop	{r4, r5, r6, r7}
    2fe6:	46bb      	mov	fp, r7
    2fe8:	46b2      	mov	sl, r6
    2fea:	46a9      	mov	r9, r5
    2fec:	46a0      	mov	r8, r4
    2fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    2ff0:	4b0a      	ldr	r3, [pc, #40]	; (301c <switch_process+0x90>)
    2ff2:	4798      	blx	r3
    2ff4:	4b0a      	ldr	r3, [pc, #40]	; (3020 <switch_process+0x94>)
    2ff6:	681a      	ldr	r2, [r3, #0]
    2ff8:	0153      	lsls	r3, r2, #5
    2ffa:	1a9b      	subs	r3, r3, r2
    2ffc:	009b      	lsls	r3, r3, #2
    2ffe:	189b      	adds	r3, r3, r2
    3000:	00db      	lsls	r3, r3, #3
    3002:	18c0      	adds	r0, r0, r3
    3004:	4b07      	ldr	r3, [pc, #28]	; (3024 <switch_process+0x98>)
    3006:	4798      	blx	r3
		preempt_clear_interrupts();
    3008:	4b07      	ldr	r3, [pc, #28]	; (3028 <switch_process+0x9c>)
    300a:	4798      	blx	r3
		preempt_enable_interrupts();
    300c:	4b07      	ldr	r3, [pc, #28]	; (302c <switch_process+0xa0>)
    300e:	4798      	blx	r3
    3010:	e7c9      	b.n	2fa6 <switch_process+0x1a>
		preempt_disable_interrupts();
    3012:	4b07      	ldr	r3, [pc, #28]	; (3030 <switch_process+0xa4>)
    3014:	4798      	blx	r3
    3016:	e7e3      	b.n	2fe0 <switch_process+0x54>
    3018:	2000061c 	.word	0x2000061c
    301c:	000022a1 	.word	0x000022a1
    3020:	000058c4 	.word	0x000058c4
    3024:	00002309 	.word	0x00002309
    3028:	000022ed 	.word	0x000022ed
    302c:	000022c5 	.word	0x000022c5
    3030:	000022d5 	.word	0x000022d5

00003034 <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    3034:	4b03      	ldr	r3, [pc, #12]	; (3044 <init_process_queue+0x10>)
    3036:	2200      	movs	r2, #0
    3038:	605a      	str	r2, [r3, #4]
    303a:	609a      	str	r2, [r3, #8]
	current_process = 0;
    303c:	601a      	str	r2, [r3, #0]
	process_count = 0;
    303e:	60da      	str	r2, [r3, #12]
}
    3040:	4770      	bx	lr
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	2000061c 	.word	0x2000061c

00003048 <dispatch_process>:

bool dispatch_process(Process* process) {
    3048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    304a:	464f      	mov	r7, r9
    304c:	4646      	mov	r6, r8
    304e:	b4c0      	push	{r6, r7}
    3050:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    3052:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    3054:	6983      	ldr	r3, [r0, #24]
    3056:	2b03      	cmp	r3, #3
    3058:	d049      	beq.n	30ee <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    305a:	4b26      	ldr	r3, [pc, #152]	; (30f4 <dispatch_process+0xac>)
    305c:	68db      	ldr	r3, [r3, #12]
    305e:	2b0f      	cmp	r3, #15
    3060:	dd04      	ble.n	306c <dispatch_process+0x24>
    3062:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    3064:	bcc0      	pop	{r6, r7}
    3066:	46b9      	mov	r9, r7
    3068:	46b0      	mov	r8, r6
    306a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    306c:	4b22      	ldr	r3, [pc, #136]	; (30f8 <dispatch_process+0xb0>)
    306e:	4798      	blx	r3
    3070:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    3072:	464b      	mov	r3, r9
    3074:	699b      	ldr	r3, [r3, #24]
    3076:	2b00      	cmp	r3, #0
    3078:	d007      	beq.n	308a <dispatch_process+0x42>
    307a:	464b      	mov	r3, r9
    307c:	695f      	ldr	r7, [r3, #20]
    307e:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    3080:	4b1c      	ldr	r3, [pc, #112]	; (30f4 <dispatch_process+0xac>)
    3082:	685b      	ldr	r3, [r3, #4]
    3084:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    3086:	2500      	movs	r5, #0
    3088:	e00c      	b.n	30a4 <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    308a:	2700      	movs	r7, #0
    308c:	e7f8      	b.n	3080 <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    308e:	3110      	adds	r1, #16
    3090:	e00e      	b.n	30b0 <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    3092:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    3094:	42ba      	cmp	r2, r7
    3096:	dd16      	ble.n	30c6 <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    3098:	4a16      	ldr	r2, [pc, #88]	; (30f4 <dispatch_process+0xac>)
    309a:	009e      	lsls	r6, r3, #2
    309c:	1993      	adds	r3, r2, r6
    309e:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    30a0:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    30a2:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    30a4:	4a13      	ldr	r2, [pc, #76]	; (30f4 <dispatch_process+0xac>)
    30a6:	68d6      	ldr	r6, [r2, #12]
    30a8:	42ae      	cmp	r6, r5
    30aa:	dd0c      	ble.n	30c6 <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    30ac:	1e59      	subs	r1, r3, #1
    30ae:	d4ee      	bmi.n	308e <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    30b0:	4a10      	ldr	r2, [pc, #64]	; (30f4 <dispatch_process+0xac>)
    30b2:	0088      	lsls	r0, r1, #2
    30b4:	1812      	adds	r2, r2, r0
    30b6:	6910      	ldr	r0, [r2, #16]
    30b8:	6982      	ldr	r2, [r0, #24]
    30ba:	2a00      	cmp	r2, #0
    30bc:	d0e9      	beq.n	3092 <dispatch_process+0x4a>
    30be:	6942      	ldr	r2, [r0, #20]
    30c0:	4644      	mov	r4, r8
    30c2:	1b12      	subs	r2, r2, r4
    30c4:	e7e6      	b.n	3094 <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    30c6:	4a0b      	ldr	r2, [pc, #44]	; (30f4 <dispatch_process+0xac>)
    30c8:	009b      	lsls	r3, r3, #2
    30ca:	18d3      	adds	r3, r2, r3
    30cc:	4649      	mov	r1, r9
    30ce:	6119      	str	r1, [r3, #16]
	++process_count;
    30d0:	1c73      	adds	r3, r6, #1
    30d2:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    30d4:	4666      	mov	r6, ip
    30d6:	3601      	adds	r6, #1
    30d8:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    30da:	17f1      	asrs	r1, r6, #31
    30dc:	0f09      	lsrs	r1, r1, #28
    30de:	1876      	adds	r6, r6, r1
    30e0:	230f      	movs	r3, #15
    30e2:	4033      	ands	r3, r6
    30e4:	1a5b      	subs	r3, r3, r1
    30e6:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    30e8:	b662      	cpsie	i
	return true;
    30ea:	2001      	movs	r0, #1
    30ec:	e7ba      	b.n	3064 <dispatch_process+0x1c>
		return false;
    30ee:	2000      	movs	r0, #0
    30f0:	e7b8      	b.n	3064 <dispatch_process+0x1c>
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	2000061c 	.word	0x2000061c
    30f8:	000022a1 	.word	0x000022a1

000030fc <next_process>:

Process* next_process() {
    30fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30fe:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    3100:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    3102:	4b57      	ldr	r3, [pc, #348]	; (3260 <next_process+0x164>)
    3104:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    3106:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    3108:	e015      	b.n	3136 <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    310a:	6823      	ldr	r3, [r4, #0]
    310c:	781b      	ldrb	r3, [r3, #0]
    310e:	e03d      	b.n	318c <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    3110:	6823      	ldr	r3, [r4, #0]
    3112:	881b      	ldrh	r3, [r3, #0]
    3114:	e03a      	b.n	318c <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    3116:	6863      	ldr	r3, [r4, #4]
    3118:	42bb      	cmp	r3, r7
    311a:	d041      	beq.n	31a0 <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    311c:	466b      	mov	r3, sp
    311e:	3307      	adds	r3, #7
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	2b00      	cmp	r3, #0
    3124:	d163      	bne.n	31ee <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    3126:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    3128:	17f3      	asrs	r3, r6, #31
    312a:	0f1b      	lsrs	r3, r3, #28
    312c:	18f6      	adds	r6, r6, r3
    312e:	220f      	movs	r2, #15
    3130:	4016      	ands	r6, r2
    3132:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    3134:	3501      	adds	r5, #1
    3136:	4b4a      	ldr	r3, [pc, #296]	; (3260 <next_process+0x164>)
    3138:	68db      	ldr	r3, [r3, #12]
    313a:	42ab      	cmp	r3, r5
    313c:	dd59      	ble.n	31f2 <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    313e:	4b48      	ldr	r3, [pc, #288]	; (3260 <next_process+0x164>)
    3140:	00b2      	lsls	r2, r6, #2
    3142:	189a      	adds	r2, r3, r2
    3144:	6912      	ldr	r2, [r2, #16]
    3146:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    3148:	6993      	ldr	r3, [r2, #24]
    314a:	2b02      	cmp	r3, #2
    314c:	d151      	bne.n	31f2 <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    314e:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    3150:	466b      	mov	r3, sp
    3152:	2200      	movs	r2, #0
    3154:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    3156:	68e3      	ldr	r3, [r4, #12]
    3158:	2b00      	cmp	r3, #0
    315a:	d001      	beq.n	3160 <next_process+0x64>
    315c:	68e3      	ldr	r3, [r4, #12]
    315e:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    3160:	4b3f      	ldr	r3, [pc, #252]	; (3260 <next_process+0x164>)
    3162:	681a      	ldr	r2, [r3, #0]
    3164:	6993      	ldr	r3, [r2, #24]
    3166:	2b01      	cmp	r3, #1
    3168:	d043      	beq.n	31f2 <next_process+0xf6>
			if (data->mask) {
    316a:	68a3      	ldr	r3, [r4, #8]
    316c:	2b00      	cmp	r3, #0
    316e:	d00f      	beq.n	3190 <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    3170:	68a1      	ldr	r1, [r4, #8]
    3172:	23ff      	movs	r3, #255	; 0xff
    3174:	400b      	ands	r3, r1
    3176:	68a1      	ldr	r1, [r4, #8]
    3178:	428b      	cmp	r3, r1
    317a:	d0c6      	beq.n	310a <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    317c:	68a3      	ldr	r3, [r4, #8]
    317e:	041b      	lsls	r3, r3, #16
    3180:	0c1b      	lsrs	r3, r3, #16
    3182:	68a1      	ldr	r1, [r4, #8]
    3184:	428b      	cmp	r3, r1
    3186:	d0c3      	beq.n	3110 <next_process+0x14>
				else variable = *(data->variable);
    3188:	6823      	ldr	r3, [r4, #0]
    318a:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    318c:	68a7      	ldr	r7, [r4, #8]
    318e:	401f      	ands	r7, r3
			switch (data->condition) {
    3190:	7c23      	ldrb	r3, [r4, #16]
    3192:	b2db      	uxtb	r3, r3
    3194:	2b06      	cmp	r3, #6
    3196:	d861      	bhi.n	325c <next_process+0x160>
    3198:	009b      	lsls	r3, r3, #2
    319a:	4932      	ldr	r1, [pc, #200]	; (3264 <next_process+0x168>)
    319c:	58cb      	ldr	r3, [r1, r3]
    319e:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    31a0:	466b      	mov	r3, sp
    31a2:	2101      	movs	r1, #1
    31a4:	71d9      	strb	r1, [r3, #7]
    31a6:	e7b9      	b.n	311c <next_process+0x20>
				if (variable != data->value) unblocked = true;
    31a8:	6863      	ldr	r3, [r4, #4]
    31aa:	42bb      	cmp	r3, r7
    31ac:	d0b6      	beq.n	311c <next_process+0x20>
    31ae:	466b      	mov	r3, sp
    31b0:	2101      	movs	r1, #1
    31b2:	71d9      	strb	r1, [r3, #7]
    31b4:	e7b2      	b.n	311c <next_process+0x20>
				if (variable > data->value) unblocked = true;
    31b6:	6863      	ldr	r3, [r4, #4]
    31b8:	42bb      	cmp	r3, r7
    31ba:	d2af      	bcs.n	311c <next_process+0x20>
    31bc:	466b      	mov	r3, sp
    31be:	2101      	movs	r1, #1
    31c0:	71d9      	strb	r1, [r3, #7]
    31c2:	e7ab      	b.n	311c <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    31c4:	6863      	ldr	r3, [r4, #4]
    31c6:	42bb      	cmp	r3, r7
    31c8:	d8a8      	bhi.n	311c <next_process+0x20>
    31ca:	466b      	mov	r3, sp
    31cc:	2101      	movs	r1, #1
    31ce:	71d9      	strb	r1, [r3, #7]
    31d0:	e7a4      	b.n	311c <next_process+0x20>
				if (variable < data->value) unblocked = true;
    31d2:	6863      	ldr	r3, [r4, #4]
    31d4:	42bb      	cmp	r3, r7
    31d6:	d9a1      	bls.n	311c <next_process+0x20>
    31d8:	466b      	mov	r3, sp
    31da:	2101      	movs	r1, #1
    31dc:	71d9      	strb	r1, [r3, #7]
    31de:	e79d      	b.n	311c <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    31e0:	6863      	ldr	r3, [r4, #4]
    31e2:	42bb      	cmp	r3, r7
    31e4:	d39a      	bcc.n	311c <next_process+0x20>
    31e6:	466b      	mov	r3, sp
    31e8:	2101      	movs	r1, #1
    31ea:	71d9      	strb	r1, [r3, #7]
    31ec:	e796      	b.n	311c <next_process+0x20>
				current_process->status = Process_State_Running;
    31ee:	2301      	movs	r3, #1
    31f0:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    31f2:	4b1b      	ldr	r3, [pc, #108]	; (3260 <next_process+0x164>)
    31f4:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    31f6:	0028      	movs	r0, r5
    31f8:	e015      	b.n	3226 <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    31fa:	4919      	ldr	r1, [pc, #100]	; (3260 <next_process+0x164>)
    31fc:	688e      	ldr	r6, [r1, #8]
    31fe:	1986      	adds	r6, r0, r6
    3200:	1e73      	subs	r3, r6, #1
    3202:	17df      	asrs	r7, r3, #31
    3204:	0f3f      	lsrs	r7, r7, #28
    3206:	19db      	adds	r3, r3, r7
    3208:	220f      	movs	r2, #15
    320a:	4013      	ands	r3, r2
    320c:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    320e:	17f7      	asrs	r7, r6, #31
    3210:	0f3f      	lsrs	r7, r7, #28
    3212:	19f6      	adds	r6, r6, r7
    3214:	4032      	ands	r2, r6
    3216:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    3218:	009b      	lsls	r3, r3, #2
    321a:	18cb      	adds	r3, r1, r3
    321c:	691b      	ldr	r3, [r3, #16]
    321e:	0092      	lsls	r2, r2, #2
    3220:	1889      	adds	r1, r1, r2
    3222:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    3224:	3801      	subs	r0, #1
    3226:	2800      	cmp	r0, #0
    3228:	dce7      	bgt.n	31fa <next_process+0xfe>
	}

	--process_count;
    322a:	490d      	ldr	r1, [pc, #52]	; (3260 <next_process+0x164>)
    322c:	1e63      	subs	r3, r4, #1
    322e:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    3230:	688b      	ldr	r3, [r1, #8]
    3232:	3301      	adds	r3, #1
    3234:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    3236:	17d8      	asrs	r0, r3, #31
    3238:	0f00      	lsrs	r0, r0, #28
    323a:	181b      	adds	r3, r3, r0
    323c:	220f      	movs	r2, #15
    323e:	4013      	ands	r3, r2
    3240:	1a1b      	subs	r3, r3, r0
    3242:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    3244:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    3246:	42ac      	cmp	r4, r5
    3248:	d103      	bne.n	3252 <next_process+0x156>
	
	return current_process;
    324a:	4b05      	ldr	r3, [pc, #20]	; (3260 <next_process+0x164>)
    324c:	6818      	ldr	r0, [r3, #0]
}
    324e:	b003      	add	sp, #12
    3250:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    3252:	4b03      	ldr	r3, [pc, #12]	; (3260 <next_process+0x164>)
    3254:	6818      	ldr	r0, [r3, #0]
    3256:	4b04      	ldr	r3, [pc, #16]	; (3268 <next_process+0x16c>)
    3258:	4798      	blx	r3
    325a:	e7f6      	b.n	324a <next_process+0x14e>
			switch (data->condition) {
    325c:	2000      	movs	r0, #0
    325e:	e7f6      	b.n	324e <next_process+0x152>
    3260:	2000061c 	.word	0x2000061c
    3264:	00005894 	.word	0x00005894
    3268:	00002f8d 	.word	0x00002f8d

0000326c <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    326c:	b5f0      	push	{r4, r5, r6, r7, lr}
    326e:	465f      	mov	r7, fp
    3270:	4656      	mov	r6, sl
    3272:	464d      	mov	r5, r9
    3274:	4644      	mov	r4, r8
    3276:	b4f0      	push	{r4, r5, r6, r7}
    3278:	b083      	sub	sp, #12
    327a:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    327c:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    3280:	2b00      	cmp	r3, #0
    3282:	d01c      	beq.n	32be <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    3284:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    3286:	4b0f      	ldr	r3, [pc, #60]	; (32c4 <yield_process+0x58>)
    3288:	9301      	str	r3, [sp, #4]
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    328e:	2208      	movs	r2, #8
    3290:	4252      	negs	r2, r2
    3292:	446a      	add	r2, sp
    3294:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    3296:	685a      	ldr	r2, [r3, #4]
    3298:	3a04      	subs	r2, #4
    329a:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    329c:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    329e:	3204      	adds	r2, #4
    32a0:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    32a2:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    32a4:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    32a6:	9b01      	ldr	r3, [sp, #4]
    32a8:	681b      	ldr	r3, [r3, #0]
    32aa:	2203      	movs	r2, #3
    32ac:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    32ae:	b662      	cpsie	i
	
	__enable_irq();
}
    32b0:	b003      	add	sp, #12
    32b2:	bcf0      	pop	{r4, r5, r6, r7}
    32b4:	46bb      	mov	fp, r7
    32b6:	46b2      	mov	sl, r6
    32b8:	46a9      	mov	r9, r5
    32ba:	46a0      	mov	r8, r4
    32bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    32be:	4b02      	ldr	r3, [pc, #8]	; (32c8 <yield_process+0x5c>)
    32c0:	4798      	blx	r3
    32c2:	e7df      	b.n	3284 <yield_process+0x18>
    32c4:	2000061c 	.word	0x2000061c
    32c8:	00002ea1 	.word	0x00002ea1

000032cc <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    32cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ce:	464f      	mov	r7, r9
    32d0:	4646      	mov	r6, r8
    32d2:	b4c0      	push	{r6, r7}
    32d4:	b08b      	sub	sp, #44	; 0x2c
    32d6:	4681      	mov	r9, r0
    32d8:	000f      	movs	r7, r1
    32da:	4690      	mov	r8, r2
    32dc:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    32de:	4e0f      	ldr	r6, [pc, #60]	; (331c <wait_until+0x50>)
    32e0:	6834      	ldr	r4, [r6, #0]
    32e2:	4b0f      	ldr	r3, [pc, #60]	; (3320 <wait_until+0x54>)
    32e4:	4798      	blx	r3
    32e6:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    32e8:	ac05      	add	r4, sp, #20
    32ea:	464b      	mov	r3, r9
    32ec:	9305      	str	r3, [sp, #20]
    32ee:	9706      	str	r7, [sp, #24]
    32f0:	4643      	mov	r3, r8
    32f2:	9307      	str	r3, [sp, #28]
    32f4:	2300      	movs	r3, #0
    32f6:	9308      	str	r3, [sp, #32]
    32f8:	7425      	strb	r5, [r4, #16]
    32fa:	466b      	mov	r3, sp
    32fc:	001a      	movs	r2, r3
    32fe:	cc23      	ldmia	r4!, {r0, r1, r5}
    3300:	c223      	stmia	r2!, {r0, r1, r5}
    3302:	cc03      	ldmia	r4!, {r0, r1}
    3304:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3306:	6832      	ldr	r2, [r6, #0]
    3308:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    330a:	2002      	movs	r0, #2
    330c:	4b05      	ldr	r3, [pc, #20]	; (3324 <wait_until+0x58>)
    330e:	4798      	blx	r3
}
    3310:	b00b      	add	sp, #44	; 0x2c
    3312:	bcc0      	pop	{r6, r7}
    3314:	46b9      	mov	r9, r7
    3316:	46b0      	mov	r8, r6
    3318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	2000061c 	.word	0x2000061c
    3320:	000022a1 	.word	0x000022a1
    3324:	0000326d 	.word	0x0000326d

00003328 <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    3328:	b5f0      	push	{r4, r5, r6, r7, lr}
    332a:	464f      	mov	r7, r9
    332c:	4646      	mov	r6, r8
    332e:	b4c0      	push	{r6, r7}
    3330:	b08b      	sub	sp, #44	; 0x2c
    3332:	4681      	mov	r9, r0
    3334:	000f      	movs	r7, r1
    3336:	4690      	mov	r8, r2
    3338:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    333a:	4e0f      	ldr	r6, [pc, #60]	; (3378 <wait_until_callback+0x50>)
    333c:	6834      	ldr	r4, [r6, #0]
    333e:	4b0f      	ldr	r3, [pc, #60]	; (337c <wait_until_callback+0x54>)
    3340:	4798      	blx	r3
    3342:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3344:	ac05      	add	r4, sp, #20
    3346:	464b      	mov	r3, r9
    3348:	9305      	str	r3, [sp, #20]
    334a:	9706      	str	r7, [sp, #24]
    334c:	4643      	mov	r3, r8
    334e:	9307      	str	r3, [sp, #28]
    3350:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3352:	9308      	str	r3, [sp, #32]
    3354:	7425      	strb	r5, [r4, #16]
    3356:	466b      	mov	r3, sp
    3358:	001a      	movs	r2, r3
    335a:	cc23      	ldmia	r4!, {r0, r1, r5}
    335c:	c223      	stmia	r2!, {r0, r1, r5}
    335e:	cc03      	ldmia	r4!, {r0, r1}
    3360:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3362:	6832      	ldr	r2, [r6, #0]
    3364:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3366:	2002      	movs	r0, #2
    3368:	4b05      	ldr	r3, [pc, #20]	; (3380 <wait_until_callback+0x58>)
    336a:	4798      	blx	r3
}
    336c:	b00b      	add	sp, #44	; 0x2c
    336e:	bcc0      	pop	{r6, r7}
    3370:	46b9      	mov	r9, r7
    3372:	46b0      	mov	r8, r6
    3374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	2000061c 	.word	0x2000061c
    337c:	000022a1 	.word	0x000022a1
    3380:	0000326d 	.word	0x0000326d

00003384 <wait_until_callback_preserve_deadline>:

void wait_until_callback_preserve_deadline(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    3384:	b530      	push	{r4, r5, lr}
    3386:	b08b      	sub	sp, #44	; 0x2c
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3388:	ac05      	add	r4, sp, #20
    338a:	9005      	str	r0, [sp, #20]
    338c:	9106      	str	r1, [sp, #24]
    338e:	9207      	str	r2, [sp, #28]
    3390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3392:	9208      	str	r2, [sp, #32]
    3394:	7423      	strb	r3, [r4, #16]
    3396:	466b      	mov	r3, sp
    3398:	001a      	movs	r2, r3
    339a:	cc23      	ldmia	r4!, {r0, r1, r5}
    339c:	c223      	stmia	r2!, {r0, r1, r5}
    339e:	cc03      	ldmia	r4!, {r0, r1}
    33a0:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    33a2:	4a04      	ldr	r2, [pc, #16]	; (33b4 <wait_until_callback_preserve_deadline+0x30>)
    33a4:	6812      	ldr	r2, [r2, #0]
    33a6:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    33a8:	2002      	movs	r0, #2
    33aa:	4b03      	ldr	r3, [pc, #12]	; (33b8 <wait_until_callback_preserve_deadline+0x34>)
    33ac:	4798      	blx	r3
    33ae:	b00b      	add	sp, #44	; 0x2c
    33b0:	bd30      	pop	{r4, r5, pc}
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	2000061c 	.word	0x2000061c
    33b8:	0000326d 	.word	0x0000326d

000033bc <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    33bc:	b500      	push	{lr}
    33be:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    33c0:	4b0c      	ldr	r3, [pc, #48]	; (33f4 <rtos_delay_callback+0x38>)
    33c2:	4798      	blx	r3
    33c4:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    33c6:	4b0c      	ldr	r3, [pc, #48]	; (33f8 <rtos_delay_callback+0x3c>)
    33c8:	681a      	ldr	r2, [r3, #0]
    33ca:	6953      	ldr	r3, [r2, #20]
    33cc:	9901      	ldr	r1, [sp, #4]
    33ce:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    33d0:	490a      	ldr	r1, [pc, #40]	; (33fc <rtos_delay_callback+0x40>)
    33d2:	6809      	ldr	r1, [r1, #0]
    33d4:	4299      	cmp	r1, r3
    33d6:	dc07      	bgt.n	33e8 <rtos_delay_callback+0x2c>
    33d8:	4908      	ldr	r1, [pc, #32]	; (33fc <rtos_delay_callback+0x40>)
    33da:	6808      	ldr	r0, [r1, #0]
    33dc:	4907      	ldr	r1, [pc, #28]	; (33fc <rtos_delay_callback+0x40>)
    33de:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    33e0:	2b00      	cmp	r3, #0
    33e2:	dd03      	ble.n	33ec <rtos_delay_callback+0x30>
}
    33e4:	b003      	add	sp, #12
    33e6:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    33e8:	0018      	movs	r0, r3
    33ea:	e7f7      	b.n	33dc <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    33ec:	2301      	movs	r3, #1
    33ee:	6193      	str	r3, [r2, #24]
}
    33f0:	e7f8      	b.n	33e4 <rtos_delay_callback+0x28>
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	000022a1 	.word	0x000022a1
    33f8:	2000061c 	.word	0x2000061c
    33fc:	20000098 	.word	0x20000098

00003400 <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    3400:	b570      	push	{r4, r5, r6, lr}
    3402:	b086      	sub	sp, #24
    3404:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    3406:	4b09      	ldr	r3, [pc, #36]	; (342c <rtos_delay_ctick+0x2c>)
    3408:	4798      	blx	r3
    340a:	4b09      	ldr	r3, [pc, #36]	; (3430 <rtos_delay_ctick+0x30>)
    340c:	681d      	ldr	r5, [r3, #0]
    340e:	1900      	adds	r0, r0, r4
    3410:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3412:	aa01      	add	r2, sp, #4
    3414:	4b07      	ldr	r3, [pc, #28]	; (3434 <rtos_delay_ctick+0x34>)
    3416:	0011      	movs	r1, r2
    3418:	cb51      	ldmia	r3!, {r0, r4, r6}
    341a:	c151      	stmia	r1!, {r0, r4, r6}
    341c:	cb11      	ldmia	r3!, {r0, r4}
    341e:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3420:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    3422:	2002      	movs	r0, #2
    3424:	4b04      	ldr	r3, [pc, #16]	; (3438 <rtos_delay_ctick+0x38>)
    3426:	4798      	blx	r3
    3428:	b006      	add	sp, #24
    342a:	bd70      	pop	{r4, r5, r6, pc}
    342c:	000022a1 	.word	0x000022a1
    3430:	2000061c 	.word	0x2000061c
    3434:	000058b0 	.word	0x000058b0
    3438:	0000326d 	.word	0x0000326d

0000343c <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    343e:	4b16      	ldr	r3, [pc, #88]	; (3498 <busmanager_process_wait_callback+0x5c>)
    3440:	681b      	ldr	r3, [r3, #0]
    3442:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    3444:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    3446:	2500      	movs	r5, #0
    3448:	e00b      	b.n	3462 <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    344a:	4b13      	ldr	r3, [pc, #76]	; (3498 <busmanager_process_wait_callback+0x5c>)
    344c:	681b      	ldr	r3, [r3, #0]
    344e:	2201      	movs	r2, #1
    3450:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    3452:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3454:	17e3      	asrs	r3, r4, #31
    3456:	0f5b      	lsrs	r3, r3, #29
    3458:	18e4      	adds	r4, r4, r3
    345a:	2207      	movs	r2, #7
    345c:	4014      	ands	r4, r2
    345e:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    3460:	3501      	adds	r5, #1
    3462:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3464:	42ab      	cmp	r3, r5
    3466:	dd15      	ble.n	3494 <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    3468:	1ca3      	adds	r3, r4, #2
    346a:	009b      	lsls	r3, r3, #2
    346c:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    346e:	7d1a      	ldrb	r2, [r3, #20]
    3470:	2a00      	cmp	r2, #0
    3472:	d0ee      	beq.n	3452 <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    3474:	7c1a      	ldrb	r2, [r3, #16]
    3476:	7c59      	ldrb	r1, [r3, #17]
    3478:	0209      	lsls	r1, r1, #8
    347a:	4311      	orrs	r1, r2
    347c:	7c9a      	ldrb	r2, [r3, #18]
    347e:	0412      	lsls	r2, r2, #16
    3480:	430a      	orrs	r2, r1
    3482:	7cdf      	ldrb	r7, [r3, #19]
    3484:	063f      	lsls	r7, r7, #24
    3486:	4317      	orrs	r7, r2
    3488:	4b04      	ldr	r3, [pc, #16]	; (349c <busmanager_process_wait_callback+0x60>)
    348a:	4798      	blx	r3
    348c:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    348e:	2f00      	cmp	r7, #0
    3490:	dcdf      	bgt.n	3452 <busmanager_process_wait_callback+0x16>
    3492:	e7da      	b.n	344a <busmanager_process_wait_callback+0xe>
	}
}
    3494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	2000061c 	.word	0x2000061c
    349c:	000022a1 	.word	0x000022a1

000034a0 <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    34a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    34a2:	780c      	ldrb	r4, [r1, #0]
    34a4:	784d      	ldrb	r5, [r1, #1]
    34a6:	022d      	lsls	r5, r5, #8
    34a8:	4325      	orrs	r5, r4
    34aa:	788c      	ldrb	r4, [r1, #2]
    34ac:	0424      	lsls	r4, r4, #16
    34ae:	432c      	orrs	r4, r5
    34b0:	78cf      	ldrb	r7, [r1, #3]
    34b2:	063f      	lsls	r7, r7, #24
    34b4:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    34b6:	2601      	movs	r6, #1
    34b8:	e000      	b.n	34bc <set_matching_id_status+0x1c>
    34ba:	3601      	adds	r6, #1
    34bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    34be:	42b1      	cmp	r1, r6
    34c0:	dd17      	ble.n	34f2 <set_matching_id_status+0x52>
		++queue_pointer;
    34c2:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    34c4:	17d1      	asrs	r1, r2, #31
    34c6:	0f49      	lsrs	r1, r1, #29
    34c8:	1852      	adds	r2, r2, r1
    34ca:	2407      	movs	r4, #7
    34cc:	4022      	ands	r2, r4
    34ce:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    34d0:	1c91      	adds	r1, r2, #2
    34d2:	0089      	lsls	r1, r1, #2
    34d4:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    34d6:	782c      	ldrb	r4, [r5, #0]
    34d8:	7869      	ldrb	r1, [r5, #1]
    34da:	0209      	lsls	r1, r1, #8
    34dc:	4321      	orrs	r1, r4
    34de:	78ac      	ldrb	r4, [r5, #2]
    34e0:	0424      	lsls	r4, r4, #16
    34e2:	430c      	orrs	r4, r1
    34e4:	78e9      	ldrb	r1, [r5, #3]
    34e6:	0609      	lsls	r1, r1, #24
    34e8:	4321      	orrs	r1, r4
    34ea:	42b9      	cmp	r1, r7
    34ec:	d1e5      	bne.n	34ba <set_matching_id_status+0x1a>
    34ee:	756b      	strb	r3, [r5, #21]
    34f0:	e7e3      	b.n	34ba <set_matching_id_status+0x1a>
}
    34f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000034f4 <busmanager_process_function>:

void busmanager_process_function() {
    34f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34f6:	46ce      	mov	lr, r9
    34f8:	4647      	mov	r7, r8
    34fa:	b580      	push	{r7, lr}
    34fc:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    34fe:	4b62      	ldr	r3, [pc, #392]	; (3688 <busmanager_process_function+0x194>)
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	6a1f      	ldr	r7, [r3, #32]
    3504:	e05d      	b.n	35c2 <busmanager_process_function+0xce>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    3506:	0038      	movs	r0, r7
    3508:	3030      	adds	r0, #48	; 0x30
    350a:	2201      	movs	r2, #1
    350c:	3302      	adds	r3, #2
    350e:	4252      	negs	r2, r2
    3510:	2100      	movs	r1, #0
    3512:	4c5e      	ldr	r4, [pc, #376]	; (368c <busmanager_process_function+0x198>)
    3514:	47a0      	blx	r4
    3516:	e057      	b.n	35c8 <busmanager_process_function+0xd4>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    3518:	7d2b      	ldrb	r3, [r5, #20]
    351a:	2b00      	cmp	r3, #0
    351c:	d158      	bne.n	35d0 <busmanager_process_function+0xdc>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    351e:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3520:	17e3      	asrs	r3, r4, #31
    3522:	0f5b      	lsrs	r3, r3, #29
    3524:	18e4      	adds	r4, r4, r3
    3526:	2207      	movs	r2, #7
    3528:	4014      	ands	r4, r2
    352a:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    352c:	2301      	movs	r3, #1
    352e:	469c      	mov	ip, r3
    3530:	44e1      	add	r9, ip
    3532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3534:	454b      	cmp	r3, r9
    3536:	dd09      	ble.n	354c <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    3538:	1ca3      	adds	r3, r4, #2
    353a:	009b      	lsls	r3, r3, #2
    353c:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    353e:	2315      	movs	r3, #21
    3540:	56eb      	ldrsb	r3, [r5, r3]
    3542:	2b00      	cmp	r3, #0
    3544:	d1e8      	bne.n	3518 <busmanager_process_function+0x24>
    3546:	7d2b      	ldrb	r3, [r5, #20]
    3548:	2b00      	cmp	r3, #0
    354a:	d1e5      	bne.n	3518 <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    354c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    354e:	4549      	cmp	r1, r9
    3550:	d05e      	beq.n	3610 <busmanager_process_function+0x11c>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    3552:	2315      	movs	r3, #21
    3554:	56eb      	ldrsb	r3, [r5, r3]
    3556:	2b02      	cmp	r3, #2
    3558:	d02f      	beq.n	35ba <busmanager_process_function+0xc6>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    355a:	7b2a      	ldrb	r2, [r5, #12]
    355c:	7b6b      	ldrb	r3, [r5, #13]
    355e:	021b      	lsls	r3, r3, #8
    3560:	4313      	orrs	r3, r2
    3562:	7baa      	ldrb	r2, [r5, #14]
    3564:	0412      	lsls	r2, r2, #16
    3566:	431a      	orrs	r2, r3
    3568:	7beb      	ldrb	r3, [r5, #15]
    356a:	061b      	lsls	r3, r3, #24
    356c:	4313      	orrs	r3, r2
    356e:	d059      	beq.n	3624 <busmanager_process_function+0x130>
				SOS();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    3570:	7b2b      	ldrb	r3, [r5, #12]
    3572:	7b6a      	ldrb	r2, [r5, #13]
    3574:	0212      	lsls	r2, r2, #8
    3576:	431a      	orrs	r2, r3
    3578:	7bab      	ldrb	r3, [r5, #14]
    357a:	041b      	lsls	r3, r3, #16
    357c:	4313      	orrs	r3, r2
    357e:	7bec      	ldrb	r4, [r5, #15]
    3580:	0624      	lsls	r4, r4, #24
    3582:	431c      	orrs	r4, r3
    3584:	7a2b      	ldrb	r3, [r5, #8]
    3586:	7a6a      	ldrb	r2, [r5, #9]
    3588:	0212      	lsls	r2, r2, #8
    358a:	431a      	orrs	r2, r3
    358c:	7aab      	ldrb	r3, [r5, #10]
    358e:	041b      	lsls	r3, r3, #16
    3590:	4313      	orrs	r3, r2
    3592:	7aea      	ldrb	r2, [r5, #11]
    3594:	0612      	lsls	r2, r2, #24
    3596:	431a      	orrs	r2, r3
    3598:	6879      	ldr	r1, [r7, #4]
    359a:	792b      	ldrb	r3, [r5, #4]
    359c:	7968      	ldrb	r0, [r5, #5]
    359e:	0200      	lsls	r0, r0, #8
    35a0:	4318      	orrs	r0, r3
    35a2:	79ab      	ldrb	r3, [r5, #6]
    35a4:	041b      	lsls	r3, r3, #16
    35a6:	4303      	orrs	r3, r0
    35a8:	79e8      	ldrb	r0, [r5, #7]
    35aa:	0600      	lsls	r0, r0, #24
    35ac:	4318      	orrs	r0, r3
    35ae:	002b      	movs	r3, r5
    35b0:	47a0      	blx	r4
    35b2:	2800      	cmp	r0, #0
    35b4:	d001      	beq.n	35ba <busmanager_process_function+0xc6>
				current_request->status = BusManager_Request_Complete;
    35b6:	2302      	movs	r3, #2
    35b8:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    35ba:	2315      	movs	r3, #21
    35bc:	56eb      	ldrsb	r3, [r5, r3]
    35be:	2b02      	cmp	r3, #2
    35c0:	d033      	beq.n	362a <busmanager_process_function+0x136>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    35c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    35c4:	2b00      	cmp	r3, #0
    35c6:	d09e      	beq.n	3506 <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    35c8:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    35ca:	2300      	movs	r3, #0
    35cc:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    35ce:	e7b0      	b.n	3532 <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    35d0:	7c2a      	ldrb	r2, [r5, #16]
    35d2:	7c6b      	ldrb	r3, [r5, #17]
    35d4:	021b      	lsls	r3, r3, #8
    35d6:	4313      	orrs	r3, r2
    35d8:	7caa      	ldrb	r2, [r5, #18]
    35da:	0412      	lsls	r2, r2, #16
    35dc:	431a      	orrs	r2, r3
    35de:	7ceb      	ldrb	r3, [r5, #19]
    35e0:	061b      	lsls	r3, r3, #24
    35e2:	4313      	orrs	r3, r2
    35e4:	4698      	mov	r8, r3
    35e6:	4b2a      	ldr	r3, [pc, #168]	; (3690 <busmanager_process_function+0x19c>)
    35e8:	4798      	blx	r3
    35ea:	4643      	mov	r3, r8
    35ec:	1a18      	subs	r0, r3, r0
    35ee:	2800      	cmp	r0, #0
    35f0:	dd06      	ble.n	3600 <busmanager_process_function+0x10c>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    35f2:	2301      	movs	r3, #1
    35f4:	0022      	movs	r2, r4
    35f6:	0029      	movs	r1, r5
    35f8:	0038      	movs	r0, r7
    35fa:	4e26      	ldr	r6, [pc, #152]	; (3694 <busmanager_process_function+0x1a0>)
    35fc:	47b0      	blx	r6
			if (unblocked) break;
    35fe:	e78e      	b.n	351e <busmanager_process_function+0x2a>
					current_request->busy = false;
    3600:	2300      	movs	r3, #0
    3602:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    3604:	0022      	movs	r2, r4
    3606:	0029      	movs	r1, r5
    3608:	0038      	movs	r0, r7
    360a:	4c22      	ldr	r4, [pc, #136]	; (3694 <busmanager_process_function+0x1a0>)
    360c:	47a0      	blx	r4
			if (unblocked) break;
    360e:	e79d      	b.n	354c <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    3610:	0038      	movs	r0, r7
    3612:	3030      	adds	r0, #48	; 0x30
    3614:	2201      	movs	r2, #1
    3616:	4b20      	ldr	r3, [pc, #128]	; (3698 <busmanager_process_function+0x1a4>)
    3618:	9300      	str	r3, [sp, #0]
    361a:	2301      	movs	r3, #1
    361c:	4252      	negs	r2, r2
    361e:	4c1f      	ldr	r4, [pc, #124]	; (369c <busmanager_process_function+0x1a8>)
    3620:	47a0      	blx	r4
			continue;
    3622:	e7ce      	b.n	35c2 <busmanager_process_function+0xce>
				SOS();
    3624:	4b1e      	ldr	r3, [pc, #120]	; (36a0 <busmanager_process_function+0x1ac>)
    3626:	4798      	blx	r3
    3628:	e7a2      	b.n	3570 <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    362a:	7d2b      	ldrb	r3, [r5, #20]
    362c:	2b00      	cmp	r3, #0
    362e:	d1c8      	bne.n	35c2 <busmanager_process_function+0xce>
			current_request->status = BusManager_Request_CompleteNotBusy;
    3630:	3303      	adds	r3, #3
    3632:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    3634:	e017      	b.n	3666 <busmanager_process_function+0x172>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3638:	4449      	add	r1, r9
    363a:	1e4b      	subs	r3, r1, #1
    363c:	17d8      	asrs	r0, r3, #31
    363e:	0f40      	lsrs	r0, r0, #29
    3640:	181b      	adds	r3, r3, r0
    3642:	2207      	movs	r2, #7
    3644:	4013      	ands	r3, r2
    3646:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3648:	17c8      	asrs	r0, r1, #31
    364a:	0f40      	lsrs	r0, r0, #29
    364c:	1809      	adds	r1, r1, r0
    364e:	400a      	ands	r2, r1
    3650:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    3652:	3302      	adds	r3, #2
    3654:	009b      	lsls	r3, r3, #2
    3656:	59d9      	ldr	r1, [r3, r7]
    3658:	3202      	adds	r2, #2
    365a:	0093      	lsls	r3, r2, #2
    365c:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    365e:	2301      	movs	r3, #1
    3660:	425b      	negs	r3, r3
    3662:	469c      	mov	ip, r3
    3664:	44e1      	add	r9, ip
    3666:	464b      	mov	r3, r9
    3668:	2b00      	cmp	r3, #0
    366a:	dce4      	bgt.n	3636 <busmanager_process_function+0x142>
			}

			--(data->request_count);
    366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    366e:	3b01      	subs	r3, #1
    3670:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    3672:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3674:	3301      	adds	r3, #1
    3676:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3678:	17d9      	asrs	r1, r3, #31
    367a:	0f49      	lsrs	r1, r1, #29
    367c:	185b      	adds	r3, r3, r1
    367e:	2207      	movs	r2, #7
    3680:	4013      	ands	r3, r2
    3682:	1a5b      	subs	r3, r3, r1
    3684:	62bb      	str	r3, [r7, #40]	; 0x28
    3686:	e79c      	b.n	35c2 <busmanager_process_function+0xce>
    3688:	2000061c 	.word	0x2000061c
    368c:	000032cd 	.word	0x000032cd
    3690:	000022a1 	.word	0x000022a1
    3694:	000034a1 	.word	0x000034a1
    3698:	0000343d 	.word	0x0000343d
    369c:	00003329 	.word	0x00003329
    36a0:	00002ea1 	.word	0x00002ea1

000036a4 <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    36a4:	b570      	push	{r4, r5, r6, lr}
    36a6:	0004      	movs	r4, r0
    36a8:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    36aa:	480a      	ldr	r0, [pc, #40]	; (36d4 <busmanager_new_process+0x30>)
    36ac:	0013      	movs	r3, r2
    36ae:	000a      	movs	r2, r1
    36b0:	0001      	movs	r1, r0
    36b2:	0020      	movs	r0, r4
    36b4:	4e08      	ldr	r6, [pc, #32]	; (36d8 <busmanager_new_process+0x34>)
    36b6:	47b0      	blx	r6
	proc->data.sercom = sercom;
    36b8:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    36ba:	9b04      	ldr	r3, [sp, #16]
    36bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    36be:	2300      	movs	r3, #0
    36c0:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    36c2:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    36c4:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    36c6:	0023      	movs	r3, r4
    36c8:	3328      	adds	r3, #40	; 0x28
    36ca:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    36cc:	0020      	movs	r0, r4
    36ce:	4b03      	ldr	r3, [pc, #12]	; (36dc <busmanager_new_process+0x38>)
    36d0:	4798      	blx	r3
}
    36d2:	bd70      	pop	{r4, r5, r6, pc}
    36d4:	000034f5 	.word	0x000034f5
    36d8:	00002f61 	.word	0x00002f61
    36dc:	00003049 	.word	0x00003049

000036e0 <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    36e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36e2:	0004      	movs	r4, r0
    36e4:	000d      	movs	r5, r1
    36e6:	9806      	ldr	r0, [sp, #24]
    36e8:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    36ea:	2600      	movs	r6, #0
    36ec:	702a      	strb	r2, [r5, #0]
    36ee:	0a17      	lsrs	r7, r2, #8
    36f0:	706f      	strb	r7, [r5, #1]
    36f2:	0c17      	lsrs	r7, r2, #16
    36f4:	70af      	strb	r7, [r5, #2]
    36f6:	0e12      	lsrs	r2, r2, #24
    36f8:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    36fa:	712b      	strb	r3, [r5, #4]
    36fc:	0a1a      	lsrs	r2, r3, #8
    36fe:	716a      	strb	r2, [r5, #5]
    3700:	0c1a      	lsrs	r2, r3, #16
    3702:	71aa      	strb	r2, [r5, #6]
    3704:	0e1b      	lsrs	r3, r3, #24
    3706:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    3708:	7228      	strb	r0, [r5, #8]
    370a:	0a03      	lsrs	r3, r0, #8
    370c:	726b      	strb	r3, [r5, #9]
    370e:	0c03      	lsrs	r3, r0, #16
    3710:	72ab      	strb	r3, [r5, #10]
    3712:	0e00      	lsrs	r0, r0, #24
    3714:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    3716:	7329      	strb	r1, [r5, #12]
    3718:	0a0b      	lsrs	r3, r1, #8
    371a:	736b      	strb	r3, [r5, #13]
    371c:	0c0b      	lsrs	r3, r1, #16
    371e:	73ab      	strb	r3, [r5, #14]
    3720:	0e09      	lsrs	r1, r1, #24
    3722:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    3724:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    3726:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3728:	e007      	b.n	373a <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    372a:	0020      	movs	r0, r4
    372c:	3058      	adds	r0, #88	; 0x58
    372e:	2201      	movs	r2, #1
    3730:	2301      	movs	r3, #1
    3732:	4252      	negs	r2, r2
    3734:	2108      	movs	r1, #8
    3736:	4e0b      	ldr	r6, [pc, #44]	; (3764 <busmanager_request_transaction+0x84>)
    3738:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    373a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    373c:	2b08      	cmp	r3, #8
    373e:	d0f4      	beq.n	372a <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    3740:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3742:	0011      	movs	r1, r2
    3744:	310c      	adds	r1, #12
    3746:	0089      	lsls	r1, r1, #2
    3748:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    374a:	3301      	adds	r3, #1
    374c:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    374e:	3201      	adds	r2, #1
    3750:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3752:	17d1      	asrs	r1, r2, #31
    3754:	0f49      	lsrs	r1, r1, #29
    3756:	1853      	adds	r3, r2, r1
    3758:	2207      	movs	r2, #7
    375a:	4013      	ands	r3, r2
    375c:	1a5b      	subs	r3, r3, r1
    375e:	6563      	str	r3, [r4, #84]	; 0x54
    3760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	000032cd 	.word	0x000032cd

00003768 <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    3768:	b5f0      	push	{r4, r5, r6, r7, lr}
    376a:	46de      	mov	lr, fp
    376c:	4657      	mov	r7, sl
    376e:	464e      	mov	r6, r9
    3770:	4645      	mov	r5, r8
    3772:	b5e0      	push	{r5, r6, r7, lr}
    3774:	b089      	sub	sp, #36	; 0x24
    3776:	0004      	movs	r4, r0
    3778:	000e      	movs	r6, r1
    377a:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    377c:	ab07      	add	r3, sp, #28
    377e:	2003      	movs	r0, #3
    3780:	4682      	mov	sl, r0
    3782:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    3784:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    3786:	2115      	movs	r1, #21
    3788:	a802      	add	r0, sp, #8
    378a:	4684      	mov	ip, r0
    378c:	4461      	add	r1, ip
    378e:	0a10      	lsrs	r0, r2, #8
    3790:	7008      	strb	r0, [r1, #0]
    3792:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    3794:	7822      	ldrb	r2, [r4, #0]
    3796:	7861      	ldrb	r1, [r4, #1]
    3798:	0209      	lsls	r1, r1, #8
    379a:	4311      	orrs	r1, r2
    379c:	78a2      	ldrb	r2, [r4, #2]
    379e:	0412      	lsls	r2, r2, #16
    37a0:	430a      	orrs	r2, r1
    37a2:	78e5      	ldrb	r5, [r4, #3]
    37a4:	062d      	lsls	r5, r5, #24
    37a6:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    37a8:	9604      	str	r6, [sp, #16]
    37aa:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    37ac:	2128      	movs	r1, #40	; 0x28
    37ae:	4689      	mov	r9, r1
    37b0:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    37b2:	0100      	lsls	r0, r0, #4
    37b4:	4e24      	ldr	r6, [pc, #144]	; (3848 <dma_eeprom_read+0xe0>)
    37b6:	1980      	adds	r0, r0, r6
    37b8:	4924      	ldr	r1, [pc, #144]	; (384c <dma_eeprom_read+0xe4>)
    37ba:	468b      	mov	fp, r1
    37bc:	9103      	str	r1, [sp, #12]
    37be:	4649      	mov	r1, r9
    37c0:	9102      	str	r1, [sp, #8]
    37c2:	9301      	str	r3, [sp, #4]
    37c4:	4651      	mov	r1, sl
    37c6:	9100      	str	r1, [sp, #0]
    37c8:	2300      	movs	r3, #0
    37ca:	2200      	movs	r2, #0
    37cc:	3902      	subs	r1, #2
    37ce:	4f20      	ldr	r7, [pc, #128]	; (3850 <dma_eeprom_read+0xe8>)
    37d0:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    37d2:	466b      	mov	r3, sp
    37d4:	8a9b      	ldrh	r3, [r3, #20]
    37d6:	4698      	mov	r8, r3
    37d8:	2300      	movs	r3, #0
    37da:	9303      	str	r3, [sp, #12]
    37dc:	4649      	mov	r1, r9
    37de:	9102      	str	r1, [sp, #8]
    37e0:	4b1c      	ldr	r3, [pc, #112]	; (3854 <dma_eeprom_read+0xec>)
    37e2:	9301      	str	r3, [sp, #4]
    37e4:	4641      	mov	r1, r8
    37e6:	9100      	str	r1, [sp, #0]
    37e8:	2300      	movs	r3, #0
    37ea:	2200      	movs	r2, #0
    37ec:	2100      	movs	r1, #0
    37ee:	4658      	mov	r0, fp
    37f0:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    37f2:	9a04      	ldr	r2, [sp, #16]
    37f4:	7850      	ldrb	r0, [r2, #1]
    37f6:	0100      	lsls	r0, r0, #4
    37f8:	1980      	adds	r0, r0, r6
    37fa:	4917      	ldr	r1, [pc, #92]	; (3858 <dma_eeprom_read+0xf0>)
    37fc:	468b      	mov	fp, r1
    37fe:	9103      	str	r1, [sp, #12]
    3800:	4b16      	ldr	r3, [pc, #88]	; (385c <dma_eeprom_read+0xf4>)
    3802:	9302      	str	r3, [sp, #8]
    3804:	4649      	mov	r1, r9
    3806:	9101      	str	r1, [sp, #4]
    3808:	4651      	mov	r1, sl
    380a:	9100      	str	r1, [sp, #0]
    380c:	2300      	movs	r3, #0
    380e:	2200      	movs	r2, #0
    3810:	2100      	movs	r1, #0
    3812:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3814:	2300      	movs	r3, #0
    3816:	9303      	str	r3, [sp, #12]
    3818:	9b12      	ldr	r3, [sp, #72]	; 0x48
    381a:	9302      	str	r3, [sp, #8]
    381c:	464b      	mov	r3, r9
    381e:	9301      	str	r3, [sp, #4]
    3820:	4643      	mov	r3, r8
    3822:	9300      	str	r3, [sp, #0]
    3824:	2300      	movs	r3, #0
    3826:	2201      	movs	r2, #1
    3828:	2100      	movs	r1, #0
    382a:	4658      	mov	r0, fp
    382c:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    382e:	1d21      	adds	r1, r4, #4
    3830:	9a04      	ldr	r2, [sp, #16]
    3832:	0028      	movs	r0, r5
    3834:	4b0a      	ldr	r3, [pc, #40]	; (3860 <dma_eeprom_read+0xf8>)
    3836:	4798      	blx	r3
}
    3838:	b009      	add	sp, #36	; 0x24
    383a:	bcf0      	pop	{r4, r5, r6, r7}
    383c:	46bb      	mov	fp, r7
    383e:	46b2      	mov	sl, r6
    3840:	46a9      	mov	r9, r5
    3842:	46a0      	mov	r8, r4
    3844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	200003f0 	.word	0x200003f0
    384c:	20000680 	.word	0x20000680
    3850:	000013f9 	.word	0x000013f9
    3854:	000057e1 	.word	0x000057e1
    3858:	20000670 	.word	0x20000670
    385c:	200002c0 	.word	0x200002c0
    3860:	00003cfd 	.word	0x00003cfd

00003864 <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    3864:	b5f0      	push	{r4, r5, r6, r7, lr}
    3866:	46de      	mov	lr, fp
    3868:	4657      	mov	r7, sl
    386a:	464e      	mov	r6, r9
    386c:	4645      	mov	r5, r8
    386e:	b5e0      	push	{r5, r6, r7, lr}
    3870:	b089      	sub	sp, #36	; 0x24
    3872:	0004      	movs	r4, r0
    3874:	000e      	movs	r6, r1
    3876:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    3878:	ab07      	add	r3, sp, #28
    387a:	2102      	movs	r1, #2
    387c:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    387e:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    3880:	3113      	adds	r1, #19
    3882:	a802      	add	r0, sp, #8
    3884:	4684      	mov	ip, r0
    3886:	4461      	add	r1, ip
    3888:	0a10      	lsrs	r0, r2, #8
    388a:	7008      	strb	r0, [r1, #0]
    388c:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    388e:	7822      	ldrb	r2, [r4, #0]
    3890:	7861      	ldrb	r1, [r4, #1]
    3892:	0209      	lsls	r1, r1, #8
    3894:	4311      	orrs	r1, r2
    3896:	78a2      	ldrb	r2, [r4, #2]
    3898:	0412      	lsls	r2, r2, #16
    389a:	430a      	orrs	r2, r1
    389c:	78e5      	ldrb	r5, [r4, #3]
    389e:	062d      	lsls	r5, r5, #24
    38a0:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    38a2:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    38a4:	2228      	movs	r2, #40	; 0x28
    38a6:	4690      	mov	r8, r2
    38a8:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    38aa:	0100      	lsls	r0, r0, #4
    38ac:	4a25      	ldr	r2, [pc, #148]	; (3944 <dma_eeprom_write+0xe0>)
    38ae:	4691      	mov	r9, r2
    38b0:	4448      	add	r0, r9
    38b2:	4a25      	ldr	r2, [pc, #148]	; (3948 <dma_eeprom_write+0xe4>)
    38b4:	4693      	mov	fp, r2
    38b6:	9203      	str	r2, [sp, #12]
    38b8:	4642      	mov	r2, r8
    38ba:	9202      	str	r2, [sp, #8]
    38bc:	9301      	str	r3, [sp, #4]
    38be:	2203      	movs	r2, #3
    38c0:	9200      	str	r2, [sp, #0]
    38c2:	2300      	movs	r3, #0
    38c4:	2200      	movs	r2, #0
    38c6:	2101      	movs	r1, #1
    38c8:	4f20      	ldr	r7, [pc, #128]	; (394c <dma_eeprom_write+0xe8>)
    38ca:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    38cc:	466b      	mov	r3, sp
    38ce:	8a9b      	ldrh	r3, [r3, #20]
    38d0:	469a      	mov	sl, r3
    38d2:	2300      	movs	r3, #0
    38d4:	9303      	str	r3, [sp, #12]
    38d6:	4641      	mov	r1, r8
    38d8:	9102      	str	r1, [sp, #8]
    38da:	9912      	ldr	r1, [sp, #72]	; 0x48
    38dc:	9101      	str	r1, [sp, #4]
    38de:	4651      	mov	r1, sl
    38e0:	9100      	str	r1, [sp, #0]
    38e2:	2200      	movs	r2, #0
    38e4:	2101      	movs	r1, #1
    38e6:	4658      	mov	r0, fp
    38e8:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    38ea:	7870      	ldrb	r0, [r6, #1]
    38ec:	0100      	lsls	r0, r0, #4
    38ee:	4448      	add	r0, r9
    38f0:	4917      	ldr	r1, [pc, #92]	; (3950 <dma_eeprom_write+0xec>)
    38f2:	4689      	mov	r9, r1
    38f4:	9103      	str	r1, [sp, #12]
    38f6:	4917      	ldr	r1, [pc, #92]	; (3954 <dma_eeprom_write+0xf0>)
    38f8:	468b      	mov	fp, r1
    38fa:	9102      	str	r1, [sp, #8]
    38fc:	4641      	mov	r1, r8
    38fe:	9101      	str	r1, [sp, #4]
    3900:	2203      	movs	r2, #3
    3902:	9200      	str	r2, [sp, #0]
    3904:	2300      	movs	r3, #0
    3906:	2200      	movs	r2, #0
    3908:	2100      	movs	r1, #0
    390a:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    390c:	2300      	movs	r3, #0
    390e:	9303      	str	r3, [sp, #12]
    3910:	465b      	mov	r3, fp
    3912:	9302      	str	r3, [sp, #8]
    3914:	4643      	mov	r3, r8
    3916:	9301      	str	r3, [sp, #4]
    3918:	4653      	mov	r3, sl
    391a:	9300      	str	r3, [sp, #0]
    391c:	2300      	movs	r3, #0
    391e:	2200      	movs	r2, #0
    3920:	2100      	movs	r1, #0
    3922:	4648      	mov	r0, r9
    3924:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    3926:	0020      	movs	r0, r4
    3928:	4b0b      	ldr	r3, [pc, #44]	; (3958 <dma_eeprom_write+0xf4>)
    392a:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    392c:	1d21      	adds	r1, r4, #4
    392e:	0032      	movs	r2, r6
    3930:	0028      	movs	r0, r5
    3932:	4b0a      	ldr	r3, [pc, #40]	; (395c <dma_eeprom_write+0xf8>)
    3934:	4798      	blx	r3
}
    3936:	b009      	add	sp, #36	; 0x24
    3938:	bcf0      	pop	{r4, r5, r6, r7}
    393a:	46bb      	mov	fp, r7
    393c:	46b2      	mov	sl, r6
    393e:	46a9      	mov	r9, r5
    3940:	46a0      	mov	r8, r4
    3942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3944:	200003f0 	.word	0x200003f0
    3948:	20000680 	.word	0x20000680
    394c:	000013f9 	.word	0x000013f9
    3950:	20000670 	.word	0x20000670
    3954:	200002c0 	.word	0x200002c0
    3958:	00001569 	.word	0x00001569
    395c:	00003cfd 	.word	0x00003cfd

00003960 <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    3960:	b5f0      	push	{r4, r5, r6, r7, lr}
    3962:	b083      	sub	sp, #12
    3964:	0014      	movs	r4, r2
    3966:	001d      	movs	r5, r3
	switch (request->type) {
    3968:	2324      	movs	r3, #36	; 0x24
    396a:	5cd3      	ldrb	r3, [r2, r3]
    396c:	2b00      	cmp	r3, #0
    396e:	d004      	beq.n	397a <dma_eeprom_process_request+0x1a>
    3970:	2b01      	cmp	r3, #1
    3972:	d00a      	beq.n	398a <dma_eeprom_process_request+0x2a>
    3974:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    3976:	b003      	add	sp, #12
    3978:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    397a:	69d3      	ldr	r3, [r2, #28]
    397c:	6992      	ldr	r2, [r2, #24]
    397e:	6a24      	ldr	r4, [r4, #32]
    3980:	9400      	str	r4, [sp, #0]
    3982:	4c1a      	ldr	r4, [pc, #104]	; (39ec <dma_eeprom_process_request+0x8c>)
    3984:	47a0      	blx	r4
	return true;
    3986:	2001      	movs	r0, #1
		break;
    3988:	e7f5      	b.n	3976 <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    398a:	6992      	ldr	r2, [r2, #24]
    398c:	69e6      	ldr	r6, [r4, #28]
    398e:	1993      	adds	r3, r2, r6
    3990:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    3992:	233f      	movs	r3, #63	; 0x3f
    3994:	0017      	movs	r7, r2
    3996:	439f      	bics	r7, r3
    3998:	003b      	movs	r3, r7
    399a:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    399c:	459c      	cmp	ip, r3
    399e:	d300      	bcc.n	39a2 <dma_eeprom_process_request+0x42>
    39a0:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    39a2:	6a23      	ldr	r3, [r4, #32]
    39a4:	9300      	str	r3, [sp, #0]
    39a6:	0033      	movs	r3, r6
    39a8:	4f11      	ldr	r7, [pc, #68]	; (39f0 <dma_eeprom_process_request+0x90>)
    39aa:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    39ac:	4b11      	ldr	r3, [pc, #68]	; (39f4 <dma_eeprom_process_request+0x94>)
    39ae:	4798      	blx	r3
    39b0:	4b11      	ldr	r3, [pc, #68]	; (39f8 <dma_eeprom_process_request+0x98>)
    39b2:	4798      	blx	r3
    39b4:	4b11      	ldr	r3, [pc, #68]	; (39fc <dma_eeprom_process_request+0x9c>)
    39b6:	4912      	ldr	r1, [pc, #72]	; (3a00 <dma_eeprom_process_request+0xa0>)
    39b8:	4798      	blx	r3
    39ba:	4b12      	ldr	r3, [pc, #72]	; (3a04 <dma_eeprom_process_request+0xa4>)
    39bc:	4798      	blx	r3
    39be:	7428      	strb	r0, [r5, #16]
    39c0:	0a03      	lsrs	r3, r0, #8
    39c2:	746b      	strb	r3, [r5, #17]
    39c4:	0c03      	lsrs	r3, r0, #16
    39c6:	74ab      	strb	r3, [r5, #18]
    39c8:	0e00      	lsrs	r0, r0, #24
    39ca:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    39cc:	2301      	movs	r3, #1
    39ce:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    39d0:	69e3      	ldr	r3, [r4, #28]
    39d2:	1b9b      	subs	r3, r3, r6
    39d4:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    39d6:	d101      	bne.n	39dc <dma_eeprom_process_request+0x7c>
	return true;
    39d8:	2001      	movs	r0, #1
    39da:	e7cc      	b.n	3976 <dma_eeprom_process_request+0x16>
				request->address += count;
    39dc:	69a3      	ldr	r3, [r4, #24]
    39de:	199b      	adds	r3, r3, r6
    39e0:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    39e2:	6a23      	ldr	r3, [r4, #32]
    39e4:	199b      	adds	r3, r3, r6
    39e6:	6223      	str	r3, [r4, #32]
				return false;
    39e8:	2000      	movs	r0, #0
    39ea:	e7c4      	b.n	3976 <dma_eeprom_process_request+0x16>
    39ec:	00003769 	.word	0x00003769
    39f0:	00003865 	.word	0x00003865
    39f4:	000022a1 	.word	0x000022a1
    39f8:	000051bd 	.word	0x000051bd
    39fc:	00004475 	.word	0x00004475
    3a00:	486a6000 	.word	0x486a6000
    3a04:	00004445 	.word	0x00004445

00003a08 <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    3a08:	b530      	push	{r4, r5, lr}
    3a0a:	b083      	sub	sp, #12
    3a0c:	0014      	movs	r4, r2
    3a0e:	001a      	movs	r2, r3
    3a10:	ab06      	add	r3, sp, #24
    3a12:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3a14:	2324      	movs	r3, #36	; 0x24
    3a16:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    3a18:	9b07      	ldr	r3, [sp, #28]
    3a1a:	618b      	str	r3, [r1, #24]
	request->count = count;
    3a1c:	9b08      	ldr	r3, [sp, #32]
    3a1e:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a22:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    3a24:	4b03      	ldr	r3, [pc, #12]	; (3a34 <eeprom_request+0x2c>)
    3a26:	9301      	str	r3, [sp, #4]
    3a28:	9100      	str	r1, [sp, #0]
    3a2a:	0023      	movs	r3, r4
    3a2c:	4c02      	ldr	r4, [pc, #8]	; (3a38 <eeprom_request+0x30>)
    3a2e:	47a0      	blx	r4
}
    3a30:	b003      	add	sp, #12
    3a32:	bd30      	pop	{r4, r5, pc}
    3a34:	00003961 	.word	0x00003961
    3a38:	000036e1 	.word	0x000036e1

00003a3c <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    3a3c:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3a3e:	3015      	adds	r0, #21
    3a40:	2300      	movs	r3, #0
    3a42:	22ff      	movs	r2, #255	; 0xff
    3a44:	2103      	movs	r1, #3
    3a46:	4c01      	ldr	r4, [pc, #4]	; (3a4c <eeprom_wait_until_done+0x10>)
    3a48:	47a0      	blx	r4
    3a4a:	bd10      	pop	{r4, pc}
    3a4c:	000032cd 	.word	0x000032cd

00003a50 <dma_imu_icm20948_read>:
void dma_imu_icm20948_read(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* writeback) {
    3a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a52:	46de      	mov	lr, fp
    3a54:	4657      	mov	r7, sl
    3a56:	464e      	mov	r6, r9
    3a58:	4645      	mov	r5, r8
    3a5a:	b5e0      	push	{r5, r6, r7, lr}
    3a5c:	b087      	sub	sp, #28
    3a5e:	0004      	movs	r4, r0
    3a60:	000e      	movs	r6, r1
    3a62:	9304      	str	r3, [sp, #16]
    3a64:	2317      	movs	r3, #23
    3a66:	446b      	add	r3, sp
    3a68:	701a      	strb	r2, [r3, #0]
	address |= IMU_READ_MASK;
    3a6a:	b2d1      	uxtb	r1, r2
    3a6c:	2280      	movs	r2, #128	; 0x80
    3a6e:	4252      	negs	r2, r2
    3a70:	430a      	orrs	r2, r1
    3a72:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3a74:	7802      	ldrb	r2, [r0, #0]
    3a76:	7841      	ldrb	r1, [r0, #1]
    3a78:	0209      	lsls	r1, r1, #8
    3a7a:	4311      	orrs	r1, r2
    3a7c:	7882      	ldrb	r2, [r0, #2]
    3a7e:	0412      	lsls	r2, r2, #16
    3a80:	430a      	orrs	r2, r1
    3a82:	78c5      	ldrb	r5, [r0, #3]
    3a84:	062d      	lsls	r5, r5, #24
    3a86:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3a88:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3a8a:	2228      	movs	r2, #40	; 0x28
    3a8c:	4691      	mov	r9, r2
    3a8e:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3a90:	0100      	lsls	r0, r0, #4
    3a92:	4a24      	ldr	r2, [pc, #144]	; (3b24 <dma_imu_icm20948_read+0xd4>)
    3a94:	4692      	mov	sl, r2
    3a96:	4450      	add	r0, sl
    3a98:	4a23      	ldr	r2, [pc, #140]	; (3b28 <dma_imu_icm20948_read+0xd8>)
    3a9a:	4693      	mov	fp, r2
    3a9c:	9203      	str	r2, [sp, #12]
    3a9e:	464a      	mov	r2, r9
    3aa0:	9202      	str	r2, [sp, #8]
    3aa2:	9301      	str	r3, [sp, #4]
    3aa4:	2201      	movs	r2, #1
    3aa6:	9200      	str	r2, [sp, #0]
    3aa8:	2300      	movs	r3, #0
    3aaa:	2200      	movs	r2, #0
    3aac:	2100      	movs	r1, #0
    3aae:	4f1f      	ldr	r7, [pc, #124]	; (3b2c <dma_imu_icm20948_read+0xdc>)
    3ab0:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3ab2:	466b      	mov	r3, sp
    3ab4:	8a1b      	ldrh	r3, [r3, #16]
    3ab6:	4698      	mov	r8, r3
    3ab8:	2300      	movs	r3, #0
    3aba:	9303      	str	r3, [sp, #12]
    3abc:	4649      	mov	r1, r9
    3abe:	9102      	str	r1, [sp, #8]
    3ac0:	4b1b      	ldr	r3, [pc, #108]	; (3b30 <dma_imu_icm20948_read+0xe0>)
    3ac2:	9301      	str	r3, [sp, #4]
    3ac4:	4641      	mov	r1, r8
    3ac6:	9100      	str	r1, [sp, #0]
    3ac8:	2300      	movs	r3, #0
    3aca:	2200      	movs	r2, #0
    3acc:	2100      	movs	r1, #0
    3ace:	4658      	mov	r0, fp
    3ad0:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3ad2:	7870      	ldrb	r0, [r6, #1]
    3ad4:	0100      	lsls	r0, r0, #4
    3ad6:	4450      	add	r0, sl
    3ad8:	4916      	ldr	r1, [pc, #88]	; (3b34 <dma_imu_icm20948_read+0xe4>)
    3ada:	468b      	mov	fp, r1
    3adc:	9103      	str	r1, [sp, #12]
    3ade:	4b16      	ldr	r3, [pc, #88]	; (3b38 <dma_imu_icm20948_read+0xe8>)
    3ae0:	9302      	str	r3, [sp, #8]
    3ae2:	4649      	mov	r1, r9
    3ae4:	9101      	str	r1, [sp, #4]
    3ae6:	2201      	movs	r2, #1
    3ae8:	9200      	str	r2, [sp, #0]
    3aea:	2300      	movs	r3, #0
    3aec:	2200      	movs	r2, #0
    3aee:	2100      	movs	r1, #0
    3af0:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3af2:	2300      	movs	r3, #0
    3af4:	9303      	str	r3, [sp, #12]
    3af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3af8:	9302      	str	r3, [sp, #8]
    3afa:	464b      	mov	r3, r9
    3afc:	9301      	str	r3, [sp, #4]
    3afe:	4643      	mov	r3, r8
    3b00:	9300      	str	r3, [sp, #0]
    3b02:	2300      	movs	r3, #0
    3b04:	2201      	movs	r2, #1
    3b06:	2100      	movs	r1, #0
    3b08:	4658      	mov	r0, fp
    3b0a:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3b0c:	1d21      	adds	r1, r4, #4
    3b0e:	0032      	movs	r2, r6
    3b10:	0028      	movs	r0, r5
    3b12:	4b0a      	ldr	r3, [pc, #40]	; (3b3c <dma_imu_icm20948_read+0xec>)
    3b14:	4798      	blx	r3
}
    3b16:	b007      	add	sp, #28
    3b18:	bcf0      	pop	{r4, r5, r6, r7}
    3b1a:	46bb      	mov	fp, r7
    3b1c:	46b2      	mov	sl, r6
    3b1e:	46a9      	mov	r9, r5
    3b20:	46a0      	mov	r8, r4
    3b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b24:	200003f0 	.word	0x200003f0
    3b28:	20000680 	.word	0x20000680
    3b2c:	000013f9 	.word	0x000013f9
    3b30:	000057e1 	.word	0x000057e1
    3b34:	20000670 	.word	0x20000670
    3b38:	200002c0 	.word	0x200002c0
    3b3c:	00003cfd 	.word	0x00003cfd

00003b40 <dma_imu_icm20948_write>:
void dma_imu_icm20948_write(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* data) {
    3b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b42:	46de      	mov	lr, fp
    3b44:	4657      	mov	r7, sl
    3b46:	464e      	mov	r6, r9
    3b48:	4645      	mov	r5, r8
    3b4a:	b5e0      	push	{r5, r6, r7, lr}
    3b4c:	b087      	sub	sp, #28
    3b4e:	0004      	movs	r4, r0
    3b50:	000e      	movs	r6, r1
    3b52:	9304      	str	r3, [sp, #16]
    3b54:	2317      	movs	r3, #23
    3b56:	446b      	add	r3, sp
    3b58:	701a      	strb	r2, [r3, #0]
	address &= IMU_WRITE_MASK;
    3b5a:	b2d1      	uxtb	r1, r2
    3b5c:	227f      	movs	r2, #127	; 0x7f
    3b5e:	400a      	ands	r2, r1
    3b60:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3b62:	7802      	ldrb	r2, [r0, #0]
    3b64:	7841      	ldrb	r1, [r0, #1]
    3b66:	0209      	lsls	r1, r1, #8
    3b68:	4311      	orrs	r1, r2
    3b6a:	7882      	ldrb	r2, [r0, #2]
    3b6c:	0412      	lsls	r2, r2, #16
    3b6e:	430a      	orrs	r2, r1
    3b70:	78c5      	ldrb	r5, [r0, #3]
    3b72:	062d      	lsls	r5, r5, #24
    3b74:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3b76:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3b78:	2228      	movs	r2, #40	; 0x28
    3b7a:	4690      	mov	r8, r2
    3b7c:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3b7e:	0100      	lsls	r0, r0, #4
    3b80:	4a24      	ldr	r2, [pc, #144]	; (3c14 <dma_imu_icm20948_write+0xd4>)
    3b82:	4691      	mov	r9, r2
    3b84:	4448      	add	r0, r9
    3b86:	4a24      	ldr	r2, [pc, #144]	; (3c18 <dma_imu_icm20948_write+0xd8>)
    3b88:	4693      	mov	fp, r2
    3b8a:	9203      	str	r2, [sp, #12]
    3b8c:	4642      	mov	r2, r8
    3b8e:	9202      	str	r2, [sp, #8]
    3b90:	9301      	str	r3, [sp, #4]
    3b92:	2201      	movs	r2, #1
    3b94:	9200      	str	r2, [sp, #0]
    3b96:	2300      	movs	r3, #0
    3b98:	2200      	movs	r2, #0
    3b9a:	2100      	movs	r1, #0
    3b9c:	4f1f      	ldr	r7, [pc, #124]	; (3c1c <dma_imu_icm20948_write+0xdc>)
    3b9e:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3ba0:	466b      	mov	r3, sp
    3ba2:	8a1b      	ldrh	r3, [r3, #16]
    3ba4:	469a      	mov	sl, r3
    3ba6:	2300      	movs	r3, #0
    3ba8:	9303      	str	r3, [sp, #12]
    3baa:	4641      	mov	r1, r8
    3bac:	9102      	str	r1, [sp, #8]
    3bae:	9910      	ldr	r1, [sp, #64]	; 0x40
    3bb0:	9101      	str	r1, [sp, #4]
    3bb2:	4651      	mov	r1, sl
    3bb4:	9100      	str	r1, [sp, #0]
    3bb6:	2200      	movs	r2, #0
    3bb8:	2101      	movs	r1, #1
    3bba:	4658      	mov	r0, fp
    3bbc:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3bbe:	7870      	ldrb	r0, [r6, #1]
    3bc0:	0100      	lsls	r0, r0, #4
    3bc2:	4448      	add	r0, r9
    3bc4:	4916      	ldr	r1, [pc, #88]	; (3c20 <dma_imu_icm20948_write+0xe0>)
    3bc6:	4689      	mov	r9, r1
    3bc8:	9103      	str	r1, [sp, #12]
    3bca:	4916      	ldr	r1, [pc, #88]	; (3c24 <dma_imu_icm20948_write+0xe4>)
    3bcc:	468b      	mov	fp, r1
    3bce:	9102      	str	r1, [sp, #8]
    3bd0:	4641      	mov	r1, r8
    3bd2:	9101      	str	r1, [sp, #4]
    3bd4:	2201      	movs	r2, #1
    3bd6:	9200      	str	r2, [sp, #0]
    3bd8:	2300      	movs	r3, #0
    3bda:	2200      	movs	r2, #0
    3bdc:	2100      	movs	r1, #0
    3bde:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3be0:	2300      	movs	r3, #0
    3be2:	9303      	str	r3, [sp, #12]
    3be4:	465b      	mov	r3, fp
    3be6:	9302      	str	r3, [sp, #8]
    3be8:	4643      	mov	r3, r8
    3bea:	9301      	str	r3, [sp, #4]
    3bec:	4653      	mov	r3, sl
    3bee:	9300      	str	r3, [sp, #0]
    3bf0:	2300      	movs	r3, #0
    3bf2:	2200      	movs	r2, #0
    3bf4:	2100      	movs	r1, #0
    3bf6:	4648      	mov	r0, r9
    3bf8:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3bfa:	1d21      	adds	r1, r4, #4
    3bfc:	0032      	movs	r2, r6
    3bfe:	0028      	movs	r0, r5
    3c00:	4b09      	ldr	r3, [pc, #36]	; (3c28 <dma_imu_icm20948_write+0xe8>)
    3c02:	4798      	blx	r3
}
    3c04:	b007      	add	sp, #28
    3c06:	bcf0      	pop	{r4, r5, r6, r7}
    3c08:	46bb      	mov	fp, r7
    3c0a:	46b2      	mov	sl, r6
    3c0c:	46a9      	mov	r9, r5
    3c0e:	46a0      	mov	r8, r4
    3c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	200003f0 	.word	0x200003f0
    3c18:	20000680 	.word	0x20000680
    3c1c:	000013f9 	.word	0x000013f9
    3c20:	20000670 	.word	0x20000670
    3c24:	200002c0 	.word	0x200002c0
    3c28:	00003cfd 	.word	0x00003cfd

00003c2c <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    3c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c2e:	b085      	sub	sp, #20
    3c30:	0005      	movs	r5, r0
    3c32:	000e      	movs	r6, r1
    3c34:	0014      	movs	r4, r2
	IMU_ON_BUS();
    3c36:	2180      	movs	r1, #128	; 0x80
    3c38:	0389      	lsls	r1, r1, #14
    3c3a:	2000      	movs	r0, #0
    3c3c:	4b17      	ldr	r3, [pc, #92]	; (3c9c <dma_imu_icm20948_process_request+0x70>)
    3c3e:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    3c40:	2325      	movs	r3, #37	; 0x25
    3c42:	5ce3      	ldrb	r3, [r4, r3]
    3c44:	011b      	lsls	r3, r3, #4
    3c46:	220f      	movs	r2, #15
    3c48:	446a      	add	r2, sp
    3c4a:	7013      	strb	r3, [r2, #0]
	dma_imu_icm20948_write(imudesc, dmadesc, REG_BANK_SEL, 1, &bank);
    3c4c:	9200      	str	r2, [sp, #0]
    3c4e:	2301      	movs	r3, #1
    3c50:	227f      	movs	r2, #127	; 0x7f
    3c52:	0031      	movs	r1, r6
    3c54:	0028      	movs	r0, r5
    3c56:	4f12      	ldr	r7, [pc, #72]	; (3ca0 <dma_imu_icm20948_process_request+0x74>)
    3c58:	47b8      	blx	r7
	switch (request->type) {
    3c5a:	2324      	movs	r3, #36	; 0x24
    3c5c:	5ce3      	ldrb	r3, [r4, r3]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d009      	beq.n	3c76 <dma_imu_icm20948_process_request+0x4a>
    3c62:	2b01      	cmp	r3, #1
    3c64:	d010      	beq.n	3c88 <dma_imu_icm20948_process_request+0x5c>
	IMU_OFF_BUS();
    3c66:	2180      	movs	r1, #128	; 0x80
    3c68:	0389      	lsls	r1, r1, #14
    3c6a:	2000      	movs	r0, #0
    3c6c:	4b0d      	ldr	r3, [pc, #52]	; (3ca4 <dma_imu_icm20948_process_request+0x78>)
    3c6e:	4798      	blx	r3
}
    3c70:	2001      	movs	r0, #1
    3c72:	b005      	add	sp, #20
    3c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dma_imu_icm20948_read(imudesc, dmadesc, request->address, request->count, request->data);
    3c76:	69e3      	ldr	r3, [r4, #28]
    3c78:	7e22      	ldrb	r2, [r4, #24]
    3c7a:	6a21      	ldr	r1, [r4, #32]
    3c7c:	9100      	str	r1, [sp, #0]
    3c7e:	0031      	movs	r1, r6
    3c80:	0028      	movs	r0, r5
    3c82:	4c09      	ldr	r4, [pc, #36]	; (3ca8 <dma_imu_icm20948_process_request+0x7c>)
    3c84:	47a0      	blx	r4
		break;
    3c86:	e7ee      	b.n	3c66 <dma_imu_icm20948_process_request+0x3a>
		dma_imu_icm20948_write(imudesc, dmadesc, request->address, request->count, request->data);
    3c88:	69e3      	ldr	r3, [r4, #28]
    3c8a:	7e22      	ldrb	r2, [r4, #24]
    3c8c:	6a21      	ldr	r1, [r4, #32]
    3c8e:	9100      	str	r1, [sp, #0]
    3c90:	0031      	movs	r1, r6
    3c92:	0028      	movs	r0, r5
    3c94:	4c02      	ldr	r4, [pc, #8]	; (3ca0 <dma_imu_icm20948_process_request+0x74>)
    3c96:	47a0      	blx	r4
		break;
    3c98:	e7e5      	b.n	3c66 <dma_imu_icm20948_process_request+0x3a>
    3c9a:	46c0      	nop			; (mov r8, r8)
    3c9c:	00001c59 	.word	0x00001c59
    3ca0:	00003b41 	.word	0x00003b41
    3ca4:	00001c69 	.word	0x00001c69
    3ca8:	00003a51 	.word	0x00003a51

00003cac <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    3cac:	b570      	push	{r4, r5, r6, lr}
    3cae:	b082      	sub	sp, #8
    3cb0:	0014      	movs	r4, r2
    3cb2:	001a      	movs	r2, r3
    3cb4:	ab06      	add	r3, sp, #24
    3cb6:	781e      	ldrb	r6, [r3, #0]
    3cb8:	ab07      	add	r3, sp, #28
    3cba:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3cbc:	2324      	movs	r3, #36	; 0x24
    3cbe:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    3cc0:	9b08      	ldr	r3, [sp, #32]
    3cc2:	618b      	str	r3, [r1, #24]
	request->count = count;
    3cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3cc6:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3cca:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    3ccc:	2325      	movs	r3, #37	; 0x25
    3cce:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    3cd0:	4b03      	ldr	r3, [pc, #12]	; (3ce0 <imu_icm20948_request+0x34>)
    3cd2:	9301      	str	r3, [sp, #4]
    3cd4:	9100      	str	r1, [sp, #0]
    3cd6:	0023      	movs	r3, r4
    3cd8:	4c02      	ldr	r4, [pc, #8]	; (3ce4 <imu_icm20948_request+0x38>)
    3cda:	47a0      	blx	r4
}
    3cdc:	b002      	add	sp, #8
    3cde:	bd70      	pop	{r4, r5, r6, pc}
    3ce0:	00003c2d 	.word	0x00003c2d
    3ce4:	000036e1 	.word	0x000036e1

00003ce8 <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    3ce8:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3cea:	3015      	adds	r0, #21
    3cec:	2300      	movs	r3, #0
    3cee:	22ff      	movs	r2, #255	; 0xff
    3cf0:	2103      	movs	r1, #3
    3cf2:	4c01      	ldr	r4, [pc, #4]	; (3cf8 <imu_icm20948_wait_until_done+0x10>)
    3cf4:	47a0      	blx	r4
}
    3cf6:	bd10      	pop	{r4, pc}
    3cf8:	000032cd 	.word	0x000032cd

00003cfc <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    3cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cfe:	0007      	movs	r7, r0
    3d00:	000d      	movs	r5, r1
    3d02:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    3d04:	7810      	ldrb	r0, [r2, #0]
    3d06:	4e1c      	ldr	r6, [pc, #112]	; (3d78 <dma_spi_transaction+0x7c>)
    3d08:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3d0a:	7860      	ldrb	r0, [r4, #1]
    3d0c:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    3d0e:	0038      	movs	r0, r7
    3d10:	4b1a      	ldr	r3, [pc, #104]	; (3d7c <dma_spi_transaction+0x80>)
    3d12:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    3d14:	7923      	ldrb	r3, [r4, #4]
    3d16:	78e2      	ldrb	r2, [r4, #3]
    3d18:	7820      	ldrb	r0, [r4, #0]
    3d1a:	2102      	movs	r1, #2
    3d1c:	4f18      	ldr	r7, [pc, #96]	; (3d80 <dma_spi_transaction+0x84>)
    3d1e:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    3d20:	7923      	ldrb	r3, [r4, #4]
    3d22:	78a2      	ldrb	r2, [r4, #2]
    3d24:	7860      	ldrb	r0, [r4, #1]
    3d26:	2102      	movs	r1, #2
    3d28:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    3d2a:	782b      	ldrb	r3, [r5, #0]
    3d2c:	786a      	ldrb	r2, [r5, #1]
    3d2e:	0212      	lsls	r2, r2, #8
    3d30:	431a      	orrs	r2, r3
    3d32:	78ab      	ldrb	r3, [r5, #2]
    3d34:	041b      	lsls	r3, r3, #16
    3d36:	4313      	orrs	r3, r2
    3d38:	78e9      	ldrb	r1, [r5, #3]
    3d3a:	0609      	lsls	r1, r1, #24
    3d3c:	4319      	orrs	r1, r3
    3d3e:	7928      	ldrb	r0, [r5, #4]
    3d40:	4b10      	ldr	r3, [pc, #64]	; (3d84 <dma_spi_transaction+0x88>)
    3d42:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    3d44:	7820      	ldrb	r0, [r4, #0]
    3d46:	4f10      	ldr	r7, [pc, #64]	; (3d88 <dma_spi_transaction+0x8c>)
    3d48:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    3d4a:	7860      	ldrb	r0, [r4, #1]
    3d4c:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    3d4e:	7860      	ldrb	r0, [r4, #1]
    3d50:	4b0e      	ldr	r3, [pc, #56]	; (3d8c <dma_spi_transaction+0x90>)
    3d52:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    3d54:	7820      	ldrb	r0, [r4, #0]
    3d56:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3d58:	7860      	ldrb	r0, [r4, #1]
    3d5a:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    3d5c:	782b      	ldrb	r3, [r5, #0]
    3d5e:	786a      	ldrb	r2, [r5, #1]
    3d60:	0212      	lsls	r2, r2, #8
    3d62:	431a      	orrs	r2, r3
    3d64:	78ab      	ldrb	r3, [r5, #2]
    3d66:	041b      	lsls	r3, r3, #16
    3d68:	4313      	orrs	r3, r2
    3d6a:	78e9      	ldrb	r1, [r5, #3]
    3d6c:	0609      	lsls	r1, r1, #24
    3d6e:	4319      	orrs	r1, r3
    3d70:	7928      	ldrb	r0, [r5, #4]
    3d72:	4b07      	ldr	r3, [pc, #28]	; (3d90 <dma_spi_transaction+0x94>)
    3d74:	4798      	blx	r3
    3d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d78:	000014d9 	.word	0x000014d9
    3d7c:	00002159 	.word	0x00002159
    3d80:	00001465 	.word	0x00001465
    3d84:	00001c69 	.word	0x00001c69
    3d88:	000014b1 	.word	0x000014b1
    3d8c:	00003e01 	.word	0x00003e01
    3d90:	00001c59 	.word	0x00001c59

00003d94 <rtos_dma_wait_until_end_callback>:
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3d94:	4b03      	ldr	r3, [pc, #12]	; (3da4 <rtos_dma_wait_until_end_callback+0x10>)
    3d96:	681b      	ldr	r3, [r3, #0]
    3d98:	6a1b      	ldr	r3, [r3, #32]
    3d9a:	7819      	ldrb	r1, [r3, #0]
    3d9c:	4a02      	ldr	r2, [pc, #8]	; (3da8 <rtos_dma_wait_until_end_callback+0x14>)
    3d9e:	233f      	movs	r3, #63	; 0x3f
    3da0:	54d1      	strb	r1, [r2, r3]
}
    3da2:	4770      	bx	lr
    3da4:	2000061c 	.word	0x2000061c
    3da8:	41004800 	.word	0x41004800

00003dac <rtos_dma_wait_until_end_or_timeout_callback>:
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_callback);
	current_process->data = data;
}

void rtos_dma_wait_until_end_or_timeout_callback() {
    3dac:	b510      	push	{r4, lr}
    3dae:	b082      	sub	sp, #8
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3db0:	4c0f      	ldr	r4, [pc, #60]	; (3df0 <rtos_dma_wait_until_end_or_timeout_callback+0x44>)
    3db2:	6823      	ldr	r3, [r4, #0]
    3db4:	6a1b      	ldr	r3, [r3, #32]
    3db6:	7819      	ldrb	r1, [r3, #0]
    3db8:	4a0e      	ldr	r2, [pc, #56]	; (3df4 <rtos_dma_wait_until_end_or_timeout_callback+0x48>)
    3dba:	233f      	movs	r3, #63	; 0x3f
    3dbc:	54d1      	strb	r1, [r2, r3]

	// Check whether timeout has occured
	volatile uint32_t time = time_read_ticks();
    3dbe:	4b0e      	ldr	r3, [pc, #56]	; (3df8 <rtos_dma_wait_until_end_or_timeout_callback+0x4c>)
    3dc0:	4798      	blx	r3
    3dc2:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    3dc4:	6822      	ldr	r2, [r4, #0]
    3dc6:	6953      	ldr	r3, [r2, #20]
    3dc8:	9901      	ldr	r1, [sp, #4]
    3dca:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    3dcc:	490b      	ldr	r1, [pc, #44]	; (3dfc <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    3dce:	6809      	ldr	r1, [r1, #0]
    3dd0:	4299      	cmp	r1, r3
    3dd2:	dc07      	bgt.n	3de4 <rtos_dma_wait_until_end_or_timeout_callback+0x38>
    3dd4:	4909      	ldr	r1, [pc, #36]	; (3dfc <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    3dd6:	6808      	ldr	r0, [r1, #0]
    3dd8:	4908      	ldr	r1, [pc, #32]	; (3dfc <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    3dda:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    3ddc:	2b00      	cmp	r3, #0
    3dde:	dd03      	ble.n	3de8 <rtos_dma_wait_until_end_or_timeout_callback+0x3c>
}
    3de0:	b002      	add	sp, #8
    3de2:	bd10      	pop	{r4, pc}
	min = (t < min) ? t : min;
    3de4:	0018      	movs	r0, r3
    3de6:	e7f7      	b.n	3dd8 <rtos_dma_wait_until_end_or_timeout_callback+0x2c>
	if (t <= 0) current_process->status = Process_State_Running;
    3de8:	2301      	movs	r3, #1
    3dea:	6193      	str	r3, [r2, #24]
}
    3dec:	e7f8      	b.n	3de0 <rtos_dma_wait_until_end_or_timeout_callback+0x34>
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	2000061c 	.word	0x2000061c
    3df4:	41004800 	.word	0x41004800
    3df8:	000022a1 	.word	0x000022a1
    3dfc:	2000009c 	.word	0x2000009c

00003e00 <rtos_dma_wait_until_end>:
void rtos_dma_wait_until_end(int channel) {
    3e00:	b570      	push	{r4, r5, r6, lr}
    3e02:	b084      	sub	sp, #16
    3e04:	9003      	str	r0, [sp, #12]
	void* data = current_process->data;
    3e06:	4c08      	ldr	r4, [pc, #32]	; (3e28 <rtos_dma_wait_until_end+0x28>)
    3e08:	6823      	ldr	r3, [r4, #0]
    3e0a:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    3e0c:	aa03      	add	r2, sp, #12
    3e0e:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    3e10:	4b06      	ldr	r3, [pc, #24]	; (3e2c <rtos_dma_wait_until_end+0x2c>)
    3e12:	9300      	str	r3, [sp, #0]
    3e14:	2300      	movs	r3, #0
    3e16:	2202      	movs	r2, #2
    3e18:	2102      	movs	r1, #2
    3e1a:	4805      	ldr	r0, [pc, #20]	; (3e30 <rtos_dma_wait_until_end+0x30>)
    3e1c:	4e05      	ldr	r6, [pc, #20]	; (3e34 <rtos_dma_wait_until_end+0x34>)
    3e1e:	47b0      	blx	r6
	current_process->data = data;
    3e20:	6823      	ldr	r3, [r4, #0]
    3e22:	621d      	str	r5, [r3, #32]
}
    3e24:	b004      	add	sp, #16
    3e26:	bd70      	pop	{r4, r5, r6, pc}
    3e28:	2000061c 	.word	0x2000061c
    3e2c:	00003d95 	.word	0x00003d95
    3e30:	4100484e 	.word	0x4100484e
    3e34:	00003329 	.word	0x00003329

00003e38 <rtos_dma_wait_until_end_or_timeout>:

void rtos_dma_wait_until_end_or_timeout(int channel, uint32_t timeout_ticks) {
    3e38:	b570      	push	{r4, r5, r6, lr}
    3e3a:	b084      	sub	sp, #16
    3e3c:	9003      	str	r0, [sp, #12]
    3e3e:	000c      	movs	r4, r1
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + timeout_ticks;
    3e40:	4b0a      	ldr	r3, [pc, #40]	; (3e6c <rtos_dma_wait_until_end_or_timeout+0x34>)
    3e42:	4798      	blx	r3
    3e44:	4d0a      	ldr	r5, [pc, #40]	; (3e70 <rtos_dma_wait_until_end_or_timeout+0x38>)
    3e46:	682b      	ldr	r3, [r5, #0]
    3e48:	1900      	adds	r0, r0, r4
    3e4a:	6158      	str	r0, [r3, #20]

	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    3e4c:	6a1c      	ldr	r4, [r3, #32]
	current_process->data = &channel;
    3e4e:	aa03      	add	r2, sp, #12
    3e50:	621a      	str	r2, [r3, #32]
	wait_until_callback_preserve_deadline(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    3e52:	4b08      	ldr	r3, [pc, #32]	; (3e74 <rtos_dma_wait_until_end_or_timeout+0x3c>)
    3e54:	9300      	str	r3, [sp, #0]
    3e56:	2300      	movs	r3, #0
    3e58:	2202      	movs	r2, #2
    3e5a:	2102      	movs	r1, #2
    3e5c:	4806      	ldr	r0, [pc, #24]	; (3e78 <rtos_dma_wait_until_end_or_timeout+0x40>)
    3e5e:	4e07      	ldr	r6, [pc, #28]	; (3e7c <rtos_dma_wait_until_end_or_timeout+0x44>)
    3e60:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_or_timeout_callback);
		
	current_process->data = data;
    3e62:	682b      	ldr	r3, [r5, #0]
    3e64:	621c      	str	r4, [r3, #32]
    3e66:	b004      	add	sp, #16
    3e68:	bd70      	pop	{r4, r5, r6, pc}
    3e6a:	46c0      	nop			; (mov r8, r8)
    3e6c:	000022a1 	.word	0x000022a1
    3e70:	2000061c 	.word	0x2000061c
    3e74:	00003dad 	.word	0x00003dad
    3e78:	4100484e 	.word	0x4100484e
    3e7c:	00003385 	.word	0x00003385

00003e80 <rtos_uart_start_send_buffer>:
#include "rtos_uart.h"
#include "Drivers/sercom.h"
#include "rtos_dma.h"

bool rtos_uart_start_send_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e82:	b087      	sub	sp, #28
    3e84:	0005      	movs	r5, r0
    3e86:	000c      	movs	r4, r1
    3e88:	0016      	movs	r6, r2
    3e8a:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3e8c:	4b12      	ldr	r3, [pc, #72]	; (3ed8 <rtos_uart_start_send_buffer+0x58>)
    3e8e:	4798      	blx	r3
    3e90:	1e07      	subs	r7, r0, #0
    3e92:	d102      	bne.n	3e9a <rtos_uart_start_send_buffer+0x1a>
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->txchannel);

    return true;
}
    3e94:	0038      	movs	r0, r7
    3e96:	b007      	add	sp, #28
    3e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3e9a:	7820      	ldrb	r0, [r4, #0]
    buffer, &(sercom->USART_INT.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
    3e9c:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3e9e:	0100      	lsls	r0, r0, #4
    3ea0:	4b0e      	ldr	r3, [pc, #56]	; (3edc <rtos_uart_start_send_buffer+0x5c>)
    3ea2:	18c0      	adds	r0, r0, r3
    3ea4:	2300      	movs	r3, #0
    3ea6:	9303      	str	r3, [sp, #12]
    3ea8:	9502      	str	r5, [sp, #8]
    3eaa:	9601      	str	r6, [sp, #4]
    3eac:	466b      	mov	r3, sp
    3eae:	8a9e      	ldrh	r6, [r3, #20]
    3eb0:	9600      	str	r6, [sp, #0]
    3eb2:	2300      	movs	r3, #0
    3eb4:	2200      	movs	r2, #0
    3eb6:	2101      	movs	r1, #1
    3eb8:	4d09      	ldr	r5, [pc, #36]	; (3ee0 <rtos_uart_start_send_buffer+0x60>)
    3eba:	47a8      	blx	r5
	dma_disable_channel(dmadesc->txchannel);
    3ebc:	7820      	ldrb	r0, [r4, #0]
    3ebe:	4b09      	ldr	r3, [pc, #36]	; (3ee4 <rtos_uart_start_send_buffer+0x64>)
    3ec0:	4798      	blx	r3
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    3ec2:	7923      	ldrb	r3, [r4, #4]
    3ec4:	78e2      	ldrb	r2, [r4, #3]
    3ec6:	7820      	ldrb	r0, [r4, #0]
    3ec8:	2102      	movs	r1, #2
    3eca:	4d07      	ldr	r5, [pc, #28]	; (3ee8 <rtos_uart_start_send_buffer+0x68>)
    3ecc:	47a8      	blx	r5
	dma_enable_channel(dmadesc->txchannel);
    3ece:	7820      	ldrb	r0, [r4, #0]
    3ed0:	4b06      	ldr	r3, [pc, #24]	; (3eec <rtos_uart_start_send_buffer+0x6c>)
    3ed2:	4798      	blx	r3
    return true;
    3ed4:	e7de      	b.n	3e94 <rtos_uart_start_send_buffer+0x14>
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	00001f55 	.word	0x00001f55
    3edc:	200003f0 	.word	0x200003f0
    3ee0:	000013f9 	.word	0x000013f9
    3ee4:	000014d9 	.word	0x000014d9
    3ee8:	00001465 	.word	0x00001465
    3eec:	000014b1 	.word	0x000014b1

00003ef0 <rtos_uart_wait_until_send_complete>:

void rtos_uart_wait_until_send_complete(DMA_Descriptor* dmadesc) {
    3ef0:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->txchannel);
    3ef2:	7800      	ldrb	r0, [r0, #0]
    3ef4:	4b01      	ldr	r3, [pc, #4]	; (3efc <rtos_uart_wait_until_send_complete+0xc>)
    3ef6:	4798      	blx	r3
}
    3ef8:	bd10      	pop	{r4, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	00003e01 	.word	0x00003e01

00003f00 <rtos_uart_start_read_buffer>:


bool rtos_uart_start_read_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f02:	b087      	sub	sp, #28
    3f04:	0005      	movs	r5, r0
    3f06:	000c      	movs	r4, r1
    3f08:	0016      	movs	r6, r2
    3f0a:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3f0c:	4b12      	ldr	r3, [pc, #72]	; (3f58 <rtos_uart_start_read_buffer+0x58>)
    3f0e:	4798      	blx	r3
    3f10:	1e07      	subs	r7, r0, #0
    3f12:	d102      	bne.n	3f1a <rtos_uart_start_read_buffer+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
}
    3f14:	0038      	movs	r0, r7
    3f16:	b007      	add	sp, #28
    3f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3f1a:	7860      	ldrb	r0, [r4, #1]
    &(sercom->USART_INT.SERCOM_DATA), buffer, DMA_NEXTDESCRIPTOR_NONE);
    3f1c:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3f1e:	0100      	lsls	r0, r0, #4
    3f20:	4b0e      	ldr	r3, [pc, #56]	; (3f5c <rtos_uart_start_read_buffer+0x5c>)
    3f22:	18c0      	adds	r0, r0, r3
    3f24:	2300      	movs	r3, #0
    3f26:	9303      	str	r3, [sp, #12]
    3f28:	9602      	str	r6, [sp, #8]
    3f2a:	9501      	str	r5, [sp, #4]
    3f2c:	466b      	mov	r3, sp
    3f2e:	8a9e      	ldrh	r6, [r3, #20]
    3f30:	9600      	str	r6, [sp, #0]
    3f32:	2300      	movs	r3, #0
    3f34:	2201      	movs	r2, #1
    3f36:	2100      	movs	r1, #0
    3f38:	4d09      	ldr	r5, [pc, #36]	; (3f60 <rtos_uart_start_read_buffer+0x60>)
    3f3a:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    3f3c:	7860      	ldrb	r0, [r4, #1]
    3f3e:	4b09      	ldr	r3, [pc, #36]	; (3f64 <rtos_uart_start_read_buffer+0x64>)
    3f40:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    3f42:	7923      	ldrb	r3, [r4, #4]
    3f44:	78a2      	ldrb	r2, [r4, #2]
    3f46:	7860      	ldrb	r0, [r4, #1]
    3f48:	2102      	movs	r1, #2
    3f4a:	4d07      	ldr	r5, [pc, #28]	; (3f68 <rtos_uart_start_read_buffer+0x68>)
    3f4c:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    3f4e:	7860      	ldrb	r0, [r4, #1]
    3f50:	4b06      	ldr	r3, [pc, #24]	; (3f6c <rtos_uart_start_read_buffer+0x6c>)
    3f52:	4798      	blx	r3
    return true;
    3f54:	e7de      	b.n	3f14 <rtos_uart_start_read_buffer+0x14>
    3f56:	46c0      	nop			; (mov r8, r8)
    3f58:	00001f55 	.word	0x00001f55
    3f5c:	200003f0 	.word	0x200003f0
    3f60:	000013f9 	.word	0x000013f9
    3f64:	000014d9 	.word	0x000014d9
    3f68:	00001465 	.word	0x00001465
    3f6c:	000014b1 	.word	0x000014b1

00003f70 <rtos_uart_wait_until_read_complete>:

void rtos_uart_wait_until_read_complete(DMA_Descriptor* dmadesc) {
    3f70:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->rxchannel);
    3f72:	7840      	ldrb	r0, [r0, #1]
    3f74:	4b01      	ldr	r3, [pc, #4]	; (3f7c <rtos_uart_wait_until_read_complete+0xc>)
    3f76:	4798      	blx	r3
}
    3f78:	bd10      	pop	{r4, pc}
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	00003e01 	.word	0x00003e01

00003f80 <rtos_uart_wait_until_read_complete_or_timeout>:

void rtos_uart_wait_until_read_complete_or_timeout(DMA_Descriptor* dmadesc, uint32_t timeout_ticks) {
    3f80:	b510      	push	{r4, lr}
    3f82:	0004      	movs	r4, r0
    rtos_dma_wait_until_end_or_timeout(dmadesc->rxchannel, timeout_ticks);
    3f84:	7840      	ldrb	r0, [r0, #1]
    3f86:	4b03      	ldr	r3, [pc, #12]	; (3f94 <rtos_uart_wait_until_read_complete_or_timeout+0x14>)
    3f88:	4798      	blx	r3

    dma_enable_channel(dmadesc->rxchannel);
    3f8a:	7860      	ldrb	r0, [r4, #1]
    3f8c:	4b02      	ldr	r3, [pc, #8]	; (3f98 <rtos_uart_wait_until_read_complete_or_timeout+0x18>)
    3f8e:	4798      	blx	r3
    3f90:	bd10      	pop	{r4, pc}
    3f92:	46c0      	nop			; (mov r8, r8)
    3f94:	00003e39 	.word	0x00003e39
    3f98:	000014b1 	.word	0x000014b1

00003f9c <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    3f9c:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    3f9e:	4b25      	ldr	r3, [pc, #148]	; (4034 <usb_proc_loop+0x98>)
    3fa0:	2200      	movs	r2, #0
    3fa2:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    3fa4:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    3fa6:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    3fa8:	70da      	strb	r2, [r3, #3]
    3faa:	e00f      	b.n	3fcc <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    3fac:	4c21      	ldr	r4, [pc, #132]	; (4034 <usb_proc_loop+0x98>)
    3fae:	68e0      	ldr	r0, [r4, #12]
    3fb0:	18c0      	adds	r0, r0, r3
    3fb2:	4b21      	ldr	r3, [pc, #132]	; (4038 <usb_proc_loop+0x9c>)
    3fb4:	4798      	blx	r3
    3fb6:	68a3      	ldr	r3, [r4, #8]
    3fb8:	181b      	adds	r3, r3, r0
    3fba:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    3fbc:	4b1d      	ldr	r3, [pc, #116]	; (4034 <usb_proc_loop+0x98>)
    3fbe:	78db      	ldrb	r3, [r3, #3]
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d003      	beq.n	3fcc <usb_proc_loop+0x30>
    3fc4:	4b1d      	ldr	r3, [pc, #116]	; (403c <usb_proc_loop+0xa0>)
    3fc6:	681b      	ldr	r3, [r3, #0]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d11f      	bne.n	400c <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    3fcc:	4c19      	ldr	r4, [pc, #100]	; (4034 <usb_proc_loop+0x98>)
    3fce:	2301      	movs	r3, #1
    3fd0:	22ff      	movs	r2, #255	; 0xff
    3fd2:	2100      	movs	r1, #0
    3fd4:	0020      	movs	r0, r4
    3fd6:	4d1a      	ldr	r5, [pc, #104]	; (4040 <usb_proc_loop+0xa4>)
    3fd8:	47a8      	blx	r5
		usb_interrupt = false;
    3fda:	2300      	movs	r3, #0
    3fdc:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    3fde:	7863      	ldrb	r3, [r4, #1]
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d125      	bne.n	4030 <usb_proc_loop+0x94>
		usb_handle_function();
    3fe4:	4b17      	ldr	r3, [pc, #92]	; (4044 <usb_proc_loop+0xa8>)
    3fe6:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    3fe8:	4b12      	ldr	r3, [pc, #72]	; (4034 <usb_proc_loop+0x98>)
    3fea:	789b      	ldrb	r3, [r3, #2]
    3fec:	2b00      	cmp	r3, #0
    3fee:	d0e5      	beq.n	3fbc <usb_proc_loop+0x20>
    3ff0:	4b15      	ldr	r3, [pc, #84]	; (4048 <usb_proc_loop+0xac>)
    3ff2:	781b      	ldrb	r3, [r3, #0]
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d1e1      	bne.n	3fbc <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    3ff8:	4b0e      	ldr	r3, [pc, #56]	; (4034 <usb_proc_loop+0x98>)
    3ffa:	685a      	ldr	r2, [r3, #4]
    3ffc:	689b      	ldr	r3, [r3, #8]
    3ffe:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    4000:	429a      	cmp	r2, r3
    4002:	d1d3      	bne.n	3fac <usb_proc_loop+0x10>
    4004:	4b0b      	ldr	r3, [pc, #44]	; (4034 <usb_proc_loop+0x98>)
    4006:	2200      	movs	r2, #0
    4008:	709a      	strb	r2, [r3, #2]
    400a:	e7d7      	b.n	3fbc <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    400c:	4b0b      	ldr	r3, [pc, #44]	; (403c <usb_proc_loop+0xa0>)
    400e:	6819      	ldr	r1, [r3, #0]
    4010:	4c08      	ldr	r4, [pc, #32]	; (4034 <usb_proc_loop+0x98>)
    4012:	6920      	ldr	r0, [r4, #16]
    4014:	6963      	ldr	r3, [r4, #20]
    4016:	18c0      	adds	r0, r0, r3
    4018:	4b0c      	ldr	r3, [pc, #48]	; (404c <usb_proc_loop+0xb0>)
    401a:	4798      	blx	r3
    401c:	6963      	ldr	r3, [r4, #20]
    401e:	18c0      	adds	r0, r0, r3
    4020:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    4022:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    4024:	4298      	cmp	r0, r3
    4026:	d1d1      	bne.n	3fcc <usb_proc_loop+0x30>
    4028:	4b02      	ldr	r3, [pc, #8]	; (4034 <usb_proc_loop+0x98>)
    402a:	2200      	movs	r2, #0
    402c:	70da      	strb	r2, [r3, #3]
    402e:	e7cd      	b.n	3fcc <usb_proc_loop+0x30>
		}
	}
}
    4030:	bd70      	pop	{r4, r5, r6, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	20000690 	.word	0x20000690
    4038:	00002bd5 	.word	0x00002bd5
    403c:	20000548 	.word	0x20000548
    4040:	000032cd 	.word	0x000032cd
    4044:	00002a41 	.word	0x00002a41
    4048:	20000544 	.word	0x20000544
    404c:	00002c11 	.word	0x00002c11

00004050 <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    4050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4052:	46ce      	mov	lr, r9
    4054:	4647      	mov	r7, r8
    4056:	b580      	push	{r7, lr}
    4058:	0006      	movs	r6, r0
    405a:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    405c:	4f15      	ldr	r7, [pc, #84]	; (40b4 <rtos_usb_init+0x64>)
    405e:	2580      	movs	r5, #128	; 0x80
    4060:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    4062:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4066:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    406a:	22c0      	movs	r2, #192	; 0xc0
    406c:	0492      	lsls	r2, r2, #18
    406e:	2106      	movs	r1, #6
    4070:	2000      	movs	r0, #0
    4072:	4b11      	ldr	r3, [pc, #68]	; (40b8 <rtos_usb_init+0x68>)
    4074:	4798      	blx	r3
	usb_init();
    4076:	4b11      	ldr	r3, [pc, #68]	; (40bc <rtos_usb_init+0x6c>)
    4078:	4798      	blx	r3
	usb_attach();
    407a:	4b11      	ldr	r3, [pc, #68]	; (40c0 <rtos_usb_init+0x70>)
    407c:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    407e:	4911      	ldr	r1, [pc, #68]	; (40c4 <rtos_usb_init+0x74>)
    4080:	4c11      	ldr	r4, [pc, #68]	; (40c8 <rtos_usb_init+0x78>)
    4082:	231c      	movs	r3, #28
    4084:	4699      	mov	r9, r3
    4086:	44a1      	add	r9, r4
    4088:	4643      	mov	r3, r8
    408a:	0032      	movs	r2, r6
    408c:	4648      	mov	r0, r9
    408e:	4e0f      	ldr	r6, [pc, #60]	; (40cc <rtos_usb_init+0x7c>)
    4090:	47b0      	blx	r6
	dispatch_process(&usbproc);
    4092:	4648      	mov	r0, r9
    4094:	4b0e      	ldr	r3, [pc, #56]	; (40d0 <rtos_usb_init+0x80>)
    4096:	4798      	blx	r3
	wait_until_started(&usbproc);
    4098:	2201      	movs	r2, #1
    409a:	0020      	movs	r0, r4
    409c:	3034      	adds	r0, #52	; 0x34
    409e:	2301      	movs	r3, #1
    40a0:	4252      	negs	r2, r2
    40a2:	2100      	movs	r1, #0
    40a4:	4c0b      	ldr	r4, [pc, #44]	; (40d4 <rtos_usb_init+0x84>)
    40a6:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40a8:	603d      	str	r5, [r7, #0]
}
    40aa:	bcc0      	pop	{r6, r7}
    40ac:	46b9      	mov	r9, r7
    40ae:	46b0      	mov	r8, r6
    40b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	e000e100 	.word	0xe000e100
    40b8:	00001c79 	.word	0x00001c79
    40bc:	00002685 	.word	0x00002685
    40c0:	000029e5 	.word	0x000029e5
    40c4:	00003f9d 	.word	0x00003f9d
    40c8:	20000690 	.word	0x20000690
    40cc:	00002f61 	.word	0x00002f61
    40d0:	00003049 	.word	0x00003049
    40d4:	000032cd 	.word	0x000032cd

000040d8 <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40d8:	2380      	movs	r3, #128	; 0x80
    40da:	4a05      	ldr	r2, [pc, #20]	; (40f0 <USB_Handler+0x18>)
    40dc:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    40de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    40e2:	f3bf 8f6f 	isb	sy

void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);
	
	usb_interrupt = true;
    40e6:	4b03      	ldr	r3, [pc, #12]	; (40f4 <USB_Handler+0x1c>)
    40e8:	2201      	movs	r2, #1
    40ea:	701a      	strb	r2, [r3, #0]
}
    40ec:	4770      	bx	lr
    40ee:	46c0      	nop			; (mov r8, r8)
    40f0:	e000e100 	.word	0xe000e100
    40f4:	20000690 	.word	0x20000690

000040f8 <rtos_usb_start_send_buffer>:
	usb_quit = true;
	join_process(&usbproc);
}


void rtos_usb_start_send_buffer(uint8_t* buffer, int count) {
    40f8:	b570      	push	{r4, r5, r6, lr}
    40fa:	0005      	movs	r5, r0
    40fc:	000e      	movs	r6, r1
	// if send operation is currently in progress wait until it finishes
	if (usb_send_status) wait_until_false(&usb_send_status);
    40fe:	4b0d      	ldr	r3, [pc, #52]	; (4134 <rtos_usb_start_send_buffer+0x3c>)
    4100:	789b      	ldrb	r3, [r3, #2]
    4102:	2b00      	cmp	r3, #0
    4104:	d10e      	bne.n	4124 <rtos_usb_start_send_buffer+0x2c>
	usb_send_buffer = buffer;
    4106:	4c0b      	ldr	r4, [pc, #44]	; (4134 <rtos_usb_start_send_buffer+0x3c>)
    4108:	60e5      	str	r5, [r4, #12]
	usb_send_buffer_count = count;
    410a:	6066      	str	r6, [r4, #4]
	usb_send_bytes_sent = 0;
    410c:	2300      	movs	r3, #0
    410e:	60a3      	str	r3, [r4, #8]
	usb_send_status = true;
    4110:	3301      	adds	r3, #1
    4112:	70a3      	strb	r3, [r4, #2]
	// start send
	usb_send_bytes_sent += usb_serial_send_buffer(buffer, count);
    4114:	0031      	movs	r1, r6
    4116:	0028      	movs	r0, r5
    4118:	4b07      	ldr	r3, [pc, #28]	; (4138 <rtos_usb_start_send_buffer+0x40>)
    411a:	4798      	blx	r3
    411c:	68a3      	ldr	r3, [r4, #8]
    411e:	181b      	adds	r3, r3, r0
    4120:	60a3      	str	r3, [r4, #8]
}
    4122:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_send_status) wait_until_false(&usb_send_status);
    4124:	4805      	ldr	r0, [pc, #20]	; (413c <rtos_usb_start_send_buffer+0x44>)
    4126:	2300      	movs	r3, #0
    4128:	22ff      	movs	r2, #255	; 0xff
    412a:	2100      	movs	r1, #0
    412c:	4c04      	ldr	r4, [pc, #16]	; (4140 <rtos_usb_start_send_buffer+0x48>)
    412e:	47a0      	blx	r4
    4130:	e7e9      	b.n	4106 <rtos_usb_start_send_buffer+0xe>
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	20000690 	.word	0x20000690
    4138:	00002bd5 	.word	0x00002bd5
    413c:	20000692 	.word	0x20000692
    4140:	000032cd 	.word	0x000032cd

00004144 <rtos_usb_wait_until_send_complete>:

int rtos_usb_wait_until_send_complete() {
    4144:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_send_status);
    4146:	4c04      	ldr	r4, [pc, #16]	; (4158 <rtos_usb_wait_until_send_complete+0x14>)
    4148:	1ca0      	adds	r0, r4, #2
    414a:	2300      	movs	r3, #0
    414c:	22ff      	movs	r2, #255	; 0xff
    414e:	2100      	movs	r1, #0
    4150:	4d02      	ldr	r5, [pc, #8]	; (415c <rtos_usb_wait_until_send_complete+0x18>)
    4152:	47a8      	blx	r5
	return usb_send_bytes_sent;
    4154:	68a0      	ldr	r0, [r4, #8]
}
    4156:	bd70      	pop	{r4, r5, r6, pc}
    4158:	20000690 	.word	0x20000690
    415c:	000032cd 	.word	0x000032cd

00004160 <rtos_usb_start_read_buffer>:


void rtos_usb_start_read_buffer(uint8_t* buffer, int count) {
    4160:	b570      	push	{r4, r5, r6, lr}
    4162:	0005      	movs	r5, r0
    4164:	000c      	movs	r4, r1
	// if read operation is currently in progress wait until it finishes
	if (usb_read_status) wait_until_false(&usb_read_status);
    4166:	4b09      	ldr	r3, [pc, #36]	; (418c <rtos_usb_start_read_buffer+0x2c>)
    4168:	78db      	ldrb	r3, [r3, #3]
    416a:	2b00      	cmp	r3, #0
    416c:	d107      	bne.n	417e <rtos_usb_start_read_buffer+0x1e>
	usb_read_buffer = buffer;
    416e:	4b07      	ldr	r3, [pc, #28]	; (418c <rtos_usb_start_read_buffer+0x2c>)
    4170:	611d      	str	r5, [r3, #16]
	usb_read_buffer_count = count;
    4172:	619c      	str	r4, [r3, #24]
	usb_read_bytes_read = 0;
    4174:	2200      	movs	r2, #0
    4176:	615a      	str	r2, [r3, #20]
	usb_read_status = true;
    4178:	3201      	adds	r2, #1
    417a:	70da      	strb	r2, [r3, #3]
}
    417c:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_read_status) wait_until_false(&usb_read_status);
    417e:	4804      	ldr	r0, [pc, #16]	; (4190 <rtos_usb_start_read_buffer+0x30>)
    4180:	2300      	movs	r3, #0
    4182:	22ff      	movs	r2, #255	; 0xff
    4184:	2100      	movs	r1, #0
    4186:	4e03      	ldr	r6, [pc, #12]	; (4194 <rtos_usb_start_read_buffer+0x34>)
    4188:	47b0      	blx	r6
    418a:	e7f0      	b.n	416e <rtos_usb_start_read_buffer+0xe>
    418c:	20000690 	.word	0x20000690
    4190:	20000693 	.word	0x20000693
    4194:	000032cd 	.word	0x000032cd

00004198 <rtos_usb_wait_until_read_complete>:

int rtos_usb_wait_until_read_complete() {
    4198:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_read_status);
    419a:	4c04      	ldr	r4, [pc, #16]	; (41ac <rtos_usb_wait_until_read_complete+0x14>)
    419c:	1ce0      	adds	r0, r4, #3
    419e:	2300      	movs	r3, #0
    41a0:	22ff      	movs	r2, #255	; 0xff
    41a2:	2100      	movs	r1, #0
    41a4:	4d02      	ldr	r5, [pc, #8]	; (41b0 <rtos_usb_wait_until_read_complete+0x18>)
    41a6:	47a8      	blx	r5
	return usb_read_bytes_read;
    41a8:	6960      	ldr	r0, [r4, #20]
}
    41aa:	bd70      	pop	{r4, r5, r6, pc}
    41ac:	20000690 	.word	0x20000690
    41b0:	000032cd 	.word	0x000032cd

000041b4 <CRC8>:
#include "gnclink.h"

const uint8_t CRC8_LUT_L[] = { 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D };
const uint8_t CRC8_LUT_H[] = { 0x00, 0x70, 0xE0, 0x90, 0xC7, 0xB7, 0x27, 0x57, 0x89, 0xF9, 0x69, 0x19, 0x4E, 0x3E, 0xAE, 0xDE };

uint8_t CRC8(uint8_t* data, int length) {
    41b4:	b570      	push	{r4, r5, r6, lr}
    41b6:	0006      	movs	r6, r0
	uint8_t crc = 0;
	for (int index = 0; index < length; ++index) {
    41b8:	2400      	movs	r4, #0
	uint8_t crc = 0;
    41ba:	2000      	movs	r0, #0
	for (int index = 0; index < length; ++index) {
    41bc:	e00a      	b.n	41d4 <CRC8+0x20>
		crc ^= data[index];
    41be:	5d33      	ldrb	r3, [r6, r4]
    41c0:	4043      	eors	r3, r0
		crc = CRC8_LUT_L[crc & 0xF] ^ CRC8_LUT_H[crc >> 4];
    41c2:	250f      	movs	r5, #15
    41c4:	401d      	ands	r5, r3
    41c6:	4a05      	ldr	r2, [pc, #20]	; (41dc <CRC8+0x28>)
    41c8:	5d50      	ldrb	r0, [r2, r5]
    41ca:	091b      	lsrs	r3, r3, #4
    41cc:	18d2      	adds	r2, r2, r3
    41ce:	7c13      	ldrb	r3, [r2, #16]
    41d0:	4058      	eors	r0, r3
	for (int index = 0; index < length; ++index) {
    41d2:	3401      	adds	r4, #1
    41d4:	428c      	cmp	r4, r1
    41d6:	dbf2      	blt.n	41be <CRC8+0xa>
	}
	return crc;
}
    41d8:	bd70      	pop	{r4, r5, r6, pc}
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	000058d0 	.word	0x000058d0

000041e0 <GNClink_Get_Packet_Payload_Pointer>:

uint8_t* GNClink_Get_Packet_Payload_Pointer(uint8_t* packetPointer) {
	return packetPointer + GNCLINK_PACKET_HEADER_LENGTH;
    41e0:	3004      	adds	r0, #4
}
    41e2:	4770      	bx	lr

000041e4 <GNClink_Construct_Packet>:

bool GNClink_Construct_Packet(uint8_t* packetPointer, GNClink_PacketType packetType, GNClink_PacketFlags packetFlags, int payloadSize) {
    41e4:	b570      	push	{r4, r5, r6, lr}
    41e6:	000c      	movs	r4, r1
	// validate inputs
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    41e8:	2b3b      	cmp	r3, #59	; 0x3b
    41ea:	d80c      	bhi.n	4206 <GNClink_Construct_Packet+0x22>

	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;
	// get pointer to footer
	GNClink_PacketFooter* footer = (GNClink_PacketFooter*)(packetPointer + GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    41ec:	1d19      	adds	r1, r3, #4
    41ee:	1845      	adds	r5, r0, r1

	// populate header
	header->magic = GNCLINK_PACKET_MAGIC;
    41f0:	26ac      	movs	r6, #172	; 0xac
    41f2:	7006      	strb	r6, [r0, #0]
	header->packetType = packetType;
    41f4:	7044      	strb	r4, [r0, #1]
	header->packetFlags = packetFlags;
    41f6:	7082      	strb	r2, [r0, #2]
	header->packetLength = payloadSize + GNCLINK_PACKET_HEADER_LENGTH + GNCLINK_PACKET_FOOTER_LENGTH;
    41f8:	3305      	adds	r3, #5
    41fa:	70c3      	strb	r3, [r0, #3]

	// populate footer
	footer->crc = CRC8(packetPointer, GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    41fc:	4b03      	ldr	r3, [pc, #12]	; (420c <GNClink_Construct_Packet+0x28>)
    41fe:	4798      	blx	r3
    4200:	7028      	strb	r0, [r5, #0]

	return true;
    4202:	2001      	movs	r0, #1
}
    4204:	bd70      	pop	{r4, r5, r6, pc}
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    4206:	2000      	movs	r0, #0
    4208:	e7fc      	b.n	4204 <GNClink_Construct_Packet+0x20>
    420a:	46c0      	nop			; (mov r8, r8)
    420c:	000041b5 	.word	0x000041b5

00004210 <GNClink_Check_Packet>:

bool GNClink_Check_Packet(uint8_t* packetPointer) {
    4210:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	// check magic
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    4212:	7803      	ldrb	r3, [r0, #0]
    4214:	2bac      	cmp	r3, #172	; 0xac
    4216:	d10a      	bne.n	422e <GNClink_Check_Packet+0x1e>

	// check packet length
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4218:	78c1      	ldrb	r1, [r0, #3]
    421a:	1f4b      	subs	r3, r1, #5
    421c:	b2db      	uxtb	r3, r3
    421e:	2b3b      	cmp	r3, #59	; 0x3b
    4220:	d807      	bhi.n	4232 <GNClink_Check_Packet+0x22>

	// check CRC
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    4222:	4b06      	ldr	r3, [pc, #24]	; (423c <GNClink_Check_Packet+0x2c>)
    4224:	4798      	blx	r3
    4226:	2800      	cmp	r0, #0
    4228:	d105      	bne.n	4236 <GNClink_Check_Packet+0x26>

	// all checks passed, return true
	return true;
    422a:	3001      	adds	r0, #1
    422c:	e000      	b.n	4230 <GNClink_Check_Packet+0x20>
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    422e:	2000      	movs	r0, #0
}
    4230:	bd10      	pop	{r4, pc}
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4232:	2000      	movs	r0, #0
    4234:	e7fc      	b.n	4230 <GNClink_Check_Packet+0x20>
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    4236:	2000      	movs	r0, #0
    4238:	e7fa      	b.n	4230 <GNClink_Check_Packet+0x20>
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	000041b5 	.word	0x000041b5

00004240 <GNClink_Get_Packet_Type>:

GNClink_PacketType GNClink_Get_Packet_Type(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetType;
    4240:	7840      	ldrb	r0, [r0, #1]
}
    4242:	4770      	bx	lr

00004244 <GNClink_Get_Packet_Flags>:

GNClink_PacketFlags GNClink_Get_Packet_Flags(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetFlags;
    4244:	7880      	ldrb	r0, [r0, #2]
}
    4246:	4770      	bx	lr

00004248 <GNClink_Get_Frame_Payload_Pointer>:


uint8_t* GNClink_Get_Frame_Payload_Pointer(uint8_t* framePointer) {
	return framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    4248:	3003      	adds	r0, #3
}
    424a:	4770      	bx	lr

0000424c <GNClink_Get_Frame>:

bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    424e:	000e      	movs	r6, r1
	// get pointer to packet header
	GNClink_PacketHeader* packetHeader = (GNClink_PacketHeader*)packetPointer;

	// check packet length
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4250:	78c1      	ldrb	r1, [r0, #3]
    4252:	1f4c      	subs	r4, r1, #5
    4254:	b2e4      	uxtb	r4, r4
    4256:	2c3b      	cmp	r4, #59	; 0x3b
    4258:	d832      	bhi.n	42c0 <GNClink_Get_Frame+0x74>

	// calculate number of frames for packet
	int frameCount = (packetHeader->packetLength + GNCLINK_FRAME_PAYLOAD_LENGTH - 1) / GNCLINK_FRAME_PAYLOAD_LENGTH;
    425a:	310f      	adds	r1, #15
    425c:	1109      	asrs	r1, r1, #4
	*moreFrames = frameIndex < frameCount - 1;
    425e:	1e4d      	subs	r5, r1, #1
    4260:	2401      	movs	r4, #1
    4262:	429d      	cmp	r5, r3
    4264:	dc00      	bgt.n	4268 <GNClink_Get_Frame+0x1c>
    4266:	2400      	movs	r4, #0
    4268:	9d06      	ldr	r5, [sp, #24]
    426a:	702c      	strb	r4, [r5, #0]

	// check index is valid
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    426c:	2b00      	cmp	r3, #0
    426e:	db29      	blt.n	42c4 <GNClink_Get_Frame+0x78>
    4270:	4299      	cmp	r1, r3
    4272:	dd29      	ble.n	42c8 <GNClink_Get_Frame+0x7c>
	// get pointer to frame header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    4274:	1cf7      	adds	r7, r6, #3

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    4276:	24ae      	movs	r4, #174	; 0xae
    4278:	7034      	strb	r4, [r6, #0]
	header->index = frameIndex;
    427a:	7073      	strb	r3, [r6, #1]
	header->flags = flags;
    427c:	70b2      	strb	r2, [r6, #2]
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    427e:	1c5c      	adds	r4, r3, #1
    4280:	428c      	cmp	r4, r1
    4282:	d00c      	beq.n	429e <GNClink_Get_Frame+0x52>
bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    4284:	2200      	movs	r2, #0

	// populate payload
	int i = 0;
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4286:	2a0f      	cmp	r2, #15
    4288:	dc11      	bgt.n	42ae <GNClink_Get_Frame+0x62>
    428a:	78c5      	ldrb	r5, [r0, #3]
    428c:	011c      	lsls	r4, r3, #4
    428e:	1b2d      	subs	r5, r5, r4
    4290:	4295      	cmp	r5, r2
    4292:	dd0c      	ble.n	42ae <GNClink_Get_Frame+0x62>
		payload[i] = packetPointer[i + GNCLINK_FRAME_PAYLOAD_LENGTH * frameIndex];
    4294:	18a4      	adds	r4, r4, r2
    4296:	5d01      	ldrb	r1, [r0, r4]
    4298:	54b9      	strb	r1, [r7, r2]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    429a:	3201      	adds	r2, #1
    429c:	e7f3      	b.n	4286 <GNClink_Get_Frame+0x3a>
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    429e:	2102      	movs	r1, #2
    42a0:	430a      	orrs	r2, r1
    42a2:	70b2      	strb	r2, [r6, #2]
    42a4:	e7ee      	b.n	4284 <GNClink_Get_Frame+0x38>
	}
	// populate the rest with zeros
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
		payload[i] = 0;
    42a6:	18bb      	adds	r3, r7, r2
    42a8:	2100      	movs	r1, #0
    42aa:	7019      	strb	r1, [r3, #0]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    42ac:	3201      	adds	r2, #1
    42ae:	2a0f      	cmp	r2, #15
    42b0:	ddf9      	ble.n	42a6 <GNClink_Get_Frame+0x5a>
	}

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    42b2:	2113      	movs	r1, #19
    42b4:	0030      	movs	r0, r6
    42b6:	4b05      	ldr	r3, [pc, #20]	; (42cc <GNClink_Get_Frame+0x80>)
    42b8:	4798      	blx	r3
    42ba:	74f0      	strb	r0, [r6, #19]

	return true;
    42bc:	2001      	movs	r0, #1
    42be:	e000      	b.n	42c2 <GNClink_Get_Frame+0x76>
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    42c0:	2000      	movs	r0, #0
}
    42c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    42c4:	2000      	movs	r0, #0
    42c6:	e7fc      	b.n	42c2 <GNClink_Get_Frame+0x76>
    42c8:	2000      	movs	r0, #0
    42ca:	e7fa      	b.n	42c2 <GNClink_Get_Frame+0x76>
    42cc:	000041b5 	.word	0x000041b5

000042d0 <GNClink_Check_Frame>:

bool GNClink_Check_Frame(uint8_t* framePointer) {
    42d0:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	// check magic
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    42d2:	7803      	ldrb	r3, [r0, #0]
    42d4:	2bae      	cmp	r3, #174	; 0xae
    42d6:	d109      	bne.n	42ec <GNClink_Check_Frame+0x1c>

	// check index
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    42d8:	7843      	ldrb	r3, [r0, #1]
    42da:	2b03      	cmp	r3, #3
    42dc:	d808      	bhi.n	42f0 <GNClink_Check_Frame+0x20>

	// check CRC
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    42de:	2114      	movs	r1, #20
    42e0:	4b05      	ldr	r3, [pc, #20]	; (42f8 <GNClink_Check_Frame+0x28>)
    42e2:	4798      	blx	r3
    42e4:	2800      	cmp	r0, #0
    42e6:	d105      	bne.n	42f4 <GNClink_Check_Frame+0x24>

	// all checks passed, return true
	return true;
    42e8:	3001      	adds	r0, #1
    42ea:	e000      	b.n	42ee <GNClink_Check_Frame+0x1e>
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    42ec:	2000      	movs	r0, #0
}
    42ee:	bd10      	pop	{r4, pc}
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    42f0:	2000      	movs	r0, #0
    42f2:	e7fc      	b.n	42ee <GNClink_Check_Frame+0x1e>
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    42f4:	2000      	movs	r0, #0
    42f6:	e7fa      	b.n	42ee <GNClink_Check_Frame+0x1e>
    42f8:	000041b5 	.word	0x000041b5

000042fc <GNClink_Frame_RequestResend>:

bool GNClink_Frame_RequestResend(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (header->flags & GNClink_FrameFlags_RequestResend) != 0;
    42fc:	7883      	ldrb	r3, [r0, #2]
    42fe:	089b      	lsrs	r3, r3, #2
    4300:	2001      	movs	r0, #1
    4302:	4018      	ands	r0, r3
}
    4304:	4770      	bx	lr

00004306 <GNClink_Get_Frame_Index>:

int GNClink_Get_Frame_Index(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (int)header->index;
    4306:	7840      	ldrb	r0, [r0, #1]
}
    4308:	4770      	bx	lr
	...

0000430c <GNClink_Construct_RequestResendFrame>:

void GNClink_Construct_RequestResendFrame(uint8_t* framePointer) {
    430c:	b510      	push	{r4, lr}
    430e:	0004      	movs	r4, r0
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    4310:	23ae      	movs	r3, #174	; 0xae
    4312:	7003      	strb	r3, [r0, #0]
	header->index = 0;
    4314:	2300      	movs	r3, #0
    4316:	7043      	strb	r3, [r0, #1]
	header->flags = GNClink_FrameFlags_RequestResend;
    4318:	3304      	adds	r3, #4
    431a:	7083      	strb	r3, [r0, #2]

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    431c:	2113      	movs	r1, #19
    431e:	4b02      	ldr	r3, [pc, #8]	; (4328 <GNClink_Construct_RequestResendFrame+0x1c>)
    4320:	4798      	blx	r3
    4322:	74e0      	strb	r0, [r4, #19]
}
    4324:	bd10      	pop	{r4, pc}
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	000041b5 	.word	0x000041b5

0000432c <GNClink_Reconstruct_Packet_From_Frames>:


bool GNClink_Reconstruct_Packet_From_Frames(uint8_t* framePointer, uint8_t* packetPointer, bool* moreFrames) {
    432c:	b530      	push	{r4, r5, lr}
	// get pointer to frame footer
	//GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    432e:	2400      	movs	r4, #0
    4330:	2c0f      	cmp	r4, #15
    4332:	dc09      	bgt.n	4348 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
    4334:	7843      	ldrb	r3, [r0, #1]
    4336:	011b      	lsls	r3, r3, #4
    4338:	191b      	adds	r3, r3, r4
    433a:	2b3f      	cmp	r3, #63	; 0x3f
    433c:	dc04      	bgt.n	4348 <GNClink_Reconstruct_Packet_From_Frames+0x1c>
		packetPointer[i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH] = payload[i];
    433e:	1905      	adds	r5, r0, r4
    4340:	78ed      	ldrb	r5, [r5, #3]
    4342:	54cd      	strb	r5, [r1, r3]
	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    4344:	3401      	adds	r4, #1
    4346:	e7f3      	b.n	4330 <GNClink_Reconstruct_Packet_From_Frames+0x4>
	}

	*moreFrames = (header->flags & GNClink_FrameFlags_TransactionEnd) == 0;
    4348:	7883      	ldrb	r3, [r0, #2]
    434a:	085b      	lsrs	r3, r3, #1
    434c:	2101      	movs	r1, #1
    434e:	404b      	eors	r3, r1
    4350:	2101      	movs	r1, #1
    4352:	400b      	ands	r3, r1
    4354:	7013      	strb	r3, [r2, #0]

	return true;
    4356:	2001      	movs	r0, #1
    4358:	bd30      	pop	{r4, r5, pc}
	...

0000435c <fp_multiply>:
#include <fixedpoint_defs.h>

fp32_t fp_multiply(fp32_t a, fp32_t b) {
    435c:	b510      	push	{r4, lr}
    435e:	000a      	movs	r2, r1
    fp_long c = (fp_long)a * b;
    4360:	17c1      	asrs	r1, r0, #31
    4362:	17d3      	asrs	r3, r2, #31
    4364:	4c02      	ldr	r4, [pc, #8]	; (4370 <fp_multiply+0x14>)
    4366:	47a0      	blx	r4
    return c >> 16;
    4368:	0409      	lsls	r1, r1, #16
    436a:	0c00      	lsrs	r0, r0, #16
    436c:	4308      	orrs	r0, r1
    436e:	bd10      	pop	{r4, pc}
    4370:	000043e9 	.word	0x000043e9

00004374 <__aeabi_cfrcmple>:
    4374:	4684      	mov	ip, r0
    4376:	0008      	movs	r0, r1
    4378:	4661      	mov	r1, ip
    437a:	e7ff      	b.n	437c <__aeabi_cfcmpeq>

0000437c <__aeabi_cfcmpeq>:
    437c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    437e:	f000 fb93 	bl	4aa8 <__lesf2>
    4382:	2800      	cmp	r0, #0
    4384:	d401      	bmi.n	438a <__aeabi_cfcmpeq+0xe>
    4386:	2100      	movs	r1, #0
    4388:	42c8      	cmn	r0, r1
    438a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000438c <__aeabi_fcmpeq>:
    438c:	b510      	push	{r4, lr}
    438e:	f000 fb13 	bl	49b8 <__eqsf2>
    4392:	4240      	negs	r0, r0
    4394:	3001      	adds	r0, #1
    4396:	bd10      	pop	{r4, pc}

00004398 <__aeabi_fcmplt>:
    4398:	b510      	push	{r4, lr}
    439a:	f000 fb85 	bl	4aa8 <__lesf2>
    439e:	2800      	cmp	r0, #0
    43a0:	db01      	blt.n	43a6 <__aeabi_fcmplt+0xe>
    43a2:	2000      	movs	r0, #0
    43a4:	bd10      	pop	{r4, pc}
    43a6:	2001      	movs	r0, #1
    43a8:	bd10      	pop	{r4, pc}
    43aa:	46c0      	nop			; (mov r8, r8)

000043ac <__aeabi_fcmple>:
    43ac:	b510      	push	{r4, lr}
    43ae:	f000 fb7b 	bl	4aa8 <__lesf2>
    43b2:	2800      	cmp	r0, #0
    43b4:	dd01      	ble.n	43ba <__aeabi_fcmple+0xe>
    43b6:	2000      	movs	r0, #0
    43b8:	bd10      	pop	{r4, pc}
    43ba:	2001      	movs	r0, #1
    43bc:	bd10      	pop	{r4, pc}
    43be:	46c0      	nop			; (mov r8, r8)

000043c0 <__aeabi_fcmpgt>:
    43c0:	b510      	push	{r4, lr}
    43c2:	f000 fb21 	bl	4a08 <__gesf2>
    43c6:	2800      	cmp	r0, #0
    43c8:	dc01      	bgt.n	43ce <__aeabi_fcmpgt+0xe>
    43ca:	2000      	movs	r0, #0
    43cc:	bd10      	pop	{r4, pc}
    43ce:	2001      	movs	r0, #1
    43d0:	bd10      	pop	{r4, pc}
    43d2:	46c0      	nop			; (mov r8, r8)

000043d4 <__aeabi_fcmpge>:
    43d4:	b510      	push	{r4, lr}
    43d6:	f000 fb17 	bl	4a08 <__gesf2>
    43da:	2800      	cmp	r0, #0
    43dc:	da01      	bge.n	43e2 <__aeabi_fcmpge+0xe>
    43de:	2000      	movs	r0, #0
    43e0:	bd10      	pop	{r4, pc}
    43e2:	2001      	movs	r0, #1
    43e4:	bd10      	pop	{r4, pc}
    43e6:	46c0      	nop			; (mov r8, r8)

000043e8 <__aeabi_lmul>:
    43e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ea:	46ce      	mov	lr, r9
    43ec:	4699      	mov	r9, r3
    43ee:	0c03      	lsrs	r3, r0, #16
    43f0:	469c      	mov	ip, r3
    43f2:	0413      	lsls	r3, r2, #16
    43f4:	4647      	mov	r7, r8
    43f6:	0c1b      	lsrs	r3, r3, #16
    43f8:	001d      	movs	r5, r3
    43fa:	000e      	movs	r6, r1
    43fc:	4661      	mov	r1, ip
    43fe:	0404      	lsls	r4, r0, #16
    4400:	0c24      	lsrs	r4, r4, #16
    4402:	b580      	push	{r7, lr}
    4404:	0007      	movs	r7, r0
    4406:	0c10      	lsrs	r0, r2, #16
    4408:	434b      	muls	r3, r1
    440a:	4365      	muls	r5, r4
    440c:	4341      	muls	r1, r0
    440e:	4360      	muls	r0, r4
    4410:	0c2c      	lsrs	r4, r5, #16
    4412:	18c0      	adds	r0, r0, r3
    4414:	1824      	adds	r4, r4, r0
    4416:	468c      	mov	ip, r1
    4418:	42a3      	cmp	r3, r4
    441a:	d903      	bls.n	4424 <__aeabi_lmul+0x3c>
    441c:	2380      	movs	r3, #128	; 0x80
    441e:	025b      	lsls	r3, r3, #9
    4420:	4698      	mov	r8, r3
    4422:	44c4      	add	ip, r8
    4424:	4649      	mov	r1, r9
    4426:	4379      	muls	r1, r7
    4428:	4356      	muls	r6, r2
    442a:	0c23      	lsrs	r3, r4, #16
    442c:	042d      	lsls	r5, r5, #16
    442e:	0c2d      	lsrs	r5, r5, #16
    4430:	1989      	adds	r1, r1, r6
    4432:	4463      	add	r3, ip
    4434:	0424      	lsls	r4, r4, #16
    4436:	1960      	adds	r0, r4, r5
    4438:	18c9      	adds	r1, r1, r3
    443a:	bcc0      	pop	{r6, r7}
    443c:	46b9      	mov	r9, r7
    443e:	46b0      	mov	r8, r6
    4440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4442:	46c0      	nop			; (mov r8, r8)

00004444 <__aeabi_f2uiz>:
    4444:	219e      	movs	r1, #158	; 0x9e
    4446:	b510      	push	{r4, lr}
    4448:	05c9      	lsls	r1, r1, #23
    444a:	1c04      	adds	r4, r0, #0
    444c:	f7ff ffc2 	bl	43d4 <__aeabi_fcmpge>
    4450:	2800      	cmp	r0, #0
    4452:	d103      	bne.n	445c <__aeabi_f2uiz+0x18>
    4454:	1c20      	adds	r0, r4, #0
    4456:	f000 fe45 	bl	50e4 <__aeabi_f2iz>
    445a:	bd10      	pop	{r4, pc}
    445c:	219e      	movs	r1, #158	; 0x9e
    445e:	1c20      	adds	r0, r4, #0
    4460:	05c9      	lsls	r1, r1, #23
    4462:	f000 fcad 	bl	4dc0 <__aeabi_fsub>
    4466:	f000 fe3d 	bl	50e4 <__aeabi_f2iz>
    446a:	2380      	movs	r3, #128	; 0x80
    446c:	061b      	lsls	r3, r3, #24
    446e:	469c      	mov	ip, r3
    4470:	4460      	add	r0, ip
    4472:	e7f2      	b.n	445a <__aeabi_f2uiz+0x16>

00004474 <__aeabi_fadd>:
    4474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4476:	0243      	lsls	r3, r0, #9
    4478:	0045      	lsls	r5, r0, #1
    447a:	0fc4      	lsrs	r4, r0, #31
    447c:	0248      	lsls	r0, r1, #9
    447e:	0a42      	lsrs	r2, r0, #9
    4480:	4694      	mov	ip, r2
    4482:	004a      	lsls	r2, r1, #1
    4484:	0a5f      	lsrs	r7, r3, #9
    4486:	0e2d      	lsrs	r5, r5, #24
    4488:	099b      	lsrs	r3, r3, #6
    448a:	0e12      	lsrs	r2, r2, #24
    448c:	0fc9      	lsrs	r1, r1, #31
    448e:	0980      	lsrs	r0, r0, #6
    4490:	428c      	cmp	r4, r1
    4492:	d022      	beq.n	44da <__aeabi_fadd+0x66>
    4494:	1aae      	subs	r6, r5, r2
    4496:	2e00      	cmp	r6, #0
    4498:	dd0d      	ble.n	44b6 <__aeabi_fadd+0x42>
    449a:	2a00      	cmp	r2, #0
    449c:	d12d      	bne.n	44fa <__aeabi_fadd+0x86>
    449e:	2800      	cmp	r0, #0
    44a0:	d100      	bne.n	44a4 <__aeabi_fadd+0x30>
    44a2:	e083      	b.n	45ac <__aeabi_fadd+0x138>
    44a4:	1e72      	subs	r2, r6, #1
    44a6:	2e01      	cmp	r6, #1
    44a8:	d100      	bne.n	44ac <__aeabi_fadd+0x38>
    44aa:	e11b      	b.n	46e4 <__aeabi_fadd+0x270>
    44ac:	2eff      	cmp	r6, #255	; 0xff
    44ae:	d100      	bne.n	44b2 <__aeabi_fadd+0x3e>
    44b0:	e0a2      	b.n	45f8 <__aeabi_fadd+0x184>
    44b2:	0016      	movs	r6, r2
    44b4:	e027      	b.n	4506 <__aeabi_fadd+0x92>
    44b6:	2e00      	cmp	r6, #0
    44b8:	d048      	beq.n	454c <__aeabi_fadd+0xd8>
    44ba:	1b56      	subs	r6, r2, r5
    44bc:	2d00      	cmp	r5, #0
    44be:	d000      	beq.n	44c2 <__aeabi_fadd+0x4e>
    44c0:	e0c1      	b.n	4646 <__aeabi_fadd+0x1d2>
    44c2:	2b00      	cmp	r3, #0
    44c4:	d100      	bne.n	44c8 <__aeabi_fadd+0x54>
    44c6:	e0f7      	b.n	46b8 <__aeabi_fadd+0x244>
    44c8:	1e74      	subs	r4, r6, #1
    44ca:	2e01      	cmp	r6, #1
    44cc:	d100      	bne.n	44d0 <__aeabi_fadd+0x5c>
    44ce:	e12d      	b.n	472c <__aeabi_fadd+0x2b8>
    44d0:	2eff      	cmp	r6, #255	; 0xff
    44d2:	d100      	bne.n	44d6 <__aeabi_fadd+0x62>
    44d4:	e08e      	b.n	45f4 <__aeabi_fadd+0x180>
    44d6:	0026      	movs	r6, r4
    44d8:	e0ba      	b.n	4650 <__aeabi_fadd+0x1dc>
    44da:	1aa9      	subs	r1, r5, r2
    44dc:	2900      	cmp	r1, #0
    44de:	dc00      	bgt.n	44e2 <__aeabi_fadd+0x6e>
    44e0:	e08c      	b.n	45fc <__aeabi_fadd+0x188>
    44e2:	2a00      	cmp	r2, #0
    44e4:	d046      	beq.n	4574 <__aeabi_fadd+0x100>
    44e6:	2dff      	cmp	r5, #255	; 0xff
    44e8:	d100      	bne.n	44ec <__aeabi_fadd+0x78>
    44ea:	e085      	b.n	45f8 <__aeabi_fadd+0x184>
    44ec:	2280      	movs	r2, #128	; 0x80
    44ee:	04d2      	lsls	r2, r2, #19
    44f0:	4310      	orrs	r0, r2
    44f2:	291b      	cmp	r1, #27
    44f4:	dd49      	ble.n	458a <__aeabi_fadd+0x116>
    44f6:	3301      	adds	r3, #1
    44f8:	e016      	b.n	4528 <__aeabi_fadd+0xb4>
    44fa:	2dff      	cmp	r5, #255	; 0xff
    44fc:	d100      	bne.n	4500 <__aeabi_fadd+0x8c>
    44fe:	e07b      	b.n	45f8 <__aeabi_fadd+0x184>
    4500:	2280      	movs	r2, #128	; 0x80
    4502:	04d2      	lsls	r2, r2, #19
    4504:	4310      	orrs	r0, r2
    4506:	2201      	movs	r2, #1
    4508:	2e1b      	cmp	r6, #27
    450a:	dc07      	bgt.n	451c <__aeabi_fadd+0xa8>
    450c:	2120      	movs	r1, #32
    450e:	1b89      	subs	r1, r1, r6
    4510:	0002      	movs	r2, r0
    4512:	4088      	lsls	r0, r1
    4514:	40f2      	lsrs	r2, r6
    4516:	1e41      	subs	r1, r0, #1
    4518:	4188      	sbcs	r0, r1
    451a:	4302      	orrs	r2, r0
    451c:	1a9b      	subs	r3, r3, r2
    451e:	015a      	lsls	r2, r3, #5
    4520:	d451      	bmi.n	45c6 <__aeabi_fadd+0x152>
    4522:	2207      	movs	r2, #7
    4524:	401a      	ands	r2, r3
    4526:	d042      	beq.n	45ae <__aeabi_fadd+0x13a>
    4528:	220f      	movs	r2, #15
    452a:	401a      	ands	r2, r3
    452c:	2a04      	cmp	r2, #4
    452e:	d000      	beq.n	4532 <__aeabi_fadd+0xbe>
    4530:	3304      	adds	r3, #4
    4532:	015a      	lsls	r2, r3, #5
    4534:	d53b      	bpl.n	45ae <__aeabi_fadd+0x13a>
    4536:	1c68      	adds	r0, r5, #1
    4538:	2dfe      	cmp	r5, #254	; 0xfe
    453a:	d034      	beq.n	45a6 <__aeabi_fadd+0x132>
    453c:	019b      	lsls	r3, r3, #6
    453e:	0a5b      	lsrs	r3, r3, #9
    4540:	b2c0      	uxtb	r0, r0
    4542:	05c0      	lsls	r0, r0, #23
    4544:	4318      	orrs	r0, r3
    4546:	07e4      	lsls	r4, r4, #31
    4548:	4320      	orrs	r0, r4
    454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    454c:	26fe      	movs	r6, #254	; 0xfe
    454e:	1c6a      	adds	r2, r5, #1
    4550:	4216      	tst	r6, r2
    4552:	d000      	beq.n	4556 <__aeabi_fadd+0xe2>
    4554:	e08b      	b.n	466e <__aeabi_fadd+0x1fa>
    4556:	2d00      	cmp	r5, #0
    4558:	d000      	beq.n	455c <__aeabi_fadd+0xe8>
    455a:	e0b1      	b.n	46c0 <__aeabi_fadd+0x24c>
    455c:	2b00      	cmp	r3, #0
    455e:	d100      	bne.n	4562 <__aeabi_fadd+0xee>
    4560:	e0df      	b.n	4722 <__aeabi_fadd+0x2ae>
    4562:	2800      	cmp	r0, #0
    4564:	d069      	beq.n	463a <__aeabi_fadd+0x1c6>
    4566:	1a1a      	subs	r2, r3, r0
    4568:	0156      	lsls	r6, r2, #5
    456a:	d400      	bmi.n	456e <__aeabi_fadd+0xfa>
    456c:	e0fb      	b.n	4766 <__aeabi_fadd+0x2f2>
    456e:	000c      	movs	r4, r1
    4570:	1ac3      	subs	r3, r0, r3
    4572:	e03c      	b.n	45ee <__aeabi_fadd+0x17a>
    4574:	2800      	cmp	r0, #0
    4576:	d100      	bne.n	457a <__aeabi_fadd+0x106>
    4578:	e0b7      	b.n	46ea <__aeabi_fadd+0x276>
    457a:	1e4a      	subs	r2, r1, #1
    457c:	2901      	cmp	r1, #1
    457e:	d100      	bne.n	4582 <__aeabi_fadd+0x10e>
    4580:	e0aa      	b.n	46d8 <__aeabi_fadd+0x264>
    4582:	29ff      	cmp	r1, #255	; 0xff
    4584:	d038      	beq.n	45f8 <__aeabi_fadd+0x184>
    4586:	0011      	movs	r1, r2
    4588:	e7b3      	b.n	44f2 <__aeabi_fadd+0x7e>
    458a:	0002      	movs	r2, r0
    458c:	2620      	movs	r6, #32
    458e:	40ca      	lsrs	r2, r1
    4590:	1a71      	subs	r1, r6, r1
    4592:	4088      	lsls	r0, r1
    4594:	1e41      	subs	r1, r0, #1
    4596:	4188      	sbcs	r0, r1
    4598:	4310      	orrs	r0, r2
    459a:	181b      	adds	r3, r3, r0
    459c:	015a      	lsls	r2, r3, #5
    459e:	d5c0      	bpl.n	4522 <__aeabi_fadd+0xae>
    45a0:	3501      	adds	r5, #1
    45a2:	2dff      	cmp	r5, #255	; 0xff
    45a4:	d16c      	bne.n	4680 <__aeabi_fadd+0x20c>
    45a6:	20ff      	movs	r0, #255	; 0xff
    45a8:	2300      	movs	r3, #0
    45aa:	e7ca      	b.n	4542 <__aeabi_fadd+0xce>
    45ac:	0035      	movs	r5, r6
    45ae:	08db      	lsrs	r3, r3, #3
    45b0:	2dff      	cmp	r5, #255	; 0xff
    45b2:	d144      	bne.n	463e <__aeabi_fadd+0x1ca>
    45b4:	2b00      	cmp	r3, #0
    45b6:	d0f6      	beq.n	45a6 <__aeabi_fadd+0x132>
    45b8:	2280      	movs	r2, #128	; 0x80
    45ba:	03d2      	lsls	r2, r2, #15
    45bc:	4313      	orrs	r3, r2
    45be:	025b      	lsls	r3, r3, #9
    45c0:	20ff      	movs	r0, #255	; 0xff
    45c2:	0a5b      	lsrs	r3, r3, #9
    45c4:	e7bd      	b.n	4542 <__aeabi_fadd+0xce>
    45c6:	019e      	lsls	r6, r3, #6
    45c8:	09b6      	lsrs	r6, r6, #6
    45ca:	0030      	movs	r0, r6
    45cc:	f000 fe38 	bl	5240 <__clzsi2>
    45d0:	3805      	subs	r0, #5
    45d2:	4086      	lsls	r6, r0
    45d4:	4285      	cmp	r5, r0
    45d6:	dc20      	bgt.n	461a <__aeabi_fadd+0x1a6>
    45d8:	2220      	movs	r2, #32
    45da:	1b40      	subs	r0, r0, r5
    45dc:	3001      	adds	r0, #1
    45de:	1a12      	subs	r2, r2, r0
    45e0:	0033      	movs	r3, r6
    45e2:	4096      	lsls	r6, r2
    45e4:	40c3      	lsrs	r3, r0
    45e6:	1e72      	subs	r2, r6, #1
    45e8:	4196      	sbcs	r6, r2
    45ea:	2500      	movs	r5, #0
    45ec:	4333      	orrs	r3, r6
    45ee:	075a      	lsls	r2, r3, #29
    45f0:	d19a      	bne.n	4528 <__aeabi_fadd+0xb4>
    45f2:	e79e      	b.n	4532 <__aeabi_fadd+0xbe>
    45f4:	000c      	movs	r4, r1
    45f6:	0003      	movs	r3, r0
    45f8:	08db      	lsrs	r3, r3, #3
    45fa:	e7db      	b.n	45b4 <__aeabi_fadd+0x140>
    45fc:	2900      	cmp	r1, #0
    45fe:	d010      	beq.n	4622 <__aeabi_fadd+0x1ae>
    4600:	1b51      	subs	r1, r2, r5
    4602:	2d00      	cmp	r5, #0
    4604:	d143      	bne.n	468e <__aeabi_fadd+0x21a>
    4606:	2b00      	cmp	r3, #0
    4608:	d100      	bne.n	460c <__aeabi_fadd+0x198>
    460a:	e093      	b.n	4734 <__aeabi_fadd+0x2c0>
    460c:	1e4d      	subs	r5, r1, #1
    460e:	2901      	cmp	r1, #1
    4610:	d062      	beq.n	46d8 <__aeabi_fadd+0x264>
    4612:	29ff      	cmp	r1, #255	; 0xff
    4614:	d0ef      	beq.n	45f6 <__aeabi_fadd+0x182>
    4616:	0029      	movs	r1, r5
    4618:	e03e      	b.n	4698 <__aeabi_fadd+0x224>
    461a:	4b55      	ldr	r3, [pc, #340]	; (4770 <__aeabi_fadd+0x2fc>)
    461c:	1a2d      	subs	r5, r5, r0
    461e:	4033      	ands	r3, r6
    4620:	e7e5      	b.n	45ee <__aeabi_fadd+0x17a>
    4622:	21fe      	movs	r1, #254	; 0xfe
    4624:	1c6a      	adds	r2, r5, #1
    4626:	4211      	tst	r1, r2
    4628:	d13b      	bne.n	46a2 <__aeabi_fadd+0x22e>
    462a:	2d00      	cmp	r5, #0
    462c:	d16a      	bne.n	4704 <__aeabi_fadd+0x290>
    462e:	2b00      	cmp	r3, #0
    4630:	d100      	bne.n	4634 <__aeabi_fadd+0x1c0>
    4632:	e08e      	b.n	4752 <__aeabi_fadd+0x2de>
    4634:	2800      	cmp	r0, #0
    4636:	d000      	beq.n	463a <__aeabi_fadd+0x1c6>
    4638:	e08d      	b.n	4756 <__aeabi_fadd+0x2e2>
    463a:	2500      	movs	r5, #0
    463c:	08db      	lsrs	r3, r3, #3
    463e:	025b      	lsls	r3, r3, #9
    4640:	0a5b      	lsrs	r3, r3, #9
    4642:	b2e8      	uxtb	r0, r5
    4644:	e77d      	b.n	4542 <__aeabi_fadd+0xce>
    4646:	2aff      	cmp	r2, #255	; 0xff
    4648:	d0d4      	beq.n	45f4 <__aeabi_fadd+0x180>
    464a:	2480      	movs	r4, #128	; 0x80
    464c:	04e4      	lsls	r4, r4, #19
    464e:	4323      	orrs	r3, r4
    4650:	2401      	movs	r4, #1
    4652:	2e1b      	cmp	r6, #27
    4654:	dc07      	bgt.n	4666 <__aeabi_fadd+0x1f2>
    4656:	2520      	movs	r5, #32
    4658:	1bad      	subs	r5, r5, r6
    465a:	001c      	movs	r4, r3
    465c:	40ab      	lsls	r3, r5
    465e:	40f4      	lsrs	r4, r6
    4660:	1e5d      	subs	r5, r3, #1
    4662:	41ab      	sbcs	r3, r5
    4664:	431c      	orrs	r4, r3
    4666:	1b03      	subs	r3, r0, r4
    4668:	0015      	movs	r5, r2
    466a:	000c      	movs	r4, r1
    466c:	e757      	b.n	451e <__aeabi_fadd+0xaa>
    466e:	1a1e      	subs	r6, r3, r0
    4670:	0172      	lsls	r2, r6, #5
    4672:	d42e      	bmi.n	46d2 <__aeabi_fadd+0x25e>
    4674:	2e00      	cmp	r6, #0
    4676:	d1a8      	bne.n	45ca <__aeabi_fadd+0x156>
    4678:	2400      	movs	r4, #0
    467a:	2000      	movs	r0, #0
    467c:	2300      	movs	r3, #0
    467e:	e760      	b.n	4542 <__aeabi_fadd+0xce>
    4680:	2201      	movs	r2, #1
    4682:	493c      	ldr	r1, [pc, #240]	; (4774 <__aeabi_fadd+0x300>)
    4684:	401a      	ands	r2, r3
    4686:	085b      	lsrs	r3, r3, #1
    4688:	400b      	ands	r3, r1
    468a:	4313      	orrs	r3, r2
    468c:	e7af      	b.n	45ee <__aeabi_fadd+0x17a>
    468e:	2aff      	cmp	r2, #255	; 0xff
    4690:	d0b1      	beq.n	45f6 <__aeabi_fadd+0x182>
    4692:	2580      	movs	r5, #128	; 0x80
    4694:	04ed      	lsls	r5, r5, #19
    4696:	432b      	orrs	r3, r5
    4698:	291b      	cmp	r1, #27
    469a:	dd28      	ble.n	46ee <__aeabi_fadd+0x27a>
    469c:	0015      	movs	r5, r2
    469e:	1c43      	adds	r3, r0, #1
    46a0:	e742      	b.n	4528 <__aeabi_fadd+0xb4>
    46a2:	2aff      	cmp	r2, #255	; 0xff
    46a4:	d100      	bne.n	46a8 <__aeabi_fadd+0x234>
    46a6:	e77e      	b.n	45a6 <__aeabi_fadd+0x132>
    46a8:	181b      	adds	r3, r3, r0
    46aa:	085b      	lsrs	r3, r3, #1
    46ac:	0015      	movs	r5, r2
    46ae:	075a      	lsls	r2, r3, #29
    46b0:	d000      	beq.n	46b4 <__aeabi_fadd+0x240>
    46b2:	e739      	b.n	4528 <__aeabi_fadd+0xb4>
    46b4:	08db      	lsrs	r3, r3, #3
    46b6:	e7c2      	b.n	463e <__aeabi_fadd+0x1ca>
    46b8:	000c      	movs	r4, r1
    46ba:	0035      	movs	r5, r6
    46bc:	0003      	movs	r3, r0
    46be:	e776      	b.n	45ae <__aeabi_fadd+0x13a>
    46c0:	2b00      	cmp	r3, #0
    46c2:	d13a      	bne.n	473a <__aeabi_fadd+0x2c6>
    46c4:	2800      	cmp	r0, #0
    46c6:	d195      	bne.n	45f4 <__aeabi_fadd+0x180>
    46c8:	2380      	movs	r3, #128	; 0x80
    46ca:	2400      	movs	r4, #0
    46cc:	20ff      	movs	r0, #255	; 0xff
    46ce:	03db      	lsls	r3, r3, #15
    46d0:	e737      	b.n	4542 <__aeabi_fadd+0xce>
    46d2:	000c      	movs	r4, r1
    46d4:	1ac6      	subs	r6, r0, r3
    46d6:	e778      	b.n	45ca <__aeabi_fadd+0x156>
    46d8:	181b      	adds	r3, r3, r0
    46da:	2502      	movs	r5, #2
    46dc:	015a      	lsls	r2, r3, #5
    46de:	d4cf      	bmi.n	4680 <__aeabi_fadd+0x20c>
    46e0:	3d01      	subs	r5, #1
    46e2:	e71e      	b.n	4522 <__aeabi_fadd+0xae>
    46e4:	2501      	movs	r5, #1
    46e6:	1a1b      	subs	r3, r3, r0
    46e8:	e719      	b.n	451e <__aeabi_fadd+0xaa>
    46ea:	000d      	movs	r5, r1
    46ec:	e75f      	b.n	45ae <__aeabi_fadd+0x13a>
    46ee:	001d      	movs	r5, r3
    46f0:	2620      	movs	r6, #32
    46f2:	40cd      	lsrs	r5, r1
    46f4:	1a71      	subs	r1, r6, r1
    46f6:	408b      	lsls	r3, r1
    46f8:	1e59      	subs	r1, r3, #1
    46fa:	418b      	sbcs	r3, r1
    46fc:	432b      	orrs	r3, r5
    46fe:	181b      	adds	r3, r3, r0
    4700:	0015      	movs	r5, r2
    4702:	e74b      	b.n	459c <__aeabi_fadd+0x128>
    4704:	2b00      	cmp	r3, #0
    4706:	d100      	bne.n	470a <__aeabi_fadd+0x296>
    4708:	e775      	b.n	45f6 <__aeabi_fadd+0x182>
    470a:	2800      	cmp	r0, #0
    470c:	d100      	bne.n	4710 <__aeabi_fadd+0x29c>
    470e:	e773      	b.n	45f8 <__aeabi_fadd+0x184>
    4710:	2280      	movs	r2, #128	; 0x80
    4712:	03d2      	lsls	r2, r2, #15
    4714:	4297      	cmp	r7, r2
    4716:	d302      	bcc.n	471e <__aeabi_fadd+0x2aa>
    4718:	4594      	cmp	ip, r2
    471a:	d200      	bcs.n	471e <__aeabi_fadd+0x2aa>
    471c:	0003      	movs	r3, r0
    471e:	08db      	lsrs	r3, r3, #3
    4720:	e74a      	b.n	45b8 <__aeabi_fadd+0x144>
    4722:	2800      	cmp	r0, #0
    4724:	d0a8      	beq.n	4678 <__aeabi_fadd+0x204>
    4726:	000c      	movs	r4, r1
    4728:	0003      	movs	r3, r0
    472a:	e786      	b.n	463a <__aeabi_fadd+0x1c6>
    472c:	000c      	movs	r4, r1
    472e:	1ac3      	subs	r3, r0, r3
    4730:	3501      	adds	r5, #1
    4732:	e6f4      	b.n	451e <__aeabi_fadd+0xaa>
    4734:	000d      	movs	r5, r1
    4736:	0003      	movs	r3, r0
    4738:	e739      	b.n	45ae <__aeabi_fadd+0x13a>
    473a:	2800      	cmp	r0, #0
    473c:	d100      	bne.n	4740 <__aeabi_fadd+0x2cc>
    473e:	e75b      	b.n	45f8 <__aeabi_fadd+0x184>
    4740:	2280      	movs	r2, #128	; 0x80
    4742:	03d2      	lsls	r2, r2, #15
    4744:	4297      	cmp	r7, r2
    4746:	d3ea      	bcc.n	471e <__aeabi_fadd+0x2aa>
    4748:	4594      	cmp	ip, r2
    474a:	d2e8      	bcs.n	471e <__aeabi_fadd+0x2aa>
    474c:	000c      	movs	r4, r1
    474e:	0003      	movs	r3, r0
    4750:	e7e5      	b.n	471e <__aeabi_fadd+0x2aa>
    4752:	0003      	movs	r3, r0
    4754:	e771      	b.n	463a <__aeabi_fadd+0x1c6>
    4756:	181b      	adds	r3, r3, r0
    4758:	015a      	lsls	r2, r3, #5
    475a:	d5ab      	bpl.n	46b4 <__aeabi_fadd+0x240>
    475c:	4a04      	ldr	r2, [pc, #16]	; (4770 <__aeabi_fadd+0x2fc>)
    475e:	3501      	adds	r5, #1
    4760:	4013      	ands	r3, r2
    4762:	08db      	lsrs	r3, r3, #3
    4764:	e76b      	b.n	463e <__aeabi_fadd+0x1ca>
    4766:	1e13      	subs	r3, r2, #0
    4768:	d086      	beq.n	4678 <__aeabi_fadd+0x204>
    476a:	08db      	lsrs	r3, r3, #3
    476c:	e767      	b.n	463e <__aeabi_fadd+0x1ca>
    476e:	46c0      	nop			; (mov r8, r8)
    4770:	fbffffff 	.word	0xfbffffff
    4774:	7dffffff 	.word	0x7dffffff

00004778 <__aeabi_fdiv>:
    4778:	b5f0      	push	{r4, r5, r6, r7, lr}
    477a:	464f      	mov	r7, r9
    477c:	4646      	mov	r6, r8
    477e:	46d6      	mov	lr, sl
    4780:	0244      	lsls	r4, r0, #9
    4782:	b5c0      	push	{r6, r7, lr}
    4784:	0047      	lsls	r7, r0, #1
    4786:	1c0e      	adds	r6, r1, #0
    4788:	0a64      	lsrs	r4, r4, #9
    478a:	0e3f      	lsrs	r7, r7, #24
    478c:	0fc5      	lsrs	r5, r0, #31
    478e:	2f00      	cmp	r7, #0
    4790:	d03c      	beq.n	480c <__aeabi_fdiv+0x94>
    4792:	2fff      	cmp	r7, #255	; 0xff
    4794:	d042      	beq.n	481c <__aeabi_fdiv+0xa4>
    4796:	2300      	movs	r3, #0
    4798:	2280      	movs	r2, #128	; 0x80
    479a:	4699      	mov	r9, r3
    479c:	469a      	mov	sl, r3
    479e:	00e4      	lsls	r4, r4, #3
    47a0:	04d2      	lsls	r2, r2, #19
    47a2:	4314      	orrs	r4, r2
    47a4:	3f7f      	subs	r7, #127	; 0x7f
    47a6:	0273      	lsls	r3, r6, #9
    47a8:	0a5b      	lsrs	r3, r3, #9
    47aa:	4698      	mov	r8, r3
    47ac:	0073      	lsls	r3, r6, #1
    47ae:	0e1b      	lsrs	r3, r3, #24
    47b0:	0ff6      	lsrs	r6, r6, #31
    47b2:	2b00      	cmp	r3, #0
    47b4:	d01b      	beq.n	47ee <__aeabi_fdiv+0x76>
    47b6:	2bff      	cmp	r3, #255	; 0xff
    47b8:	d013      	beq.n	47e2 <__aeabi_fdiv+0x6a>
    47ba:	4642      	mov	r2, r8
    47bc:	2180      	movs	r1, #128	; 0x80
    47be:	00d2      	lsls	r2, r2, #3
    47c0:	04c9      	lsls	r1, r1, #19
    47c2:	4311      	orrs	r1, r2
    47c4:	4688      	mov	r8, r1
    47c6:	2000      	movs	r0, #0
    47c8:	3b7f      	subs	r3, #127	; 0x7f
    47ca:	0029      	movs	r1, r5
    47cc:	1aff      	subs	r7, r7, r3
    47ce:	464b      	mov	r3, r9
    47d0:	4071      	eors	r1, r6
    47d2:	b2c9      	uxtb	r1, r1
    47d4:	2b0f      	cmp	r3, #15
    47d6:	d900      	bls.n	47da <__aeabi_fdiv+0x62>
    47d8:	e0b5      	b.n	4946 <__aeabi_fdiv+0x1ce>
    47da:	4a74      	ldr	r2, [pc, #464]	; (49ac <__aeabi_fdiv+0x234>)
    47dc:	009b      	lsls	r3, r3, #2
    47de:	58d3      	ldr	r3, [r2, r3]
    47e0:	469f      	mov	pc, r3
    47e2:	4643      	mov	r3, r8
    47e4:	2b00      	cmp	r3, #0
    47e6:	d13f      	bne.n	4868 <__aeabi_fdiv+0xf0>
    47e8:	3fff      	subs	r7, #255	; 0xff
    47ea:	3302      	adds	r3, #2
    47ec:	e003      	b.n	47f6 <__aeabi_fdiv+0x7e>
    47ee:	4643      	mov	r3, r8
    47f0:	2b00      	cmp	r3, #0
    47f2:	d12d      	bne.n	4850 <__aeabi_fdiv+0xd8>
    47f4:	2301      	movs	r3, #1
    47f6:	0029      	movs	r1, r5
    47f8:	464a      	mov	r2, r9
    47fa:	4071      	eors	r1, r6
    47fc:	b2c9      	uxtb	r1, r1
    47fe:	431a      	orrs	r2, r3
    4800:	2a0e      	cmp	r2, #14
    4802:	d838      	bhi.n	4876 <__aeabi_fdiv+0xfe>
    4804:	486a      	ldr	r0, [pc, #424]	; (49b0 <__aeabi_fdiv+0x238>)
    4806:	0092      	lsls	r2, r2, #2
    4808:	5882      	ldr	r2, [r0, r2]
    480a:	4697      	mov	pc, r2
    480c:	2c00      	cmp	r4, #0
    480e:	d113      	bne.n	4838 <__aeabi_fdiv+0xc0>
    4810:	2304      	movs	r3, #4
    4812:	4699      	mov	r9, r3
    4814:	3b03      	subs	r3, #3
    4816:	2700      	movs	r7, #0
    4818:	469a      	mov	sl, r3
    481a:	e7c4      	b.n	47a6 <__aeabi_fdiv+0x2e>
    481c:	2c00      	cmp	r4, #0
    481e:	d105      	bne.n	482c <__aeabi_fdiv+0xb4>
    4820:	2308      	movs	r3, #8
    4822:	4699      	mov	r9, r3
    4824:	3b06      	subs	r3, #6
    4826:	27ff      	movs	r7, #255	; 0xff
    4828:	469a      	mov	sl, r3
    482a:	e7bc      	b.n	47a6 <__aeabi_fdiv+0x2e>
    482c:	230c      	movs	r3, #12
    482e:	4699      	mov	r9, r3
    4830:	3b09      	subs	r3, #9
    4832:	27ff      	movs	r7, #255	; 0xff
    4834:	469a      	mov	sl, r3
    4836:	e7b6      	b.n	47a6 <__aeabi_fdiv+0x2e>
    4838:	0020      	movs	r0, r4
    483a:	f000 fd01 	bl	5240 <__clzsi2>
    483e:	2776      	movs	r7, #118	; 0x76
    4840:	1f43      	subs	r3, r0, #5
    4842:	409c      	lsls	r4, r3
    4844:	2300      	movs	r3, #0
    4846:	427f      	negs	r7, r7
    4848:	4699      	mov	r9, r3
    484a:	469a      	mov	sl, r3
    484c:	1a3f      	subs	r7, r7, r0
    484e:	e7aa      	b.n	47a6 <__aeabi_fdiv+0x2e>
    4850:	4640      	mov	r0, r8
    4852:	f000 fcf5 	bl	5240 <__clzsi2>
    4856:	4642      	mov	r2, r8
    4858:	1f43      	subs	r3, r0, #5
    485a:	409a      	lsls	r2, r3
    485c:	2376      	movs	r3, #118	; 0x76
    485e:	425b      	negs	r3, r3
    4860:	1a1b      	subs	r3, r3, r0
    4862:	4690      	mov	r8, r2
    4864:	2000      	movs	r0, #0
    4866:	e7b0      	b.n	47ca <__aeabi_fdiv+0x52>
    4868:	2303      	movs	r3, #3
    486a:	464a      	mov	r2, r9
    486c:	431a      	orrs	r2, r3
    486e:	4691      	mov	r9, r2
    4870:	2003      	movs	r0, #3
    4872:	33fc      	adds	r3, #252	; 0xfc
    4874:	e7a9      	b.n	47ca <__aeabi_fdiv+0x52>
    4876:	000d      	movs	r5, r1
    4878:	20ff      	movs	r0, #255	; 0xff
    487a:	2200      	movs	r2, #0
    487c:	05c0      	lsls	r0, r0, #23
    487e:	07ed      	lsls	r5, r5, #31
    4880:	4310      	orrs	r0, r2
    4882:	4328      	orrs	r0, r5
    4884:	bce0      	pop	{r5, r6, r7}
    4886:	46ba      	mov	sl, r7
    4888:	46b1      	mov	r9, r6
    488a:	46a8      	mov	r8, r5
    488c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    488e:	000d      	movs	r5, r1
    4890:	2000      	movs	r0, #0
    4892:	2200      	movs	r2, #0
    4894:	e7f2      	b.n	487c <__aeabi_fdiv+0x104>
    4896:	4653      	mov	r3, sl
    4898:	2b02      	cmp	r3, #2
    489a:	d0ed      	beq.n	4878 <__aeabi_fdiv+0x100>
    489c:	2b03      	cmp	r3, #3
    489e:	d033      	beq.n	4908 <__aeabi_fdiv+0x190>
    48a0:	46a0      	mov	r8, r4
    48a2:	2b01      	cmp	r3, #1
    48a4:	d105      	bne.n	48b2 <__aeabi_fdiv+0x13a>
    48a6:	2000      	movs	r0, #0
    48a8:	2200      	movs	r2, #0
    48aa:	e7e7      	b.n	487c <__aeabi_fdiv+0x104>
    48ac:	0035      	movs	r5, r6
    48ae:	2803      	cmp	r0, #3
    48b0:	d07a      	beq.n	49a8 <__aeabi_fdiv+0x230>
    48b2:	003b      	movs	r3, r7
    48b4:	337f      	adds	r3, #127	; 0x7f
    48b6:	2b00      	cmp	r3, #0
    48b8:	dd2d      	ble.n	4916 <__aeabi_fdiv+0x19e>
    48ba:	4642      	mov	r2, r8
    48bc:	0752      	lsls	r2, r2, #29
    48be:	d007      	beq.n	48d0 <__aeabi_fdiv+0x158>
    48c0:	220f      	movs	r2, #15
    48c2:	4641      	mov	r1, r8
    48c4:	400a      	ands	r2, r1
    48c6:	2a04      	cmp	r2, #4
    48c8:	d002      	beq.n	48d0 <__aeabi_fdiv+0x158>
    48ca:	2204      	movs	r2, #4
    48cc:	4694      	mov	ip, r2
    48ce:	44e0      	add	r8, ip
    48d0:	4642      	mov	r2, r8
    48d2:	0112      	lsls	r2, r2, #4
    48d4:	d505      	bpl.n	48e2 <__aeabi_fdiv+0x16a>
    48d6:	4642      	mov	r2, r8
    48d8:	4b36      	ldr	r3, [pc, #216]	; (49b4 <__aeabi_fdiv+0x23c>)
    48da:	401a      	ands	r2, r3
    48dc:	003b      	movs	r3, r7
    48de:	4690      	mov	r8, r2
    48e0:	3380      	adds	r3, #128	; 0x80
    48e2:	2bfe      	cmp	r3, #254	; 0xfe
    48e4:	dcc8      	bgt.n	4878 <__aeabi_fdiv+0x100>
    48e6:	4642      	mov	r2, r8
    48e8:	0192      	lsls	r2, r2, #6
    48ea:	0a52      	lsrs	r2, r2, #9
    48ec:	b2d8      	uxtb	r0, r3
    48ee:	e7c5      	b.n	487c <__aeabi_fdiv+0x104>
    48f0:	2280      	movs	r2, #128	; 0x80
    48f2:	2500      	movs	r5, #0
    48f4:	20ff      	movs	r0, #255	; 0xff
    48f6:	03d2      	lsls	r2, r2, #15
    48f8:	e7c0      	b.n	487c <__aeabi_fdiv+0x104>
    48fa:	2280      	movs	r2, #128	; 0x80
    48fc:	03d2      	lsls	r2, r2, #15
    48fe:	4214      	tst	r4, r2
    4900:	d002      	beq.n	4908 <__aeabi_fdiv+0x190>
    4902:	4643      	mov	r3, r8
    4904:	4213      	tst	r3, r2
    4906:	d049      	beq.n	499c <__aeabi_fdiv+0x224>
    4908:	2280      	movs	r2, #128	; 0x80
    490a:	03d2      	lsls	r2, r2, #15
    490c:	4322      	orrs	r2, r4
    490e:	0252      	lsls	r2, r2, #9
    4910:	20ff      	movs	r0, #255	; 0xff
    4912:	0a52      	lsrs	r2, r2, #9
    4914:	e7b2      	b.n	487c <__aeabi_fdiv+0x104>
    4916:	2201      	movs	r2, #1
    4918:	1ad3      	subs	r3, r2, r3
    491a:	2b1b      	cmp	r3, #27
    491c:	dcc3      	bgt.n	48a6 <__aeabi_fdiv+0x12e>
    491e:	4642      	mov	r2, r8
    4920:	40da      	lsrs	r2, r3
    4922:	4643      	mov	r3, r8
    4924:	379e      	adds	r7, #158	; 0x9e
    4926:	40bb      	lsls	r3, r7
    4928:	1e59      	subs	r1, r3, #1
    492a:	418b      	sbcs	r3, r1
    492c:	431a      	orrs	r2, r3
    492e:	0753      	lsls	r3, r2, #29
    4930:	d004      	beq.n	493c <__aeabi_fdiv+0x1c4>
    4932:	230f      	movs	r3, #15
    4934:	4013      	ands	r3, r2
    4936:	2b04      	cmp	r3, #4
    4938:	d000      	beq.n	493c <__aeabi_fdiv+0x1c4>
    493a:	3204      	adds	r2, #4
    493c:	0153      	lsls	r3, r2, #5
    493e:	d529      	bpl.n	4994 <__aeabi_fdiv+0x21c>
    4940:	2001      	movs	r0, #1
    4942:	2200      	movs	r2, #0
    4944:	e79a      	b.n	487c <__aeabi_fdiv+0x104>
    4946:	4642      	mov	r2, r8
    4948:	0163      	lsls	r3, r4, #5
    494a:	0155      	lsls	r5, r2, #5
    494c:	42ab      	cmp	r3, r5
    494e:	d215      	bcs.n	497c <__aeabi_fdiv+0x204>
    4950:	201b      	movs	r0, #27
    4952:	2200      	movs	r2, #0
    4954:	3f01      	subs	r7, #1
    4956:	2601      	movs	r6, #1
    4958:	001c      	movs	r4, r3
    495a:	0052      	lsls	r2, r2, #1
    495c:	005b      	lsls	r3, r3, #1
    495e:	2c00      	cmp	r4, #0
    4960:	db01      	blt.n	4966 <__aeabi_fdiv+0x1ee>
    4962:	429d      	cmp	r5, r3
    4964:	d801      	bhi.n	496a <__aeabi_fdiv+0x1f2>
    4966:	1b5b      	subs	r3, r3, r5
    4968:	4332      	orrs	r2, r6
    496a:	3801      	subs	r0, #1
    496c:	2800      	cmp	r0, #0
    496e:	d1f3      	bne.n	4958 <__aeabi_fdiv+0x1e0>
    4970:	1e58      	subs	r0, r3, #1
    4972:	4183      	sbcs	r3, r0
    4974:	4313      	orrs	r3, r2
    4976:	4698      	mov	r8, r3
    4978:	000d      	movs	r5, r1
    497a:	e79a      	b.n	48b2 <__aeabi_fdiv+0x13a>
    497c:	201a      	movs	r0, #26
    497e:	2201      	movs	r2, #1
    4980:	1b5b      	subs	r3, r3, r5
    4982:	e7e8      	b.n	4956 <__aeabi_fdiv+0x1de>
    4984:	3b02      	subs	r3, #2
    4986:	425a      	negs	r2, r3
    4988:	4153      	adcs	r3, r2
    498a:	425b      	negs	r3, r3
    498c:	0035      	movs	r5, r6
    498e:	2200      	movs	r2, #0
    4990:	b2d8      	uxtb	r0, r3
    4992:	e773      	b.n	487c <__aeabi_fdiv+0x104>
    4994:	0192      	lsls	r2, r2, #6
    4996:	2000      	movs	r0, #0
    4998:	0a52      	lsrs	r2, r2, #9
    499a:	e76f      	b.n	487c <__aeabi_fdiv+0x104>
    499c:	431a      	orrs	r2, r3
    499e:	0252      	lsls	r2, r2, #9
    49a0:	0035      	movs	r5, r6
    49a2:	20ff      	movs	r0, #255	; 0xff
    49a4:	0a52      	lsrs	r2, r2, #9
    49a6:	e769      	b.n	487c <__aeabi_fdiv+0x104>
    49a8:	4644      	mov	r4, r8
    49aa:	e7ad      	b.n	4908 <__aeabi_fdiv+0x190>
    49ac:	000058f0 	.word	0x000058f0
    49b0:	00005930 	.word	0x00005930
    49b4:	f7ffffff 	.word	0xf7ffffff

000049b8 <__eqsf2>:
    49b8:	b570      	push	{r4, r5, r6, lr}
    49ba:	0042      	lsls	r2, r0, #1
    49bc:	024e      	lsls	r6, r1, #9
    49be:	004c      	lsls	r4, r1, #1
    49c0:	0245      	lsls	r5, r0, #9
    49c2:	0a6d      	lsrs	r5, r5, #9
    49c4:	0e12      	lsrs	r2, r2, #24
    49c6:	0fc3      	lsrs	r3, r0, #31
    49c8:	0a76      	lsrs	r6, r6, #9
    49ca:	0e24      	lsrs	r4, r4, #24
    49cc:	0fc9      	lsrs	r1, r1, #31
    49ce:	2aff      	cmp	r2, #255	; 0xff
    49d0:	d010      	beq.n	49f4 <__eqsf2+0x3c>
    49d2:	2cff      	cmp	r4, #255	; 0xff
    49d4:	d00c      	beq.n	49f0 <__eqsf2+0x38>
    49d6:	2001      	movs	r0, #1
    49d8:	42a2      	cmp	r2, r4
    49da:	d10a      	bne.n	49f2 <__eqsf2+0x3a>
    49dc:	42b5      	cmp	r5, r6
    49de:	d108      	bne.n	49f2 <__eqsf2+0x3a>
    49e0:	428b      	cmp	r3, r1
    49e2:	d00f      	beq.n	4a04 <__eqsf2+0x4c>
    49e4:	2a00      	cmp	r2, #0
    49e6:	d104      	bne.n	49f2 <__eqsf2+0x3a>
    49e8:	0028      	movs	r0, r5
    49ea:	1e43      	subs	r3, r0, #1
    49ec:	4198      	sbcs	r0, r3
    49ee:	e000      	b.n	49f2 <__eqsf2+0x3a>
    49f0:	2001      	movs	r0, #1
    49f2:	bd70      	pop	{r4, r5, r6, pc}
    49f4:	2001      	movs	r0, #1
    49f6:	2cff      	cmp	r4, #255	; 0xff
    49f8:	d1fb      	bne.n	49f2 <__eqsf2+0x3a>
    49fa:	4335      	orrs	r5, r6
    49fc:	d1f9      	bne.n	49f2 <__eqsf2+0x3a>
    49fe:	404b      	eors	r3, r1
    4a00:	0018      	movs	r0, r3
    4a02:	e7f6      	b.n	49f2 <__eqsf2+0x3a>
    4a04:	2000      	movs	r0, #0
    4a06:	e7f4      	b.n	49f2 <__eqsf2+0x3a>

00004a08 <__gesf2>:
    4a08:	b530      	push	{r4, r5, lr}
    4a0a:	0042      	lsls	r2, r0, #1
    4a0c:	0244      	lsls	r4, r0, #9
    4a0e:	024d      	lsls	r5, r1, #9
    4a10:	0fc3      	lsrs	r3, r0, #31
    4a12:	0048      	lsls	r0, r1, #1
    4a14:	0a64      	lsrs	r4, r4, #9
    4a16:	0e12      	lsrs	r2, r2, #24
    4a18:	0a6d      	lsrs	r5, r5, #9
    4a1a:	0e00      	lsrs	r0, r0, #24
    4a1c:	0fc9      	lsrs	r1, r1, #31
    4a1e:	2aff      	cmp	r2, #255	; 0xff
    4a20:	d019      	beq.n	4a56 <__gesf2+0x4e>
    4a22:	28ff      	cmp	r0, #255	; 0xff
    4a24:	d00b      	beq.n	4a3e <__gesf2+0x36>
    4a26:	2a00      	cmp	r2, #0
    4a28:	d11e      	bne.n	4a68 <__gesf2+0x60>
    4a2a:	2800      	cmp	r0, #0
    4a2c:	d10b      	bne.n	4a46 <__gesf2+0x3e>
    4a2e:	2d00      	cmp	r5, #0
    4a30:	d027      	beq.n	4a82 <__gesf2+0x7a>
    4a32:	2c00      	cmp	r4, #0
    4a34:	d134      	bne.n	4aa0 <__gesf2+0x98>
    4a36:	2900      	cmp	r1, #0
    4a38:	d02f      	beq.n	4a9a <__gesf2+0x92>
    4a3a:	0008      	movs	r0, r1
    4a3c:	bd30      	pop	{r4, r5, pc}
    4a3e:	2d00      	cmp	r5, #0
    4a40:	d128      	bne.n	4a94 <__gesf2+0x8c>
    4a42:	2a00      	cmp	r2, #0
    4a44:	d101      	bne.n	4a4a <__gesf2+0x42>
    4a46:	2c00      	cmp	r4, #0
    4a48:	d0f5      	beq.n	4a36 <__gesf2+0x2e>
    4a4a:	428b      	cmp	r3, r1
    4a4c:	d107      	bne.n	4a5e <__gesf2+0x56>
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d023      	beq.n	4a9a <__gesf2+0x92>
    4a52:	0018      	movs	r0, r3
    4a54:	e7f2      	b.n	4a3c <__gesf2+0x34>
    4a56:	2c00      	cmp	r4, #0
    4a58:	d11c      	bne.n	4a94 <__gesf2+0x8c>
    4a5a:	28ff      	cmp	r0, #255	; 0xff
    4a5c:	d014      	beq.n	4a88 <__gesf2+0x80>
    4a5e:	1e58      	subs	r0, r3, #1
    4a60:	2302      	movs	r3, #2
    4a62:	4018      	ands	r0, r3
    4a64:	3801      	subs	r0, #1
    4a66:	e7e9      	b.n	4a3c <__gesf2+0x34>
    4a68:	2800      	cmp	r0, #0
    4a6a:	d0f8      	beq.n	4a5e <__gesf2+0x56>
    4a6c:	428b      	cmp	r3, r1
    4a6e:	d1f6      	bne.n	4a5e <__gesf2+0x56>
    4a70:	4282      	cmp	r2, r0
    4a72:	dcf4      	bgt.n	4a5e <__gesf2+0x56>
    4a74:	dbeb      	blt.n	4a4e <__gesf2+0x46>
    4a76:	42ac      	cmp	r4, r5
    4a78:	d8f1      	bhi.n	4a5e <__gesf2+0x56>
    4a7a:	2000      	movs	r0, #0
    4a7c:	42ac      	cmp	r4, r5
    4a7e:	d2dd      	bcs.n	4a3c <__gesf2+0x34>
    4a80:	e7e5      	b.n	4a4e <__gesf2+0x46>
    4a82:	2c00      	cmp	r4, #0
    4a84:	d0da      	beq.n	4a3c <__gesf2+0x34>
    4a86:	e7ea      	b.n	4a5e <__gesf2+0x56>
    4a88:	2d00      	cmp	r5, #0
    4a8a:	d103      	bne.n	4a94 <__gesf2+0x8c>
    4a8c:	428b      	cmp	r3, r1
    4a8e:	d1e6      	bne.n	4a5e <__gesf2+0x56>
    4a90:	2000      	movs	r0, #0
    4a92:	e7d3      	b.n	4a3c <__gesf2+0x34>
    4a94:	2002      	movs	r0, #2
    4a96:	4240      	negs	r0, r0
    4a98:	e7d0      	b.n	4a3c <__gesf2+0x34>
    4a9a:	2001      	movs	r0, #1
    4a9c:	4240      	negs	r0, r0
    4a9e:	e7cd      	b.n	4a3c <__gesf2+0x34>
    4aa0:	428b      	cmp	r3, r1
    4aa2:	d0e8      	beq.n	4a76 <__gesf2+0x6e>
    4aa4:	e7db      	b.n	4a5e <__gesf2+0x56>
    4aa6:	46c0      	nop			; (mov r8, r8)

00004aa8 <__lesf2>:
    4aa8:	b530      	push	{r4, r5, lr}
    4aaa:	0042      	lsls	r2, r0, #1
    4aac:	0244      	lsls	r4, r0, #9
    4aae:	024d      	lsls	r5, r1, #9
    4ab0:	0fc3      	lsrs	r3, r0, #31
    4ab2:	0048      	lsls	r0, r1, #1
    4ab4:	0a64      	lsrs	r4, r4, #9
    4ab6:	0e12      	lsrs	r2, r2, #24
    4ab8:	0a6d      	lsrs	r5, r5, #9
    4aba:	0e00      	lsrs	r0, r0, #24
    4abc:	0fc9      	lsrs	r1, r1, #31
    4abe:	2aff      	cmp	r2, #255	; 0xff
    4ac0:	d01a      	beq.n	4af8 <__lesf2+0x50>
    4ac2:	28ff      	cmp	r0, #255	; 0xff
    4ac4:	d00e      	beq.n	4ae4 <__lesf2+0x3c>
    4ac6:	2a00      	cmp	r2, #0
    4ac8:	d11e      	bne.n	4b08 <__lesf2+0x60>
    4aca:	2800      	cmp	r0, #0
    4acc:	d10e      	bne.n	4aec <__lesf2+0x44>
    4ace:	2d00      	cmp	r5, #0
    4ad0:	d02a      	beq.n	4b28 <__lesf2+0x80>
    4ad2:	2c00      	cmp	r4, #0
    4ad4:	d00c      	beq.n	4af0 <__lesf2+0x48>
    4ad6:	428b      	cmp	r3, r1
    4ad8:	d01d      	beq.n	4b16 <__lesf2+0x6e>
    4ada:	1e58      	subs	r0, r3, #1
    4adc:	2302      	movs	r3, #2
    4ade:	4018      	ands	r0, r3
    4ae0:	3801      	subs	r0, #1
    4ae2:	e010      	b.n	4b06 <__lesf2+0x5e>
    4ae4:	2d00      	cmp	r5, #0
    4ae6:	d10d      	bne.n	4b04 <__lesf2+0x5c>
    4ae8:	2a00      	cmp	r2, #0
    4aea:	d120      	bne.n	4b2e <__lesf2+0x86>
    4aec:	2c00      	cmp	r4, #0
    4aee:	d11e      	bne.n	4b2e <__lesf2+0x86>
    4af0:	2900      	cmp	r1, #0
    4af2:	d023      	beq.n	4b3c <__lesf2+0x94>
    4af4:	0008      	movs	r0, r1
    4af6:	e006      	b.n	4b06 <__lesf2+0x5e>
    4af8:	2c00      	cmp	r4, #0
    4afa:	d103      	bne.n	4b04 <__lesf2+0x5c>
    4afc:	28ff      	cmp	r0, #255	; 0xff
    4afe:	d1ec      	bne.n	4ada <__lesf2+0x32>
    4b00:	2d00      	cmp	r5, #0
    4b02:	d017      	beq.n	4b34 <__lesf2+0x8c>
    4b04:	2002      	movs	r0, #2
    4b06:	bd30      	pop	{r4, r5, pc}
    4b08:	2800      	cmp	r0, #0
    4b0a:	d0e6      	beq.n	4ada <__lesf2+0x32>
    4b0c:	428b      	cmp	r3, r1
    4b0e:	d1e4      	bne.n	4ada <__lesf2+0x32>
    4b10:	4282      	cmp	r2, r0
    4b12:	dce2      	bgt.n	4ada <__lesf2+0x32>
    4b14:	db04      	blt.n	4b20 <__lesf2+0x78>
    4b16:	42ac      	cmp	r4, r5
    4b18:	d8df      	bhi.n	4ada <__lesf2+0x32>
    4b1a:	2000      	movs	r0, #0
    4b1c:	42ac      	cmp	r4, r5
    4b1e:	d2f2      	bcs.n	4b06 <__lesf2+0x5e>
    4b20:	2b00      	cmp	r3, #0
    4b22:	d00b      	beq.n	4b3c <__lesf2+0x94>
    4b24:	0018      	movs	r0, r3
    4b26:	e7ee      	b.n	4b06 <__lesf2+0x5e>
    4b28:	2c00      	cmp	r4, #0
    4b2a:	d0ec      	beq.n	4b06 <__lesf2+0x5e>
    4b2c:	e7d5      	b.n	4ada <__lesf2+0x32>
    4b2e:	428b      	cmp	r3, r1
    4b30:	d1d3      	bne.n	4ada <__lesf2+0x32>
    4b32:	e7f5      	b.n	4b20 <__lesf2+0x78>
    4b34:	2000      	movs	r0, #0
    4b36:	428b      	cmp	r3, r1
    4b38:	d0e5      	beq.n	4b06 <__lesf2+0x5e>
    4b3a:	e7ce      	b.n	4ada <__lesf2+0x32>
    4b3c:	2001      	movs	r0, #1
    4b3e:	4240      	negs	r0, r0
    4b40:	e7e1      	b.n	4b06 <__lesf2+0x5e>
    4b42:	46c0      	nop			; (mov r8, r8)

00004b44 <__aeabi_fmul>:
    4b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b46:	464f      	mov	r7, r9
    4b48:	4646      	mov	r6, r8
    4b4a:	46d6      	mov	lr, sl
    4b4c:	0243      	lsls	r3, r0, #9
    4b4e:	0a5b      	lsrs	r3, r3, #9
    4b50:	4699      	mov	r9, r3
    4b52:	0043      	lsls	r3, r0, #1
    4b54:	b5c0      	push	{r6, r7, lr}
    4b56:	0e1b      	lsrs	r3, r3, #24
    4b58:	1c0e      	adds	r6, r1, #0
    4b5a:	0fc5      	lsrs	r5, r0, #31
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	d100      	bne.n	4b62 <__aeabi_fmul+0x1e>
    4b60:	e085      	b.n	4c6e <__aeabi_fmul+0x12a>
    4b62:	2bff      	cmp	r3, #255	; 0xff
    4b64:	d100      	bne.n	4b68 <__aeabi_fmul+0x24>
    4b66:	e08b      	b.n	4c80 <__aeabi_fmul+0x13c>
    4b68:	464a      	mov	r2, r9
    4b6a:	2180      	movs	r1, #128	; 0x80
    4b6c:	00d2      	lsls	r2, r2, #3
    4b6e:	04c9      	lsls	r1, r1, #19
    4b70:	4311      	orrs	r1, r2
    4b72:	227f      	movs	r2, #127	; 0x7f
    4b74:	4252      	negs	r2, r2
    4b76:	4690      	mov	r8, r2
    4b78:	4498      	add	r8, r3
    4b7a:	2300      	movs	r3, #0
    4b7c:	4689      	mov	r9, r1
    4b7e:	2700      	movs	r7, #0
    4b80:	469a      	mov	sl, r3
    4b82:	0274      	lsls	r4, r6, #9
    4b84:	0073      	lsls	r3, r6, #1
    4b86:	0a64      	lsrs	r4, r4, #9
    4b88:	0e1b      	lsrs	r3, r3, #24
    4b8a:	0ff6      	lsrs	r6, r6, #31
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d064      	beq.n	4c5a <__aeabi_fmul+0x116>
    4b90:	2bff      	cmp	r3, #255	; 0xff
    4b92:	d01f      	beq.n	4bd4 <__aeabi_fmul+0x90>
    4b94:	2280      	movs	r2, #128	; 0x80
    4b96:	3b7f      	subs	r3, #127	; 0x7f
    4b98:	00e4      	lsls	r4, r4, #3
    4b9a:	04d2      	lsls	r2, r2, #19
    4b9c:	4443      	add	r3, r8
    4b9e:	2000      	movs	r0, #0
    4ba0:	4314      	orrs	r4, r2
    4ba2:	1c59      	adds	r1, r3, #1
    4ba4:	2f0a      	cmp	r7, #10
    4ba6:	dc2b      	bgt.n	4c00 <__aeabi_fmul+0xbc>
    4ba8:	4075      	eors	r5, r6
    4baa:	2f02      	cmp	r7, #2
    4bac:	dc22      	bgt.n	4bf4 <__aeabi_fmul+0xb0>
    4bae:	3f01      	subs	r7, #1
    4bb0:	2f01      	cmp	r7, #1
    4bb2:	d900      	bls.n	4bb6 <__aeabi_fmul+0x72>
    4bb4:	e0bb      	b.n	4d2e <__aeabi_fmul+0x1ea>
    4bb6:	2802      	cmp	r0, #2
    4bb8:	d06b      	beq.n	4c92 <__aeabi_fmul+0x14e>
    4bba:	2801      	cmp	r0, #1
    4bbc:	d12a      	bne.n	4c14 <__aeabi_fmul+0xd0>
    4bbe:	2000      	movs	r0, #0
    4bc0:	2200      	movs	r2, #0
    4bc2:	05c0      	lsls	r0, r0, #23
    4bc4:	07ed      	lsls	r5, r5, #31
    4bc6:	4310      	orrs	r0, r2
    4bc8:	4328      	orrs	r0, r5
    4bca:	bce0      	pop	{r5, r6, r7}
    4bcc:	46ba      	mov	sl, r7
    4bce:	46b1      	mov	r9, r6
    4bd0:	46a8      	mov	r8, r5
    4bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bd4:	2c00      	cmp	r4, #0
    4bd6:	d064      	beq.n	4ca2 <__aeabi_fmul+0x15e>
    4bd8:	2203      	movs	r2, #3
    4bda:	4641      	mov	r1, r8
    4bdc:	4643      	mov	r3, r8
    4bde:	4317      	orrs	r7, r2
    4be0:	002a      	movs	r2, r5
    4be2:	3101      	adds	r1, #1
    4be4:	33ff      	adds	r3, #255	; 0xff
    4be6:	4072      	eors	r2, r6
    4be8:	31ff      	adds	r1, #255	; 0xff
    4bea:	2f0a      	cmp	r7, #10
    4bec:	dd00      	ble.n	4bf0 <__aeabi_fmul+0xac>
    4bee:	e0d7      	b.n	4da0 <__aeabi_fmul+0x25c>
    4bf0:	0015      	movs	r5, r2
    4bf2:	2003      	movs	r0, #3
    4bf4:	2201      	movs	r2, #1
    4bf6:	40ba      	lsls	r2, r7
    4bf8:	27a6      	movs	r7, #166	; 0xa6
    4bfa:	00ff      	lsls	r7, r7, #3
    4bfc:	423a      	tst	r2, r7
    4bfe:	d020      	beq.n	4c42 <__aeabi_fmul+0xfe>
    4c00:	4653      	mov	r3, sl
    4c02:	2b02      	cmp	r3, #2
    4c04:	d045      	beq.n	4c92 <__aeabi_fmul+0x14e>
    4c06:	2b03      	cmp	r3, #3
    4c08:	d100      	bne.n	4c0c <__aeabi_fmul+0xc8>
    4c0a:	e0bb      	b.n	4d84 <__aeabi_fmul+0x240>
    4c0c:	4650      	mov	r0, sl
    4c0e:	464c      	mov	r4, r9
    4c10:	2801      	cmp	r0, #1
    4c12:	d0d4      	beq.n	4bbe <__aeabi_fmul+0x7a>
    4c14:	000b      	movs	r3, r1
    4c16:	337f      	adds	r3, #127	; 0x7f
    4c18:	2b00      	cmp	r3, #0
    4c1a:	dd70      	ble.n	4cfe <__aeabi_fmul+0x1ba>
    4c1c:	0762      	lsls	r2, r4, #29
    4c1e:	d004      	beq.n	4c2a <__aeabi_fmul+0xe6>
    4c20:	220f      	movs	r2, #15
    4c22:	4022      	ands	r2, r4
    4c24:	2a04      	cmp	r2, #4
    4c26:	d000      	beq.n	4c2a <__aeabi_fmul+0xe6>
    4c28:	3404      	adds	r4, #4
    4c2a:	0122      	lsls	r2, r4, #4
    4c2c:	d503      	bpl.n	4c36 <__aeabi_fmul+0xf2>
    4c2e:	4b63      	ldr	r3, [pc, #396]	; (4dbc <__aeabi_fmul+0x278>)
    4c30:	401c      	ands	r4, r3
    4c32:	000b      	movs	r3, r1
    4c34:	3380      	adds	r3, #128	; 0x80
    4c36:	2bfe      	cmp	r3, #254	; 0xfe
    4c38:	dc2b      	bgt.n	4c92 <__aeabi_fmul+0x14e>
    4c3a:	01a2      	lsls	r2, r4, #6
    4c3c:	0a52      	lsrs	r2, r2, #9
    4c3e:	b2d8      	uxtb	r0, r3
    4c40:	e7bf      	b.n	4bc2 <__aeabi_fmul+0x7e>
    4c42:	2790      	movs	r7, #144	; 0x90
    4c44:	00bf      	lsls	r7, r7, #2
    4c46:	423a      	tst	r2, r7
    4c48:	d126      	bne.n	4c98 <__aeabi_fmul+0x154>
    4c4a:	3fb9      	subs	r7, #185	; 0xb9
    4c4c:	3fff      	subs	r7, #255	; 0xff
    4c4e:	4217      	tst	r7, r2
    4c50:	d06d      	beq.n	4d2e <__aeabi_fmul+0x1ea>
    4c52:	0035      	movs	r5, r6
    4c54:	46a1      	mov	r9, r4
    4c56:	4682      	mov	sl, r0
    4c58:	e7d2      	b.n	4c00 <__aeabi_fmul+0xbc>
    4c5a:	2c00      	cmp	r4, #0
    4c5c:	d141      	bne.n	4ce2 <__aeabi_fmul+0x19e>
    4c5e:	2301      	movs	r3, #1
    4c60:	431f      	orrs	r7, r3
    4c62:	4643      	mov	r3, r8
    4c64:	2001      	movs	r0, #1
    4c66:	1c59      	adds	r1, r3, #1
    4c68:	2f0a      	cmp	r7, #10
    4c6a:	dd9d      	ble.n	4ba8 <__aeabi_fmul+0x64>
    4c6c:	e7c8      	b.n	4c00 <__aeabi_fmul+0xbc>
    4c6e:	464b      	mov	r3, r9
    4c70:	2b00      	cmp	r3, #0
    4c72:	d127      	bne.n	4cc4 <__aeabi_fmul+0x180>
    4c74:	2300      	movs	r3, #0
    4c76:	4698      	mov	r8, r3
    4c78:	3301      	adds	r3, #1
    4c7a:	2704      	movs	r7, #4
    4c7c:	469a      	mov	sl, r3
    4c7e:	e780      	b.n	4b82 <__aeabi_fmul+0x3e>
    4c80:	464b      	mov	r3, r9
    4c82:	2b00      	cmp	r3, #0
    4c84:	d118      	bne.n	4cb8 <__aeabi_fmul+0x174>
    4c86:	23ff      	movs	r3, #255	; 0xff
    4c88:	4698      	mov	r8, r3
    4c8a:	3bfd      	subs	r3, #253	; 0xfd
    4c8c:	2708      	movs	r7, #8
    4c8e:	469a      	mov	sl, r3
    4c90:	e777      	b.n	4b82 <__aeabi_fmul+0x3e>
    4c92:	20ff      	movs	r0, #255	; 0xff
    4c94:	2200      	movs	r2, #0
    4c96:	e794      	b.n	4bc2 <__aeabi_fmul+0x7e>
    4c98:	2280      	movs	r2, #128	; 0x80
    4c9a:	2500      	movs	r5, #0
    4c9c:	20ff      	movs	r0, #255	; 0xff
    4c9e:	03d2      	lsls	r2, r2, #15
    4ca0:	e78f      	b.n	4bc2 <__aeabi_fmul+0x7e>
    4ca2:	2302      	movs	r3, #2
    4ca4:	431f      	orrs	r7, r3
    4ca6:	4643      	mov	r3, r8
    4ca8:	1c59      	adds	r1, r3, #1
    4caa:	31ff      	adds	r1, #255	; 0xff
    4cac:	2f0a      	cmp	r7, #10
    4cae:	dca7      	bgt.n	4c00 <__aeabi_fmul+0xbc>
    4cb0:	2002      	movs	r0, #2
    4cb2:	33ff      	adds	r3, #255	; 0xff
    4cb4:	4075      	eors	r5, r6
    4cb6:	e778      	b.n	4baa <__aeabi_fmul+0x66>
    4cb8:	23ff      	movs	r3, #255	; 0xff
    4cba:	4698      	mov	r8, r3
    4cbc:	3bfc      	subs	r3, #252	; 0xfc
    4cbe:	270c      	movs	r7, #12
    4cc0:	469a      	mov	sl, r3
    4cc2:	e75e      	b.n	4b82 <__aeabi_fmul+0x3e>
    4cc4:	4648      	mov	r0, r9
    4cc6:	f000 fabb 	bl	5240 <__clzsi2>
    4cca:	464a      	mov	r2, r9
    4ccc:	1f43      	subs	r3, r0, #5
    4cce:	409a      	lsls	r2, r3
    4cd0:	2376      	movs	r3, #118	; 0x76
    4cd2:	425b      	negs	r3, r3
    4cd4:	1a1b      	subs	r3, r3, r0
    4cd6:	4698      	mov	r8, r3
    4cd8:	2300      	movs	r3, #0
    4cda:	4691      	mov	r9, r2
    4cdc:	2700      	movs	r7, #0
    4cde:	469a      	mov	sl, r3
    4ce0:	e74f      	b.n	4b82 <__aeabi_fmul+0x3e>
    4ce2:	0020      	movs	r0, r4
    4ce4:	f000 faac 	bl	5240 <__clzsi2>
    4ce8:	1f43      	subs	r3, r0, #5
    4cea:	409c      	lsls	r4, r3
    4cec:	4643      	mov	r3, r8
    4cee:	1a1b      	subs	r3, r3, r0
    4cf0:	3b76      	subs	r3, #118	; 0x76
    4cf2:	2000      	movs	r0, #0
    4cf4:	1c59      	adds	r1, r3, #1
    4cf6:	2f0a      	cmp	r7, #10
    4cf8:	dc00      	bgt.n	4cfc <__aeabi_fmul+0x1b8>
    4cfa:	e755      	b.n	4ba8 <__aeabi_fmul+0x64>
    4cfc:	e780      	b.n	4c00 <__aeabi_fmul+0xbc>
    4cfe:	2201      	movs	r2, #1
    4d00:	1ad3      	subs	r3, r2, r3
    4d02:	2b1b      	cmp	r3, #27
    4d04:	dd00      	ble.n	4d08 <__aeabi_fmul+0x1c4>
    4d06:	e75a      	b.n	4bbe <__aeabi_fmul+0x7a>
    4d08:	319e      	adds	r1, #158	; 0x9e
    4d0a:	0022      	movs	r2, r4
    4d0c:	408c      	lsls	r4, r1
    4d0e:	40da      	lsrs	r2, r3
    4d10:	1e63      	subs	r3, r4, #1
    4d12:	419c      	sbcs	r4, r3
    4d14:	4322      	orrs	r2, r4
    4d16:	0753      	lsls	r3, r2, #29
    4d18:	d004      	beq.n	4d24 <__aeabi_fmul+0x1e0>
    4d1a:	230f      	movs	r3, #15
    4d1c:	4013      	ands	r3, r2
    4d1e:	2b04      	cmp	r3, #4
    4d20:	d000      	beq.n	4d24 <__aeabi_fmul+0x1e0>
    4d22:	3204      	adds	r2, #4
    4d24:	0153      	lsls	r3, r2, #5
    4d26:	d537      	bpl.n	4d98 <__aeabi_fmul+0x254>
    4d28:	2001      	movs	r0, #1
    4d2a:	2200      	movs	r2, #0
    4d2c:	e749      	b.n	4bc2 <__aeabi_fmul+0x7e>
    4d2e:	0c20      	lsrs	r0, r4, #16
    4d30:	464a      	mov	r2, r9
    4d32:	0424      	lsls	r4, r4, #16
    4d34:	0c24      	lsrs	r4, r4, #16
    4d36:	0027      	movs	r7, r4
    4d38:	0c16      	lsrs	r6, r2, #16
    4d3a:	0412      	lsls	r2, r2, #16
    4d3c:	0c12      	lsrs	r2, r2, #16
    4d3e:	4374      	muls	r4, r6
    4d40:	4357      	muls	r7, r2
    4d42:	4346      	muls	r6, r0
    4d44:	4350      	muls	r0, r2
    4d46:	0c3a      	lsrs	r2, r7, #16
    4d48:	1900      	adds	r0, r0, r4
    4d4a:	1812      	adds	r2, r2, r0
    4d4c:	4294      	cmp	r4, r2
    4d4e:	d903      	bls.n	4d58 <__aeabi_fmul+0x214>
    4d50:	2080      	movs	r0, #128	; 0x80
    4d52:	0240      	lsls	r0, r0, #9
    4d54:	4684      	mov	ip, r0
    4d56:	4466      	add	r6, ip
    4d58:	043f      	lsls	r7, r7, #16
    4d5a:	0410      	lsls	r0, r2, #16
    4d5c:	0c3f      	lsrs	r7, r7, #16
    4d5e:	19c0      	adds	r0, r0, r7
    4d60:	0184      	lsls	r4, r0, #6
    4d62:	1e67      	subs	r7, r4, #1
    4d64:	41bc      	sbcs	r4, r7
    4d66:	0c12      	lsrs	r2, r2, #16
    4d68:	0e80      	lsrs	r0, r0, #26
    4d6a:	1992      	adds	r2, r2, r6
    4d6c:	4304      	orrs	r4, r0
    4d6e:	0192      	lsls	r2, r2, #6
    4d70:	4314      	orrs	r4, r2
    4d72:	0112      	lsls	r2, r2, #4
    4d74:	d50e      	bpl.n	4d94 <__aeabi_fmul+0x250>
    4d76:	2301      	movs	r3, #1
    4d78:	0862      	lsrs	r2, r4, #1
    4d7a:	401c      	ands	r4, r3
    4d7c:	4314      	orrs	r4, r2
    4d7e:	e749      	b.n	4c14 <__aeabi_fmul+0xd0>
    4d80:	0035      	movs	r5, r6
    4d82:	46a1      	mov	r9, r4
    4d84:	2280      	movs	r2, #128	; 0x80
    4d86:	464b      	mov	r3, r9
    4d88:	03d2      	lsls	r2, r2, #15
    4d8a:	431a      	orrs	r2, r3
    4d8c:	0252      	lsls	r2, r2, #9
    4d8e:	20ff      	movs	r0, #255	; 0xff
    4d90:	0a52      	lsrs	r2, r2, #9
    4d92:	e716      	b.n	4bc2 <__aeabi_fmul+0x7e>
    4d94:	0019      	movs	r1, r3
    4d96:	e73d      	b.n	4c14 <__aeabi_fmul+0xd0>
    4d98:	0192      	lsls	r2, r2, #6
    4d9a:	2000      	movs	r0, #0
    4d9c:	0a52      	lsrs	r2, r2, #9
    4d9e:	e710      	b.n	4bc2 <__aeabi_fmul+0x7e>
    4da0:	2f0f      	cmp	r7, #15
    4da2:	d1ed      	bne.n	4d80 <__aeabi_fmul+0x23c>
    4da4:	2280      	movs	r2, #128	; 0x80
    4da6:	464b      	mov	r3, r9
    4da8:	03d2      	lsls	r2, r2, #15
    4daa:	4213      	tst	r3, r2
    4dac:	d0ea      	beq.n	4d84 <__aeabi_fmul+0x240>
    4dae:	4214      	tst	r4, r2
    4db0:	d1e8      	bne.n	4d84 <__aeabi_fmul+0x240>
    4db2:	0035      	movs	r5, r6
    4db4:	20ff      	movs	r0, #255	; 0xff
    4db6:	4322      	orrs	r2, r4
    4db8:	e703      	b.n	4bc2 <__aeabi_fmul+0x7e>
    4dba:	46c0      	nop			; (mov r8, r8)
    4dbc:	f7ffffff 	.word	0xf7ffffff

00004dc0 <__aeabi_fsub>:
    4dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dc2:	0243      	lsls	r3, r0, #9
    4dc4:	0045      	lsls	r5, r0, #1
    4dc6:	0fc4      	lsrs	r4, r0, #31
    4dc8:	0248      	lsls	r0, r1, #9
    4dca:	0a42      	lsrs	r2, r0, #9
    4dcc:	4694      	mov	ip, r2
    4dce:	004a      	lsls	r2, r1, #1
    4dd0:	0a5e      	lsrs	r6, r3, #9
    4dd2:	0e2d      	lsrs	r5, r5, #24
    4dd4:	099b      	lsrs	r3, r3, #6
    4dd6:	0e12      	lsrs	r2, r2, #24
    4dd8:	0fc9      	lsrs	r1, r1, #31
    4dda:	0980      	lsrs	r0, r0, #6
    4ddc:	2aff      	cmp	r2, #255	; 0xff
    4dde:	d023      	beq.n	4e28 <__aeabi_fsub+0x68>
    4de0:	2701      	movs	r7, #1
    4de2:	4079      	eors	r1, r7
    4de4:	1aaf      	subs	r7, r5, r2
    4de6:	428c      	cmp	r4, r1
    4de8:	d00f      	beq.n	4e0a <__aeabi_fsub+0x4a>
    4dea:	2f00      	cmp	r7, #0
    4dec:	dc00      	bgt.n	4df0 <__aeabi_fsub+0x30>
    4dee:	e15d      	b.n	50ac <__aeabi_fsub+0x2ec>
    4df0:	2a00      	cmp	r2, #0
    4df2:	d12f      	bne.n	4e54 <__aeabi_fsub+0x94>
    4df4:	2800      	cmp	r0, #0
    4df6:	d100      	bne.n	4dfa <__aeabi_fsub+0x3a>
    4df8:	e090      	b.n	4f1c <__aeabi_fsub+0x15c>
    4dfa:	1e7a      	subs	r2, r7, #1
    4dfc:	2f01      	cmp	r7, #1
    4dfe:	d100      	bne.n	4e02 <__aeabi_fsub+0x42>
    4e00:	e11a      	b.n	5038 <__aeabi_fsub+0x278>
    4e02:	2fff      	cmp	r7, #255	; 0xff
    4e04:	d01c      	beq.n	4e40 <__aeabi_fsub+0x80>
    4e06:	0017      	movs	r7, r2
    4e08:	e029      	b.n	4e5e <__aeabi_fsub+0x9e>
    4e0a:	2f00      	cmp	r7, #0
    4e0c:	dc00      	bgt.n	4e10 <__aeabi_fsub+0x50>
    4e0e:	e159      	b.n	50c4 <__aeabi_fsub+0x304>
    4e10:	2a00      	cmp	r2, #0
    4e12:	d052      	beq.n	4eba <__aeabi_fsub+0xfa>
    4e14:	2dff      	cmp	r5, #255	; 0xff
    4e16:	d013      	beq.n	4e40 <__aeabi_fsub+0x80>
    4e18:	2280      	movs	r2, #128	; 0x80
    4e1a:	04d2      	lsls	r2, r2, #19
    4e1c:	4310      	orrs	r0, r2
    4e1e:	2f1b      	cmp	r7, #27
    4e20:	dc00      	bgt.n	4e24 <__aeabi_fsub+0x64>
    4e22:	e06a      	b.n	4efa <__aeabi_fsub+0x13a>
    4e24:	3301      	adds	r3, #1
    4e26:	e02b      	b.n	4e80 <__aeabi_fsub+0xc0>
    4e28:	2800      	cmp	r0, #0
    4e2a:	d03b      	beq.n	4ea4 <__aeabi_fsub+0xe4>
    4e2c:	428c      	cmp	r4, r1
    4e2e:	d04d      	beq.n	4ecc <__aeabi_fsub+0x10c>
    4e30:	2dff      	cmp	r5, #255	; 0xff
    4e32:	d100      	bne.n	4e36 <__aeabi_fsub+0x76>
    4e34:	e08f      	b.n	4f56 <__aeabi_fsub+0x196>
    4e36:	2d00      	cmp	r5, #0
    4e38:	d100      	bne.n	4e3c <__aeabi_fsub+0x7c>
    4e3a:	e0ab      	b.n	4f94 <__aeabi_fsub+0x1d4>
    4e3c:	000c      	movs	r4, r1
    4e3e:	0003      	movs	r3, r0
    4e40:	08db      	lsrs	r3, r3, #3
    4e42:	2b00      	cmp	r3, #0
    4e44:	d067      	beq.n	4f16 <__aeabi_fsub+0x156>
    4e46:	2280      	movs	r2, #128	; 0x80
    4e48:	03d2      	lsls	r2, r2, #15
    4e4a:	4313      	orrs	r3, r2
    4e4c:	025b      	lsls	r3, r3, #9
    4e4e:	20ff      	movs	r0, #255	; 0xff
    4e50:	0a5b      	lsrs	r3, r3, #9
    4e52:	e022      	b.n	4e9a <__aeabi_fsub+0xda>
    4e54:	2dff      	cmp	r5, #255	; 0xff
    4e56:	d0f3      	beq.n	4e40 <__aeabi_fsub+0x80>
    4e58:	2280      	movs	r2, #128	; 0x80
    4e5a:	04d2      	lsls	r2, r2, #19
    4e5c:	4310      	orrs	r0, r2
    4e5e:	2201      	movs	r2, #1
    4e60:	2f1b      	cmp	r7, #27
    4e62:	dc07      	bgt.n	4e74 <__aeabi_fsub+0xb4>
    4e64:	2120      	movs	r1, #32
    4e66:	1bc9      	subs	r1, r1, r7
    4e68:	0002      	movs	r2, r0
    4e6a:	4088      	lsls	r0, r1
    4e6c:	40fa      	lsrs	r2, r7
    4e6e:	1e41      	subs	r1, r0, #1
    4e70:	4188      	sbcs	r0, r1
    4e72:	4302      	orrs	r2, r0
    4e74:	1a9b      	subs	r3, r3, r2
    4e76:	015a      	lsls	r2, r3, #5
    4e78:	d456      	bmi.n	4f28 <__aeabi_fsub+0x168>
    4e7a:	2207      	movs	r2, #7
    4e7c:	401a      	ands	r2, r3
    4e7e:	d04e      	beq.n	4f1e <__aeabi_fsub+0x15e>
    4e80:	220f      	movs	r2, #15
    4e82:	401a      	ands	r2, r3
    4e84:	2a04      	cmp	r2, #4
    4e86:	d000      	beq.n	4e8a <__aeabi_fsub+0xca>
    4e88:	3304      	adds	r3, #4
    4e8a:	015a      	lsls	r2, r3, #5
    4e8c:	d547      	bpl.n	4f1e <__aeabi_fsub+0x15e>
    4e8e:	1c68      	adds	r0, r5, #1
    4e90:	2dfe      	cmp	r5, #254	; 0xfe
    4e92:	d040      	beq.n	4f16 <__aeabi_fsub+0x156>
    4e94:	019b      	lsls	r3, r3, #6
    4e96:	0a5b      	lsrs	r3, r3, #9
    4e98:	b2c0      	uxtb	r0, r0
    4e9a:	05c0      	lsls	r0, r0, #23
    4e9c:	4318      	orrs	r0, r3
    4e9e:	07e4      	lsls	r4, r4, #31
    4ea0:	4320      	orrs	r0, r4
    4ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ea4:	2701      	movs	r7, #1
    4ea6:	4079      	eors	r1, r7
    4ea8:	428c      	cmp	r4, r1
    4eaa:	d1c1      	bne.n	4e30 <__aeabi_fsub+0x70>
    4eac:	2dff      	cmp	r5, #255	; 0xff
    4eae:	d010      	beq.n	4ed2 <__aeabi_fsub+0x112>
    4eb0:	2d00      	cmp	r5, #0
    4eb2:	d100      	bne.n	4eb6 <__aeabi_fsub+0xf6>
    4eb4:	e0e7      	b.n	5086 <__aeabi_fsub+0x2c6>
    4eb6:	2300      	movs	r3, #0
    4eb8:	e7c2      	b.n	4e40 <__aeabi_fsub+0x80>
    4eba:	2800      	cmp	r0, #0
    4ebc:	d02e      	beq.n	4f1c <__aeabi_fsub+0x15c>
    4ebe:	1e7a      	subs	r2, r7, #1
    4ec0:	2f01      	cmp	r7, #1
    4ec2:	d07f      	beq.n	4fc4 <__aeabi_fsub+0x204>
    4ec4:	2fff      	cmp	r7, #255	; 0xff
    4ec6:	d0bb      	beq.n	4e40 <__aeabi_fsub+0x80>
    4ec8:	0017      	movs	r7, r2
    4eca:	e7a8      	b.n	4e1e <__aeabi_fsub+0x5e>
    4ecc:	2dff      	cmp	r5, #255	; 0xff
    4ece:	d000      	beq.n	4ed2 <__aeabi_fsub+0x112>
    4ed0:	e083      	b.n	4fda <__aeabi_fsub+0x21a>
    4ed2:	27fe      	movs	r7, #254	; 0xfe
    4ed4:	1c6a      	adds	r2, r5, #1
    4ed6:	4217      	tst	r7, r2
    4ed8:	d000      	beq.n	4edc <__aeabi_fsub+0x11c>
    4eda:	e08d      	b.n	4ff8 <__aeabi_fsub+0x238>
    4edc:	2d00      	cmp	r5, #0
    4ede:	d000      	beq.n	4ee2 <__aeabi_fsub+0x122>
    4ee0:	e0ad      	b.n	503e <__aeabi_fsub+0x27e>
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d100      	bne.n	4ee8 <__aeabi_fsub+0x128>
    4ee6:	e0d2      	b.n	508e <__aeabi_fsub+0x2ce>
    4ee8:	2800      	cmp	r0, #0
    4eea:	d000      	beq.n	4eee <__aeabi_fsub+0x12e>
    4eec:	e0d1      	b.n	5092 <__aeabi_fsub+0x2d2>
    4eee:	2500      	movs	r5, #0
    4ef0:	08db      	lsrs	r3, r3, #3
    4ef2:	025b      	lsls	r3, r3, #9
    4ef4:	0a5b      	lsrs	r3, r3, #9
    4ef6:	b2e8      	uxtb	r0, r5
    4ef8:	e7cf      	b.n	4e9a <__aeabi_fsub+0xda>
    4efa:	2120      	movs	r1, #32
    4efc:	1bc9      	subs	r1, r1, r7
    4efe:	0002      	movs	r2, r0
    4f00:	4088      	lsls	r0, r1
    4f02:	40fa      	lsrs	r2, r7
    4f04:	1e41      	subs	r1, r0, #1
    4f06:	4188      	sbcs	r0, r1
    4f08:	4310      	orrs	r0, r2
    4f0a:	181b      	adds	r3, r3, r0
    4f0c:	015a      	lsls	r2, r3, #5
    4f0e:	d5b4      	bpl.n	4e7a <__aeabi_fsub+0xba>
    4f10:	3501      	adds	r5, #1
    4f12:	2dff      	cmp	r5, #255	; 0xff
    4f14:	d15a      	bne.n	4fcc <__aeabi_fsub+0x20c>
    4f16:	20ff      	movs	r0, #255	; 0xff
    4f18:	2300      	movs	r3, #0
    4f1a:	e7be      	b.n	4e9a <__aeabi_fsub+0xda>
    4f1c:	003d      	movs	r5, r7
    4f1e:	08db      	lsrs	r3, r3, #3
    4f20:	2dff      	cmp	r5, #255	; 0xff
    4f22:	d100      	bne.n	4f26 <__aeabi_fsub+0x166>
    4f24:	e78d      	b.n	4e42 <__aeabi_fsub+0x82>
    4f26:	e7e4      	b.n	4ef2 <__aeabi_fsub+0x132>
    4f28:	019e      	lsls	r6, r3, #6
    4f2a:	09b6      	lsrs	r6, r6, #6
    4f2c:	0030      	movs	r0, r6
    4f2e:	f000 f987 	bl	5240 <__clzsi2>
    4f32:	3805      	subs	r0, #5
    4f34:	4086      	lsls	r6, r0
    4f36:	4285      	cmp	r5, r0
    4f38:	dc1f      	bgt.n	4f7a <__aeabi_fsub+0x1ba>
    4f3a:	2220      	movs	r2, #32
    4f3c:	1b40      	subs	r0, r0, r5
    4f3e:	3001      	adds	r0, #1
    4f40:	1a12      	subs	r2, r2, r0
    4f42:	0033      	movs	r3, r6
    4f44:	4096      	lsls	r6, r2
    4f46:	40c3      	lsrs	r3, r0
    4f48:	1e72      	subs	r2, r6, #1
    4f4a:	4196      	sbcs	r6, r2
    4f4c:	2500      	movs	r5, #0
    4f4e:	4333      	orrs	r3, r6
    4f50:	075a      	lsls	r2, r3, #29
    4f52:	d195      	bne.n	4e80 <__aeabi_fsub+0xc0>
    4f54:	e799      	b.n	4e8a <__aeabi_fsub+0xca>
    4f56:	27fe      	movs	r7, #254	; 0xfe
    4f58:	1c6a      	adds	r2, r5, #1
    4f5a:	4217      	tst	r7, r2
    4f5c:	d111      	bne.n	4f82 <__aeabi_fsub+0x1c2>
    4f5e:	2d00      	cmp	r5, #0
    4f60:	d15a      	bne.n	5018 <__aeabi_fsub+0x258>
    4f62:	2b00      	cmp	r3, #0
    4f64:	d100      	bne.n	4f68 <__aeabi_fsub+0x1a8>
    4f66:	e089      	b.n	507c <__aeabi_fsub+0x2bc>
    4f68:	2800      	cmp	r0, #0
    4f6a:	d0c0      	beq.n	4eee <__aeabi_fsub+0x12e>
    4f6c:	1a1a      	subs	r2, r3, r0
    4f6e:	0156      	lsls	r6, r2, #5
    4f70:	d400      	bmi.n	4f74 <__aeabi_fsub+0x1b4>
    4f72:	e096      	b.n	50a2 <__aeabi_fsub+0x2e2>
    4f74:	000c      	movs	r4, r1
    4f76:	1ac3      	subs	r3, r0, r3
    4f78:	e7ea      	b.n	4f50 <__aeabi_fsub+0x190>
    4f7a:	4b58      	ldr	r3, [pc, #352]	; (50dc <__aeabi_fsub+0x31c>)
    4f7c:	1a2d      	subs	r5, r5, r0
    4f7e:	4033      	ands	r3, r6
    4f80:	e7e6      	b.n	4f50 <__aeabi_fsub+0x190>
    4f82:	1a1e      	subs	r6, r3, r0
    4f84:	0172      	lsls	r2, r6, #5
    4f86:	d444      	bmi.n	5012 <__aeabi_fsub+0x252>
    4f88:	2e00      	cmp	r6, #0
    4f8a:	d1cf      	bne.n	4f2c <__aeabi_fsub+0x16c>
    4f8c:	2400      	movs	r4, #0
    4f8e:	2000      	movs	r0, #0
    4f90:	2300      	movs	r3, #0
    4f92:	e782      	b.n	4e9a <__aeabi_fsub+0xda>
    4f94:	25ff      	movs	r5, #255	; 0xff
    4f96:	2b00      	cmp	r3, #0
    4f98:	d038      	beq.n	500c <__aeabi_fsub+0x24c>
    4f9a:	1e6e      	subs	r6, r5, #1
    4f9c:	2d01      	cmp	r5, #1
    4f9e:	d06a      	beq.n	5076 <__aeabi_fsub+0x2b6>
    4fa0:	2dff      	cmp	r5, #255	; 0xff
    4fa2:	d100      	bne.n	4fa6 <__aeabi_fsub+0x1e6>
    4fa4:	e74a      	b.n	4e3c <__aeabi_fsub+0x7c>
    4fa6:	2401      	movs	r4, #1
    4fa8:	2e1b      	cmp	r6, #27
    4faa:	dc07      	bgt.n	4fbc <__aeabi_fsub+0x1fc>
    4fac:	2520      	movs	r5, #32
    4fae:	1bad      	subs	r5, r5, r6
    4fb0:	001c      	movs	r4, r3
    4fb2:	40ab      	lsls	r3, r5
    4fb4:	40f4      	lsrs	r4, r6
    4fb6:	1e5d      	subs	r5, r3, #1
    4fb8:	41ab      	sbcs	r3, r5
    4fba:	431c      	orrs	r4, r3
    4fbc:	1b03      	subs	r3, r0, r4
    4fbe:	0015      	movs	r5, r2
    4fc0:	000c      	movs	r4, r1
    4fc2:	e758      	b.n	4e76 <__aeabi_fsub+0xb6>
    4fc4:	181b      	adds	r3, r3, r0
    4fc6:	2502      	movs	r5, #2
    4fc8:	015a      	lsls	r2, r3, #5
    4fca:	d533      	bpl.n	5034 <__aeabi_fsub+0x274>
    4fcc:	2201      	movs	r2, #1
    4fce:	4944      	ldr	r1, [pc, #272]	; (50e0 <__aeabi_fsub+0x320>)
    4fd0:	401a      	ands	r2, r3
    4fd2:	085b      	lsrs	r3, r3, #1
    4fd4:	400b      	ands	r3, r1
    4fd6:	4313      	orrs	r3, r2
    4fd8:	e7ba      	b.n	4f50 <__aeabi_fsub+0x190>
    4fda:	2d00      	cmp	r5, #0
    4fdc:	d131      	bne.n	5042 <__aeabi_fsub+0x282>
    4fde:	35ff      	adds	r5, #255	; 0xff
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d052      	beq.n	508a <__aeabi_fsub+0x2ca>
    4fe4:	1e69      	subs	r1, r5, #1
    4fe6:	2d01      	cmp	r5, #1
    4fe8:	d020      	beq.n	502c <__aeabi_fsub+0x26c>
    4fea:	2dff      	cmp	r5, #255	; 0xff
    4fec:	d029      	beq.n	5042 <__aeabi_fsub+0x282>
    4fee:	291b      	cmp	r1, #27
    4ff0:	dd36      	ble.n	5060 <__aeabi_fsub+0x2a0>
    4ff2:	0015      	movs	r5, r2
    4ff4:	1c43      	adds	r3, r0, #1
    4ff6:	e743      	b.n	4e80 <__aeabi_fsub+0xc0>
    4ff8:	2aff      	cmp	r2, #255	; 0xff
    4ffa:	d08c      	beq.n	4f16 <__aeabi_fsub+0x156>
    4ffc:	181b      	adds	r3, r3, r0
    4ffe:	085b      	lsrs	r3, r3, #1
    5000:	0015      	movs	r5, r2
    5002:	075a      	lsls	r2, r3, #29
    5004:	d000      	beq.n	5008 <__aeabi_fsub+0x248>
    5006:	e73b      	b.n	4e80 <__aeabi_fsub+0xc0>
    5008:	08db      	lsrs	r3, r3, #3
    500a:	e772      	b.n	4ef2 <__aeabi_fsub+0x132>
    500c:	000c      	movs	r4, r1
    500e:	0003      	movs	r3, r0
    5010:	e785      	b.n	4f1e <__aeabi_fsub+0x15e>
    5012:	000c      	movs	r4, r1
    5014:	1ac6      	subs	r6, r0, r3
    5016:	e789      	b.n	4f2c <__aeabi_fsub+0x16c>
    5018:	2b00      	cmp	r3, #0
    501a:	d114      	bne.n	5046 <__aeabi_fsub+0x286>
    501c:	2800      	cmp	r0, #0
    501e:	d000      	beq.n	5022 <__aeabi_fsub+0x262>
    5020:	e70c      	b.n	4e3c <__aeabi_fsub+0x7c>
    5022:	2380      	movs	r3, #128	; 0x80
    5024:	2400      	movs	r4, #0
    5026:	20ff      	movs	r0, #255	; 0xff
    5028:	03db      	lsls	r3, r3, #15
    502a:	e736      	b.n	4e9a <__aeabi_fsub+0xda>
    502c:	181b      	adds	r3, r3, r0
    502e:	3501      	adds	r5, #1
    5030:	015a      	lsls	r2, r3, #5
    5032:	d4cb      	bmi.n	4fcc <__aeabi_fsub+0x20c>
    5034:	3d01      	subs	r5, #1
    5036:	e720      	b.n	4e7a <__aeabi_fsub+0xba>
    5038:	2501      	movs	r5, #1
    503a:	1a1b      	subs	r3, r3, r0
    503c:	e71b      	b.n	4e76 <__aeabi_fsub+0xb6>
    503e:	2b00      	cmp	r3, #0
    5040:	d101      	bne.n	5046 <__aeabi_fsub+0x286>
    5042:	0003      	movs	r3, r0
    5044:	e6fc      	b.n	4e40 <__aeabi_fsub+0x80>
    5046:	2800      	cmp	r0, #0
    5048:	d100      	bne.n	504c <__aeabi_fsub+0x28c>
    504a:	e6f9      	b.n	4e40 <__aeabi_fsub+0x80>
    504c:	2280      	movs	r2, #128	; 0x80
    504e:	03d2      	lsls	r2, r2, #15
    5050:	4296      	cmp	r6, r2
    5052:	d303      	bcc.n	505c <__aeabi_fsub+0x29c>
    5054:	4594      	cmp	ip, r2
    5056:	d201      	bcs.n	505c <__aeabi_fsub+0x29c>
    5058:	000c      	movs	r4, r1
    505a:	0003      	movs	r3, r0
    505c:	08db      	lsrs	r3, r3, #3
    505e:	e6f2      	b.n	4e46 <__aeabi_fsub+0x86>
    5060:	001d      	movs	r5, r3
    5062:	2620      	movs	r6, #32
    5064:	40cd      	lsrs	r5, r1
    5066:	1a71      	subs	r1, r6, r1
    5068:	408b      	lsls	r3, r1
    506a:	1e59      	subs	r1, r3, #1
    506c:	418b      	sbcs	r3, r1
    506e:	432b      	orrs	r3, r5
    5070:	181b      	adds	r3, r3, r0
    5072:	0015      	movs	r5, r2
    5074:	e74a      	b.n	4f0c <__aeabi_fsub+0x14c>
    5076:	000c      	movs	r4, r1
    5078:	1ac3      	subs	r3, r0, r3
    507a:	e6fc      	b.n	4e76 <__aeabi_fsub+0xb6>
    507c:	2800      	cmp	r0, #0
    507e:	d085      	beq.n	4f8c <__aeabi_fsub+0x1cc>
    5080:	000c      	movs	r4, r1
    5082:	0003      	movs	r3, r0
    5084:	e733      	b.n	4eee <__aeabi_fsub+0x12e>
    5086:	25ff      	movs	r5, #255	; 0xff
    5088:	e7aa      	b.n	4fe0 <__aeabi_fsub+0x220>
    508a:	0003      	movs	r3, r0
    508c:	e747      	b.n	4f1e <__aeabi_fsub+0x15e>
    508e:	0003      	movs	r3, r0
    5090:	e72d      	b.n	4eee <__aeabi_fsub+0x12e>
    5092:	181b      	adds	r3, r3, r0
    5094:	015a      	lsls	r2, r3, #5
    5096:	d5b7      	bpl.n	5008 <__aeabi_fsub+0x248>
    5098:	4a10      	ldr	r2, [pc, #64]	; (50dc <__aeabi_fsub+0x31c>)
    509a:	3501      	adds	r5, #1
    509c:	4013      	ands	r3, r2
    509e:	08db      	lsrs	r3, r3, #3
    50a0:	e727      	b.n	4ef2 <__aeabi_fsub+0x132>
    50a2:	1e13      	subs	r3, r2, #0
    50a4:	d100      	bne.n	50a8 <__aeabi_fsub+0x2e8>
    50a6:	e771      	b.n	4f8c <__aeabi_fsub+0x1cc>
    50a8:	08db      	lsrs	r3, r3, #3
    50aa:	e722      	b.n	4ef2 <__aeabi_fsub+0x132>
    50ac:	2f00      	cmp	r7, #0
    50ae:	d100      	bne.n	50b2 <__aeabi_fsub+0x2f2>
    50b0:	e751      	b.n	4f56 <__aeabi_fsub+0x196>
    50b2:	1b56      	subs	r6, r2, r5
    50b4:	2d00      	cmp	r5, #0
    50b6:	d101      	bne.n	50bc <__aeabi_fsub+0x2fc>
    50b8:	0035      	movs	r5, r6
    50ba:	e76c      	b.n	4f96 <__aeabi_fsub+0x1d6>
    50bc:	2480      	movs	r4, #128	; 0x80
    50be:	04e4      	lsls	r4, r4, #19
    50c0:	4323      	orrs	r3, r4
    50c2:	e770      	b.n	4fa6 <__aeabi_fsub+0x1e6>
    50c4:	2f00      	cmp	r7, #0
    50c6:	d100      	bne.n	50ca <__aeabi_fsub+0x30a>
    50c8:	e703      	b.n	4ed2 <__aeabi_fsub+0x112>
    50ca:	1b51      	subs	r1, r2, r5
    50cc:	2d00      	cmp	r5, #0
    50ce:	d101      	bne.n	50d4 <__aeabi_fsub+0x314>
    50d0:	000d      	movs	r5, r1
    50d2:	e785      	b.n	4fe0 <__aeabi_fsub+0x220>
    50d4:	2580      	movs	r5, #128	; 0x80
    50d6:	04ed      	lsls	r5, r5, #19
    50d8:	432b      	orrs	r3, r5
    50da:	e788      	b.n	4fee <__aeabi_fsub+0x22e>
    50dc:	fbffffff 	.word	0xfbffffff
    50e0:	7dffffff 	.word	0x7dffffff

000050e4 <__aeabi_f2iz>:
    50e4:	0241      	lsls	r1, r0, #9
    50e6:	0042      	lsls	r2, r0, #1
    50e8:	0fc3      	lsrs	r3, r0, #31
    50ea:	0a49      	lsrs	r1, r1, #9
    50ec:	2000      	movs	r0, #0
    50ee:	0e12      	lsrs	r2, r2, #24
    50f0:	2a7e      	cmp	r2, #126	; 0x7e
    50f2:	dd03      	ble.n	50fc <__aeabi_f2iz+0x18>
    50f4:	2a9d      	cmp	r2, #157	; 0x9d
    50f6:	dd02      	ble.n	50fe <__aeabi_f2iz+0x1a>
    50f8:	4a09      	ldr	r2, [pc, #36]	; (5120 <__aeabi_f2iz+0x3c>)
    50fa:	1898      	adds	r0, r3, r2
    50fc:	4770      	bx	lr
    50fe:	2080      	movs	r0, #128	; 0x80
    5100:	0400      	lsls	r0, r0, #16
    5102:	4301      	orrs	r1, r0
    5104:	2a95      	cmp	r2, #149	; 0x95
    5106:	dc07      	bgt.n	5118 <__aeabi_f2iz+0x34>
    5108:	2096      	movs	r0, #150	; 0x96
    510a:	1a82      	subs	r2, r0, r2
    510c:	40d1      	lsrs	r1, r2
    510e:	4248      	negs	r0, r1
    5110:	2b00      	cmp	r3, #0
    5112:	d1f3      	bne.n	50fc <__aeabi_f2iz+0x18>
    5114:	0008      	movs	r0, r1
    5116:	e7f1      	b.n	50fc <__aeabi_f2iz+0x18>
    5118:	3a96      	subs	r2, #150	; 0x96
    511a:	4091      	lsls	r1, r2
    511c:	e7f7      	b.n	510e <__aeabi_f2iz+0x2a>
    511e:	46c0      	nop			; (mov r8, r8)
    5120:	7fffffff 	.word	0x7fffffff

00005124 <__aeabi_i2f>:
    5124:	b570      	push	{r4, r5, r6, lr}
    5126:	2800      	cmp	r0, #0
    5128:	d013      	beq.n	5152 <__aeabi_i2f+0x2e>
    512a:	17c3      	asrs	r3, r0, #31
    512c:	18c5      	adds	r5, r0, r3
    512e:	405d      	eors	r5, r3
    5130:	0fc4      	lsrs	r4, r0, #31
    5132:	0028      	movs	r0, r5
    5134:	f000 f884 	bl	5240 <__clzsi2>
    5138:	239e      	movs	r3, #158	; 0x9e
    513a:	0001      	movs	r1, r0
    513c:	1a1b      	subs	r3, r3, r0
    513e:	2b96      	cmp	r3, #150	; 0x96
    5140:	dc0f      	bgt.n	5162 <__aeabi_i2f+0x3e>
    5142:	2808      	cmp	r0, #8
    5144:	d034      	beq.n	51b0 <__aeabi_i2f+0x8c>
    5146:	3908      	subs	r1, #8
    5148:	408d      	lsls	r5, r1
    514a:	026d      	lsls	r5, r5, #9
    514c:	0a6d      	lsrs	r5, r5, #9
    514e:	b2d8      	uxtb	r0, r3
    5150:	e002      	b.n	5158 <__aeabi_i2f+0x34>
    5152:	2400      	movs	r4, #0
    5154:	2000      	movs	r0, #0
    5156:	2500      	movs	r5, #0
    5158:	05c0      	lsls	r0, r0, #23
    515a:	4328      	orrs	r0, r5
    515c:	07e4      	lsls	r4, r4, #31
    515e:	4320      	orrs	r0, r4
    5160:	bd70      	pop	{r4, r5, r6, pc}
    5162:	2b99      	cmp	r3, #153	; 0x99
    5164:	dc16      	bgt.n	5194 <__aeabi_i2f+0x70>
    5166:	1f42      	subs	r2, r0, #5
    5168:	2805      	cmp	r0, #5
    516a:	d000      	beq.n	516e <__aeabi_i2f+0x4a>
    516c:	4095      	lsls	r5, r2
    516e:	002a      	movs	r2, r5
    5170:	4811      	ldr	r0, [pc, #68]	; (51b8 <__aeabi_i2f+0x94>)
    5172:	4002      	ands	r2, r0
    5174:	076e      	lsls	r6, r5, #29
    5176:	d009      	beq.n	518c <__aeabi_i2f+0x68>
    5178:	260f      	movs	r6, #15
    517a:	4035      	ands	r5, r6
    517c:	2d04      	cmp	r5, #4
    517e:	d005      	beq.n	518c <__aeabi_i2f+0x68>
    5180:	3204      	adds	r2, #4
    5182:	0155      	lsls	r5, r2, #5
    5184:	d502      	bpl.n	518c <__aeabi_i2f+0x68>
    5186:	239f      	movs	r3, #159	; 0x9f
    5188:	4002      	ands	r2, r0
    518a:	1a5b      	subs	r3, r3, r1
    518c:	0192      	lsls	r2, r2, #6
    518e:	0a55      	lsrs	r5, r2, #9
    5190:	b2d8      	uxtb	r0, r3
    5192:	e7e1      	b.n	5158 <__aeabi_i2f+0x34>
    5194:	2205      	movs	r2, #5
    5196:	1a12      	subs	r2, r2, r0
    5198:	0028      	movs	r0, r5
    519a:	40d0      	lsrs	r0, r2
    519c:	0002      	movs	r2, r0
    519e:	0008      	movs	r0, r1
    51a0:	301b      	adds	r0, #27
    51a2:	4085      	lsls	r5, r0
    51a4:	0028      	movs	r0, r5
    51a6:	1e45      	subs	r5, r0, #1
    51a8:	41a8      	sbcs	r0, r5
    51aa:	4302      	orrs	r2, r0
    51ac:	0015      	movs	r5, r2
    51ae:	e7de      	b.n	516e <__aeabi_i2f+0x4a>
    51b0:	026d      	lsls	r5, r5, #9
    51b2:	2096      	movs	r0, #150	; 0x96
    51b4:	0a6d      	lsrs	r5, r5, #9
    51b6:	e7cf      	b.n	5158 <__aeabi_i2f+0x34>
    51b8:	fbffffff 	.word	0xfbffffff

000051bc <__aeabi_ui2f>:
    51bc:	b570      	push	{r4, r5, r6, lr}
    51be:	1e04      	subs	r4, r0, #0
    51c0:	d00e      	beq.n	51e0 <__aeabi_ui2f+0x24>
    51c2:	f000 f83d 	bl	5240 <__clzsi2>
    51c6:	239e      	movs	r3, #158	; 0x9e
    51c8:	0001      	movs	r1, r0
    51ca:	1a1b      	subs	r3, r3, r0
    51cc:	2b96      	cmp	r3, #150	; 0x96
    51ce:	dc0c      	bgt.n	51ea <__aeabi_ui2f+0x2e>
    51d0:	2808      	cmp	r0, #8
    51d2:	d02f      	beq.n	5234 <__aeabi_ui2f+0x78>
    51d4:	3908      	subs	r1, #8
    51d6:	408c      	lsls	r4, r1
    51d8:	0264      	lsls	r4, r4, #9
    51da:	0a64      	lsrs	r4, r4, #9
    51dc:	b2d8      	uxtb	r0, r3
    51de:	e001      	b.n	51e4 <__aeabi_ui2f+0x28>
    51e0:	2000      	movs	r0, #0
    51e2:	2400      	movs	r4, #0
    51e4:	05c0      	lsls	r0, r0, #23
    51e6:	4320      	orrs	r0, r4
    51e8:	bd70      	pop	{r4, r5, r6, pc}
    51ea:	2b99      	cmp	r3, #153	; 0x99
    51ec:	dc16      	bgt.n	521c <__aeabi_ui2f+0x60>
    51ee:	1f42      	subs	r2, r0, #5
    51f0:	2805      	cmp	r0, #5
    51f2:	d000      	beq.n	51f6 <__aeabi_ui2f+0x3a>
    51f4:	4094      	lsls	r4, r2
    51f6:	0022      	movs	r2, r4
    51f8:	4810      	ldr	r0, [pc, #64]	; (523c <__aeabi_ui2f+0x80>)
    51fa:	4002      	ands	r2, r0
    51fc:	0765      	lsls	r5, r4, #29
    51fe:	d009      	beq.n	5214 <__aeabi_ui2f+0x58>
    5200:	250f      	movs	r5, #15
    5202:	402c      	ands	r4, r5
    5204:	2c04      	cmp	r4, #4
    5206:	d005      	beq.n	5214 <__aeabi_ui2f+0x58>
    5208:	3204      	adds	r2, #4
    520a:	0154      	lsls	r4, r2, #5
    520c:	d502      	bpl.n	5214 <__aeabi_ui2f+0x58>
    520e:	239f      	movs	r3, #159	; 0x9f
    5210:	4002      	ands	r2, r0
    5212:	1a5b      	subs	r3, r3, r1
    5214:	0192      	lsls	r2, r2, #6
    5216:	0a54      	lsrs	r4, r2, #9
    5218:	b2d8      	uxtb	r0, r3
    521a:	e7e3      	b.n	51e4 <__aeabi_ui2f+0x28>
    521c:	0002      	movs	r2, r0
    521e:	0020      	movs	r0, r4
    5220:	321b      	adds	r2, #27
    5222:	4090      	lsls	r0, r2
    5224:	0002      	movs	r2, r0
    5226:	1e50      	subs	r0, r2, #1
    5228:	4182      	sbcs	r2, r0
    522a:	2005      	movs	r0, #5
    522c:	1a40      	subs	r0, r0, r1
    522e:	40c4      	lsrs	r4, r0
    5230:	4314      	orrs	r4, r2
    5232:	e7e0      	b.n	51f6 <__aeabi_ui2f+0x3a>
    5234:	0264      	lsls	r4, r4, #9
    5236:	2096      	movs	r0, #150	; 0x96
    5238:	0a64      	lsrs	r4, r4, #9
    523a:	e7d3      	b.n	51e4 <__aeabi_ui2f+0x28>
    523c:	fbffffff 	.word	0xfbffffff

00005240 <__clzsi2>:
    5240:	211c      	movs	r1, #28
    5242:	2301      	movs	r3, #1
    5244:	041b      	lsls	r3, r3, #16
    5246:	4298      	cmp	r0, r3
    5248:	d301      	bcc.n	524e <__clzsi2+0xe>
    524a:	0c00      	lsrs	r0, r0, #16
    524c:	3910      	subs	r1, #16
    524e:	0a1b      	lsrs	r3, r3, #8
    5250:	4298      	cmp	r0, r3
    5252:	d301      	bcc.n	5258 <__clzsi2+0x18>
    5254:	0a00      	lsrs	r0, r0, #8
    5256:	3908      	subs	r1, #8
    5258:	091b      	lsrs	r3, r3, #4
    525a:	4298      	cmp	r0, r3
    525c:	d301      	bcc.n	5262 <__clzsi2+0x22>
    525e:	0900      	lsrs	r0, r0, #4
    5260:	3904      	subs	r1, #4
    5262:	a202      	add	r2, pc, #8	; (adr r2, 526c <__clzsi2+0x2c>)
    5264:	5c10      	ldrb	r0, [r2, r0]
    5266:	1840      	adds	r0, r0, r1
    5268:	4770      	bx	lr
    526a:	46c0      	nop			; (mov r8, r8)
    526c:	02020304 	.word	0x02020304
    5270:	01010101 	.word	0x01010101
	...

0000527c <memset>:
    527c:	b5f0      	push	{r4, r5, r6, r7, lr}
    527e:	0005      	movs	r5, r0
    5280:	0783      	lsls	r3, r0, #30
    5282:	d049      	beq.n	5318 <memset+0x9c>
    5284:	1e54      	subs	r4, r2, #1
    5286:	2a00      	cmp	r2, #0
    5288:	d045      	beq.n	5316 <memset+0x9a>
    528a:	0003      	movs	r3, r0
    528c:	2603      	movs	r6, #3
    528e:	b2ca      	uxtb	r2, r1
    5290:	e002      	b.n	5298 <memset+0x1c>
    5292:	3501      	adds	r5, #1
    5294:	3c01      	subs	r4, #1
    5296:	d33e      	bcc.n	5316 <memset+0x9a>
    5298:	3301      	adds	r3, #1
    529a:	702a      	strb	r2, [r5, #0]
    529c:	4233      	tst	r3, r6
    529e:	d1f8      	bne.n	5292 <memset+0x16>
    52a0:	2c03      	cmp	r4, #3
    52a2:	d930      	bls.n	5306 <memset+0x8a>
    52a4:	22ff      	movs	r2, #255	; 0xff
    52a6:	400a      	ands	r2, r1
    52a8:	0215      	lsls	r5, r2, #8
    52aa:	18ad      	adds	r5, r5, r2
    52ac:	042a      	lsls	r2, r5, #16
    52ae:	18ad      	adds	r5, r5, r2
    52b0:	2c0f      	cmp	r4, #15
    52b2:	d934      	bls.n	531e <memset+0xa2>
    52b4:	0027      	movs	r7, r4
    52b6:	3f10      	subs	r7, #16
    52b8:	093f      	lsrs	r7, r7, #4
    52ba:	013e      	lsls	r6, r7, #4
    52bc:	46b4      	mov	ip, r6
    52be:	001e      	movs	r6, r3
    52c0:	001a      	movs	r2, r3
    52c2:	3610      	adds	r6, #16
    52c4:	4466      	add	r6, ip
    52c6:	6015      	str	r5, [r2, #0]
    52c8:	6055      	str	r5, [r2, #4]
    52ca:	6095      	str	r5, [r2, #8]
    52cc:	60d5      	str	r5, [r2, #12]
    52ce:	3210      	adds	r2, #16
    52d0:	4296      	cmp	r6, r2
    52d2:	d1f8      	bne.n	52c6 <memset+0x4a>
    52d4:	3701      	adds	r7, #1
    52d6:	013f      	lsls	r7, r7, #4
    52d8:	19db      	adds	r3, r3, r7
    52da:	270f      	movs	r7, #15
    52dc:	220c      	movs	r2, #12
    52de:	4027      	ands	r7, r4
    52e0:	4022      	ands	r2, r4
    52e2:	003c      	movs	r4, r7
    52e4:	2a00      	cmp	r2, #0
    52e6:	d00e      	beq.n	5306 <memset+0x8a>
    52e8:	1f3e      	subs	r6, r7, #4
    52ea:	08b6      	lsrs	r6, r6, #2
    52ec:	00b4      	lsls	r4, r6, #2
    52ee:	46a4      	mov	ip, r4
    52f0:	001a      	movs	r2, r3
    52f2:	1d1c      	adds	r4, r3, #4
    52f4:	4464      	add	r4, ip
    52f6:	c220      	stmia	r2!, {r5}
    52f8:	42a2      	cmp	r2, r4
    52fa:	d1fc      	bne.n	52f6 <memset+0x7a>
    52fc:	2403      	movs	r4, #3
    52fe:	3601      	adds	r6, #1
    5300:	00b6      	lsls	r6, r6, #2
    5302:	199b      	adds	r3, r3, r6
    5304:	403c      	ands	r4, r7
    5306:	2c00      	cmp	r4, #0
    5308:	d005      	beq.n	5316 <memset+0x9a>
    530a:	b2c9      	uxtb	r1, r1
    530c:	191c      	adds	r4, r3, r4
    530e:	7019      	strb	r1, [r3, #0]
    5310:	3301      	adds	r3, #1
    5312:	429c      	cmp	r4, r3
    5314:	d1fb      	bne.n	530e <memset+0x92>
    5316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5318:	0003      	movs	r3, r0
    531a:	0014      	movs	r4, r2
    531c:	e7c0      	b.n	52a0 <memset+0x24>
    531e:	0027      	movs	r7, r4
    5320:	e7e2      	b.n	52e8 <memset+0x6c>
    5322:	46c0      	nop			; (mov r8, r8)

00005324 <__libc_init_array>:
    5324:	b570      	push	{r4, r5, r6, lr}
    5326:	4b0d      	ldr	r3, [pc, #52]	; (535c <__libc_init_array+0x38>)
    5328:	4d0d      	ldr	r5, [pc, #52]	; (5360 <__libc_init_array+0x3c>)
    532a:	1b5e      	subs	r6, r3, r5
    532c:	10b6      	asrs	r6, r6, #2
    532e:	42ab      	cmp	r3, r5
    5330:	d005      	beq.n	533e <__libc_init_array+0x1a>
    5332:	2400      	movs	r4, #0
    5334:	cd08      	ldmia	r5!, {r3}
    5336:	3401      	adds	r4, #1
    5338:	4798      	blx	r3
    533a:	42a6      	cmp	r6, r4
    533c:	d8fa      	bhi.n	5334 <__libc_init_array+0x10>
    533e:	f000 fb15 	bl	596c <_init>
    5342:	4b08      	ldr	r3, [pc, #32]	; (5364 <__libc_init_array+0x40>)
    5344:	4d08      	ldr	r5, [pc, #32]	; (5368 <__libc_init_array+0x44>)
    5346:	1b5e      	subs	r6, r3, r5
    5348:	10b6      	asrs	r6, r6, #2
    534a:	42ab      	cmp	r3, r5
    534c:	d005      	beq.n	535a <__libc_init_array+0x36>
    534e:	2400      	movs	r4, #0
    5350:	cd08      	ldmia	r5!, {r3}
    5352:	3401      	adds	r4, #1
    5354:	4798      	blx	r3
    5356:	42a6      	cmp	r6, r4
    5358:	d8fa      	bhi.n	5350 <__libc_init_array+0x2c>
    535a:	bd70      	pop	{r4, r5, r6, pc}
    535c:	00005978 	.word	0x00005978
    5360:	00005978 	.word	0x00005978
    5364:	00005980 	.word	0x00005980
    5368:	00005978 	.word	0x00005978

0000536c <__retarget_lock_acquire_recursive>:
    536c:	4770      	bx	lr
    536e:	46c0      	nop			; (mov r8, r8)

00005370 <__retarget_lock_release_recursive>:
    5370:	4770      	bx	lr
    5372:	46c0      	nop			; (mov r8, r8)

00005374 <memcpy>:
    5374:	b5f0      	push	{r4, r5, r6, r7, lr}
    5376:	0005      	movs	r5, r0
    5378:	2a0f      	cmp	r2, #15
    537a:	d933      	bls.n	53e4 <memcpy+0x70>
    537c:	2403      	movs	r4, #3
    537e:	0003      	movs	r3, r0
    5380:	0026      	movs	r6, r4
    5382:	430b      	orrs	r3, r1
    5384:	401e      	ands	r6, r3
    5386:	421c      	tst	r4, r3
    5388:	d137      	bne.n	53fa <memcpy+0x86>
    538a:	0015      	movs	r5, r2
    538c:	3d10      	subs	r5, #16
    538e:	092d      	lsrs	r5, r5, #4
    5390:	0003      	movs	r3, r0
    5392:	000c      	movs	r4, r1
    5394:	46ac      	mov	ip, r5
    5396:	012f      	lsls	r7, r5, #4
    5398:	183f      	adds	r7, r7, r0
    539a:	6865      	ldr	r5, [r4, #4]
    539c:	605d      	str	r5, [r3, #4]
    539e:	68a5      	ldr	r5, [r4, #8]
    53a0:	609d      	str	r5, [r3, #8]
    53a2:	68e5      	ldr	r5, [r4, #12]
    53a4:	60dd      	str	r5, [r3, #12]
    53a6:	6825      	ldr	r5, [r4, #0]
    53a8:	3410      	adds	r4, #16
    53aa:	601d      	str	r5, [r3, #0]
    53ac:	001d      	movs	r5, r3
    53ae:	3310      	adds	r3, #16
    53b0:	42bd      	cmp	r5, r7
    53b2:	d1f2      	bne.n	539a <memcpy+0x26>
    53b4:	4665      	mov	r5, ip
    53b6:	230f      	movs	r3, #15
    53b8:	240c      	movs	r4, #12
    53ba:	3501      	adds	r5, #1
    53bc:	012d      	lsls	r5, r5, #4
    53be:	1949      	adds	r1, r1, r5
    53c0:	4013      	ands	r3, r2
    53c2:	1945      	adds	r5, r0, r5
    53c4:	4214      	tst	r4, r2
    53c6:	d01a      	beq.n	53fe <memcpy+0x8a>
    53c8:	598c      	ldr	r4, [r1, r6]
    53ca:	51ac      	str	r4, [r5, r6]
    53cc:	3604      	adds	r6, #4
    53ce:	1b9c      	subs	r4, r3, r6
    53d0:	2c03      	cmp	r4, #3
    53d2:	d8f9      	bhi.n	53c8 <memcpy+0x54>
    53d4:	3b04      	subs	r3, #4
    53d6:	089b      	lsrs	r3, r3, #2
    53d8:	3301      	adds	r3, #1
    53da:	009b      	lsls	r3, r3, #2
    53dc:	18ed      	adds	r5, r5, r3
    53de:	18c9      	adds	r1, r1, r3
    53e0:	2303      	movs	r3, #3
    53e2:	401a      	ands	r2, r3
    53e4:	1e56      	subs	r6, r2, #1
    53e6:	2a00      	cmp	r2, #0
    53e8:	d006      	beq.n	53f8 <memcpy+0x84>
    53ea:	2300      	movs	r3, #0
    53ec:	5ccc      	ldrb	r4, [r1, r3]
    53ee:	001a      	movs	r2, r3
    53f0:	54ec      	strb	r4, [r5, r3]
    53f2:	3301      	adds	r3, #1
    53f4:	4296      	cmp	r6, r2
    53f6:	d1f9      	bne.n	53ec <memcpy+0x78>
    53f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53fa:	1e56      	subs	r6, r2, #1
    53fc:	e7f5      	b.n	53ea <memcpy+0x76>
    53fe:	001a      	movs	r2, r3
    5400:	e7f0      	b.n	53e4 <memcpy+0x70>
    5402:	46c0      	nop			; (mov r8, r8)

00005404 <strlen>:
    5404:	b510      	push	{r4, lr}
    5406:	0783      	lsls	r3, r0, #30
    5408:	d00a      	beq.n	5420 <strlen+0x1c>
    540a:	0003      	movs	r3, r0
    540c:	2103      	movs	r1, #3
    540e:	e002      	b.n	5416 <strlen+0x12>
    5410:	3301      	adds	r3, #1
    5412:	420b      	tst	r3, r1
    5414:	d005      	beq.n	5422 <strlen+0x1e>
    5416:	781a      	ldrb	r2, [r3, #0]
    5418:	2a00      	cmp	r2, #0
    541a:	d1f9      	bne.n	5410 <strlen+0xc>
    541c:	1a18      	subs	r0, r3, r0
    541e:	bd10      	pop	{r4, pc}
    5420:	0003      	movs	r3, r0
    5422:	6819      	ldr	r1, [r3, #0]
    5424:	4a0c      	ldr	r2, [pc, #48]	; (5458 <strlen+0x54>)
    5426:	4c0d      	ldr	r4, [pc, #52]	; (545c <strlen+0x58>)
    5428:	188a      	adds	r2, r1, r2
    542a:	438a      	bics	r2, r1
    542c:	4222      	tst	r2, r4
    542e:	d10f      	bne.n	5450 <strlen+0x4c>
    5430:	6859      	ldr	r1, [r3, #4]
    5432:	4a09      	ldr	r2, [pc, #36]	; (5458 <strlen+0x54>)
    5434:	3304      	adds	r3, #4
    5436:	188a      	adds	r2, r1, r2
    5438:	438a      	bics	r2, r1
    543a:	4222      	tst	r2, r4
    543c:	d108      	bne.n	5450 <strlen+0x4c>
    543e:	6859      	ldr	r1, [r3, #4]
    5440:	4a05      	ldr	r2, [pc, #20]	; (5458 <strlen+0x54>)
    5442:	3304      	adds	r3, #4
    5444:	188a      	adds	r2, r1, r2
    5446:	438a      	bics	r2, r1
    5448:	4222      	tst	r2, r4
    544a:	d0f1      	beq.n	5430 <strlen+0x2c>
    544c:	e000      	b.n	5450 <strlen+0x4c>
    544e:	3301      	adds	r3, #1
    5450:	781a      	ldrb	r2, [r3, #0]
    5452:	2a00      	cmp	r2, #0
    5454:	d1fb      	bne.n	544e <strlen+0x4a>
    5456:	e7e1      	b.n	541c <strlen+0x18>
    5458:	fefefeff 	.word	0xfefefeff
    545c:	80808080 	.word	0x80808080

00005460 <register_fini>:
    5460:	4b03      	ldr	r3, [pc, #12]	; (5470 <register_fini+0x10>)
    5462:	b510      	push	{r4, lr}
    5464:	2b00      	cmp	r3, #0
    5466:	d002      	beq.n	546e <register_fini+0xe>
    5468:	4802      	ldr	r0, [pc, #8]	; (5474 <register_fini+0x14>)
    546a:	f000 f805 	bl	5478 <atexit>
    546e:	bd10      	pop	{r4, pc}
    5470:	00000000 	.word	0x00000000
    5474:	00005489 	.word	0x00005489

00005478 <atexit>:
    5478:	b510      	push	{r4, lr}
    547a:	0001      	movs	r1, r0
    547c:	2300      	movs	r3, #0
    547e:	2200      	movs	r2, #0
    5480:	2000      	movs	r0, #0
    5482:	f000 f815 	bl	54b0 <__register_exitproc>
    5486:	bd10      	pop	{r4, pc}

00005488 <__libc_fini_array>:
    5488:	b570      	push	{r4, r5, r6, lr}
    548a:	4c07      	ldr	r4, [pc, #28]	; (54a8 <__libc_fini_array+0x20>)
    548c:	4d07      	ldr	r5, [pc, #28]	; (54ac <__libc_fini_array+0x24>)
    548e:	1b64      	subs	r4, r4, r5
    5490:	10a4      	asrs	r4, r4, #2
    5492:	d005      	beq.n	54a0 <__libc_fini_array+0x18>
    5494:	3c01      	subs	r4, #1
    5496:	00a3      	lsls	r3, r4, #2
    5498:	58eb      	ldr	r3, [r5, r3]
    549a:	4798      	blx	r3
    549c:	2c00      	cmp	r4, #0
    549e:	d1f9      	bne.n	5494 <__libc_fini_array+0xc>
    54a0:	f000 fa6e 	bl	5980 <_fini>
    54a4:	bd70      	pop	{r4, r5, r6, pc}
    54a6:	46c0      	nop			; (mov r8, r8)
    54a8:	00005990 	.word	0x00005990
    54ac:	0000598c 	.word	0x0000598c

000054b0 <__register_exitproc>:
    54b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54b2:	46d6      	mov	lr, sl
    54b4:	464f      	mov	r7, r9
    54b6:	4646      	mov	r6, r8
    54b8:	4698      	mov	r8, r3
    54ba:	4b22      	ldr	r3, [pc, #136]	; (5544 <__register_exitproc+0x94>)
    54bc:	b5c0      	push	{r6, r7, lr}
    54be:	0006      	movs	r6, r0
    54c0:	6818      	ldr	r0, [r3, #0]
    54c2:	4699      	mov	r9, r3
    54c4:	000f      	movs	r7, r1
    54c6:	4692      	mov	sl, r2
    54c8:	f7ff ff50 	bl	536c <__retarget_lock_acquire_recursive>
    54cc:	4b1e      	ldr	r3, [pc, #120]	; (5548 <__register_exitproc+0x98>)
    54ce:	681d      	ldr	r5, [r3, #0]
    54d0:	2d00      	cmp	r5, #0
    54d2:	d02d      	beq.n	5530 <__register_exitproc+0x80>
    54d4:	686c      	ldr	r4, [r5, #4]
    54d6:	2c1f      	cmp	r4, #31
    54d8:	dc2d      	bgt.n	5536 <__register_exitproc+0x86>
    54da:	2e00      	cmp	r6, #0
    54dc:	d10e      	bne.n	54fc <__register_exitproc+0x4c>
    54de:	1c63      	adds	r3, r4, #1
    54e0:	606b      	str	r3, [r5, #4]
    54e2:	464b      	mov	r3, r9
    54e4:	3402      	adds	r4, #2
    54e6:	00a4      	lsls	r4, r4, #2
    54e8:	6818      	ldr	r0, [r3, #0]
    54ea:	5167      	str	r7, [r4, r5]
    54ec:	f7ff ff40 	bl	5370 <__retarget_lock_release_recursive>
    54f0:	2000      	movs	r0, #0
    54f2:	bce0      	pop	{r5, r6, r7}
    54f4:	46ba      	mov	sl, r7
    54f6:	46b1      	mov	r9, r6
    54f8:	46a8      	mov	r8, r5
    54fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54fc:	2288      	movs	r2, #136	; 0x88
    54fe:	4651      	mov	r1, sl
    5500:	0028      	movs	r0, r5
    5502:	00a3      	lsls	r3, r4, #2
    5504:	18eb      	adds	r3, r5, r3
    5506:	5099      	str	r1, [r3, r2]
    5508:	3a87      	subs	r2, #135	; 0x87
    550a:	40a2      	lsls	r2, r4
    550c:	3089      	adds	r0, #137	; 0x89
    550e:	30ff      	adds	r0, #255	; 0xff
    5510:	6801      	ldr	r1, [r0, #0]
    5512:	4311      	orrs	r1, r2
    5514:	6001      	str	r1, [r0, #0]
    5516:	2184      	movs	r1, #132	; 0x84
    5518:	4640      	mov	r0, r8
    551a:	0049      	lsls	r1, r1, #1
    551c:	5058      	str	r0, [r3, r1]
    551e:	2e02      	cmp	r6, #2
    5520:	d1dd      	bne.n	54de <__register_exitproc+0x2e>
    5522:	0029      	movs	r1, r5
    5524:	318d      	adds	r1, #141	; 0x8d
    5526:	31ff      	adds	r1, #255	; 0xff
    5528:	680b      	ldr	r3, [r1, #0]
    552a:	4313      	orrs	r3, r2
    552c:	600b      	str	r3, [r1, #0]
    552e:	e7d6      	b.n	54de <__register_exitproc+0x2e>
    5530:	4d06      	ldr	r5, [pc, #24]	; (554c <__register_exitproc+0x9c>)
    5532:	601d      	str	r5, [r3, #0]
    5534:	e7ce      	b.n	54d4 <__register_exitproc+0x24>
    5536:	464b      	mov	r3, r9
    5538:	6818      	ldr	r0, [r3, #0]
    553a:	f7ff ff19 	bl	5370 <__retarget_lock_release_recursive>
    553e:	2001      	movs	r0, #1
    5540:	4240      	negs	r0, r0
    5542:	e7d6      	b.n	54f2 <__register_exitproc+0x42>
    5544:	200000a0 	.word	0x200000a0
    5548:	200006d8 	.word	0x200006d8
    554c:	200006dc 	.word	0x200006dc
    5550:	41564e49 	.word	0x41564e49
    5554:	0044494c 	.word	0x0044494c
    5558:	20776152 	.word	0x20776152
    555c:	69442058 	.word	0x69442058
    5560:	74636572 	.word	0x74636572
    5564:	206e6f69 	.word	0x206e6f69
    5568:	65636341 	.word	0x65636341
    556c:	6172656c 	.word	0x6172656c
    5570:	6e6f6974 	.word	0x6e6f6974
    5574:	00000000 	.word	0x00000000
    5578:	20776152 	.word	0x20776152
    557c:	69442059 	.word	0x69442059
    5580:	74636572 	.word	0x74636572
    5584:	206e6f69 	.word	0x206e6f69
    5588:	65636341 	.word	0x65636341
    558c:	6172656c 	.word	0x6172656c
    5590:	6e6f6974 	.word	0x6e6f6974
    5594:	00000000 	.word	0x00000000
    5598:	20776152 	.word	0x20776152
    559c:	6944205a 	.word	0x6944205a
    55a0:	74636572 	.word	0x74636572
    55a4:	206e6f69 	.word	0x206e6f69
    55a8:	65636341 	.word	0x65636341
    55ac:	6172656c 	.word	0x6172656c
    55b0:	6e6f6974 	.word	0x6e6f6974
    55b4:	00000000 	.word	0x00000000
    55b8:	20776152 	.word	0x20776152
    55bc:	78412058 	.word	0x78412058
    55c0:	41207369 	.word	0x41207369
    55c4:	6c75676e 	.word	0x6c75676e
    55c8:	56207261 	.word	0x56207261
    55cc:	636f6c65 	.word	0x636f6c65
    55d0:	00797469 	.word	0x00797469
    55d4:	20776152 	.word	0x20776152
    55d8:	78412059 	.word	0x78412059
    55dc:	41207369 	.word	0x41207369
    55e0:	6c75676e 	.word	0x6c75676e
    55e4:	56207261 	.word	0x56207261
    55e8:	636f6c65 	.word	0x636f6c65
    55ec:	00797469 	.word	0x00797469
    55f0:	20776152 	.word	0x20776152
    55f4:	7841205a 	.word	0x7841205a
    55f8:	41207369 	.word	0x41207369
    55fc:	6c75676e 	.word	0x6c75676e
    5600:	56207261 	.word	0x56207261
    5604:	636f6c65 	.word	0x636f6c65
    5608:	00797469 	.word	0x00797469
    560c:	696c6143 	.word	0x696c6143
    5610:	74617262 	.word	0x74617262
    5614:	58206465 	.word	0x58206465
    5618:	72694420 	.word	0x72694420
    561c:	69746365 	.word	0x69746365
    5620:	41206e6f 	.word	0x41206e6f
    5624:	6c656363 	.word	0x6c656363
    5628:	74617265 	.word	0x74617265
    562c:	006e6f69 	.word	0x006e6f69
    5630:	696c6143 	.word	0x696c6143
    5634:	74617262 	.word	0x74617262
    5638:	59206465 	.word	0x59206465
    563c:	72694420 	.word	0x72694420
    5640:	69746365 	.word	0x69746365
    5644:	41206e6f 	.word	0x41206e6f
    5648:	6c656363 	.word	0x6c656363
    564c:	74617265 	.word	0x74617265
    5650:	006e6f69 	.word	0x006e6f69
    5654:	696c6143 	.word	0x696c6143
    5658:	74617262 	.word	0x74617262
    565c:	5a206465 	.word	0x5a206465
    5660:	72694420 	.word	0x72694420
    5664:	69746365 	.word	0x69746365
    5668:	41206e6f 	.word	0x41206e6f
    566c:	6c656363 	.word	0x6c656363
    5670:	74617265 	.word	0x74617265
    5674:	006e6f69 	.word	0x006e6f69
    5678:	696c6143 	.word	0x696c6143
    567c:	74617262 	.word	0x74617262
    5680:	58206465 	.word	0x58206465
    5684:	69784120 	.word	0x69784120
    5688:	6e412073 	.word	0x6e412073
    568c:	616c7567 	.word	0x616c7567
    5690:	65562072 	.word	0x65562072
    5694:	69636f6c 	.word	0x69636f6c
    5698:	00007974 	.word	0x00007974
    569c:	696c6143 	.word	0x696c6143
    56a0:	74617262 	.word	0x74617262
    56a4:	59206465 	.word	0x59206465
    56a8:	69784120 	.word	0x69784120
    56ac:	6e412073 	.word	0x6e412073
    56b0:	616c7567 	.word	0x616c7567
    56b4:	65562072 	.word	0x65562072
    56b8:	69636f6c 	.word	0x69636f6c
    56bc:	00007974 	.word	0x00007974
    56c0:	696c6143 	.word	0x696c6143
    56c4:	74617262 	.word	0x74617262
    56c8:	5a206465 	.word	0x5a206465
    56cc:	69784120 	.word	0x69784120
    56d0:	6e412073 	.word	0x6e412073
    56d4:	616c7567 	.word	0x616c7567
    56d8:	65562072 	.word	0x65562072
    56dc:	69636f6c 	.word	0x69636f6c
    56e0:	00007974 	.word	0x00007974
    56e4:	52504545 	.word	0x52504545
    56e8:	4c204d4f 	.word	0x4c204d4f
    56ec:	756f7961 	.word	0x756f7961
    56f0:	61482074 	.word	0x61482074
    56f4:	00006873 	.word	0x00006873
    56f8:	65776f50 	.word	0x65776f50
    56fc:	79432072 	.word	0x79432072
    5700:	73656c63 	.word	0x73656c63
    5704:	00000000 	.word	0x00000000
    5708:	61736944 	.word	0x61736944
    570c:	20656c62 	.word	0x20656c62
    5710:	7a7a7542 	.word	0x7a7a7542
    5714:	00007265 	.word	0x00007265
    5718:	61736944 	.word	0x61736944
    571c:	20656c62 	.word	0x20656c62
    5720:	0044454c 	.word	0x0044454c
    5724:	61656c43 	.word	0x61656c43
    5728:	6853206e 	.word	0x6853206e
    572c:	6f647475 	.word	0x6f647475
    5730:	00006e77 	.word	0x00006e77
    5734:	40000000 	.word	0x40000000
    5738:	00000001 	.word	0x00000001
    573c:	00000c02 	.word	0x00000c02
    5740:	00000c0e 	.word	0x00000c0e
    5744:	00000c1c 	.word	0x00000c1c
    5748:	00000c2a 	.word	0x00000c2a
    574c:	00000c38 	.word	0x00000c38
    5750:	00000c86 	.word	0x00000c86
    5754:	00000c8e 	.word	0x00000c8e
    5758:	00000c98 	.word	0x00000c98
    575c:	00000ca2 	.word	0x00000ca2
    5760:	00000cac 	.word	0x00000cac
    5764:	00000cea 	.word	0x00000cea
    5768:	00000cf6 	.word	0x00000cf6
    576c:	00000d04 	.word	0x00000d04
    5770:	00000d12 	.word	0x00000d12
    5774:	00000d20 	.word	0x00000d20
    5778:	00000d6e 	.word	0x00000d6e
    577c:	00000d76 	.word	0x00000d76
    5780:	00000d80 	.word	0x00000d80
    5784:	00000d8a 	.word	0x00000d8a
    5788:	00000d94 	.word	0x00000d94
    578c:	00000dce 	.word	0x00000dce
    5790:	00000dd6 	.word	0x00000dd6
    5794:	00000de6 	.word	0x00000de6
    5798:	00000df6 	.word	0x00000df6
    579c:	00000e06 	.word	0x00000e06
    57a0:	00000e76 	.word	0x00000e76
    57a4:	00000e4e 	.word	0x00000e4e
    57a8:	00000e58 	.word	0x00000e58
    57ac:	00000e62 	.word	0x00000e62
    57b0:	00000e6c 	.word	0x00000e6c

000057b4 <uart1_descriptor>:
    57b4:	02010302 00000002                       ........

000057bc <uart2_descriptor>:
    57bc:	04030504 00000002                       ........

000057c4 <uart3_descriptor>:
    57c4:	0a090706 00000002                       ........

000057cc <uart4_descriptor>:
    57cc:	0c0b0908 00000002 80000000 00000001     ................

000057dc <dma_spi_desc>:
    57dc:	08070100                                 .....

000057e1 <zero>:
    57e1:	fc000000 2000001d 0000001e 0400001e     ....... ........
    57f1:	0800001e 0c00001e 1000001e 1600001e     ................
    5801:	5c00001e 70000024 36000024 70000025     ...\$..p$..6%..p
    5811:	36000024 7c000025 88000024 36000024     $..6%..|$...$..6
    5821:	d8000025 ec000024 36000024 16000025     %...$...$..6%...
    5831:	30000025 34333231 38373635 43424139     %..0123456789ABC
    5841:	48474644 4d4c4b4a 5251504e 57565453     DFGHJKLMNPQRSTVW
    5851:	005a5958 46000000 656c6e69 6c422079     XYZ....Finley Bl
    5861:	656e6961 47000000 0032434e               aine...GNC2....

00005870 <language_string>:
    5870:	04090304                                ....

00005874 <device_descriptor>:
    5874:	02000112 400102ef 000e1209 02010200     .......@........
    5884:	                                         ..

00005886 <usb_num_endpoints>:
    5886:	2e2e0003 2d2d2d2e 002e2e2e 31160000     .....---.......1
    5896:	31a80000 31b60000 31c40000 31d20000     ...1...1...1...1
    58a6:	31e00000 311c0000 00000000 00000000     ...1...1........
    58b6:	00000000 33bd0000 00060000               .......3......

000058c4 <time_ticks_us_mult>:
    58c4:	00000030                                0...

000058c8 <time_ticks_ms_mult>:
    58c8:	0000bb80                                ....

000058cc <time_ticks_s_mult>:
    58cc:	02dc6c00                                .l..

000058d0 <CRC8_LUT_L>:
    58d0:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

000058e0 <CRC8_LUT_H>:
    58e0:	90e07000 5727b7c7 1969f989 deae3e4e     .p....'W..i.N>..
    58f0:	00004946 00004876 0000488e 000048ac     FI..vH...H...H..
    5900:	0000488e 000048f0 0000488e 000048ac     .H...H...H...H..
    5910:	00004876 00004876 000048f0 000048ac     vH..vH...H...H..
    5920:	00004896 00004896 00004896 000048fa     .H...H...H...H..
    5930:	00004876 00004876 0000488e 00004984     vH..vH...H...I..
    5940:	0000488e 000048f0 0000488e 00004984     .H...H...H...I..
    5950:	00004876 00004876 000048f0 00004984     vH..vH...H...I..
    5960:	00004896 00004896 00004896              .H...H...H..

0000596c <_init>:
    596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    596e:	46c0      	nop			; (mov r8, r8)
    5970:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5972:	bc08      	pop	{r3}
    5974:	469e      	mov	lr, r3
    5976:	4770      	bx	lr

00005978 <__init_array_start>:
    5978:	00005461 	.word	0x00005461

0000597c <__frame_dummy_init_array_entry>:
    597c:	0000012d                                -...

00005980 <_fini>:
    5980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5986:	bc08      	pop	{r3}
    5988:	469e      	mov	lr, r3
    598a:	4770      	bx	lr

0000598c <__do_global_dtors_aux_fini_array_entry>:
    598c:	0101 0000                                   ....
