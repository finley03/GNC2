
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005800  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a0  20000000  00005800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007bc  200000a0  000058a0  000200a0  2**4
                  ALLOC
  3 .stack        00002004  2000085c  0000605c  000200a0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001becb  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00006489  00000000  00000000  0003bfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 000071ea  00000000  00000000  00042468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000df0  00000000  00000000  00049658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 00001013  00000000  00000000  0004a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00009fb6  00000000  00000000  0004b45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0001bf3c  00000000  00000000  00055411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b5a07  00000000  00000000  0007134d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001de8  00000000  00000000  00126d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  00128b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
    eeprom_read_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}

bool save_global(Global_Variable_IDs id) {
       0:	60 28 00 20 55 01 00 00 51 01 00 00 51 01 00 00     `(. U...Q...Q...
	...
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
    if (!get_address_from_id(type, id, &address, &size)) return false;
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...
    EEPROM_Request request;
    eeprom_write_request(&request, eeprom_address, address, size);
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
    eeprom_wait_until_done(&request);
    return true;
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      5c:	5d 3f 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ]?..Q...Q...Q...
	// send adc read command
	spi_command(desc->sercom, BARO_ADC_READ);
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
	uint8_t data1 = spi_command(desc->sercom, 0);
	uint8_t data2 = spi_command(desc->sercom, 0);
      6c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      8c:	ad 2e 00 00 51 01 00 00 51 01 00 00 51 01 00 00     ....Q...Q...Q...
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	00005800 	.word	0x00005800
      d0:	00005800 	.word	0x00005800
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	00005800 	.word	0x00005800
      f8:	00005800 	.word	0x00005800
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	200000a0 	.word	0x200000a0
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	00005800 	.word	0x00005800

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	200000a4 	.word	0x200000a4
     14c:	00005800 	.word	0x00005800

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	00005800 	.word	0x00005800
     1a4:	20000000 	.word	0x20000000
     1a8:	200000a0 	.word	0x200000a0
     1ac:	200000a0 	.word	0x200000a0
     1b0:	2000085c 	.word	0x2000085c
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	000051a9 	.word	0x000051a9
     1c4:	00000000 	.word	0x00000000
     1c8:	00002e39 	.word	0x00002e39

000001cc <getGlobalHash>:
uint8_t rxframe[GNCLINK_FRAME_TOTAL_LENGTH];
uint8_t txframe[GNCLINK_FRAME_TOTAL_LENGTH];

extern void SOS();

bool getGlobalHash() {
     1cc:	b510      	push	{r4, lr}
    uint32_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     1ce:	4c06      	ldr	r4, [pc, #24]	; (1e8 <getGlobalHash+0x1c>)
     1d0:	0020      	movs	r0, r4
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <getGlobalHash+0x20>)
     1d4:	4798      	blx	r3
    *payload = __GLOBAL_HASH;
     1d6:	4b06      	ldr	r3, [pc, #24]	; (1f0 <getGlobalHash+0x24>)
     1d8:	6003      	str	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetGlobalHash, GNClink_PacketFlags_Response, 4)) return false;
     1da:	2304      	movs	r3, #4
     1dc:	2202      	movs	r2, #2
     1de:	2101      	movs	r1, #1
     1e0:	0020      	movs	r0, r4
     1e2:	4c04      	ldr	r4, [pc, #16]	; (1f4 <getGlobalHash+0x28>)
     1e4:	47a0      	blx	r4
    return true;
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	200000bc 	.word	0x200000bc
     1ec:	00004065 	.word	0x00004065
     1f0:	9fc0b1d3 	.word	0x9fc0b1d3
     1f4:	00004069 	.word	0x00004069

000001f8 <getValueList>:

bool getValueList() {
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46c6      	mov	lr, r8
     1fc:	b500      	push	{lr}
     1fe:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     200:	4d1a      	ldr	r5, [pc, #104]	; (26c <getValueList+0x74>)
     202:	0028      	movs	r0, r5
     204:	3040      	adds	r0, #64	; 0x40
     206:	4c1a      	ldr	r4, [pc, #104]	; (270 <getValueList+0x78>)
     208:	47a0      	blx	r4
     20a:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     20c:	0028      	movs	r0, r5
     20e:	47a0      	blx	r4
     210:	4680      	mov	r8, r0
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     212:	783e      	ldrb	r6, [r7, #0]
     214:	b2f6      	uxtb	r6, r6
    if (IDCount > (GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1) / 2) {
     216:	2e1d      	cmp	r6, #29
     218:	d825      	bhi.n	266 <getValueList+0x6e>
        // too many IDs, do something...
        return false;
    }

    int payloadIndex = 0;
    for (int index = 0; index < IDCount; ++index) {
     21a:	2400      	movs	r4, #0
    int payloadIndex = 0;
     21c:	2500      	movs	r5, #0
     21e:	e007      	b.n	230 <getValueList+0x38>
            // no more space, do something...
            return false;
        }

        // copy value to payload
        memcpy(&txpayload[payloadIndex], address, size);
     220:	4643      	mov	r3, r8
     222:	1958      	adds	r0, r3, r5
     224:	9900      	ldr	r1, [sp, #0]
     226:	4b13      	ldr	r3, [pc, #76]	; (274 <getValueList+0x7c>)
     228:	4798      	blx	r3
        payloadIndex += size;
     22a:	9b01      	ldr	r3, [sp, #4]
     22c:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     22e:	3401      	adds	r4, #1
     230:	42b4      	cmp	r4, r6
     232:	da11      	bge.n	258 <getValueList+0x60>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     234:	0063      	lsls	r3, r4, #1
     236:	18fb      	adds	r3, r7, r3
     238:	7858      	ldrb	r0, [r3, #1]
        if (!get_global_address_size(ID, &address, &size)) {
     23a:	aa01      	add	r2, sp, #4
     23c:	4669      	mov	r1, sp
     23e:	4b0e      	ldr	r3, [pc, #56]	; (278 <getValueList+0x80>)
     240:	4798      	blx	r3
     242:	2800      	cmp	r0, #0
     244:	d003      	beq.n	24e <getValueList+0x56>
        if (payloadIndex + size > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     246:	9a01      	ldr	r2, [sp, #4]
     248:	1953      	adds	r3, r2, r5
     24a:	2b3b      	cmp	r3, #59	; 0x3b
     24c:	d9e8      	bls.n	220 <getValueList+0x28>
            return false;
     24e:	2000      	movs	r0, #0
    }

    // construct packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
    return true;
}
     250:	b002      	add	sp, #8
     252:	bc80      	pop	{r7}
     254:	46b8      	mov	r8, r7
     256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
     258:	4804      	ldr	r0, [pc, #16]	; (26c <getValueList+0x74>)
     25a:	002b      	movs	r3, r5
     25c:	2202      	movs	r2, #2
     25e:	2102      	movs	r1, #2
     260:	4c06      	ldr	r4, [pc, #24]	; (27c <getValueList+0x84>)
     262:	47a0      	blx	r4
     264:	e7f4      	b.n	250 <getValueList+0x58>
        return false;
     266:	2000      	movs	r0, #0
     268:	e7f2      	b.n	250 <getValueList+0x58>
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	200000bc 	.word	0x200000bc
     270:	00004065 	.word	0x00004065
     274:	000051f9 	.word	0x000051f9
     278:	0000060d 	.word	0x0000060d
     27c:	00004069 	.word	0x00004069

00000280 <getValueCount>:

bool getValueCount() {
     280:	b510      	push	{r4, lr}
    uint16_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     282:	4c06      	ldr	r4, [pc, #24]	; (29c <getValueCount+0x1c>)
     284:	0020      	movs	r0, r4
     286:	4b06      	ldr	r3, [pc, #24]	; (2a0 <getValueCount+0x20>)
     288:	4798      	blx	r3
    *payload = __GLOBAL_ID_END - __GLOBAL_ID_START;
     28a:	2311      	movs	r3, #17
     28c:	8003      	strh	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueCount, GNClink_PacketFlags_Response, 2)) return false;
     28e:	3b0f      	subs	r3, #15
     290:	2202      	movs	r2, #2
     292:	2106      	movs	r1, #6
     294:	0020      	movs	r0, r4
     296:	4c03      	ldr	r4, [pc, #12]	; (2a4 <getValueCount+0x24>)
     298:	47a0      	blx	r4
    return true;
}
     29a:	bd10      	pop	{r4, pc}
     29c:	200000bc 	.word	0x200000bc
     2a0:	00004065 	.word	0x00004065
     2a4:	00004069 	.word	0x00004069

000002a8 <getValueName>:

bool getValueName() {
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	b082      	sub	sp, #8
    uint16_t* rxpayload = (uint16_t*)GNClink_Get_Packet_Payload_Pointer(rxpacket);
     2ac:	4e14      	ldr	r6, [pc, #80]	; (300 <getValueName+0x58>)
     2ae:	0030      	movs	r0, r6
     2b0:	3040      	adds	r0, #64	; 0x40
     2b2:	4d14      	ldr	r5, [pc, #80]	; (304 <getValueName+0x5c>)
     2b4:	47a8      	blx	r5
     2b6:	0004      	movs	r4, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     2b8:	0030      	movs	r0, r6
     2ba:	47a8      	blx	r5
     2bc:	0005      	movs	r5, r0

    // get variable ID
    uint16_t id = *rxpayload;
     2be:	8824      	ldrh	r4, [r4, #0]

    int length = 0;
     2c0:	2300      	movs	r3, #0
     2c2:	9301      	str	r3, [sp, #4]

    __Global_Variable_Types type;
    if (!get_global_type_from_id(id, &type)) return false;
     2c4:	b2e4      	uxtb	r4, r4
     2c6:	466b      	mov	r3, sp
     2c8:	1cd9      	adds	r1, r3, #3
     2ca:	0020      	movs	r0, r4
     2cc:	4b0e      	ldr	r3, [pc, #56]	; (308 <getValueName+0x60>)
     2ce:	4798      	blx	r3
     2d0:	2800      	cmp	r0, #0
     2d2:	d101      	bne.n	2d8 <getValueName+0x30>

    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;

    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
    return true;
}
     2d4:	b002      	add	sp, #8
     2d6:	bd70      	pop	{r4, r5, r6, pc}
    *txpayload = (uint8_t*)type;
     2d8:	466b      	mov	r3, sp
     2da:	3303      	adds	r3, #3
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	702b      	strb	r3, [r5, #0]
    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;
     2e0:	1c69      	adds	r1, r5, #1
     2e2:	233a      	movs	r3, #58	; 0x3a
     2e4:	aa01      	add	r2, sp, #4
     2e6:	0020      	movs	r0, r4
     2e8:	4c08      	ldr	r4, [pc, #32]	; (30c <getValueName+0x64>)
     2ea:	47a0      	blx	r4
     2ec:	2800      	cmp	r0, #0
     2ee:	d0f1      	beq.n	2d4 <getValueName+0x2c>
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
     2f0:	9b01      	ldr	r3, [sp, #4]
     2f2:	3301      	adds	r3, #1
     2f4:	4802      	ldr	r0, [pc, #8]	; (300 <getValueName+0x58>)
     2f6:	2202      	movs	r2, #2
     2f8:	2107      	movs	r1, #7
     2fa:	4c05      	ldr	r4, [pc, #20]	; (310 <getValueName+0x68>)
     2fc:	47a0      	blx	r4
     2fe:	e7e9      	b.n	2d4 <getValueName+0x2c>
     300:	200000bc 	.word	0x200000bc
     304:	00004065 	.word	0x00004065
     308:	000005d1 	.word	0x000005d1
     30c:	00000645 	.word	0x00000645
     310:	00004069 	.word	0x00004069

00000314 <evaluatePacket>:

bool evaluatePacket() {
     314:	b510      	push	{r4, lr}
    // check packet
    if (!GNClink_Check_Packet(rxpacket)) {
     316:	4815      	ldr	r0, [pc, #84]	; (36c <evaluatePacket+0x58>)
     318:	4b15      	ldr	r3, [pc, #84]	; (370 <evaluatePacket+0x5c>)
     31a:	4798      	blx	r3
     31c:	2800      	cmp	r0, #0
     31e:	d006      	beq.n	32e <evaluatePacket+0x1a>
    // reset_process(&bz);
    // bz_count = (int)(*GNClink_Get_Packet_Payload_Pointer(rxpacket));
    // dispatch_process(&bz);

    // check packet is not response packet
    GNClink_PacketFlags flags = GNClink_Get_Packet_Flags(rxpacket);
     320:	4812      	ldr	r0, [pc, #72]	; (36c <evaluatePacket+0x58>)
     322:	4b14      	ldr	r3, [pc, #80]	; (374 <evaluatePacket+0x60>)
     324:	4798      	blx	r3
    if (flags & GNClink_PacketFlags_Response) return false;
     326:	0780      	lsls	r0, r0, #30
     328:	d504      	bpl.n	334 <evaluatePacket+0x20>
     32a:	2000      	movs	r0, #0
        default:
        return false;
    }

    return false;
}
     32c:	bd10      	pop	{r4, pc}
        SOS();
     32e:	4b12      	ldr	r3, [pc, #72]	; (378 <evaluatePacket+0x64>)
     330:	4798      	blx	r3
     332:	e7f5      	b.n	320 <evaluatePacket+0xc>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     334:	480d      	ldr	r0, [pc, #52]	; (36c <evaluatePacket+0x58>)
     336:	4b11      	ldr	r3, [pc, #68]	; (37c <evaluatePacket+0x68>)
     338:	4798      	blx	r3
     33a:	2806      	cmp	r0, #6
     33c:	d013      	beq.n	366 <evaluatePacket+0x52>
     33e:	d808      	bhi.n	352 <evaluatePacket+0x3e>
     340:	2801      	cmp	r0, #1
     342:	d00d      	beq.n	360 <evaluatePacket+0x4c>
     344:	2802      	cmp	r0, #2
     346:	d102      	bne.n	34e <evaluatePacket+0x3a>
        return getValueList();
     348:	4b0d      	ldr	r3, [pc, #52]	; (380 <evaluatePacket+0x6c>)
     34a:	4798      	blx	r3
     34c:	e7ee      	b.n	32c <evaluatePacket+0x18>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     34e:	2000      	movs	r0, #0
     350:	e7ec      	b.n	32c <evaluatePacket+0x18>
     352:	2807      	cmp	r0, #7
     354:	d102      	bne.n	35c <evaluatePacket+0x48>
        return getValueName();
     356:	4b0b      	ldr	r3, [pc, #44]	; (384 <evaluatePacket+0x70>)
     358:	4798      	blx	r3
     35a:	e7e7      	b.n	32c <evaluatePacket+0x18>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     35c:	2000      	movs	r0, #0
     35e:	e7e5      	b.n	32c <evaluatePacket+0x18>
        return getGlobalHash();
     360:	4b09      	ldr	r3, [pc, #36]	; (388 <evaluatePacket+0x74>)
     362:	4798      	blx	r3
     364:	e7e2      	b.n	32c <evaluatePacket+0x18>
        return getValueCount();
     366:	4b09      	ldr	r3, [pc, #36]	; (38c <evaluatePacket+0x78>)
     368:	4798      	blx	r3
     36a:	e7df      	b.n	32c <evaluatePacket+0x18>
     36c:	200000fc 	.word	0x200000fc
     370:	00004095 	.word	0x00004095
     374:	000040c9 	.word	0x000040c9
     378:	00002e15 	.word	0x00002e15
     37c:	000040c5 	.word	0x000040c5
     380:	000001f9 	.word	0x000001f9
     384:	000002a9 	.word	0x000002a9
     388:	000001cd 	.word	0x000001cd
     38c:	00000281 	.word	0x00000281

00000390 <get_packet>:

// returns false if resend is being requested
bool get_packet() {
     390:	b5f0      	push	{r4, r5, r6, r7, lr}
     392:	b083      	sub	sp, #12
    bool receivedFrames[GNCLINK_MAX_FRAMES_PER_PACKET];
    for (int i = 0; i < GNCLINK_MAX_FRAMES_PER_PACKET; ++i) receivedFrames[i] = false;
     394:	2300      	movs	r3, #0
     396:	e003      	b.n	3a0 <get_packet+0x10>
     398:	aa01      	add	r2, sp, #4
     39a:	2100      	movs	r1, #0
     39c:	54d1      	strb	r1, [r2, r3]
     39e:	3301      	adds	r3, #1
     3a0:	2b03      	cmp	r3, #3
     3a2:	ddf9      	ble.n	398 <get_packet+0x8>
     3a4:	e02a      	b.n	3fc <get_packet+0x6c>
            continue;
        }

        // check if frame is requesting resend
        if (GNClink_Frame_RequestResend(rxframe)) {
            return false;
     3a6:	2500      	movs	r5, #0
            // packet fully received
            else break;
        }
    }
    return true;
}
     3a8:	0028      	movs	r0, r5
     3aa:	b003      	add	sp, #12
     3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     3ae:	3401      	adds	r4, #1
     3b0:	4828      	ldr	r0, [pc, #160]	; (454 <get_packet+0xc4>)
     3b2:	4b29      	ldr	r3, [pc, #164]	; (458 <get_packet+0xc8>)
     3b4:	4798      	blx	r3
     3b6:	42a0      	cmp	r0, r4
     3b8:	dd07      	ble.n	3ca <get_packet+0x3a>
                if (!receivedFrames[i]) payload->resendIndexes[resendCount++] = (uint8_t)i;
     3ba:	ab01      	add	r3, sp, #4
     3bc:	5d1b      	ldrb	r3, [r3, r4]
     3be:	2b00      	cmp	r3, #0
     3c0:	d1f5      	bne.n	3ae <get_packet+0x1e>
     3c2:	19bb      	adds	r3, r7, r6
     3c4:	705c      	strb	r4, [r3, #1]
     3c6:	3601      	adds	r6, #1
     3c8:	e7f1      	b.n	3ae <get_packet+0x1e>
            if (resendCount) {
     3ca:	2e00      	cmp	r6, #0
     3cc:	d0ec      	beq.n	3a8 <get_packet+0x18>
                payload->resendCount = (uint8_t)resendCount;
     3ce:	703e      	strb	r6, [r7, #0]
                GNClink_Construct_RequestResendFrame(txframe);
     3d0:	4d22      	ldr	r5, [pc, #136]	; (45c <get_packet+0xcc>)
     3d2:	0028      	movs	r0, r5
     3d4:	4b22      	ldr	r3, [pc, #136]	; (460 <get_packet+0xd0>)
     3d6:	4798      	blx	r3
                led_on(); // only flash if resend is being performed
     3d8:	2480      	movs	r4, #128	; 0x80
     3da:	03e4      	lsls	r4, r4, #15
     3dc:	0021      	movs	r1, r4
     3de:	2001      	movs	r0, #1
     3e0:	4b20      	ldr	r3, [pc, #128]	; (464 <get_packet+0xd4>)
     3e2:	4798      	blx	r3
                serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     3e4:	2214      	movs	r2, #20
     3e6:	0029      	movs	r1, r5
     3e8:	2000      	movs	r0, #0
     3ea:	4b1f      	ldr	r3, [pc, #124]	; (468 <get_packet+0xd8>)
     3ec:	4798      	blx	r3
                serial_write_wait_until_complete(PORT0);
     3ee:	2000      	movs	r0, #0
     3f0:	4b1e      	ldr	r3, [pc, #120]	; (46c <get_packet+0xdc>)
     3f2:	4798      	blx	r3
                led_off();
     3f4:	0021      	movs	r1, r4
     3f6:	2001      	movs	r0, #1
     3f8:	4b1d      	ldr	r3, [pc, #116]	; (470 <get_packet+0xe0>)
     3fa:	4798      	blx	r3
        serial_read_start(PORT0, rxframe, GNCLINK_FRAME_TOTAL_LENGTH);
     3fc:	4c15      	ldr	r4, [pc, #84]	; (454 <get_packet+0xc4>)
     3fe:	2214      	movs	r2, #20
     400:	0021      	movs	r1, r4
     402:	2000      	movs	r0, #0
     404:	4b1b      	ldr	r3, [pc, #108]	; (474 <get_packet+0xe4>)
     406:	4798      	blx	r3
        serial_read_wait_until_complete(PORT0);
     408:	2000      	movs	r0, #0
     40a:	4b1b      	ldr	r3, [pc, #108]	; (478 <get_packet+0xe8>)
     40c:	4798      	blx	r3
        if (!GNClink_Check_Frame(rxframe)) {
     40e:	0020      	movs	r0, r4
     410:	4b1a      	ldr	r3, [pc, #104]	; (47c <get_packet+0xec>)
     412:	4798      	blx	r3
     414:	1e05      	subs	r5, r0, #0
     416:	d0f1      	beq.n	3fc <get_packet+0x6c>
        if (GNClink_Frame_RequestResend(rxframe)) {
     418:	480e      	ldr	r0, [pc, #56]	; (454 <get_packet+0xc4>)
     41a:	4b19      	ldr	r3, [pc, #100]	; (480 <get_packet+0xf0>)
     41c:	4798      	blx	r3
     41e:	2800      	cmp	r0, #0
     420:	d1c1      	bne.n	3a6 <get_packet+0x16>
        receivedFrames[GNClink_Get_Frame_Index(rxframe)] = true;
     422:	4c0c      	ldr	r4, [pc, #48]	; (454 <get_packet+0xc4>)
     424:	0020      	movs	r0, r4
     426:	4b0c      	ldr	r3, [pc, #48]	; (458 <get_packet+0xc8>)
     428:	4798      	blx	r3
     42a:	2301      	movs	r3, #1
     42c:	aa01      	add	r2, sp, #4
     42e:	5413      	strb	r3, [r2, r0]
        bool moreFrames = true;
     430:	466a      	mov	r2, sp
     432:	70d3      	strb	r3, [r2, #3]
        GNClink_Reconstruct_Packet_From_Frames(rxframe, rxpacket, &moreFrames);
     434:	4913      	ldr	r1, [pc, #76]	; (484 <get_packet+0xf4>)
     436:	3203      	adds	r2, #3
     438:	0020      	movs	r0, r4
     43a:	4b13      	ldr	r3, [pc, #76]	; (488 <get_packet+0xf8>)
     43c:	4798      	blx	r3
        if (!moreFrames) {
     43e:	466b      	mov	r3, sp
     440:	78db      	ldrb	r3, [r3, #3]
     442:	2b00      	cmp	r3, #0
     444:	d1da      	bne.n	3fc <get_packet+0x6c>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(txframe);
     446:	4805      	ldr	r0, [pc, #20]	; (45c <get_packet+0xcc>)
     448:	4b10      	ldr	r3, [pc, #64]	; (48c <get_packet+0xfc>)
     44a:	4798      	blx	r3
     44c:	0007      	movs	r7, r0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     44e:	2400      	movs	r4, #0
            int resendCount = 0;
     450:	2600      	movs	r6, #0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     452:	e7ad      	b.n	3b0 <get_packet+0x20>
     454:	2000013c 	.word	0x2000013c
     458:	0000418b 	.word	0x0000418b
     45c:	20000150 	.word	0x20000150
     460:	00004191 	.word	0x00004191
     464:	00001bcd 	.word	0x00001bcd
     468:	00000bd5 	.word	0x00000bd5
     46c:	00000c5d 	.word	0x00000c5d
     470:	00001bdd 	.word	0x00001bdd
     474:	00000cbd 	.word	0x00000cbd
     478:	00000d45 	.word	0x00000d45
     47c:	00004155 	.word	0x00004155
     480:	00004181 	.word	0x00004181
     484:	200000fc 	.word	0x200000fc
     488:	000041b1 	.word	0x000041b1
     48c:	000040cd 	.word	0x000040cd

00000490 <send_packet>:

bool send_packet(bool resendFrames) {
     490:	b570      	push	{r4, r5, r6, lr}
     492:	b084      	sub	sp, #16
     494:	0005      	movs	r5, r0
    int count = 0;
    bool moreFrames = true;
     496:	230f      	movs	r3, #15
     498:	446b      	add	r3, sp
     49a:	2201      	movs	r2, #1
     49c:	701a      	strb	r2, [r3, #0]
    int count = 0;
     49e:	2400      	movs	r4, #0
    while (moreFrames) {
     4a0:	e01a      	b.n	4d8 <send_packet+0x48>
        // check if frames are being resent
        if (resendFrames) {
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
            // break if all have been sent
            if (count == payload->resendCount) break;
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     4a2:	2202      	movs	r2, #2
     4a4:	e029      	b.n	4fa <send_packet+0x6a>
        int frameIndex = count;
     4a6:	0023      	movs	r3, r4
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     4a8:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
        }

        // send frames
        GNClink_Get_Frame(txpacket, txframe, frameFlags, frameIndex, &moreFrames);
     4aa:	491a      	ldr	r1, [pc, #104]	; (514 <send_packet+0x84>)
     4ac:	481a      	ldr	r0, [pc, #104]	; (518 <send_packet+0x88>)
     4ae:	260f      	movs	r6, #15
     4b0:	446e      	add	r6, sp
     4b2:	9600      	str	r6, [sp, #0]
     4b4:	4e19      	ldr	r6, [pc, #100]	; (51c <send_packet+0x8c>)
     4b6:	47b0      	blx	r6

        // send frame
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     4b8:	2d00      	cmp	r5, #0
     4ba:	d121      	bne.n	500 <send_packet+0x70>
        serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     4bc:	4915      	ldr	r1, [pc, #84]	; (514 <send_packet+0x84>)
     4be:	2214      	movs	r2, #20
     4c0:	2000      	movs	r0, #0
     4c2:	4b17      	ldr	r3, [pc, #92]	; (520 <send_packet+0x90>)
     4c4:	4798      	blx	r3
        serial_write_wait_until_complete(PORT0);
     4c6:	2000      	movs	r0, #0
     4c8:	4b16      	ldr	r3, [pc, #88]	; (524 <send_packet+0x94>)
     4ca:	4798      	blx	r3
        led_off();
     4cc:	2180      	movs	r1, #128	; 0x80
     4ce:	03c9      	lsls	r1, r1, #15
     4d0:	2001      	movs	r0, #1
     4d2:	4b15      	ldr	r3, [pc, #84]	; (528 <send_packet+0x98>)
     4d4:	4798      	blx	r3

        ++count;
     4d6:	3401      	adds	r4, #1
    while (moreFrames) {
     4d8:	230f      	movs	r3, #15
     4da:	446b      	add	r3, sp
     4dc:	781b      	ldrb	r3, [r3, #0]
     4de:	2b00      	cmp	r3, #0
     4e0:	d014      	beq.n	50c <send_packet+0x7c>
        if (resendFrames) {
     4e2:	2d00      	cmp	r5, #0
     4e4:	d0df      	beq.n	4a6 <send_packet+0x16>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
     4e6:	4811      	ldr	r0, [pc, #68]	; (52c <send_packet+0x9c>)
     4e8:	4b11      	ldr	r3, [pc, #68]	; (530 <send_packet+0xa0>)
     4ea:	4798      	blx	r3
            if (count == payload->resendCount) break;
     4ec:	7803      	ldrb	r3, [r0, #0]
     4ee:	42a3      	cmp	r3, r4
     4f0:	d00c      	beq.n	50c <send_packet+0x7c>
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     4f2:	3b01      	subs	r3, #1
     4f4:	42a3      	cmp	r3, r4
     4f6:	d0d4      	beq.n	4a2 <send_packet+0x12>
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     4f8:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
     4fa:	1900      	adds	r0, r0, r4
     4fc:	7843      	ldrb	r3, [r0, #1]
     4fe:	e7d4      	b.n	4aa <send_packet+0x1a>
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     500:	2180      	movs	r1, #128	; 0x80
     502:	03c9      	lsls	r1, r1, #15
     504:	2001      	movs	r0, #1
     506:	4b0b      	ldr	r3, [pc, #44]	; (534 <send_packet+0xa4>)
     508:	4798      	blx	r3
     50a:	e7d7      	b.n	4bc <send_packet+0x2c>
    }
    return true;
}
     50c:	2001      	movs	r0, #1
     50e:	b004      	add	sp, #16
     510:	bd70      	pop	{r4, r5, r6, pc}
     512:	46c0      	nop			; (mov r8, r8)
     514:	20000150 	.word	0x20000150
     518:	200000bc 	.word	0x200000bc
     51c:	000040d1 	.word	0x000040d1
     520:	00000bd5 	.word	0x00000bd5
     524:	00000c5d 	.word	0x00000c5d
     528:	00001bdd 	.word	0x00001bdd
     52c:	2000013c 	.word	0x2000013c
     530:	000040cd 	.word	0x000040cd
     534:	00001bcd 	.word	0x00001bcd

00000538 <comms_loop>:

bool comms_loop() {
     538:	b510      	push	{r4, lr}
    bool run = true;
    while (run) {
     53a:	e002      	b.n	542 <comms_loop+0xa>
        // get packet, resend if required
        while (!get_packet()) {
            send_packet(true);
     53c:	2001      	movs	r0, #1
     53e:	4b07      	ldr	r3, [pc, #28]	; (55c <comms_loop+0x24>)
     540:	4798      	blx	r3
        while (!get_packet()) {
     542:	4b07      	ldr	r3, [pc, #28]	; (560 <comms_loop+0x28>)
     544:	4798      	blx	r3
     546:	2800      	cmp	r0, #0
     548:	d0f8      	beq.n	53c <comms_loop+0x4>
        }

        if (evaluatePacket()) {
     54a:	4b06      	ldr	r3, [pc, #24]	; (564 <comms_loop+0x2c>)
     54c:	4798      	blx	r3
     54e:	2800      	cmp	r0, #0
     550:	d0f7      	beq.n	542 <comms_loop+0xa>
            send_packet(false);
     552:	2000      	movs	r0, #0
     554:	4b01      	ldr	r3, [pc, #4]	; (55c <comms_loop+0x24>)
     556:	4798      	blx	r3
     558:	e7f3      	b.n	542 <comms_loop+0xa>
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	00000491 	.word	0x00000491
     560:	00000391 	.word	0x00000391
     564:	00000315 	.word	0x00000315

00000568 <get_address_from_id>:
    switch (type) {
     568:	2804      	cmp	r0, #4
     56a:	d011      	beq.n	590 <get_address_from_id+0x28>
     56c:	280b      	cmp	r0, #11
     56e:	d01c      	beq.n	5aa <get_address_from_id+0x42>
     570:	2803      	cmp	r0, #3
     572:	d001      	beq.n	578 <get_address_from_id+0x10>
}
     574:	2000      	movs	r0, #0
     576:	4770      	bx	lr
        if (id < __GLOBAL_I32_ID_START || id >= __GLOBAL_I32_ID_END) return false;
     578:	1e48      	subs	r0, r1, #1
     57a:	b2c0      	uxtb	r0, r0
     57c:	280b      	cmp	r0, #11
     57e:	d8f9      	bhi.n	574 <get_address_from_id+0xc>
        *size = 4;
     580:	2004      	movs	r0, #4
     582:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_I32_ID_START;
     584:	3901      	subs	r1, #1
        *address = &(globals.__GLOBAL_I32_START_VARIABLE) + index;
     586:	4b0f      	ldr	r3, [pc, #60]	; (5c4 <get_address_from_id+0x5c>)
     588:	0089      	lsls	r1, r1, #2
     58a:	185b      	adds	r3, r3, r1
     58c:	6013      	str	r3, [r2, #0]
        break;
     58e:	e7f2      	b.n	576 <get_address_from_id+0xe>
        if (id < __GLOBAL_U32_ID_START || id >= __GLOBAL_U32_ID_END) return false;
     590:	0008      	movs	r0, r1
     592:	380d      	subs	r0, #13
     594:	b2c0      	uxtb	r0, r0
     596:	2801      	cmp	r0, #1
     598:	d8ec      	bhi.n	574 <get_address_from_id+0xc>
        *size = 4;
     59a:	2004      	movs	r0, #4
     59c:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U32_ID_START;
     59e:	390d      	subs	r1, #13
        *address = &(globals.__GLOBAL_U32_START_VARIABLE) + index;
     5a0:	4b09      	ldr	r3, [pc, #36]	; (5c8 <get_address_from_id+0x60>)
     5a2:	0089      	lsls	r1, r1, #2
     5a4:	185b      	adds	r3, r3, r1
     5a6:	6013      	str	r3, [r2, #0]
        break;
     5a8:	e7e5      	b.n	576 <get_address_from_id+0xe>
        if (id < __GLOBAL_BOOL_ID_START || id >= __GLOBAL_BOOL_ID_END) return false;
     5aa:	0008      	movs	r0, r1
     5ac:	380f      	subs	r0, #15
     5ae:	b2c0      	uxtb	r0, r0
     5b0:	2802      	cmp	r0, #2
     5b2:	d8df      	bhi.n	574 <get_address_from_id+0xc>
        *size = 1;
     5b4:	2001      	movs	r0, #1
     5b6:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_BOOL_ID_START;
     5b8:	390f      	subs	r1, #15
        *address = &(globals.__GLOBAL_BOOL_START_VARIABLE) + index;
     5ba:	4b04      	ldr	r3, [pc, #16]	; (5cc <get_address_from_id+0x64>)
     5bc:	185b      	adds	r3, r3, r1
     5be:	6013      	str	r3, [r2, #0]
}
     5c0:	e7d9      	b.n	576 <get_address_from_id+0xe>
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	20000168 	.word	0x20000168
     5c8:	20000198 	.word	0x20000198
     5cc:	200001a0 	.word	0x200001a0

000005d0 <get_global_type_from_id>:
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     5d0:	1e43      	subs	r3, r0, #1
     5d2:	b2db      	uxtb	r3, r3
     5d4:	2b10      	cmp	r3, #16
     5d6:	d817      	bhi.n	608 <get_global_type_from_id+0x38>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     5d8:	2800      	cmp	r0, #0
     5da:	d009      	beq.n	5f0 <get_global_type_from_id+0x20>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     5dc:	280c      	cmp	r0, #12
     5de:	d90b      	bls.n	5f8 <get_global_type_from_id+0x28>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     5e0:	280e      	cmp	r0, #14
     5e2:	d90d      	bls.n	600 <get_global_type_from_id+0x30>
    if (id - __GLOBAL_BOOL_ID_END < 0) {*type = __BOOL; return true;}
     5e4:	2811      	cmp	r0, #17
     5e6:	d810      	bhi.n	60a <get_global_type_from_id+0x3a>
     5e8:	230b      	movs	r3, #11
     5ea:	700b      	strb	r3, [r1, #0]
     5ec:	2001      	movs	r0, #1
     5ee:	e00c      	b.n	60a <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     5f0:	2301      	movs	r3, #1
     5f2:	700b      	strb	r3, [r1, #0]
     5f4:	3001      	adds	r0, #1
     5f6:	e008      	b.n	60a <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     5f8:	2303      	movs	r3, #3
     5fa:	700b      	strb	r3, [r1, #0]
     5fc:	2001      	movs	r0, #1
     5fe:	e004      	b.n	60a <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     600:	2304      	movs	r3, #4
     602:	700b      	strb	r3, [r1, #0]
     604:	2001      	movs	r0, #1
     606:	e000      	b.n	60a <get_global_type_from_id+0x3a>
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     608:	2000      	movs	r0, #0
}
     60a:	4770      	bx	lr

0000060c <get_global_address_size>:
bool get_global_address_size(Global_Variable_IDs id, void** address, int* size) {
     60c:	b570      	push	{r4, r5, r6, lr}
     60e:	b082      	sub	sp, #8
     610:	0004      	movs	r4, r0
     612:	000d      	movs	r5, r1
     614:	0016      	movs	r6, r2
    if (!get_global_type_from_id(id, &type)) return false;
     616:	466b      	mov	r3, sp
     618:	1dd9      	adds	r1, r3, #7
     61a:	4b08      	ldr	r3, [pc, #32]	; (63c <get_global_address_size+0x30>)
     61c:	4798      	blx	r3
     61e:	2800      	cmp	r0, #0
     620:	d102      	bne.n	628 <get_global_address_size+0x1c>
}
     622:	2000      	movs	r0, #0
     624:	b002      	add	sp, #8
     626:	bd70      	pop	{r4, r5, r6, pc}
    if (!get_address_from_id(type, id, address, size)) return false;
     628:	466b      	mov	r3, sp
     62a:	79d8      	ldrb	r0, [r3, #7]
     62c:	0033      	movs	r3, r6
     62e:	002a      	movs	r2, r5
     630:	0021      	movs	r1, r4
     632:	4c03      	ldr	r4, [pc, #12]	; (640 <get_global_address_size+0x34>)
     634:	47a0      	blx	r4
     636:	2800      	cmp	r0, #0
     638:	d1f4      	bne.n	624 <get_global_address_size+0x18>
     63a:	e7f2      	b.n	622 <get_global_address_size+0x16>
     63c:	000005d1 	.word	0x000005d1
     640:	00000569 	.word	0x00000569

00000644 <get_global_name>:
}

bool get_global_name(Global_Variable_IDs id, uint8_t* buffer, int* length, int maxLength) {
     644:	b5f0      	push	{r4, r5, r6, r7, lr}
     646:	46c6      	mov	lr, r8
     648:	b500      	push	{lr}
     64a:	000d      	movs	r5, r1
     64c:	0017      	movs	r7, r2
     64e:	001c      	movs	r4, r3
    bool ret = true;
    if (id >= __GLOBAL_ID_END) {
     650:	2811      	cmp	r0, #17
     652:	d817      	bhi.n	684 <get_global_name+0x40>
    bool ret = true;
     654:	2301      	movs	r3, #1
     656:	4698      	mov	r8, r3
        id = 0;
        ret = false;
    }

    *length = MIN_2(maxLength, strlen(global_variable_names[id]) + 1);
     658:	0006      	movs	r6, r0
     65a:	4b0c      	ldr	r3, [pc, #48]	; (68c <get_global_name+0x48>)
     65c:	0080      	lsls	r0, r0, #2
     65e:	58c0      	ldr	r0, [r0, r3]
     660:	4b0b      	ldr	r3, [pc, #44]	; (690 <get_global_name+0x4c>)
     662:	4798      	blx	r3
     664:	3001      	adds	r0, #1
     666:	42a0      	cmp	r0, r4
     668:	d800      	bhi.n	66c <get_global_name+0x28>
     66a:	0004      	movs	r4, r0
     66c:	603c      	str	r4, [r7, #0]

    memcpy(buffer, global_variable_names[id], *length);
     66e:	4b07      	ldr	r3, [pc, #28]	; (68c <get_global_name+0x48>)
     670:	00b6      	lsls	r6, r6, #2
     672:	58f1      	ldr	r1, [r6, r3]
     674:	0022      	movs	r2, r4
     676:	0028      	movs	r0, r5
     678:	4b06      	ldr	r3, [pc, #24]	; (694 <get_global_name+0x50>)
     67a:	4798      	blx	r3

    return ret;
}
     67c:	4640      	mov	r0, r8
     67e:	bc80      	pop	{r7}
     680:	46b8      	mov	r8, r7
     682:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = false;
     684:	2300      	movs	r3, #0
     686:	4698      	mov	r8, r3
        id = 0;
     688:	2000      	movs	r0, #0
     68a:	e7e5      	b.n	658 <get_global_name+0x14>
     68c:	20000000 	.word	0x20000000
     690:	00005289 	.word	0x00005289
     694:	000051f9 	.word	0x000051f9

00000698 <init_globals>:

bool init_globals() {
     698:	b570      	push	{r4, r5, r6, lr}
     69a:	b08a      	sub	sp, #40	; 0x28
    // load header
    EEPROM_Request request;
    eeprom_read_request(&request, 0, &__eeprom_header, sizeof(__eeprom_header));
     69c:	4c1b      	ldr	r4, [pc, #108]	; (70c <init_globals+0x74>)
     69e:	0022      	movs	r2, r4
     6a0:	3240      	adds	r2, #64	; 0x40
     6a2:	2308      	movs	r3, #8
     6a4:	2100      	movs	r1, #0
     6a6:	4668      	mov	r0, sp
     6a8:	4d19      	ldr	r5, [pc, #100]	; (710 <init_globals+0x78>)
     6aa:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     6ac:	4668      	mov	r0, sp
     6ae:	4b19      	ldr	r3, [pc, #100]	; (714 <init_globals+0x7c>)
     6b0:	4798      	blx	r3
    
    // check and modify header values
    if (__eeprom_header.GlobalHash != __GLOBAL_HASH) {
     6b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
     6b4:	4b18      	ldr	r3, [pc, #96]	; (718 <init_globals+0x80>)
     6b6:	429a      	cmp	r2, r3
     6b8:	d11c      	bne.n	6f4 <init_globals+0x5c>
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
        eeprom_wait_until_done(&request);
    }
    
    ++__eeprom_header.StartupCount;
     6ba:	4c14      	ldr	r4, [pc, #80]	; (70c <init_globals+0x74>)
     6bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
     6be:	3301      	adds	r3, #1
     6c0:	6463      	str	r3, [r4, #68]	; 0x44
    eeprom_write_request(&request, 4, &(__eeprom_header.StartupCount), 4);
     6c2:	0022      	movs	r2, r4
     6c4:	3244      	adds	r2, #68	; 0x44
     6c6:	2304      	movs	r3, #4
     6c8:	2104      	movs	r1, #4
     6ca:	4668      	mov	r0, sp
     6cc:	4d13      	ldr	r5, [pc, #76]	; (71c <init_globals+0x84>)
     6ce:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     6d0:	4668      	mov	r0, sp
     6d2:	4d10      	ldr	r5, [pc, #64]	; (714 <init_globals+0x7c>)
     6d4:	47a8      	blx	r5

    // load globals
    eeprom_read_request(&request, __EEPROM_GLOBAL_VARIABLES_START_ADDRESS, &globals, sizeof(globals));
     6d6:	2340      	movs	r3, #64	; 0x40
     6d8:	0022      	movs	r2, r4
     6da:	2120      	movs	r1, #32
     6dc:	4668      	mov	r0, sp
     6de:	4e0c      	ldr	r6, [pc, #48]	; (710 <init_globals+0x78>)
     6e0:	47b0      	blx	r6
    eeprom_wait_until_done(&request);
     6e2:	4668      	mov	r0, sp
     6e4:	47a8      	blx	r5

    globals.GlobalHash = __eeprom_header.GlobalHash;
     6e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
     6e8:	6323      	str	r3, [r4, #48]	; 0x30
    globals.StartupCount = __eeprom_header.StartupCount;
     6ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
     6ec:	6363      	str	r3, [r4, #52]	; 0x34

    return true;
     6ee:	2001      	movs	r0, #1
     6f0:	b00a      	add	sp, #40	; 0x28
     6f2:	bd70      	pop	{r4, r5, r6, pc}
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
     6f4:	4a05      	ldr	r2, [pc, #20]	; (70c <init_globals+0x74>)
     6f6:	6413      	str	r3, [r2, #64]	; 0x40
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
     6f8:	3240      	adds	r2, #64	; 0x40
     6fa:	2304      	movs	r3, #4
     6fc:	2100      	movs	r1, #0
     6fe:	4668      	mov	r0, sp
     700:	4c06      	ldr	r4, [pc, #24]	; (71c <init_globals+0x84>)
     702:	47a0      	blx	r4
        eeprom_wait_until_done(&request);
     704:	4668      	mov	r0, sp
     706:	4b03      	ldr	r3, [pc, #12]	; (714 <init_globals+0x7c>)
     708:	4798      	blx	r3
     70a:	e7d6      	b.n	6ba <init_globals+0x22>
     70c:	20000168 	.word	0x20000168
     710:	00000789 	.word	0x00000789
     714:	00003979 	.word	0x00003979
     718:	9fc0b1d3 	.word	0x9fc0b1d3
     71c:	000007b5 	.word	0x000007b5

00000720 <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     720:	b510      	push	{r4, lr}
     722:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     724:	2480      	movs	r4, #128	; 0x80
     726:	05e4      	lsls	r4, r4, #23
     728:	0021      	movs	r1, r4
     72a:	2001      	movs	r0, #1
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <init_eeprom+0x3c>)
     72e:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     730:	0021      	movs	r1, r4
     732:	2001      	movs	r0, #1
     734:	4b0a      	ldr	r3, [pc, #40]	; (760 <init_eeprom+0x40>)
     736:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     738:	ab02      	add	r3, sp, #8
     73a:	490a      	ldr	r1, [pc, #40]	; (764 <init_eeprom+0x44>)
     73c:	680a      	ldr	r2, [r1, #0]
     73e:	9202      	str	r2, [sp, #8]
     740:	7909      	ldrb	r1, [r1, #4]
     742:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     744:	4808      	ldr	r0, [pc, #32]	; (768 <init_eeprom+0x48>)
     746:	2180      	movs	r1, #128	; 0x80
     748:	0209      	lsls	r1, r1, #8
     74a:	9100      	str	r1, [sp, #0]
     74c:	9b03      	ldr	r3, [sp, #12]
     74e:	4907      	ldr	r1, [pc, #28]	; (76c <init_eeprom+0x4c>)
     750:	4c07      	ldr	r4, [pc, #28]	; (770 <init_eeprom+0x50>)
     752:	47a0      	blx	r4

    return true;
}
     754:	2001      	movs	r0, #1
     756:	b004      	add	sp, #16
     758:	bd10      	pop	{r4, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	00001bcd 	.word	0x00001bcd
     760:	00001bbd 	.word	0x00001bbd
     764:	000055b8 	.word	0x000055b8
     768:	200001b0 	.word	0x200001b0
     76c:	42001400 	.word	0x42001400
     770:	0000146d 	.word	0x0000146d

00000774 <check_eeprom>:

bool check_eeprom() {
     774:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     776:	4802      	ldr	r0, [pc, #8]	; (780 <check_eeprom+0xc>)
     778:	4b02      	ldr	r3, [pc, #8]	; (784 <check_eeprom+0x10>)
     77a:	4798      	blx	r3
}
     77c:	bd10      	pop	{r4, pc}
     77e:	46c0      	nop			; (mov r8, r8)
     780:	200001b0 	.word	0x200001b0
     784:	00001619 	.word	0x00001619

00000788 <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     788:	b530      	push	{r4, r5, lr}
     78a:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     78c:	4d06      	ldr	r5, [pc, #24]	; (7a8 <eeprom_read_request+0x20>)
     78e:	4c07      	ldr	r4, [pc, #28]	; (7ac <eeprom_read_request+0x24>)
     790:	9203      	str	r2, [sp, #12]
     792:	9302      	str	r3, [sp, #8]
     794:	9101      	str	r1, [sp, #4]
     796:	2300      	movs	r3, #0
     798:	9300      	str	r3, [sp, #0]
     79a:	002a      	movs	r2, r5
     79c:	0001      	movs	r1, r0
     79e:	0020      	movs	r0, r4
     7a0:	4c03      	ldr	r4, [pc, #12]	; (7b0 <eeprom_read_request+0x28>)
     7a2:	47a0      	blx	r4
}
     7a4:	b005      	add	sp, #20
     7a6:	bd30      	pop	{r4, r5, pc}
     7a8:	200001b0 	.word	0x200001b0
     7ac:	200002b4 	.word	0x200002b4
     7b0:	00003945 	.word	0x00003945

000007b4 <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     7b4:	b530      	push	{r4, r5, lr}
     7b6:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     7b8:	4d07      	ldr	r5, [pc, #28]	; (7d8 <eeprom_write_request+0x24>)
     7ba:	4c08      	ldr	r4, [pc, #32]	; (7dc <eeprom_write_request+0x28>)
     7bc:	9203      	str	r2, [sp, #12]
     7be:	9302      	str	r3, [sp, #8]
     7c0:	9101      	str	r1, [sp, #4]
     7c2:	2301      	movs	r3, #1
     7c4:	9300      	str	r3, [sp, #0]
     7c6:	2300      	movs	r3, #0
     7c8:	002a      	movs	r2, r5
     7ca:	0001      	movs	r1, r0
     7cc:	0020      	movs	r0, r4
     7ce:	4c04      	ldr	r4, [pc, #16]	; (7e0 <eeprom_write_request+0x2c>)
     7d0:	47a0      	blx	r4
     7d2:	b005      	add	sp, #20
     7d4:	bd30      	pop	{r4, r5, pc}
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	200001b0 	.word	0x200001b0
     7dc:	200002b4 	.word	0x200002b4
     7e0:	00003945 	.word	0x00003945

000007e4 <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e6:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     7e8:	2480      	movs	r4, #128	; 0x80
     7ea:	0524      	lsls	r4, r4, #20
     7ec:	0021      	movs	r1, r4
     7ee:	2000      	movs	r0, #0
     7f0:	4e15      	ldr	r6, [pc, #84]	; (848 <imu_init+0x64>)
     7f2:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     7f4:	0021      	movs	r1, r4
     7f6:	2000      	movs	r0, #0
     7f8:	4f14      	ldr	r7, [pc, #80]	; (84c <imu_init+0x68>)
     7fa:	47b8      	blx	r7
	IMU_OFF_BUS();
     7fc:	2580      	movs	r5, #128	; 0x80
     7fe:	03ad      	lsls	r5, r5, #14
     800:	0029      	movs	r1, r5
     802:	2000      	movs	r0, #0
     804:	4b12      	ldr	r3, [pc, #72]	; (850 <imu_init+0x6c>)
     806:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     808:	0029      	movs	r1, r5
     80a:	2000      	movs	r0, #0
     80c:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     80e:	0029      	movs	r1, r5
     810:	2000      	movs	r0, #0
     812:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     814:	9400      	str	r4, [sp, #0]
     816:	2300      	movs	r3, #0
     818:	466a      	mov	r2, sp
     81a:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     81c:	480d      	ldr	r0, [pc, #52]	; (854 <imu_init+0x70>)
     81e:	0022      	movs	r2, r4
     820:	9b01      	ldr	r3, [sp, #4]
     822:	490d      	ldr	r1, [pc, #52]	; (858 <imu_init+0x74>)
     824:	4c0d      	ldr	r4, [pc, #52]	; (85c <imu_init+0x78>)
     826:	47a0      	blx	r4
     828:	1e04      	subs	r4, r0, #0
     82a:	d107      	bne.n	83c <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     82c:	2180      	movs	r1, #128	; 0x80
     82e:	0389      	lsls	r1, r1, #14
     830:	2000      	movs	r0, #0
     832:	4b07      	ldr	r3, [pc, #28]	; (850 <imu_init+0x6c>)
     834:	4798      	blx	r3
    return ret;
}
     836:	0020      	movs	r0, r4
     838:	b003      	add	sp, #12
     83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     83c:	4805      	ldr	r0, [pc, #20]	; (854 <imu_init+0x70>)
     83e:	4b08      	ldr	r3, [pc, #32]	; (860 <imu_init+0x7c>)
     840:	4798      	blx	r3
     842:	0004      	movs	r4, r0
     844:	e7f2      	b.n	82c <imu_init+0x48>
     846:	46c0      	nop			; (mov r8, r8)
     848:	00001bcd 	.word	0x00001bcd
     84c:	00001bbd 	.word	0x00001bbd
     850:	00001bdd 	.word	0x00001bdd
     854:	200001bc 	.word	0x200001bc
     858:	42001400 	.word	0x42001400
     85c:	000019ed 	.word	0x000019ed
     860:	00001b31 	.word	0x00001b31

00000864 <check_imu>:

bool check_imu() {
     864:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     866:	2180      	movs	r1, #128	; 0x80
     868:	0389      	lsls	r1, r1, #14
     86a:	2000      	movs	r0, #0
     86c:	4b09      	ldr	r3, [pc, #36]	; (894 <check_imu+0x30>)
     86e:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     870:	4809      	ldr	r0, [pc, #36]	; (898 <check_imu+0x34>)
     872:	4b0a      	ldr	r3, [pc, #40]	; (89c <check_imu+0x38>)
     874:	4798      	blx	r3
     876:	1e04      	subs	r4, r0, #0
     878:	d106      	bne.n	888 <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     87a:	2180      	movs	r1, #128	; 0x80
     87c:	0389      	lsls	r1, r1, #14
     87e:	2000      	movs	r0, #0
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <check_imu+0x3c>)
     882:	4798      	blx	r3
    return pass;
}
     884:	0020      	movs	r0, r4
     886:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     888:	4803      	ldr	r0, [pc, #12]	; (898 <check_imu+0x34>)
     88a:	4b06      	ldr	r3, [pc, #24]	; (8a4 <check_imu+0x40>)
     88c:	4798      	blx	r3
     88e:	0004      	movs	r4, r0
     890:	e7f3      	b.n	87a <check_imu+0x16>
     892:	46c0      	nop			; (mov r8, r8)
     894:	00001bcd 	.word	0x00001bcd
     898:	200001bc 	.word	0x200001bc
     89c:	00001a5d 	.word	0x00001a5d
     8a0:	00001bdd 	.word	0x00001bdd
     8a4:	00001b8d 	.word	0x00001b8d

000008a8 <request_imu_data>:

void request_imu_data() {
     8a8:	b510      	push	{r4, lr}
     8aa:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     8ac:	4a09      	ldr	r2, [pc, #36]	; (8d4 <request_imu_data+0x2c>)
     8ae:	0011      	movs	r1, r2
     8b0:	310c      	adds	r1, #12
     8b2:	4809      	ldr	r0, [pc, #36]	; (8d8 <request_imu_data+0x30>)
     8b4:	0013      	movs	r3, r2
     8b6:	3334      	adds	r3, #52	; 0x34
     8b8:	9304      	str	r3, [sp, #16]
     8ba:	230e      	movs	r3, #14
     8bc:	9303      	str	r3, [sp, #12]
     8be:	331f      	adds	r3, #31
     8c0:	9302      	str	r3, [sp, #8]
     8c2:	2300      	movs	r3, #0
     8c4:	9301      	str	r3, [sp, #4]
     8c6:	9300      	str	r3, [sp, #0]
     8c8:	3302      	adds	r3, #2
     8ca:	4c04      	ldr	r4, [pc, #16]	; (8dc <request_imu_data+0x34>)
     8cc:	47a0      	blx	r4
}
     8ce:	b006      	add	sp, #24
     8d0:	bd10      	pop	{r4, pc}
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	200001bc 	.word	0x200001bc
     8d8:	200002b4 	.word	0x200002b4
     8dc:	00003be9 	.word	0x00003be9

000008e0 <wait_for_imu_data>:

void wait_for_imu_data() {
     8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e2:	46c6      	mov	lr, r8
     8e4:	b500      	push	{lr}
     8e6:	b086      	sub	sp, #24
    imu_icm20948_wait_until_done(&data_request);
     8e8:	4c8c      	ldr	r4, [pc, #560]	; (b1c <wait_for_imu_data+0x23c>)
     8ea:	0020      	movs	r0, r4
     8ec:	300c      	adds	r0, #12
     8ee:	4b8c      	ldr	r3, [pc, #560]	; (b20 <wait_for_imu_data+0x240>)
     8f0:	4798      	blx	r3

    // float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
    int32_t accel_multiplier = (__G__ * ACCEL_MIN_RANGE_G) >> (15 - accel_fs_sel);
     8f2:	6c66      	ldr	r6, [r4, #68]	; 0x44
     8f4:	230f      	movs	r3, #15
     8f6:	469c      	mov	ip, r3
     8f8:	1b9b      	subs	r3, r3, r6
     8fa:	488a      	ldr	r0, [pc, #552]	; (b24 <wait_for_imu_data+0x244>)
     8fc:	4118      	asrs	r0, r3
    globals.AccelerationXRaw = SWAPI16(raw_data.accel_x) * accel_multiplier;
     8fe:	2234      	movs	r2, #52	; 0x34
     900:	5ea3      	ldrsh	r3, [r4, r2]
     902:	0219      	lsls	r1, r3, #8
     904:	b209      	sxth	r1, r1
     906:	b29b      	uxth	r3, r3
     908:	0a1b      	lsrs	r3, r3, #8
     90a:	4319      	orrs	r1, r3
     90c:	0003      	movs	r3, r0
     90e:	434b      	muls	r3, r1
     910:	4f85      	ldr	r7, [pc, #532]	; (b28 <wait_for_imu_data+0x248>)
     912:	603b      	str	r3, [r7, #0]
    globals.AccelerationYRaw = SWAPI16(raw_data.accel_y) * accel_multiplier;
     914:	2236      	movs	r2, #54	; 0x36
     916:	5ea3      	ldrsh	r3, [r4, r2]
     918:	021a      	lsls	r2, r3, #8
     91a:	b212      	sxth	r2, r2
     91c:	b29b      	uxth	r3, r3
     91e:	0a1b      	lsrs	r3, r3, #8
     920:	431a      	orrs	r2, r3
     922:	0003      	movs	r3, r0
     924:	4353      	muls	r3, r2
     926:	607b      	str	r3, [r7, #4]
    globals.AccelerationZRaw = SWAPI16(raw_data.accel_z) * accel_multiplier;
     928:	2338      	movs	r3, #56	; 0x38
     92a:	5ee5      	ldrsh	r5, [r4, r3]
     92c:	022b      	lsls	r3, r5, #8
     92e:	b21b      	sxth	r3, r3
     930:	b2ad      	uxth	r5, r5
     932:	0a2d      	lsrs	r5, r5, #8
     934:	432b      	orrs	r3, r5
     936:	4698      	mov	r8, r3
     938:	4358      	muls	r0, r3
     93a:	60b8      	str	r0, [r7, #8]

    // float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
    int32_t gyro_multiplier = (GYRO_MIN_RANGE_MICRORADIANS) >> (15 - gyro_fs_sel);
     93c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
     93e:	4660      	mov	r0, ip
     940:	1b45      	subs	r5, r0, r5
     942:	487a      	ldr	r0, [pc, #488]	; (b2c <wait_for_imu_data+0x24c>)
     944:	4128      	asrs	r0, r5
    globals.AngularVelocityXRaw = SWAPI16(raw_data.gyro_x) * gyro_multiplier;
     946:	233a      	movs	r3, #58	; 0x3a
     948:	5ee5      	ldrsh	r5, [r4, r3]
     94a:	46ac      	mov	ip, r5
     94c:	022d      	lsls	r5, r5, #8
     94e:	b22d      	sxth	r5, r5
     950:	4663      	mov	r3, ip
     952:	b29b      	uxth	r3, r3
     954:	0a1b      	lsrs	r3, r3, #8
     956:	431d      	orrs	r5, r3
     958:	4345      	muls	r5, r0
     95a:	60fd      	str	r5, [r7, #12]
    globals.AngularVelocityYRaw = SWAPI16(raw_data.gyro_y)* gyro_multiplier;
     95c:	253c      	movs	r5, #60	; 0x3c
     95e:	5f63      	ldrsh	r3, [r4, r5]
     960:	021d      	lsls	r5, r3, #8
     962:	b22d      	sxth	r5, r5
     964:	b29b      	uxth	r3, r3
     966:	0a1b      	lsrs	r3, r3, #8
     968:	431d      	orrs	r5, r3
     96a:	4345      	muls	r5, r0
     96c:	613d      	str	r5, [r7, #16]
    globals.AngularVelocityZRaw = SWAPI16(raw_data.gyro_z) * gyro_multiplier;
     96e:	233e      	movs	r3, #62	; 0x3e
     970:	5ee4      	ldrsh	r4, [r4, r3]
     972:	0225      	lsls	r5, r4, #8
     974:	b22d      	sxth	r5, r5
     976:	b2a4      	uxth	r4, r4
     978:	0a24      	lsrs	r4, r4, #8
     97a:	432c      	orrs	r4, r5
     97c:	4360      	muls	r0, r4
     97e:	6178      	str	r0, [r7, #20]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     980:	4643      	mov	r3, r8
     982:	17d8      	asrs	r0, r3, #31
     984:	181b      	adds	r3, r3, r0
     986:	4043      	eors	r3, r0
     988:	b29b      	uxth	r3, r3
     98a:	17d0      	asrs	r0, r2, #31
     98c:	1812      	adds	r2, r2, r0
     98e:	4042      	eors	r2, r0
     990:	b292      	uxth	r2, r2
     992:	17c8      	asrs	r0, r1, #31
     994:	1809      	adds	r1, r1, r0
     996:	4041      	eors	r1, r0
     998:	b289      	uxth	r1, r1
     99a:	1c10      	adds	r0, r2, #0
     99c:	428a      	cmp	r2, r1
     99e:	d200      	bcs.n	9a2 <wait_for_imu_data+0xc2>
     9a0:	1c08      	adds	r0, r1, #0
     9a2:	1c1a      	adds	r2, r3, #0
     9a4:	b281      	uxth	r1, r0
     9a6:	428b      	cmp	r3, r1
     9a8:	d200      	bcs.n	9ac <wait_for_imu_data+0xcc>
     9aa:	1c02      	adds	r2, r0, #0
     9ac:	b212      	sxth	r2, r2
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     9ae:	2e03      	cmp	r6, #3
     9b0:	d002      	beq.n	9b8 <wait_for_imu_data+0xd8>
     9b2:	4b5f      	ldr	r3, [pc, #380]	; (b30 <wait_for_imu_data+0x250>)
     9b4:	429a      	cmp	r2, r3
     9b6:	dc40      	bgt.n	a3a <wait_for_imu_data+0x15a>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     9b8:	2e00      	cmp	r6, #0
     9ba:	d002      	beq.n	9c2 <wait_for_imu_data+0xe2>
     9bc:	4b5d      	ldr	r3, [pc, #372]	; (b34 <wait_for_imu_data+0x254>)
     9be:	429a      	cmp	r2, r3
     9c0:	dd55      	ble.n	a6e <wait_for_imu_data+0x18e>
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     9c2:	4856      	ldr	r0, [pc, #344]	; (b1c <wait_for_imu_data+0x23c>)
     9c4:	233e      	movs	r3, #62	; 0x3e
     9c6:	5ec2      	ldrsh	r2, [r0, r3]
     9c8:	0213      	lsls	r3, r2, #8
     9ca:	b21b      	sxth	r3, r3
     9cc:	b292      	uxth	r2, r2
     9ce:	0a12      	lsrs	r2, r2, #8
     9d0:	4313      	orrs	r3, r2
     9d2:	17da      	asrs	r2, r3, #31
     9d4:	189b      	adds	r3, r3, r2
     9d6:	4053      	eors	r3, r2
     9d8:	b29b      	uxth	r3, r3
     9da:	223c      	movs	r2, #60	; 0x3c
     9dc:	5e81      	ldrsh	r1, [r0, r2]
     9de:	020a      	lsls	r2, r1, #8
     9e0:	b212      	sxth	r2, r2
     9e2:	b289      	uxth	r1, r1
     9e4:	0a09      	lsrs	r1, r1, #8
     9e6:	430a      	orrs	r2, r1
     9e8:	17d1      	asrs	r1, r2, #31
     9ea:	1852      	adds	r2, r2, r1
     9ec:	404a      	eors	r2, r1
     9ee:	b292      	uxth	r2, r2
     9f0:	213a      	movs	r1, #58	; 0x3a
     9f2:	5e40      	ldrsh	r0, [r0, r1]
     9f4:	0201      	lsls	r1, r0, #8
     9f6:	b209      	sxth	r1, r1
     9f8:	b280      	uxth	r0, r0
     9fa:	0a00      	lsrs	r0, r0, #8
     9fc:	4301      	orrs	r1, r0
     9fe:	17c8      	asrs	r0, r1, #31
     a00:	1809      	adds	r1, r1, r0
     a02:	4041      	eors	r1, r0
     a04:	b289      	uxth	r1, r1
     a06:	1c10      	adds	r0, r2, #0
     a08:	428a      	cmp	r2, r1
     a0a:	d200      	bcs.n	a0e <wait_for_imu_data+0x12e>
     a0c:	1c08      	adds	r0, r1, #0
     a0e:	1c1a      	adds	r2, r3, #0
     a10:	b281      	uxth	r1, r0
     a12:	428b      	cmp	r3, r1
     a14:	d200      	bcs.n	a18 <wait_for_imu_data+0x138>
     a16:	1c02      	adds	r2, r0, #0
     a18:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     a1a:	4b40      	ldr	r3, [pc, #256]	; (b1c <wait_for_imu_data+0x23c>)
     a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     a1e:	2b03      	cmp	r3, #3
     a20:	d002      	beq.n	a28 <wait_for_imu_data+0x148>
     a22:	4943      	ldr	r1, [pc, #268]	; (b30 <wait_for_imu_data+0x250>)
     a24:	428a      	cmp	r2, r1
     a26:	dc3c      	bgt.n	aa2 <wait_for_imu_data+0x1c2>
        ++gyro_fs_sel;
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     a28:	2b00      	cmp	r3, #0
     a2a:	d002      	beq.n	a32 <wait_for_imu_data+0x152>
     a2c:	4941      	ldr	r1, [pc, #260]	; (b34 <wait_for_imu_data+0x254>)
     a2e:	428a      	cmp	r2, r1
     a30:	dd55      	ble.n	ade <wait_for_imu_data+0x1fe>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_off();
    }

     a32:	b006      	add	sp, #24
     a34:	bc80      	pop	{r7}
     a36:	46b8      	mov	r8, r7
     a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     a3a:	3601      	adds	r6, #1
     a3c:	4a37      	ldr	r2, [pc, #220]	; (b1c <wait_for_imu_data+0x23c>)
     a3e:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     a40:	b2f6      	uxtb	r6, r6
     a42:	0076      	lsls	r6, r6, #1
     a44:	2306      	movs	r3, #6
     a46:	401e      	ands	r6, r3
     a48:	3346      	adds	r3, #70	; 0x46
     a4a:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     a4c:	0011      	movs	r1, r2
     a4e:	3150      	adds	r1, #80	; 0x50
     a50:	4839      	ldr	r0, [pc, #228]	; (b38 <wait_for_imu_data+0x258>)
     a52:	0013      	movs	r3, r2
     a54:	334c      	adds	r3, #76	; 0x4c
     a56:	9304      	str	r3, [sp, #16]
     a58:	2301      	movs	r3, #1
     a5a:	9303      	str	r3, [sp, #12]
     a5c:	2414      	movs	r4, #20
     a5e:	9402      	str	r4, [sp, #8]
     a60:	3c12      	subs	r4, #18
     a62:	9401      	str	r4, [sp, #4]
     a64:	9300      	str	r3, [sp, #0]
     a66:	3301      	adds	r3, #1
     a68:	4c34      	ldr	r4, [pc, #208]	; (b3c <wait_for_imu_data+0x25c>)
     a6a:	47a0      	blx	r4
     a6c:	e7a9      	b.n	9c2 <wait_for_imu_data+0xe2>
        --accel_fs_sel;
     a6e:	3e01      	subs	r6, #1
     a70:	4a2a      	ldr	r2, [pc, #168]	; (b1c <wait_for_imu_data+0x23c>)
     a72:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     a74:	b2f6      	uxtb	r6, r6
     a76:	0076      	lsls	r6, r6, #1
     a78:	2306      	movs	r3, #6
     a7a:	401e      	ands	r6, r3
     a7c:	3346      	adds	r3, #70	; 0x46
     a7e:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     a80:	0011      	movs	r1, r2
     a82:	3150      	adds	r1, #80	; 0x50
     a84:	482c      	ldr	r0, [pc, #176]	; (b38 <wait_for_imu_data+0x258>)
     a86:	0013      	movs	r3, r2
     a88:	334c      	adds	r3, #76	; 0x4c
     a8a:	9304      	str	r3, [sp, #16]
     a8c:	2301      	movs	r3, #1
     a8e:	9303      	str	r3, [sp, #12]
     a90:	2414      	movs	r4, #20
     a92:	9402      	str	r4, [sp, #8]
     a94:	3c12      	subs	r4, #18
     a96:	9401      	str	r4, [sp, #4]
     a98:	9300      	str	r3, [sp, #0]
     a9a:	3301      	adds	r3, #1
     a9c:	4c27      	ldr	r4, [pc, #156]	; (b3c <wait_for_imu_data+0x25c>)
     a9e:	47a0      	blx	r4
     aa0:	e78f      	b.n	9c2 <wait_for_imu_data+0xe2>
        ++gyro_fs_sel;
     aa2:	3301      	adds	r3, #1
     aa4:	4a1d      	ldr	r2, [pc, #116]	; (b1c <wait_for_imu_data+0x23c>)
     aa6:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     aa8:	b2db      	uxtb	r3, r3
     aaa:	005b      	lsls	r3, r3, #1
     aac:	2106      	movs	r1, #6
     aae:	400b      	ands	r3, r1
     ab0:	3172      	adds	r1, #114	; 0x72
     ab2:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     ab4:	0011      	movs	r1, r2
     ab6:	317c      	adds	r1, #124	; 0x7c
     ab8:	481f      	ldr	r0, [pc, #124]	; (b38 <wait_for_imu_data+0x258>)
     aba:	0013      	movs	r3, r2
     abc:	3378      	adds	r3, #120	; 0x78
     abe:	9304      	str	r3, [sp, #16]
     ac0:	2301      	movs	r3, #1
     ac2:	9303      	str	r3, [sp, #12]
     ac4:	9302      	str	r3, [sp, #8]
     ac6:	2402      	movs	r4, #2
     ac8:	9401      	str	r4, [sp, #4]
     aca:	9300      	str	r3, [sp, #0]
     acc:	3301      	adds	r3, #1
     ace:	4c1b      	ldr	r4, [pc, #108]	; (b3c <wait_for_imu_data+0x25c>)
     ad0:	47a0      	blx	r4
        led_on();
     ad2:	2180      	movs	r1, #128	; 0x80
     ad4:	03c9      	lsls	r1, r1, #15
     ad6:	2001      	movs	r0, #1
     ad8:	4b19      	ldr	r3, [pc, #100]	; (b40 <wait_for_imu_data+0x260>)
     ada:	4798      	blx	r3
     adc:	e7a9      	b.n	a32 <wait_for_imu_data+0x152>
        --gyro_fs_sel;
     ade:	3b01      	subs	r3, #1
     ae0:	4a0e      	ldr	r2, [pc, #56]	; (b1c <wait_for_imu_data+0x23c>)
     ae2:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     ae4:	b2db      	uxtb	r3, r3
     ae6:	005b      	lsls	r3, r3, #1
     ae8:	2106      	movs	r1, #6
     aea:	400b      	ands	r3, r1
     aec:	3172      	adds	r1, #114	; 0x72
     aee:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     af0:	0011      	movs	r1, r2
     af2:	317c      	adds	r1, #124	; 0x7c
     af4:	4810      	ldr	r0, [pc, #64]	; (b38 <wait_for_imu_data+0x258>)
     af6:	0013      	movs	r3, r2
     af8:	3378      	adds	r3, #120	; 0x78
     afa:	9304      	str	r3, [sp, #16]
     afc:	2301      	movs	r3, #1
     afe:	9303      	str	r3, [sp, #12]
     b00:	9302      	str	r3, [sp, #8]
     b02:	2402      	movs	r4, #2
     b04:	9401      	str	r4, [sp, #4]
     b06:	9300      	str	r3, [sp, #0]
     b08:	3301      	adds	r3, #1
     b0a:	4c0c      	ldr	r4, [pc, #48]	; (b3c <wait_for_imu_data+0x25c>)
     b0c:	47a0      	blx	r4
        led_off();
     b0e:	2180      	movs	r1, #128	; 0x80
     b10:	03c9      	lsls	r1, r1, #15
     b12:	2001      	movs	r0, #1
     b14:	4b0b      	ldr	r3, [pc, #44]	; (b44 <wait_for_imu_data+0x264>)
     b16:	4798      	blx	r3
     b18:	e78b      	b.n	a32 <wait_for_imu_data+0x152>
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	200001bc 	.word	0x200001bc
     b20:	00003c25 	.word	0x00003c25
     b24:	012b4674 	.word	0x012b4674
     b28:	20000168 	.word	0x20000168
     b2c:	0042943b 	.word	0x0042943b
     b30:	00007333 	.word	0x00007333
     b34:	00003333 	.word	0x00003333
     b38:	200002b4 	.word	0x200002b4
     b3c:	00003be9 	.word	0x00003be9
     b40:	00001bcd 	.word	0x00001bcd
     b44:	00001bdd 	.word	0x00001bdd

00000b48 <serial_init>:
    .rxtrig = UART4_DMA_RX_TRIGGER,
    .priority = UART4_DMA_PRIORITY
};


bool serial_init() {
     b48:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

	// init uart
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     b4a:	22c0      	movs	r2, #192	; 0xc0
     b4c:	0092      	lsls	r2, r2, #2
     b4e:	2102      	movs	r1, #2
     b50:	2000      	movs	r0, #0
     b52:	4c18      	ldr	r4, [pc, #96]	; (bb4 <serial_init+0x6c>)
     b54:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     b56:	22c0      	movs	r2, #192	; 0xc0
     b58:	0312      	lsls	r2, r2, #12
     b5a:	2102      	movs	r1, #2
     b5c:	2000      	movs	r0, #0
     b5e:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     b60:	22c0      	movs	r2, #192	; 0xc0
     b62:	0212      	lsls	r2, r2, #8
     b64:	2102      	movs	r1, #2
     b66:	2001      	movs	r0, #1
     b68:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     b6a:	22c0      	movs	r2, #192	; 0xc0
     b6c:	0292      	lsls	r2, r2, #10
     b6e:	2102      	movs	r1, #2
     b70:	2001      	movs	r0, #1
     b72:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     b74:	2596      	movs	r5, #150	; 0x96
     b76:	01ad      	lsls	r5, r5, #6
     b78:	002b      	movs	r3, r5
     b7a:	2200      	movs	r2, #0
     b7c:	2101      	movs	r1, #1
     b7e:	480e      	ldr	r0, [pc, #56]	; (bb8 <serial_init+0x70>)
     b80:	4c0e      	ldr	r4, [pc, #56]	; (bbc <serial_init+0x74>)
     b82:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     b84:	002b      	movs	r3, r5
     b86:	2201      	movs	r2, #1
     b88:	2103      	movs	r1, #3
     b8a:	480d      	ldr	r0, [pc, #52]	; (bc0 <serial_init+0x78>)
     b8c:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     b8e:	002b      	movs	r3, r5
     b90:	2201      	movs	r2, #1
     b92:	2103      	movs	r1, #3
     b94:	480b      	ldr	r0, [pc, #44]	; (bc4 <serial_init+0x7c>)
     b96:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     b98:	002b      	movs	r3, r5
     b9a:	2200      	movs	r2, #0
     b9c:	2101      	movs	r1, #1
     b9e:	480a      	ldr	r0, [pc, #40]	; (bc8 <serial_init+0x80>)
     ba0:	47a0      	blx	r4
    
	// init usb
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     ba2:	2180      	movs	r1, #128	; 0x80
     ba4:	20e0      	movs	r0, #224	; 0xe0
     ba6:	0049      	lsls	r1, r1, #1
     ba8:	00c0      	lsls	r0, r0, #3
     baa:	4b08      	ldr	r3, [pc, #32]	; (bcc <serial_init+0x84>)
     bac:	4798      	blx	r3
	usb_attach();
     bae:	4b08      	ldr	r3, [pc, #32]	; (bd0 <serial_init+0x88>)
     bb0:	4798      	blx	r3
}
     bb2:	bd70      	pop	{r4, r5, r6, pc}
     bb4:	00001bed 	.word	0x00001bed
     bb8:	42000800 	.word	0x42000800
     bbc:	000022f5 	.word	0x000022f5
     bc0:	42000c00 	.word	0x42000c00
     bc4:	42001800 	.word	0x42001800
     bc8:	42001c00 	.word	0x42001c00
     bcc:	00003ed5 	.word	0x00003ed5
     bd0:	00002959 	.word	0x00002959

00000bd4 <serial_write_start>:
    // will kill usb process which would remain running
    rtos_usb_quit();
}


bool serial_write_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     bd4:	b570      	push	{r4, r5, r6, lr}
     bd6:	000e      	movs	r6, r1
     bd8:	0013      	movs	r3, r2
    switch (port) {
     bda:	2804      	cmp	r0, #4
     bdc:	d825      	bhi.n	c2a <serial_write_start+0x56>
     bde:	0080      	lsls	r0, r0, #2
     be0:	4d13      	ldr	r5, [pc, #76]	; (c30 <serial_write_start+0x5c>)
     be2:	582c      	ldr	r4, [r5, r0]
     be4:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_send_buffer(buffer, count);
     be6:	0011      	movs	r1, r2
     be8:	0030      	movs	r0, r6
     bea:	4b12      	ldr	r3, [pc, #72]	; (c34 <serial_write_start+0x60>)
     bec:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     bee:	2001      	movs	r0, #1
}
     bf0:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_send_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     bf2:	4911      	ldr	r1, [pc, #68]	; (c38 <serial_write_start+0x64>)
     bf4:	0032      	movs	r2, r6
     bf6:	4811      	ldr	r0, [pc, #68]	; (c3c <serial_write_start+0x68>)
     bf8:	4c11      	ldr	r4, [pc, #68]	; (c40 <serial_write_start+0x6c>)
     bfa:	47a0      	blx	r4
    return true;
     bfc:	2001      	movs	r0, #1
        break;
     bfe:	e7f7      	b.n	bf0 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     c00:	4910      	ldr	r1, [pc, #64]	; (c44 <serial_write_start+0x70>)
     c02:	0032      	movs	r2, r6
     c04:	4810      	ldr	r0, [pc, #64]	; (c48 <serial_write_start+0x74>)
     c06:	4c0e      	ldr	r4, [pc, #56]	; (c40 <serial_write_start+0x6c>)
     c08:	47a0      	blx	r4
    return true;
     c0a:	2001      	movs	r0, #1
        break;
     c0c:	e7f0      	b.n	bf0 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     c0e:	490f      	ldr	r1, [pc, #60]	; (c4c <serial_write_start+0x78>)
     c10:	0032      	movs	r2, r6
     c12:	480f      	ldr	r0, [pc, #60]	; (c50 <serial_write_start+0x7c>)
     c14:	4c0a      	ldr	r4, [pc, #40]	; (c40 <serial_write_start+0x6c>)
     c16:	47a0      	blx	r4
    return true;
     c18:	2001      	movs	r0, #1
        break;
     c1a:	e7e9      	b.n	bf0 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     c1c:	490d      	ldr	r1, [pc, #52]	; (c54 <serial_write_start+0x80>)
     c1e:	0032      	movs	r2, r6
     c20:	480d      	ldr	r0, [pc, #52]	; (c58 <serial_write_start+0x84>)
     c22:	4c07      	ldr	r4, [pc, #28]	; (c40 <serial_write_start+0x6c>)
     c24:	47a0      	blx	r4
    return true;
     c26:	2001      	movs	r0, #1
        break;
     c28:	e7e2      	b.n	bf0 <serial_write_start+0x1c>
    switch (port) {
     c2a:	2000      	movs	r0, #0
     c2c:	e7e0      	b.n	bf0 <serial_write_start+0x1c>
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	000055c0 	.word	0x000055c0
     c34:	00003f7d 	.word	0x00003f7d
     c38:	00005624 	.word	0x00005624
     c3c:	42000800 	.word	0x42000800
     c40:	00003d21 	.word	0x00003d21
     c44:	0000562c 	.word	0x0000562c
     c48:	42000c00 	.word	0x42000c00
     c4c:	00005634 	.word	0x00005634
     c50:	42001800 	.word	0x42001800
     c54:	0000563c 	.word	0x0000563c
     c58:	42001c00 	.word	0x42001c00

00000c5c <serial_write_wait_until_complete>:

bool serial_write_wait_until_complete(Serial_Port_IDs port) {
     c5c:	b510      	push	{r4, lr}
    switch (port) {
     c5e:	2804      	cmp	r0, #4
     c60:	d81b      	bhi.n	c9a <serial_write_wait_until_complete+0x3e>
     c62:	0080      	lsls	r0, r0, #2
     c64:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <serial_write_wait_until_complete+0x44>)
     c66:	581b      	ldr	r3, [r3, r0]
     c68:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_send_complete();
     c6a:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <serial_write_wait_until_complete+0x48>)
     c6c:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     c6e:	2001      	movs	r0, #1
}
     c70:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_send_complete(&uart1_descriptor);
     c72:	480d      	ldr	r0, [pc, #52]	; (ca8 <serial_write_wait_until_complete+0x4c>)
     c74:	4b0d      	ldr	r3, [pc, #52]	; (cac <serial_write_wait_until_complete+0x50>)
     c76:	4798      	blx	r3
    return true;
     c78:	2001      	movs	r0, #1
        break;
     c7a:	e7f9      	b.n	c70 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart2_descriptor);
     c7c:	480c      	ldr	r0, [pc, #48]	; (cb0 <serial_write_wait_until_complete+0x54>)
     c7e:	4b0b      	ldr	r3, [pc, #44]	; (cac <serial_write_wait_until_complete+0x50>)
     c80:	4798      	blx	r3
    return true;
     c82:	2001      	movs	r0, #1
        break;
     c84:	e7f4      	b.n	c70 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart3_descriptor);
     c86:	480b      	ldr	r0, [pc, #44]	; (cb4 <serial_write_wait_until_complete+0x58>)
     c88:	4b08      	ldr	r3, [pc, #32]	; (cac <serial_write_wait_until_complete+0x50>)
     c8a:	4798      	blx	r3
    return true;
     c8c:	2001      	movs	r0, #1
        break;
     c8e:	e7ef      	b.n	c70 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart4_descriptor);
     c90:	4809      	ldr	r0, [pc, #36]	; (cb8 <serial_write_wait_until_complete+0x5c>)
     c92:	4b06      	ldr	r3, [pc, #24]	; (cac <serial_write_wait_until_complete+0x50>)
     c94:	4798      	blx	r3
    return true;
     c96:	2001      	movs	r0, #1
        break;
     c98:	e7ea      	b.n	c70 <serial_write_wait_until_complete+0x14>
    switch (port) {
     c9a:	2000      	movs	r0, #0
     c9c:	e7e8      	b.n	c70 <serial_write_wait_until_complete+0x14>
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	000055d4 	.word	0x000055d4
     ca4:	00003fc9 	.word	0x00003fc9
     ca8:	00005624 	.word	0x00005624
     cac:	00003d91 	.word	0x00003d91
     cb0:	0000562c 	.word	0x0000562c
     cb4:	00005634 	.word	0x00005634
     cb8:	0000563c 	.word	0x0000563c

00000cbc <serial_read_start>:


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     cbc:	b570      	push	{r4, r5, r6, lr}
     cbe:	000e      	movs	r6, r1
     cc0:	0013      	movs	r3, r2
    switch (port) {
     cc2:	2804      	cmp	r0, #4
     cc4:	d825      	bhi.n	d12 <serial_read_start+0x56>
     cc6:	0080      	lsls	r0, r0, #2
     cc8:	4d13      	ldr	r5, [pc, #76]	; (d18 <serial_read_start+0x5c>)
     cca:	582c      	ldr	r4, [r5, r0]
     ccc:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_read_buffer(buffer, count);
     cce:	0011      	movs	r1, r2
     cd0:	0030      	movs	r0, r6
     cd2:	4b12      	ldr	r3, [pc, #72]	; (d1c <serial_read_start+0x60>)
     cd4:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     cd6:	2001      	movs	r0, #1
}
     cd8:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     cda:	4911      	ldr	r1, [pc, #68]	; (d20 <serial_read_start+0x64>)
     cdc:	0032      	movs	r2, r6
     cde:	4811      	ldr	r0, [pc, #68]	; (d24 <serial_read_start+0x68>)
     ce0:	4c11      	ldr	r4, [pc, #68]	; (d28 <serial_read_start+0x6c>)
     ce2:	47a0      	blx	r4
    return true;
     ce4:	2001      	movs	r0, #1
        break;
     ce6:	e7f7      	b.n	cd8 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     ce8:	4910      	ldr	r1, [pc, #64]	; (d2c <serial_read_start+0x70>)
     cea:	0032      	movs	r2, r6
     cec:	4810      	ldr	r0, [pc, #64]	; (d30 <serial_read_start+0x74>)
     cee:	4c0e      	ldr	r4, [pc, #56]	; (d28 <serial_read_start+0x6c>)
     cf0:	47a0      	blx	r4
    return true;
     cf2:	2001      	movs	r0, #1
        break;
     cf4:	e7f0      	b.n	cd8 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     cf6:	490f      	ldr	r1, [pc, #60]	; (d34 <serial_read_start+0x78>)
     cf8:	0032      	movs	r2, r6
     cfa:	480f      	ldr	r0, [pc, #60]	; (d38 <serial_read_start+0x7c>)
     cfc:	4c0a      	ldr	r4, [pc, #40]	; (d28 <serial_read_start+0x6c>)
     cfe:	47a0      	blx	r4
    return true;
     d00:	2001      	movs	r0, #1
        break;
     d02:	e7e9      	b.n	cd8 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     d04:	490d      	ldr	r1, [pc, #52]	; (d3c <serial_read_start+0x80>)
     d06:	0032      	movs	r2, r6
     d08:	480d      	ldr	r0, [pc, #52]	; (d40 <serial_read_start+0x84>)
     d0a:	4c07      	ldr	r4, [pc, #28]	; (d28 <serial_read_start+0x6c>)
     d0c:	47a0      	blx	r4
    return true;
     d0e:	2001      	movs	r0, #1
        break;
     d10:	e7e2      	b.n	cd8 <serial_read_start+0x1c>
    switch (port) {
     d12:	2000      	movs	r0, #0
     d14:	e7e0      	b.n	cd8 <serial_read_start+0x1c>
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	000055e8 	.word	0x000055e8
     d1c:	00003fe5 	.word	0x00003fe5
     d20:	00005624 	.word	0x00005624
     d24:	42000800 	.word	0x42000800
     d28:	00003da1 	.word	0x00003da1
     d2c:	0000562c 	.word	0x0000562c
     d30:	42000c00 	.word	0x42000c00
     d34:	00005634 	.word	0x00005634
     d38:	42001800 	.word	0x42001800
     d3c:	0000563c 	.word	0x0000563c
     d40:	42001c00 	.word	0x42001c00

00000d44 <serial_read_wait_until_complete>:

bool serial_read_wait_until_complete(Serial_Port_IDs port) {
     d44:	b510      	push	{r4, lr}
    switch (port) {
     d46:	2804      	cmp	r0, #4
     d48:	d81b      	bhi.n	d82 <serial_read_wait_until_complete+0x3e>
     d4a:	0080      	lsls	r0, r0, #2
     d4c:	4b0e      	ldr	r3, [pc, #56]	; (d88 <serial_read_wait_until_complete+0x44>)
     d4e:	581b      	ldr	r3, [r3, r0]
     d50:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete();
     d52:	4b0e      	ldr	r3, [pc, #56]	; (d8c <serial_read_wait_until_complete+0x48>)
     d54:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     d56:	2001      	movs	r0, #1
}
     d58:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete(&uart1_descriptor);
     d5a:	480d      	ldr	r0, [pc, #52]	; (d90 <serial_read_wait_until_complete+0x4c>)
     d5c:	4b0d      	ldr	r3, [pc, #52]	; (d94 <serial_read_wait_until_complete+0x50>)
     d5e:	4798      	blx	r3
    return true;
     d60:	2001      	movs	r0, #1
        break;
     d62:	e7f9      	b.n	d58 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart2_descriptor);
     d64:	480c      	ldr	r0, [pc, #48]	; (d98 <serial_read_wait_until_complete+0x54>)
     d66:	4b0b      	ldr	r3, [pc, #44]	; (d94 <serial_read_wait_until_complete+0x50>)
     d68:	4798      	blx	r3
    return true;
     d6a:	2001      	movs	r0, #1
        break;
     d6c:	e7f4      	b.n	d58 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart3_descriptor);
     d6e:	480b      	ldr	r0, [pc, #44]	; (d9c <serial_read_wait_until_complete+0x58>)
     d70:	4b08      	ldr	r3, [pc, #32]	; (d94 <serial_read_wait_until_complete+0x50>)
     d72:	4798      	blx	r3
    return true;
     d74:	2001      	movs	r0, #1
        break;
     d76:	e7ef      	b.n	d58 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart4_descriptor);
     d78:	4809      	ldr	r0, [pc, #36]	; (da0 <serial_read_wait_until_complete+0x5c>)
     d7a:	4b06      	ldr	r3, [pc, #24]	; (d94 <serial_read_wait_until_complete+0x50>)
     d7c:	4798      	blx	r3
    return true;
     d7e:	2001      	movs	r0, #1
        break;
     d80:	e7ea      	b.n	d58 <serial_read_wait_until_complete+0x14>
    switch (port) {
     d82:	2000      	movs	r0, #0
     d84:	e7e8      	b.n	d58 <serial_read_wait_until_complete+0x14>
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	000055fc 	.word	0x000055fc
     d8c:	0000401d 	.word	0x0000401d
     d90:	00005624 	.word	0x00005624
     d94:	00003e11 	.word	0x00003e11
     d98:	0000562c 	.word	0x0000562c
     d9c:	00005634 	.word	0x00005634
     da0:	0000563c 	.word	0x0000563c

00000da4 <serial_flush>:

bool serial_flush(Serial_Port_IDs port) {
     da4:	b510      	push	{r4, lr}
    switch (port) {
     da6:	2804      	cmp	r0, #4
     da8:	d803      	bhi.n	db2 <serial_flush+0xe>
     daa:	0080      	lsls	r0, r0, #2
     dac:	4b0d      	ldr	r3, [pc, #52]	; (de4 <serial_flush+0x40>)
     dae:	581b      	ldr	r3, [r3, r0]
     db0:	469f      	mov	pc, r3
     db2:	2000      	movs	r0, #0
     db4:	e014      	b.n	de0 <serial_flush+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_flush(UART1_SERCOM);
     db6:	480c      	ldr	r0, [pc, #48]	; (de8 <serial_flush+0x44>)
     db8:	4b0c      	ldr	r3, [pc, #48]	; (dec <serial_flush+0x48>)
     dba:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     dbc:	2001      	movs	r0, #1
        break;
     dbe:	e00f      	b.n	de0 <serial_flush+0x3c>
        uart_flush(UART2_SERCOM);
     dc0:	480b      	ldr	r0, [pc, #44]	; (df0 <serial_flush+0x4c>)
     dc2:	4b0a      	ldr	r3, [pc, #40]	; (dec <serial_flush+0x48>)
     dc4:	4798      	blx	r3
    return true;
     dc6:	2001      	movs	r0, #1
        break;
     dc8:	e00a      	b.n	de0 <serial_flush+0x3c>
        uart_flush(UART3_SERCOM);
     dca:	480a      	ldr	r0, [pc, #40]	; (df4 <serial_flush+0x50>)
     dcc:	4b07      	ldr	r3, [pc, #28]	; (dec <serial_flush+0x48>)
     dce:	4798      	blx	r3
    return true;
     dd0:	2001      	movs	r0, #1
        break;
     dd2:	e005      	b.n	de0 <serial_flush+0x3c>
        uart_flush(UART4_SERCOM);
     dd4:	4808      	ldr	r0, [pc, #32]	; (df8 <serial_flush+0x54>)
     dd6:	4b05      	ldr	r3, [pc, #20]	; (dec <serial_flush+0x48>)
     dd8:	4798      	blx	r3
    return true;
     dda:	2001      	movs	r0, #1
        break;
     ddc:	e000      	b.n	de0 <serial_flush+0x3c>
    return true;
     dde:	2001      	movs	r0, #1
     de0:	bd10      	pop	{r4, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	00005610 	.word	0x00005610
     de8:	42000800 	.word	0x42000800
     dec:	00002351 	.word	0x00002351
     df0:	42000c00 	.word	0x42000c00
     df4:	42001800 	.word	0x42001800
     df8:	42001c00 	.word	0x42001c00

00000dfc <buzzer>:

void shutdown() {
	serial_quit();
}

void buzzer() {
     dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dfe:	46ce      	mov	lr, r9
     e00:	4647      	mov	r7, r8
     e02:	b580      	push	{r7, lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     e04:	2106      	movs	r1, #6
     e06:	482a      	ldr	r0, [pc, #168]	; (eb0 <buzzer+0xb4>)
     e08:	4b2a      	ldr	r3, [pc, #168]	; (eb4 <buzzer+0xb8>)
     e0a:	4798      	blx	r3
     e0c:	2800      	cmp	r0, #0
     e0e:	d019      	beq.n	e44 <buzzer+0x48>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     e10:	4929      	ldr	r1, [pc, #164]	; (eb8 <buzzer+0xbc>)
     e12:	4827      	ldr	r0, [pc, #156]	; (eb0 <buzzer+0xb4>)
     e14:	4b29      	ldr	r3, [pc, #164]	; (ebc <buzzer+0xc0>)
     e16:	4798      	blx	r3
     e18:	2800      	cmp	r0, #0
     e1a:	d016      	beq.n	e4a <buzzer+0x4e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     e1c:	2200      	movs	r2, #0
     e1e:	2101      	movs	r1, #1
     e20:	4823      	ldr	r0, [pc, #140]	; (eb0 <buzzer+0xb4>)
     e22:	4b27      	ldr	r3, [pc, #156]	; (ec0 <buzzer+0xc4>)
     e24:	4798      	blx	r3
     e26:	2800      	cmp	r0, #0
     e28:	d012      	beq.n	e50 <buzzer+0x54>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     e2a:	4821      	ldr	r0, [pc, #132]	; (eb0 <buzzer+0xb4>)
     e2c:	4b25      	ldr	r3, [pc, #148]	; (ec4 <buzzer+0xc8>)
     e2e:	4798      	blx	r3
     e30:	2800      	cmp	r0, #0
     e32:	d010      	beq.n	e56 <buzzer+0x5a>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
     e34:	2280      	movs	r2, #128	; 0x80
     e36:	0412      	lsls	r2, r2, #16
     e38:	2104      	movs	r1, #4
     e3a:	2001      	movs	r0, #1
     e3c:	4b22      	ldr	r3, [pc, #136]	; (ec8 <buzzer+0xcc>)
     e3e:	4798      	blx	r3
	
	for (int i = 0; i < 2; ++i) {
     e40:	2500      	movs	r5, #0
     e42:	e02e      	b.n	ea2 <buzzer+0xa6>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
     e44:	4b21      	ldr	r3, [pc, #132]	; (ecc <buzzer+0xd0>)
     e46:	4798      	blx	r3
     e48:	e7e2      	b.n	e10 <buzzer+0x14>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
     e4a:	4b20      	ldr	r3, [pc, #128]	; (ecc <buzzer+0xd0>)
     e4c:	4798      	blx	r3
     e4e:	e7e5      	b.n	e1c <buzzer+0x20>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
     e50:	4b1e      	ldr	r3, [pc, #120]	; (ecc <buzzer+0xd0>)
     e52:	4798      	blx	r3
     e54:	e7e9      	b.n	e2a <buzzer+0x2e>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
     e56:	4b1d      	ldr	r3, [pc, #116]	; (ecc <buzzer+0xd0>)
     e58:	4798      	blx	r3
     e5a:	e7eb      	b.n	e34 <buzzer+0x38>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
     e5c:	4b14      	ldr	r3, [pc, #80]	; (eb0 <buzzer+0xb4>)
     e5e:	4698      	mov	r8, r3
     e60:	22fc      	movs	r2, #252	; 0xfc
     e62:	0592      	lsls	r2, r2, #22
     e64:	2101      	movs	r1, #1
     e66:	0018      	movs	r0, r3
     e68:	4f15      	ldr	r7, [pc, #84]	; (ec0 <buzzer+0xc4>)
     e6a:	47b8      	blx	r7
		led_on();
     e6c:	2680      	movs	r6, #128	; 0x80
     e6e:	03f6      	lsls	r6, r6, #15
     e70:	0031      	movs	r1, r6
     e72:	2001      	movs	r0, #1
     e74:	4b16      	ldr	r3, [pc, #88]	; (ed0 <buzzer+0xd4>)
     e76:	4798      	blx	r3
		rtos_delay_ms(75);
     e78:	4b16      	ldr	r3, [pc, #88]	; (ed4 <buzzer+0xd8>)
     e7a:	681a      	ldr	r2, [r3, #0]
     e7c:	0093      	lsls	r3, r2, #2
     e7e:	189b      	adds	r3, r3, r2
     e80:	011c      	lsls	r4, r3, #4
     e82:	1ae4      	subs	r4, r4, r3
     e84:	0020      	movs	r0, r4
     e86:	4b14      	ldr	r3, [pc, #80]	; (ed8 <buzzer+0xdc>)
     e88:	4699      	mov	r9, r3
     e8a:	4798      	blx	r3
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
     e8c:	2200      	movs	r2, #0
     e8e:	2101      	movs	r1, #1
     e90:	4640      	mov	r0, r8
     e92:	47b8      	blx	r7
		led_off();
     e94:	0031      	movs	r1, r6
     e96:	2001      	movs	r0, #1
     e98:	4b10      	ldr	r3, [pc, #64]	; (edc <buzzer+0xe0>)
     e9a:	4798      	blx	r3
		rtos_delay_ms(75);
     e9c:	0020      	movs	r0, r4
     e9e:	47c8      	blx	r9
	for (int i = 0; i < 2; ++i) {
     ea0:	3501      	adds	r5, #1
     ea2:	2d01      	cmp	r5, #1
     ea4:	ddda      	ble.n	e5c <buzzer+0x60>
	// 	led_on();
	// 	rtos_delay_ms(200);
	// 	led_off();
	// 	rtos_delay_ms(200);
	// }
     ea6:	bcc0      	pop	{r6, r7}
     ea8:	46b9      	mov	r9, r7
     eaa:	46b0      	mov	r8, r6
     eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	42003c00 	.word	0x42003c00
     eb4:	00001c39 	.word	0x00001c39
     eb8:	45309000 	.word	0x45309000
     ebc:	00001d9d 	.word	0x00001d9d
     ec0:	00001e29 	.word	0x00001e29
     ec4:	00001d0d 	.word	0x00001d0d
     ec8:	00001bed 	.word	0x00001bed
     ecc:	00002e15 	.word	0x00002e15
     ed0:	00001bcd 	.word	0x00001bcd
     ed4:	00005738 	.word	0x00005738
     ed8:	0000333d 	.word	0x0000333d
     edc:	00001bdd 	.word	0x00001bdd

00000ee0 <selftest>:
bool selftest() {
     ee0:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
     ee2:	4b0a      	ldr	r3, [pc, #40]	; (f0c <selftest+0x2c>)
     ee4:	4798      	blx	r3
     ee6:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
     ee8:	4809      	ldr	r0, [pc, #36]	; (f10 <selftest+0x30>)
     eea:	4b0a      	ldr	r3, [pc, #40]	; (f14 <selftest+0x34>)
     eec:	4798      	blx	r3
     eee:	1e05      	subs	r5, r0, #0
     ef0:	d000      	beq.n	ef4 <selftest+0x14>
     ef2:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
     ef4:	4b08      	ldr	r3, [pc, #32]	; (f18 <selftest+0x38>)
     ef6:	4798      	blx	r3
     ef8:	1e04      	subs	r4, r0, #0
     efa:	d000      	beq.n	efe <selftest+0x1e>
     efc:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
     efe:	4807      	ldr	r0, [pc, #28]	; (f1c <selftest+0x3c>)
     f00:	4b07      	ldr	r3, [pc, #28]	; (f20 <selftest+0x40>)
     f02:	4798      	blx	r3
     f04:	2800      	cmp	r0, #0
     f06:	d000      	beq.n	f0a <selftest+0x2a>
     f08:	0020      	movs	r0, r4
}
     f0a:	bd70      	pop	{r4, r5, r6, pc}
     f0c:	00000865 	.word	0x00000865
     f10:	20000310 	.word	0x20000310
     f14:	00001249 	.word	0x00001249
     f18:	00000775 	.word	0x00000775
     f1c:	2000032c 	.word	0x2000032c
     f20:	000016dd 	.word	0x000016dd

00000f24 <init>:
bool init() {
     f24:	b570      	push	{r4, r5, r6, lr}
     f26:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
     f28:	22c0      	movs	r2, #192	; 0xc0
     f2a:	0412      	lsls	r2, r2, #16
     f2c:	2102      	movs	r1, #2
     f2e:	2000      	movs	r0, #0
     f30:	4c35      	ldr	r4, [pc, #212]	; (1008 <init+0xe4>)
     f32:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
     f34:	2280      	movs	r2, #128	; 0x80
     f36:	0352      	lsls	r2, r2, #13
     f38:	2103      	movs	r1, #3
     f3a:	2000      	movs	r0, #0
     f3c:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
     f3e:	2480      	movs	r4, #128	; 0x80
     f40:	0564      	lsls	r4, r4, #21
     f42:	0021      	movs	r1, r4
     f44:	2000      	movs	r0, #0
     f46:	4e31      	ldr	r6, [pc, #196]	; (100c <init+0xe8>)
     f48:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
     f4a:	2580      	movs	r5, #128	; 0x80
     f4c:	062d      	lsls	r5, r5, #24
     f4e:	0029      	movs	r1, r5
     f50:	2001      	movs	r0, #1
     f52:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
     f54:	0021      	movs	r1, r4
     f56:	2000      	movs	r0, #0
     f58:	4c2d      	ldr	r4, [pc, #180]	; (1010 <init+0xec>)
     f5a:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
     f5c:	0029      	movs	r1, r5
     f5e:	2001      	movs	r0, #1
     f60:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     f62:	4b2c      	ldr	r3, [pc, #176]	; (1014 <init+0xf0>)
     f64:	9301      	str	r3, [sp, #4]
     f66:	2300      	movs	r3, #0
     f68:	9300      	str	r3, [sp, #0]
     f6a:	3302      	adds	r3, #2
     f6c:	2200      	movs	r2, #0
     f6e:	2100      	movs	r1, #0
     f70:	4829      	ldr	r0, [pc, #164]	; (1018 <init+0xf4>)
     f72:	4c2a      	ldr	r4, [pc, #168]	; (101c <init+0xf8>)
     f74:	47a0      	blx	r4
     f76:	2800      	cmp	r0, #0
     f78:	d039      	beq.n	fee <init+0xca>
	dma_init();
     f7a:	4b29      	ldr	r3, [pc, #164]	; (1020 <init+0xfc>)
     f7c:	4798      	blx	r3
	if (!serial_init()) SOS();
     f7e:	4b29      	ldr	r3, [pc, #164]	; (1024 <init+0x100>)
     f80:	4798      	blx	r3
     f82:	2800      	cmp	r0, #0
     f84:	d036      	beq.n	ff4 <init+0xd0>
	if (!imu_init()) SOS();
     f86:	4b28      	ldr	r3, [pc, #160]	; (1028 <init+0x104>)
     f88:	4798      	blx	r3
     f8a:	2800      	cmp	r0, #0
     f8c:	d035      	beq.n	ffa <init+0xd6>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
     f8e:	ab02      	add	r3, sp, #8
     f90:	2280      	movs	r2, #128	; 0x80
     f92:	0552      	lsls	r2, r2, #21
     f94:	9202      	str	r2, [sp, #8]
     f96:	2100      	movs	r1, #0
     f98:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
     f9a:	4824      	ldr	r0, [pc, #144]	; (102c <init+0x108>)
     f9c:	9b03      	ldr	r3, [sp, #12]
     f9e:	491e      	ldr	r1, [pc, #120]	; (1018 <init+0xf4>)
     fa0:	4c23      	ldr	r4, [pc, #140]	; (1030 <init+0x10c>)
     fa2:	47a0      	blx	r4
     fa4:	2800      	cmp	r0, #0
     fa6:	d02b      	beq.n	1000 <init+0xdc>
	init_eeprom();
     fa8:	4b22      	ldr	r3, [pc, #136]	; (1034 <init+0x110>)
     faa:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
     fac:	ab02      	add	r3, sp, #8
     fae:	4c22      	ldr	r4, [pc, #136]	; (1038 <init+0x114>)
     fb0:	6822      	ldr	r2, [r4, #0]
     fb2:	9202      	str	r2, [sp, #8]
     fb4:	7921      	ldrb	r1, [r4, #4]
     fb6:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
     fb8:	4d17      	ldr	r5, [pc, #92]	; (1018 <init+0xf4>)
     fba:	4820      	ldr	r0, [pc, #128]	; (103c <init+0x118>)
     fbc:	2107      	movs	r1, #7
     fbe:	9101      	str	r1, [sp, #4]
     fc0:	2180      	movs	r1, #128	; 0x80
     fc2:	03c9      	lsls	r1, r1, #15
     fc4:	9100      	str	r1, [sp, #0]
     fc6:	9b03      	ldr	r3, [sp, #12]
     fc8:	0029      	movs	r1, r5
     fca:	4e1d      	ldr	r6, [pc, #116]	; (1040 <init+0x11c>)
     fcc:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
     fce:	2280      	movs	r2, #128	; 0x80
     fd0:	2190      	movs	r1, #144	; 0x90
     fd2:	481c      	ldr	r0, [pc, #112]	; (1044 <init+0x120>)
     fd4:	3408      	adds	r4, #8
     fd6:	9400      	str	r4, [sp, #0]
     fd8:	002b      	movs	r3, r5
     fda:	0092      	lsls	r2, r2, #2
     fdc:	0109      	lsls	r1, r1, #4
     fde:	4c1a      	ldr	r4, [pc, #104]	; (1048 <init+0x124>)
     fe0:	47a0      	blx	r4
	init_globals();
     fe2:	4b1a      	ldr	r3, [pc, #104]	; (104c <init+0x128>)
     fe4:	4798      	blx	r3
	return selftest();
     fe6:	4b1a      	ldr	r3, [pc, #104]	; (1050 <init+0x12c>)
     fe8:	4798      	blx	r3
}
     fea:	b004      	add	sp, #16
     fec:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
     fee:	4b19      	ldr	r3, [pc, #100]	; (1054 <init+0x130>)
     ff0:	4798      	blx	r3
     ff2:	e7c2      	b.n	f7a <init+0x56>
	if (!serial_init()) SOS();
     ff4:	4b17      	ldr	r3, [pc, #92]	; (1054 <init+0x130>)
     ff6:	4798      	blx	r3
     ff8:	e7c5      	b.n	f86 <init+0x62>
	if (!imu_init()) SOS();
     ffa:	4b16      	ldr	r3, [pc, #88]	; (1054 <init+0x130>)
     ffc:	4798      	blx	r3
     ffe:	e7c6      	b.n	f8e <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    1000:	4b14      	ldr	r3, [pc, #80]	; (1054 <init+0x130>)
    1002:	4798      	blx	r3
    1004:	e7d0      	b.n	fa8 <init+0x84>
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	00001bed 	.word	0x00001bed
    100c:	00001bcd 	.word	0x00001bcd
    1010:	00001bbd 	.word	0x00001bbd
    1014:	005b8d80 	.word	0x005b8d80
    1018:	42001400 	.word	0x42001400
    101c:	00002051 	.word	0x00002051
    1020:	00001339 	.word	0x00001339
    1024:	00000b49 	.word	0x00000b49
    1028:	000007e5 	.word	0x000007e5
    102c:	20000310 	.word	0x20000310
    1030:	000012c5 	.word	0x000012c5
    1034:	00000721 	.word	0x00000721
    1038:	00005644 	.word	0x00005644
    103c:	2000032c 	.word	0x2000032c
    1040:	00001655 	.word	0x00001655
    1044:	200002b4 	.word	0x200002b4
    1048:	000035e1 	.word	0x000035e1
    104c:	00000699 	.word	0x00000699
    1050:	00000ee1 	.word	0x00000ee1
    1054:	00002e15 	.word	0x00002e15

00001058 <main>:
int main(void) {
    1058:	b530      	push	{r4, r5, lr}
    105a:	b083      	sub	sp, #12
	if (!init()) SOS();
    105c:	4b12      	ldr	r3, [pc, #72]	; (10a8 <main+0x50>)
    105e:	4798      	blx	r3
    1060:	2800      	cmp	r0, #0
    1062:	d01e      	beq.n	10a2 <main+0x4a>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
    1064:	2380      	movs	r3, #128	; 0x80
    1066:	2280      	movs	r2, #128	; 0x80
    1068:	4910      	ldr	r1, [pc, #64]	; (10ac <main+0x54>)
    106a:	4c11      	ldr	r4, [pc, #68]	; (10b0 <main+0x58>)
    106c:	005b      	lsls	r3, r3, #1
    106e:	0112      	lsls	r2, r2, #4
    1070:	0020      	movs	r0, r4
    1072:	4d10      	ldr	r5, [pc, #64]	; (10b4 <main+0x5c>)
    1074:	47a8      	blx	r5
	dispatch_process(&bz);
    1076:	0020      	movs	r0, r4
    1078:	4b0f      	ldr	r3, [pc, #60]	; (10b8 <main+0x60>)
    107a:	4798      	blx	r3
	start_navigation();
    107c:	4b0f      	ldr	r3, [pc, #60]	; (10bc <main+0x64>)
    107e:	4798      	blx	r3
	volatile fp32_t testvalue1 = FP32_FROM_MILLI(10);
    1080:	4b0f      	ldr	r3, [pc, #60]	; (10c0 <main+0x68>)
    1082:	9301      	str	r3, [sp, #4]
	volatile fp32_t testvalue2 = FP32_FROM_INT(14);
    1084:	23e0      	movs	r3, #224	; 0xe0
    1086:	031b      	lsls	r3, r3, #12
    1088:	9300      	str	r3, [sp, #0]
	testvalue1 = fp_multiply(testvalue1, testvalue2);
    108a:	9801      	ldr	r0, [sp, #4]
    108c:	9900      	ldr	r1, [sp, #0]
    108e:	4b0d      	ldr	r3, [pc, #52]	; (10c4 <main+0x6c>)
    1090:	4798      	blx	r3
    1092:	9001      	str	r0, [sp, #4]
	comms_loop();
    1094:	4b0c      	ldr	r3, [pc, #48]	; (10c8 <main+0x70>)
    1096:	4798      	blx	r3
		rtos_delay_ms(1);
    1098:	4b0c      	ldr	r3, [pc, #48]	; (10cc <main+0x74>)
    109a:	6818      	ldr	r0, [r3, #0]
    109c:	4b0c      	ldr	r3, [pc, #48]	; (10d0 <main+0x78>)
    109e:	4798      	blx	r3
	while (1) {
    10a0:	e7fa      	b.n	1098 <main+0x40>
	if (!init()) SOS();
    10a2:	4b0c      	ldr	r3, [pc, #48]	; (10d4 <main+0x7c>)
    10a4:	4798      	blx	r3
    10a6:	e7dd      	b.n	1064 <main+0xc>
    10a8:	00000f25 	.word	0x00000f25
    10ac:	00000dfd 	.word	0x00000dfd
    10b0:	20000260 	.word	0x20000260
    10b4:	00002ed5 	.word	0x00002ed5
    10b8:	00002fbd 	.word	0x00002fbd
    10bc:	000010fd 	.word	0x000010fd
    10c0:	0000028f 	.word	0x0000028f
    10c4:	000041e1 	.word	0x000041e1
    10c8:	00000539 	.word	0x00000539
    10cc:	00005738 	.word	0x00005738
    10d0:	0000333d 	.word	0x0000333d
    10d4:	00002e15 	.word	0x00002e15

000010d8 <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
    10d8:	b510      	push	{r4, lr}
	while (1) {
        // led_on();
		request_imu_data();
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <navigation+0x14>)
    10dc:	4798      	blx	r3
		wait_for_imu_data();
    10de:	4b04      	ldr	r3, [pc, #16]	; (10f0 <navigation+0x18>)
    10e0:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(1);
    10e2:	4b04      	ldr	r3, [pc, #16]	; (10f4 <navigation+0x1c>)
    10e4:	6818      	ldr	r0, [r3, #0]
    10e6:	4b04      	ldr	r3, [pc, #16]	; (10f8 <navigation+0x20>)
    10e8:	4798      	blx	r3
	while (1) {
    10ea:	e7f6      	b.n	10da <navigation+0x2>
    10ec:	000008a9 	.word	0x000008a9
    10f0:	000008e1 	.word	0x000008e1
    10f4:	00005738 	.word	0x00005738
    10f8:	0000333d 	.word	0x0000333d

000010fc <start_navigation>:
	}
}

void start_navigation() {
    10fc:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
    10fe:	23c0      	movs	r3, #192	; 0xc0
    1100:	22b0      	movs	r2, #176	; 0xb0
    1102:	4905      	ldr	r1, [pc, #20]	; (1118 <start_navigation+0x1c>)
    1104:	4c05      	ldr	r4, [pc, #20]	; (111c <start_navigation+0x20>)
    1106:	009b      	lsls	r3, r3, #2
    1108:	0112      	lsls	r2, r2, #4
    110a:	0020      	movs	r0, r4
    110c:	4d04      	ldr	r5, [pc, #16]	; (1120 <start_navigation+0x24>)
    110e:	47a8      	blx	r5
    dispatch_process(&navigation_process);
    1110:	0020      	movs	r0, r4
    1112:	4b04      	ldr	r3, [pc, #16]	; (1124 <start_navigation+0x28>)
    1114:	4798      	blx	r3
    1116:	bd70      	pop	{r4, r5, r6, pc}
    1118:	000010d9 	.word	0x000010d9
    111c:	20000288 	.word	0x20000288
    1120:	00002ed5 	.word	0x00002ed5
    1124:	00002fbd 	.word	0x00002fbd

00001128 <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
    1128:	b570      	push	{r4, r5, r6, lr}
    112a:	0004      	movs	r4, r0
    112c:	000e      	movs	r6, r1
    112e:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
    1130:	7d03      	ldrb	r3, [r0, #20]
    1132:	7d42      	ldrb	r2, [r0, #21]
    1134:	0212      	lsls	r2, r2, #8
    1136:	431a      	orrs	r2, r3
    1138:	7d83      	ldrb	r3, [r0, #22]
    113a:	041b      	lsls	r3, r3, #16
    113c:	4313      	orrs	r3, r2
    113e:	7dc1      	ldrb	r1, [r0, #23]
    1140:	0609      	lsls	r1, r1, #24
    1142:	4319      	orrs	r1, r3
    1144:	7e00      	ldrb	r0, [r0, #24]
    1146:	4b11      	ldr	r3, [pc, #68]	; (118c <baro_send_command+0x64>)
    1148:	4798      	blx	r3
	spi_command(desc->sercom, command);
    114a:	7c23      	ldrb	r3, [r4, #16]
    114c:	7c62      	ldrb	r2, [r4, #17]
    114e:	0212      	lsls	r2, r2, #8
    1150:	431a      	orrs	r2, r3
    1152:	7ca3      	ldrb	r3, [r4, #18]
    1154:	041b      	lsls	r3, r3, #16
    1156:	4313      	orrs	r3, r2
    1158:	7ce0      	ldrb	r0, [r4, #19]
    115a:	0600      	lsls	r0, r0, #24
    115c:	4318      	orrs	r0, r3
    115e:	0031      	movs	r1, r6
    1160:	4b0b      	ldr	r3, [pc, #44]	; (1190 <baro_send_command+0x68>)
    1162:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1164:	7d23      	ldrb	r3, [r4, #20]
    1166:	7d62      	ldrb	r2, [r4, #21]
    1168:	0212      	lsls	r2, r2, #8
    116a:	431a      	orrs	r2, r3
    116c:	7da3      	ldrb	r3, [r4, #22]
    116e:	041b      	lsls	r3, r3, #16
    1170:	4313      	orrs	r3, r2
    1172:	7de1      	ldrb	r1, [r4, #23]
    1174:	0609      	lsls	r1, r1, #24
    1176:	4319      	orrs	r1, r3
    1178:	7e20      	ldrb	r0, [r4, #24]
    117a:	4b06      	ldr	r3, [pc, #24]	; (1194 <baro_send_command+0x6c>)
    117c:	4798      	blx	r3
	delay_us(delay);
    117e:	0068      	lsls	r0, r5, #1
    1180:	1940      	adds	r0, r0, r5
    1182:	0040      	lsls	r0, r0, #1
    1184:	4b04      	ldr	r3, [pc, #16]	; (1198 <baro_send_command+0x70>)
    1186:	4798      	blx	r3
}
    1188:	bd70      	pop	{r4, r5, r6, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00001bdd 	.word	0x00001bdd
    1190:	000020b9 	.word	0x000020b9
    1194:	00001bcd 	.word	0x00001bcd
    1198:	0000219d 	.word	0x0000219d

0000119c <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
    119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    119e:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    11a0:	26a0      	movs	r6, #160	; 0xa0
    11a2:	e047      	b.n	1234 <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
    11a4:	7d23      	ldrb	r3, [r4, #20]
    11a6:	7d62      	ldrb	r2, [r4, #21]
    11a8:	0212      	lsls	r2, r2, #8
    11aa:	431a      	orrs	r2, r3
    11ac:	7da3      	ldrb	r3, [r4, #22]
    11ae:	041b      	lsls	r3, r3, #16
    11b0:	4313      	orrs	r3, r2
    11b2:	7de1      	ldrb	r1, [r4, #23]
    11b4:	0609      	lsls	r1, r1, #24
    11b6:	4319      	orrs	r1, r3
    11b8:	7e20      	ldrb	r0, [r4, #24]
    11ba:	4b20      	ldr	r3, [pc, #128]	; (123c <baro_read_prom+0xa0>)
    11bc:	4798      	blx	r3
		spi_command(desc->sercom, addr);
    11be:	7c23      	ldrb	r3, [r4, #16]
    11c0:	7c62      	ldrb	r2, [r4, #17]
    11c2:	0212      	lsls	r2, r2, #8
    11c4:	431a      	orrs	r2, r3
    11c6:	7ca3      	ldrb	r3, [r4, #18]
    11c8:	041b      	lsls	r3, r3, #16
    11ca:	4313      	orrs	r3, r2
    11cc:	7ce0      	ldrb	r0, [r4, #19]
    11ce:	0600      	lsls	r0, r0, #24
    11d0:	4318      	orrs	r0, r3
    11d2:	0031      	movs	r1, r6
    11d4:	4f1a      	ldr	r7, [pc, #104]	; (1240 <baro_read_prom+0xa4>)
    11d6:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
    11d8:	7c23      	ldrb	r3, [r4, #16]
    11da:	7c62      	ldrb	r2, [r4, #17]
    11dc:	0212      	lsls	r2, r2, #8
    11de:	431a      	orrs	r2, r3
    11e0:	7ca3      	ldrb	r3, [r4, #18]
    11e2:	041b      	lsls	r3, r3, #16
    11e4:	4313      	orrs	r3, r2
    11e6:	7ce0      	ldrb	r0, [r4, #19]
    11e8:	0600      	lsls	r0, r0, #24
    11ea:	4318      	orrs	r0, r3
    11ec:	2100      	movs	r1, #0
    11ee:	47b8      	blx	r7
    11f0:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
    11f2:	7c23      	ldrb	r3, [r4, #16]
    11f4:	7c62      	ldrb	r2, [r4, #17]
    11f6:	0212      	lsls	r2, r2, #8
    11f8:	431a      	orrs	r2, r3
    11fa:	7ca3      	ldrb	r3, [r4, #18]
    11fc:	041b      	lsls	r3, r3, #16
    11fe:	4313      	orrs	r3, r2
    1200:	7ce0      	ldrb	r0, [r4, #19]
    1202:	0600      	lsls	r0, r0, #24
    1204:	4318      	orrs	r0, r3
    1206:	2100      	movs	r1, #0
    1208:	47b8      	blx	r7
    120a:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
    120c:	7d23      	ldrb	r3, [r4, #20]
    120e:	7d62      	ldrb	r2, [r4, #21]
    1210:	0212      	lsls	r2, r2, #8
    1212:	431a      	orrs	r2, r3
    1214:	7da3      	ldrb	r3, [r4, #22]
    1216:	041b      	lsls	r3, r3, #16
    1218:	4313      	orrs	r3, r2
    121a:	7de1      	ldrb	r1, [r4, #23]
    121c:	0609      	lsls	r1, r1, #24
    121e:	4319      	orrs	r1, r3
    1220:	7e20      	ldrb	r0, [r4, #24]
    1222:	4b08      	ldr	r3, [pc, #32]	; (1244 <baro_read_prom+0xa8>)
    1224:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
    1226:	0033      	movs	r3, r6
    1228:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
    122a:	022d      	lsls	r5, r5, #8
    122c:	433d      	orrs	r5, r7
    122e:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    1230:	3602      	adds	r6, #2
    1232:	b2f6      	uxtb	r6, r6
    1234:	2eae      	cmp	r6, #174	; 0xae
    1236:	d9b5      	bls.n	11a4 <baro_read_prom+0x8>
}
    1238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	00001bdd 	.word	0x00001bdd
    1240:	000020b9 	.word	0x000020b9
    1244:	00001bcd 	.word	0x00001bcd

00001248 <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
    1248:	b530      	push	{r4, r5, lr}
    124a:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
    124c:	7b83      	ldrb	r3, [r0, #14]
    124e:	7bc5      	ldrb	r5, [r0, #15]
    1250:	022d      	lsls	r5, r5, #8
    1252:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
    1254:	23ff      	movs	r3, #255	; 0xff
    1256:	002a      	movs	r2, r5
    1258:	439a      	bics	r2, r3
    125a:	0013      	movs	r3, r2
    125c:	2200      	movs	r2, #0
    125e:	7382      	strb	r2, [r0, #14]
    1260:	0a1b      	lsrs	r3, r3, #8
    1262:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
    1264:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
    1266:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
    1268:	e014      	b.n	1294 <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    126a:	1042      	asrs	r2, r0, #1
    126c:	0052      	lsls	r2, r2, #1
    126e:	5aa2      	ldrh	r2, [r4, r2]
    1270:	0a12      	lsrs	r2, r2, #8
    1272:	e018      	b.n	12a6 <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1274:	005b      	lsls	r3, r3, #1
    1276:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
    1278:	3201      	adds	r2, #1
    127a:	2a07      	cmp	r2, #7
    127c:	dc09      	bgt.n	1292 <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    127e:	b219      	sxth	r1, r3
    1280:	2900      	cmp	r1, #0
    1282:	daf7      	bge.n	1274 <baro_check+0x2c>
    1284:	0059      	lsls	r1, r3, #1
    1286:	23c0      	movs	r3, #192	; 0xc0
    1288:	019b      	lsls	r3, r3, #6
    128a:	404b      	eors	r3, r1
    128c:	b21b      	sxth	r3, r3
    128e:	b29b      	uxth	r3, r3
    1290:	e7f2      	b.n	1278 <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
    1292:	3001      	adds	r0, #1
    1294:	280f      	cmp	r0, #15
    1296:	dc09      	bgt.n	12ac <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    1298:	07c2      	lsls	r2, r0, #31
    129a:	d5e6      	bpl.n	126a <baro_check+0x22>
    129c:	1042      	asrs	r2, r0, #1
    129e:	0052      	lsls	r2, r2, #1
    12a0:	5aa1      	ldrh	r1, [r4, r2]
    12a2:	22ff      	movs	r2, #255	; 0xff
    12a4:	400a      	ands	r2, r1
		n_rem ^= byte;
    12a6:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
    12a8:	2200      	movs	r2, #0
    12aa:	e7e6      	b.n	127a <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
    12ac:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
    12ae:	73a5      	strb	r5, [r4, #14]
    12b0:	0a2a      	lsrs	r2, r5, #8
    12b2:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
    12b4:	200f      	movs	r0, #15
    12b6:	4028      	ands	r0, r5
    12b8:	1ac0      	subs	r0, r0, r3
    12ba:	4243      	negs	r3, r0
    12bc:	4158      	adcs	r0, r3
    12be:	b2c0      	uxtb	r0, r0
}
    12c0:	bd30      	pop	{r4, r5, pc}
	...

000012c4 <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    12c4:	b570      	push	{r4, r5, r6, lr}
    12c6:	b082      	sub	sp, #8
    12c8:	0005      	movs	r5, r0
    12ca:	000c      	movs	r4, r1
    12cc:	9200      	str	r2, [sp, #0]
    12ce:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    12d0:	0008      	movs	r0, r1
    12d2:	4b0e      	ldr	r3, [pc, #56]	; (130c <baro_init+0x48>)
    12d4:	4798      	blx	r3
    12d6:	1e06      	subs	r6, r0, #0
    12d8:	d102      	bne.n	12e0 <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
    12da:	0030      	movs	r0, r6
    12dc:	b002      	add	sp, #8
    12de:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
    12e0:	742c      	strb	r4, [r5, #16]
    12e2:	0a23      	lsrs	r3, r4, #8
    12e4:	746b      	strb	r3, [r5, #17]
    12e6:	0c23      	lsrs	r3, r4, #16
    12e8:	74ab      	strb	r3, [r5, #18]
    12ea:	0e24      	lsrs	r4, r4, #24
    12ec:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
    12ee:	0028      	movs	r0, r5
    12f0:	3014      	adds	r0, #20
    12f2:	2205      	movs	r2, #5
    12f4:	4669      	mov	r1, sp
    12f6:	4b06      	ldr	r3, [pc, #24]	; (1310 <baro_init+0x4c>)
    12f8:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
    12fa:	4a06      	ldr	r2, [pc, #24]	; (1314 <baro_init+0x50>)
    12fc:	211e      	movs	r1, #30
    12fe:	0028      	movs	r0, r5
    1300:	4b05      	ldr	r3, [pc, #20]	; (1318 <baro_init+0x54>)
    1302:	4798      	blx	r3
	baro_read_prom(desc);
    1304:	0028      	movs	r0, r5
    1306:	4b05      	ldr	r3, [pc, #20]	; (131c <baro_init+0x58>)
    1308:	4798      	blx	r3
	return true;
    130a:	e7e6      	b.n	12da <baro_init+0x16>
    130c:	00001ec9 	.word	0x00001ec9
    1310:	000051f9 	.word	0x000051f9
    1314:	00000bb8 	.word	0x00000bb8
    1318:	00001129 	.word	0x00001129
    131c:	0000119d 	.word	0x0000119d

00001320 <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
    1320:	280b      	cmp	r0, #11
    1322:	d804      	bhi.n	132e <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
    1324:	4a03      	ldr	r2, [pc, #12]	; (1334 <dma_set_channel+0x14>)
    1326:	233f      	movs	r3, #63	; 0x3f
    1328:	54d0      	strb	r0, [r2, r3]
		return true;
    132a:	2001      	movs	r0, #1
	}
	else return false;
}
    132c:	4770      	bx	lr
	else return false;
    132e:	2000      	movs	r0, #0
    1330:	e7fc      	b.n	132c <dma_set_channel+0xc>
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	41004800 	.word	0x41004800

00001338 <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
    1338:	4b07      	ldr	r3, [pc, #28]	; (1358 <dma_init+0x20>)
    133a:	695a      	ldr	r2, [r3, #20]
    133c:	2120      	movs	r1, #32
    133e:	430a      	orrs	r2, r1
    1340:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
    1342:	69da      	ldr	r2, [r3, #28]
    1344:	430a      	orrs	r2, r1
    1346:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
    1348:	4a04      	ldr	r2, [pc, #16]	; (135c <dma_init+0x24>)
    134a:	4b05      	ldr	r3, [pc, #20]	; (1360 <dma_init+0x28>)
    134c:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
    134e:	4a05      	ldr	r2, [pc, #20]	; (1364 <dma_init+0x2c>)
    1350:	639a      	str	r2, [r3, #56]	; 0x38
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
    1352:	4a05      	ldr	r2, [pc, #20]	; (1368 <dma_init+0x30>)
    1354:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
    1356:	4770      	bx	lr
    1358:	40000400 	.word	0x40000400
    135c:	200003e0 	.word	0x200003e0
    1360:	41004800 	.word	0x41004800
    1364:	20000340 	.word	0x20000340
    1368:	00000f02 	.word	0x00000f02

0000136c <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
    136c:	b5f0      	push	{r4, r5, r6, r7, lr}
    136e:	ac05      	add	r4, sp, #20
    1370:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
    1372:	2b02      	cmp	r3, #2
    1374:	d82d      	bhi.n	13d2 <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1376:	2900      	cmp	r1, #0
    1378:	d023      	beq.n	13c2 <dma_create_descriptor+0x56>
    137a:	2480      	movs	r4, #128	; 0x80
    137c:	00e4      	lsls	r4, r4, #3
    137e:	2a00      	cmp	r2, #0
    1380:	d021      	beq.n	13c6 <dma_create_descriptor+0x5a>
    1382:	2580      	movs	r5, #128	; 0x80
    1384:	012d      	lsls	r5, r5, #4
    1386:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
    1388:	021d      	lsls	r5, r3, #8
    138a:	27c0      	movs	r7, #192	; 0xc0
    138c:	00bf      	lsls	r7, r7, #2
    138e:	403d      	ands	r5, r7
    1390:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
    1392:	2501      	movs	r5, #1
    1394:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
    1396:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
    1398:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    139a:	2900      	cmp	r1, #0
    139c:	d015      	beq.n	13ca <dma_create_descriptor+0x5e>
    139e:	1c59      	adds	r1, r3, #1
    13a0:	4371      	muls	r1, r6
    13a2:	9c06      	ldr	r4, [sp, #24]
    13a4:	46a4      	mov	ip, r4
    13a6:	4461      	add	r1, ip
    13a8:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    13aa:	2a00      	cmp	r2, #0
    13ac:	d00f      	beq.n	13ce <dma_create_descriptor+0x62>
    13ae:	3301      	adds	r3, #1
    13b0:	4373      	muls	r3, r6
    13b2:	9a07      	ldr	r2, [sp, #28]
    13b4:	4694      	mov	ip, r2
    13b6:	4463      	add	r3, ip
    13b8:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
    13ba:	9b08      	ldr	r3, [sp, #32]
    13bc:	60c3      	str	r3, [r0, #12]
	
	return true;
    13be:	2001      	movs	r0, #1
}
    13c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    13c2:	2400      	movs	r4, #0
    13c4:	e7db      	b.n	137e <dma_create_descriptor+0x12>
    13c6:	2500      	movs	r5, #0
    13c8:	e7dd      	b.n	1386 <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    13ca:	9906      	ldr	r1, [sp, #24]
    13cc:	e7ec      	b.n	13a8 <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    13ce:	9b07      	ldr	r3, [sp, #28]
    13d0:	e7f2      	b.n	13b8 <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
    13d2:	2000      	movs	r0, #0
    13d4:	e7f4      	b.n	13c0 <dma_create_descriptor+0x54>
	...

000013d8 <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
    13d8:	b570      	push	{r4, r5, r6, lr}
    13da:	000c      	movs	r4, r1
    13dc:	0015      	movs	r5, r2
    13de:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
    13e0:	4b0e      	ldr	r3, [pc, #56]	; (141c <dma_init_channel+0x44>)
    13e2:	4798      	blx	r3
    13e4:	2800      	cmp	r0, #0
    13e6:	d012      	beq.n	140e <dma_init_channel+0x36>
	if (priority > 3) return false;
    13e8:	2e03      	cmp	r6, #3
    13ea:	d811      	bhi.n	1410 <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
    13ec:	2c03      	cmp	r4, #3
    13ee:	d811      	bhi.n	1414 <dma_init_channel+0x3c>
    13f0:	2c01      	cmp	r4, #1
    13f2:	d011      	beq.n	1418 <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    13f4:	05a4      	lsls	r4, r4, #22
    13f6:	23c0      	movs	r3, #192	; 0xc0
    13f8:	041b      	lsls	r3, r3, #16
    13fa:	401c      	ands	r4, r3
    13fc:	022d      	lsls	r5, r5, #8
    13fe:	23fc      	movs	r3, #252	; 0xfc
    1400:	019b      	lsls	r3, r3, #6
    1402:	401d      	ands	r5, r3
    1404:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
    1406:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1408:	4334      	orrs	r4, r6
    140a:	4a05      	ldr	r2, [pc, #20]	; (1420 <dma_init_channel+0x48>)
    140c:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
    140e:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
    1410:	2000      	movs	r0, #0
    1412:	e7fc      	b.n	140e <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
    1414:	2000      	movs	r0, #0
    1416:	e7fa      	b.n	140e <dma_init_channel+0x36>
    1418:	2000      	movs	r0, #0
    141a:	e7f8      	b.n	140e <dma_init_channel+0x36>
    141c:	00001321 	.word	0x00001321
    1420:	41004800 	.word	0x41004800

00001424 <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
    1424:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    1426:	4b07      	ldr	r3, [pc, #28]	; (1444 <dma_enable_channel+0x20>)
    1428:	4798      	blx	r3
    142a:	2800      	cmp	r0, #0
    142c:	d009      	beq.n	1442 <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
    142e:	4a06      	ldr	r2, [pc, #24]	; (1448 <dma_enable_channel+0x24>)
    1430:	234e      	movs	r3, #78	; 0x4e
    1432:	2102      	movs	r1, #2
    1434:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
    1436:	313e      	adds	r1, #62	; 0x3e
    1438:	5c53      	ldrb	r3, [r2, r1]
    143a:	2402      	movs	r4, #2
    143c:	4323      	orrs	r3, r4
    143e:	b2db      	uxtb	r3, r3
    1440:	5453      	strb	r3, [r2, r1]
	return true;
}
    1442:	bd10      	pop	{r4, pc}
    1444:	00001321 	.word	0x00001321
    1448:	41004800 	.word	0x41004800

0000144c <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
    144c:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <dma_disable_channel+0x18>)
    1450:	4798      	blx	r3
    1452:	2800      	cmp	r0, #0
    1454:	d005      	beq.n	1462 <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
    1456:	4904      	ldr	r1, [pc, #16]	; (1468 <dma_disable_channel+0x1c>)
    1458:	2240      	movs	r2, #64	; 0x40
    145a:	5c8b      	ldrb	r3, [r1, r2]
    145c:	2402      	movs	r4, #2
    145e:	43a3      	bics	r3, r4
    1460:	548b      	strb	r3, [r1, r2]
	return true;
}
    1462:	bd10      	pop	{r4, pc}
    1464:	00001321 	.word	0x00001321
    1468:	41004800 	.word	0x41004800

0000146c <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
    146c:	b530      	push	{r4, r5, lr}
    146e:	b083      	sub	sp, #12
    1470:	0004      	movs	r4, r0
    1472:	9200      	str	r2, [sp, #0]
    1474:	9301      	str	r3, [sp, #4]
    1476:	ab06      	add	r3, sp, #24
    1478:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
    147a:	7001      	strb	r1, [r0, #0]
    147c:	0a0b      	lsrs	r3, r1, #8
    147e:	7043      	strb	r3, [r0, #1]
    1480:	0c0b      	lsrs	r3, r1, #16
    1482:	7083      	strb	r3, [r0, #2]
    1484:	0e09      	lsrs	r1, r1, #24
    1486:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1488:	3004      	adds	r0, #4
    148a:	2205      	movs	r2, #5
    148c:	4669      	mov	r1, sp
    148e:	4b10      	ldr	r3, [pc, #64]	; (14d0 <eeprom_init+0x64>)
    1490:	4798      	blx	r3
	desc->size = size;
    1492:	7265      	strb	r5, [r4, #9]
    1494:	0a2d      	lsrs	r5, r5, #8
    1496:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1498:	7923      	ldrb	r3, [r4, #4]
    149a:	7962      	ldrb	r2, [r4, #5]
    149c:	0212      	lsls	r2, r2, #8
    149e:	431a      	orrs	r2, r3
    14a0:	79a3      	ldrb	r3, [r4, #6]
    14a2:	041b      	lsls	r3, r3, #16
    14a4:	4313      	orrs	r3, r2
    14a6:	79e1      	ldrb	r1, [r4, #7]
    14a8:	0609      	lsls	r1, r1, #24
    14aa:	4319      	orrs	r1, r3
    14ac:	7a20      	ldrb	r0, [r4, #8]
    14ae:	4b09      	ldr	r3, [pc, #36]	; (14d4 <eeprom_init+0x68>)
    14b0:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    14b2:	7923      	ldrb	r3, [r4, #4]
    14b4:	7962      	ldrb	r2, [r4, #5]
    14b6:	0212      	lsls	r2, r2, #8
    14b8:	431a      	orrs	r2, r3
    14ba:	79a3      	ldrb	r3, [r4, #6]
    14bc:	041b      	lsls	r3, r3, #16
    14be:	4313      	orrs	r3, r2
    14c0:	79e1      	ldrb	r1, [r4, #7]
    14c2:	0609      	lsls	r1, r1, #24
    14c4:	4319      	orrs	r1, r3
    14c6:	7a20      	ldrb	r0, [r4, #8]
    14c8:	4b03      	ldr	r3, [pc, #12]	; (14d8 <eeprom_init+0x6c>)
    14ca:	4798      	blx	r3
}
    14cc:	b003      	add	sp, #12
    14ce:	bd30      	pop	{r4, r5, pc}
    14d0:	000051f9 	.word	0x000051f9
    14d4:	00001bbd 	.word	0x00001bbd
    14d8:	00001bcd 	.word	0x00001bcd

000014dc <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
    14dc:	b510      	push	{r4, lr}
    14de:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    14e0:	7903      	ldrb	r3, [r0, #4]
    14e2:	7942      	ldrb	r2, [r0, #5]
    14e4:	0212      	lsls	r2, r2, #8
    14e6:	431a      	orrs	r2, r3
    14e8:	7983      	ldrb	r3, [r0, #6]
    14ea:	041b      	lsls	r3, r3, #16
    14ec:	4313      	orrs	r3, r2
    14ee:	79c1      	ldrb	r1, [r0, #7]
    14f0:	0609      	lsls	r1, r1, #24
    14f2:	4319      	orrs	r1, r3
    14f4:	7a00      	ldrb	r0, [r0, #8]
    14f6:	4b0e      	ldr	r3, [pc, #56]	; (1530 <eeprom_write_enable+0x54>)
    14f8:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
    14fa:	7823      	ldrb	r3, [r4, #0]
    14fc:	7862      	ldrb	r2, [r4, #1]
    14fe:	0212      	lsls	r2, r2, #8
    1500:	431a      	orrs	r2, r3
    1502:	78a3      	ldrb	r3, [r4, #2]
    1504:	041b      	lsls	r3, r3, #16
    1506:	4313      	orrs	r3, r2
    1508:	78e0      	ldrb	r0, [r4, #3]
    150a:	0600      	lsls	r0, r0, #24
    150c:	4318      	orrs	r0, r3
    150e:	2106      	movs	r1, #6
    1510:	4b08      	ldr	r3, [pc, #32]	; (1534 <eeprom_write_enable+0x58>)
    1512:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1514:	7923      	ldrb	r3, [r4, #4]
    1516:	7962      	ldrb	r2, [r4, #5]
    1518:	0212      	lsls	r2, r2, #8
    151a:	431a      	orrs	r2, r3
    151c:	79a3      	ldrb	r3, [r4, #6]
    151e:	041b      	lsls	r3, r3, #16
    1520:	4313      	orrs	r3, r2
    1522:	79e1      	ldrb	r1, [r4, #7]
    1524:	0609      	lsls	r1, r1, #24
    1526:	4319      	orrs	r1, r3
    1528:	7a20      	ldrb	r0, [r4, #8]
    152a:	4b03      	ldr	r3, [pc, #12]	; (1538 <eeprom_write_enable+0x5c>)
    152c:	4798      	blx	r3
}
    152e:	bd10      	pop	{r4, pc}
    1530:	00001bdd 	.word	0x00001bdd
    1534:	000020b9 	.word	0x000020b9
    1538:	00001bcd 	.word	0x00001bcd

0000153c <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
    153c:	b510      	push	{r4, lr}
    153e:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1540:	7903      	ldrb	r3, [r0, #4]
    1542:	7942      	ldrb	r2, [r0, #5]
    1544:	0212      	lsls	r2, r2, #8
    1546:	431a      	orrs	r2, r3
    1548:	7983      	ldrb	r3, [r0, #6]
    154a:	041b      	lsls	r3, r3, #16
    154c:	4313      	orrs	r3, r2
    154e:	79c1      	ldrb	r1, [r0, #7]
    1550:	0609      	lsls	r1, r1, #24
    1552:	4319      	orrs	r1, r3
    1554:	7a00      	ldrb	r0, [r0, #8]
    1556:	4b0e      	ldr	r3, [pc, #56]	; (1590 <eeprom_write_disable+0x54>)
    1558:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
    155a:	7823      	ldrb	r3, [r4, #0]
    155c:	7862      	ldrb	r2, [r4, #1]
    155e:	0212      	lsls	r2, r2, #8
    1560:	431a      	orrs	r2, r3
    1562:	78a3      	ldrb	r3, [r4, #2]
    1564:	041b      	lsls	r3, r3, #16
    1566:	4313      	orrs	r3, r2
    1568:	78e0      	ldrb	r0, [r4, #3]
    156a:	0600      	lsls	r0, r0, #24
    156c:	4318      	orrs	r0, r3
    156e:	2104      	movs	r1, #4
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <eeprom_write_disable+0x58>)
    1572:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1574:	7923      	ldrb	r3, [r4, #4]
    1576:	7962      	ldrb	r2, [r4, #5]
    1578:	0212      	lsls	r2, r2, #8
    157a:	431a      	orrs	r2, r3
    157c:	79a3      	ldrb	r3, [r4, #6]
    157e:	041b      	lsls	r3, r3, #16
    1580:	4313      	orrs	r3, r2
    1582:	79e1      	ldrb	r1, [r4, #7]
    1584:	0609      	lsls	r1, r1, #24
    1586:	4319      	orrs	r1, r3
    1588:	7a20      	ldrb	r0, [r4, #8]
    158a:	4b03      	ldr	r3, [pc, #12]	; (1598 <eeprom_write_disable+0x5c>)
    158c:	4798      	blx	r3
}
    158e:	bd10      	pop	{r4, pc}
    1590:	00001bdd 	.word	0x00001bdd
    1594:	000020b9 	.word	0x000020b9
    1598:	00001bcd 	.word	0x00001bcd

0000159c <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
    159c:	b570      	push	{r4, r5, r6, lr}
    159e:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    15a0:	7903      	ldrb	r3, [r0, #4]
    15a2:	7942      	ldrb	r2, [r0, #5]
    15a4:	0212      	lsls	r2, r2, #8
    15a6:	431a      	orrs	r2, r3
    15a8:	7983      	ldrb	r3, [r0, #6]
    15aa:	041b      	lsls	r3, r3, #16
    15ac:	4313      	orrs	r3, r2
    15ae:	79c1      	ldrb	r1, [r0, #7]
    15b0:	0609      	lsls	r1, r1, #24
    15b2:	4319      	orrs	r1, r3
    15b4:	7a00      	ldrb	r0, [r0, #8]
    15b6:	4b15      	ldr	r3, [pc, #84]	; (160c <eeprom_read_status+0x70>)
    15b8:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
    15ba:	7823      	ldrb	r3, [r4, #0]
    15bc:	7862      	ldrb	r2, [r4, #1]
    15be:	0212      	lsls	r2, r2, #8
    15c0:	431a      	orrs	r2, r3
    15c2:	78a3      	ldrb	r3, [r4, #2]
    15c4:	041b      	lsls	r3, r3, #16
    15c6:	4313      	orrs	r3, r2
    15c8:	78e0      	ldrb	r0, [r4, #3]
    15ca:	0600      	lsls	r0, r0, #24
    15cc:	4318      	orrs	r0, r3
    15ce:	2105      	movs	r1, #5
    15d0:	4d0f      	ldr	r5, [pc, #60]	; (1610 <eeprom_read_status+0x74>)
    15d2:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
    15d4:	7823      	ldrb	r3, [r4, #0]
    15d6:	7862      	ldrb	r2, [r4, #1]
    15d8:	0212      	lsls	r2, r2, #8
    15da:	431a      	orrs	r2, r3
    15dc:	78a3      	ldrb	r3, [r4, #2]
    15de:	041b      	lsls	r3, r3, #16
    15e0:	4313      	orrs	r3, r2
    15e2:	78e0      	ldrb	r0, [r4, #3]
    15e4:	0600      	lsls	r0, r0, #24
    15e6:	4318      	orrs	r0, r3
    15e8:	2100      	movs	r1, #0
    15ea:	47a8      	blx	r5
    15ec:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
    15ee:	7923      	ldrb	r3, [r4, #4]
    15f0:	7962      	ldrb	r2, [r4, #5]
    15f2:	0212      	lsls	r2, r2, #8
    15f4:	431a      	orrs	r2, r3
    15f6:	79a3      	ldrb	r3, [r4, #6]
    15f8:	041b      	lsls	r3, r3, #16
    15fa:	4313      	orrs	r3, r2
    15fc:	79e1      	ldrb	r1, [r4, #7]
    15fe:	0609      	lsls	r1, r1, #24
    1600:	4319      	orrs	r1, r3
    1602:	7a20      	ldrb	r0, [r4, #8]
    1604:	4b03      	ldr	r3, [pc, #12]	; (1614 <eeprom_read_status+0x78>)
    1606:	4798      	blx	r3
}
    1608:	0028      	movs	r0, r5
    160a:	bd70      	pop	{r4, r5, r6, pc}
    160c:	00001bdd 	.word	0x00001bdd
    1610:	000020b9 	.word	0x000020b9
    1614:	00001bcd 	.word	0x00001bcd

00001618 <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
    1618:	b510      	push	{r4, lr}
    161a:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
    161c:	4b0a      	ldr	r3, [pc, #40]	; (1648 <eeprom_check+0x30>)
    161e:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
    1620:	0020      	movs	r0, r4
    1622:	4b0a      	ldr	r3, [pc, #40]	; (164c <eeprom_check+0x34>)
    1624:	4798      	blx	r3
    1626:	0780      	lsls	r0, r0, #30
    1628:	d401      	bmi.n	162e <eeprom_check+0x16>
    162a:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
    162c:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
    162e:	0020      	movs	r0, r4
    1630:	4b07      	ldr	r3, [pc, #28]	; (1650 <eeprom_check+0x38>)
    1632:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1634:	0020      	movs	r0, r4
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <eeprom_check+0x34>)
    1638:	4798      	blx	r3
    163a:	0780      	lsls	r0, r0, #30
    163c:	d401      	bmi.n	1642 <eeprom_check+0x2a>
	return true;
    163e:	2001      	movs	r0, #1
    1640:	e7f4      	b.n	162c <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1642:	2000      	movs	r0, #0
    1644:	e7f2      	b.n	162c <eeprom_check+0x14>
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	000014dd 	.word	0x000014dd
    164c:	0000159d 	.word	0x0000159d
    1650:	0000153d 	.word	0x0000153d

00001654 <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
    1654:	b570      	push	{r4, r5, r6, lr}
    1656:	b082      	sub	sp, #8
    1658:	0004      	movs	r4, r0
    165a:	9200      	str	r2, [sp, #0]
    165c:	9301      	str	r3, [sp, #4]
    165e:	ab06      	add	r3, sp, #24
    1660:	cb20      	ldmia	r3!, {r5}
    1662:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
    1664:	7001      	strb	r1, [r0, #0]
    1666:	0a0b      	lsrs	r3, r1, #8
    1668:	7043      	strb	r3, [r0, #1]
    166a:	0c0b      	lsrs	r3, r1, #16
    166c:	7083      	strb	r3, [r0, #2]
    166e:	0e09      	lsrs	r1, r1, #24
    1670:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1672:	3008      	adds	r0, #8
    1674:	2205      	movs	r2, #5
    1676:	4669      	mov	r1, sp
    1678:	4b15      	ldr	r3, [pc, #84]	; (16d0 <flash_init+0x7c>)
    167a:	4798      	blx	r3
	desc->size = size;
    167c:	7125      	strb	r5, [r4, #4]
    167e:	0a2b      	lsrs	r3, r5, #8
    1680:	7163      	strb	r3, [r4, #5]
    1682:	0c2b      	lsrs	r3, r5, #16
    1684:	71a3      	strb	r3, [r4, #6]
    1686:	0e2d      	lsrs	r5, r5, #24
    1688:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
    168a:	221f      	movs	r2, #31
    168c:	4032      	ands	r2, r6
    168e:	7b63      	ldrb	r3, [r4, #13]
    1690:	211f      	movs	r1, #31
    1692:	438b      	bics	r3, r1
    1694:	4313      	orrs	r3, r2
    1696:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1698:	7a23      	ldrb	r3, [r4, #8]
    169a:	7a62      	ldrb	r2, [r4, #9]
    169c:	0212      	lsls	r2, r2, #8
    169e:	431a      	orrs	r2, r3
    16a0:	7aa3      	ldrb	r3, [r4, #10]
    16a2:	041b      	lsls	r3, r3, #16
    16a4:	4313      	orrs	r3, r2
    16a6:	7ae1      	ldrb	r1, [r4, #11]
    16a8:	0609      	lsls	r1, r1, #24
    16aa:	4319      	orrs	r1, r3
    16ac:	7b20      	ldrb	r0, [r4, #12]
    16ae:	4b09      	ldr	r3, [pc, #36]	; (16d4 <flash_init+0x80>)
    16b0:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    16b2:	7a23      	ldrb	r3, [r4, #8]
    16b4:	7a62      	ldrb	r2, [r4, #9]
    16b6:	0212      	lsls	r2, r2, #8
    16b8:	431a      	orrs	r2, r3
    16ba:	7aa3      	ldrb	r3, [r4, #10]
    16bc:	041b      	lsls	r3, r3, #16
    16be:	4313      	orrs	r3, r2
    16c0:	7ae1      	ldrb	r1, [r4, #11]
    16c2:	0609      	lsls	r1, r1, #24
    16c4:	4319      	orrs	r1, r3
    16c6:	7b20      	ldrb	r0, [r4, #12]
    16c8:	4b03      	ldr	r3, [pc, #12]	; (16d8 <flash_init+0x84>)
    16ca:	4798      	blx	r3
}
    16cc:	b002      	add	sp, #8
    16ce:	bd70      	pop	{r4, r5, r6, pc}
    16d0:	000051f9 	.word	0x000051f9
    16d4:	00001bbd 	.word	0x00001bbd
    16d8:	00001bcd 	.word	0x00001bcd

000016dc <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
    16dc:	b530      	push	{r4, r5, lr}
    16de:	b083      	sub	sp, #12
    16e0:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    16e2:	7a03      	ldrb	r3, [r0, #8]
    16e4:	7a42      	ldrb	r2, [r0, #9]
    16e6:	0212      	lsls	r2, r2, #8
    16e8:	431a      	orrs	r2, r3
    16ea:	7a83      	ldrb	r3, [r0, #10]
    16ec:	041b      	lsls	r3, r3, #16
    16ee:	4313      	orrs	r3, r2
    16f0:	7ac1      	ldrb	r1, [r0, #11]
    16f2:	0609      	lsls	r1, r1, #24
    16f4:	4319      	orrs	r1, r3
    16f6:	7b00      	ldrb	r0, [r0, #12]
    16f8:	4b24      	ldr	r3, [pc, #144]	; (178c <flash_check+0xb0>)
    16fa:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    16fc:	7823      	ldrb	r3, [r4, #0]
    16fe:	7862      	ldrb	r2, [r4, #1]
    1700:	0212      	lsls	r2, r2, #8
    1702:	431a      	orrs	r2, r3
    1704:	78a3      	ldrb	r3, [r4, #2]
    1706:	041b      	lsls	r3, r3, #16
    1708:	4313      	orrs	r3, r2
    170a:	78e0      	ldrb	r0, [r4, #3]
    170c:	0600      	lsls	r0, r0, #24
    170e:	4318      	orrs	r0, r3
    1710:	219f      	movs	r1, #159	; 0x9f
    1712:	4b1f      	ldr	r3, [pc, #124]	; (1790 <flash_check+0xb4>)
    1714:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    1716:	2500      	movs	r5, #0
    1718:	e00f      	b.n	173a <flash_check+0x5e>
    171a:	7823      	ldrb	r3, [r4, #0]
    171c:	7862      	ldrb	r2, [r4, #1]
    171e:	0212      	lsls	r2, r2, #8
    1720:	431a      	orrs	r2, r3
    1722:	78a3      	ldrb	r3, [r4, #2]
    1724:	041b      	lsls	r3, r3, #16
    1726:	4313      	orrs	r3, r2
    1728:	78e0      	ldrb	r0, [r4, #3]
    172a:	0600      	lsls	r0, r0, #24
    172c:	4318      	orrs	r0, r3
    172e:	2100      	movs	r1, #0
    1730:	4b17      	ldr	r3, [pc, #92]	; (1790 <flash_check+0xb4>)
    1732:	4798      	blx	r3
    1734:	ab01      	add	r3, sp, #4
    1736:	5558      	strb	r0, [r3, r5]
    1738:	3501      	adds	r5, #1
    173a:	2d02      	cmp	r5, #2
    173c:	dded      	ble.n	171a <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    173e:	7a23      	ldrb	r3, [r4, #8]
    1740:	7a62      	ldrb	r2, [r4, #9]
    1742:	0212      	lsls	r2, r2, #8
    1744:	431a      	orrs	r2, r3
    1746:	7aa3      	ldrb	r3, [r4, #10]
    1748:	041b      	lsls	r3, r3, #16
    174a:	4313      	orrs	r3, r2
    174c:	7ae1      	ldrb	r1, [r4, #11]
    174e:	0609      	lsls	r1, r1, #24
    1750:	4319      	orrs	r1, r3
    1752:	7b20      	ldrb	r0, [r4, #12]
    1754:	4b0f      	ldr	r3, [pc, #60]	; (1794 <flash_check+0xb8>)
    1756:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1758:	ab01      	add	r3, sp, #4
    175a:	781b      	ldrb	r3, [r3, #0]
    175c:	2b1f      	cmp	r3, #31
    175e:	d10e      	bne.n	177e <flash_check+0xa2>
    1760:	ab01      	add	r3, sp, #4
    1762:	785a      	ldrb	r2, [r3, #1]
    1764:	7b63      	ldrb	r3, [r4, #13]
    1766:	06db      	lsls	r3, r3, #27
    1768:	0edb      	lsrs	r3, r3, #27
    176a:	2180      	movs	r1, #128	; 0x80
    176c:	430b      	orrs	r3, r1
    176e:	429a      	cmp	r2, r3
    1770:	d108      	bne.n	1784 <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    1772:	ab01      	add	r3, sp, #4
    1774:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1776:	2b01      	cmp	r3, #1
    1778:	d006      	beq.n	1788 <flash_check+0xac>
	else return false;
    177a:	2000      	movs	r0, #0
    177c:	e000      	b.n	1780 <flash_check+0xa4>
    177e:	2000      	movs	r0, #0
}
    1780:	b003      	add	sp, #12
    1782:	bd30      	pop	{r4, r5, pc}
	else return false;
    1784:	2000      	movs	r0, #0
    1786:	e7fb      	b.n	1780 <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    1788:	2001      	movs	r0, #1
    178a:	e7f9      	b.n	1780 <flash_check+0xa4>
    178c:	00001bdd 	.word	0x00001bdd
    1790:	000020b9 	.word	0x000020b9
    1794:	00001bcd 	.word	0x00001bcd

00001798 <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1798:	b570      	push	{r4, r5, r6, lr}
    179a:	0004      	movs	r4, r0
    179c:	000e      	movs	r6, r1
    179e:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    17a0:	7902      	ldrb	r2, [r0, #4]
    17a2:	7943      	ldrb	r3, [r0, #5]
    17a4:	021b      	lsls	r3, r3, #8
    17a6:	4313      	orrs	r3, r2
    17a8:	7982      	ldrb	r2, [r0, #6]
    17aa:	0412      	lsls	r2, r2, #16
    17ac:	431a      	orrs	r2, r3
    17ae:	79c1      	ldrb	r1, [r0, #7]
    17b0:	0609      	lsls	r1, r1, #24
    17b2:	4311      	orrs	r1, r2
    17b4:	7a00      	ldrb	r0, [r0, #8]
    17b6:	4b15      	ldr	r3, [pc, #84]	; (180c <imu_icm20948_write_byte+0x74>)
    17b8:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    17ba:	217f      	movs	r1, #127	; 0x7f
    17bc:	4031      	ands	r1, r6
    17be:	7823      	ldrb	r3, [r4, #0]
    17c0:	7862      	ldrb	r2, [r4, #1]
    17c2:	0212      	lsls	r2, r2, #8
    17c4:	431a      	orrs	r2, r3
    17c6:	78a3      	ldrb	r3, [r4, #2]
    17c8:	041b      	lsls	r3, r3, #16
    17ca:	4313      	orrs	r3, r2
    17cc:	78e0      	ldrb	r0, [r4, #3]
    17ce:	0600      	lsls	r0, r0, #24
    17d0:	4318      	orrs	r0, r3
    17d2:	4e0f      	ldr	r6, [pc, #60]	; (1810 <imu_icm20948_write_byte+0x78>)
    17d4:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    17d6:	7823      	ldrb	r3, [r4, #0]
    17d8:	7862      	ldrb	r2, [r4, #1]
    17da:	0212      	lsls	r2, r2, #8
    17dc:	431a      	orrs	r2, r3
    17de:	78a3      	ldrb	r3, [r4, #2]
    17e0:	041b      	lsls	r3, r3, #16
    17e2:	4313      	orrs	r3, r2
    17e4:	78e0      	ldrb	r0, [r4, #3]
    17e6:	0600      	lsls	r0, r0, #24
    17e8:	4318      	orrs	r0, r3
    17ea:	0029      	movs	r1, r5
    17ec:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    17ee:	7923      	ldrb	r3, [r4, #4]
    17f0:	7962      	ldrb	r2, [r4, #5]
    17f2:	0212      	lsls	r2, r2, #8
    17f4:	431a      	orrs	r2, r3
    17f6:	79a3      	ldrb	r3, [r4, #6]
    17f8:	041b      	lsls	r3, r3, #16
    17fa:	4313      	orrs	r3, r2
    17fc:	79e1      	ldrb	r1, [r4, #7]
    17fe:	0609      	lsls	r1, r1, #24
    1800:	4319      	orrs	r1, r3
    1802:	7a20      	ldrb	r0, [r4, #8]
    1804:	4b03      	ldr	r3, [pc, #12]	; (1814 <imu_icm20948_write_byte+0x7c>)
    1806:	4798      	blx	r3
}
    1808:	bd70      	pop	{r4, r5, r6, pc}
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	00001bdd 	.word	0x00001bdd
    1810:	000020b9 	.word	0x000020b9
    1814:	00001bcd 	.word	0x00001bcd

00001818 <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    1818:	b570      	push	{r4, r5, r6, lr}
    181a:	0004      	movs	r4, r0
    181c:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    181e:	7903      	ldrb	r3, [r0, #4]
    1820:	7942      	ldrb	r2, [r0, #5]
    1822:	0212      	lsls	r2, r2, #8
    1824:	431a      	orrs	r2, r3
    1826:	7983      	ldrb	r3, [r0, #6]
    1828:	041b      	lsls	r3, r3, #16
    182a:	4313      	orrs	r3, r2
    182c:	79c1      	ldrb	r1, [r0, #7]
    182e:	0609      	lsls	r1, r1, #24
    1830:	4319      	orrs	r1, r3
    1832:	7a00      	ldrb	r0, [r0, #8]
    1834:	4b16      	ldr	r3, [pc, #88]	; (1890 <imu_icm20948_read_byte+0x78>)
    1836:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1838:	2180      	movs	r1, #128	; 0x80
    183a:	4249      	negs	r1, r1
    183c:	4329      	orrs	r1, r5
    183e:	b2c9      	uxtb	r1, r1
    1840:	7823      	ldrb	r3, [r4, #0]
    1842:	7862      	ldrb	r2, [r4, #1]
    1844:	0212      	lsls	r2, r2, #8
    1846:	431a      	orrs	r2, r3
    1848:	78a3      	ldrb	r3, [r4, #2]
    184a:	041b      	lsls	r3, r3, #16
    184c:	4313      	orrs	r3, r2
    184e:	78e0      	ldrb	r0, [r4, #3]
    1850:	0600      	lsls	r0, r0, #24
    1852:	4318      	orrs	r0, r3
    1854:	4d0f      	ldr	r5, [pc, #60]	; (1894 <imu_icm20948_read_byte+0x7c>)
    1856:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    1858:	7823      	ldrb	r3, [r4, #0]
    185a:	7862      	ldrb	r2, [r4, #1]
    185c:	0212      	lsls	r2, r2, #8
    185e:	431a      	orrs	r2, r3
    1860:	78a3      	ldrb	r3, [r4, #2]
    1862:	041b      	lsls	r3, r3, #16
    1864:	4313      	orrs	r3, r2
    1866:	78e0      	ldrb	r0, [r4, #3]
    1868:	0600      	lsls	r0, r0, #24
    186a:	4318      	orrs	r0, r3
    186c:	2100      	movs	r1, #0
    186e:	47a8      	blx	r5
    1870:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1872:	7923      	ldrb	r3, [r4, #4]
    1874:	7962      	ldrb	r2, [r4, #5]
    1876:	0212      	lsls	r2, r2, #8
    1878:	431a      	orrs	r2, r3
    187a:	79a3      	ldrb	r3, [r4, #6]
    187c:	041b      	lsls	r3, r3, #16
    187e:	4313      	orrs	r3, r2
    1880:	79e1      	ldrb	r1, [r4, #7]
    1882:	0609      	lsls	r1, r1, #24
    1884:	4319      	orrs	r1, r3
    1886:	7a20      	ldrb	r0, [r4, #8]
    1888:	4b03      	ldr	r3, [pc, #12]	; (1898 <imu_icm20948_read_byte+0x80>)
    188a:	4798      	blx	r3
	return out;
}
    188c:	0028      	movs	r0, r5
    188e:	bd70      	pop	{r4, r5, r6, pc}
    1890:	00001bdd 	.word	0x00001bdd
    1894:	000020b9 	.word	0x000020b9
    1898:	00001bcd 	.word	0x00001bcd

0000189c <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    189c:	b5f0      	push	{r4, r5, r6, r7, lr}
    189e:	46c6      	mov	lr, r8
    18a0:	b500      	push	{lr}
    18a2:	0004      	movs	r4, r0
    18a4:	000d      	movs	r5, r1
    18a6:	0017      	movs	r7, r2
    18a8:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    18aa:	7902      	ldrb	r2, [r0, #4]
    18ac:	7943      	ldrb	r3, [r0, #5]
    18ae:	021b      	lsls	r3, r3, #8
    18b0:	4313      	orrs	r3, r2
    18b2:	7982      	ldrb	r2, [r0, #6]
    18b4:	0412      	lsls	r2, r2, #16
    18b6:	431a      	orrs	r2, r3
    18b8:	79c1      	ldrb	r1, [r0, #7]
    18ba:	0609      	lsls	r1, r1, #24
    18bc:	4311      	orrs	r1, r2
    18be:	7a00      	ldrb	r0, [r0, #8]
    18c0:	4b19      	ldr	r3, [pc, #100]	; (1928 <imu_icm20948_write+0x8c>)
    18c2:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    18c4:	217f      	movs	r1, #127	; 0x7f
    18c6:	4029      	ands	r1, r5
    18c8:	7823      	ldrb	r3, [r4, #0]
    18ca:	7862      	ldrb	r2, [r4, #1]
    18cc:	0212      	lsls	r2, r2, #8
    18ce:	431a      	orrs	r2, r3
    18d0:	78a3      	ldrb	r3, [r4, #2]
    18d2:	041b      	lsls	r3, r3, #16
    18d4:	4313      	orrs	r3, r2
    18d6:	78e0      	ldrb	r0, [r4, #3]
    18d8:	0600      	lsls	r0, r0, #24
    18da:	4318      	orrs	r0, r3
    18dc:	4b13      	ldr	r3, [pc, #76]	; (192c <imu_icm20948_write+0x90>)
    18de:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    18e0:	2600      	movs	r6, #0
    18e2:	e00e      	b.n	1902 <imu_icm20948_write+0x66>
		spi_command(desc->sercom, data[i]);
    18e4:	4643      	mov	r3, r8
    18e6:	5d99      	ldrb	r1, [r3, r6]
    18e8:	7822      	ldrb	r2, [r4, #0]
    18ea:	7863      	ldrb	r3, [r4, #1]
    18ec:	021b      	lsls	r3, r3, #8
    18ee:	4313      	orrs	r3, r2
    18f0:	78a5      	ldrb	r5, [r4, #2]
    18f2:	042d      	lsls	r5, r5, #16
    18f4:	431d      	orrs	r5, r3
    18f6:	78e0      	ldrb	r0, [r4, #3]
    18f8:	0600      	lsls	r0, r0, #24
    18fa:	4328      	orrs	r0, r5
    18fc:	4b0b      	ldr	r3, [pc, #44]	; (192c <imu_icm20948_write+0x90>)
    18fe:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    1900:	3601      	adds	r6, #1
    1902:	42be      	cmp	r6, r7
    1904:	dbee      	blt.n	18e4 <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1906:	7923      	ldrb	r3, [r4, #4]
    1908:	7962      	ldrb	r2, [r4, #5]
    190a:	0212      	lsls	r2, r2, #8
    190c:	431a      	orrs	r2, r3
    190e:	79a3      	ldrb	r3, [r4, #6]
    1910:	041b      	lsls	r3, r3, #16
    1912:	4313      	orrs	r3, r2
    1914:	79e1      	ldrb	r1, [r4, #7]
    1916:	0609      	lsls	r1, r1, #24
    1918:	4319      	orrs	r1, r3
    191a:	7a20      	ldrb	r0, [r4, #8]
    191c:	4b04      	ldr	r3, [pc, #16]	; (1930 <imu_icm20948_write+0x94>)
    191e:	4798      	blx	r3
}
    1920:	bc80      	pop	{r7}
    1922:	46b8      	mov	r8, r7
    1924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	00001bdd 	.word	0x00001bdd
    192c:	000020b9 	.word	0x000020b9
    1930:	00001bcd 	.word	0x00001bcd

00001934 <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1934:	b5f0      	push	{r4, r5, r6, r7, lr}
    1936:	46c6      	mov	lr, r8
    1938:	b500      	push	{lr}
    193a:	0004      	movs	r4, r0
    193c:	000d      	movs	r5, r1
    193e:	0017      	movs	r7, r2
    1940:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1942:	7903      	ldrb	r3, [r0, #4]
    1944:	7942      	ldrb	r2, [r0, #5]
    1946:	0212      	lsls	r2, r2, #8
    1948:	431a      	orrs	r2, r3
    194a:	7983      	ldrb	r3, [r0, #6]
    194c:	041b      	lsls	r3, r3, #16
    194e:	4313      	orrs	r3, r2
    1950:	79c1      	ldrb	r1, [r0, #7]
    1952:	0609      	lsls	r1, r1, #24
    1954:	4319      	orrs	r1, r3
    1956:	7a00      	ldrb	r0, [r0, #8]
    1958:	4b1b      	ldr	r3, [pc, #108]	; (19c8 <imu_icm20948_read+0x94>)
    195a:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    195c:	2180      	movs	r1, #128	; 0x80
    195e:	4249      	negs	r1, r1
    1960:	4329      	orrs	r1, r5
    1962:	b2c9      	uxtb	r1, r1
    1964:	7823      	ldrb	r3, [r4, #0]
    1966:	7862      	ldrb	r2, [r4, #1]
    1968:	0212      	lsls	r2, r2, #8
    196a:	431a      	orrs	r2, r3
    196c:	78a3      	ldrb	r3, [r4, #2]
    196e:	041b      	lsls	r3, r3, #16
    1970:	4313      	orrs	r3, r2
    1972:	78e0      	ldrb	r0, [r4, #3]
    1974:	0600      	lsls	r0, r0, #24
    1976:	4318      	orrs	r0, r3
    1978:	4b14      	ldr	r3, [pc, #80]	; (19cc <imu_icm20948_read+0x98>)
    197a:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    197c:	2500      	movs	r5, #0
    197e:	e010      	b.n	19a2 <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    1980:	4643      	mov	r3, r8
    1982:	195e      	adds	r6, r3, r5
    1984:	7823      	ldrb	r3, [r4, #0]
    1986:	7862      	ldrb	r2, [r4, #1]
    1988:	0212      	lsls	r2, r2, #8
    198a:	431a      	orrs	r2, r3
    198c:	78a3      	ldrb	r3, [r4, #2]
    198e:	041b      	lsls	r3, r3, #16
    1990:	4313      	orrs	r3, r2
    1992:	78e0      	ldrb	r0, [r4, #3]
    1994:	0600      	lsls	r0, r0, #24
    1996:	4318      	orrs	r0, r3
    1998:	2100      	movs	r1, #0
    199a:	4b0c      	ldr	r3, [pc, #48]	; (19cc <imu_icm20948_read+0x98>)
    199c:	4798      	blx	r3
    199e:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    19a0:	3501      	adds	r5, #1
    19a2:	42bd      	cmp	r5, r7
    19a4:	dbec      	blt.n	1980 <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    19a6:	7923      	ldrb	r3, [r4, #4]
    19a8:	7962      	ldrb	r2, [r4, #5]
    19aa:	0212      	lsls	r2, r2, #8
    19ac:	431a      	orrs	r2, r3
    19ae:	79a3      	ldrb	r3, [r4, #6]
    19b0:	041b      	lsls	r3, r3, #16
    19b2:	4313      	orrs	r3, r2
    19b4:	79e1      	ldrb	r1, [r4, #7]
    19b6:	0609      	lsls	r1, r1, #24
    19b8:	4319      	orrs	r1, r3
    19ba:	7a20      	ldrb	r0, [r4, #8]
    19bc:	4b04      	ldr	r3, [pc, #16]	; (19d0 <imu_icm20948_read+0x9c>)
    19be:	4798      	blx	r3
}
    19c0:	bc80      	pop	{r7}
    19c2:	46b8      	mov	r8, r7
    19c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	00001bdd 	.word	0x00001bdd
    19cc:	000020b9 	.word	0x000020b9
    19d0:	00001bcd 	.word	0x00001bcd

000019d4 <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    19d4:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    19d6:	2903      	cmp	r1, #3
    19d8:	d900      	bls.n	19dc <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    19da:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    19dc:	0109      	lsls	r1, r1, #4
    19de:	b2ca      	uxtb	r2, r1
    19e0:	217f      	movs	r1, #127	; 0x7f
    19e2:	4b01      	ldr	r3, [pc, #4]	; (19e8 <imu_icm20948_user_bank+0x14>)
    19e4:	4798      	blx	r3
}
    19e6:	e7f8      	b.n	19da <imu_icm20948_user_bank+0x6>
    19e8:	00001799 	.word	0x00001799

000019ec <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    19ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ee:	b083      	sub	sp, #12
    19f0:	0005      	movs	r5, r0
    19f2:	000c      	movs	r4, r1
    19f4:	9200      	str	r2, [sp, #0]
    19f6:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    19f8:	0008      	movs	r0, r1
    19fa:	4b13      	ldr	r3, [pc, #76]	; (1a48 <imu_icm20948_init+0x5c>)
    19fc:	4798      	blx	r3
    19fe:	1e06      	subs	r6, r0, #0
    1a00:	d102      	bne.n	1a08 <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    1a02:	0030      	movs	r0, r6
    1a04:	b003      	add	sp, #12
    1a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    1a08:	702c      	strb	r4, [r5, #0]
    1a0a:	0a23      	lsrs	r3, r4, #8
    1a0c:	706b      	strb	r3, [r5, #1]
    1a0e:	0c23      	lsrs	r3, r4, #16
    1a10:	70ab      	strb	r3, [r5, #2]
    1a12:	0e24      	lsrs	r4, r4, #24
    1a14:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    1a16:	1d28      	adds	r0, r5, #4
    1a18:	2205      	movs	r2, #5
    1a1a:	4669      	mov	r1, sp
    1a1c:	4b0b      	ldr	r3, [pc, #44]	; (1a4c <imu_icm20948_init+0x60>)
    1a1e:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    1a20:	2280      	movs	r2, #128	; 0x80
    1a22:	2106      	movs	r1, #6
    1a24:	0028      	movs	r0, r5
    1a26:	4c0a      	ldr	r4, [pc, #40]	; (1a50 <imu_icm20948_init+0x64>)
    1a28:	47a0      	blx	r4
	delay_ms(11);
    1a2a:	480a      	ldr	r0, [pc, #40]	; (1a54 <imu_icm20948_init+0x68>)
    1a2c:	4f0a      	ldr	r7, [pc, #40]	; (1a58 <imu_icm20948_init+0x6c>)
    1a2e:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    1a30:	2210      	movs	r2, #16
    1a32:	2103      	movs	r1, #3
    1a34:	0028      	movs	r0, r5
    1a36:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    1a38:	2201      	movs	r2, #1
    1a3a:	2106      	movs	r1, #6
    1a3c:	0028      	movs	r0, r5
    1a3e:	47a0      	blx	r4
	delay_us(80);
    1a40:	20f0      	movs	r0, #240	; 0xf0
    1a42:	0040      	lsls	r0, r0, #1
    1a44:	47b8      	blx	r7
	return true;
    1a46:	e7dc      	b.n	1a02 <imu_icm20948_init+0x16>
    1a48:	00001ec9 	.word	0x00001ec9
    1a4c:	000051f9 	.word	0x000051f9
    1a50:	00001799 	.word	0x00001799
    1a54:	000101d0 	.word	0x000101d0
    1a58:	0000219d 	.word	0x0000219d

00001a5c <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1a5c:	b510      	push	{r4, lr}
    1a5e:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    1a60:	2100      	movs	r1, #0
    1a62:	4b06      	ldr	r3, [pc, #24]	; (1a7c <imu_icm20948_check+0x20>)
    1a64:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    1a66:	2100      	movs	r1, #0
    1a68:	0020      	movs	r0, r4
    1a6a:	4b05      	ldr	r3, [pc, #20]	; (1a80 <imu_icm20948_check+0x24>)
    1a6c:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    1a6e:	28ea      	cmp	r0, #234	; 0xea
    1a70:	d001      	beq.n	1a76 <imu_icm20948_check+0x1a>
	else return false;
    1a72:	2000      	movs	r0, #0
}
    1a74:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    1a76:	38e9      	subs	r0, #233	; 0xe9
    1a78:	e7fc      	b.n	1a74 <imu_icm20948_check+0x18>
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	000019d5 	.word	0x000019d5
    1a80:	00001819 	.word	0x00001819

00001a84 <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a86:	0004      	movs	r4, r0
    1a88:	000f      	movs	r7, r1
    1a8a:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1a8c:	2103      	movs	r1, #3
    1a8e:	4b0b      	ldr	r3, [pc, #44]	; (1abc <mag_icm20948_write_byte+0x38>)
    1a90:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    1a92:	220c      	movs	r2, #12
    1a94:	2103      	movs	r1, #3
    1a96:	0020      	movs	r0, r4
    1a98:	4d09      	ldr	r5, [pc, #36]	; (1ac0 <mag_icm20948_write_byte+0x3c>)
    1a9a:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    1a9c:	003a      	movs	r2, r7
    1a9e:	2104      	movs	r1, #4
    1aa0:	0020      	movs	r0, r4
    1aa2:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    1aa4:	0032      	movs	r2, r6
    1aa6:	2106      	movs	r1, #6
    1aa8:	0020      	movs	r0, r4
    1aaa:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    1aac:	2281      	movs	r2, #129	; 0x81
    1aae:	2105      	movs	r1, #5
    1ab0:	0020      	movs	r0, r4
    1ab2:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    1ab4:	4803      	ldr	r0, [pc, #12]	; (1ac4 <mag_icm20948_write_byte+0x40>)
    1ab6:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <mag_icm20948_write_byte+0x44>)
    1ab8:	4798      	blx	r3
}
    1aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1abc:	000019d5 	.word	0x000019d5
    1ac0:	00001799 	.word	0x00001799
    1ac4:	0000ea60 	.word	0x0000ea60
    1ac8:	0000219d 	.word	0x0000219d

00001acc <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    1acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ace:	46c6      	mov	lr, r8
    1ad0:	b500      	push	{lr}
    1ad2:	b082      	sub	sp, #8
    1ad4:	0004      	movs	r4, r0
    1ad6:	000f      	movs	r7, r1
    1ad8:	0015      	movs	r5, r2
    1ada:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1adc:	2103      	movs	r1, #3
    1ade:	4e0f      	ldr	r6, [pc, #60]	; (1b1c <mag_icm20948_read+0x50>)
    1ae0:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    1ae2:	ab01      	add	r3, sp, #4
    1ae4:	228c      	movs	r2, #140	; 0x8c
    1ae6:	701a      	strb	r2, [r3, #0]
    1ae8:	705f      	strb	r7, [r3, #1]
    1aea:	3a0d      	subs	r2, #13
    1aec:	3aff      	subs	r2, #255	; 0xff
    1aee:	432a      	orrs	r2, r5
    1af0:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    1af2:	2203      	movs	r2, #3
    1af4:	2103      	movs	r1, #3
    1af6:	0020      	movs	r0, r4
    1af8:	4f09      	ldr	r7, [pc, #36]	; (1b20 <mag_icm20948_read+0x54>)
    1afa:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    1afc:	4809      	ldr	r0, [pc, #36]	; (1b24 <mag_icm20948_read+0x58>)
    1afe:	4b0a      	ldr	r3, [pc, #40]	; (1b28 <mag_icm20948_read+0x5c>)
    1b00:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1b02:	2100      	movs	r1, #0
    1b04:	0020      	movs	r0, r4
    1b06:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    1b08:	4643      	mov	r3, r8
    1b0a:	002a      	movs	r2, r5
    1b0c:	213b      	movs	r1, #59	; 0x3b
    1b0e:	0020      	movs	r0, r4
    1b10:	4c06      	ldr	r4, [pc, #24]	; (1b2c <mag_icm20948_read+0x60>)
    1b12:	47a0      	blx	r4
}
    1b14:	b002      	add	sp, #8
    1b16:	bc80      	pop	{r7}
    1b18:	46b8      	mov	r8, r7
    1b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b1c:	000019d5 	.word	0x000019d5
    1b20:	0000189d 	.word	0x0000189d
    1b24:	00001770 	.word	0x00001770
    1b28:	0000219d 	.word	0x0000219d
    1b2c:	00001935 	.word	0x00001935

00001b30 <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    1b30:	b570      	push	{r4, r5, r6, lr}
    1b32:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    1b34:	2100      	movs	r1, #0
    1b36:	4e10      	ldr	r6, [pc, #64]	; (1b78 <mag_icm20948_init+0x48>)
    1b38:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    1b3a:	2220      	movs	r2, #32
    1b3c:	2103      	movs	r1, #3
    1b3e:	0020      	movs	r0, r4
    1b40:	4d0e      	ldr	r5, [pc, #56]	; (1b7c <mag_icm20948_init+0x4c>)
    1b42:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    1b44:	2103      	movs	r1, #3
    1b46:	0020      	movs	r0, r4
    1b48:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    1b4a:	2207      	movs	r2, #7
    1b4c:	2101      	movs	r1, #1
    1b4e:	0020      	movs	r0, r4
    1b50:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    1b52:	2201      	movs	r2, #1
    1b54:	2102      	movs	r1, #2
    1b56:	0020      	movs	r0, r4
    1b58:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    1b5a:	4809      	ldr	r0, [pc, #36]	; (1b80 <mag_icm20948_init+0x50>)
    1b5c:	4b09      	ldr	r3, [pc, #36]	; (1b84 <mag_icm20948_init+0x54>)
    1b5e:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    1b60:	2201      	movs	r2, #1
    1b62:	2132      	movs	r1, #50	; 0x32
    1b64:	0020      	movs	r0, r4
    1b66:	4d08      	ldr	r5, [pc, #32]	; (1b88 <mag_icm20948_init+0x58>)
    1b68:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    1b6a:	2208      	movs	r2, #8
    1b6c:	2131      	movs	r1, #49	; 0x31
    1b6e:	0020      	movs	r0, r4
    1b70:	47a8      	blx	r5
	
	return true;
}
    1b72:	2001      	movs	r0, #1
    1b74:	bd70      	pop	{r4, r5, r6, pc}
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	000019d5 	.word	0x000019d5
    1b7c:	00001799 	.word	0x00001799
    1b80:	00001770 	.word	0x00001770
    1b84:	0000219d 	.word	0x0000219d
    1b88:	00001a85 	.word	0x00001a85

00001b8c <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    1b8c:	b530      	push	{r4, r5, lr}
    1b8e:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    1b90:	ac01      	add	r4, sp, #4
    1b92:	0023      	movs	r3, r4
    1b94:	2202      	movs	r2, #2
    1b96:	2100      	movs	r1, #0
    1b98:	4d07      	ldr	r5, [pc, #28]	; (1bb8 <mag_icm20948_check+0x2c>)
    1b9a:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1b9c:	7823      	ldrb	r3, [r4, #0]
    1b9e:	2b48      	cmp	r3, #72	; 0x48
    1ba0:	d104      	bne.n	1bac <mag_icm20948_check+0x20>
    1ba2:	7863      	ldrb	r3, [r4, #1]
    1ba4:	2b09      	cmp	r3, #9
    1ba6:	d004      	beq.n	1bb2 <mag_icm20948_check+0x26>
	else return false;
    1ba8:	2000      	movs	r0, #0
    1baa:	e000      	b.n	1bae <mag_icm20948_check+0x22>
    1bac:	2000      	movs	r0, #0
    1bae:	b003      	add	sp, #12
    1bb0:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    1bb2:	2001      	movs	r0, #1
    1bb4:	e7fb      	b.n	1bae <mag_icm20948_check+0x22>
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	00001acd 	.word	0x00001acd

00001bbc <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    1bbc:	01c0      	lsls	r0, r0, #7
    1bbe:	4b02      	ldr	r3, [pc, #8]	; (1bc8 <port_set_output+0xc>)
    1bc0:	469c      	mov	ip, r3
    1bc2:	4460      	add	r0, ip
    1bc4:	6081      	str	r1, [r0, #8]
}
    1bc6:	4770      	bx	lr
    1bc8:	41004400 	.word	0x41004400

00001bcc <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    1bcc:	01c0      	lsls	r0, r0, #7
    1bce:	4b02      	ldr	r3, [pc, #8]	; (1bd8 <port_set+0xc>)
    1bd0:	469c      	mov	ip, r3
    1bd2:	4460      	add	r0, ip
    1bd4:	6181      	str	r1, [r0, #24]
}
    1bd6:	4770      	bx	lr
    1bd8:	41004400 	.word	0x41004400

00001bdc <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    1bdc:	01c0      	lsls	r0, r0, #7
    1bde:	4b02      	ldr	r3, [pc, #8]	; (1be8 <port_clear+0xc>)
    1be0:	469c      	mov	ip, r3
    1be2:	4460      	add	r0, ip
    1be4:	6141      	str	r1, [r0, #20]
}
    1be6:	4770      	bx	lr
    1be8:	41004400 	.word	0x41004400

00001bec <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    1bec:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    1bee:	060b      	lsls	r3, r1, #24
    1bf0:	21f0      	movs	r1, #240	; 0xf0
    1bf2:	0509      	lsls	r1, r1, #20
    1bf4:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    1bf6:	490e      	ldr	r1, [pc, #56]	; (1c30 <port_wrconfig+0x44>)
    1bf8:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    1bfa:	0413      	lsls	r3, r2, #16
    1bfc:	0c1c      	lsrs	r4, r3, #16
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d005      	beq.n	1c0e <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    1c02:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1c04:	01c3      	lsls	r3, r0, #7
    1c06:	4c0b      	ldr	r4, [pc, #44]	; (1c34 <port_wrconfig+0x48>)
    1c08:	46a4      	mov	ip, r4
    1c0a:	4463      	add	r3, ip
    1c0c:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    1c0e:	2380      	movs	r3, #128	; 0x80
    1c10:	025b      	lsls	r3, r3, #9
    1c12:	429a      	cmp	r2, r3
    1c14:	d30b      	bcc.n	1c2e <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    1c16:	0c09      	lsrs	r1, r1, #16
    1c18:	0409      	lsls	r1, r1, #16
    1c1a:	2380      	movs	r3, #128	; 0x80
    1c1c:	061b      	lsls	r3, r3, #24
    1c1e:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    1c20:	0c12      	lsrs	r2, r2, #16
    1c22:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    1c24:	01c0      	lsls	r0, r0, #7
    1c26:	4b03      	ldr	r3, [pc, #12]	; (1c34 <port_wrconfig+0x48>)
    1c28:	469c      	mov	ip, r3
    1c2a:	4460      	add	r0, ip
    1c2c:	6282      	str	r2, [r0, #40]	; 0x28
	}
    1c2e:	bd10      	pop	{r4, pc}
    1c30:	50010000 	.word	0x50010000
    1c34:	41004400 	.word	0x41004400

00001c38 <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    1c38:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    1c3a:	4c2a      	ldr	r4, [pc, #168]	; (1ce4 <pwm_init_tc+0xac>)
    1c3c:	42a0      	cmp	r0, r4
    1c3e:	d03c      	beq.n	1cba <pwm_init_tc+0x82>
    1c40:	d90f      	bls.n	1c62 <pwm_init_tc+0x2a>
    1c42:	4c29      	ldr	r4, [pc, #164]	; (1ce8 <pwm_init_tc+0xb0>)
    1c44:	42a0      	cmp	r0, r4
    1c46:	d042      	beq.n	1cce <pwm_init_tc+0x96>
    1c48:	4c28      	ldr	r4, [pc, #160]	; (1cec <pwm_init_tc+0xb4>)
    1c4a:	42a0      	cmp	r0, r4
    1c4c:	d11b      	bne.n	1c86 <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    1c4e:	4a28      	ldr	r2, [pc, #160]	; (1cf0 <pwm_init_tc+0xb8>)
    1c50:	6a14      	ldr	r4, [r2, #32]
    1c52:	2380      	movs	r3, #128	; 0x80
    1c54:	021b      	lsls	r3, r3, #8
    1c56:	4323      	orrs	r3, r4
    1c58:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1c5a:	4b26      	ldr	r3, [pc, #152]	; (1cf4 <pwm_init_tc+0xbc>)
    1c5c:	4a26      	ldr	r2, [pc, #152]	; (1cf8 <pwm_init_tc+0xc0>)
    1c5e:	805a      	strh	r2, [r3, #2]
		break;
    1c60:	e01c      	b.n	1c9c <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1c62:	4c26      	ldr	r4, [pc, #152]	; (1cfc <pwm_init_tc+0xc4>)
    1c64:	42a0      	cmp	r0, r4
    1c66:	d010      	beq.n	1c8a <pwm_init_tc+0x52>
    1c68:	4c25      	ldr	r4, [pc, #148]	; (1d00 <pwm_init_tc+0xc8>)
    1c6a:	42a0      	cmp	r0, r4
    1c6c:	d109      	bne.n	1c82 <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    1c6e:	4a20      	ldr	r2, [pc, #128]	; (1cf0 <pwm_init_tc+0xb8>)
    1c70:	6a14      	ldr	r4, [r2, #32]
    1c72:	2380      	movs	r3, #128	; 0x80
    1c74:	015b      	lsls	r3, r3, #5
    1c76:	4323      	orrs	r3, r4
    1c78:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1c7a:	4b1e      	ldr	r3, [pc, #120]	; (1cf4 <pwm_init_tc+0xbc>)
    1c7c:	4a21      	ldr	r2, [pc, #132]	; (1d04 <pwm_init_tc+0xcc>)
    1c7e:	805a      	strh	r2, [r3, #2]
		break;
    1c80:	e00c      	b.n	1c9c <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    1c82:	2000      	movs	r0, #0
    1c84:	e018      	b.n	1cb8 <pwm_init_tc+0x80>
    1c86:	2000      	movs	r0, #0
    1c88:	e016      	b.n	1cb8 <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    1c8a:	4a19      	ldr	r2, [pc, #100]	; (1cf0 <pwm_init_tc+0xb8>)
    1c8c:	6a14      	ldr	r4, [r2, #32]
    1c8e:	2380      	movs	r3, #128	; 0x80
    1c90:	011b      	lsls	r3, r3, #4
    1c92:	4323      	orrs	r3, r4
    1c94:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    1c96:	4b17      	ldr	r3, [pc, #92]	; (1cf4 <pwm_init_tc+0xbc>)
    1c98:	4a1b      	ldr	r2, [pc, #108]	; (1d08 <pwm_init_tc+0xd0>)
    1c9a:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1c9c:	4b15      	ldr	r3, [pc, #84]	; (1cf4 <pwm_init_tc+0xbc>)
    1c9e:	785b      	ldrb	r3, [r3, #1]
    1ca0:	b25b      	sxtb	r3, r3
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	dbfa      	blt.n	1c9c <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    1ca6:	020b      	lsls	r3, r1, #8
    1ca8:	22e0      	movs	r2, #224	; 0xe0
    1caa:	00d2      	lsls	r2, r2, #3
    1cac:	4013      	ands	r3, r2
    1cae:	2244      	movs	r2, #68	; 0x44
    1cb0:	4313      	orrs	r3, r2
    1cb2:	b29b      	uxth	r3, r3
    1cb4:	8003      	strh	r3, [r0, #0]
	
	return true;
    1cb6:	2001      	movs	r0, #1
}
    1cb8:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    1cba:	4a0d      	ldr	r2, [pc, #52]	; (1cf0 <pwm_init_tc+0xb8>)
    1cbc:	6a14      	ldr	r4, [r2, #32]
    1cbe:	2380      	movs	r3, #128	; 0x80
    1cc0:	019b      	lsls	r3, r3, #6
    1cc2:	4323      	orrs	r3, r4
    1cc4:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1cc6:	4b0b      	ldr	r3, [pc, #44]	; (1cf4 <pwm_init_tc+0xbc>)
    1cc8:	4a0e      	ldr	r2, [pc, #56]	; (1d04 <pwm_init_tc+0xcc>)
    1cca:	805a      	strh	r2, [r3, #2]
		break;
    1ccc:	e7e6      	b.n	1c9c <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    1cce:	4a08      	ldr	r2, [pc, #32]	; (1cf0 <pwm_init_tc+0xb8>)
    1cd0:	6a14      	ldr	r4, [r2, #32]
    1cd2:	2380      	movs	r3, #128	; 0x80
    1cd4:	01db      	lsls	r3, r3, #7
    1cd6:	4323      	orrs	r3, r4
    1cd8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    1cda:	4b06      	ldr	r3, [pc, #24]	; (1cf4 <pwm_init_tc+0xbc>)
    1cdc:	4a06      	ldr	r2, [pc, #24]	; (1cf8 <pwm_init_tc+0xc0>)
    1cde:	805a      	strh	r2, [r3, #2]
		break;
    1ce0:	e7dc      	b.n	1c9c <pwm_init_tc+0x64>
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	42003400 	.word	0x42003400
    1ce8:	42003800 	.word	0x42003800
    1cec:	42003c00 	.word	0x42003c00
    1cf0:	40000400 	.word	0x40000400
    1cf4:	40000c00 	.word	0x40000c00
    1cf8:	0000401d 	.word	0x0000401d
    1cfc:	42002c00 	.word	0x42002c00
    1d00:	42003000 	.word	0x42003000
    1d04:	0000401c 	.word	0x0000401c
    1d08:	0000401b 	.word	0x0000401b

00001d0c <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    1d0c:	4a0f      	ldr	r2, [pc, #60]	; (1d4c <pwm_enable_tc+0x40>)
    1d0e:	4290      	cmp	r0, r2
    1d10:	d010      	beq.n	1d34 <pwm_enable_tc+0x28>
    1d12:	d807      	bhi.n	1d24 <pwm_enable_tc+0x18>
    1d14:	4a0e      	ldr	r2, [pc, #56]	; (1d50 <pwm_enable_tc+0x44>)
    1d16:	4290      	cmp	r0, r2
    1d18:	d00c      	beq.n	1d34 <pwm_enable_tc+0x28>
    1d1a:	4a0e      	ldr	r2, [pc, #56]	; (1d54 <pwm_enable_tc+0x48>)
    1d1c:	4290      	cmp	r0, r2
    1d1e:	d009      	beq.n	1d34 <pwm_enable_tc+0x28>
    1d20:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    1d22:	4770      	bx	lr
	switch ((uint32_t)tc) {
    1d24:	4a0c      	ldr	r2, [pc, #48]	; (1d58 <pwm_enable_tc+0x4c>)
    1d26:	4290      	cmp	r0, r2
    1d28:	d004      	beq.n	1d34 <pwm_enable_tc+0x28>
    1d2a:	4a0c      	ldr	r2, [pc, #48]	; (1d5c <pwm_enable_tc+0x50>)
    1d2c:	4290      	cmp	r0, r2
    1d2e:	d001      	beq.n	1d34 <pwm_enable_tc+0x28>
    1d30:	2000      	movs	r0, #0
    1d32:	e7f6      	b.n	1d22 <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    1d34:	8803      	ldrh	r3, [r0, #0]
    1d36:	2202      	movs	r2, #2
    1d38:	4313      	orrs	r3, r2
    1d3a:	b29b      	uxth	r3, r3
    1d3c:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    1d3e:	7bc3      	ldrb	r3, [r0, #15]
    1d40:	b25b      	sxtb	r3, r3
    1d42:	2b00      	cmp	r3, #0
    1d44:	dbfb      	blt.n	1d3e <pwm_enable_tc+0x32>
	return true;
    1d46:	2001      	movs	r0, #1
    1d48:	e7eb      	b.n	1d22 <pwm_enable_tc+0x16>
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	42003400 	.word	0x42003400
    1d50:	42002c00 	.word	0x42002c00
    1d54:	42003000 	.word	0x42003000
    1d58:	42003800 	.word	0x42003800
    1d5c:	42003c00 	.word	0x42003c00

00001d60 <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    1d60:	2307      	movs	r3, #7
    1d62:	4018      	ands	r0, r3
	switch (prescaler) {
    1d64:	2807      	cmp	r0, #7
    1d66:	d813      	bhi.n	1d90 <pwm_get_div_val+0x30>
    1d68:	0080      	lsls	r0, r0, #2
    1d6a:	4b0b      	ldr	r3, [pc, #44]	; (1d98 <pwm_get_div_val+0x38>)
    1d6c:	581b      	ldr	r3, [r3, r0]
    1d6e:	469f      	mov	pc, r3
    1d70:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    1d72:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    1d74:	2004      	movs	r0, #4
    1d76:	e7fc      	b.n	1d72 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    1d78:	2008      	movs	r0, #8
    1d7a:	e7fa      	b.n	1d72 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    1d7c:	2010      	movs	r0, #16
    1d7e:	e7f8      	b.n	1d72 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    1d80:	2040      	movs	r0, #64	; 0x40
    1d82:	e7f6      	b.n	1d72 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    1d84:	2080      	movs	r0, #128	; 0x80
    1d86:	0040      	lsls	r0, r0, #1
    1d88:	e7f3      	b.n	1d72 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    1d8a:	2080      	movs	r0, #128	; 0x80
    1d8c:	00c0      	lsls	r0, r0, #3
    1d8e:	e7f0      	b.n	1d72 <pwm_get_div_val+0x12>
	return 0;
    1d90:	2000      	movs	r0, #0
    1d92:	e7ee      	b.n	1d72 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    1d94:	2002      	movs	r0, #2
    1d96:	e7ec      	b.n	1d72 <pwm_get_div_val+0x12>
    1d98:	00005654 	.word	0x00005654

00001d9c <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    1d9c:	b570      	push	{r4, r5, r6, lr}
    1d9e:	0004      	movs	r4, r0
    1da0:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    1da2:	4a16      	ldr	r2, [pc, #88]	; (1dfc <pwm_set_frequency_tc+0x60>)
    1da4:	4290      	cmp	r0, r2
    1da6:	d010      	beq.n	1dca <pwm_set_frequency_tc+0x2e>
    1da8:	d807      	bhi.n	1dba <pwm_set_frequency_tc+0x1e>
    1daa:	4a15      	ldr	r2, [pc, #84]	; (1e00 <pwm_set_frequency_tc+0x64>)
    1dac:	4290      	cmp	r0, r2
    1dae:	d00c      	beq.n	1dca <pwm_set_frequency_tc+0x2e>
    1db0:	4a14      	ldr	r2, [pc, #80]	; (1e04 <pwm_set_frequency_tc+0x68>)
    1db2:	4290      	cmp	r0, r2
    1db4:	d009      	beq.n	1dca <pwm_set_frequency_tc+0x2e>
    1db6:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    1db8:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    1dba:	4a13      	ldr	r2, [pc, #76]	; (1e08 <pwm_set_frequency_tc+0x6c>)
    1dbc:	4290      	cmp	r0, r2
    1dbe:	d004      	beq.n	1dca <pwm_set_frequency_tc+0x2e>
    1dc0:	4a12      	ldr	r2, [pc, #72]	; (1e0c <pwm_set_frequency_tc+0x70>)
    1dc2:	4290      	cmp	r0, r2
    1dc4:	d001      	beq.n	1dca <pwm_set_frequency_tc+0x2e>
    1dc6:	2000      	movs	r0, #0
    1dc8:	e7f6      	b.n	1db8 <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    1dca:	8823      	ldrh	r3, [r4, #0]
    1dcc:	0a1b      	lsrs	r3, r3, #8
    1dce:	2007      	movs	r0, #7
    1dd0:	4018      	ands	r0, r3
    1dd2:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <pwm_set_frequency_tc+0x74>)
    1dd4:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    1dd6:	4b0f      	ldr	r3, [pc, #60]	; (1e14 <pwm_set_frequency_tc+0x78>)
    1dd8:	4798      	blx	r3
    1dda:	4b0f      	ldr	r3, [pc, #60]	; (1e18 <pwm_set_frequency_tc+0x7c>)
    1ddc:	1c29      	adds	r1, r5, #0
    1dde:	4798      	blx	r3
    1de0:	1c01      	adds	r1, r0, #0
    1de2:	4b0e      	ldr	r3, [pc, #56]	; (1e1c <pwm_set_frequency_tc+0x80>)
    1de4:	480e      	ldr	r0, [pc, #56]	; (1e20 <pwm_set_frequency_tc+0x84>)
    1de6:	4798      	blx	r3
    1de8:	4b0e      	ldr	r3, [pc, #56]	; (1e24 <pwm_set_frequency_tc+0x88>)
    1dea:	4798      	blx	r3
	if (per > 0xFF) return false;
    1dec:	28ff      	cmp	r0, #255	; 0xff
    1dee:	d803      	bhi.n	1df8 <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    1df0:	b2c0      	uxtb	r0, r0
    1df2:	7520      	strb	r0, [r4, #20]
	return true;
    1df4:	2001      	movs	r0, #1
    1df6:	e7df      	b.n	1db8 <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    1df8:	2000      	movs	r0, #0
    1dfa:	e7dd      	b.n	1db8 <pwm_set_frequency_tc+0x1c>
    1dfc:	42003400 	.word	0x42003400
    1e00:	42002c00 	.word	0x42002c00
    1e04:	42003000 	.word	0x42003000
    1e08:	42003800 	.word	0x42003800
    1e0c:	42003c00 	.word	0x42003c00
    1e10:	00001d61 	.word	0x00001d61
    1e14:	00004fa9 	.word	0x00004fa9
    1e18:	000049c9 	.word	0x000049c9
    1e1c:	000045fd 	.word	0x000045fd
    1e20:	4c371b00 	.word	0x4c371b00
    1e24:	000042c9 	.word	0x000042c9

00001e28 <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    1e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e2a:	0004      	movs	r4, r0
    1e2c:	000e      	movs	r6, r1
    1e2e:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    1e30:	4a1b      	ldr	r2, [pc, #108]	; (1ea0 <pwm_set_duty_tc+0x78>)
    1e32:	4290      	cmp	r0, r2
    1e34:	d010      	beq.n	1e58 <pwm_set_duty_tc+0x30>
    1e36:	d807      	bhi.n	1e48 <pwm_set_duty_tc+0x20>
    1e38:	4a1a      	ldr	r2, [pc, #104]	; (1ea4 <pwm_set_duty_tc+0x7c>)
    1e3a:	4290      	cmp	r0, r2
    1e3c:	d00c      	beq.n	1e58 <pwm_set_duty_tc+0x30>
    1e3e:	4a1a      	ldr	r2, [pc, #104]	; (1ea8 <pwm_set_duty_tc+0x80>)
    1e40:	4290      	cmp	r0, r2
    1e42:	d009      	beq.n	1e58 <pwm_set_duty_tc+0x30>
    1e44:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    1e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    1e48:	4a18      	ldr	r2, [pc, #96]	; (1eac <pwm_set_duty_tc+0x84>)
    1e4a:	4290      	cmp	r0, r2
    1e4c:	d004      	beq.n	1e58 <pwm_set_duty_tc+0x30>
    1e4e:	4a18      	ldr	r2, [pc, #96]	; (1eb0 <pwm_set_duty_tc+0x88>)
    1e50:	4290      	cmp	r0, r2
    1e52:	d001      	beq.n	1e58 <pwm_set_duty_tc+0x30>
    1e54:	2000      	movs	r0, #0
    1e56:	e7f6      	b.n	1e46 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1e58:	4b16      	ldr	r3, [pc, #88]	; (1eb4 <pwm_set_duty_tc+0x8c>)
    1e5a:	2100      	movs	r1, #0
    1e5c:	1c28      	adds	r0, r5, #0
    1e5e:	4798      	blx	r3
    1e60:	2800      	cmp	r0, #0
    1e62:	d11b      	bne.n	1e9c <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    1e64:	4b14      	ldr	r3, [pc, #80]	; (1eb8 <pwm_set_duty_tc+0x90>)
    1e66:	21fe      	movs	r1, #254	; 0xfe
    1e68:	0589      	lsls	r1, r1, #22
    1e6a:	1c28      	adds	r0, r5, #0
    1e6c:	4798      	blx	r3
    1e6e:	2800      	cmp	r0, #0
    1e70:	d001      	beq.n	1e76 <pwm_set_duty_tc+0x4e>
    1e72:	25fe      	movs	r5, #254	; 0xfe
    1e74:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    1e76:	7d27      	ldrb	r7, [r4, #20]
    1e78:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    1e7a:	4b10      	ldr	r3, [pc, #64]	; (1ebc <pwm_set_duty_tc+0x94>)
    1e7c:	0038      	movs	r0, r7
    1e7e:	4798      	blx	r3
    1e80:	4b0f      	ldr	r3, [pc, #60]	; (1ec0 <pwm_set_duty_tc+0x98>)
    1e82:	1c29      	adds	r1, r5, #0
    1e84:	4798      	blx	r3
    1e86:	4b0f      	ldr	r3, [pc, #60]	; (1ec4 <pwm_set_duty_tc+0x9c>)
    1e88:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    1e8a:	003b      	movs	r3, r7
    1e8c:	4287      	cmp	r7, r0
    1e8e:	d300      	bcc.n	1e92 <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    1e90:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    1e92:	b2db      	uxtb	r3, r3
    1e94:	19a4      	adds	r4, r4, r6
    1e96:	7623      	strb	r3, [r4, #24]
	return true;
    1e98:	2001      	movs	r0, #1
    1e9a:	e7d4      	b.n	1e46 <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    1e9c:	2500      	movs	r5, #0
    1e9e:	e7e1      	b.n	1e64 <pwm_set_duty_tc+0x3c>
    1ea0:	42003400 	.word	0x42003400
    1ea4:	42002c00 	.word	0x42002c00
    1ea8:	42003000 	.word	0x42003000
    1eac:	42003800 	.word	0x42003800
    1eb0:	42003c00 	.word	0x42003c00
    1eb4:	0000421d 	.word	0x0000421d
    1eb8:	00004245 	.word	0x00004245
    1ebc:	00004fa9 	.word	0x00004fa9
    1ec0:	000049c9 	.word	0x000049c9
    1ec4:	000042c9 	.word	0x000042c9

00001ec8 <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    1ec8:	4b11      	ldr	r3, [pc, #68]	; (1f10 <sercom_check+0x48>)
    1eca:	4298      	cmp	r0, r3
    1ecc:	d017      	beq.n	1efe <sercom_check+0x36>
    1ece:	d80c      	bhi.n	1eea <sercom_check+0x22>
    1ed0:	4b10      	ldr	r3, [pc, #64]	; (1f14 <sercom_check+0x4c>)
    1ed2:	4298      	cmp	r0, r3
    1ed4:	d015      	beq.n	1f02 <sercom_check+0x3a>
    1ed6:	4b10      	ldr	r3, [pc, #64]	; (1f18 <sercom_check+0x50>)
    1ed8:	4298      	cmp	r0, r3
    1eda:	d014      	beq.n	1f06 <sercom_check+0x3e>
    1edc:	4b0f      	ldr	r3, [pc, #60]	; (1f1c <sercom_check+0x54>)
    1ede:	4298      	cmp	r0, r3
    1ee0:	d001      	beq.n	1ee6 <sercom_check+0x1e>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    1ee2:	2000      	movs	r0, #0
		break;
	}
}
    1ee4:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    1ee6:	2001      	movs	r0, #1
    1ee8:	e7fc      	b.n	1ee4 <sercom_check+0x1c>
    1eea:	4b0d      	ldr	r3, [pc, #52]	; (1f20 <sercom_check+0x58>)
    1eec:	4298      	cmp	r0, r3
    1eee:	d00c      	beq.n	1f0a <sercom_check+0x42>
    1ef0:	4b0c      	ldr	r3, [pc, #48]	; (1f24 <sercom_check+0x5c>)
    1ef2:	4298      	cmp	r0, r3
    1ef4:	d001      	beq.n	1efa <sercom_check+0x32>
		return false;
    1ef6:	2000      	movs	r0, #0
    1ef8:	e7f4      	b.n	1ee4 <sercom_check+0x1c>
	switch ((uint32_t)sercom) {
    1efa:	2001      	movs	r0, #1
    1efc:	e7f2      	b.n	1ee4 <sercom_check+0x1c>
    1efe:	2001      	movs	r0, #1
    1f00:	e7f0      	b.n	1ee4 <sercom_check+0x1c>
    1f02:	2001      	movs	r0, #1
    1f04:	e7ee      	b.n	1ee4 <sercom_check+0x1c>
    1f06:	2001      	movs	r0, #1
    1f08:	e7ec      	b.n	1ee4 <sercom_check+0x1c>
    1f0a:	2001      	movs	r0, #1
    1f0c:	e7ea      	b.n	1ee4 <sercom_check+0x1c>
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	42001400 	.word	0x42001400
    1f14:	42000c00 	.word	0x42000c00
    1f18:	42001000 	.word	0x42001000
    1f1c:	42000800 	.word	0x42000800
    1f20:	42001800 	.word	0x42001800
    1f24:	42001c00 	.word	0x42001c00

00001f28 <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    1f28:	4b29      	ldr	r3, [pc, #164]	; (1fd0 <sercom_init+0xa8>)
    1f2a:	4298      	cmp	r0, r3
    1f2c:	d03d      	beq.n	1faa <sercom_init+0x82>
    1f2e:	d822      	bhi.n	1f76 <sercom_init+0x4e>
    1f30:	4b28      	ldr	r3, [pc, #160]	; (1fd4 <sercom_init+0xac>)
    1f32:	4298      	cmp	r0, r3
    1f34:	d030      	beq.n	1f98 <sercom_init+0x70>
    1f36:	4b28      	ldr	r3, [pc, #160]	; (1fd8 <sercom_init+0xb0>)
    1f38:	4298      	cmp	r0, r3
    1f3a:	d108      	bne.n	1f4e <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    1f3c:	4a27      	ldr	r2, [pc, #156]	; (1fdc <sercom_init+0xb4>)
    1f3e:	6a13      	ldr	r3, [r2, #32]
    1f40:	2110      	movs	r1, #16
    1f42:	430b      	orrs	r3, r1
    1f44:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    1f46:	4b26      	ldr	r3, [pc, #152]	; (1fe0 <sercom_init+0xb8>)
    1f48:	4a26      	ldr	r2, [pc, #152]	; (1fe4 <sercom_init+0xbc>)
    1f4a:	805a      	strh	r2, [r3, #2]
		break;
    1f4c:	e00a      	b.n	1f64 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    1f4e:	4b26      	ldr	r3, [pc, #152]	; (1fe8 <sercom_init+0xc0>)
    1f50:	4298      	cmp	r0, r3
    1f52:	d10e      	bne.n	1f72 <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    1f54:	4a21      	ldr	r2, [pc, #132]	; (1fdc <sercom_init+0xb4>)
    1f56:	6a13      	ldr	r3, [r2, #32]
    1f58:	2104      	movs	r1, #4
    1f5a:	430b      	orrs	r3, r1
    1f5c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    1f5e:	4b20      	ldr	r3, [pc, #128]	; (1fe0 <sercom_init+0xb8>)
    1f60:	4a22      	ldr	r2, [pc, #136]	; (1fec <sercom_init+0xc4>)
    1f62:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    1f64:	4b1e      	ldr	r3, [pc, #120]	; (1fe0 <sercom_init+0xb8>)
    1f66:	785b      	ldrb	r3, [r3, #1]
    1f68:	b25b      	sxtb	r3, r3
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	dbfa      	blt.n	1f64 <sercom_init+0x3c>
	
	return true;
    1f6e:	2001      	movs	r0, #1
    1f70:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    1f72:	2000      	movs	r0, #0
    1f74:	e7fc      	b.n	1f70 <sercom_init+0x48>
    1f76:	4b1e      	ldr	r3, [pc, #120]	; (1ff0 <sercom_init+0xc8>)
    1f78:	4298      	cmp	r0, r3
    1f7a:	d01f      	beq.n	1fbc <sercom_init+0x94>
    1f7c:	4b1d      	ldr	r3, [pc, #116]	; (1ff4 <sercom_init+0xcc>)
    1f7e:	4298      	cmp	r0, r3
    1f80:	d108      	bne.n	1f94 <sercom_init+0x6c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    1f82:	4a16      	ldr	r2, [pc, #88]	; (1fdc <sercom_init+0xb4>)
    1f84:	6a13      	ldr	r3, [r2, #32]
    1f86:	2180      	movs	r1, #128	; 0x80
    1f88:	430b      	orrs	r3, r1
    1f8a:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    1f8c:	4b14      	ldr	r3, [pc, #80]	; (1fe0 <sercom_init+0xb8>)
    1f8e:	4a1a      	ldr	r2, [pc, #104]	; (1ff8 <sercom_init+0xd0>)
    1f90:	805a      	strh	r2, [r3, #2]
		break;
    1f92:	e7e7      	b.n	1f64 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    1f94:	2000      	movs	r0, #0
    1f96:	e7eb      	b.n	1f70 <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    1f98:	4a10      	ldr	r2, [pc, #64]	; (1fdc <sercom_init+0xb4>)
    1f9a:	6a13      	ldr	r3, [r2, #32]
    1f9c:	2108      	movs	r1, #8
    1f9e:	430b      	orrs	r3, r1
    1fa0:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    1fa2:	4b0f      	ldr	r3, [pc, #60]	; (1fe0 <sercom_init+0xb8>)
    1fa4:	4a15      	ldr	r2, [pc, #84]	; (1ffc <sercom_init+0xd4>)
    1fa6:	805a      	strh	r2, [r3, #2]
		break;
    1fa8:	e7dc      	b.n	1f64 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    1faa:	4a0c      	ldr	r2, [pc, #48]	; (1fdc <sercom_init+0xb4>)
    1fac:	6a13      	ldr	r3, [r2, #32]
    1fae:	2120      	movs	r1, #32
    1fb0:	430b      	orrs	r3, r1
    1fb2:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    1fb4:	4b0a      	ldr	r3, [pc, #40]	; (1fe0 <sercom_init+0xb8>)
    1fb6:	4a12      	ldr	r2, [pc, #72]	; (2000 <STACK_SIZE>)
    1fb8:	805a      	strh	r2, [r3, #2]
		break;
    1fba:	e7d3      	b.n	1f64 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    1fbc:	4a07      	ldr	r2, [pc, #28]	; (1fdc <sercom_init+0xb4>)
    1fbe:	6a13      	ldr	r3, [r2, #32]
    1fc0:	2140      	movs	r1, #64	; 0x40
    1fc2:	430b      	orrs	r3, r1
    1fc4:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    1fc6:	4b06      	ldr	r3, [pc, #24]	; (1fe0 <sercom_init+0xb8>)
    1fc8:	4a0e      	ldr	r2, [pc, #56]	; (2004 <STACK_SIZE+0x4>)
    1fca:	805a      	strh	r2, [r3, #2]
		break;
    1fcc:	e7ca      	b.n	1f64 <sercom_init+0x3c>
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	42001400 	.word	0x42001400
    1fd4:	42000c00 	.word	0x42000c00
    1fd8:	42001000 	.word	0x42001000
    1fdc:	40000400 	.word	0x40000400
    1fe0:	40000c00 	.word	0x40000c00
    1fe4:	00004016 	.word	0x00004016
    1fe8:	42000800 	.word	0x42000800
    1fec:	00004014 	.word	0x00004014
    1ff0:	42001800 	.word	0x42001800
    1ff4:	42001c00 	.word	0x42001c00
    1ff8:	00004019 	.word	0x00004019
    1ffc:	00004015 	.word	0x00004015
    2000:	00004017 	.word	0x00004017
    2004:	00004018 	.word	0x00004018

00002008 <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2008:	b570      	push	{r4, r5, r6, lr}
    200a:	0006      	movs	r6, r0
    200c:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    200e:	4b0a      	ldr	r3, [pc, #40]	; (2038 <spi_set_baud+0x30>)
    2010:	4798      	blx	r3
    2012:	1e04      	subs	r4, r0, #0
    2014:	d00e      	beq.n	2034 <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    2016:	0068      	lsls	r0, r5, #1
    2018:	4b08      	ldr	r3, [pc, #32]	; (203c <spi_set_baud+0x34>)
    201a:	4798      	blx	r3
    201c:	1c01      	adds	r1, r0, #0
    201e:	4b08      	ldr	r3, [pc, #32]	; (2040 <spi_set_baud+0x38>)
    2020:	4808      	ldr	r0, [pc, #32]	; (2044 <spi_set_baud+0x3c>)
    2022:	4798      	blx	r3
    2024:	4b08      	ldr	r3, [pc, #32]	; (2048 <spi_set_baud+0x40>)
    2026:	21fe      	movs	r1, #254	; 0xfe
    2028:	0589      	lsls	r1, r1, #22
    202a:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    202c:	4b07      	ldr	r3, [pc, #28]	; (204c <spi_set_baud+0x44>)
    202e:	4798      	blx	r3
    2030:	b2c0      	uxtb	r0, r0
    2032:	7330      	strb	r0, [r6, #12]
	return true;
}
    2034:	0020      	movs	r0, r4
    2036:	bd70      	pop	{r4, r5, r6, pc}
    2038:	00001ec9 	.word	0x00001ec9
    203c:	00005041 	.word	0x00005041
    2040:	000045fd 	.word	0x000045fd
    2044:	4c371b00 	.word	0x4c371b00
    2048:	00004c45 	.word	0x00004c45
    204c:	000042c9 	.word	0x000042c9

00002050 <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    2050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2052:	46ce      	mov	lr, r9
    2054:	4647      	mov	r7, r8
    2056:	b580      	push	{r7, lr}
    2058:	0004      	movs	r4, r0
    205a:	000d      	movs	r5, r1
    205c:	0017      	movs	r7, r2
    205e:	001e      	movs	r6, r3
    2060:	ab08      	add	r3, sp, #32
    2062:	781b      	ldrb	r3, [r3, #0]
    2064:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    2066:	4b12      	ldr	r3, [pc, #72]	; (20b0 <spi_init+0x60>)
    2068:	4798      	blx	r3
    206a:	4680      	mov	r8, r0
    206c:	2800      	cmp	r0, #0
    206e:	d104      	bne.n	207a <spi_init+0x2a>
}
    2070:	4640      	mov	r0, r8
    2072:	bcc0      	pop	{r6, r7}
    2074:	46b9      	mov	r9, r7
    2076:	46b0      	mov	r8, r6
    2078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    207a:	076d      	lsls	r5, r5, #29
    207c:	073f      	lsls	r7, r7, #28
    207e:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2080:	0536      	lsls	r6, r6, #20
    2082:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    2084:	464b      	mov	r3, r9
    2086:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2088:	431d      	orrs	r5, r3
    208a:	230c      	movs	r3, #12
    208c:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    208e:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    2090:	2380      	movs	r3, #128	; 0x80
    2092:	029b      	lsls	r3, r3, #10
    2094:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    2096:	9909      	ldr	r1, [sp, #36]	; 0x24
    2098:	0020      	movs	r0, r4
    209a:	4b06      	ldr	r3, [pc, #24]	; (20b4 <spi_init+0x64>)
    209c:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    209e:	6823      	ldr	r3, [r4, #0]
    20a0:	2202      	movs	r2, #2
    20a2:	4313      	orrs	r3, r2
    20a4:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    20a6:	69e3      	ldr	r3, [r4, #28]
    20a8:	079b      	lsls	r3, r3, #30
    20aa:	d4fc      	bmi.n	20a6 <spi_init+0x56>
    20ac:	e7e0      	b.n	2070 <spi_init+0x20>
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	00001f29 	.word	0x00001f29
    20b4:	00002009 	.word	0x00002009

000020b8 <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    20b8:	7e03      	ldrb	r3, [r0, #24]
    20ba:	07db      	lsls	r3, r3, #31
    20bc:	d5fc      	bpl.n	20b8 <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    20be:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    20c0:	7e03      	ldrb	r3, [r0, #24]
    20c2:	079b      	lsls	r3, r3, #30
    20c4:	d5fc      	bpl.n	20c0 <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    20c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    20c8:	b2c0      	uxtb	r0, r0
}
    20ca:	4770      	bx	lr

000020cc <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    20cc:	e000      	b.n	20d0 <spi_flush+0x4>
    20ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
    20d0:	7e03      	ldrb	r3, [r0, #24]
    20d2:	075b      	lsls	r3, r3, #29
    20d4:	d4fb      	bmi.n	20ce <spi_flush+0x2>
    20d6:	4770      	bx	lr

000020d8 <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    20d8:	4a27      	ldr	r2, [pc, #156]	; (2178 <set_clock_48m+0xa0>)
    20da:	6853      	ldr	r3, [r2, #4]
    20dc:	2102      	movs	r1, #2
    20de:	430b      	orrs	r3, r1
    20e0:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    20e2:	4a26      	ldr	r2, [pc, #152]	; (217c <set_clock_48m+0xa4>)
    20e4:	4b26      	ldr	r3, [pc, #152]	; (2180 <set_clock_48m+0xa8>)
    20e6:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    20e8:	8a93      	ldrh	r3, [r2, #20]
    20ea:	430b      	orrs	r3, r1
    20ec:	b29b      	uxth	r3, r3
    20ee:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    20f0:	4b22      	ldr	r3, [pc, #136]	; (217c <set_clock_48m+0xa4>)
    20f2:	68db      	ldr	r3, [r3, #12]
    20f4:	079b      	lsls	r3, r3, #30
    20f6:	d5fb      	bpl.n	20f0 <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    20f8:	4b22      	ldr	r3, [pc, #136]	; (2184 <set_clock_48m+0xac>)
    20fa:	2202      	movs	r2, #2
    20fc:	32ff      	adds	r2, #255	; 0xff
    20fe:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    2100:	4a21      	ldr	r2, [pc, #132]	; (2188 <set_clock_48m+0xb0>)
    2102:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2104:	4b1f      	ldr	r3, [pc, #124]	; (2184 <set_clock_48m+0xac>)
    2106:	785b      	ldrb	r3, [r3, #1]
    2108:	b25b      	sxtb	r3, r3
    210a:	2b00      	cmp	r3, #0
    210c:	dbfa      	blt.n	2104 <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    210e:	4b1d      	ldr	r3, [pc, #116]	; (2184 <set_clock_48m+0xac>)
    2110:	2282      	movs	r2, #130	; 0x82
    2112:	01d2      	lsls	r2, r2, #7
    2114:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2116:	4b19      	ldr	r3, [pc, #100]	; (217c <set_clock_48m+0xa4>)
    2118:	68db      	ldr	r3, [r3, #12]
    211a:	06db      	lsls	r3, r3, #27
    211c:	d5fb      	bpl.n	2116 <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    211e:	4b17      	ldr	r3, [pc, #92]	; (217c <set_clock_48m+0xa4>)
    2120:	2202      	movs	r2, #2
    2122:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2124:	4b15      	ldr	r3, [pc, #84]	; (217c <set_clock_48m+0xa4>)
    2126:	68db      	ldr	r3, [r3, #12]
    2128:	06db      	lsls	r3, r3, #27
    212a:	d5fb      	bpl.n	2124 <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    212c:	4b13      	ldr	r3, [pc, #76]	; (217c <set_clock_48m+0xa4>)
    212e:	4a17      	ldr	r2, [pc, #92]	; (218c <set_clock_48m+0xb4>)
    2130:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2132:	4b12      	ldr	r3, [pc, #72]	; (217c <set_clock_48m+0xa4>)
    2134:	68db      	ldr	r3, [r3, #12]
    2136:	06db      	lsls	r3, r3, #27
    2138:	d5fb      	bpl.n	2132 <set_clock_48m+0x5a>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    213a:	4b15      	ldr	r3, [pc, #84]	; (2190 <set_clock_48m+0xb8>)
    213c:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    213e:	4b0f      	ldr	r3, [pc, #60]	; (217c <set_clock_48m+0xa4>)
    2140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2142:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2144:	4b0d      	ldr	r3, [pc, #52]	; (217c <set_clock_48m+0xa4>)
    2146:	68db      	ldr	r3, [r3, #12]
    2148:	06db      	lsls	r3, r3, #27
    214a:	d5fb      	bpl.n	2144 <set_clock_48m+0x6c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    214c:	4a0b      	ldr	r2, [pc, #44]	; (217c <set_clock_48m+0xa4>)
    214e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2150:	4910      	ldr	r1, [pc, #64]	; (2194 <set_clock_48m+0xbc>)
    2152:	430b      	orrs	r3, r1
    2154:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    2156:	4b09      	ldr	r3, [pc, #36]	; (217c <set_clock_48m+0xa4>)
    2158:	68db      	ldr	r3, [r3, #12]
    215a:	061b      	lsls	r3, r3, #24
    215c:	d5fb      	bpl.n	2156 <set_clock_48m+0x7e>
    215e:	4b07      	ldr	r3, [pc, #28]	; (217c <set_clock_48m+0xa4>)
    2160:	68db      	ldr	r3, [r3, #12]
    2162:	065b      	lsls	r3, r3, #25
    2164:	d5f7      	bpl.n	2156 <set_clock_48m+0x7e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    2166:	4b07      	ldr	r3, [pc, #28]	; (2184 <set_clock_48m+0xac>)
    2168:	4a0b      	ldr	r2, [pc, #44]	; (2198 <set_clock_48m+0xc0>)
    216a:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    216c:	4b05      	ldr	r3, [pc, #20]	; (2184 <set_clock_48m+0xac>)
    216e:	785b      	ldrb	r3, [r3, #1]
    2170:	b25b      	sxtb	r3, r3
    2172:	2b00      	cmp	r3, #0
    2174:	dbfa      	blt.n	216c <set_clock_48m+0x94>
}
    2176:	4770      	bx	lr
    2178:	41004000 	.word	0x41004000
    217c:	40000800 	.word	0x40000800
    2180:	0000040c 	.word	0x0000040c
    2184:	40000c00 	.word	0x40000c00
    2188:	00030501 	.word	0x00030501
    218c:	7dff05b9 	.word	0x7dff05b9
    2190:	00806020 	.word	0x00806020
    2194:	00000806 	.word	0x00000806
    2198:	00030700 	.word	0x00030700

0000219c <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    219c:	3801      	subs	r0, #1
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	46c0      	nop			; (mov r8, r8)
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	46c0      	nop			; (mov r8, r8)
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	d1f8      	bne.n	219c <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    21aa:	4770      	bx	lr

000021ac <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    21ac:	4a14      	ldr	r2, [pc, #80]	; (2200 <init_timer+0x54>)
    21ae:	6a11      	ldr	r1, [r2, #32]
    21b0:	2380      	movs	r3, #128	; 0x80
    21b2:	015b      	lsls	r3, r3, #5
    21b4:	430b      	orrs	r3, r1
    21b6:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    21b8:	4b12      	ldr	r3, [pc, #72]	; (2204 <init_timer+0x58>)
    21ba:	4a13      	ldr	r2, [pc, #76]	; (2208 <init_timer+0x5c>)
    21bc:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    21be:	4b11      	ldr	r3, [pc, #68]	; (2204 <init_timer+0x58>)
    21c0:	785b      	ldrb	r3, [r3, #1]
    21c2:	b25b      	sxtb	r3, r3
    21c4:	2b00      	cmp	r3, #0
    21c6:	dbfa      	blt.n	21be <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    21c8:	4b10      	ldr	r3, [pc, #64]	; (220c <init_timer+0x60>)
    21ca:	2208      	movs	r2, #8
    21cc:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    21ce:	4b0f      	ldr	r3, [pc, #60]	; (220c <init_timer+0x60>)
    21d0:	7bdb      	ldrb	r3, [r3, #15]
    21d2:	b25b      	sxtb	r3, r3
    21d4:	2b00      	cmp	r3, #0
    21d6:	dbfa      	blt.n	21ce <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    21d8:	4a0c      	ldr	r2, [pc, #48]	; (220c <init_timer+0x60>)
    21da:	8813      	ldrh	r3, [r2, #0]
    21dc:	2102      	movs	r1, #2
    21de:	430b      	orrs	r3, r1
    21e0:	b29b      	uxth	r3, r3
    21e2:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    21e4:	4b09      	ldr	r3, [pc, #36]	; (220c <init_timer+0x60>)
    21e6:	7bdb      	ldrb	r3, [r3, #15]
    21e8:	b25b      	sxtb	r3, r3
    21ea:	2b00      	cmp	r3, #0
    21ec:	dbfa      	blt.n	21e4 <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    21ee:	4b07      	ldr	r3, [pc, #28]	; (220c <init_timer+0x60>)
    21f0:	4a07      	ldr	r2, [pc, #28]	; (2210 <init_timer+0x64>)
    21f2:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    21f4:	4b05      	ldr	r3, [pc, #20]	; (220c <init_timer+0x60>)
    21f6:	7bdb      	ldrb	r3, [r3, #15]
    21f8:	b25b      	sxtb	r3, r3
    21fa:	2b00      	cmp	r3, #0
    21fc:	dbfa      	blt.n	21f4 <init_timer+0x48>
}
    21fe:	4770      	bx	lr
    2200:	40000400 	.word	0x40000400
    2204:	40000c00 	.word	0x40000c00
    2208:	0000401c 	.word	0x0000401c
    220c:	42003000 	.word	0x42003000
    2210:	00004010 	.word	0x00004010

00002214 <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    2214:	4b01      	ldr	r3, [pc, #4]	; (221c <read_timer_20ns+0x8>)
    2216:	6918      	ldr	r0, [r3, #16]
}
    2218:	4770      	bx	lr
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	42003000 	.word	0x42003000

00002220 <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    2220:	4b04      	ldr	r3, [pc, #16]	; (2234 <init_timer_interrupt+0x14>)
    2222:	2210      	movs	r2, #16
    2224:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2226:	4b03      	ldr	r3, [pc, #12]	; (2234 <init_timer_interrupt+0x14>)
    2228:	7bdb      	ldrb	r3, [r3, #15]
    222a:	b25b      	sxtb	r3, r3
    222c:	2b00      	cmp	r3, #0
    222e:	dbfa      	blt.n	2226 <init_timer_interrupt+0x6>
}
    2230:	4770      	bx	lr
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	42003000 	.word	0x42003000

00002238 <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2238:	4b02      	ldr	r3, [pc, #8]	; (2244 <timer_enable_interrupt+0xc>)
    223a:	2280      	movs	r2, #128	; 0x80
    223c:	0312      	lsls	r2, r2, #12
    223e:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    2240:	4770      	bx	lr
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	e000e100 	.word	0xe000e100

00002248 <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2248:	4a04      	ldr	r2, [pc, #16]	; (225c <timer_disable_interrupt+0x14>)
    224a:	2380      	movs	r3, #128	; 0x80
    224c:	2180      	movs	r1, #128	; 0x80
    224e:	0309      	lsls	r1, r1, #12
    2250:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2252:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2256:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    225a:	4770      	bx	lr
    225c:	e000e100 	.word	0xe000e100

00002260 <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <timer_clear_interrupt+0x14>)
    2262:	2210      	movs	r2, #16
    2264:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2266:	4a04      	ldr	r2, [pc, #16]	; (2278 <timer_clear_interrupt+0x18>)
    2268:	23c0      	movs	r3, #192	; 0xc0
    226a:	005b      	lsls	r3, r3, #1
    226c:	2180      	movs	r1, #128	; 0x80
    226e:	0309      	lsls	r1, r1, #12
    2270:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    2272:	4770      	bx	lr
    2274:	42003000 	.word	0x42003000
    2278:	e000e100 	.word	0xe000e100

0000227c <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    227c:	4a02      	ldr	r2, [pc, #8]	; (2288 <timer_set_interrupt_time+0xc>)
    227e:	6993      	ldr	r3, [r2, #24]
    2280:	4303      	orrs	r3, r0
    2282:	6193      	str	r3, [r2, #24]
    2284:	4770      	bx	lr
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	42003000 	.word	0x42003000

0000228c <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	0006      	movs	r6, r0
    2290:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    2292:	4b10      	ldr	r3, [pc, #64]	; (22d4 <uart_set_baud+0x48>)
    2294:	4798      	blx	r3
    2296:	1e04      	subs	r4, r0, #0
    2298:	d018      	beq.n	22cc <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    229a:	4b0f      	ldr	r3, [pc, #60]	; (22d8 <uart_set_baud+0x4c>)
    229c:	429d      	cmp	r5, r3
    229e:	d817      	bhi.n	22d0 <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    22a0:	4b0e      	ldr	r3, [pc, #56]	; (22dc <uart_set_baud+0x50>)
    22a2:	0028      	movs	r0, r5
    22a4:	4798      	blx	r3
    22a6:	4b0e      	ldr	r3, [pc, #56]	; (22e0 <uart_set_baud+0x54>)
    22a8:	490e      	ldr	r1, [pc, #56]	; (22e4 <uart_set_baud+0x58>)
    22aa:	4798      	blx	r3
    22ac:	4d0e      	ldr	r5, [pc, #56]	; (22e8 <uart_set_baud+0x5c>)
    22ae:	2183      	movs	r1, #131	; 0x83
    22b0:	05c9      	lsls	r1, r1, #23
    22b2:	47a8      	blx	r5
    22b4:	1c01      	adds	r1, r0, #0
    22b6:	4b0d      	ldr	r3, [pc, #52]	; (22ec <uart_set_baud+0x60>)
    22b8:	20fe      	movs	r0, #254	; 0xfe
    22ba:	0580      	lsls	r0, r0, #22
    22bc:	4798      	blx	r3
    22be:	218f      	movs	r1, #143	; 0x8f
    22c0:	05c9      	lsls	r1, r1, #23
    22c2:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    22c4:	4b0a      	ldr	r3, [pc, #40]	; (22f0 <uart_set_baud+0x64>)
    22c6:	4798      	blx	r3
    22c8:	b280      	uxth	r0, r0
    22ca:	81b0      	strh	r0, [r6, #12]
    return true;
}
    22cc:	0020      	movs	r0, r4
    22ce:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    22d0:	2400      	movs	r4, #0
    22d2:	e7fb      	b.n	22cc <uart_set_baud+0x40>
    22d4:	00001ec9 	.word	0x00001ec9
    22d8:	002dc6c0 	.word	0x002dc6c0
    22dc:	00005041 	.word	0x00005041
    22e0:	000045fd 	.word	0x000045fd
    22e4:	4c371b00 	.word	0x4c371b00
    22e8:	000049c9 	.word	0x000049c9
    22ec:	00004c45 	.word	0x00004c45
    22f0:	000042c9 	.word	0x000042c9

000022f4 <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    22f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22f6:	0004      	movs	r4, r0
    22f8:	000e      	movs	r6, r1
    22fa:	0017      	movs	r7, r2
    22fc:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    22fe:	4b11      	ldr	r3, [pc, #68]	; (2344 <uart_init+0x50>)
    2300:	4798      	blx	r3
    2302:	2800      	cmp	r0, #0
    2304:	d01c      	beq.n	2340 <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2306:	0536      	lsls	r6, r6, #20
    2308:	23c0      	movs	r3, #192	; 0xc0
    230a:	039b      	lsls	r3, r3, #14
    230c:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    230e:	043f      	lsls	r7, r7, #16
    2310:	22c0      	movs	r2, #192	; 0xc0
    2312:	0292      	lsls	r2, r2, #10
    2314:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2316:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    2318:	4b0b      	ldr	r3, [pc, #44]	; (2348 <uart_init+0x54>)
    231a:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    231c:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    231e:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    2320:	69e2      	ldr	r2, [r4, #28]
    2322:	0752      	lsls	r2, r2, #29
    2324:	d4fc      	bmi.n	2320 <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    2326:	0029      	movs	r1, r5
    2328:	0020      	movs	r0, r4
    232a:	4b08      	ldr	r3, [pc, #32]	; (234c <uart_init+0x58>)
    232c:	4798      	blx	r3
    232e:	2800      	cmp	r0, #0
    2330:	d006      	beq.n	2340 <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    2332:	6823      	ldr	r3, [r4, #0]
    2334:	2202      	movs	r2, #2
    2336:	4313      	orrs	r3, r2
    2338:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    233a:	69e3      	ldr	r3, [r4, #28]
    233c:	079b      	lsls	r3, r3, #30
    233e:	d4fc      	bmi.n	233a <uart_init+0x46>
}
    2340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	00001f29 	.word	0x00001f29
    2348:	40000004 	.word	0x40000004
    234c:	0000228d 	.word	0x0000228d

00002350 <uart_flush>:

void uart_flush(sercom_registers_t* sercom) {
    while (sercom->USART_INT.SERCOM_INTFLAG & SERCOM_USART_INT_INTFLAG_RXC_Msk) sercom->USART_INT.SERCOM_DATA;
    2350:	e000      	b.n	2354 <uart_flush+0x4>
    2352:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2354:	7e03      	ldrb	r3, [r0, #24]
    2356:	075b      	lsls	r3, r3, #29
    2358:	d4fb      	bmi.n	2352 <uart_flush+0x2>
}
    235a:	4770      	bx	lr

0000235c <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    235c:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    235e:	4b10      	ldr	r3, [pc, #64]	; (23a0 <usb_ep0_in_multi+0x44>)
    2360:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    2362:	2c40      	cmp	r4, #64	; 0x40
    2364:	d900      	bls.n	2368 <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    2366:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    2368:	0026      	movs	r6, r4
    236a:	4b0d      	ldr	r3, [pc, #52]	; (23a0 <usb_ep0_in_multi+0x44>)
    236c:	1d1d      	adds	r5, r3, #4
    236e:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2370:	0022      	movs	r2, r4
    2372:	0028      	movs	r0, r5
    2374:	4b0b      	ldr	r3, [pc, #44]	; (23a4 <usb_ep0_in_multi+0x48>)
    2376:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    2378:	2300      	movs	r3, #0
    237a:	0022      	movs	r2, r4
    237c:	0029      	movs	r1, r5
    237e:	2080      	movs	r0, #128	; 0x80
    2380:	4d09      	ldr	r5, [pc, #36]	; (23a8 <usb_ep0_in_multi+0x4c>)
    2382:	47a8      	blx	r5

	if (tsize == 0) {
    2384:	2c00      	cmp	r4, #0
    2386:	d007      	beq.n	2398 <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    2388:	4b05      	ldr	r3, [pc, #20]	; (23a0 <usb_ep0_in_multi+0x44>)
    238a:	881a      	ldrh	r2, [r3, #0]
    238c:	1b12      	subs	r2, r2, r4
    238e:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    2390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2392:	1992      	adds	r2, r2, r6
    2394:	645a      	str	r2, [r3, #68]	; 0x44
}
    2396:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    2398:	4b04      	ldr	r3, [pc, #16]	; (23ac <usb_ep0_in_multi+0x50>)
    239a:	4798      	blx	r3
    239c:	e7f4      	b.n	2388 <usb_ep0_in_multi+0x2c>
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	20000480 	.word	0x20000480
    23a4:	000051f9 	.word	0x000051f9
    23a8:	0000286d 	.word	0x0000286d
    23ac:	00002975 	.word	0x00002975

000023b0 <usb_handle_setup>:

void usb_handle_setup(void){
    23b0:	b510      	push	{r4, lr}
    23b2:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    23b4:	4b40      	ldr	r3, [pc, #256]	; (24b8 <usb_handle_setup+0x108>)
    23b6:	2248      	movs	r2, #72	; 0x48
    23b8:	5c9b      	ldrb	r3, [r3, r2]
    23ba:	3218      	adds	r2, #24
    23bc:	421a      	tst	r2, r3
    23be:	d177      	bne.n	24b0 <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    23c0:	4b3e      	ldr	r3, [pc, #248]	; (24bc <usb_handle_setup+0x10c>)
    23c2:	785b      	ldrb	r3, [r3, #1]
    23c4:	2b0b      	cmp	r3, #11
    23c6:	d870      	bhi.n	24aa <usb_handle_setup+0xfa>
    23c8:	009b      	lsls	r3, r3, #2
    23ca:	4a3d      	ldr	r2, [pc, #244]	; (24c0 <usb_handle_setup+0x110>)
    23cc:	58d3      	ldr	r3, [r2, r3]
    23ce:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    23d0:	4b39      	ldr	r3, [pc, #228]	; (24b8 <usb_handle_setup+0x108>)
    23d2:	2200      	movs	r2, #0
    23d4:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    23d6:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    23d8:	2002      	movs	r0, #2
    23da:	4b3a      	ldr	r3, [pc, #232]	; (24c4 <usb_handle_setup+0x114>)
    23dc:	4798      	blx	r3
				return usb_ep0_out();
    23de:	4b3a      	ldr	r3, [pc, #232]	; (24c8 <usb_handle_setup+0x118>)
    23e0:	4798      	blx	r3
    23e2:	e067      	b.n	24b4 <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    23e4:	2000      	movs	r0, #0
    23e6:	4b37      	ldr	r3, [pc, #220]	; (24c4 <usb_handle_setup+0x114>)
    23e8:	4798      	blx	r3
				return usb_ep0_out();
    23ea:	4b37      	ldr	r3, [pc, #220]	; (24c8 <usb_handle_setup+0x118>)
    23ec:	4798      	blx	r3
    23ee:	e061      	b.n	24b4 <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    23f0:	2000      	movs	r0, #0
    23f2:	4b34      	ldr	r3, [pc, #208]	; (24c4 <usb_handle_setup+0x114>)
    23f4:	4798      	blx	r3
				return usb_ep0_out();
    23f6:	4b34      	ldr	r3, [pc, #208]	; (24c8 <usb_handle_setup+0x118>)
    23f8:	4798      	blx	r3
    23fa:	e05b      	b.n	24b4 <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    23fc:	4b2f      	ldr	r3, [pc, #188]	; (24bc <usb_handle_setup+0x10c>)
    23fe:	8859      	ldrh	r1, [r3, #2]
    2400:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    2402:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    2404:	2300      	movs	r3, #0
    2406:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2408:	aa01      	add	r2, sp, #4
    240a:	4b30      	ldr	r3, [pc, #192]	; (24cc <usb_handle_setup+0x11c>)
    240c:	4798      	blx	r3

				if (size && descriptor){
    240e:	2800      	cmp	r0, #0
    2410:	d019      	beq.n	2446 <usb_handle_setup+0x96>
    2412:	9901      	ldr	r1, [sp, #4]
    2414:	2900      	cmp	r1, #0
    2416:	d016      	beq.n	2446 <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    2418:	4a28      	ldr	r2, [pc, #160]	; (24bc <usb_handle_setup+0x10c>)
    241a:	88d2      	ldrh	r2, [r2, #6]
    241c:	4282      	cmp	r2, r0
    241e:	d300      	bcc.n	2422 <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2420:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    2422:	4b2b      	ldr	r3, [pc, #172]	; (24d0 <usb_handle_setup+0x120>)
    2424:	4299      	cmp	r1, r3
    2426:	d005      	beq.n	2434 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    2428:	4b23      	ldr	r3, [pc, #140]	; (24b8 <usb_handle_setup+0x108>)
    242a:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    242c:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    242e:	4b29      	ldr	r3, [pc, #164]	; (24d4 <usb_handle_setup+0x124>)
    2430:	4798      	blx	r3
					}

					return;
    2432:	e03f      	b.n	24b4 <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    2434:	4920      	ldr	r1, [pc, #128]	; (24b8 <usb_handle_setup+0x108>)
    2436:	2300      	movs	r3, #0
    2438:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    243a:	3104      	adds	r1, #4
    243c:	3301      	adds	r3, #1
    243e:	2080      	movs	r0, #128	; 0x80
    2440:	4c25      	ldr	r4, [pc, #148]	; (24d8 <usb_handle_setup+0x128>)
    2442:	47a0      	blx	r4
    2444:	e036      	b.n	24b4 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2446:	4b25      	ldr	r3, [pc, #148]	; (24dc <usb_handle_setup+0x12c>)
    2448:	4798      	blx	r3
    244a:	e033      	b.n	24b4 <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    244c:	4b1a      	ldr	r3, [pc, #104]	; (24b8 <usb_handle_setup+0x108>)
    244e:	2250      	movs	r2, #80	; 0x50
    2450:	5c9a      	ldrb	r2, [r3, r2]
    2452:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    2454:	2001      	movs	r0, #1
    2456:	4b1b      	ldr	r3, [pc, #108]	; (24c4 <usb_handle_setup+0x114>)
    2458:	4798      	blx	r3
				return usb_ep0_out();
    245a:	4b1b      	ldr	r3, [pc, #108]	; (24c8 <usb_handle_setup+0x118>)
    245c:	4798      	blx	r3
    245e:	e029      	b.n	24b4 <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    2460:	4b16      	ldr	r3, [pc, #88]	; (24bc <usb_handle_setup+0x10c>)
    2462:	7898      	ldrb	r0, [r3, #2]
    2464:	4b1e      	ldr	r3, [pc, #120]	; (24e0 <usb_handle_setup+0x130>)
    2466:	4798      	blx	r3
    2468:	2800      	cmp	r0, #0
    246a:	d00b      	beq.n	2484 <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    246c:	2000      	movs	r0, #0
    246e:	4b15      	ldr	r3, [pc, #84]	; (24c4 <usb_handle_setup+0x114>)
    2470:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    2472:	4b11      	ldr	r3, [pc, #68]	; (24b8 <usb_handle_setup+0x108>)
    2474:	001a      	movs	r2, r3
    2476:	3248      	adds	r2, #72	; 0x48
    2478:	7891      	ldrb	r1, [r2, #2]
    247a:	2250      	movs	r2, #80	; 0x50
    247c:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    247e:	4b12      	ldr	r3, [pc, #72]	; (24c8 <usb_handle_setup+0x118>)
    2480:	4798      	blx	r3
    2482:	e017      	b.n	24b4 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2484:	4b15      	ldr	r3, [pc, #84]	; (24dc <usb_handle_setup+0x12c>)
    2486:	4798      	blx	r3
    2488:	e014      	b.n	24b4 <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    248a:	4b0c      	ldr	r3, [pc, #48]	; (24bc <usb_handle_setup+0x10c>)
    248c:	8859      	ldrh	r1, [r3, #2]
    248e:	8898      	ldrh	r0, [r3, #4]
    2490:	4b14      	ldr	r3, [pc, #80]	; (24e4 <usb_handle_setup+0x134>)
    2492:	4798      	blx	r3
    2494:	2800      	cmp	r0, #0
    2496:	d005      	beq.n	24a4 <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    2498:	2000      	movs	r0, #0
    249a:	4b0a      	ldr	r3, [pc, #40]	; (24c4 <usb_handle_setup+0x114>)
    249c:	4798      	blx	r3
					return usb_ep0_out();
    249e:	4b0a      	ldr	r3, [pc, #40]	; (24c8 <usb_handle_setup+0x118>)
    24a0:	4798      	blx	r3
    24a2:	e007      	b.n	24b4 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    24a4:	4b0d      	ldr	r3, [pc, #52]	; (24dc <usb_handle_setup+0x12c>)
    24a6:	4798      	blx	r3
    24a8:	e004      	b.n	24b4 <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    24aa:	4b0c      	ldr	r3, [pc, #48]	; (24dc <usb_handle_setup+0x12c>)
    24ac:	4798      	blx	r3
    24ae:	e001      	b.n	24b4 <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    24b0:	4b0d      	ldr	r3, [pc, #52]	; (24e8 <usb_handle_setup+0x138>)
    24b2:	4798      	blx	r3
}
    24b4:	b002      	add	sp, #8
    24b6:	bd10      	pop	{r4, pc}
    24b8:	20000480 	.word	0x20000480
    24bc:	200004c8 	.word	0x200004c8
    24c0:	00005674 	.word	0x00005674
    24c4:	0000298d 	.word	0x0000298d
    24c8:	00002975 	.word	0x00002975
    24cc:	00002d0d 	.word	0x00002d0d
    24d0:	20000484 	.word	0x20000484
    24d4:	0000235d 	.word	0x0000235d
    24d8:	0000286d 	.word	0x0000286d
    24dc:	000029a5 	.word	0x000029a5
    24e0:	00002cd1 	.word	0x00002cd1
    24e4:	00002ce9 	.word	0x00002ce9
    24e8:	00002bc1 	.word	0x00002bc1

000024ec <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    24ec:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    24ee:	4b05      	ldr	r3, [pc, #20]	; (2504 <usb_handle_control_out_complete+0x18>)
    24f0:	2248      	movs	r2, #72	; 0x48
    24f2:	5c9b      	ldrb	r3, [r3, r2]
    24f4:	3218      	adds	r2, #24
    24f6:	421a      	tst	r2, r3
    24f8:	d100      	bne.n	24fc <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    24fa:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    24fc:	4b02      	ldr	r3, [pc, #8]	; (2508 <usb_handle_control_out_complete+0x1c>)
    24fe:	4798      	blx	r3
}
    2500:	e7fb      	b.n	24fa <usb_handle_control_out_complete+0xe>
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	20000480 	.word	0x20000480
    2508:	00002ccf 	.word	0x00002ccf

0000250c <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    250c:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    250e:	4b0d      	ldr	r3, [pc, #52]	; (2544 <usb_handle_control_in_complete+0x38>)
    2510:	2248      	movs	r2, #72	; 0x48
    2512:	5c9b      	ldrb	r3, [r3, r2]
    2514:	3218      	adds	r2, #24
    2516:	421a      	tst	r2, r3
    2518:	d110      	bne.n	253c <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    251a:	4b0b      	ldr	r3, [pc, #44]	; (2548 <usb_handle_control_in_complete+0x3c>)
    251c:	785b      	ldrb	r3, [r3, #1]
    251e:	2b05      	cmp	r3, #5
    2520:	d002      	beq.n	2528 <usb_handle_control_in_complete+0x1c>
    2522:	2b06      	cmp	r3, #6
    2524:	d007      	beq.n	2536 <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    2526:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    2528:	4b07      	ldr	r3, [pc, #28]	; (2548 <usb_handle_control_in_complete+0x3c>)
    252a:	789b      	ldrb	r3, [r3, #2]
    252c:	207f      	movs	r0, #127	; 0x7f
    252e:	4018      	ands	r0, r3
    2530:	4b06      	ldr	r3, [pc, #24]	; (254c <usb_handle_control_in_complete+0x40>)
    2532:	4798      	blx	r3
				return;
    2534:	e7f7      	b.n	2526 <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    2536:	4b06      	ldr	r3, [pc, #24]	; (2550 <usb_handle_control_in_complete+0x44>)
    2538:	4798      	blx	r3
				return;
    253a:	e7f4      	b.n	2526 <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    253c:	4b05      	ldr	r3, [pc, #20]	; (2554 <usb_handle_control_in_complete+0x48>)
    253e:	4798      	blx	r3
    2540:	e7f1      	b.n	2526 <usb_handle_control_in_complete+0x1a>
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	20000480 	.word	0x20000480
    2548:	200004c8 	.word	0x200004c8
    254c:	000026b9 	.word	0x000026b9
    2550:	0000235d 	.word	0x0000235d
    2554:	00002ccd 	.word	0x00002ccd

00002558 <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    2558:	b570      	push	{r4, r5, r6, lr}
    255a:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    255c:	4b0b      	ldr	r3, [pc, #44]	; (258c <usb_string_to_descriptor+0x34>)
    255e:	4798      	blx	r3
    2560:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    2562:	281f      	cmp	r0, #31
    2564:	d900      	bls.n	2568 <usb_string_to_descriptor+0x10>
    2566:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    2568:	1c43      	adds	r3, r0, #1
    256a:	005b      	lsls	r3, r3, #1
    256c:	4a08      	ldr	r2, [pc, #32]	; (2590 <usb_string_to_descriptor+0x38>)
    256e:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    2570:	2303      	movs	r3, #3
    2572:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    2574:	2200      	movs	r2, #0
    2576:	e005      	b.n	2584 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    2578:	5cb1      	ldrb	r1, [r6, r2]
    257a:	4b05      	ldr	r3, [pc, #20]	; (2590 <usb_string_to_descriptor+0x38>)
    257c:	0054      	lsls	r4, r2, #1
    257e:	191b      	adds	r3, r3, r4
    2580:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    2582:	3201      	adds	r2, #1
    2584:	4290      	cmp	r0, r2
    2586:	dcf7      	bgt.n	2578 <usb_string_to_descriptor+0x20>
	}
	return desc;
    2588:	4802      	ldr	r0, [pc, #8]	; (2594 <usb_string_to_descriptor+0x3c>)
}
    258a:	bd70      	pop	{r4, r5, r6, pc}
    258c:	00005289 	.word	0x00005289
    2590:	20000480 	.word	0x20000480
    2594:	20000484 	.word	0x20000484

00002598 <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    2598:	4a12      	ldr	r2, [pc, #72]	; (25e4 <usb_reset+0x4c>)
    259a:	4b13      	ldr	r3, [pc, #76]	; (25e8 <usb_reset+0x50>)
    259c:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    259e:	685a      	ldr	r2, [r3, #4]
    25a0:	4812      	ldr	r0, [pc, #72]	; (25ec <usb_reset+0x54>)
    25a2:	4002      	ands	r2, r0
    25a4:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    25a6:	6859      	ldr	r1, [r3, #4]
    25a8:	22c0      	movs	r2, #192	; 0xc0
    25aa:	0592      	lsls	r2, r2, #22
    25ac:	4311      	orrs	r1, r2
    25ae:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    25b0:	490f      	ldr	r1, [pc, #60]	; (25f0 <usb_reset+0x58>)
    25b2:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    25b4:	6959      	ldr	r1, [r3, #20]
    25b6:	4001      	ands	r1, r0
    25b8:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    25ba:	6959      	ldr	r1, [r3, #20]
    25bc:	430a      	orrs	r2, r1
    25be:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    25c0:	695a      	ldr	r2, [r3, #20]
    25c2:	0052      	lsls	r2, r2, #1
    25c4:	0852      	lsrs	r2, r2, #1
    25c6:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    25c8:	6959      	ldr	r1, [r3, #20]
    25ca:	2280      	movs	r2, #128	; 0x80
    25cc:	0612      	lsls	r2, r2, #24
    25ce:	430a      	orrs	r2, r1
    25d0:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    25d2:	4b08      	ldr	r3, [pc, #32]	; (25f4 <usb_reset+0x5c>)
    25d4:	220a      	movs	r2, #10
    25d6:	32ff      	adds	r2, #255	; 0xff
    25d8:	2110      	movs	r1, #16
    25da:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    25dc:	3a09      	subs	r2, #9
    25de:	3101      	adds	r1, #1
    25e0:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    25e2:	4770      	bx	lr
    25e4:	200004d4 	.word	0x200004d4
    25e8:	20000560 	.word	0x20000560
    25ec:	8fffffff 	.word	0x8fffffff
    25f0:	20000484 	.word	0x20000484
    25f4:	41005000 	.word	0x41005000

000025f8 <usb_init>:
void usb_init(){
    25f8:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    25fa:	4a26      	ldr	r2, [pc, #152]	; (2694 <usb_init+0x9c>)
    25fc:	69d3      	ldr	r3, [r2, #28]
    25fe:	2120      	movs	r1, #32
    2600:	430b      	orrs	r3, r1
    2602:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    2604:	4b24      	ldr	r3, [pc, #144]	; (2698 <usb_init+0xa0>)
    2606:	4a25      	ldr	r2, [pc, #148]	; (269c <usb_init+0xa4>)
    2608:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    260a:	4b25      	ldr	r3, [pc, #148]	; (26a0 <usb_init+0xa8>)
    260c:	2201      	movs	r2, #1
    260e:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    2610:	4b23      	ldr	r3, [pc, #140]	; (26a0 <usb_init+0xa8>)
    2612:	789b      	ldrb	r3, [r3, #2]
    2614:	07db      	lsls	r3, r3, #31
    2616:	d4fb      	bmi.n	2610 <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    2618:	4b21      	ldr	r3, [pc, #132]	; (26a0 <usb_init+0xa8>)
    261a:	2202      	movs	r2, #2
    261c:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    261e:	4b20      	ldr	r3, [pc, #128]	; (26a0 <usb_init+0xa8>)
    2620:	789b      	ldrb	r3, [r3, #2]
    2622:	079b      	lsls	r3, r3, #30
    2624:	d4fb      	bmi.n	261e <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2626:	4b1f      	ldr	r3, [pc, #124]	; (26a4 <usb_init+0xac>)
    2628:	685b      	ldr	r3, [r3, #4]
    262a:	035b      	lsls	r3, r3, #13
    262c:	22f8      	movs	r2, #248	; 0xf8
    262e:	0292      	lsls	r2, r2, #10
    2630:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    2632:	2b1f      	cmp	r3, #31
    2634:	d028      	beq.n	2688 <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2636:	4a1b      	ldr	r2, [pc, #108]	; (26a4 <usb_init+0xac>)
    2638:	6851      	ldr	r1, [r2, #4]
    263a:	0489      	lsls	r1, r1, #18
    263c:	22f8      	movs	r2, #248	; 0xf8
    263e:	03d2      	lsls	r2, r2, #15
    2640:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    2642:	291f      	cmp	r1, #31
    2644:	d022      	beq.n	268c <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2646:	4a17      	ldr	r2, [pc, #92]	; (26a4 <usb_init+0xac>)
    2648:	6852      	ldr	r2, [r2, #4]
    264a:	05d2      	lsls	r2, r2, #23
    264c:	20e0      	movs	r0, #224	; 0xe0
    264e:	0480      	lsls	r0, r0, #18
    2650:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    2652:	2a07      	cmp	r2, #7
    2654:	d01c      	beq.n	2690 <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2656:	019b      	lsls	r3, r3, #6
    2658:	20f8      	movs	r0, #248	; 0xf8
    265a:	00c0      	lsls	r0, r0, #3
    265c:	4003      	ands	r3, r0
    265e:	201f      	movs	r0, #31
    2660:	4001      	ands	r1, r0
    2662:	430b      	orrs	r3, r1
    2664:	0312      	lsls	r2, r2, #12
    2666:	4313      	orrs	r3, r2
    2668:	4d0d      	ldr	r5, [pc, #52]	; (26a0 <usb_init+0xa8>)
    266a:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    266c:	4b0e      	ldr	r3, [pc, #56]	; (26a8 <usb_init+0xb0>)
    266e:	781a      	ldrb	r2, [r3, #0]
    2670:	0112      	lsls	r2, r2, #4
    2672:	4c0e      	ldr	r4, [pc, #56]	; (26ac <usb_init+0xb4>)
    2674:	2100      	movs	r1, #0
    2676:	0020      	movs	r0, r4
    2678:	4b0d      	ldr	r3, [pc, #52]	; (26b0 <usb_init+0xb8>)
    267a:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    267c:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    267e:	2308      	movs	r3, #8
    2680:	832b      	strh	r3, [r5, #24]
	usb_reset();
    2682:	4b0c      	ldr	r3, [pc, #48]	; (26b4 <usb_init+0xbc>)
    2684:	4798      	blx	r3
}
    2686:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    2688:	3b1a      	subs	r3, #26
    268a:	e7d4      	b.n	2636 <usb_init+0x3e>
		pad_transp = 29;
    268c:	3902      	subs	r1, #2
    268e:	e7da      	b.n	2646 <usb_init+0x4e>
		pad_trim = 3;
    2690:	3a04      	subs	r2, #4
    2692:	e7e0      	b.n	2656 <usb_init+0x5e>
    2694:	40000400 	.word	0x40000400
    2698:	40000c00 	.word	0x40000c00
    269c:	00004006 	.word	0x00004006
    26a0:	41005000 	.word	0x41005000
    26a4:	00806020 	.word	0x00806020
    26a8:	000056f6 	.word	0x000056f6
    26ac:	20000560 	.word	0x20000560
    26b0:	00005101 	.word	0x00005101
    26b4:	00002599 	.word	0x00002599

000026b8 <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    26b8:	2380      	movs	r3, #128	; 0x80
    26ba:	425b      	negs	r3, r3
    26bc:	4318      	orrs	r0, r3
    26be:	b2c0      	uxtb	r0, r0
    26c0:	4b01      	ldr	r3, [pc, #4]	; (26c8 <usb_set_address+0x10>)
    26c2:	7298      	strb	r0, [r3, #10]
}
    26c4:	4770      	bx	lr
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	41005000 	.word	0x41005000

000026cc <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    26cc:	b530      	push	{r4, r5, lr}
    26ce:	0003      	movs	r3, r0
	if (ep & 0x80) {
    26d0:	b240      	sxtb	r0, r0
    26d2:	2800      	cmp	r0, #0
    26d4:	db24      	blt.n	2720 <usb_enable_ep+0x54>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    26d6:	203f      	movs	r0, #63	; 0x3f
    26d8:	4018      	ands	r0, r3
    26da:	4b49      	ldr	r3, [pc, #292]	; (2800 <usb_enable_ep+0x134>)
    26dc:	0144      	lsls	r4, r0, #5
    26de:	191b      	adds	r3, r3, r4
    26e0:	685c      	ldr	r4, [r3, #4]
    26e2:	4d48      	ldr	r5, [pc, #288]	; (2804 <usb_enable_ep+0x138>)
    26e4:	402c      	ands	r4, r5
    26e6:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    26e8:	685b      	ldr	r3, [r3, #4]
    26ea:	2a08      	cmp	r2, #8
    26ec:	d95f      	bls.n	27ae <usb_enable_ep+0xe2>
    26ee:	2a10      	cmp	r2, #16
    26f0:	d800      	bhi.n	26f4 <usb_enable_ep+0x28>
    26f2:	e072      	b.n	27da <usb_enable_ep+0x10e>
    26f4:	2a20      	cmp	r2, #32
    26f6:	d800      	bhi.n	26fa <usb_enable_ep+0x2e>
    26f8:	e072      	b.n	27e0 <usb_enable_ep+0x114>
    26fa:	2a40      	cmp	r2, #64	; 0x40
    26fc:	d800      	bhi.n	2700 <usb_enable_ep+0x34>
    26fe:	e072      	b.n	27e6 <usb_enable_ep+0x11a>
    2700:	2a80      	cmp	r2, #128	; 0x80
    2702:	d800      	bhi.n	2706 <usb_enable_ep+0x3a>
    2704:	e072      	b.n	27ec <usb_enable_ep+0x120>
    2706:	2480      	movs	r4, #128	; 0x80
    2708:	0064      	lsls	r4, r4, #1
    270a:	42a2      	cmp	r2, r4
    270c:	d800      	bhi.n	2710 <usb_enable_ep+0x44>
    270e:	e070      	b.n	27f2 <usb_enable_ep+0x126>
    2710:	3401      	adds	r4, #1
    2712:	34ff      	adds	r4, #255	; 0xff
    2714:	42a2      	cmp	r2, r4
    2716:	d900      	bls.n	271a <usb_enable_ep+0x4e>
    2718:	e06e      	b.n	27f8 <usb_enable_ep+0x12c>
    271a:	22c0      	movs	r2, #192	; 0xc0
    271c:	05d2      	lsls	r2, r2, #23
    271e:	e047      	b.n	27b0 <usb_enable_ep+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2720:	203f      	movs	r0, #63	; 0x3f
    2722:	4003      	ands	r3, r0
    2724:	4836      	ldr	r0, [pc, #216]	; (2800 <usb_enable_ep+0x134>)
    2726:	015c      	lsls	r4, r3, #5
    2728:	1900      	adds	r0, r0, r4
    272a:	6944      	ldr	r4, [r0, #20]
    272c:	4d35      	ldr	r5, [pc, #212]	; (2804 <usb_enable_ep+0x138>)
    272e:	402c      	ands	r4, r5
    2730:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2732:	6940      	ldr	r0, [r0, #20]
    2734:	2a08      	cmp	r2, #8
    2736:	d912      	bls.n	275e <usb_enable_ep+0x92>
    2738:	2a10      	cmp	r2, #16
    273a:	d926      	bls.n	278a <usb_enable_ep+0xbe>
    273c:	2a20      	cmp	r2, #32
    273e:	d927      	bls.n	2790 <usb_enable_ep+0xc4>
    2740:	2a40      	cmp	r2, #64	; 0x40
    2742:	d928      	bls.n	2796 <usb_enable_ep+0xca>
    2744:	2a80      	cmp	r2, #128	; 0x80
    2746:	d929      	bls.n	279c <usb_enable_ep+0xd0>
    2748:	2480      	movs	r4, #128	; 0x80
    274a:	0064      	lsls	r4, r4, #1
    274c:	42a2      	cmp	r2, r4
    274e:	d928      	bls.n	27a2 <usb_enable_ep+0xd6>
    2750:	3401      	adds	r4, #1
    2752:	34ff      	adds	r4, #255	; 0xff
    2754:	42a2      	cmp	r2, r4
    2756:	d827      	bhi.n	27a8 <usb_enable_ep+0xdc>
    2758:	22c0      	movs	r2, #192	; 0xc0
    275a:	05d2      	lsls	r2, r2, #23
    275c:	e000      	b.n	2760 <usb_enable_ep+0x94>
    275e:	2200      	movs	r2, #0
    2760:	4310      	orrs	r0, r2
    2762:	4a27      	ldr	r2, [pc, #156]	; (2800 <usb_enable_ep+0x134>)
    2764:	015c      	lsls	r4, r3, #5
    2766:	1912      	adds	r2, r2, r4
    2768:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    276a:	4c27      	ldr	r4, [pc, #156]	; (2808 <usb_enable_ep+0x13c>)
    276c:	3308      	adds	r3, #8
    276e:	015b      	lsls	r3, r3, #5
    2770:	5d1a      	ldrb	r2, [r3, r4]
    2772:	3101      	adds	r1, #1
    2774:	b2c9      	uxtb	r1, r1
    2776:	0109      	lsls	r1, r1, #4
    2778:	2070      	movs	r0, #112	; 0x70
    277a:	4001      	ands	r1, r0
    277c:	430a      	orrs	r2, r1
    277e:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    2780:	46a4      	mov	ip, r4
    2782:	4463      	add	r3, ip
    2784:	22a2      	movs	r2, #162	; 0xa2
    2786:	711a      	strb	r2, [r3, #4]
    2788:	e026      	b.n	27d8 <usb_enable_ep+0x10c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    278a:	2280      	movs	r2, #128	; 0x80
    278c:	0552      	lsls	r2, r2, #21
    278e:	e7e7      	b.n	2760 <usb_enable_ep+0x94>
    2790:	2280      	movs	r2, #128	; 0x80
    2792:	0592      	lsls	r2, r2, #22
    2794:	e7e4      	b.n	2760 <usb_enable_ep+0x94>
    2796:	22c0      	movs	r2, #192	; 0xc0
    2798:	0592      	lsls	r2, r2, #22
    279a:	e7e1      	b.n	2760 <usb_enable_ep+0x94>
    279c:	2280      	movs	r2, #128	; 0x80
    279e:	05d2      	lsls	r2, r2, #23
    27a0:	e7de      	b.n	2760 <usb_enable_ep+0x94>
    27a2:	22a0      	movs	r2, #160	; 0xa0
    27a4:	05d2      	lsls	r2, r2, #23
    27a6:	e7db      	b.n	2760 <usb_enable_ep+0x94>
    27a8:	22e0      	movs	r2, #224	; 0xe0
    27aa:	05d2      	lsls	r2, r2, #23
    27ac:	e7d8      	b.n	2760 <usb_enable_ep+0x94>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    27ae:	2200      	movs	r2, #0
    27b0:	431a      	orrs	r2, r3
    27b2:	4b13      	ldr	r3, [pc, #76]	; (2800 <usb_enable_ep+0x134>)
    27b4:	0144      	lsls	r4, r0, #5
    27b6:	191b      	adds	r3, r3, r4
    27b8:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    27ba:	4a13      	ldr	r2, [pc, #76]	; (2808 <usb_enable_ep+0x13c>)
    27bc:	3008      	adds	r0, #8
    27be:	0140      	lsls	r0, r0, #5
    27c0:	5c83      	ldrb	r3, [r0, r2]
    27c2:	3101      	adds	r1, #1
    27c4:	2407      	movs	r4, #7
    27c6:	4021      	ands	r1, r4
    27c8:	430b      	orrs	r3, r1
    27ca:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    27cc:	4694      	mov	ip, r2
    27ce:	4460      	add	r0, ip
    27d0:	2340      	movs	r3, #64	; 0x40
    27d2:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    27d4:	3b2f      	subs	r3, #47	; 0x2f
    27d6:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    27d8:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    27da:	2280      	movs	r2, #128	; 0x80
    27dc:	0552      	lsls	r2, r2, #21
    27de:	e7e7      	b.n	27b0 <usb_enable_ep+0xe4>
    27e0:	2280      	movs	r2, #128	; 0x80
    27e2:	0592      	lsls	r2, r2, #22
    27e4:	e7e4      	b.n	27b0 <usb_enable_ep+0xe4>
    27e6:	22c0      	movs	r2, #192	; 0xc0
    27e8:	0592      	lsls	r2, r2, #22
    27ea:	e7e1      	b.n	27b0 <usb_enable_ep+0xe4>
    27ec:	2280      	movs	r2, #128	; 0x80
    27ee:	05d2      	lsls	r2, r2, #23
    27f0:	e7de      	b.n	27b0 <usb_enable_ep+0xe4>
    27f2:	22a0      	movs	r2, #160	; 0xa0
    27f4:	05d2      	lsls	r2, r2, #23
    27f6:	e7db      	b.n	27b0 <usb_enable_ep+0xe4>
    27f8:	22e0      	movs	r2, #224	; 0xe0
    27fa:	05d2      	lsls	r2, r2, #23
    27fc:	e7d8      	b.n	27b0 <usb_enable_ep+0xe4>
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	20000560 	.word	0x20000560
    2804:	8fffffff 	.word	0x8fffffff
    2808:	41005000 	.word	0x41005000

0000280c <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    280c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    280e:	4d12      	ldr	r5, [pc, #72]	; (2858 <usb_ep_start_out+0x4c>)
    2810:	0144      	lsls	r4, r0, #5
    2812:	192b      	adds	r3, r5, r4
    2814:	685e      	ldr	r6, [r3, #4]
    2816:	4f11      	ldr	r7, [pc, #68]	; (285c <usb_ep_start_out+0x50>)
    2818:	403e      	ands	r6, r7
    281a:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    281c:	685e      	ldr	r6, [r3, #4]
    281e:	0392      	lsls	r2, r2, #14
    2820:	4f0f      	ldr	r7, [pc, #60]	; (2860 <usb_ep_start_out+0x54>)
    2822:	403a      	ands	r2, r7
    2824:	4316      	orrs	r6, r2
    2826:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2828:	685a      	ldr	r2, [r3, #4]
    282a:	0b92      	lsrs	r2, r2, #14
    282c:	0392      	lsls	r2, r2, #14
    282e:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    2830:	685a      	ldr	r2, [r3, #4]
    2832:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    2834:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    2836:	3008      	adds	r0, #8
    2838:	0140      	lsls	r0, r0, #5
    283a:	4b0a      	ldr	r3, [pc, #40]	; (2864 <usb_ep_start_out+0x58>)
    283c:	469c      	mov	ip, r3
    283e:	4460      	add	r0, ip
    2840:	2305      	movs	r3, #5
    2842:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    2844:	4b08      	ldr	r3, [pc, #32]	; (2868 <usb_ep_start_out+0x5c>)
    2846:	469c      	mov	ip, r3
    2848:	4464      	add	r4, ip
    284a:	2301      	movs	r3, #1
    284c:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    284e:	333f      	adds	r3, #63	; 0x3f
    2850:	7103      	strb	r3, [r0, #4]
	return 0;
}
    2852:	2000      	movs	r0, #0
    2854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	20000560 	.word	0x20000560
    285c:	f0003fff 	.word	0xf0003fff
    2860:	0fffc000 	.word	0x0fffc000
    2864:	41005000 	.word	0x41005000
    2868:	41005109 	.word	0x41005109

0000286c <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    286c:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    286e:	243f      	movs	r4, #63	; 0x3f
    2870:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    2872:	4c15      	ldr	r4, [pc, #84]	; (28c8 <usb_ep_start_in+0x5c>)
    2874:	0146      	lsls	r6, r0, #5
    2876:	19a4      	adds	r4, r4, r6
    2878:	6965      	ldr	r5, [r4, #20]
    287a:	006d      	lsls	r5, r5, #1
    287c:	086d      	lsrs	r5, r5, #1
    287e:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    2880:	6965      	ldr	r5, [r4, #20]
    2882:	07db      	lsls	r3, r3, #31
    2884:	431d      	orrs	r5, r3
    2886:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    2888:	6963      	ldr	r3, [r4, #20]
    288a:	4d10      	ldr	r5, [pc, #64]	; (28cc <usb_ep_start_in+0x60>)
    288c:	402b      	ands	r3, r5
    288e:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    2890:	6963      	ldr	r3, [r4, #20]
    2892:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    2894:	6963      	ldr	r3, [r4, #20]
    2896:	0b9b      	lsrs	r3, r3, #14
    2898:	039b      	lsls	r3, r3, #14
    289a:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    289c:	6963      	ldr	r3, [r4, #20]
    289e:	0492      	lsls	r2, r2, #18
    28a0:	0c92      	lsrs	r2, r2, #18
    28a2:	4313      	orrs	r3, r2
    28a4:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    28a6:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    28a8:	3008      	adds	r0, #8
    28aa:	0140      	lsls	r0, r0, #5
    28ac:	4b08      	ldr	r3, [pc, #32]	; (28d0 <usb_ep_start_in+0x64>)
    28ae:	469c      	mov	ip, r3
    28b0:	4460      	add	r0, ip
    28b2:	230a      	movs	r3, #10
    28b4:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    28b6:	4b07      	ldr	r3, [pc, #28]	; (28d4 <usb_ep_start_in+0x68>)
    28b8:	469c      	mov	ip, r3
    28ba:	4466      	add	r6, ip
    28bc:	2302      	movs	r3, #2
    28be:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    28c0:	337e      	adds	r3, #126	; 0x7e
    28c2:	7143      	strb	r3, [r0, #5]
	return 0;
}
    28c4:	2000      	movs	r0, #0
    28c6:	bd70      	pop	{r4, r5, r6, pc}
    28c8:	20000560 	.word	0x20000560
    28cc:	f0003fff 	.word	0xf0003fff
    28d0:	41005000 	.word	0x41005000
    28d4:	41005109 	.word	0x41005109

000028d8 <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    28d8:	b243      	sxtb	r3, r0
    28da:	2b00      	cmp	r3, #0
    28dc:	db0a      	blt.n	28f4 <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    28de:	233f      	movs	r3, #63	; 0x3f
    28e0:	4003      	ands	r3, r0
    28e2:	3308      	adds	r3, #8
    28e4:	015b      	lsls	r3, r3, #5
    28e6:	4a09      	ldr	r2, [pc, #36]	; (290c <usb_ep_pending+0x34>)
    28e8:	4694      	mov	ip, r2
    28ea:	4463      	add	r3, ip
    28ec:	79d8      	ldrb	r0, [r3, #7]
    28ee:	2301      	movs	r3, #1
    28f0:	4018      	ands	r0, r3
	}
}
    28f2:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    28f4:	233f      	movs	r3, #63	; 0x3f
    28f6:	4003      	ands	r3, r0
    28f8:	3308      	adds	r3, #8
    28fa:	015b      	lsls	r3, r3, #5
    28fc:	4a03      	ldr	r2, [pc, #12]	; (290c <usb_ep_pending+0x34>)
    28fe:	4694      	mov	ip, r2
    2900:	4463      	add	r3, ip
    2902:	79db      	ldrb	r3, [r3, #7]
    2904:	085b      	lsrs	r3, r3, #1
    2906:	2001      	movs	r0, #1
    2908:	4018      	ands	r0, r3
    290a:	e7f2      	b.n	28f2 <usb_ep_pending+0x1a>
    290c:	41005000 	.word	0x41005000

00002910 <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    2910:	b243      	sxtb	r3, r0
    2912:	2b00      	cmp	r3, #0
    2914:	db09      	blt.n	292a <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    2916:	233f      	movs	r3, #63	; 0x3f
    2918:	4003      	ands	r3, r0
    291a:	3308      	adds	r3, #8
    291c:	015b      	lsls	r3, r3, #5
    291e:	4a08      	ldr	r2, [pc, #32]	; (2940 <usb_ep_handled+0x30>)
    2920:	4694      	mov	ip, r2
    2922:	4463      	add	r3, ip
    2924:	2201      	movs	r2, #1
    2926:	71da      	strb	r2, [r3, #7]
	}
}
    2928:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    292a:	233f      	movs	r3, #63	; 0x3f
    292c:	4003      	ands	r3, r0
    292e:	3308      	adds	r3, #8
    2930:	015b      	lsls	r3, r3, #5
    2932:	4a03      	ldr	r2, [pc, #12]	; (2940 <usb_ep_handled+0x30>)
    2934:	4694      	mov	ip, r2
    2936:	4463      	add	r3, ip
    2938:	2202      	movs	r2, #2
    293a:	71da      	strb	r2, [r3, #7]
    293c:	e7f4      	b.n	2928 <usb_ep_handled+0x18>
    293e:	46c0      	nop			; (mov r8, r8)
    2940:	41005000 	.word	0x41005000

00002944 <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    2944:	4b03      	ldr	r3, [pc, #12]	; (2954 <usb_ep_out_length+0x10>)
    2946:	0140      	lsls	r0, r0, #5
    2948:	181b      	adds	r3, r3, r0
    294a:	6858      	ldr	r0, [r3, #4]
    294c:	0480      	lsls	r0, r0, #18
    294e:	0c80      	lsrs	r0, r0, #18
}
    2950:	4770      	bx	lr
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	20000560 	.word	0x20000560

00002958 <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2958:	4b04      	ldr	r3, [pc, #16]	; (296c <usb_attach+0x14>)
    295a:	2280      	movs	r2, #128	; 0x80
    295c:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    295e:	4a04      	ldr	r2, [pc, #16]	; (2970 <usb_attach+0x18>)
    2960:	8913      	ldrh	r3, [r2, #8]
    2962:	2101      	movs	r1, #1
    2964:	438b      	bics	r3, r1
    2966:	8113      	strh	r3, [r2, #8]
}
    2968:	4770      	bx	lr
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	e000e100 	.word	0xe000e100
    2970:	41005000 	.word	0x41005000

00002974 <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    2974:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    2976:	4903      	ldr	r1, [pc, #12]	; (2984 <usb_ep0_out+0x10>)
    2978:	2240      	movs	r2, #64	; 0x40
    297a:	2000      	movs	r0, #0
    297c:	4b02      	ldr	r3, [pc, #8]	; (2988 <usb_ep0_out+0x14>)
    297e:	4798      	blx	r3
}
    2980:	bd10      	pop	{r4, pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	200004d4 	.word	0x200004d4
    2988:	0000280d 	.word	0x0000280d

0000298c <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    298c:	b510      	push	{r4, lr}
    298e:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2990:	4902      	ldr	r1, [pc, #8]	; (299c <usb_ep0_in+0x10>)
    2992:	2301      	movs	r3, #1
    2994:	2080      	movs	r0, #128	; 0x80
    2996:	4c02      	ldr	r4, [pc, #8]	; (29a0 <usb_ep0_in+0x14>)
    2998:	47a0      	blx	r4
}
    299a:	bd10      	pop	{r4, pc}
    299c:	20000484 	.word	0x20000484
    29a0:	0000286d 	.word	0x0000286d

000029a4 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    29a4:	4a02      	ldr	r2, [pc, #8]	; (29b0 <usb_ep0_stall+0xc>)
    29a6:	2306      	movs	r3, #6
    29a8:	33ff      	adds	r3, #255	; 0xff
    29aa:	2130      	movs	r1, #48	; 0x30
    29ac:	54d1      	strb	r1, [r2, r3]
}
    29ae:	4770      	bx	lr
    29b0:	41005000 	.word	0x41005000

000029b4 <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    29b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    29b6:	4b25      	ldr	r3, [pc, #148]	; (2a4c <usb_handle_function+0x98>)
    29b8:	8c1c      	ldrh	r4, [r3, #32]
    29ba:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    29bc:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    29be:	071b      	lsls	r3, r3, #28
    29c0:	d410      	bmi.n	29e4 <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    29c2:	07e3      	lsls	r3, r4, #31
    29c4:	d50c      	bpl.n	29e0 <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    29c6:	4921      	ldr	r1, [pc, #132]	; (2a4c <usb_handle_function+0x98>)
    29c8:	2208      	movs	r2, #8
    29ca:	32ff      	adds	r2, #255	; 0xff
    29cc:	5c8b      	ldrb	r3, [r1, r2]
    29ce:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    29d0:	2013      	movs	r0, #19
    29d2:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    29d4:	06db      	lsls	r3, r3, #27
    29d6:	d40d      	bmi.n	29f4 <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    29d8:	07eb      	lsls	r3, r5, #31
    29da:	d413      	bmi.n	2a04 <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    29dc:	07ad      	lsls	r5, r5, #30
    29de:	d414      	bmi.n	2a0a <usb_handle_function+0x56>
void usb_handle_function() {
    29e0:	2301      	movs	r3, #1
    29e2:	e016      	b.n	2a12 <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    29e4:	4b19      	ldr	r3, [pc, #100]	; (2a4c <usb_handle_function+0x98>)
    29e6:	2208      	movs	r2, #8
    29e8:	839a      	strh	r2, [r3, #28]
		usb_reset();
    29ea:	4b19      	ldr	r3, [pc, #100]	; (2a50 <usb_handle_function+0x9c>)
    29ec:	4798      	blx	r3
		usb_cb_reset();
    29ee:	4b19      	ldr	r3, [pc, #100]	; (2a54 <usb_handle_function+0xa0>)
    29f0:	4798      	blx	r3
		goto usb_handle_function_end;
    29f2:	e026      	b.n	2a42 <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    29f4:	4818      	ldr	r0, [pc, #96]	; (2a58 <usb_handle_function+0xa4>)
    29f6:	4919      	ldr	r1, [pc, #100]	; (2a5c <usb_handle_function+0xa8>)
    29f8:	3aff      	subs	r2, #255	; 0xff
    29fa:	4b19      	ldr	r3, [pc, #100]	; (2a60 <usb_handle_function+0xac>)
    29fc:	4798      	blx	r3
			usb_handle_setup();
    29fe:	4b19      	ldr	r3, [pc, #100]	; (2a64 <usb_handle_function+0xb0>)
    2a00:	4798      	blx	r3
    2a02:	e7e9      	b.n	29d8 <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    2a04:	4b18      	ldr	r3, [pc, #96]	; (2a68 <usb_handle_function+0xb4>)
    2a06:	4798      	blx	r3
    2a08:	e7e8      	b.n	29dc <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    2a0a:	4b18      	ldr	r3, [pc, #96]	; (2a6c <usb_handle_function+0xb8>)
    2a0c:	4798      	blx	r3
    2a0e:	e7e7      	b.n	29e0 <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    2a10:	3301      	adds	r3, #1
    2a12:	4a17      	ldr	r2, [pc, #92]	; (2a70 <usb_handle_function+0xbc>)
    2a14:	7812      	ldrb	r2, [r2, #0]
    2a16:	429a      	cmp	r2, r3
    2a18:	dd11      	ble.n	2a3e <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    2a1a:	2201      	movs	r2, #1
    2a1c:	409a      	lsls	r2, r3
    2a1e:	4214      	tst	r4, r2
    2a20:	d0f6      	beq.n	2a10 <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    2a22:	001a      	movs	r2, r3
    2a24:	3208      	adds	r2, #8
    2a26:	0152      	lsls	r2, r2, #5
    2a28:	4908      	ldr	r1, [pc, #32]	; (2a4c <usb_handle_function+0x98>)
    2a2a:	468c      	mov	ip, r1
    2a2c:	4462      	add	r2, ip
    2a2e:	79d1      	ldrb	r1, [r2, #7]
    2a30:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    2a32:	015a      	lsls	r2, r3, #5
    2a34:	480f      	ldr	r0, [pc, #60]	; (2a74 <usb_handle_function+0xc0>)
    2a36:	4684      	mov	ip, r0
    2a38:	4462      	add	r2, ip
    2a3a:	7011      	strb	r1, [r2, #0]
    2a3c:	e7e8      	b.n	2a10 <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    2a3e:	4b0e      	ldr	r3, [pc, #56]	; (2a78 <usb_handle_function+0xc4>)
    2a40:	4798      	blx	r3
    2a42:	4b0e      	ldr	r3, [pc, #56]	; (2a7c <usb_handle_function+0xc8>)
    2a44:	2280      	movs	r2, #128	; 0x80
    2a46:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    2a48:	bd70      	pop	{r4, r5, r6, pc}
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	41005000 	.word	0x41005000
    2a50:	00002599 	.word	0x00002599
    2a54:	00002bbd 	.word	0x00002bbd
    2a58:	200004c8 	.word	0x200004c8
    2a5c:	200004d4 	.word	0x200004d4
    2a60:	000051f9 	.word	0x000051f9
    2a64:	000023b1 	.word	0x000023b1
    2a68:	000024ed 	.word	0x000024ed
    2a6c:	0000250d 	.word	0x0000250d
    2a70:	000056f6 	.word	0x000056f6
    2a74:	41005108 	.word	0x41005108
    2a78:	00002c8d 	.word	0x00002c8d
    2a7c:	e000e100 	.word	0xe000e100

00002a80 <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    2a80:	b510      	push	{r4, lr}
    2a82:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    2a84:	2000      	movs	r0, #0
    2a86:	e01c      	b.n	2ac2 <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    2a88:	0082      	lsls	r2, r0, #2
    2a8a:	1812      	adds	r2, r2, r0
    2a8c:	17d4      	asrs	r4, r2, #31
    2a8e:	2307      	movs	r3, #7
    2a90:	0019      	movs	r1, r3
    2a92:	4021      	ands	r1, r4
    2a94:	1889      	adds	r1, r1, r2
    2a96:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    2a98:	0f64      	lsrs	r4, r4, #29
    2a9a:	1912      	adds	r2, r2, r4
    2a9c:	4013      	ands	r3, r2
    2a9e:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    2aa0:	4a0c      	ldr	r2, [pc, #48]	; (2ad4 <samd_serial_number_string_descriptor+0x54>)
    2aa2:	5c8a      	ldrb	r2, [r1, r2]
    2aa4:	411a      	asrs	r2, r3
    2aa6:	4c0c      	ldr	r4, [pc, #48]	; (2ad8 <samd_serial_number_string_descriptor+0x58>)
    2aa8:	5d09      	ldrb	r1, [r1, r4]
    2aaa:	2408      	movs	r4, #8
    2aac:	1ae3      	subs	r3, r4, r3
    2aae:	4099      	lsls	r1, r3
    2ab0:	000b      	movs	r3, r1
    2ab2:	4313      	orrs	r3, r2
    2ab4:	221f      	movs	r2, #31
    2ab6:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    2ab8:	4a08      	ldr	r2, [pc, #32]	; (2adc <samd_serial_number_string_descriptor+0x5c>)
    2aba:	5cd2      	ldrb	r2, [r2, r3]
    2abc:	ab01      	add	r3, sp, #4
    2abe:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    2ac0:	3001      	adds	r0, #1
    2ac2:	2819      	cmp	r0, #25
    2ac4:	dde0      	ble.n	2a88 <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    2ac6:	a801      	add	r0, sp, #4
    2ac8:	2300      	movs	r3, #0
    2aca:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    2acc:	4b04      	ldr	r3, [pc, #16]	; (2ae0 <samd_serial_number_string_descriptor+0x60>)
    2ace:	4798      	blx	r3
}
    2ad0:	b008      	add	sp, #32
    2ad2:	bd10      	pop	{r4, pc}
    2ad4:	0080a00c 	.word	0x0080a00c
    2ad8:	0080a00d 	.word	0x0080a00d
    2adc:	000056a4 	.word	0x000056a4
    2ae0:	00002559 	.word	0x00002559

00002ae4 <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    2ae4:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    2ae6:	2208      	movs	r2, #8
    2ae8:	2103      	movs	r1, #3
    2aea:	2081      	movs	r0, #129	; 0x81
    2aec:	4c09      	ldr	r4, [pc, #36]	; (2b14 <usb_serial_init+0x30>)
    2aee:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2af0:	2220      	movs	r2, #32
    2af2:	2102      	movs	r1, #2
    2af4:	2002      	movs	r0, #2
    2af6:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    2af8:	2220      	movs	r2, #32
    2afa:	2102      	movs	r1, #2
    2afc:	2082      	movs	r0, #130	; 0x82
    2afe:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2b00:	4c05      	ldr	r4, [pc, #20]	; (2b18 <usb_serial_init+0x34>)
    2b02:	2220      	movs	r2, #32
    2b04:	0021      	movs	r1, r4
    2b06:	2002      	movs	r0, #2
    2b08:	4b04      	ldr	r3, [pc, #16]	; (2b1c <usb_serial_init+0x38>)
    2b0a:	4798      	blx	r3
	
	usb_tx_busy = false;
    2b0c:	2320      	movs	r3, #32
    2b0e:	2200      	movs	r2, #0
    2b10:	54e2      	strb	r2, [r4, r3]
}
    2b12:	bd10      	pop	{r4, pc}
    2b14:	000026cd 	.word	0x000026cd
    2b18:	20000514 	.word	0x20000514
    2b1c:	0000280d 	.word	0x0000280d

00002b20 <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    2b20:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    2b22:	2002      	movs	r0, #2
    2b24:	4b02      	ldr	r3, [pc, #8]	; (2b30 <usb_serial_out_completion+0x10>)
    2b26:	4798      	blx	r3
    2b28:	4b02      	ldr	r3, [pc, #8]	; (2b34 <usb_serial_out_completion+0x14>)
    2b2a:	6258      	str	r0, [r3, #36]	; 0x24
}
    2b2c:	bd10      	pop	{r4, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	00002945 	.word	0x00002945
    2b34:	20000514 	.word	0x20000514

00002b38 <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    2b38:	4b02      	ldr	r3, [pc, #8]	; (2b44 <usb_serial_in_completion+0xc>)
    2b3a:	2220      	movs	r2, #32
    2b3c:	2100      	movs	r1, #0
    2b3e:	5499      	strb	r1, [r3, r2]
}
    2b40:	4770      	bx	lr
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	20000514 	.word	0x20000514

00002b48 <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    2b48:	b570      	push	{r4, r5, r6, lr}
    2b4a:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    2b4c:	2920      	cmp	r1, #32
    2b4e:	dd00      	ble.n	2b52 <usb_serial_send_buffer+0xa>
    2b50:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    2b52:	4d09      	ldr	r5, [pc, #36]	; (2b78 <usb_serial_send_buffer+0x30>)
    2b54:	002e      	movs	r6, r5
    2b56:	3628      	adds	r6, #40	; 0x28
    2b58:	0022      	movs	r2, r4
    2b5a:	0001      	movs	r1, r0
    2b5c:	0030      	movs	r0, r6
    2b5e:	4b07      	ldr	r3, [pc, #28]	; (2b7c <usb_serial_send_buffer+0x34>)
    2b60:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    2b62:	2300      	movs	r3, #0
    2b64:	0022      	movs	r2, r4
    2b66:	0031      	movs	r1, r6
    2b68:	2082      	movs	r0, #130	; 0x82
    2b6a:	4e05      	ldr	r6, [pc, #20]	; (2b80 <usb_serial_send_buffer+0x38>)
    2b6c:	47b0      	blx	r6
	usb_tx_busy = true;
    2b6e:	2320      	movs	r3, #32
    2b70:	2201      	movs	r2, #1
    2b72:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    2b74:	0020      	movs	r0, r4
    2b76:	bd70      	pop	{r4, r5, r6, pc}
    2b78:	20000514 	.word	0x20000514
    2b7c:	000051f9 	.word	0x000051f9
    2b80:	0000286d 	.word	0x0000286d

00002b84 <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    2b84:	b570      	push	{r4, r5, r6, lr}
    2b86:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    2b88:	4b09      	ldr	r3, [pc, #36]	; (2bb0 <usb_serial_read_buffer+0x2c>)
    2b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b8c:	4299      	cmp	r1, r3
    2b8e:	d901      	bls.n	2b94 <usb_serial_read_buffer+0x10>
    2b90:	4b07      	ldr	r3, [pc, #28]	; (2bb0 <usb_serial_read_buffer+0x2c>)
    2b92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    2b94:	4d06      	ldr	r5, [pc, #24]	; (2bb0 <usb_serial_read_buffer+0x2c>)
    2b96:	0022      	movs	r2, r4
    2b98:	0029      	movs	r1, r5
    2b9a:	4b06      	ldr	r3, [pc, #24]	; (2bb4 <usb_serial_read_buffer+0x30>)
    2b9c:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    2b9e:	2220      	movs	r2, #32
    2ba0:	0029      	movs	r1, r5
    2ba2:	2002      	movs	r0, #2
    2ba4:	4b04      	ldr	r3, [pc, #16]	; (2bb8 <usb_serial_read_buffer+0x34>)
    2ba6:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    2ba8:	2300      	movs	r3, #0
    2baa:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    2bac:	0020      	movs	r0, r4
    2bae:	bd70      	pop	{r4, r5, r6, pc}
    2bb0:	20000514 	.word	0x20000514
    2bb4:	000051f9 	.word	0x000051f9
    2bb8:	0000280d 	.word	0x0000280d

00002bbc <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    2bbc:	4770      	bx	lr
	...

00002bc0 <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    2bc0:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    2bc2:	4b2a      	ldr	r3, [pc, #168]	; (2c6c <usb_cb_control_setup+0xac>)
    2bc4:	781a      	ldrb	r2, [r3, #0]
    2bc6:	2360      	movs	r3, #96	; 0x60
    2bc8:	4013      	ands	r3, r2
    2bca:	2b20      	cmp	r3, #32
    2bcc:	d000      	beq.n	2bd0 <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    2bce:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    2bd0:	4b26      	ldr	r3, [pc, #152]	; (2c6c <usb_cb_control_setup+0xac>)
    2bd2:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    2bd4:	231f      	movs	r3, #31
    2bd6:	4013      	ands	r3, r2
    2bd8:	2b01      	cmp	r3, #1
    2bda:	d144      	bne.n	2c66 <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    2bdc:	2900      	cmp	r1, #0
    2bde:	d1f6      	bne.n	2bce <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    2be0:	4b22      	ldr	r3, [pc, #136]	; (2c6c <usb_cb_control_setup+0xac>)
    2be2:	785b      	ldrb	r3, [r3, #1]
    2be4:	2b22      	cmp	r3, #34	; 0x22
    2be6:	d031      	beq.n	2c4c <usb_cb_control_setup+0x8c>
    2be8:	d80c      	bhi.n	2c04 <usb_cb_control_setup+0x44>
    2bea:	2b20      	cmp	r3, #32
    2bec:	d026      	beq.n	2c3c <usb_cb_control_setup+0x7c>
    2bee:	2b21      	cmp	r3, #33	; 0x21
    2bf0:	d136      	bne.n	2c60 <usb_cb_control_setup+0xa0>
    2bf2:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2bf4:	2b06      	cmp	r3, #6
    2bf6:	d823      	bhi.n	2c40 <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    2bf8:	4a1d      	ldr	r2, [pc, #116]	; (2c70 <usb_cb_control_setup+0xb0>)
    2bfa:	5cd1      	ldrb	r1, [r2, r3]
    2bfc:	4a1d      	ldr	r2, [pc, #116]	; (2c74 <usb_cb_control_setup+0xb4>)
    2bfe:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    2c00:	3301      	adds	r3, #1
    2c02:	e7f7      	b.n	2bf4 <usb_cb_control_setup+0x34>
    2c04:	2b23      	cmp	r3, #35	; 0x23
    2c06:	d12b      	bne.n	2c60 <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    2c08:	2000      	movs	r0, #0
    2c0a:	4b1b      	ldr	r3, [pc, #108]	; (2c78 <usb_cb_control_setup+0xb8>)
    2c0c:	4798      	blx	r3
					usb_ep0_out();
    2c0e:	4b1b      	ldr	r3, [pc, #108]	; (2c7c <usb_cb_control_setup+0xbc>)
    2c10:	4798      	blx	r3
					break;
    2c12:	e7dc      	b.n	2bce <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    2c14:	4b16      	ldr	r3, [pc, #88]	; (2c70 <usb_cb_control_setup+0xb0>)
    2c16:	491a      	ldr	r1, [pc, #104]	; (2c80 <usb_cb_control_setup+0xc0>)
    2c18:	5c89      	ldrb	r1, [r1, r2]
    2c1a:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    2c1c:	3201      	adds	r2, #1
    2c1e:	4b13      	ldr	r3, [pc, #76]	; (2c6c <usb_cb_control_setup+0xac>)
    2c20:	7999      	ldrb	r1, [r3, #6]
    2c22:	79db      	ldrb	r3, [r3, #7]
    2c24:	021b      	lsls	r3, r3, #8
    2c26:	430b      	orrs	r3, r1
    2c28:	4293      	cmp	r3, r2
    2c2a:	dd01      	ble.n	2c30 <usb_cb_control_setup+0x70>
    2c2c:	2a06      	cmp	r2, #6
    2c2e:	d9f1      	bls.n	2c14 <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    2c30:	2000      	movs	r0, #0
    2c32:	4b11      	ldr	r3, [pc, #68]	; (2c78 <usb_cb_control_setup+0xb8>)
    2c34:	4798      	blx	r3
					usb_ep0_out();
    2c36:	4b11      	ldr	r3, [pc, #68]	; (2c7c <usb_cb_control_setup+0xbc>)
    2c38:	4798      	blx	r3
					break;
    2c3a:	e7c8      	b.n	2bce <usb_cb_control_setup+0xe>
    2c3c:	2200      	movs	r2, #0
    2c3e:	e7ee      	b.n	2c1e <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    2c40:	2007      	movs	r0, #7
    2c42:	4b0d      	ldr	r3, [pc, #52]	; (2c78 <usb_cb_control_setup+0xb8>)
    2c44:	4798      	blx	r3
					usb_ep0_out();
    2c46:	4b0d      	ldr	r3, [pc, #52]	; (2c7c <usb_cb_control_setup+0xbc>)
    2c48:	4798      	blx	r3
					break;
    2c4a:	e7c0      	b.n	2bce <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    2c4c:	4b07      	ldr	r3, [pc, #28]	; (2c6c <usb_cb_control_setup+0xac>)
    2c4e:	789a      	ldrb	r2, [r3, #2]
    2c50:	4b0c      	ldr	r3, [pc, #48]	; (2c84 <usb_cb_control_setup+0xc4>)
    2c52:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    2c54:	2000      	movs	r0, #0
    2c56:	4b08      	ldr	r3, [pc, #32]	; (2c78 <usb_cb_control_setup+0xb8>)
    2c58:	4798      	blx	r3
					usb_ep0_out();
    2c5a:	4b08      	ldr	r3, [pc, #32]	; (2c7c <usb_cb_control_setup+0xbc>)
    2c5c:	4798      	blx	r3
					break;
    2c5e:	e7b6      	b.n	2bce <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    2c60:	4b09      	ldr	r3, [pc, #36]	; (2c88 <usb_cb_control_setup+0xc8>)
    2c62:	4798      	blx	r3
					break;
    2c64:	e7b3      	b.n	2bce <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    2c66:	4b08      	ldr	r3, [pc, #32]	; (2c88 <usb_cb_control_setup+0xc8>)
    2c68:	4798      	blx	r3
}
    2c6a:	e7b0      	b.n	2bce <usb_cb_control_setup+0xe>
    2c6c:	200004c8 	.word	0x200004c8
    2c70:	20000048 	.word	0x20000048
    2c74:	20000484 	.word	0x20000484
    2c78:	0000298d 	.word	0x0000298d
    2c7c:	00002975 	.word	0x00002975
    2c80:	200004d4 	.word	0x200004d4
    2c84:	2000055c 	.word	0x2000055c
    2c88:	000029a5 	.word	0x000029a5

00002c8c <usb_cb_completion>:

void usb_cb_completion(void) {
    2c8c:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    2c8e:	2002      	movs	r0, #2
    2c90:	4b0a      	ldr	r3, [pc, #40]	; (2cbc <usb_cb_completion+0x30>)
    2c92:	4798      	blx	r3
    2c94:	2800      	cmp	r0, #0
    2c96:	d105      	bne.n	2ca4 <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    2c98:	2082      	movs	r0, #130	; 0x82
    2c9a:	4b08      	ldr	r3, [pc, #32]	; (2cbc <usb_cb_completion+0x30>)
    2c9c:	4798      	blx	r3
    2c9e:	2800      	cmp	r0, #0
    2ca0:	d106      	bne.n	2cb0 <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    2ca2:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    2ca4:	2002      	movs	r0, #2
    2ca6:	4b06      	ldr	r3, [pc, #24]	; (2cc0 <usb_cb_completion+0x34>)
    2ca8:	4798      	blx	r3
		usb_serial_out_completion();
    2caa:	4b06      	ldr	r3, [pc, #24]	; (2cc4 <usb_cb_completion+0x38>)
    2cac:	4798      	blx	r3
    2cae:	e7f3      	b.n	2c98 <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    2cb0:	2082      	movs	r0, #130	; 0x82
    2cb2:	4b03      	ldr	r3, [pc, #12]	; (2cc0 <usb_cb_completion+0x34>)
    2cb4:	4798      	blx	r3
		usb_serial_in_completion();
    2cb6:	4b04      	ldr	r3, [pc, #16]	; (2cc8 <usb_cb_completion+0x3c>)
    2cb8:	4798      	blx	r3
}
    2cba:	e7f2      	b.n	2ca2 <usb_cb_completion+0x16>
    2cbc:	000028d9 	.word	0x000028d9
    2cc0:	00002911 	.word	0x00002911
    2cc4:	00002b21 	.word	0x00002b21
    2cc8:	00002b39 	.word	0x00002b39

00002ccc <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    2ccc:	4770      	bx	lr

00002cce <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    2cce:	4770      	bx	lr

00002cd0 <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    2cd0:	b510      	push	{r4, lr}
	if (config <= 1) {
    2cd2:	2801      	cmp	r0, #1
    2cd4:	d901      	bls.n	2cda <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    2cd6:	2000      	movs	r0, #0
}
    2cd8:	bd10      	pop	{r4, pc}
		usb_serial_init();
    2cda:	4b02      	ldr	r3, [pc, #8]	; (2ce4 <usb_cb_set_configuration+0x14>)
    2cdc:	4798      	blx	r3
		return true;
    2cde:	2001      	movs	r0, #1
    2ce0:	e7fa      	b.n	2cd8 <usb_cb_set_configuration+0x8>
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	00002ae5 	.word	0x00002ae5

00002ce8 <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    2ce8:	2800      	cmp	r0, #0
    2cea:	d003      	beq.n	2cf4 <usb_cb_set_interface+0xc>
    2cec:	2801      	cmp	r0, #1
    2cee:	d005      	beq.n	2cfc <usb_cb_set_interface+0x14>
    2cf0:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    2cf2:	4770      	bx	lr
		if (altsetting == 0) return true;
    2cf4:	2900      	cmp	r1, #0
    2cf6:	d005      	beq.n	2d04 <usb_cb_set_interface+0x1c>
	return false;
    2cf8:	2000      	movs	r0, #0
    2cfa:	e7fa      	b.n	2cf2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2cfc:	2900      	cmp	r1, #0
    2cfe:	d003      	beq.n	2d08 <usb_cb_set_interface+0x20>
	return false;
    2d00:	2000      	movs	r0, #0
    2d02:	e7f6      	b.n	2cf2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2d04:	2001      	movs	r0, #1
    2d06:	e7f4      	b.n	2cf2 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    2d08:	2001      	movs	r0, #1
    2d0a:	e7f2      	b.n	2cf2 <usb_cb_set_interface+0xa>

00002d0c <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    2d0c:	b510      	push	{r4, lr}
    2d0e:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    2d10:	2802      	cmp	r0, #2
    2d12:	d028      	beq.n	2d66 <usb_cb_get_descriptor+0x5a>
    2d14:	2803      	cmp	r0, #3
    2d16:	d008      	beq.n	2d2a <usb_cb_get_descriptor+0x1e>
    2d18:	2801      	cmp	r0, #1
    2d1a:	d003      	beq.n	2d24 <usb_cb_get_descriptor+0x18>
    2d1c:	2000      	movs	r0, #0
    2d1e:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    2d20:	6023      	str	r3, [r4, #0]
	return size;
    2d22:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    2d24:	3011      	adds	r0, #17
		address = &device_descriptor;
    2d26:	4b11      	ldr	r3, [pc, #68]	; (2d6c <usb_cb_get_descriptor+0x60>)
    2d28:	e7fa      	b.n	2d20 <usb_cb_get_descriptor+0x14>
		switch (index) {
    2d2a:	2902      	cmp	r1, #2
    2d2c:	d00f      	beq.n	2d4e <usb_cb_get_descriptor+0x42>
    2d2e:	d808      	bhi.n	2d42 <usb_cb_get_descriptor+0x36>
    2d30:	2900      	cmp	r1, #0
    2d32:	d015      	beq.n	2d60 <usb_cb_get_descriptor+0x54>
    2d34:	2901      	cmp	r1, #1
    2d36:	d10f      	bne.n	2d58 <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    2d38:	480d      	ldr	r0, [pc, #52]	; (2d70 <usb_cb_get_descriptor+0x64>)
    2d3a:	4b0e      	ldr	r3, [pc, #56]	; (2d74 <usb_cb_get_descriptor+0x68>)
    2d3c:	4798      	blx	r3
    2d3e:	0003      	movs	r3, r0
			break;
    2d40:	e00f      	b.n	2d62 <usb_cb_get_descriptor+0x56>
    2d42:	2903      	cmp	r1, #3
    2d44:	d108      	bne.n	2d58 <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    2d46:	4b0c      	ldr	r3, [pc, #48]	; (2d78 <usb_cb_get_descriptor+0x6c>)
    2d48:	4798      	blx	r3
    2d4a:	0003      	movs	r3, r0
			break;
    2d4c:	e009      	b.n	2d62 <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    2d4e:	480b      	ldr	r0, [pc, #44]	; (2d7c <usb_cb_get_descriptor+0x70>)
    2d50:	4b08      	ldr	r3, [pc, #32]	; (2d74 <usb_cb_get_descriptor+0x68>)
    2d52:	4798      	blx	r3
    2d54:	0003      	movs	r3, r0
			break;
    2d56:	e004      	b.n	2d62 <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    2d58:	2300      	movs	r3, #0
    2d5a:	6023      	str	r3, [r4, #0]
			return 0;
    2d5c:	2000      	movs	r0, #0
    2d5e:	e7e0      	b.n	2d22 <usb_cb_get_descriptor+0x16>
    2d60:	4b07      	ldr	r3, [pc, #28]	; (2d80 <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    2d62:	7818      	ldrb	r0, [r3, #0]
		break;
    2d64:	e7dc      	b.n	2d20 <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    2d66:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    2d68:	4b06      	ldr	r3, [pc, #24]	; (2d84 <usb_cb_get_descriptor+0x78>)
    2d6a:	e7d9      	b.n	2d20 <usb_cb_get_descriptor+0x14>
    2d6c:	000056e4 	.word	0x000056e4
    2d70:	000056c8 	.word	0x000056c8
    2d74:	00002559 	.word	0x00002559
    2d78:	00002a81 	.word	0x00002a81
    2d7c:	000056d8 	.word	0x000056d8
    2d80:	000056e0 	.word	0x000056e0
    2d84:	20000050 	.word	0x20000050

00002d88 <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    2d88:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    2d8a:	4b07      	ldr	r3, [pc, #28]	; (2da8 <rtos_init+0x20>)
    2d8c:	4798      	blx	r3
	#endif
	
	time_init();
    2d8e:	4b07      	ldr	r3, [pc, #28]	; (2dac <rtos_init+0x24>)
    2d90:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    2d92:	2180      	movs	r1, #128	; 0x80
    2d94:	03c9      	lsls	r1, r1, #15
    2d96:	2001      	movs	r0, #1
    2d98:	4b05      	ldr	r3, [pc, #20]	; (2db0 <rtos_init+0x28>)
    2d9a:	4798      	blx	r3
	#endif
	
	init_process_queue();
    2d9c:	4b05      	ldr	r3, [pc, #20]	; (2db4 <rtos_init+0x2c>)
    2d9e:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    2da0:	4b05      	ldr	r3, [pc, #20]	; (2db8 <rtos_init+0x30>)
    2da2:	4798      	blx	r3
	#endif
	
	return true;
}
    2da4:	2001      	movs	r0, #1
    2da6:	bd10      	pop	{r4, pc}
    2da8:	000020d9 	.word	0x000020d9
    2dac:	000021ad 	.word	0x000021ad
    2db0:	00001bbd 	.word	0x00001bbd
    2db4:	00002fa9 	.word	0x00002fa9
    2db8:	00002221 	.word	0x00002221

00002dbc <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    2dbc:	b570      	push	{r4, r5, r6, lr}
    2dbe:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    2dc0:	e011      	b.n	2de6 <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    2dc2:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    2dc4:	2680      	movs	r6, #128	; 0x80
    2dc6:	03f6      	lsls	r6, r6, #15
    2dc8:	0031      	movs	r1, r6
    2dca:	2001      	movs	r0, #1
    2dcc:	4b0c      	ldr	r3, [pc, #48]	; (2e00 <morse+0x44>)
    2dce:	4798      	blx	r3
		delay_ms(delay);
    2dd0:	480c      	ldr	r0, [pc, #48]	; (2e04 <morse+0x48>)
    2dd2:	4368      	muls	r0, r5
    2dd4:	4d0c      	ldr	r5, [pc, #48]	; (2e08 <morse+0x4c>)
    2dd6:	47a8      	blx	r5
		led_off();
    2dd8:	0031      	movs	r1, r6
    2dda:	2001      	movs	r0, #1
    2ddc:	4b0b      	ldr	r3, [pc, #44]	; (2e0c <morse+0x50>)
    2dde:	4798      	blx	r3
		delay_ms(100);
    2de0:	480b      	ldr	r0, [pc, #44]	; (2e10 <morse+0x54>)
    2de2:	47a8      	blx	r5
		++c;
    2de4:	3401      	adds	r4, #1
	while (*c != '\0') {
    2de6:	7823      	ldrb	r3, [r4, #0]
    2de8:	2b00      	cmp	r3, #0
    2dea:	d007      	beq.n	2dfc <morse+0x40>
		if (*c == '.') delay = 100;
    2dec:	2b2e      	cmp	r3, #46	; 0x2e
    2dee:	d0e8      	beq.n	2dc2 <morse+0x6>
		else if (*c == '-') delay = 200;
    2df0:	2b2d      	cmp	r3, #45	; 0x2d
    2df2:	d001      	beq.n	2df8 <morse+0x3c>
		int delay = 0;
    2df4:	2500      	movs	r5, #0
    2df6:	e7e5      	b.n	2dc4 <morse+0x8>
		else if (*c == '-') delay = 200;
    2df8:	25c8      	movs	r5, #200	; 0xc8
    2dfa:	e7e3      	b.n	2dc4 <morse+0x8>
	}
}
    2dfc:	bd70      	pop	{r4, r5, r6, pc}
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00001bcd 	.word	0x00001bcd
    2e04:	00001770 	.word	0x00001770
    2e08:	0000219d 	.word	0x0000219d
    2e0c:	00001bdd 	.word	0x00001bdd
    2e10:	000927c0 	.word	0x000927c0

00002e14 <SOS>:

void SOS() {
    2e14:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2e16:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    2e18:	4803      	ldr	r0, [pc, #12]	; (2e28 <SOS+0x14>)
    2e1a:	4b04      	ldr	r3, [pc, #16]	; (2e2c <SOS+0x18>)
    2e1c:	4798      	blx	r3
		delay_ms(600);
    2e1e:	4804      	ldr	r0, [pc, #16]	; (2e30 <SOS+0x1c>)
    2e20:	4b04      	ldr	r3, [pc, #16]	; (2e34 <SOS+0x20>)
    2e22:	4798      	blx	r3
	while(1) {
    2e24:	e7f8      	b.n	2e18 <SOS+0x4>
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	000056f8 	.word	0x000056f8
    2e2c:	00002dbd 	.word	0x00002dbd
    2e30:	0036ee80 	.word	0x0036ee80
    2e34:	0000219d 	.word	0x0000219d

00002e38 <rtos_main>:
int rtos_main(void) {
    2e38:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    2e3a:	4b13      	ldr	r3, [pc, #76]	; (2e88 <rtos_main+0x50>)
    2e3c:	4798      	blx	r3
	mainproc = &_mainproc;
    2e3e:	4c13      	ldr	r4, [pc, #76]	; (2e8c <rtos_main+0x54>)
    2e40:	1d20      	adds	r0, r4, #4
    2e42:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    2e44:	2380      	movs	r3, #128	; 0x80
    2e46:	22c0      	movs	r2, #192	; 0xc0
    2e48:	4911      	ldr	r1, [pc, #68]	; (2e90 <rtos_main+0x58>)
    2e4a:	00db      	lsls	r3, r3, #3
    2e4c:	0092      	lsls	r2, r2, #2
    2e4e:	4d11      	ldr	r5, [pc, #68]	; (2e94 <rtos_main+0x5c>)
    2e50:	47a8      	blx	r5
	dispatch_process(mainproc);
    2e52:	6820      	ldr	r0, [r4, #0]
    2e54:	4b10      	ldr	r3, [pc, #64]	; (2e98 <rtos_main+0x60>)
    2e56:	4798      	blx	r3
	while (process_count) {
    2e58:	e001      	b.n	2e5e <rtos_main+0x26>
		dispatch_process(lastproc);
    2e5a:	4b0f      	ldr	r3, [pc, #60]	; (2e98 <rtos_main+0x60>)
    2e5c:	4798      	blx	r3
	while (process_count) {
    2e5e:	4b0f      	ldr	r3, [pc, #60]	; (2e9c <rtos_main+0x64>)
    2e60:	681b      	ldr	r3, [r3, #0]
    2e62:	2b00      	cmp	r3, #0
    2e64:	d003      	beq.n	2e6e <rtos_main+0x36>
		if (!(lastproc = next_process())) break;
    2e66:	4b0e      	ldr	r3, [pc, #56]	; (2ea0 <rtos_main+0x68>)
    2e68:	4798      	blx	r3
    2e6a:	2800      	cmp	r0, #0
    2e6c:	d1f5      	bne.n	2e5a <rtos_main+0x22>
	if (process_count) SOS();
    2e6e:	4b0b      	ldr	r3, [pc, #44]	; (2e9c <rtos_main+0x64>)
    2e70:	681b      	ldr	r3, [r3, #0]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d106      	bne.n	2e84 <rtos_main+0x4c>
	led_on();
    2e76:	2180      	movs	r1, #128	; 0x80
    2e78:	03c9      	lsls	r1, r1, #15
    2e7a:	2001      	movs	r0, #1
    2e7c:	4b09      	ldr	r3, [pc, #36]	; (2ea4 <rtos_main+0x6c>)
    2e7e:	4798      	blx	r3
}
    2e80:	2000      	movs	r0, #0
    2e82:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    2e84:	4b08      	ldr	r3, [pc, #32]	; (2ea8 <rtos_main+0x70>)
    2e86:	4798      	blx	r3
    2e88:	00002d89 	.word	0x00002d89
    2e8c:	200005e0 	.word	0x200005e0
    2e90:	00001059 	.word	0x00001059
    2e94:	00002ed5 	.word	0x00002ed5
    2e98:	00002fbd 	.word	0x00002fbd
    2e9c:	20000618 	.word	0x20000618
    2ea0:	00003071 	.word	0x00003071
    2ea4:	00001bcd 	.word	0x00001bcd
    2ea8:	00002e15 	.word	0x00002e15

00002eac <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    2eac:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    2eae:	4b05      	ldr	r3, [pc, #20]	; (2ec4 <TC4_Handler+0x18>)
    2eb0:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    2eb2:	4b05      	ldr	r3, [pc, #20]	; (2ec8 <TC4_Handler+0x1c>)
    2eb4:	681c      	ldr	r4, [r3, #0]
    2eb6:	4b05      	ldr	r3, [pc, #20]	; (2ecc <TC4_Handler+0x20>)
    2eb8:	4798      	blx	r3
    2eba:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    2ebc:	2001      	movs	r0, #1
    2ebe:	4b04      	ldr	r3, [pc, #16]	; (2ed0 <TC4_Handler+0x24>)
    2ec0:	4798      	blx	r3
}
    2ec2:	bd10      	pop	{r4, pc}
    2ec4:	00002261 	.word	0x00002261
    2ec8:	2000060c 	.word	0x2000060c
    2ecc:	00002215 	.word	0x00002215
    2ed0:	000031e1 	.word	0x000031e1

00002ed4 <init_process>:
Process* current_process;

//uint32_t process_pc;


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    2ed4:	b510      	push	{r4, lr}
    2ed6:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    2ed8:	4807      	ldr	r0, [pc, #28]	; (2ef8 <init_process+0x24>)
    2eda:	1a82      	subs	r2, r0, r2
    2edc:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    2ede:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    2ee0:	1e4b      	subs	r3, r1, #1
    2ee2:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    2ee4:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    2ee6:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    2ee8:	4b04      	ldr	r3, [pc, #16]	; (2efc <init_process+0x28>)
    2eea:	4798      	blx	r3
    2eec:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    2eee:	2300      	movs	r3, #0
    2ef0:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    2ef2:	2224      	movs	r2, #36	; 0x24
    2ef4:	54a3      	strb	r3, [r4, r2]
	#endif
}
    2ef6:	bd10      	pop	{r4, pc}
    2ef8:	20002860 	.word	0x20002860
    2efc:	00002215 	.word	0x00002215

00002f00 <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    2f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f02:	465f      	mov	r7, fp
    2f04:	4656      	mov	r6, sl
    2f06:	464d      	mov	r5, r9
    2f08:	4644      	mov	r4, r8
    2f0a:	b4f0      	push	{r4, r5, r6, r7}
    2f0c:	b083      	sub	sp, #12
    2f0e:	9001      	str	r0, [sp, #4]
    2f10:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    2f12:	2324      	movs	r3, #36	; 0x24
    2f14:	5cc3      	ldrb	r3, [r0, r3]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d124      	bne.n	2f64 <switch_process+0x64>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    2f1a:	4b1c      	ldr	r3, [pc, #112]	; (2f8c <switch_process+0x8c>)
    2f1c:	9a01      	ldr	r2, [sp, #4]
    2f1e:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    2f20:	2303      	movs	r3, #3
    2f22:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    2f24:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2f26:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2f2a:	2302      	movs	r3, #2
    2f2c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2f30:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f34:	b662      	cpsie	i
	USE_PSP();
	
	__enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    2f36:	9201      	str	r2, [sp, #4]
    2f38:	6813      	ldr	r3, [r2, #0]
    2f3a:	3301      	adds	r3, #1
    2f3c:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2f3e:	b672      	cpsid	i
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2f40:	2300      	movs	r3, #0
    2f42:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2f46:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    2f4a:	3324      	adds	r3, #36	; 0x24
    2f4c:	9a01      	ldr	r2, [sp, #4]
    2f4e:	5cd3      	ldrb	r3, [r2, r3]
    2f50:	2b00      	cmp	r3, #0
    2f52:	d118      	bne.n	2f86 <switch_process+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
    2f54:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    2f56:	b003      	add	sp, #12
    2f58:	bcf0      	pop	{r4, r5, r6, r7}
    2f5a:	46bb      	mov	fp, r7
    2f5c:	46b2      	mov	sl, r6
    2f5e:	46a9      	mov	r9, r5
    2f60:	46a0      	mov	r8, r4
    2f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    2f64:	4b0a      	ldr	r3, [pc, #40]	; (2f90 <switch_process+0x90>)
    2f66:	4798      	blx	r3
    2f68:	4b0a      	ldr	r3, [pc, #40]	; (2f94 <switch_process+0x94>)
    2f6a:	681a      	ldr	r2, [r3, #0]
    2f6c:	0153      	lsls	r3, r2, #5
    2f6e:	1a9b      	subs	r3, r3, r2
    2f70:	009b      	lsls	r3, r3, #2
    2f72:	189b      	adds	r3, r3, r2
    2f74:	00db      	lsls	r3, r3, #3
    2f76:	18c0      	adds	r0, r0, r3
    2f78:	4b07      	ldr	r3, [pc, #28]	; (2f98 <switch_process+0x98>)
    2f7a:	4798      	blx	r3
		preempt_clear_interrupts();
    2f7c:	4b07      	ldr	r3, [pc, #28]	; (2f9c <switch_process+0x9c>)
    2f7e:	4798      	blx	r3
		preempt_enable_interrupts();
    2f80:	4b07      	ldr	r3, [pc, #28]	; (2fa0 <switch_process+0xa0>)
    2f82:	4798      	blx	r3
    2f84:	e7c9      	b.n	2f1a <switch_process+0x1a>
		preempt_disable_interrupts();
    2f86:	4b07      	ldr	r3, [pc, #28]	; (2fa4 <switch_process+0xa4>)
    2f88:	4798      	blx	r3
    2f8a:	e7e3      	b.n	2f54 <switch_process+0x54>
    2f8c:	2000060c 	.word	0x2000060c
    2f90:	00002215 	.word	0x00002215
    2f94:	00005734 	.word	0x00005734
    2f98:	0000227d 	.word	0x0000227d
    2f9c:	00002261 	.word	0x00002261
    2fa0:	00002239 	.word	0x00002239
    2fa4:	00002249 	.word	0x00002249

00002fa8 <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    2fa8:	4b03      	ldr	r3, [pc, #12]	; (2fb8 <init_process_queue+0x10>)
    2faa:	2200      	movs	r2, #0
    2fac:	605a      	str	r2, [r3, #4]
    2fae:	609a      	str	r2, [r3, #8]
	current_process = 0;
    2fb0:	601a      	str	r2, [r3, #0]
	process_count = 0;
    2fb2:	60da      	str	r2, [r3, #12]
}
    2fb4:	4770      	bx	lr
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	2000060c 	.word	0x2000060c

00002fbc <dispatch_process>:

bool dispatch_process(Process* process) {
    2fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fbe:	464f      	mov	r7, r9
    2fc0:	4646      	mov	r6, r8
    2fc2:	b4c0      	push	{r6, r7}
    2fc4:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    2fc6:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    2fc8:	6983      	ldr	r3, [r0, #24]
    2fca:	2b03      	cmp	r3, #3
    2fcc:	d049      	beq.n	3062 <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    2fce:	4b26      	ldr	r3, [pc, #152]	; (3068 <dispatch_process+0xac>)
    2fd0:	68db      	ldr	r3, [r3, #12]
    2fd2:	2b0f      	cmp	r3, #15
    2fd4:	dd04      	ble.n	2fe0 <dispatch_process+0x24>
    2fd6:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    2fd8:	bcc0      	pop	{r6, r7}
    2fda:	46b9      	mov	r9, r7
    2fdc:	46b0      	mov	r8, r6
    2fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    2fe0:	4b22      	ldr	r3, [pc, #136]	; (306c <dispatch_process+0xb0>)
    2fe2:	4798      	blx	r3
    2fe4:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    2fe6:	464b      	mov	r3, r9
    2fe8:	699b      	ldr	r3, [r3, #24]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d007      	beq.n	2ffe <dispatch_process+0x42>
    2fee:	464b      	mov	r3, r9
    2ff0:	695f      	ldr	r7, [r3, #20]
    2ff2:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    2ff4:	4b1c      	ldr	r3, [pc, #112]	; (3068 <dispatch_process+0xac>)
    2ff6:	685b      	ldr	r3, [r3, #4]
    2ff8:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    2ffa:	2500      	movs	r5, #0
    2ffc:	e00c      	b.n	3018 <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    2ffe:	2700      	movs	r7, #0
    3000:	e7f8      	b.n	2ff4 <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    3002:	3110      	adds	r1, #16
    3004:	e00e      	b.n	3024 <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    3006:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    3008:	42ba      	cmp	r2, r7
    300a:	dd16      	ble.n	303a <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    300c:	4a16      	ldr	r2, [pc, #88]	; (3068 <dispatch_process+0xac>)
    300e:	009e      	lsls	r6, r3, #2
    3010:	1993      	adds	r3, r2, r6
    3012:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    3014:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    3016:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    3018:	4a13      	ldr	r2, [pc, #76]	; (3068 <dispatch_process+0xac>)
    301a:	68d6      	ldr	r6, [r2, #12]
    301c:	42ae      	cmp	r6, r5
    301e:	dd0c      	ble.n	303a <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    3020:	1e59      	subs	r1, r3, #1
    3022:	d4ee      	bmi.n	3002 <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    3024:	4a10      	ldr	r2, [pc, #64]	; (3068 <dispatch_process+0xac>)
    3026:	0088      	lsls	r0, r1, #2
    3028:	1812      	adds	r2, r2, r0
    302a:	6910      	ldr	r0, [r2, #16]
    302c:	6982      	ldr	r2, [r0, #24]
    302e:	2a00      	cmp	r2, #0
    3030:	d0e9      	beq.n	3006 <dispatch_process+0x4a>
    3032:	6942      	ldr	r2, [r0, #20]
    3034:	4644      	mov	r4, r8
    3036:	1b12      	subs	r2, r2, r4
    3038:	e7e6      	b.n	3008 <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    303a:	4a0b      	ldr	r2, [pc, #44]	; (3068 <dispatch_process+0xac>)
    303c:	009b      	lsls	r3, r3, #2
    303e:	18d3      	adds	r3, r2, r3
    3040:	4649      	mov	r1, r9
    3042:	6119      	str	r1, [r3, #16]
	++process_count;
    3044:	1c73      	adds	r3, r6, #1
    3046:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    3048:	4666      	mov	r6, ip
    304a:	3601      	adds	r6, #1
    304c:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    304e:	17f1      	asrs	r1, r6, #31
    3050:	0f09      	lsrs	r1, r1, #28
    3052:	1876      	adds	r6, r6, r1
    3054:	230f      	movs	r3, #15
    3056:	4033      	ands	r3, r6
    3058:	1a5b      	subs	r3, r3, r1
    305a:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    305c:	b662      	cpsie	i
	return true;
    305e:	2001      	movs	r0, #1
    3060:	e7ba      	b.n	2fd8 <dispatch_process+0x1c>
		return false;
    3062:	2000      	movs	r0, #0
    3064:	e7b8      	b.n	2fd8 <dispatch_process+0x1c>
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	2000060c 	.word	0x2000060c
    306c:	00002215 	.word	0x00002215

00003070 <next_process>:

Process* next_process() {
    3070:	b5f0      	push	{r4, r5, r6, r7, lr}
    3072:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    3074:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    3076:	4b57      	ldr	r3, [pc, #348]	; (31d4 <next_process+0x164>)
    3078:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    307a:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    307c:	e015      	b.n	30aa <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    307e:	6823      	ldr	r3, [r4, #0]
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	e03d      	b.n	3100 <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    3084:	6823      	ldr	r3, [r4, #0]
    3086:	881b      	ldrh	r3, [r3, #0]
    3088:	e03a      	b.n	3100 <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    308a:	6863      	ldr	r3, [r4, #4]
    308c:	42bb      	cmp	r3, r7
    308e:	d041      	beq.n	3114 <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    3090:	466b      	mov	r3, sp
    3092:	3307      	adds	r3, #7
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	2b00      	cmp	r3, #0
    3098:	d163      	bne.n	3162 <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    309a:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    309c:	17f3      	asrs	r3, r6, #31
    309e:	0f1b      	lsrs	r3, r3, #28
    30a0:	18f6      	adds	r6, r6, r3
    30a2:	220f      	movs	r2, #15
    30a4:	4016      	ands	r6, r2
    30a6:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    30a8:	3501      	adds	r5, #1
    30aa:	4b4a      	ldr	r3, [pc, #296]	; (31d4 <next_process+0x164>)
    30ac:	68db      	ldr	r3, [r3, #12]
    30ae:	42ab      	cmp	r3, r5
    30b0:	dd59      	ble.n	3166 <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    30b2:	4b48      	ldr	r3, [pc, #288]	; (31d4 <next_process+0x164>)
    30b4:	00b2      	lsls	r2, r6, #2
    30b6:	189a      	adds	r2, r3, r2
    30b8:	6912      	ldr	r2, [r2, #16]
    30ba:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    30bc:	6993      	ldr	r3, [r2, #24]
    30be:	2b02      	cmp	r3, #2
    30c0:	d151      	bne.n	3166 <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    30c2:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    30c4:	466b      	mov	r3, sp
    30c6:	2200      	movs	r2, #0
    30c8:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    30ca:	68e3      	ldr	r3, [r4, #12]
    30cc:	2b00      	cmp	r3, #0
    30ce:	d001      	beq.n	30d4 <next_process+0x64>
    30d0:	68e3      	ldr	r3, [r4, #12]
    30d2:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    30d4:	4b3f      	ldr	r3, [pc, #252]	; (31d4 <next_process+0x164>)
    30d6:	681a      	ldr	r2, [r3, #0]
    30d8:	6993      	ldr	r3, [r2, #24]
    30da:	2b01      	cmp	r3, #1
    30dc:	d043      	beq.n	3166 <next_process+0xf6>
			if (data->mask) {
    30de:	68a3      	ldr	r3, [r4, #8]
    30e0:	2b00      	cmp	r3, #0
    30e2:	d00f      	beq.n	3104 <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    30e4:	68a1      	ldr	r1, [r4, #8]
    30e6:	23ff      	movs	r3, #255	; 0xff
    30e8:	400b      	ands	r3, r1
    30ea:	68a1      	ldr	r1, [r4, #8]
    30ec:	428b      	cmp	r3, r1
    30ee:	d0c6      	beq.n	307e <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    30f0:	68a3      	ldr	r3, [r4, #8]
    30f2:	041b      	lsls	r3, r3, #16
    30f4:	0c1b      	lsrs	r3, r3, #16
    30f6:	68a1      	ldr	r1, [r4, #8]
    30f8:	428b      	cmp	r3, r1
    30fa:	d0c3      	beq.n	3084 <next_process+0x14>
				else variable = *(data->variable);
    30fc:	6823      	ldr	r3, [r4, #0]
    30fe:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    3100:	68a7      	ldr	r7, [r4, #8]
    3102:	401f      	ands	r7, r3
			switch (data->condition) {
    3104:	7c23      	ldrb	r3, [r4, #16]
    3106:	b2db      	uxtb	r3, r3
    3108:	2b06      	cmp	r3, #6
    310a:	d861      	bhi.n	31d0 <next_process+0x160>
    310c:	009b      	lsls	r3, r3, #2
    310e:	4932      	ldr	r1, [pc, #200]	; (31d8 <next_process+0x168>)
    3110:	58cb      	ldr	r3, [r1, r3]
    3112:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    3114:	466b      	mov	r3, sp
    3116:	2101      	movs	r1, #1
    3118:	71d9      	strb	r1, [r3, #7]
    311a:	e7b9      	b.n	3090 <next_process+0x20>
				if (variable != data->value) unblocked = true;
    311c:	6863      	ldr	r3, [r4, #4]
    311e:	42bb      	cmp	r3, r7
    3120:	d0b6      	beq.n	3090 <next_process+0x20>
    3122:	466b      	mov	r3, sp
    3124:	2101      	movs	r1, #1
    3126:	71d9      	strb	r1, [r3, #7]
    3128:	e7b2      	b.n	3090 <next_process+0x20>
				if (variable > data->value) unblocked = true;
    312a:	6863      	ldr	r3, [r4, #4]
    312c:	42bb      	cmp	r3, r7
    312e:	d2af      	bcs.n	3090 <next_process+0x20>
    3130:	466b      	mov	r3, sp
    3132:	2101      	movs	r1, #1
    3134:	71d9      	strb	r1, [r3, #7]
    3136:	e7ab      	b.n	3090 <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    3138:	6863      	ldr	r3, [r4, #4]
    313a:	42bb      	cmp	r3, r7
    313c:	d8a8      	bhi.n	3090 <next_process+0x20>
    313e:	466b      	mov	r3, sp
    3140:	2101      	movs	r1, #1
    3142:	71d9      	strb	r1, [r3, #7]
    3144:	e7a4      	b.n	3090 <next_process+0x20>
				if (variable < data->value) unblocked = true;
    3146:	6863      	ldr	r3, [r4, #4]
    3148:	42bb      	cmp	r3, r7
    314a:	d9a1      	bls.n	3090 <next_process+0x20>
    314c:	466b      	mov	r3, sp
    314e:	2101      	movs	r1, #1
    3150:	71d9      	strb	r1, [r3, #7]
    3152:	e79d      	b.n	3090 <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    3154:	6863      	ldr	r3, [r4, #4]
    3156:	42bb      	cmp	r3, r7
    3158:	d39a      	bcc.n	3090 <next_process+0x20>
    315a:	466b      	mov	r3, sp
    315c:	2101      	movs	r1, #1
    315e:	71d9      	strb	r1, [r3, #7]
    3160:	e796      	b.n	3090 <next_process+0x20>
				current_process->status = Process_State_Running;
    3162:	2301      	movs	r3, #1
    3164:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    3166:	4b1b      	ldr	r3, [pc, #108]	; (31d4 <next_process+0x164>)
    3168:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    316a:	0028      	movs	r0, r5
    316c:	e015      	b.n	319a <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    316e:	4919      	ldr	r1, [pc, #100]	; (31d4 <next_process+0x164>)
    3170:	688e      	ldr	r6, [r1, #8]
    3172:	1986      	adds	r6, r0, r6
    3174:	1e73      	subs	r3, r6, #1
    3176:	17df      	asrs	r7, r3, #31
    3178:	0f3f      	lsrs	r7, r7, #28
    317a:	19db      	adds	r3, r3, r7
    317c:	220f      	movs	r2, #15
    317e:	4013      	ands	r3, r2
    3180:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    3182:	17f7      	asrs	r7, r6, #31
    3184:	0f3f      	lsrs	r7, r7, #28
    3186:	19f6      	adds	r6, r6, r7
    3188:	4032      	ands	r2, r6
    318a:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    318c:	009b      	lsls	r3, r3, #2
    318e:	18cb      	adds	r3, r1, r3
    3190:	691b      	ldr	r3, [r3, #16]
    3192:	0092      	lsls	r2, r2, #2
    3194:	1889      	adds	r1, r1, r2
    3196:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    3198:	3801      	subs	r0, #1
    319a:	2800      	cmp	r0, #0
    319c:	dce7      	bgt.n	316e <next_process+0xfe>
	}

	--process_count;
    319e:	490d      	ldr	r1, [pc, #52]	; (31d4 <next_process+0x164>)
    31a0:	1e63      	subs	r3, r4, #1
    31a2:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    31a4:	688b      	ldr	r3, [r1, #8]
    31a6:	3301      	adds	r3, #1
    31a8:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    31aa:	17d8      	asrs	r0, r3, #31
    31ac:	0f00      	lsrs	r0, r0, #28
    31ae:	181b      	adds	r3, r3, r0
    31b0:	220f      	movs	r2, #15
    31b2:	4013      	ands	r3, r2
    31b4:	1a1b      	subs	r3, r3, r0
    31b6:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    31b8:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    31ba:	42ac      	cmp	r4, r5
    31bc:	d103      	bne.n	31c6 <next_process+0x156>
	
	return current_process;
    31be:	4b05      	ldr	r3, [pc, #20]	; (31d4 <next_process+0x164>)
    31c0:	6818      	ldr	r0, [r3, #0]
}
    31c2:	b003      	add	sp, #12
    31c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    31c6:	4b03      	ldr	r3, [pc, #12]	; (31d4 <next_process+0x164>)
    31c8:	6818      	ldr	r0, [r3, #0]
    31ca:	4b04      	ldr	r3, [pc, #16]	; (31dc <next_process+0x16c>)
    31cc:	4798      	blx	r3
    31ce:	e7f6      	b.n	31be <next_process+0x14e>
			switch (data->condition) {
    31d0:	2000      	movs	r0, #0
    31d2:	e7f6      	b.n	31c2 <next_process+0x152>
    31d4:	2000060c 	.word	0x2000060c
    31d8:	00005704 	.word	0x00005704
    31dc:	00002f01 	.word	0x00002f01

000031e0 <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    31e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31e2:	465f      	mov	r7, fp
    31e4:	4656      	mov	r6, sl
    31e6:	464d      	mov	r5, r9
    31e8:	4644      	mov	r4, r8
    31ea:	b4f0      	push	{r4, r5, r6, r7}
    31ec:	b083      	sub	sp, #12
    31ee:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    31f0:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    31f4:	2b00      	cmp	r3, #0
    31f6:	d01c      	beq.n	3232 <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    31f8:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    31fa:	4b0f      	ldr	r3, [pc, #60]	; (3238 <yield_process+0x58>)
    31fc:	9301      	str	r3, [sp, #4]
    31fe:	681b      	ldr	r3, [r3, #0]
    3200:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    3202:	2208      	movs	r2, #8
    3204:	4252      	negs	r2, r2
    3206:	446a      	add	r2, sp
    3208:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    320a:	685a      	ldr	r2, [r3, #4]
    320c:	3a04      	subs	r2, #4
    320e:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    3210:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    3212:	3204      	adds	r2, #4
    3214:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    3216:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    3218:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	681b      	ldr	r3, [r3, #0]
    321e:	2203      	movs	r2, #3
    3220:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    3222:	b662      	cpsie	i
	
	__enable_irq();
}
    3224:	b003      	add	sp, #12
    3226:	bcf0      	pop	{r4, r5, r6, r7}
    3228:	46bb      	mov	fp, r7
    322a:	46b2      	mov	sl, r6
    322c:	46a9      	mov	r9, r5
    322e:	46a0      	mov	r8, r4
    3230:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    3232:	4b02      	ldr	r3, [pc, #8]	; (323c <yield_process+0x5c>)
    3234:	4798      	blx	r3
    3236:	e7df      	b.n	31f8 <yield_process+0x18>
    3238:	2000060c 	.word	0x2000060c
    323c:	00002e15 	.word	0x00002e15

00003240 <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    3240:	b5f0      	push	{r4, r5, r6, r7, lr}
    3242:	464f      	mov	r7, r9
    3244:	4646      	mov	r6, r8
    3246:	b4c0      	push	{r6, r7}
    3248:	b08b      	sub	sp, #44	; 0x2c
    324a:	4681      	mov	r9, r0
    324c:	000f      	movs	r7, r1
    324e:	4690      	mov	r8, r2
    3250:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    3252:	4e0f      	ldr	r6, [pc, #60]	; (3290 <wait_until+0x50>)
    3254:	6834      	ldr	r4, [r6, #0]
    3256:	4b0f      	ldr	r3, [pc, #60]	; (3294 <wait_until+0x54>)
    3258:	4798      	blx	r3
    325a:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    325c:	ac05      	add	r4, sp, #20
    325e:	464b      	mov	r3, r9
    3260:	9305      	str	r3, [sp, #20]
    3262:	9706      	str	r7, [sp, #24]
    3264:	4643      	mov	r3, r8
    3266:	9307      	str	r3, [sp, #28]
    3268:	2300      	movs	r3, #0
    326a:	9308      	str	r3, [sp, #32]
    326c:	7425      	strb	r5, [r4, #16]
    326e:	466b      	mov	r3, sp
    3270:	001a      	movs	r2, r3
    3272:	cc23      	ldmia	r4!, {r0, r1, r5}
    3274:	c223      	stmia	r2!, {r0, r1, r5}
    3276:	cc03      	ldmia	r4!, {r0, r1}
    3278:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    327a:	6832      	ldr	r2, [r6, #0]
    327c:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    327e:	2002      	movs	r0, #2
    3280:	4b05      	ldr	r3, [pc, #20]	; (3298 <wait_until+0x58>)
    3282:	4798      	blx	r3
}
    3284:	b00b      	add	sp, #44	; 0x2c
    3286:	bcc0      	pop	{r6, r7}
    3288:	46b9      	mov	r9, r7
    328a:	46b0      	mov	r8, r6
    328c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	2000060c 	.word	0x2000060c
    3294:	00002215 	.word	0x00002215
    3298:	000031e1 	.word	0x000031e1

0000329c <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    329c:	b5f0      	push	{r4, r5, r6, r7, lr}
    329e:	464f      	mov	r7, r9
    32a0:	4646      	mov	r6, r8
    32a2:	b4c0      	push	{r6, r7}
    32a4:	b08b      	sub	sp, #44	; 0x2c
    32a6:	4681      	mov	r9, r0
    32a8:	000f      	movs	r7, r1
    32aa:	4690      	mov	r8, r2
    32ac:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    32ae:	4e0f      	ldr	r6, [pc, #60]	; (32ec <wait_until_callback+0x50>)
    32b0:	6834      	ldr	r4, [r6, #0]
    32b2:	4b0f      	ldr	r3, [pc, #60]	; (32f0 <wait_until_callback+0x54>)
    32b4:	4798      	blx	r3
    32b6:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    32b8:	ac05      	add	r4, sp, #20
    32ba:	464b      	mov	r3, r9
    32bc:	9305      	str	r3, [sp, #20]
    32be:	9706      	str	r7, [sp, #24]
    32c0:	4643      	mov	r3, r8
    32c2:	9307      	str	r3, [sp, #28]
    32c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    32c6:	9308      	str	r3, [sp, #32]
    32c8:	7425      	strb	r5, [r4, #16]
    32ca:	466b      	mov	r3, sp
    32cc:	001a      	movs	r2, r3
    32ce:	cc23      	ldmia	r4!, {r0, r1, r5}
    32d0:	c223      	stmia	r2!, {r0, r1, r5}
    32d2:	cc03      	ldmia	r4!, {r0, r1}
    32d4:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    32d6:	6832      	ldr	r2, [r6, #0]
    32d8:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    32da:	2002      	movs	r0, #2
    32dc:	4b05      	ldr	r3, [pc, #20]	; (32f4 <wait_until_callback+0x58>)
    32de:	4798      	blx	r3
    32e0:	b00b      	add	sp, #44	; 0x2c
    32e2:	bcc0      	pop	{r6, r7}
    32e4:	46b9      	mov	r9, r7
    32e6:	46b0      	mov	r8, r6
    32e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ea:	46c0      	nop			; (mov r8, r8)
    32ec:	2000060c 	.word	0x2000060c
    32f0:	00002215 	.word	0x00002215
    32f4:	000031e1 	.word	0x000031e1

000032f8 <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    32f8:	b500      	push	{lr}
    32fa:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    32fc:	4b0c      	ldr	r3, [pc, #48]	; (3330 <rtos_delay_callback+0x38>)
    32fe:	4798      	blx	r3
    3300:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    3302:	4b0c      	ldr	r3, [pc, #48]	; (3334 <rtos_delay_callback+0x3c>)
    3304:	681a      	ldr	r2, [r3, #0]
    3306:	6953      	ldr	r3, [r2, #20]
    3308:	9901      	ldr	r1, [sp, #4]
    330a:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    330c:	490a      	ldr	r1, [pc, #40]	; (3338 <rtos_delay_callback+0x40>)
    330e:	6809      	ldr	r1, [r1, #0]
    3310:	4299      	cmp	r1, r3
    3312:	dc07      	bgt.n	3324 <rtos_delay_callback+0x2c>
    3314:	4908      	ldr	r1, [pc, #32]	; (3338 <rtos_delay_callback+0x40>)
    3316:	6808      	ldr	r0, [r1, #0]
    3318:	4907      	ldr	r1, [pc, #28]	; (3338 <rtos_delay_callback+0x40>)
    331a:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    331c:	2b00      	cmp	r3, #0
    331e:	dd03      	ble.n	3328 <rtos_delay_callback+0x30>
}
    3320:	b003      	add	sp, #12
    3322:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    3324:	0018      	movs	r0, r3
    3326:	e7f7      	b.n	3318 <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    3328:	2301      	movs	r3, #1
    332a:	6193      	str	r3, [r2, #24]
}
    332c:	e7f8      	b.n	3320 <rtos_delay_callback+0x28>
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	00002215 	.word	0x00002215
    3334:	2000060c 	.word	0x2000060c
    3338:	20000098 	.word	0x20000098

0000333c <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    333c:	b570      	push	{r4, r5, r6, lr}
    333e:	b086      	sub	sp, #24
    3340:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    3342:	4b09      	ldr	r3, [pc, #36]	; (3368 <rtos_delay_ctick+0x2c>)
    3344:	4798      	blx	r3
    3346:	4b09      	ldr	r3, [pc, #36]	; (336c <rtos_delay_ctick+0x30>)
    3348:	681d      	ldr	r5, [r3, #0]
    334a:	1900      	adds	r0, r0, r4
    334c:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    334e:	aa01      	add	r2, sp, #4
    3350:	4b07      	ldr	r3, [pc, #28]	; (3370 <rtos_delay_ctick+0x34>)
    3352:	0011      	movs	r1, r2
    3354:	cb51      	ldmia	r3!, {r0, r4, r6}
    3356:	c151      	stmia	r1!, {r0, r4, r6}
    3358:	cb11      	ldmia	r3!, {r0, r4}
    335a:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    335c:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    335e:	2002      	movs	r0, #2
    3360:	4b04      	ldr	r3, [pc, #16]	; (3374 <rtos_delay_ctick+0x38>)
    3362:	4798      	blx	r3
    3364:	b006      	add	sp, #24
    3366:	bd70      	pop	{r4, r5, r6, pc}
    3368:	00002215 	.word	0x00002215
    336c:	2000060c 	.word	0x2000060c
    3370:	00005720 	.word	0x00005720
    3374:	000031e1 	.word	0x000031e1

00003378 <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    3378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    337a:	4b16      	ldr	r3, [pc, #88]	; (33d4 <busmanager_process_wait_callback+0x5c>)
    337c:	681b      	ldr	r3, [r3, #0]
    337e:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    3380:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    3382:	2500      	movs	r5, #0
    3384:	e00b      	b.n	339e <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    3386:	4b13      	ldr	r3, [pc, #76]	; (33d4 <busmanager_process_wait_callback+0x5c>)
    3388:	681b      	ldr	r3, [r3, #0]
    338a:	2201      	movs	r2, #1
    338c:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    338e:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3390:	17e3      	asrs	r3, r4, #31
    3392:	0f5b      	lsrs	r3, r3, #29
    3394:	18e4      	adds	r4, r4, r3
    3396:	2207      	movs	r2, #7
    3398:	4014      	ands	r4, r2
    339a:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    339c:	3501      	adds	r5, #1
    339e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    33a0:	42ab      	cmp	r3, r5
    33a2:	dd15      	ble.n	33d0 <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    33a4:	1ca3      	adds	r3, r4, #2
    33a6:	009b      	lsls	r3, r3, #2
    33a8:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    33aa:	7d1a      	ldrb	r2, [r3, #20]
    33ac:	2a00      	cmp	r2, #0
    33ae:	d0ee      	beq.n	338e <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    33b0:	7c1a      	ldrb	r2, [r3, #16]
    33b2:	7c59      	ldrb	r1, [r3, #17]
    33b4:	0209      	lsls	r1, r1, #8
    33b6:	4311      	orrs	r1, r2
    33b8:	7c9a      	ldrb	r2, [r3, #18]
    33ba:	0412      	lsls	r2, r2, #16
    33bc:	430a      	orrs	r2, r1
    33be:	7cdf      	ldrb	r7, [r3, #19]
    33c0:	063f      	lsls	r7, r7, #24
    33c2:	4317      	orrs	r7, r2
    33c4:	4b04      	ldr	r3, [pc, #16]	; (33d8 <busmanager_process_wait_callback+0x60>)
    33c6:	4798      	blx	r3
    33c8:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    33ca:	2f00      	cmp	r7, #0
    33cc:	dcdf      	bgt.n	338e <busmanager_process_wait_callback+0x16>
    33ce:	e7da      	b.n	3386 <busmanager_process_wait_callback+0xe>
	}
}
    33d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	2000060c 	.word	0x2000060c
    33d8:	00002215 	.word	0x00002215

000033dc <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    33dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    33de:	780c      	ldrb	r4, [r1, #0]
    33e0:	784d      	ldrb	r5, [r1, #1]
    33e2:	022d      	lsls	r5, r5, #8
    33e4:	4325      	orrs	r5, r4
    33e6:	788c      	ldrb	r4, [r1, #2]
    33e8:	0424      	lsls	r4, r4, #16
    33ea:	432c      	orrs	r4, r5
    33ec:	78cf      	ldrb	r7, [r1, #3]
    33ee:	063f      	lsls	r7, r7, #24
    33f0:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    33f2:	2601      	movs	r6, #1
    33f4:	e000      	b.n	33f8 <set_matching_id_status+0x1c>
    33f6:	3601      	adds	r6, #1
    33f8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    33fa:	42b1      	cmp	r1, r6
    33fc:	dd17      	ble.n	342e <set_matching_id_status+0x52>
		++queue_pointer;
    33fe:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3400:	17d1      	asrs	r1, r2, #31
    3402:	0f49      	lsrs	r1, r1, #29
    3404:	1852      	adds	r2, r2, r1
    3406:	2407      	movs	r4, #7
    3408:	4022      	ands	r2, r4
    340a:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    340c:	1c91      	adds	r1, r2, #2
    340e:	0089      	lsls	r1, r1, #2
    3410:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    3412:	782c      	ldrb	r4, [r5, #0]
    3414:	7869      	ldrb	r1, [r5, #1]
    3416:	0209      	lsls	r1, r1, #8
    3418:	4321      	orrs	r1, r4
    341a:	78ac      	ldrb	r4, [r5, #2]
    341c:	0424      	lsls	r4, r4, #16
    341e:	430c      	orrs	r4, r1
    3420:	78e9      	ldrb	r1, [r5, #3]
    3422:	0609      	lsls	r1, r1, #24
    3424:	4321      	orrs	r1, r4
    3426:	42b9      	cmp	r1, r7
    3428:	d1e5      	bne.n	33f6 <set_matching_id_status+0x1a>
    342a:	756b      	strb	r3, [r5, #21]
    342c:	e7e3      	b.n	33f6 <set_matching_id_status+0x1a>
}
    342e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003430 <busmanager_process_function>:

void busmanager_process_function() {
    3430:	b5f0      	push	{r4, r5, r6, r7, lr}
    3432:	46ce      	mov	lr, r9
    3434:	4647      	mov	r7, r8
    3436:	b580      	push	{r7, lr}
    3438:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    343a:	4b62      	ldr	r3, [pc, #392]	; (35c4 <busmanager_process_function+0x194>)
    343c:	681b      	ldr	r3, [r3, #0]
    343e:	6a1f      	ldr	r7, [r3, #32]
    3440:	e05d      	b.n	34fe <busmanager_process_function+0xce>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    3442:	0038      	movs	r0, r7
    3444:	3030      	adds	r0, #48	; 0x30
    3446:	2201      	movs	r2, #1
    3448:	3302      	adds	r3, #2
    344a:	4252      	negs	r2, r2
    344c:	2100      	movs	r1, #0
    344e:	4c5e      	ldr	r4, [pc, #376]	; (35c8 <busmanager_process_function+0x198>)
    3450:	47a0      	blx	r4
    3452:	e057      	b.n	3504 <busmanager_process_function+0xd4>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    3454:	7d2b      	ldrb	r3, [r5, #20]
    3456:	2b00      	cmp	r3, #0
    3458:	d158      	bne.n	350c <busmanager_process_function+0xdc>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    345a:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    345c:	17e3      	asrs	r3, r4, #31
    345e:	0f5b      	lsrs	r3, r3, #29
    3460:	18e4      	adds	r4, r4, r3
    3462:	2207      	movs	r2, #7
    3464:	4014      	ands	r4, r2
    3466:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3468:	2301      	movs	r3, #1
    346a:	469c      	mov	ip, r3
    346c:	44e1      	add	r9, ip
    346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3470:	454b      	cmp	r3, r9
    3472:	dd09      	ble.n	3488 <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    3474:	1ca3      	adds	r3, r4, #2
    3476:	009b      	lsls	r3, r3, #2
    3478:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    347a:	2315      	movs	r3, #21
    347c:	56eb      	ldrsb	r3, [r5, r3]
    347e:	2b00      	cmp	r3, #0
    3480:	d1e8      	bne.n	3454 <busmanager_process_function+0x24>
    3482:	7d2b      	ldrb	r3, [r5, #20]
    3484:	2b00      	cmp	r3, #0
    3486:	d1e5      	bne.n	3454 <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    3488:	6b39      	ldr	r1, [r7, #48]	; 0x30
    348a:	4549      	cmp	r1, r9
    348c:	d05e      	beq.n	354c <busmanager_process_function+0x11c>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    348e:	2315      	movs	r3, #21
    3490:	56eb      	ldrsb	r3, [r5, r3]
    3492:	2b02      	cmp	r3, #2
    3494:	d02f      	beq.n	34f6 <busmanager_process_function+0xc6>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    3496:	7b2a      	ldrb	r2, [r5, #12]
    3498:	7b6b      	ldrb	r3, [r5, #13]
    349a:	021b      	lsls	r3, r3, #8
    349c:	4313      	orrs	r3, r2
    349e:	7baa      	ldrb	r2, [r5, #14]
    34a0:	0412      	lsls	r2, r2, #16
    34a2:	431a      	orrs	r2, r3
    34a4:	7beb      	ldrb	r3, [r5, #15]
    34a6:	061b      	lsls	r3, r3, #24
    34a8:	4313      	orrs	r3, r2
    34aa:	d059      	beq.n	3560 <busmanager_process_function+0x130>
				SOS();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    34ac:	7b2b      	ldrb	r3, [r5, #12]
    34ae:	7b6a      	ldrb	r2, [r5, #13]
    34b0:	0212      	lsls	r2, r2, #8
    34b2:	431a      	orrs	r2, r3
    34b4:	7bab      	ldrb	r3, [r5, #14]
    34b6:	041b      	lsls	r3, r3, #16
    34b8:	4313      	orrs	r3, r2
    34ba:	7bec      	ldrb	r4, [r5, #15]
    34bc:	0624      	lsls	r4, r4, #24
    34be:	431c      	orrs	r4, r3
    34c0:	7a2b      	ldrb	r3, [r5, #8]
    34c2:	7a6a      	ldrb	r2, [r5, #9]
    34c4:	0212      	lsls	r2, r2, #8
    34c6:	431a      	orrs	r2, r3
    34c8:	7aab      	ldrb	r3, [r5, #10]
    34ca:	041b      	lsls	r3, r3, #16
    34cc:	4313      	orrs	r3, r2
    34ce:	7aea      	ldrb	r2, [r5, #11]
    34d0:	0612      	lsls	r2, r2, #24
    34d2:	431a      	orrs	r2, r3
    34d4:	6879      	ldr	r1, [r7, #4]
    34d6:	792b      	ldrb	r3, [r5, #4]
    34d8:	7968      	ldrb	r0, [r5, #5]
    34da:	0200      	lsls	r0, r0, #8
    34dc:	4318      	orrs	r0, r3
    34de:	79ab      	ldrb	r3, [r5, #6]
    34e0:	041b      	lsls	r3, r3, #16
    34e2:	4303      	orrs	r3, r0
    34e4:	79e8      	ldrb	r0, [r5, #7]
    34e6:	0600      	lsls	r0, r0, #24
    34e8:	4318      	orrs	r0, r3
    34ea:	002b      	movs	r3, r5
    34ec:	47a0      	blx	r4
    34ee:	2800      	cmp	r0, #0
    34f0:	d001      	beq.n	34f6 <busmanager_process_function+0xc6>
				current_request->status = BusManager_Request_Complete;
    34f2:	2302      	movs	r3, #2
    34f4:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    34f6:	2315      	movs	r3, #21
    34f8:	56eb      	ldrsb	r3, [r5, r3]
    34fa:	2b02      	cmp	r3, #2
    34fc:	d033      	beq.n	3566 <busmanager_process_function+0x136>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    34fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3500:	2b00      	cmp	r3, #0
    3502:	d09e      	beq.n	3442 <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    3504:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    3506:	2300      	movs	r3, #0
    3508:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    350a:	e7b0      	b.n	346e <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    350c:	7c2a      	ldrb	r2, [r5, #16]
    350e:	7c6b      	ldrb	r3, [r5, #17]
    3510:	021b      	lsls	r3, r3, #8
    3512:	4313      	orrs	r3, r2
    3514:	7caa      	ldrb	r2, [r5, #18]
    3516:	0412      	lsls	r2, r2, #16
    3518:	431a      	orrs	r2, r3
    351a:	7ceb      	ldrb	r3, [r5, #19]
    351c:	061b      	lsls	r3, r3, #24
    351e:	4313      	orrs	r3, r2
    3520:	4698      	mov	r8, r3
    3522:	4b2a      	ldr	r3, [pc, #168]	; (35cc <busmanager_process_function+0x19c>)
    3524:	4798      	blx	r3
    3526:	4643      	mov	r3, r8
    3528:	1a18      	subs	r0, r3, r0
    352a:	2800      	cmp	r0, #0
    352c:	dd06      	ble.n	353c <busmanager_process_function+0x10c>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    352e:	2301      	movs	r3, #1
    3530:	0022      	movs	r2, r4
    3532:	0029      	movs	r1, r5
    3534:	0038      	movs	r0, r7
    3536:	4e26      	ldr	r6, [pc, #152]	; (35d0 <busmanager_process_function+0x1a0>)
    3538:	47b0      	blx	r6
			if (unblocked) break;
    353a:	e78e      	b.n	345a <busmanager_process_function+0x2a>
					current_request->busy = false;
    353c:	2300      	movs	r3, #0
    353e:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    3540:	0022      	movs	r2, r4
    3542:	0029      	movs	r1, r5
    3544:	0038      	movs	r0, r7
    3546:	4c22      	ldr	r4, [pc, #136]	; (35d0 <busmanager_process_function+0x1a0>)
    3548:	47a0      	blx	r4
			if (unblocked) break;
    354a:	e79d      	b.n	3488 <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    354c:	0038      	movs	r0, r7
    354e:	3030      	adds	r0, #48	; 0x30
    3550:	2201      	movs	r2, #1
    3552:	4b20      	ldr	r3, [pc, #128]	; (35d4 <busmanager_process_function+0x1a4>)
    3554:	9300      	str	r3, [sp, #0]
    3556:	2301      	movs	r3, #1
    3558:	4252      	negs	r2, r2
    355a:	4c1f      	ldr	r4, [pc, #124]	; (35d8 <busmanager_process_function+0x1a8>)
    355c:	47a0      	blx	r4
			continue;
    355e:	e7ce      	b.n	34fe <busmanager_process_function+0xce>
				SOS();
    3560:	4b1e      	ldr	r3, [pc, #120]	; (35dc <busmanager_process_function+0x1ac>)
    3562:	4798      	blx	r3
    3564:	e7a2      	b.n	34ac <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    3566:	7d2b      	ldrb	r3, [r5, #20]
    3568:	2b00      	cmp	r3, #0
    356a:	d1c8      	bne.n	34fe <busmanager_process_function+0xce>
			current_request->status = BusManager_Request_CompleteNotBusy;
    356c:	3303      	adds	r3, #3
    356e:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    3570:	e017      	b.n	35a2 <busmanager_process_function+0x172>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3574:	4449      	add	r1, r9
    3576:	1e4b      	subs	r3, r1, #1
    3578:	17d8      	asrs	r0, r3, #31
    357a:	0f40      	lsrs	r0, r0, #29
    357c:	181b      	adds	r3, r3, r0
    357e:	2207      	movs	r2, #7
    3580:	4013      	ands	r3, r2
    3582:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3584:	17c8      	asrs	r0, r1, #31
    3586:	0f40      	lsrs	r0, r0, #29
    3588:	1809      	adds	r1, r1, r0
    358a:	400a      	ands	r2, r1
    358c:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    358e:	3302      	adds	r3, #2
    3590:	009b      	lsls	r3, r3, #2
    3592:	59d9      	ldr	r1, [r3, r7]
    3594:	3202      	adds	r2, #2
    3596:	0093      	lsls	r3, r2, #2
    3598:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    359a:	2301      	movs	r3, #1
    359c:	425b      	negs	r3, r3
    359e:	469c      	mov	ip, r3
    35a0:	44e1      	add	r9, ip
    35a2:	464b      	mov	r3, r9
    35a4:	2b00      	cmp	r3, #0
    35a6:	dce4      	bgt.n	3572 <busmanager_process_function+0x142>
			}

			--(data->request_count);
    35a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    35aa:	3b01      	subs	r3, #1
    35ac:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    35ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35b0:	3301      	adds	r3, #1
    35b2:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    35b4:	17d9      	asrs	r1, r3, #31
    35b6:	0f49      	lsrs	r1, r1, #29
    35b8:	185b      	adds	r3, r3, r1
    35ba:	2207      	movs	r2, #7
    35bc:	4013      	ands	r3, r2
    35be:	1a5b      	subs	r3, r3, r1
    35c0:	62bb      	str	r3, [r7, #40]	; 0x28
    35c2:	e79c      	b.n	34fe <busmanager_process_function+0xce>
    35c4:	2000060c 	.word	0x2000060c
    35c8:	00003241 	.word	0x00003241
    35cc:	00002215 	.word	0x00002215
    35d0:	000033dd 	.word	0x000033dd
    35d4:	00003379 	.word	0x00003379
    35d8:	0000329d 	.word	0x0000329d
    35dc:	00002e15 	.word	0x00002e15

000035e0 <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    35e0:	b570      	push	{r4, r5, r6, lr}
    35e2:	0004      	movs	r4, r0
    35e4:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    35e6:	480a      	ldr	r0, [pc, #40]	; (3610 <busmanager_new_process+0x30>)
    35e8:	0013      	movs	r3, r2
    35ea:	000a      	movs	r2, r1
    35ec:	0001      	movs	r1, r0
    35ee:	0020      	movs	r0, r4
    35f0:	4e08      	ldr	r6, [pc, #32]	; (3614 <busmanager_new_process+0x34>)
    35f2:	47b0      	blx	r6
	proc->data.sercom = sercom;
    35f4:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    35f6:	9b04      	ldr	r3, [sp, #16]
    35f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    35fa:	2300      	movs	r3, #0
    35fc:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    35fe:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    3600:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    3602:	0023      	movs	r3, r4
    3604:	3328      	adds	r3, #40	; 0x28
    3606:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    3608:	0020      	movs	r0, r4
    360a:	4b03      	ldr	r3, [pc, #12]	; (3618 <busmanager_new_process+0x38>)
    360c:	4798      	blx	r3
}
    360e:	bd70      	pop	{r4, r5, r6, pc}
    3610:	00003431 	.word	0x00003431
    3614:	00002ed5 	.word	0x00002ed5
    3618:	00002fbd 	.word	0x00002fbd

0000361c <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    361e:	0004      	movs	r4, r0
    3620:	000d      	movs	r5, r1
    3622:	9806      	ldr	r0, [sp, #24]
    3624:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    3626:	2600      	movs	r6, #0
    3628:	702a      	strb	r2, [r5, #0]
    362a:	0a17      	lsrs	r7, r2, #8
    362c:	706f      	strb	r7, [r5, #1]
    362e:	0c17      	lsrs	r7, r2, #16
    3630:	70af      	strb	r7, [r5, #2]
    3632:	0e12      	lsrs	r2, r2, #24
    3634:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    3636:	712b      	strb	r3, [r5, #4]
    3638:	0a1a      	lsrs	r2, r3, #8
    363a:	716a      	strb	r2, [r5, #5]
    363c:	0c1a      	lsrs	r2, r3, #16
    363e:	71aa      	strb	r2, [r5, #6]
    3640:	0e1b      	lsrs	r3, r3, #24
    3642:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    3644:	7228      	strb	r0, [r5, #8]
    3646:	0a03      	lsrs	r3, r0, #8
    3648:	726b      	strb	r3, [r5, #9]
    364a:	0c03      	lsrs	r3, r0, #16
    364c:	72ab      	strb	r3, [r5, #10]
    364e:	0e00      	lsrs	r0, r0, #24
    3650:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    3652:	7329      	strb	r1, [r5, #12]
    3654:	0a0b      	lsrs	r3, r1, #8
    3656:	736b      	strb	r3, [r5, #13]
    3658:	0c0b      	lsrs	r3, r1, #16
    365a:	73ab      	strb	r3, [r5, #14]
    365c:	0e09      	lsrs	r1, r1, #24
    365e:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    3660:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    3662:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3664:	e007      	b.n	3676 <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    3666:	0020      	movs	r0, r4
    3668:	3058      	adds	r0, #88	; 0x58
    366a:	2201      	movs	r2, #1
    366c:	2301      	movs	r3, #1
    366e:	4252      	negs	r2, r2
    3670:	2108      	movs	r1, #8
    3672:	4e0b      	ldr	r6, [pc, #44]	; (36a0 <busmanager_request_transaction+0x84>)
    3674:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3676:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3678:	2b08      	cmp	r3, #8
    367a:	d0f4      	beq.n	3666 <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    367c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    367e:	0011      	movs	r1, r2
    3680:	310c      	adds	r1, #12
    3682:	0089      	lsls	r1, r1, #2
    3684:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    3686:	3301      	adds	r3, #1
    3688:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    368a:	3201      	adds	r2, #1
    368c:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    368e:	17d1      	asrs	r1, r2, #31
    3690:	0f49      	lsrs	r1, r1, #29
    3692:	1853      	adds	r3, r2, r1
    3694:	2207      	movs	r2, #7
    3696:	4013      	ands	r3, r2
    3698:	1a5b      	subs	r3, r3, r1
    369a:	6563      	str	r3, [r4, #84]	; 0x54
    369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	00003241 	.word	0x00003241

000036a4 <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    36a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36a6:	46de      	mov	lr, fp
    36a8:	4657      	mov	r7, sl
    36aa:	464e      	mov	r6, r9
    36ac:	4645      	mov	r5, r8
    36ae:	b5e0      	push	{r5, r6, r7, lr}
    36b0:	b089      	sub	sp, #36	; 0x24
    36b2:	0004      	movs	r4, r0
    36b4:	000e      	movs	r6, r1
    36b6:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    36b8:	ab07      	add	r3, sp, #28
    36ba:	2003      	movs	r0, #3
    36bc:	4682      	mov	sl, r0
    36be:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    36c0:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    36c2:	2115      	movs	r1, #21
    36c4:	a802      	add	r0, sp, #8
    36c6:	4684      	mov	ip, r0
    36c8:	4461      	add	r1, ip
    36ca:	0a10      	lsrs	r0, r2, #8
    36cc:	7008      	strb	r0, [r1, #0]
    36ce:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    36d0:	7822      	ldrb	r2, [r4, #0]
    36d2:	7861      	ldrb	r1, [r4, #1]
    36d4:	0209      	lsls	r1, r1, #8
    36d6:	4311      	orrs	r1, r2
    36d8:	78a2      	ldrb	r2, [r4, #2]
    36da:	0412      	lsls	r2, r2, #16
    36dc:	430a      	orrs	r2, r1
    36de:	78e5      	ldrb	r5, [r4, #3]
    36e0:	062d      	lsls	r5, r5, #24
    36e2:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    36e4:	9604      	str	r6, [sp, #16]
    36e6:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    36e8:	2128      	movs	r1, #40	; 0x28
    36ea:	4689      	mov	r9, r1
    36ec:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    36ee:	0100      	lsls	r0, r0, #4
    36f0:	4e24      	ldr	r6, [pc, #144]	; (3784 <dma_eeprom_read+0xe0>)
    36f2:	1980      	adds	r0, r0, r6
    36f4:	4924      	ldr	r1, [pc, #144]	; (3788 <dma_eeprom_read+0xe4>)
    36f6:	468b      	mov	fp, r1
    36f8:	9103      	str	r1, [sp, #12]
    36fa:	4649      	mov	r1, r9
    36fc:	9102      	str	r1, [sp, #8]
    36fe:	9301      	str	r3, [sp, #4]
    3700:	4651      	mov	r1, sl
    3702:	9100      	str	r1, [sp, #0]
    3704:	2300      	movs	r3, #0
    3706:	2200      	movs	r2, #0
    3708:	3902      	subs	r1, #2
    370a:	4f20      	ldr	r7, [pc, #128]	; (378c <dma_eeprom_read+0xe8>)
    370c:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    370e:	466b      	mov	r3, sp
    3710:	8a9b      	ldrh	r3, [r3, #20]
    3712:	4698      	mov	r8, r3
    3714:	2300      	movs	r3, #0
    3716:	9303      	str	r3, [sp, #12]
    3718:	4649      	mov	r1, r9
    371a:	9102      	str	r1, [sp, #8]
    371c:	4b1c      	ldr	r3, [pc, #112]	; (3790 <dma_eeprom_read+0xec>)
    371e:	9301      	str	r3, [sp, #4]
    3720:	4641      	mov	r1, r8
    3722:	9100      	str	r1, [sp, #0]
    3724:	2300      	movs	r3, #0
    3726:	2200      	movs	r2, #0
    3728:	2100      	movs	r1, #0
    372a:	4658      	mov	r0, fp
    372c:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    372e:	9a04      	ldr	r2, [sp, #16]
    3730:	7850      	ldrb	r0, [r2, #1]
    3732:	0100      	lsls	r0, r0, #4
    3734:	1980      	adds	r0, r0, r6
    3736:	4917      	ldr	r1, [pc, #92]	; (3794 <dma_eeprom_read+0xf0>)
    3738:	468b      	mov	fp, r1
    373a:	9103      	str	r1, [sp, #12]
    373c:	4b16      	ldr	r3, [pc, #88]	; (3798 <dma_eeprom_read+0xf4>)
    373e:	9302      	str	r3, [sp, #8]
    3740:	4649      	mov	r1, r9
    3742:	9101      	str	r1, [sp, #4]
    3744:	4651      	mov	r1, sl
    3746:	9100      	str	r1, [sp, #0]
    3748:	2300      	movs	r3, #0
    374a:	2200      	movs	r2, #0
    374c:	2100      	movs	r1, #0
    374e:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3750:	2300      	movs	r3, #0
    3752:	9303      	str	r3, [sp, #12]
    3754:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3756:	9302      	str	r3, [sp, #8]
    3758:	464b      	mov	r3, r9
    375a:	9301      	str	r3, [sp, #4]
    375c:	4643      	mov	r3, r8
    375e:	9300      	str	r3, [sp, #0]
    3760:	2300      	movs	r3, #0
    3762:	2201      	movs	r2, #1
    3764:	2100      	movs	r1, #0
    3766:	4658      	mov	r0, fp
    3768:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    376a:	1d21      	adds	r1, r4, #4
    376c:	9a04      	ldr	r2, [sp, #16]
    376e:	0028      	movs	r0, r5
    3770:	4b0a      	ldr	r3, [pc, #40]	; (379c <dma_eeprom_read+0xf8>)
    3772:	4798      	blx	r3
}
    3774:	b009      	add	sp, #36	; 0x24
    3776:	bcf0      	pop	{r4, r5, r6, r7}
    3778:	46bb      	mov	fp, r7
    377a:	46b2      	mov	sl, r6
    377c:	46a9      	mov	r9, r5
    377e:	46a0      	mov	r8, r4
    3780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	200003e0 	.word	0x200003e0
    3788:	20000670 	.word	0x20000670
    378c:	0000136d 	.word	0x0000136d
    3790:	00005651 	.word	0x00005651
    3794:	20000660 	.word	0x20000660
    3798:	200002b0 	.word	0x200002b0
    379c:	00003c39 	.word	0x00003c39

000037a0 <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    37a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37a2:	46de      	mov	lr, fp
    37a4:	4657      	mov	r7, sl
    37a6:	464e      	mov	r6, r9
    37a8:	4645      	mov	r5, r8
    37aa:	b5e0      	push	{r5, r6, r7, lr}
    37ac:	b089      	sub	sp, #36	; 0x24
    37ae:	0004      	movs	r4, r0
    37b0:	000e      	movs	r6, r1
    37b2:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    37b4:	ab07      	add	r3, sp, #28
    37b6:	2102      	movs	r1, #2
    37b8:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    37ba:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    37bc:	3113      	adds	r1, #19
    37be:	a802      	add	r0, sp, #8
    37c0:	4684      	mov	ip, r0
    37c2:	4461      	add	r1, ip
    37c4:	0a10      	lsrs	r0, r2, #8
    37c6:	7008      	strb	r0, [r1, #0]
    37c8:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    37ca:	7822      	ldrb	r2, [r4, #0]
    37cc:	7861      	ldrb	r1, [r4, #1]
    37ce:	0209      	lsls	r1, r1, #8
    37d0:	4311      	orrs	r1, r2
    37d2:	78a2      	ldrb	r2, [r4, #2]
    37d4:	0412      	lsls	r2, r2, #16
    37d6:	430a      	orrs	r2, r1
    37d8:	78e5      	ldrb	r5, [r4, #3]
    37da:	062d      	lsls	r5, r5, #24
    37dc:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    37de:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    37e0:	2228      	movs	r2, #40	; 0x28
    37e2:	4690      	mov	r8, r2
    37e4:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    37e6:	0100      	lsls	r0, r0, #4
    37e8:	4a25      	ldr	r2, [pc, #148]	; (3880 <dma_eeprom_write+0xe0>)
    37ea:	4691      	mov	r9, r2
    37ec:	4448      	add	r0, r9
    37ee:	4a25      	ldr	r2, [pc, #148]	; (3884 <dma_eeprom_write+0xe4>)
    37f0:	4693      	mov	fp, r2
    37f2:	9203      	str	r2, [sp, #12]
    37f4:	4642      	mov	r2, r8
    37f6:	9202      	str	r2, [sp, #8]
    37f8:	9301      	str	r3, [sp, #4]
    37fa:	2203      	movs	r2, #3
    37fc:	9200      	str	r2, [sp, #0]
    37fe:	2300      	movs	r3, #0
    3800:	2200      	movs	r2, #0
    3802:	2101      	movs	r1, #1
    3804:	4f20      	ldr	r7, [pc, #128]	; (3888 <dma_eeprom_write+0xe8>)
    3806:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3808:	466b      	mov	r3, sp
    380a:	8a9b      	ldrh	r3, [r3, #20]
    380c:	469a      	mov	sl, r3
    380e:	2300      	movs	r3, #0
    3810:	9303      	str	r3, [sp, #12]
    3812:	4641      	mov	r1, r8
    3814:	9102      	str	r1, [sp, #8]
    3816:	9912      	ldr	r1, [sp, #72]	; 0x48
    3818:	9101      	str	r1, [sp, #4]
    381a:	4651      	mov	r1, sl
    381c:	9100      	str	r1, [sp, #0]
    381e:	2200      	movs	r2, #0
    3820:	2101      	movs	r1, #1
    3822:	4658      	mov	r0, fp
    3824:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3826:	7870      	ldrb	r0, [r6, #1]
    3828:	0100      	lsls	r0, r0, #4
    382a:	4448      	add	r0, r9
    382c:	4917      	ldr	r1, [pc, #92]	; (388c <dma_eeprom_write+0xec>)
    382e:	4689      	mov	r9, r1
    3830:	9103      	str	r1, [sp, #12]
    3832:	4917      	ldr	r1, [pc, #92]	; (3890 <dma_eeprom_write+0xf0>)
    3834:	468b      	mov	fp, r1
    3836:	9102      	str	r1, [sp, #8]
    3838:	4641      	mov	r1, r8
    383a:	9101      	str	r1, [sp, #4]
    383c:	2203      	movs	r2, #3
    383e:	9200      	str	r2, [sp, #0]
    3840:	2300      	movs	r3, #0
    3842:	2200      	movs	r2, #0
    3844:	2100      	movs	r1, #0
    3846:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3848:	2300      	movs	r3, #0
    384a:	9303      	str	r3, [sp, #12]
    384c:	465b      	mov	r3, fp
    384e:	9302      	str	r3, [sp, #8]
    3850:	4643      	mov	r3, r8
    3852:	9301      	str	r3, [sp, #4]
    3854:	4653      	mov	r3, sl
    3856:	9300      	str	r3, [sp, #0]
    3858:	2300      	movs	r3, #0
    385a:	2200      	movs	r2, #0
    385c:	2100      	movs	r1, #0
    385e:	4648      	mov	r0, r9
    3860:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    3862:	0020      	movs	r0, r4
    3864:	4b0b      	ldr	r3, [pc, #44]	; (3894 <dma_eeprom_write+0xf4>)
    3866:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3868:	1d21      	adds	r1, r4, #4
    386a:	0032      	movs	r2, r6
    386c:	0028      	movs	r0, r5
    386e:	4b0a      	ldr	r3, [pc, #40]	; (3898 <dma_eeprom_write+0xf8>)
    3870:	4798      	blx	r3
}
    3872:	b009      	add	sp, #36	; 0x24
    3874:	bcf0      	pop	{r4, r5, r6, r7}
    3876:	46bb      	mov	fp, r7
    3878:	46b2      	mov	sl, r6
    387a:	46a9      	mov	r9, r5
    387c:	46a0      	mov	r8, r4
    387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3880:	200003e0 	.word	0x200003e0
    3884:	20000670 	.word	0x20000670
    3888:	0000136d 	.word	0x0000136d
    388c:	20000660 	.word	0x20000660
    3890:	200002b0 	.word	0x200002b0
    3894:	000014dd 	.word	0x000014dd
    3898:	00003c39 	.word	0x00003c39

0000389c <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    389c:	b5f0      	push	{r4, r5, r6, r7, lr}
    389e:	b083      	sub	sp, #12
    38a0:	0014      	movs	r4, r2
    38a2:	001d      	movs	r5, r3
	switch (request->type) {
    38a4:	2324      	movs	r3, #36	; 0x24
    38a6:	5cd3      	ldrb	r3, [r2, r3]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d004      	beq.n	38b6 <dma_eeprom_process_request+0x1a>
    38ac:	2b01      	cmp	r3, #1
    38ae:	d00a      	beq.n	38c6 <dma_eeprom_process_request+0x2a>
    38b0:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    38b2:	b003      	add	sp, #12
    38b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    38b6:	69d3      	ldr	r3, [r2, #28]
    38b8:	6992      	ldr	r2, [r2, #24]
    38ba:	6a24      	ldr	r4, [r4, #32]
    38bc:	9400      	str	r4, [sp, #0]
    38be:	4c1a      	ldr	r4, [pc, #104]	; (3928 <dma_eeprom_process_request+0x8c>)
    38c0:	47a0      	blx	r4
	return true;
    38c2:	2001      	movs	r0, #1
		break;
    38c4:	e7f5      	b.n	38b2 <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    38c6:	6992      	ldr	r2, [r2, #24]
    38c8:	69e6      	ldr	r6, [r4, #28]
    38ca:	1993      	adds	r3, r2, r6
    38cc:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    38ce:	233f      	movs	r3, #63	; 0x3f
    38d0:	0017      	movs	r7, r2
    38d2:	439f      	bics	r7, r3
    38d4:	003b      	movs	r3, r7
    38d6:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    38d8:	459c      	cmp	ip, r3
    38da:	d300      	bcc.n	38de <dma_eeprom_process_request+0x42>
    38dc:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    38de:	6a23      	ldr	r3, [r4, #32]
    38e0:	9300      	str	r3, [sp, #0]
    38e2:	0033      	movs	r3, r6
    38e4:	4f11      	ldr	r7, [pc, #68]	; (392c <dma_eeprom_process_request+0x90>)
    38e6:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    38e8:	4b11      	ldr	r3, [pc, #68]	; (3930 <dma_eeprom_process_request+0x94>)
    38ea:	4798      	blx	r3
    38ec:	4b11      	ldr	r3, [pc, #68]	; (3934 <dma_eeprom_process_request+0x98>)
    38ee:	4798      	blx	r3
    38f0:	4b11      	ldr	r3, [pc, #68]	; (3938 <dma_eeprom_process_request+0x9c>)
    38f2:	4912      	ldr	r1, [pc, #72]	; (393c <dma_eeprom_process_request+0xa0>)
    38f4:	4798      	blx	r3
    38f6:	4b12      	ldr	r3, [pc, #72]	; (3940 <dma_eeprom_process_request+0xa4>)
    38f8:	4798      	blx	r3
    38fa:	7428      	strb	r0, [r5, #16]
    38fc:	0a03      	lsrs	r3, r0, #8
    38fe:	746b      	strb	r3, [r5, #17]
    3900:	0c03      	lsrs	r3, r0, #16
    3902:	74ab      	strb	r3, [r5, #18]
    3904:	0e00      	lsrs	r0, r0, #24
    3906:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    3908:	2301      	movs	r3, #1
    390a:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    390c:	69e3      	ldr	r3, [r4, #28]
    390e:	1b9b      	subs	r3, r3, r6
    3910:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    3912:	d101      	bne.n	3918 <dma_eeprom_process_request+0x7c>
	return true;
    3914:	2001      	movs	r0, #1
    3916:	e7cc      	b.n	38b2 <dma_eeprom_process_request+0x16>
				request->address += count;
    3918:	69a3      	ldr	r3, [r4, #24]
    391a:	199b      	adds	r3, r3, r6
    391c:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    391e:	6a23      	ldr	r3, [r4, #32]
    3920:	199b      	adds	r3, r3, r6
    3922:	6223      	str	r3, [r4, #32]
				return false;
    3924:	2000      	movs	r0, #0
    3926:	e7c4      	b.n	38b2 <dma_eeprom_process_request+0x16>
    3928:	000036a5 	.word	0x000036a5
    392c:	000037a1 	.word	0x000037a1
    3930:	00002215 	.word	0x00002215
    3934:	00005041 	.word	0x00005041
    3938:	000042f9 	.word	0x000042f9
    393c:	486a6000 	.word	0x486a6000
    3940:	000042c9 	.word	0x000042c9

00003944 <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    3944:	b530      	push	{r4, r5, lr}
    3946:	b083      	sub	sp, #12
    3948:	0014      	movs	r4, r2
    394a:	001a      	movs	r2, r3
    394c:	ab06      	add	r3, sp, #24
    394e:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3950:	2324      	movs	r3, #36	; 0x24
    3952:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    3954:	9b07      	ldr	r3, [sp, #28]
    3956:	618b      	str	r3, [r1, #24]
	request->count = count;
    3958:	9b08      	ldr	r3, [sp, #32]
    395a:	61cb      	str	r3, [r1, #28]
	request->data = data;
    395c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    395e:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    3960:	4b03      	ldr	r3, [pc, #12]	; (3970 <eeprom_request+0x2c>)
    3962:	9301      	str	r3, [sp, #4]
    3964:	9100      	str	r1, [sp, #0]
    3966:	0023      	movs	r3, r4
    3968:	4c02      	ldr	r4, [pc, #8]	; (3974 <eeprom_request+0x30>)
    396a:	47a0      	blx	r4
}
    396c:	b003      	add	sp, #12
    396e:	bd30      	pop	{r4, r5, pc}
    3970:	0000389d 	.word	0x0000389d
    3974:	0000361d 	.word	0x0000361d

00003978 <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    3978:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    397a:	3015      	adds	r0, #21
    397c:	2300      	movs	r3, #0
    397e:	22ff      	movs	r2, #255	; 0xff
    3980:	2103      	movs	r1, #3
    3982:	4c01      	ldr	r4, [pc, #4]	; (3988 <eeprom_wait_until_done+0x10>)
    3984:	47a0      	blx	r4
    3986:	bd10      	pop	{r4, pc}
    3988:	00003241 	.word	0x00003241

0000398c <dma_imu_icm20948_read>:
void dma_imu_icm20948_read(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* writeback) {
    398c:	b5f0      	push	{r4, r5, r6, r7, lr}
    398e:	46de      	mov	lr, fp
    3990:	4657      	mov	r7, sl
    3992:	464e      	mov	r6, r9
    3994:	4645      	mov	r5, r8
    3996:	b5e0      	push	{r5, r6, r7, lr}
    3998:	b087      	sub	sp, #28
    399a:	0004      	movs	r4, r0
    399c:	000e      	movs	r6, r1
    399e:	9304      	str	r3, [sp, #16]
    39a0:	2317      	movs	r3, #23
    39a2:	446b      	add	r3, sp
    39a4:	701a      	strb	r2, [r3, #0]
	address |= IMU_READ_MASK;
    39a6:	b2d1      	uxtb	r1, r2
    39a8:	2280      	movs	r2, #128	; 0x80
    39aa:	4252      	negs	r2, r2
    39ac:	430a      	orrs	r2, r1
    39ae:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    39b0:	7802      	ldrb	r2, [r0, #0]
    39b2:	7841      	ldrb	r1, [r0, #1]
    39b4:	0209      	lsls	r1, r1, #8
    39b6:	4311      	orrs	r1, r2
    39b8:	7882      	ldrb	r2, [r0, #2]
    39ba:	0412      	lsls	r2, r2, #16
    39bc:	430a      	orrs	r2, r1
    39be:	78c5      	ldrb	r5, [r0, #3]
    39c0:	062d      	lsls	r5, r5, #24
    39c2:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    39c4:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    39c6:	2228      	movs	r2, #40	; 0x28
    39c8:	4691      	mov	r9, r2
    39ca:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    39cc:	0100      	lsls	r0, r0, #4
    39ce:	4a24      	ldr	r2, [pc, #144]	; (3a60 <dma_imu_icm20948_read+0xd4>)
    39d0:	4692      	mov	sl, r2
    39d2:	4450      	add	r0, sl
    39d4:	4a23      	ldr	r2, [pc, #140]	; (3a64 <dma_imu_icm20948_read+0xd8>)
    39d6:	4693      	mov	fp, r2
    39d8:	9203      	str	r2, [sp, #12]
    39da:	464a      	mov	r2, r9
    39dc:	9202      	str	r2, [sp, #8]
    39de:	9301      	str	r3, [sp, #4]
    39e0:	2201      	movs	r2, #1
    39e2:	9200      	str	r2, [sp, #0]
    39e4:	2300      	movs	r3, #0
    39e6:	2200      	movs	r2, #0
    39e8:	2100      	movs	r1, #0
    39ea:	4f1f      	ldr	r7, [pc, #124]	; (3a68 <dma_imu_icm20948_read+0xdc>)
    39ec:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    39ee:	466b      	mov	r3, sp
    39f0:	8a1b      	ldrh	r3, [r3, #16]
    39f2:	4698      	mov	r8, r3
    39f4:	2300      	movs	r3, #0
    39f6:	9303      	str	r3, [sp, #12]
    39f8:	4649      	mov	r1, r9
    39fa:	9102      	str	r1, [sp, #8]
    39fc:	4b1b      	ldr	r3, [pc, #108]	; (3a6c <dma_imu_icm20948_read+0xe0>)
    39fe:	9301      	str	r3, [sp, #4]
    3a00:	4641      	mov	r1, r8
    3a02:	9100      	str	r1, [sp, #0]
    3a04:	2300      	movs	r3, #0
    3a06:	2200      	movs	r2, #0
    3a08:	2100      	movs	r1, #0
    3a0a:	4658      	mov	r0, fp
    3a0c:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3a0e:	7870      	ldrb	r0, [r6, #1]
    3a10:	0100      	lsls	r0, r0, #4
    3a12:	4450      	add	r0, sl
    3a14:	4916      	ldr	r1, [pc, #88]	; (3a70 <dma_imu_icm20948_read+0xe4>)
    3a16:	468b      	mov	fp, r1
    3a18:	9103      	str	r1, [sp, #12]
    3a1a:	4b16      	ldr	r3, [pc, #88]	; (3a74 <dma_imu_icm20948_read+0xe8>)
    3a1c:	9302      	str	r3, [sp, #8]
    3a1e:	4649      	mov	r1, r9
    3a20:	9101      	str	r1, [sp, #4]
    3a22:	2201      	movs	r2, #1
    3a24:	9200      	str	r2, [sp, #0]
    3a26:	2300      	movs	r3, #0
    3a28:	2200      	movs	r2, #0
    3a2a:	2100      	movs	r1, #0
    3a2c:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3a2e:	2300      	movs	r3, #0
    3a30:	9303      	str	r3, [sp, #12]
    3a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3a34:	9302      	str	r3, [sp, #8]
    3a36:	464b      	mov	r3, r9
    3a38:	9301      	str	r3, [sp, #4]
    3a3a:	4643      	mov	r3, r8
    3a3c:	9300      	str	r3, [sp, #0]
    3a3e:	2300      	movs	r3, #0
    3a40:	2201      	movs	r2, #1
    3a42:	2100      	movs	r1, #0
    3a44:	4658      	mov	r0, fp
    3a46:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3a48:	1d21      	adds	r1, r4, #4
    3a4a:	0032      	movs	r2, r6
    3a4c:	0028      	movs	r0, r5
    3a4e:	4b0a      	ldr	r3, [pc, #40]	; (3a78 <dma_imu_icm20948_read+0xec>)
    3a50:	4798      	blx	r3
}
    3a52:	b007      	add	sp, #28
    3a54:	bcf0      	pop	{r4, r5, r6, r7}
    3a56:	46bb      	mov	fp, r7
    3a58:	46b2      	mov	sl, r6
    3a5a:	46a9      	mov	r9, r5
    3a5c:	46a0      	mov	r8, r4
    3a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a60:	200003e0 	.word	0x200003e0
    3a64:	20000670 	.word	0x20000670
    3a68:	0000136d 	.word	0x0000136d
    3a6c:	00005651 	.word	0x00005651
    3a70:	20000660 	.word	0x20000660
    3a74:	200002b0 	.word	0x200002b0
    3a78:	00003c39 	.word	0x00003c39

00003a7c <dma_imu_icm20948_write>:
void dma_imu_icm20948_write(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* data) {
    3a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a7e:	46de      	mov	lr, fp
    3a80:	4657      	mov	r7, sl
    3a82:	464e      	mov	r6, r9
    3a84:	4645      	mov	r5, r8
    3a86:	b5e0      	push	{r5, r6, r7, lr}
    3a88:	b087      	sub	sp, #28
    3a8a:	0004      	movs	r4, r0
    3a8c:	000e      	movs	r6, r1
    3a8e:	9304      	str	r3, [sp, #16]
    3a90:	2317      	movs	r3, #23
    3a92:	446b      	add	r3, sp
    3a94:	701a      	strb	r2, [r3, #0]
	address &= IMU_WRITE_MASK;
    3a96:	b2d1      	uxtb	r1, r2
    3a98:	227f      	movs	r2, #127	; 0x7f
    3a9a:	400a      	ands	r2, r1
    3a9c:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    3a9e:	7802      	ldrb	r2, [r0, #0]
    3aa0:	7841      	ldrb	r1, [r0, #1]
    3aa2:	0209      	lsls	r1, r1, #8
    3aa4:	4311      	orrs	r1, r2
    3aa6:	7882      	ldrb	r2, [r0, #2]
    3aa8:	0412      	lsls	r2, r2, #16
    3aaa:	430a      	orrs	r2, r1
    3aac:	78c5      	ldrb	r5, [r0, #3]
    3aae:	062d      	lsls	r5, r5, #24
    3ab0:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3ab2:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3ab4:	2228      	movs	r2, #40	; 0x28
    3ab6:	4690      	mov	r8, r2
    3ab8:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3aba:	0100      	lsls	r0, r0, #4
    3abc:	4a24      	ldr	r2, [pc, #144]	; (3b50 <dma_imu_icm20948_write+0xd4>)
    3abe:	4691      	mov	r9, r2
    3ac0:	4448      	add	r0, r9
    3ac2:	4a24      	ldr	r2, [pc, #144]	; (3b54 <dma_imu_icm20948_write+0xd8>)
    3ac4:	4693      	mov	fp, r2
    3ac6:	9203      	str	r2, [sp, #12]
    3ac8:	4642      	mov	r2, r8
    3aca:	9202      	str	r2, [sp, #8]
    3acc:	9301      	str	r3, [sp, #4]
    3ace:	2201      	movs	r2, #1
    3ad0:	9200      	str	r2, [sp, #0]
    3ad2:	2300      	movs	r3, #0
    3ad4:	2200      	movs	r2, #0
    3ad6:	2100      	movs	r1, #0
    3ad8:	4f1f      	ldr	r7, [pc, #124]	; (3b58 <dma_imu_icm20948_write+0xdc>)
    3ada:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    3adc:	466b      	mov	r3, sp
    3ade:	8a1b      	ldrh	r3, [r3, #16]
    3ae0:	469a      	mov	sl, r3
    3ae2:	2300      	movs	r3, #0
    3ae4:	9303      	str	r3, [sp, #12]
    3ae6:	4641      	mov	r1, r8
    3ae8:	9102      	str	r1, [sp, #8]
    3aea:	9910      	ldr	r1, [sp, #64]	; 0x40
    3aec:	9101      	str	r1, [sp, #4]
    3aee:	4651      	mov	r1, sl
    3af0:	9100      	str	r1, [sp, #0]
    3af2:	2200      	movs	r2, #0
    3af4:	2101      	movs	r1, #1
    3af6:	4658      	mov	r0, fp
    3af8:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    3afa:	7870      	ldrb	r0, [r6, #1]
    3afc:	0100      	lsls	r0, r0, #4
    3afe:	4448      	add	r0, r9
    3b00:	4916      	ldr	r1, [pc, #88]	; (3b5c <dma_imu_icm20948_write+0xe0>)
    3b02:	4689      	mov	r9, r1
    3b04:	9103      	str	r1, [sp, #12]
    3b06:	4916      	ldr	r1, [pc, #88]	; (3b60 <dma_imu_icm20948_write+0xe4>)
    3b08:	468b      	mov	fp, r1
    3b0a:	9102      	str	r1, [sp, #8]
    3b0c:	4641      	mov	r1, r8
    3b0e:	9101      	str	r1, [sp, #4]
    3b10:	2201      	movs	r2, #1
    3b12:	9200      	str	r2, [sp, #0]
    3b14:	2300      	movs	r3, #0
    3b16:	2200      	movs	r2, #0
    3b18:	2100      	movs	r1, #0
    3b1a:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3b1c:	2300      	movs	r3, #0
    3b1e:	9303      	str	r3, [sp, #12]
    3b20:	465b      	mov	r3, fp
    3b22:	9302      	str	r3, [sp, #8]
    3b24:	4643      	mov	r3, r8
    3b26:	9301      	str	r3, [sp, #4]
    3b28:	4653      	mov	r3, sl
    3b2a:	9300      	str	r3, [sp, #0]
    3b2c:	2300      	movs	r3, #0
    3b2e:	2200      	movs	r2, #0
    3b30:	2100      	movs	r1, #0
    3b32:	4648      	mov	r0, r9
    3b34:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    3b36:	1d21      	adds	r1, r4, #4
    3b38:	0032      	movs	r2, r6
    3b3a:	0028      	movs	r0, r5
    3b3c:	4b09      	ldr	r3, [pc, #36]	; (3b64 <dma_imu_icm20948_write+0xe8>)
    3b3e:	4798      	blx	r3
}
    3b40:	b007      	add	sp, #28
    3b42:	bcf0      	pop	{r4, r5, r6, r7}
    3b44:	46bb      	mov	fp, r7
    3b46:	46b2      	mov	sl, r6
    3b48:	46a9      	mov	r9, r5
    3b4a:	46a0      	mov	r8, r4
    3b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b4e:	46c0      	nop			; (mov r8, r8)
    3b50:	200003e0 	.word	0x200003e0
    3b54:	20000670 	.word	0x20000670
    3b58:	0000136d 	.word	0x0000136d
    3b5c:	20000660 	.word	0x20000660
    3b60:	200002b0 	.word	0x200002b0
    3b64:	00003c39 	.word	0x00003c39

00003b68 <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    3b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b6a:	b085      	sub	sp, #20
    3b6c:	0005      	movs	r5, r0
    3b6e:	000e      	movs	r6, r1
    3b70:	0014      	movs	r4, r2
	IMU_ON_BUS();
    3b72:	2180      	movs	r1, #128	; 0x80
    3b74:	0389      	lsls	r1, r1, #14
    3b76:	2000      	movs	r0, #0
    3b78:	4b17      	ldr	r3, [pc, #92]	; (3bd8 <dma_imu_icm20948_process_request+0x70>)
    3b7a:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    3b7c:	2325      	movs	r3, #37	; 0x25
    3b7e:	5ce3      	ldrb	r3, [r4, r3]
    3b80:	011b      	lsls	r3, r3, #4
    3b82:	220f      	movs	r2, #15
    3b84:	446a      	add	r2, sp
    3b86:	7013      	strb	r3, [r2, #0]
	dma_imu_icm20948_write(imudesc, dmadesc, REG_BANK_SEL, 1, &bank);
    3b88:	9200      	str	r2, [sp, #0]
    3b8a:	2301      	movs	r3, #1
    3b8c:	227f      	movs	r2, #127	; 0x7f
    3b8e:	0031      	movs	r1, r6
    3b90:	0028      	movs	r0, r5
    3b92:	4f12      	ldr	r7, [pc, #72]	; (3bdc <dma_imu_icm20948_process_request+0x74>)
    3b94:	47b8      	blx	r7
	switch (request->type) {
    3b96:	2324      	movs	r3, #36	; 0x24
    3b98:	5ce3      	ldrb	r3, [r4, r3]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d009      	beq.n	3bb2 <dma_imu_icm20948_process_request+0x4a>
    3b9e:	2b01      	cmp	r3, #1
    3ba0:	d010      	beq.n	3bc4 <dma_imu_icm20948_process_request+0x5c>
	IMU_OFF_BUS();
    3ba2:	2180      	movs	r1, #128	; 0x80
    3ba4:	0389      	lsls	r1, r1, #14
    3ba6:	2000      	movs	r0, #0
    3ba8:	4b0d      	ldr	r3, [pc, #52]	; (3be0 <dma_imu_icm20948_process_request+0x78>)
    3baa:	4798      	blx	r3
}
    3bac:	2001      	movs	r0, #1
    3bae:	b005      	add	sp, #20
    3bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dma_imu_icm20948_read(imudesc, dmadesc, request->address, request->count, request->data);
    3bb2:	69e3      	ldr	r3, [r4, #28]
    3bb4:	7e22      	ldrb	r2, [r4, #24]
    3bb6:	6a21      	ldr	r1, [r4, #32]
    3bb8:	9100      	str	r1, [sp, #0]
    3bba:	0031      	movs	r1, r6
    3bbc:	0028      	movs	r0, r5
    3bbe:	4c09      	ldr	r4, [pc, #36]	; (3be4 <dma_imu_icm20948_process_request+0x7c>)
    3bc0:	47a0      	blx	r4
		break;
    3bc2:	e7ee      	b.n	3ba2 <dma_imu_icm20948_process_request+0x3a>
		dma_imu_icm20948_write(imudesc, dmadesc, request->address, request->count, request->data);
    3bc4:	69e3      	ldr	r3, [r4, #28]
    3bc6:	7e22      	ldrb	r2, [r4, #24]
    3bc8:	6a21      	ldr	r1, [r4, #32]
    3bca:	9100      	str	r1, [sp, #0]
    3bcc:	0031      	movs	r1, r6
    3bce:	0028      	movs	r0, r5
    3bd0:	4c02      	ldr	r4, [pc, #8]	; (3bdc <dma_imu_icm20948_process_request+0x74>)
    3bd2:	47a0      	blx	r4
		break;
    3bd4:	e7e5      	b.n	3ba2 <dma_imu_icm20948_process_request+0x3a>
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	00001bcd 	.word	0x00001bcd
    3bdc:	00003a7d 	.word	0x00003a7d
    3be0:	00001bdd 	.word	0x00001bdd
    3be4:	0000398d 	.word	0x0000398d

00003be8 <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    3be8:	b570      	push	{r4, r5, r6, lr}
    3bea:	b082      	sub	sp, #8
    3bec:	0014      	movs	r4, r2
    3bee:	001a      	movs	r2, r3
    3bf0:	ab06      	add	r3, sp, #24
    3bf2:	781e      	ldrb	r6, [r3, #0]
    3bf4:	ab07      	add	r3, sp, #28
    3bf6:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    3bf8:	2324      	movs	r3, #36	; 0x24
    3bfa:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    3bfc:	9b08      	ldr	r3, [sp, #32]
    3bfe:	618b      	str	r3, [r1, #24]
	request->count = count;
    3c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c02:	61cb      	str	r3, [r1, #28]
	request->data = data;
    3c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c06:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    3c08:	2325      	movs	r3, #37	; 0x25
    3c0a:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    3c0c:	4b03      	ldr	r3, [pc, #12]	; (3c1c <imu_icm20948_request+0x34>)
    3c0e:	9301      	str	r3, [sp, #4]
    3c10:	9100      	str	r1, [sp, #0]
    3c12:	0023      	movs	r3, r4
    3c14:	4c02      	ldr	r4, [pc, #8]	; (3c20 <imu_icm20948_request+0x38>)
    3c16:	47a0      	blx	r4
}
    3c18:	b002      	add	sp, #8
    3c1a:	bd70      	pop	{r4, r5, r6, pc}
    3c1c:	00003b69 	.word	0x00003b69
    3c20:	0000361d 	.word	0x0000361d

00003c24 <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    3c24:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    3c26:	3015      	adds	r0, #21
    3c28:	2300      	movs	r3, #0
    3c2a:	22ff      	movs	r2, #255	; 0xff
    3c2c:	2103      	movs	r1, #3
    3c2e:	4c01      	ldr	r4, [pc, #4]	; (3c34 <imu_icm20948_wait_until_done+0x10>)
    3c30:	47a0      	blx	r4
}
    3c32:	bd10      	pop	{r4, pc}
    3c34:	00003241 	.word	0x00003241

00003c38 <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    3c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c3a:	0007      	movs	r7, r0
    3c3c:	000d      	movs	r5, r1
    3c3e:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    3c40:	7810      	ldrb	r0, [r2, #0]
    3c42:	4e1c      	ldr	r6, [pc, #112]	; (3cb4 <dma_spi_transaction+0x7c>)
    3c44:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3c46:	7860      	ldrb	r0, [r4, #1]
    3c48:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    3c4a:	0038      	movs	r0, r7
    3c4c:	4b1a      	ldr	r3, [pc, #104]	; (3cb8 <dma_spi_transaction+0x80>)
    3c4e:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    3c50:	7923      	ldrb	r3, [r4, #4]
    3c52:	78e2      	ldrb	r2, [r4, #3]
    3c54:	7820      	ldrb	r0, [r4, #0]
    3c56:	2102      	movs	r1, #2
    3c58:	4f18      	ldr	r7, [pc, #96]	; (3cbc <dma_spi_transaction+0x84>)
    3c5a:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    3c5c:	7923      	ldrb	r3, [r4, #4]
    3c5e:	78a2      	ldrb	r2, [r4, #2]
    3c60:	7860      	ldrb	r0, [r4, #1]
    3c62:	2102      	movs	r1, #2
    3c64:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    3c66:	782b      	ldrb	r3, [r5, #0]
    3c68:	786a      	ldrb	r2, [r5, #1]
    3c6a:	0212      	lsls	r2, r2, #8
    3c6c:	431a      	orrs	r2, r3
    3c6e:	78ab      	ldrb	r3, [r5, #2]
    3c70:	041b      	lsls	r3, r3, #16
    3c72:	4313      	orrs	r3, r2
    3c74:	78e9      	ldrb	r1, [r5, #3]
    3c76:	0609      	lsls	r1, r1, #24
    3c78:	4319      	orrs	r1, r3
    3c7a:	7928      	ldrb	r0, [r5, #4]
    3c7c:	4b10      	ldr	r3, [pc, #64]	; (3cc0 <dma_spi_transaction+0x88>)
    3c7e:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    3c80:	7820      	ldrb	r0, [r4, #0]
    3c82:	4f10      	ldr	r7, [pc, #64]	; (3cc4 <dma_spi_transaction+0x8c>)
    3c84:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    3c86:	7860      	ldrb	r0, [r4, #1]
    3c88:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    3c8a:	7860      	ldrb	r0, [r4, #1]
    3c8c:	4b0e      	ldr	r3, [pc, #56]	; (3cc8 <dma_spi_transaction+0x90>)
    3c8e:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    3c90:	7820      	ldrb	r0, [r4, #0]
    3c92:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    3c94:	7860      	ldrb	r0, [r4, #1]
    3c96:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    3c98:	782b      	ldrb	r3, [r5, #0]
    3c9a:	786a      	ldrb	r2, [r5, #1]
    3c9c:	0212      	lsls	r2, r2, #8
    3c9e:	431a      	orrs	r2, r3
    3ca0:	78ab      	ldrb	r3, [r5, #2]
    3ca2:	041b      	lsls	r3, r3, #16
    3ca4:	4313      	orrs	r3, r2
    3ca6:	78e9      	ldrb	r1, [r5, #3]
    3ca8:	0609      	lsls	r1, r1, #24
    3caa:	4319      	orrs	r1, r3
    3cac:	7928      	ldrb	r0, [r5, #4]
    3cae:	4b07      	ldr	r3, [pc, #28]	; (3ccc <dma_spi_transaction+0x94>)
    3cb0:	4798      	blx	r3
    3cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cb4:	0000144d 	.word	0x0000144d
    3cb8:	000020cd 	.word	0x000020cd
    3cbc:	000013d9 	.word	0x000013d9
    3cc0:	00001bdd 	.word	0x00001bdd
    3cc4:	00001425 	.word	0x00001425
    3cc8:	00003ce9 	.word	0x00003ce9
    3ccc:	00001bcd 	.word	0x00001bcd

00003cd0 <rtos_dma_wait_until_end_callback>:
#include "rtos_dma.h"
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    3cd0:	4b03      	ldr	r3, [pc, #12]	; (3ce0 <rtos_dma_wait_until_end_callback+0x10>)
    3cd2:	681b      	ldr	r3, [r3, #0]
    3cd4:	6a1b      	ldr	r3, [r3, #32]
    3cd6:	7819      	ldrb	r1, [r3, #0]
    3cd8:	4a02      	ldr	r2, [pc, #8]	; (3ce4 <rtos_dma_wait_until_end_callback+0x14>)
    3cda:	233f      	movs	r3, #63	; 0x3f
    3cdc:	54d1      	strb	r1, [r2, r3]
}
    3cde:	4770      	bx	lr
    3ce0:	2000060c 	.word	0x2000060c
    3ce4:	41004800 	.word	0x41004800

00003ce8 <rtos_dma_wait_until_end>:

void rtos_dma_wait_until_end(int channel) {
    3ce8:	b570      	push	{r4, r5, r6, lr}
    3cea:	b084      	sub	sp, #16
    3cec:	9003      	str	r0, [sp, #12]
	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    3cee:	4c08      	ldr	r4, [pc, #32]	; (3d10 <rtos_dma_wait_until_end+0x28>)
    3cf0:	6823      	ldr	r3, [r4, #0]
    3cf2:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    3cf4:	aa03      	add	r2, sp, #12
    3cf6:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    3cf8:	4b06      	ldr	r3, [pc, #24]	; (3d14 <rtos_dma_wait_until_end+0x2c>)
    3cfa:	9300      	str	r3, [sp, #0]
    3cfc:	2300      	movs	r3, #0
    3cfe:	2202      	movs	r2, #2
    3d00:	2102      	movs	r1, #2
    3d02:	4805      	ldr	r0, [pc, #20]	; (3d18 <rtos_dma_wait_until_end+0x30>)
    3d04:	4e05      	ldr	r6, [pc, #20]	; (3d1c <rtos_dma_wait_until_end+0x34>)
    3d06:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_callback);
	current_process->data = data;
    3d08:	6823      	ldr	r3, [r4, #0]
    3d0a:	621d      	str	r5, [r3, #32]
    3d0c:	b004      	add	sp, #16
    3d0e:	bd70      	pop	{r4, r5, r6, pc}
    3d10:	2000060c 	.word	0x2000060c
    3d14:	00003cd1 	.word	0x00003cd1
    3d18:	4100484e 	.word	0x4100484e
    3d1c:	0000329d 	.word	0x0000329d

00003d20 <rtos_uart_start_send_buffer>:
#include "rtos_uart.h"
#include "Drivers/sercom.h"
#include "rtos_dma.h"

bool rtos_uart_start_send_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d22:	b087      	sub	sp, #28
    3d24:	0005      	movs	r5, r0
    3d26:	000c      	movs	r4, r1
    3d28:	0016      	movs	r6, r2
    3d2a:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3d2c:	4b12      	ldr	r3, [pc, #72]	; (3d78 <rtos_uart_start_send_buffer+0x58>)
    3d2e:	4798      	blx	r3
    3d30:	1e07      	subs	r7, r0, #0
    3d32:	d102      	bne.n	3d3a <rtos_uart_start_send_buffer+0x1a>
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->txchannel);

    return true;
}
    3d34:	0038      	movs	r0, r7
    3d36:	b007      	add	sp, #28
    3d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3d3a:	7820      	ldrb	r0, [r4, #0]
    buffer, &(sercom->USART_INT.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
    3d3c:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    3d3e:	0100      	lsls	r0, r0, #4
    3d40:	4b0e      	ldr	r3, [pc, #56]	; (3d7c <rtos_uart_start_send_buffer+0x5c>)
    3d42:	18c0      	adds	r0, r0, r3
    3d44:	2300      	movs	r3, #0
    3d46:	9303      	str	r3, [sp, #12]
    3d48:	9502      	str	r5, [sp, #8]
    3d4a:	9601      	str	r6, [sp, #4]
    3d4c:	466b      	mov	r3, sp
    3d4e:	8a9e      	ldrh	r6, [r3, #20]
    3d50:	9600      	str	r6, [sp, #0]
    3d52:	2300      	movs	r3, #0
    3d54:	2200      	movs	r2, #0
    3d56:	2101      	movs	r1, #1
    3d58:	4d09      	ldr	r5, [pc, #36]	; (3d80 <rtos_uart_start_send_buffer+0x60>)
    3d5a:	47a8      	blx	r5
	dma_disable_channel(dmadesc->txchannel);
    3d5c:	7820      	ldrb	r0, [r4, #0]
    3d5e:	4b09      	ldr	r3, [pc, #36]	; (3d84 <rtos_uart_start_send_buffer+0x64>)
    3d60:	4798      	blx	r3
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    3d62:	7923      	ldrb	r3, [r4, #4]
    3d64:	78e2      	ldrb	r2, [r4, #3]
    3d66:	7820      	ldrb	r0, [r4, #0]
    3d68:	2102      	movs	r1, #2
    3d6a:	4d07      	ldr	r5, [pc, #28]	; (3d88 <rtos_uart_start_send_buffer+0x68>)
    3d6c:	47a8      	blx	r5
	dma_enable_channel(dmadesc->txchannel);
    3d6e:	7820      	ldrb	r0, [r4, #0]
    3d70:	4b06      	ldr	r3, [pc, #24]	; (3d8c <rtos_uart_start_send_buffer+0x6c>)
    3d72:	4798      	blx	r3
    return true;
    3d74:	e7de      	b.n	3d34 <rtos_uart_start_send_buffer+0x14>
    3d76:	46c0      	nop			; (mov r8, r8)
    3d78:	00001ec9 	.word	0x00001ec9
    3d7c:	200003e0 	.word	0x200003e0
    3d80:	0000136d 	.word	0x0000136d
    3d84:	0000144d 	.word	0x0000144d
    3d88:	000013d9 	.word	0x000013d9
    3d8c:	00001425 	.word	0x00001425

00003d90 <rtos_uart_wait_until_send_complete>:

void rtos_uart_wait_until_send_complete(DMA_Descriptor* dmadesc) {
    3d90:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->txchannel);
    3d92:	7800      	ldrb	r0, [r0, #0]
    3d94:	4b01      	ldr	r3, [pc, #4]	; (3d9c <rtos_uart_wait_until_send_complete+0xc>)
    3d96:	4798      	blx	r3
}
    3d98:	bd10      	pop	{r4, pc}
    3d9a:	46c0      	nop			; (mov r8, r8)
    3d9c:	00003ce9 	.word	0x00003ce9

00003da0 <rtos_uart_start_read_buffer>:


bool rtos_uart_start_read_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    3da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3da2:	b087      	sub	sp, #28
    3da4:	0005      	movs	r5, r0
    3da6:	000c      	movs	r4, r1
    3da8:	0016      	movs	r6, r2
    3daa:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    3dac:	4b12      	ldr	r3, [pc, #72]	; (3df8 <rtos_uart_start_read_buffer+0x58>)
    3dae:	4798      	blx	r3
    3db0:	1e07      	subs	r7, r0, #0
    3db2:	d102      	bne.n	3dba <rtos_uart_start_read_buffer+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
}
    3db4:	0038      	movs	r0, r7
    3db6:	b007      	add	sp, #28
    3db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3dba:	7860      	ldrb	r0, [r4, #1]
    &(sercom->USART_INT.SERCOM_DATA), buffer, DMA_NEXTDESCRIPTOR_NONE);
    3dbc:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    3dbe:	0100      	lsls	r0, r0, #4
    3dc0:	4b0e      	ldr	r3, [pc, #56]	; (3dfc <rtos_uart_start_read_buffer+0x5c>)
    3dc2:	18c0      	adds	r0, r0, r3
    3dc4:	2300      	movs	r3, #0
    3dc6:	9303      	str	r3, [sp, #12]
    3dc8:	9602      	str	r6, [sp, #8]
    3dca:	9501      	str	r5, [sp, #4]
    3dcc:	466b      	mov	r3, sp
    3dce:	8a9e      	ldrh	r6, [r3, #20]
    3dd0:	9600      	str	r6, [sp, #0]
    3dd2:	2300      	movs	r3, #0
    3dd4:	2201      	movs	r2, #1
    3dd6:	2100      	movs	r1, #0
    3dd8:	4d09      	ldr	r5, [pc, #36]	; (3e00 <rtos_uart_start_read_buffer+0x60>)
    3dda:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    3ddc:	7860      	ldrb	r0, [r4, #1]
    3dde:	4b09      	ldr	r3, [pc, #36]	; (3e04 <rtos_uart_start_read_buffer+0x64>)
    3de0:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    3de2:	7923      	ldrb	r3, [r4, #4]
    3de4:	78a2      	ldrb	r2, [r4, #2]
    3de6:	7860      	ldrb	r0, [r4, #1]
    3de8:	2102      	movs	r1, #2
    3dea:	4d07      	ldr	r5, [pc, #28]	; (3e08 <rtos_uart_start_read_buffer+0x68>)
    3dec:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    3dee:	7860      	ldrb	r0, [r4, #1]
    3df0:	4b06      	ldr	r3, [pc, #24]	; (3e0c <rtos_uart_start_read_buffer+0x6c>)
    3df2:	4798      	blx	r3
    return true;
    3df4:	e7de      	b.n	3db4 <rtos_uart_start_read_buffer+0x14>
    3df6:	46c0      	nop			; (mov r8, r8)
    3df8:	00001ec9 	.word	0x00001ec9
    3dfc:	200003e0 	.word	0x200003e0
    3e00:	0000136d 	.word	0x0000136d
    3e04:	0000144d 	.word	0x0000144d
    3e08:	000013d9 	.word	0x000013d9
    3e0c:	00001425 	.word	0x00001425

00003e10 <rtos_uart_wait_until_read_complete>:

void rtos_uart_wait_until_read_complete(DMA_Descriptor* dmadesc) {
    3e10:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->rxchannel);
    3e12:	7840      	ldrb	r0, [r0, #1]
    3e14:	4b01      	ldr	r3, [pc, #4]	; (3e1c <rtos_uart_wait_until_read_complete+0xc>)
    3e16:	4798      	blx	r3
    3e18:	bd10      	pop	{r4, pc}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	00003ce9 	.word	0x00003ce9

00003e20 <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    3e20:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    3e22:	4b25      	ldr	r3, [pc, #148]	; (3eb8 <usb_proc_loop+0x98>)
    3e24:	2200      	movs	r2, #0
    3e26:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    3e28:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    3e2a:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    3e2c:	70da      	strb	r2, [r3, #3]
    3e2e:	e00f      	b.n	3e50 <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    3e30:	4c21      	ldr	r4, [pc, #132]	; (3eb8 <usb_proc_loop+0x98>)
    3e32:	68e0      	ldr	r0, [r4, #12]
    3e34:	18c0      	adds	r0, r0, r3
    3e36:	4b21      	ldr	r3, [pc, #132]	; (3ebc <usb_proc_loop+0x9c>)
    3e38:	4798      	blx	r3
    3e3a:	68a3      	ldr	r3, [r4, #8]
    3e3c:	181b      	adds	r3, r3, r0
    3e3e:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    3e40:	4b1d      	ldr	r3, [pc, #116]	; (3eb8 <usb_proc_loop+0x98>)
    3e42:	78db      	ldrb	r3, [r3, #3]
    3e44:	2b00      	cmp	r3, #0
    3e46:	d003      	beq.n	3e50 <usb_proc_loop+0x30>
    3e48:	4b1d      	ldr	r3, [pc, #116]	; (3ec0 <usb_proc_loop+0xa0>)
    3e4a:	681b      	ldr	r3, [r3, #0]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d11f      	bne.n	3e90 <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    3e50:	4c19      	ldr	r4, [pc, #100]	; (3eb8 <usb_proc_loop+0x98>)
    3e52:	2301      	movs	r3, #1
    3e54:	22ff      	movs	r2, #255	; 0xff
    3e56:	2100      	movs	r1, #0
    3e58:	0020      	movs	r0, r4
    3e5a:	4d1a      	ldr	r5, [pc, #104]	; (3ec4 <usb_proc_loop+0xa4>)
    3e5c:	47a8      	blx	r5
		usb_interrupt = false;
    3e5e:	2300      	movs	r3, #0
    3e60:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    3e62:	7863      	ldrb	r3, [r4, #1]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d125      	bne.n	3eb4 <usb_proc_loop+0x94>
		usb_handle_function();
    3e68:	4b17      	ldr	r3, [pc, #92]	; (3ec8 <usb_proc_loop+0xa8>)
    3e6a:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    3e6c:	4b12      	ldr	r3, [pc, #72]	; (3eb8 <usb_proc_loop+0x98>)
    3e6e:	789b      	ldrb	r3, [r3, #2]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d0e5      	beq.n	3e40 <usb_proc_loop+0x20>
    3e74:	4b15      	ldr	r3, [pc, #84]	; (3ecc <usb_proc_loop+0xac>)
    3e76:	781b      	ldrb	r3, [r3, #0]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d1e1      	bne.n	3e40 <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    3e7c:	4b0e      	ldr	r3, [pc, #56]	; (3eb8 <usb_proc_loop+0x98>)
    3e7e:	685a      	ldr	r2, [r3, #4]
    3e80:	689b      	ldr	r3, [r3, #8]
    3e82:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    3e84:	429a      	cmp	r2, r3
    3e86:	d1d3      	bne.n	3e30 <usb_proc_loop+0x10>
    3e88:	4b0b      	ldr	r3, [pc, #44]	; (3eb8 <usb_proc_loop+0x98>)
    3e8a:	2200      	movs	r2, #0
    3e8c:	709a      	strb	r2, [r3, #2]
    3e8e:	e7d7      	b.n	3e40 <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    3e90:	4b0b      	ldr	r3, [pc, #44]	; (3ec0 <usb_proc_loop+0xa0>)
    3e92:	6819      	ldr	r1, [r3, #0]
    3e94:	4c08      	ldr	r4, [pc, #32]	; (3eb8 <usb_proc_loop+0x98>)
    3e96:	6920      	ldr	r0, [r4, #16]
    3e98:	6963      	ldr	r3, [r4, #20]
    3e9a:	18c0      	adds	r0, r0, r3
    3e9c:	4b0c      	ldr	r3, [pc, #48]	; (3ed0 <usb_proc_loop+0xb0>)
    3e9e:	4798      	blx	r3
    3ea0:	6963      	ldr	r3, [r4, #20]
    3ea2:	18c0      	adds	r0, r0, r3
    3ea4:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    3ea6:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    3ea8:	4298      	cmp	r0, r3
    3eaa:	d1d1      	bne.n	3e50 <usb_proc_loop+0x30>
    3eac:	4b02      	ldr	r3, [pc, #8]	; (3eb8 <usb_proc_loop+0x98>)
    3eae:	2200      	movs	r2, #0
    3eb0:	70da      	strb	r2, [r3, #3]
    3eb2:	e7cd      	b.n	3e50 <usb_proc_loop+0x30>
		}
	}
}
    3eb4:	bd70      	pop	{r4, r5, r6, pc}
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	20000680 	.word	0x20000680
    3ebc:	00002b49 	.word	0x00002b49
    3ec0:	20000538 	.word	0x20000538
    3ec4:	00003241 	.word	0x00003241
    3ec8:	000029b5 	.word	0x000029b5
    3ecc:	20000534 	.word	0x20000534
    3ed0:	00002b85 	.word	0x00002b85

00003ed4 <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    3ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ed6:	46ce      	mov	lr, r9
    3ed8:	4647      	mov	r7, r8
    3eda:	b580      	push	{r7, lr}
    3edc:	0006      	movs	r6, r0
    3ede:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ee0:	4f15      	ldr	r7, [pc, #84]	; (3f38 <rtos_usb_init+0x64>)
    3ee2:	2580      	movs	r5, #128	; 0x80
    3ee4:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    3ee6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3eea:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    3eee:	22c0      	movs	r2, #192	; 0xc0
    3ef0:	0492      	lsls	r2, r2, #18
    3ef2:	2106      	movs	r1, #6
    3ef4:	2000      	movs	r0, #0
    3ef6:	4b11      	ldr	r3, [pc, #68]	; (3f3c <rtos_usb_init+0x68>)
    3ef8:	4798      	blx	r3
	usb_init();
    3efa:	4b11      	ldr	r3, [pc, #68]	; (3f40 <rtos_usb_init+0x6c>)
    3efc:	4798      	blx	r3
	usb_attach();
    3efe:	4b11      	ldr	r3, [pc, #68]	; (3f44 <rtos_usb_init+0x70>)
    3f00:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    3f02:	4911      	ldr	r1, [pc, #68]	; (3f48 <rtos_usb_init+0x74>)
    3f04:	4c11      	ldr	r4, [pc, #68]	; (3f4c <rtos_usb_init+0x78>)
    3f06:	231c      	movs	r3, #28
    3f08:	4699      	mov	r9, r3
    3f0a:	44a1      	add	r9, r4
    3f0c:	4643      	mov	r3, r8
    3f0e:	0032      	movs	r2, r6
    3f10:	4648      	mov	r0, r9
    3f12:	4e0f      	ldr	r6, [pc, #60]	; (3f50 <rtos_usb_init+0x7c>)
    3f14:	47b0      	blx	r6
	dispatch_process(&usbproc);
    3f16:	4648      	mov	r0, r9
    3f18:	4b0e      	ldr	r3, [pc, #56]	; (3f54 <rtos_usb_init+0x80>)
    3f1a:	4798      	blx	r3
	wait_until_started(&usbproc);
    3f1c:	2201      	movs	r2, #1
    3f1e:	0020      	movs	r0, r4
    3f20:	3034      	adds	r0, #52	; 0x34
    3f22:	2301      	movs	r3, #1
    3f24:	4252      	negs	r2, r2
    3f26:	2100      	movs	r1, #0
    3f28:	4c0b      	ldr	r4, [pc, #44]	; (3f58 <rtos_usb_init+0x84>)
    3f2a:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f2c:	603d      	str	r5, [r7, #0]
}
    3f2e:	bcc0      	pop	{r6, r7}
    3f30:	46b9      	mov	r9, r7
    3f32:	46b0      	mov	r8, r6
    3f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	e000e100 	.word	0xe000e100
    3f3c:	00001bed 	.word	0x00001bed
    3f40:	000025f9 	.word	0x000025f9
    3f44:	00002959 	.word	0x00002959
    3f48:	00003e21 	.word	0x00003e21
    3f4c:	20000680 	.word	0x20000680
    3f50:	00002ed5 	.word	0x00002ed5
    3f54:	00002fbd 	.word	0x00002fbd
    3f58:	00003241 	.word	0x00003241

00003f5c <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f5c:	2380      	movs	r3, #128	; 0x80
    3f5e:	4a05      	ldr	r2, [pc, #20]	; (3f74 <USB_Handler+0x18>)
    3f60:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f66:	f3bf 8f6f 	isb	sy

void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);
	
	usb_interrupt = true;
    3f6a:	4b03      	ldr	r3, [pc, #12]	; (3f78 <USB_Handler+0x1c>)
    3f6c:	2201      	movs	r2, #1
    3f6e:	701a      	strb	r2, [r3, #0]
}
    3f70:	4770      	bx	lr
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	e000e100 	.word	0xe000e100
    3f78:	20000680 	.word	0x20000680

00003f7c <rtos_usb_start_send_buffer>:
	usb_quit = true;
	join_process(&usbproc);
}


void rtos_usb_start_send_buffer(uint8_t* buffer, int count) {
    3f7c:	b570      	push	{r4, r5, r6, lr}
    3f7e:	0005      	movs	r5, r0
    3f80:	000e      	movs	r6, r1
	// if send operation is currently in progress wait until it finishes
	if (usb_send_status) wait_until_false(&usb_send_status);
    3f82:	4b0d      	ldr	r3, [pc, #52]	; (3fb8 <rtos_usb_start_send_buffer+0x3c>)
    3f84:	789b      	ldrb	r3, [r3, #2]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d10e      	bne.n	3fa8 <rtos_usb_start_send_buffer+0x2c>
	usb_send_buffer = buffer;
    3f8a:	4c0b      	ldr	r4, [pc, #44]	; (3fb8 <rtos_usb_start_send_buffer+0x3c>)
    3f8c:	60e5      	str	r5, [r4, #12]
	usb_send_buffer_count = count;
    3f8e:	6066      	str	r6, [r4, #4]
	usb_send_bytes_sent = 0;
    3f90:	2300      	movs	r3, #0
    3f92:	60a3      	str	r3, [r4, #8]
	usb_send_status = true;
    3f94:	3301      	adds	r3, #1
    3f96:	70a3      	strb	r3, [r4, #2]
	// start send
	usb_send_bytes_sent += usb_serial_send_buffer(buffer, count);
    3f98:	0031      	movs	r1, r6
    3f9a:	0028      	movs	r0, r5
    3f9c:	4b07      	ldr	r3, [pc, #28]	; (3fbc <rtos_usb_start_send_buffer+0x40>)
    3f9e:	4798      	blx	r3
    3fa0:	68a3      	ldr	r3, [r4, #8]
    3fa2:	181b      	adds	r3, r3, r0
    3fa4:	60a3      	str	r3, [r4, #8]
}
    3fa6:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_send_status) wait_until_false(&usb_send_status);
    3fa8:	4805      	ldr	r0, [pc, #20]	; (3fc0 <rtos_usb_start_send_buffer+0x44>)
    3faa:	2300      	movs	r3, #0
    3fac:	22ff      	movs	r2, #255	; 0xff
    3fae:	2100      	movs	r1, #0
    3fb0:	4c04      	ldr	r4, [pc, #16]	; (3fc4 <rtos_usb_start_send_buffer+0x48>)
    3fb2:	47a0      	blx	r4
    3fb4:	e7e9      	b.n	3f8a <rtos_usb_start_send_buffer+0xe>
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	20000680 	.word	0x20000680
    3fbc:	00002b49 	.word	0x00002b49
    3fc0:	20000682 	.word	0x20000682
    3fc4:	00003241 	.word	0x00003241

00003fc8 <rtos_usb_wait_until_send_complete>:

int rtos_usb_wait_until_send_complete() {
    3fc8:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_send_status);
    3fca:	4c04      	ldr	r4, [pc, #16]	; (3fdc <rtos_usb_wait_until_send_complete+0x14>)
    3fcc:	1ca0      	adds	r0, r4, #2
    3fce:	2300      	movs	r3, #0
    3fd0:	22ff      	movs	r2, #255	; 0xff
    3fd2:	2100      	movs	r1, #0
    3fd4:	4d02      	ldr	r5, [pc, #8]	; (3fe0 <rtos_usb_wait_until_send_complete+0x18>)
    3fd6:	47a8      	blx	r5
	return usb_send_bytes_sent;
    3fd8:	68a0      	ldr	r0, [r4, #8]
}
    3fda:	bd70      	pop	{r4, r5, r6, pc}
    3fdc:	20000680 	.word	0x20000680
    3fe0:	00003241 	.word	0x00003241

00003fe4 <rtos_usb_start_read_buffer>:


void rtos_usb_start_read_buffer(uint8_t* buffer, int count) {
    3fe4:	b570      	push	{r4, r5, r6, lr}
    3fe6:	0005      	movs	r5, r0
    3fe8:	000c      	movs	r4, r1
	// if read operation is currently in progress wait until it finishes
	if (usb_read_status) wait_until_false(&usb_read_status);
    3fea:	4b09      	ldr	r3, [pc, #36]	; (4010 <rtos_usb_start_read_buffer+0x2c>)
    3fec:	78db      	ldrb	r3, [r3, #3]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d107      	bne.n	4002 <rtos_usb_start_read_buffer+0x1e>
	usb_read_buffer = buffer;
    3ff2:	4b07      	ldr	r3, [pc, #28]	; (4010 <rtos_usb_start_read_buffer+0x2c>)
    3ff4:	611d      	str	r5, [r3, #16]
	usb_read_buffer_count = count;
    3ff6:	619c      	str	r4, [r3, #24]
	usb_read_bytes_read = 0;
    3ff8:	2200      	movs	r2, #0
    3ffa:	615a      	str	r2, [r3, #20]
	usb_read_status = true;
    3ffc:	3201      	adds	r2, #1
    3ffe:	70da      	strb	r2, [r3, #3]
}
    4000:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_read_status) wait_until_false(&usb_read_status);
    4002:	4804      	ldr	r0, [pc, #16]	; (4014 <rtos_usb_start_read_buffer+0x30>)
    4004:	2300      	movs	r3, #0
    4006:	22ff      	movs	r2, #255	; 0xff
    4008:	2100      	movs	r1, #0
    400a:	4e03      	ldr	r6, [pc, #12]	; (4018 <rtos_usb_start_read_buffer+0x34>)
    400c:	47b0      	blx	r6
    400e:	e7f0      	b.n	3ff2 <rtos_usb_start_read_buffer+0xe>
    4010:	20000680 	.word	0x20000680
    4014:	20000683 	.word	0x20000683
    4018:	00003241 	.word	0x00003241

0000401c <rtos_usb_wait_until_read_complete>:

int rtos_usb_wait_until_read_complete() {
    401c:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_read_status);
    401e:	4c04      	ldr	r4, [pc, #16]	; (4030 <rtos_usb_wait_until_read_complete+0x14>)
    4020:	1ce0      	adds	r0, r4, #3
    4022:	2300      	movs	r3, #0
    4024:	22ff      	movs	r2, #255	; 0xff
    4026:	2100      	movs	r1, #0
    4028:	4d02      	ldr	r5, [pc, #8]	; (4034 <rtos_usb_wait_until_read_complete+0x18>)
    402a:	47a8      	blx	r5
	return usb_read_bytes_read;
    402c:	6960      	ldr	r0, [r4, #20]
    402e:	bd70      	pop	{r4, r5, r6, pc}
    4030:	20000680 	.word	0x20000680
    4034:	00003241 	.word	0x00003241

00004038 <CRC8>:
#include "gnclink.h"

const uint8_t CRC8_LUT_L[] = { 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D };
const uint8_t CRC8_LUT_H[] = { 0x00, 0x70, 0xE0, 0x90, 0xC7, 0xB7, 0x27, 0x57, 0x89, 0xF9, 0x69, 0x19, 0x4E, 0x3E, 0xAE, 0xDE };

uint8_t CRC8(uint8_t* data, int length) {
    4038:	b570      	push	{r4, r5, r6, lr}
    403a:	0006      	movs	r6, r0
	uint8_t crc = 0;
	for (int index = 0; index < length; ++index) {
    403c:	2400      	movs	r4, #0
	uint8_t crc = 0;
    403e:	2000      	movs	r0, #0
	for (int index = 0; index < length; ++index) {
    4040:	e00a      	b.n	4058 <CRC8+0x20>
		crc ^= data[index];
    4042:	5d33      	ldrb	r3, [r6, r4]
    4044:	4043      	eors	r3, r0
		crc = CRC8_LUT_L[crc & 0xF] ^ CRC8_LUT_H[crc >> 4];
    4046:	250f      	movs	r5, #15
    4048:	401d      	ands	r5, r3
    404a:	4a05      	ldr	r2, [pc, #20]	; (4060 <CRC8+0x28>)
    404c:	5d50      	ldrb	r0, [r2, r5]
    404e:	091b      	lsrs	r3, r3, #4
    4050:	18d2      	adds	r2, r2, r3
    4052:	7c13      	ldrb	r3, [r2, #16]
    4054:	4058      	eors	r0, r3
	for (int index = 0; index < length; ++index) {
    4056:	3401      	adds	r4, #1
    4058:	428c      	cmp	r4, r1
    405a:	dbf2      	blt.n	4042 <CRC8+0xa>
	}
	return crc;
}
    405c:	bd70      	pop	{r4, r5, r6, pc}
    405e:	46c0      	nop			; (mov r8, r8)
    4060:	00005740 	.word	0x00005740

00004064 <GNClink_Get_Packet_Payload_Pointer>:

uint8_t* GNClink_Get_Packet_Payload_Pointer(uint8_t* packetPointer) {
	return packetPointer + GNCLINK_PACKET_HEADER_LENGTH;
    4064:	3004      	adds	r0, #4
}
    4066:	4770      	bx	lr

00004068 <GNClink_Construct_Packet>:

bool GNClink_Construct_Packet(uint8_t* packetPointer, GNClink_PacketType packetType, GNClink_PacketFlags packetFlags, int payloadSize) {
    4068:	b570      	push	{r4, r5, r6, lr}
    406a:	000c      	movs	r4, r1
	// validate inputs
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    406c:	2b3b      	cmp	r3, #59	; 0x3b
    406e:	d80c      	bhi.n	408a <GNClink_Construct_Packet+0x22>

	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;
	// get pointer to footer
	GNClink_PacketFooter* footer = (GNClink_PacketFooter*)(packetPointer + GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    4070:	1d19      	adds	r1, r3, #4
    4072:	1845      	adds	r5, r0, r1

	// populate header
	header->magic = GNCLINK_PACKET_MAGIC;
    4074:	26ac      	movs	r6, #172	; 0xac
    4076:	7006      	strb	r6, [r0, #0]
	header->packetType = packetType;
    4078:	7044      	strb	r4, [r0, #1]
	header->packetFlags = packetFlags;
    407a:	7082      	strb	r2, [r0, #2]
	header->packetLength = payloadSize + GNCLINK_PACKET_HEADER_LENGTH + GNCLINK_PACKET_FOOTER_LENGTH;
    407c:	3305      	adds	r3, #5
    407e:	70c3      	strb	r3, [r0, #3]

	// populate footer
	footer->crc = CRC8(packetPointer, GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    4080:	4b03      	ldr	r3, [pc, #12]	; (4090 <GNClink_Construct_Packet+0x28>)
    4082:	4798      	blx	r3
    4084:	7028      	strb	r0, [r5, #0]

	return true;
    4086:	2001      	movs	r0, #1
}
    4088:	bd70      	pop	{r4, r5, r6, pc}
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    408a:	2000      	movs	r0, #0
    408c:	e7fc      	b.n	4088 <GNClink_Construct_Packet+0x20>
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	00004039 	.word	0x00004039

00004094 <GNClink_Check_Packet>:

bool GNClink_Check_Packet(uint8_t* packetPointer) {
    4094:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	// check magic
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    4096:	7803      	ldrb	r3, [r0, #0]
    4098:	2bac      	cmp	r3, #172	; 0xac
    409a:	d10a      	bne.n	40b2 <GNClink_Check_Packet+0x1e>

	// check packet length
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    409c:	78c1      	ldrb	r1, [r0, #3]
    409e:	1f4b      	subs	r3, r1, #5
    40a0:	b2db      	uxtb	r3, r3
    40a2:	2b3b      	cmp	r3, #59	; 0x3b
    40a4:	d807      	bhi.n	40b6 <GNClink_Check_Packet+0x22>

	// check CRC
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    40a6:	4b06      	ldr	r3, [pc, #24]	; (40c0 <GNClink_Check_Packet+0x2c>)
    40a8:	4798      	blx	r3
    40aa:	2800      	cmp	r0, #0
    40ac:	d105      	bne.n	40ba <GNClink_Check_Packet+0x26>

	// all checks passed, return true
	return true;
    40ae:	3001      	adds	r0, #1
    40b0:	e000      	b.n	40b4 <GNClink_Check_Packet+0x20>
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    40b2:	2000      	movs	r0, #0
}
    40b4:	bd10      	pop	{r4, pc}
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    40b6:	2000      	movs	r0, #0
    40b8:	e7fc      	b.n	40b4 <GNClink_Check_Packet+0x20>
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    40ba:	2000      	movs	r0, #0
    40bc:	e7fa      	b.n	40b4 <GNClink_Check_Packet+0x20>
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	00004039 	.word	0x00004039

000040c4 <GNClink_Get_Packet_Type>:

GNClink_PacketType GNClink_Get_Packet_Type(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetType;
    40c4:	7840      	ldrb	r0, [r0, #1]
}
    40c6:	4770      	bx	lr

000040c8 <GNClink_Get_Packet_Flags>:

GNClink_PacketFlags GNClink_Get_Packet_Flags(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetFlags;
    40c8:	7880      	ldrb	r0, [r0, #2]
}
    40ca:	4770      	bx	lr

000040cc <GNClink_Get_Frame_Payload_Pointer>:


uint8_t* GNClink_Get_Frame_Payload_Pointer(uint8_t* framePointer) {
	return framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    40cc:	3003      	adds	r0, #3
}
    40ce:	4770      	bx	lr

000040d0 <GNClink_Get_Frame>:

bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    40d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40d2:	000e      	movs	r6, r1
	// get pointer to packet header
	GNClink_PacketHeader* packetHeader = (GNClink_PacketHeader*)packetPointer;

	// check packet length
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    40d4:	78c1      	ldrb	r1, [r0, #3]
    40d6:	1f4c      	subs	r4, r1, #5
    40d8:	b2e4      	uxtb	r4, r4
    40da:	2c3b      	cmp	r4, #59	; 0x3b
    40dc:	d832      	bhi.n	4144 <GNClink_Get_Frame+0x74>

	// calculate number of frames for packet
	int frameCount = (packetHeader->packetLength + GNCLINK_FRAME_PAYLOAD_LENGTH - 1) / GNCLINK_FRAME_PAYLOAD_LENGTH;
    40de:	310f      	adds	r1, #15
    40e0:	1109      	asrs	r1, r1, #4
	*moreFrames = frameIndex < frameCount - 1;
    40e2:	1e4d      	subs	r5, r1, #1
    40e4:	2401      	movs	r4, #1
    40e6:	429d      	cmp	r5, r3
    40e8:	dc00      	bgt.n	40ec <GNClink_Get_Frame+0x1c>
    40ea:	2400      	movs	r4, #0
    40ec:	9d06      	ldr	r5, [sp, #24]
    40ee:	702c      	strb	r4, [r5, #0]

	// check index is valid
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    40f0:	2b00      	cmp	r3, #0
    40f2:	db29      	blt.n	4148 <GNClink_Get_Frame+0x78>
    40f4:	4299      	cmp	r1, r3
    40f6:	dd29      	ble.n	414c <GNClink_Get_Frame+0x7c>
	// get pointer to frame header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    40f8:	1cf7      	adds	r7, r6, #3

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    40fa:	24ae      	movs	r4, #174	; 0xae
    40fc:	7034      	strb	r4, [r6, #0]
	header->index = frameIndex;
    40fe:	7073      	strb	r3, [r6, #1]
	header->flags = flags;
    4100:	70b2      	strb	r2, [r6, #2]
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    4102:	1c5c      	adds	r4, r3, #1
    4104:	428c      	cmp	r4, r1
    4106:	d00c      	beq.n	4122 <GNClink_Get_Frame+0x52>
bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    4108:	2200      	movs	r2, #0

	// populate payload
	int i = 0;
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    410a:	2a0f      	cmp	r2, #15
    410c:	dc11      	bgt.n	4132 <GNClink_Get_Frame+0x62>
    410e:	78c5      	ldrb	r5, [r0, #3]
    4110:	011c      	lsls	r4, r3, #4
    4112:	1b2d      	subs	r5, r5, r4
    4114:	4295      	cmp	r5, r2
    4116:	dd0c      	ble.n	4132 <GNClink_Get_Frame+0x62>
		payload[i] = packetPointer[i + GNCLINK_FRAME_PAYLOAD_LENGTH * frameIndex];
    4118:	18a4      	adds	r4, r4, r2
    411a:	5d01      	ldrb	r1, [r0, r4]
    411c:	54b9      	strb	r1, [r7, r2]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    411e:	3201      	adds	r2, #1
    4120:	e7f3      	b.n	410a <GNClink_Get_Frame+0x3a>
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    4122:	2102      	movs	r1, #2
    4124:	430a      	orrs	r2, r1
    4126:	70b2      	strb	r2, [r6, #2]
    4128:	e7ee      	b.n	4108 <GNClink_Get_Frame+0x38>
	}
	// populate the rest with zeros
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
		payload[i] = 0;
    412a:	18bb      	adds	r3, r7, r2
    412c:	2100      	movs	r1, #0
    412e:	7019      	strb	r1, [r3, #0]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4130:	3201      	adds	r2, #1
    4132:	2a0f      	cmp	r2, #15
    4134:	ddf9      	ble.n	412a <GNClink_Get_Frame+0x5a>
	}

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    4136:	2113      	movs	r1, #19
    4138:	0030      	movs	r0, r6
    413a:	4b05      	ldr	r3, [pc, #20]	; (4150 <GNClink_Get_Frame+0x80>)
    413c:	4798      	blx	r3
    413e:	74f0      	strb	r0, [r6, #19]

	return true;
    4140:	2001      	movs	r0, #1
    4142:	e000      	b.n	4146 <GNClink_Get_Frame+0x76>
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4144:	2000      	movs	r0, #0
}
    4146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    4148:	2000      	movs	r0, #0
    414a:	e7fc      	b.n	4146 <GNClink_Get_Frame+0x76>
    414c:	2000      	movs	r0, #0
    414e:	e7fa      	b.n	4146 <GNClink_Get_Frame+0x76>
    4150:	00004039 	.word	0x00004039

00004154 <GNClink_Check_Frame>:

bool GNClink_Check_Frame(uint8_t* framePointer) {
    4154:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	// check magic
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4156:	7803      	ldrb	r3, [r0, #0]
    4158:	2bae      	cmp	r3, #174	; 0xae
    415a:	d109      	bne.n	4170 <GNClink_Check_Frame+0x1c>

	// check index
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    415c:	7843      	ldrb	r3, [r0, #1]
    415e:	2b03      	cmp	r3, #3
    4160:	d808      	bhi.n	4174 <GNClink_Check_Frame+0x20>

	// check CRC
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4162:	2114      	movs	r1, #20
    4164:	4b05      	ldr	r3, [pc, #20]	; (417c <GNClink_Check_Frame+0x28>)
    4166:	4798      	blx	r3
    4168:	2800      	cmp	r0, #0
    416a:	d105      	bne.n	4178 <GNClink_Check_Frame+0x24>

	// all checks passed, return true
	return true;
    416c:	3001      	adds	r0, #1
    416e:	e000      	b.n	4172 <GNClink_Check_Frame+0x1e>
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4170:	2000      	movs	r0, #0
}
    4172:	bd10      	pop	{r4, pc}
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4174:	2000      	movs	r0, #0
    4176:	e7fc      	b.n	4172 <GNClink_Check_Frame+0x1e>
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4178:	2000      	movs	r0, #0
    417a:	e7fa      	b.n	4172 <GNClink_Check_Frame+0x1e>
    417c:	00004039 	.word	0x00004039

00004180 <GNClink_Frame_RequestResend>:

bool GNClink_Frame_RequestResend(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (header->flags & GNClink_FrameFlags_RequestResend) != 0;
    4180:	7883      	ldrb	r3, [r0, #2]
    4182:	089b      	lsrs	r3, r3, #2
    4184:	2001      	movs	r0, #1
    4186:	4018      	ands	r0, r3
}
    4188:	4770      	bx	lr

0000418a <GNClink_Get_Frame_Index>:

int GNClink_Get_Frame_Index(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (int)header->index;
    418a:	7840      	ldrb	r0, [r0, #1]
}
    418c:	4770      	bx	lr
	...

00004190 <GNClink_Construct_RequestResendFrame>:

void GNClink_Construct_RequestResendFrame(uint8_t* framePointer) {
    4190:	b510      	push	{r4, lr}
    4192:	0004      	movs	r4, r0
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    4194:	23ae      	movs	r3, #174	; 0xae
    4196:	7003      	strb	r3, [r0, #0]
	header->index = 0;
    4198:	2300      	movs	r3, #0
    419a:	7043      	strb	r3, [r0, #1]
	header->flags = GNClink_FrameFlags_RequestResend;
    419c:	3304      	adds	r3, #4
    419e:	7083      	strb	r3, [r0, #2]

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    41a0:	2113      	movs	r1, #19
    41a2:	4b02      	ldr	r3, [pc, #8]	; (41ac <GNClink_Construct_RequestResendFrame+0x1c>)
    41a4:	4798      	blx	r3
    41a6:	74e0      	strb	r0, [r4, #19]
}
    41a8:	bd10      	pop	{r4, pc}
    41aa:	46c0      	nop			; (mov r8, r8)
    41ac:	00004039 	.word	0x00004039

000041b0 <GNClink_Reconstruct_Packet_From_Frames>:


bool GNClink_Reconstruct_Packet_From_Frames(uint8_t* framePointer, uint8_t* packetPointer, bool* moreFrames) {
    41b0:	b530      	push	{r4, r5, lr}
	// get pointer to frame footer
	//GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    41b2:	2400      	movs	r4, #0
    41b4:	2c0f      	cmp	r4, #15
    41b6:	dc09      	bgt.n	41cc <GNClink_Reconstruct_Packet_From_Frames+0x1c>
    41b8:	7843      	ldrb	r3, [r0, #1]
    41ba:	011b      	lsls	r3, r3, #4
    41bc:	191b      	adds	r3, r3, r4
    41be:	2b3f      	cmp	r3, #63	; 0x3f
    41c0:	dc04      	bgt.n	41cc <GNClink_Reconstruct_Packet_From_Frames+0x1c>
		packetPointer[i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH] = payload[i];
    41c2:	1905      	adds	r5, r0, r4
    41c4:	78ed      	ldrb	r5, [r5, #3]
    41c6:	54cd      	strb	r5, [r1, r3]
	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    41c8:	3401      	adds	r4, #1
    41ca:	e7f3      	b.n	41b4 <GNClink_Reconstruct_Packet_From_Frames+0x4>
	}

	*moreFrames = (header->flags & GNClink_FrameFlags_TransactionEnd) == 0;
    41cc:	7883      	ldrb	r3, [r0, #2]
    41ce:	085b      	lsrs	r3, r3, #1
    41d0:	2101      	movs	r1, #1
    41d2:	404b      	eors	r3, r1
    41d4:	2101      	movs	r1, #1
    41d6:	400b      	ands	r3, r1
    41d8:	7013      	strb	r3, [r2, #0]

	return true;
    41da:	2001      	movs	r0, #1
    41dc:	bd30      	pop	{r4, r5, pc}
	...

000041e0 <fp_multiply>:
#include <fixedpoint_defs.h>

fp32_t fp_multiply(fp32_t a, fp32_t b) {
    41e0:	b510      	push	{r4, lr}
    41e2:	000a      	movs	r2, r1
    fp_long c = (fp_long)a * b;
    41e4:	17c1      	asrs	r1, r0, #31
    41e6:	17d3      	asrs	r3, r2, #31
    41e8:	4c02      	ldr	r4, [pc, #8]	; (41f4 <fp_multiply+0x14>)
    41ea:	47a0      	blx	r4
    return c >> 16;
    41ec:	0409      	lsls	r1, r1, #16
    41ee:	0c00      	lsrs	r0, r0, #16
    41f0:	4308      	orrs	r0, r1
    41f2:	bd10      	pop	{r4, pc}
    41f4:	0000426d 	.word	0x0000426d

000041f8 <__aeabi_cfrcmple>:
    41f8:	4684      	mov	ip, r0
    41fa:	0008      	movs	r0, r1
    41fc:	4661      	mov	r1, ip
    41fe:	e7ff      	b.n	4200 <__aeabi_cfcmpeq>

00004200 <__aeabi_cfcmpeq>:
    4200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4202:	f000 fb93 	bl	492c <__lesf2>
    4206:	2800      	cmp	r0, #0
    4208:	d401      	bmi.n	420e <__aeabi_cfcmpeq+0xe>
    420a:	2100      	movs	r1, #0
    420c:	42c8      	cmn	r0, r1
    420e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004210 <__aeabi_fcmpeq>:
    4210:	b510      	push	{r4, lr}
    4212:	f000 fb13 	bl	483c <__eqsf2>
    4216:	4240      	negs	r0, r0
    4218:	3001      	adds	r0, #1
    421a:	bd10      	pop	{r4, pc}

0000421c <__aeabi_fcmplt>:
    421c:	b510      	push	{r4, lr}
    421e:	f000 fb85 	bl	492c <__lesf2>
    4222:	2800      	cmp	r0, #0
    4224:	db01      	blt.n	422a <__aeabi_fcmplt+0xe>
    4226:	2000      	movs	r0, #0
    4228:	bd10      	pop	{r4, pc}
    422a:	2001      	movs	r0, #1
    422c:	bd10      	pop	{r4, pc}
    422e:	46c0      	nop			; (mov r8, r8)

00004230 <__aeabi_fcmple>:
    4230:	b510      	push	{r4, lr}
    4232:	f000 fb7b 	bl	492c <__lesf2>
    4236:	2800      	cmp	r0, #0
    4238:	dd01      	ble.n	423e <__aeabi_fcmple+0xe>
    423a:	2000      	movs	r0, #0
    423c:	bd10      	pop	{r4, pc}
    423e:	2001      	movs	r0, #1
    4240:	bd10      	pop	{r4, pc}
    4242:	46c0      	nop			; (mov r8, r8)

00004244 <__aeabi_fcmpgt>:
    4244:	b510      	push	{r4, lr}
    4246:	f000 fb21 	bl	488c <__gesf2>
    424a:	2800      	cmp	r0, #0
    424c:	dc01      	bgt.n	4252 <__aeabi_fcmpgt+0xe>
    424e:	2000      	movs	r0, #0
    4250:	bd10      	pop	{r4, pc}
    4252:	2001      	movs	r0, #1
    4254:	bd10      	pop	{r4, pc}
    4256:	46c0      	nop			; (mov r8, r8)

00004258 <__aeabi_fcmpge>:
    4258:	b510      	push	{r4, lr}
    425a:	f000 fb17 	bl	488c <__gesf2>
    425e:	2800      	cmp	r0, #0
    4260:	da01      	bge.n	4266 <__aeabi_fcmpge+0xe>
    4262:	2000      	movs	r0, #0
    4264:	bd10      	pop	{r4, pc}
    4266:	2001      	movs	r0, #1
    4268:	bd10      	pop	{r4, pc}
    426a:	46c0      	nop			; (mov r8, r8)

0000426c <__aeabi_lmul>:
    426c:	b5f0      	push	{r4, r5, r6, r7, lr}
    426e:	46ce      	mov	lr, r9
    4270:	4699      	mov	r9, r3
    4272:	0c03      	lsrs	r3, r0, #16
    4274:	469c      	mov	ip, r3
    4276:	0413      	lsls	r3, r2, #16
    4278:	4647      	mov	r7, r8
    427a:	0c1b      	lsrs	r3, r3, #16
    427c:	001d      	movs	r5, r3
    427e:	000e      	movs	r6, r1
    4280:	4661      	mov	r1, ip
    4282:	0404      	lsls	r4, r0, #16
    4284:	0c24      	lsrs	r4, r4, #16
    4286:	b580      	push	{r7, lr}
    4288:	0007      	movs	r7, r0
    428a:	0c10      	lsrs	r0, r2, #16
    428c:	434b      	muls	r3, r1
    428e:	4365      	muls	r5, r4
    4290:	4341      	muls	r1, r0
    4292:	4360      	muls	r0, r4
    4294:	0c2c      	lsrs	r4, r5, #16
    4296:	18c0      	adds	r0, r0, r3
    4298:	1824      	adds	r4, r4, r0
    429a:	468c      	mov	ip, r1
    429c:	42a3      	cmp	r3, r4
    429e:	d903      	bls.n	42a8 <__aeabi_lmul+0x3c>
    42a0:	2380      	movs	r3, #128	; 0x80
    42a2:	025b      	lsls	r3, r3, #9
    42a4:	4698      	mov	r8, r3
    42a6:	44c4      	add	ip, r8
    42a8:	4649      	mov	r1, r9
    42aa:	4379      	muls	r1, r7
    42ac:	4356      	muls	r6, r2
    42ae:	0c23      	lsrs	r3, r4, #16
    42b0:	042d      	lsls	r5, r5, #16
    42b2:	0c2d      	lsrs	r5, r5, #16
    42b4:	1989      	adds	r1, r1, r6
    42b6:	4463      	add	r3, ip
    42b8:	0424      	lsls	r4, r4, #16
    42ba:	1960      	adds	r0, r4, r5
    42bc:	18c9      	adds	r1, r1, r3
    42be:	bcc0      	pop	{r6, r7}
    42c0:	46b9      	mov	r9, r7
    42c2:	46b0      	mov	r8, r6
    42c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42c6:	46c0      	nop			; (mov r8, r8)

000042c8 <__aeabi_f2uiz>:
    42c8:	219e      	movs	r1, #158	; 0x9e
    42ca:	b510      	push	{r4, lr}
    42cc:	05c9      	lsls	r1, r1, #23
    42ce:	1c04      	adds	r4, r0, #0
    42d0:	f7ff ffc2 	bl	4258 <__aeabi_fcmpge>
    42d4:	2800      	cmp	r0, #0
    42d6:	d103      	bne.n	42e0 <__aeabi_f2uiz+0x18>
    42d8:	1c20      	adds	r0, r4, #0
    42da:	f000 fe45 	bl	4f68 <__aeabi_f2iz>
    42de:	bd10      	pop	{r4, pc}
    42e0:	219e      	movs	r1, #158	; 0x9e
    42e2:	1c20      	adds	r0, r4, #0
    42e4:	05c9      	lsls	r1, r1, #23
    42e6:	f000 fcad 	bl	4c44 <__aeabi_fsub>
    42ea:	f000 fe3d 	bl	4f68 <__aeabi_f2iz>
    42ee:	2380      	movs	r3, #128	; 0x80
    42f0:	061b      	lsls	r3, r3, #24
    42f2:	469c      	mov	ip, r3
    42f4:	4460      	add	r0, ip
    42f6:	e7f2      	b.n	42de <__aeabi_f2uiz+0x16>

000042f8 <__aeabi_fadd>:
    42f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42fa:	0243      	lsls	r3, r0, #9
    42fc:	0045      	lsls	r5, r0, #1
    42fe:	0fc4      	lsrs	r4, r0, #31
    4300:	0248      	lsls	r0, r1, #9
    4302:	0a42      	lsrs	r2, r0, #9
    4304:	4694      	mov	ip, r2
    4306:	004a      	lsls	r2, r1, #1
    4308:	0a5f      	lsrs	r7, r3, #9
    430a:	0e2d      	lsrs	r5, r5, #24
    430c:	099b      	lsrs	r3, r3, #6
    430e:	0e12      	lsrs	r2, r2, #24
    4310:	0fc9      	lsrs	r1, r1, #31
    4312:	0980      	lsrs	r0, r0, #6
    4314:	428c      	cmp	r4, r1
    4316:	d022      	beq.n	435e <__aeabi_fadd+0x66>
    4318:	1aae      	subs	r6, r5, r2
    431a:	2e00      	cmp	r6, #0
    431c:	dd0d      	ble.n	433a <__aeabi_fadd+0x42>
    431e:	2a00      	cmp	r2, #0
    4320:	d12d      	bne.n	437e <__aeabi_fadd+0x86>
    4322:	2800      	cmp	r0, #0
    4324:	d100      	bne.n	4328 <__aeabi_fadd+0x30>
    4326:	e083      	b.n	4430 <__aeabi_fadd+0x138>
    4328:	1e72      	subs	r2, r6, #1
    432a:	2e01      	cmp	r6, #1
    432c:	d100      	bne.n	4330 <__aeabi_fadd+0x38>
    432e:	e11b      	b.n	4568 <__aeabi_fadd+0x270>
    4330:	2eff      	cmp	r6, #255	; 0xff
    4332:	d100      	bne.n	4336 <__aeabi_fadd+0x3e>
    4334:	e0a2      	b.n	447c <__aeabi_fadd+0x184>
    4336:	0016      	movs	r6, r2
    4338:	e027      	b.n	438a <__aeabi_fadd+0x92>
    433a:	2e00      	cmp	r6, #0
    433c:	d048      	beq.n	43d0 <__aeabi_fadd+0xd8>
    433e:	1b56      	subs	r6, r2, r5
    4340:	2d00      	cmp	r5, #0
    4342:	d000      	beq.n	4346 <__aeabi_fadd+0x4e>
    4344:	e0c1      	b.n	44ca <__aeabi_fadd+0x1d2>
    4346:	2b00      	cmp	r3, #0
    4348:	d100      	bne.n	434c <__aeabi_fadd+0x54>
    434a:	e0f7      	b.n	453c <__aeabi_fadd+0x244>
    434c:	1e74      	subs	r4, r6, #1
    434e:	2e01      	cmp	r6, #1
    4350:	d100      	bne.n	4354 <__aeabi_fadd+0x5c>
    4352:	e12d      	b.n	45b0 <__aeabi_fadd+0x2b8>
    4354:	2eff      	cmp	r6, #255	; 0xff
    4356:	d100      	bne.n	435a <__aeabi_fadd+0x62>
    4358:	e08e      	b.n	4478 <__aeabi_fadd+0x180>
    435a:	0026      	movs	r6, r4
    435c:	e0ba      	b.n	44d4 <__aeabi_fadd+0x1dc>
    435e:	1aa9      	subs	r1, r5, r2
    4360:	2900      	cmp	r1, #0
    4362:	dc00      	bgt.n	4366 <__aeabi_fadd+0x6e>
    4364:	e08c      	b.n	4480 <__aeabi_fadd+0x188>
    4366:	2a00      	cmp	r2, #0
    4368:	d046      	beq.n	43f8 <__aeabi_fadd+0x100>
    436a:	2dff      	cmp	r5, #255	; 0xff
    436c:	d100      	bne.n	4370 <__aeabi_fadd+0x78>
    436e:	e085      	b.n	447c <__aeabi_fadd+0x184>
    4370:	2280      	movs	r2, #128	; 0x80
    4372:	04d2      	lsls	r2, r2, #19
    4374:	4310      	orrs	r0, r2
    4376:	291b      	cmp	r1, #27
    4378:	dd49      	ble.n	440e <__aeabi_fadd+0x116>
    437a:	3301      	adds	r3, #1
    437c:	e016      	b.n	43ac <__aeabi_fadd+0xb4>
    437e:	2dff      	cmp	r5, #255	; 0xff
    4380:	d100      	bne.n	4384 <__aeabi_fadd+0x8c>
    4382:	e07b      	b.n	447c <__aeabi_fadd+0x184>
    4384:	2280      	movs	r2, #128	; 0x80
    4386:	04d2      	lsls	r2, r2, #19
    4388:	4310      	orrs	r0, r2
    438a:	2201      	movs	r2, #1
    438c:	2e1b      	cmp	r6, #27
    438e:	dc07      	bgt.n	43a0 <__aeabi_fadd+0xa8>
    4390:	2120      	movs	r1, #32
    4392:	1b89      	subs	r1, r1, r6
    4394:	0002      	movs	r2, r0
    4396:	4088      	lsls	r0, r1
    4398:	40f2      	lsrs	r2, r6
    439a:	1e41      	subs	r1, r0, #1
    439c:	4188      	sbcs	r0, r1
    439e:	4302      	orrs	r2, r0
    43a0:	1a9b      	subs	r3, r3, r2
    43a2:	015a      	lsls	r2, r3, #5
    43a4:	d451      	bmi.n	444a <__aeabi_fadd+0x152>
    43a6:	2207      	movs	r2, #7
    43a8:	401a      	ands	r2, r3
    43aa:	d042      	beq.n	4432 <__aeabi_fadd+0x13a>
    43ac:	220f      	movs	r2, #15
    43ae:	401a      	ands	r2, r3
    43b0:	2a04      	cmp	r2, #4
    43b2:	d000      	beq.n	43b6 <__aeabi_fadd+0xbe>
    43b4:	3304      	adds	r3, #4
    43b6:	015a      	lsls	r2, r3, #5
    43b8:	d53b      	bpl.n	4432 <__aeabi_fadd+0x13a>
    43ba:	1c68      	adds	r0, r5, #1
    43bc:	2dfe      	cmp	r5, #254	; 0xfe
    43be:	d034      	beq.n	442a <__aeabi_fadd+0x132>
    43c0:	019b      	lsls	r3, r3, #6
    43c2:	0a5b      	lsrs	r3, r3, #9
    43c4:	b2c0      	uxtb	r0, r0
    43c6:	05c0      	lsls	r0, r0, #23
    43c8:	4318      	orrs	r0, r3
    43ca:	07e4      	lsls	r4, r4, #31
    43cc:	4320      	orrs	r0, r4
    43ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43d0:	26fe      	movs	r6, #254	; 0xfe
    43d2:	1c6a      	adds	r2, r5, #1
    43d4:	4216      	tst	r6, r2
    43d6:	d000      	beq.n	43da <__aeabi_fadd+0xe2>
    43d8:	e08b      	b.n	44f2 <__aeabi_fadd+0x1fa>
    43da:	2d00      	cmp	r5, #0
    43dc:	d000      	beq.n	43e0 <__aeabi_fadd+0xe8>
    43de:	e0b1      	b.n	4544 <__aeabi_fadd+0x24c>
    43e0:	2b00      	cmp	r3, #0
    43e2:	d100      	bne.n	43e6 <__aeabi_fadd+0xee>
    43e4:	e0df      	b.n	45a6 <__aeabi_fadd+0x2ae>
    43e6:	2800      	cmp	r0, #0
    43e8:	d069      	beq.n	44be <__aeabi_fadd+0x1c6>
    43ea:	1a1a      	subs	r2, r3, r0
    43ec:	0156      	lsls	r6, r2, #5
    43ee:	d400      	bmi.n	43f2 <__aeabi_fadd+0xfa>
    43f0:	e0fb      	b.n	45ea <__aeabi_fadd+0x2f2>
    43f2:	000c      	movs	r4, r1
    43f4:	1ac3      	subs	r3, r0, r3
    43f6:	e03c      	b.n	4472 <__aeabi_fadd+0x17a>
    43f8:	2800      	cmp	r0, #0
    43fa:	d100      	bne.n	43fe <__aeabi_fadd+0x106>
    43fc:	e0b7      	b.n	456e <__aeabi_fadd+0x276>
    43fe:	1e4a      	subs	r2, r1, #1
    4400:	2901      	cmp	r1, #1
    4402:	d100      	bne.n	4406 <__aeabi_fadd+0x10e>
    4404:	e0aa      	b.n	455c <__aeabi_fadd+0x264>
    4406:	29ff      	cmp	r1, #255	; 0xff
    4408:	d038      	beq.n	447c <__aeabi_fadd+0x184>
    440a:	0011      	movs	r1, r2
    440c:	e7b3      	b.n	4376 <__aeabi_fadd+0x7e>
    440e:	0002      	movs	r2, r0
    4410:	2620      	movs	r6, #32
    4412:	40ca      	lsrs	r2, r1
    4414:	1a71      	subs	r1, r6, r1
    4416:	4088      	lsls	r0, r1
    4418:	1e41      	subs	r1, r0, #1
    441a:	4188      	sbcs	r0, r1
    441c:	4310      	orrs	r0, r2
    441e:	181b      	adds	r3, r3, r0
    4420:	015a      	lsls	r2, r3, #5
    4422:	d5c0      	bpl.n	43a6 <__aeabi_fadd+0xae>
    4424:	3501      	adds	r5, #1
    4426:	2dff      	cmp	r5, #255	; 0xff
    4428:	d16c      	bne.n	4504 <__aeabi_fadd+0x20c>
    442a:	20ff      	movs	r0, #255	; 0xff
    442c:	2300      	movs	r3, #0
    442e:	e7ca      	b.n	43c6 <__aeabi_fadd+0xce>
    4430:	0035      	movs	r5, r6
    4432:	08db      	lsrs	r3, r3, #3
    4434:	2dff      	cmp	r5, #255	; 0xff
    4436:	d144      	bne.n	44c2 <__aeabi_fadd+0x1ca>
    4438:	2b00      	cmp	r3, #0
    443a:	d0f6      	beq.n	442a <__aeabi_fadd+0x132>
    443c:	2280      	movs	r2, #128	; 0x80
    443e:	03d2      	lsls	r2, r2, #15
    4440:	4313      	orrs	r3, r2
    4442:	025b      	lsls	r3, r3, #9
    4444:	20ff      	movs	r0, #255	; 0xff
    4446:	0a5b      	lsrs	r3, r3, #9
    4448:	e7bd      	b.n	43c6 <__aeabi_fadd+0xce>
    444a:	019e      	lsls	r6, r3, #6
    444c:	09b6      	lsrs	r6, r6, #6
    444e:	0030      	movs	r0, r6
    4450:	f000 fe38 	bl	50c4 <__clzsi2>
    4454:	3805      	subs	r0, #5
    4456:	4086      	lsls	r6, r0
    4458:	4285      	cmp	r5, r0
    445a:	dc20      	bgt.n	449e <__aeabi_fadd+0x1a6>
    445c:	2220      	movs	r2, #32
    445e:	1b40      	subs	r0, r0, r5
    4460:	3001      	adds	r0, #1
    4462:	1a12      	subs	r2, r2, r0
    4464:	0033      	movs	r3, r6
    4466:	4096      	lsls	r6, r2
    4468:	40c3      	lsrs	r3, r0
    446a:	1e72      	subs	r2, r6, #1
    446c:	4196      	sbcs	r6, r2
    446e:	2500      	movs	r5, #0
    4470:	4333      	orrs	r3, r6
    4472:	075a      	lsls	r2, r3, #29
    4474:	d19a      	bne.n	43ac <__aeabi_fadd+0xb4>
    4476:	e79e      	b.n	43b6 <__aeabi_fadd+0xbe>
    4478:	000c      	movs	r4, r1
    447a:	0003      	movs	r3, r0
    447c:	08db      	lsrs	r3, r3, #3
    447e:	e7db      	b.n	4438 <__aeabi_fadd+0x140>
    4480:	2900      	cmp	r1, #0
    4482:	d010      	beq.n	44a6 <__aeabi_fadd+0x1ae>
    4484:	1b51      	subs	r1, r2, r5
    4486:	2d00      	cmp	r5, #0
    4488:	d143      	bne.n	4512 <__aeabi_fadd+0x21a>
    448a:	2b00      	cmp	r3, #0
    448c:	d100      	bne.n	4490 <__aeabi_fadd+0x198>
    448e:	e093      	b.n	45b8 <__aeabi_fadd+0x2c0>
    4490:	1e4d      	subs	r5, r1, #1
    4492:	2901      	cmp	r1, #1
    4494:	d062      	beq.n	455c <__aeabi_fadd+0x264>
    4496:	29ff      	cmp	r1, #255	; 0xff
    4498:	d0ef      	beq.n	447a <__aeabi_fadd+0x182>
    449a:	0029      	movs	r1, r5
    449c:	e03e      	b.n	451c <__aeabi_fadd+0x224>
    449e:	4b55      	ldr	r3, [pc, #340]	; (45f4 <__aeabi_fadd+0x2fc>)
    44a0:	1a2d      	subs	r5, r5, r0
    44a2:	4033      	ands	r3, r6
    44a4:	e7e5      	b.n	4472 <__aeabi_fadd+0x17a>
    44a6:	21fe      	movs	r1, #254	; 0xfe
    44a8:	1c6a      	adds	r2, r5, #1
    44aa:	4211      	tst	r1, r2
    44ac:	d13b      	bne.n	4526 <__aeabi_fadd+0x22e>
    44ae:	2d00      	cmp	r5, #0
    44b0:	d16a      	bne.n	4588 <__aeabi_fadd+0x290>
    44b2:	2b00      	cmp	r3, #0
    44b4:	d100      	bne.n	44b8 <__aeabi_fadd+0x1c0>
    44b6:	e08e      	b.n	45d6 <__aeabi_fadd+0x2de>
    44b8:	2800      	cmp	r0, #0
    44ba:	d000      	beq.n	44be <__aeabi_fadd+0x1c6>
    44bc:	e08d      	b.n	45da <__aeabi_fadd+0x2e2>
    44be:	2500      	movs	r5, #0
    44c0:	08db      	lsrs	r3, r3, #3
    44c2:	025b      	lsls	r3, r3, #9
    44c4:	0a5b      	lsrs	r3, r3, #9
    44c6:	b2e8      	uxtb	r0, r5
    44c8:	e77d      	b.n	43c6 <__aeabi_fadd+0xce>
    44ca:	2aff      	cmp	r2, #255	; 0xff
    44cc:	d0d4      	beq.n	4478 <__aeabi_fadd+0x180>
    44ce:	2480      	movs	r4, #128	; 0x80
    44d0:	04e4      	lsls	r4, r4, #19
    44d2:	4323      	orrs	r3, r4
    44d4:	2401      	movs	r4, #1
    44d6:	2e1b      	cmp	r6, #27
    44d8:	dc07      	bgt.n	44ea <__aeabi_fadd+0x1f2>
    44da:	2520      	movs	r5, #32
    44dc:	1bad      	subs	r5, r5, r6
    44de:	001c      	movs	r4, r3
    44e0:	40ab      	lsls	r3, r5
    44e2:	40f4      	lsrs	r4, r6
    44e4:	1e5d      	subs	r5, r3, #1
    44e6:	41ab      	sbcs	r3, r5
    44e8:	431c      	orrs	r4, r3
    44ea:	1b03      	subs	r3, r0, r4
    44ec:	0015      	movs	r5, r2
    44ee:	000c      	movs	r4, r1
    44f0:	e757      	b.n	43a2 <__aeabi_fadd+0xaa>
    44f2:	1a1e      	subs	r6, r3, r0
    44f4:	0172      	lsls	r2, r6, #5
    44f6:	d42e      	bmi.n	4556 <__aeabi_fadd+0x25e>
    44f8:	2e00      	cmp	r6, #0
    44fa:	d1a8      	bne.n	444e <__aeabi_fadd+0x156>
    44fc:	2400      	movs	r4, #0
    44fe:	2000      	movs	r0, #0
    4500:	2300      	movs	r3, #0
    4502:	e760      	b.n	43c6 <__aeabi_fadd+0xce>
    4504:	2201      	movs	r2, #1
    4506:	493c      	ldr	r1, [pc, #240]	; (45f8 <__aeabi_fadd+0x300>)
    4508:	401a      	ands	r2, r3
    450a:	085b      	lsrs	r3, r3, #1
    450c:	400b      	ands	r3, r1
    450e:	4313      	orrs	r3, r2
    4510:	e7af      	b.n	4472 <__aeabi_fadd+0x17a>
    4512:	2aff      	cmp	r2, #255	; 0xff
    4514:	d0b1      	beq.n	447a <__aeabi_fadd+0x182>
    4516:	2580      	movs	r5, #128	; 0x80
    4518:	04ed      	lsls	r5, r5, #19
    451a:	432b      	orrs	r3, r5
    451c:	291b      	cmp	r1, #27
    451e:	dd28      	ble.n	4572 <__aeabi_fadd+0x27a>
    4520:	0015      	movs	r5, r2
    4522:	1c43      	adds	r3, r0, #1
    4524:	e742      	b.n	43ac <__aeabi_fadd+0xb4>
    4526:	2aff      	cmp	r2, #255	; 0xff
    4528:	d100      	bne.n	452c <__aeabi_fadd+0x234>
    452a:	e77e      	b.n	442a <__aeabi_fadd+0x132>
    452c:	181b      	adds	r3, r3, r0
    452e:	085b      	lsrs	r3, r3, #1
    4530:	0015      	movs	r5, r2
    4532:	075a      	lsls	r2, r3, #29
    4534:	d000      	beq.n	4538 <__aeabi_fadd+0x240>
    4536:	e739      	b.n	43ac <__aeabi_fadd+0xb4>
    4538:	08db      	lsrs	r3, r3, #3
    453a:	e7c2      	b.n	44c2 <__aeabi_fadd+0x1ca>
    453c:	000c      	movs	r4, r1
    453e:	0035      	movs	r5, r6
    4540:	0003      	movs	r3, r0
    4542:	e776      	b.n	4432 <__aeabi_fadd+0x13a>
    4544:	2b00      	cmp	r3, #0
    4546:	d13a      	bne.n	45be <__aeabi_fadd+0x2c6>
    4548:	2800      	cmp	r0, #0
    454a:	d195      	bne.n	4478 <__aeabi_fadd+0x180>
    454c:	2380      	movs	r3, #128	; 0x80
    454e:	2400      	movs	r4, #0
    4550:	20ff      	movs	r0, #255	; 0xff
    4552:	03db      	lsls	r3, r3, #15
    4554:	e737      	b.n	43c6 <__aeabi_fadd+0xce>
    4556:	000c      	movs	r4, r1
    4558:	1ac6      	subs	r6, r0, r3
    455a:	e778      	b.n	444e <__aeabi_fadd+0x156>
    455c:	181b      	adds	r3, r3, r0
    455e:	2502      	movs	r5, #2
    4560:	015a      	lsls	r2, r3, #5
    4562:	d4cf      	bmi.n	4504 <__aeabi_fadd+0x20c>
    4564:	3d01      	subs	r5, #1
    4566:	e71e      	b.n	43a6 <__aeabi_fadd+0xae>
    4568:	2501      	movs	r5, #1
    456a:	1a1b      	subs	r3, r3, r0
    456c:	e719      	b.n	43a2 <__aeabi_fadd+0xaa>
    456e:	000d      	movs	r5, r1
    4570:	e75f      	b.n	4432 <__aeabi_fadd+0x13a>
    4572:	001d      	movs	r5, r3
    4574:	2620      	movs	r6, #32
    4576:	40cd      	lsrs	r5, r1
    4578:	1a71      	subs	r1, r6, r1
    457a:	408b      	lsls	r3, r1
    457c:	1e59      	subs	r1, r3, #1
    457e:	418b      	sbcs	r3, r1
    4580:	432b      	orrs	r3, r5
    4582:	181b      	adds	r3, r3, r0
    4584:	0015      	movs	r5, r2
    4586:	e74b      	b.n	4420 <__aeabi_fadd+0x128>
    4588:	2b00      	cmp	r3, #0
    458a:	d100      	bne.n	458e <__aeabi_fadd+0x296>
    458c:	e775      	b.n	447a <__aeabi_fadd+0x182>
    458e:	2800      	cmp	r0, #0
    4590:	d100      	bne.n	4594 <__aeabi_fadd+0x29c>
    4592:	e773      	b.n	447c <__aeabi_fadd+0x184>
    4594:	2280      	movs	r2, #128	; 0x80
    4596:	03d2      	lsls	r2, r2, #15
    4598:	4297      	cmp	r7, r2
    459a:	d302      	bcc.n	45a2 <__aeabi_fadd+0x2aa>
    459c:	4594      	cmp	ip, r2
    459e:	d200      	bcs.n	45a2 <__aeabi_fadd+0x2aa>
    45a0:	0003      	movs	r3, r0
    45a2:	08db      	lsrs	r3, r3, #3
    45a4:	e74a      	b.n	443c <__aeabi_fadd+0x144>
    45a6:	2800      	cmp	r0, #0
    45a8:	d0a8      	beq.n	44fc <__aeabi_fadd+0x204>
    45aa:	000c      	movs	r4, r1
    45ac:	0003      	movs	r3, r0
    45ae:	e786      	b.n	44be <__aeabi_fadd+0x1c6>
    45b0:	000c      	movs	r4, r1
    45b2:	1ac3      	subs	r3, r0, r3
    45b4:	3501      	adds	r5, #1
    45b6:	e6f4      	b.n	43a2 <__aeabi_fadd+0xaa>
    45b8:	000d      	movs	r5, r1
    45ba:	0003      	movs	r3, r0
    45bc:	e739      	b.n	4432 <__aeabi_fadd+0x13a>
    45be:	2800      	cmp	r0, #0
    45c0:	d100      	bne.n	45c4 <__aeabi_fadd+0x2cc>
    45c2:	e75b      	b.n	447c <__aeabi_fadd+0x184>
    45c4:	2280      	movs	r2, #128	; 0x80
    45c6:	03d2      	lsls	r2, r2, #15
    45c8:	4297      	cmp	r7, r2
    45ca:	d3ea      	bcc.n	45a2 <__aeabi_fadd+0x2aa>
    45cc:	4594      	cmp	ip, r2
    45ce:	d2e8      	bcs.n	45a2 <__aeabi_fadd+0x2aa>
    45d0:	000c      	movs	r4, r1
    45d2:	0003      	movs	r3, r0
    45d4:	e7e5      	b.n	45a2 <__aeabi_fadd+0x2aa>
    45d6:	0003      	movs	r3, r0
    45d8:	e771      	b.n	44be <__aeabi_fadd+0x1c6>
    45da:	181b      	adds	r3, r3, r0
    45dc:	015a      	lsls	r2, r3, #5
    45de:	d5ab      	bpl.n	4538 <__aeabi_fadd+0x240>
    45e0:	4a04      	ldr	r2, [pc, #16]	; (45f4 <__aeabi_fadd+0x2fc>)
    45e2:	3501      	adds	r5, #1
    45e4:	4013      	ands	r3, r2
    45e6:	08db      	lsrs	r3, r3, #3
    45e8:	e76b      	b.n	44c2 <__aeabi_fadd+0x1ca>
    45ea:	1e13      	subs	r3, r2, #0
    45ec:	d086      	beq.n	44fc <__aeabi_fadd+0x204>
    45ee:	08db      	lsrs	r3, r3, #3
    45f0:	e767      	b.n	44c2 <__aeabi_fadd+0x1ca>
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	fbffffff 	.word	0xfbffffff
    45f8:	7dffffff 	.word	0x7dffffff

000045fc <__aeabi_fdiv>:
    45fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    45fe:	464f      	mov	r7, r9
    4600:	4646      	mov	r6, r8
    4602:	46d6      	mov	lr, sl
    4604:	0244      	lsls	r4, r0, #9
    4606:	b5c0      	push	{r6, r7, lr}
    4608:	0047      	lsls	r7, r0, #1
    460a:	1c0e      	adds	r6, r1, #0
    460c:	0a64      	lsrs	r4, r4, #9
    460e:	0e3f      	lsrs	r7, r7, #24
    4610:	0fc5      	lsrs	r5, r0, #31
    4612:	2f00      	cmp	r7, #0
    4614:	d03c      	beq.n	4690 <__aeabi_fdiv+0x94>
    4616:	2fff      	cmp	r7, #255	; 0xff
    4618:	d042      	beq.n	46a0 <__aeabi_fdiv+0xa4>
    461a:	2300      	movs	r3, #0
    461c:	2280      	movs	r2, #128	; 0x80
    461e:	4699      	mov	r9, r3
    4620:	469a      	mov	sl, r3
    4622:	00e4      	lsls	r4, r4, #3
    4624:	04d2      	lsls	r2, r2, #19
    4626:	4314      	orrs	r4, r2
    4628:	3f7f      	subs	r7, #127	; 0x7f
    462a:	0273      	lsls	r3, r6, #9
    462c:	0a5b      	lsrs	r3, r3, #9
    462e:	4698      	mov	r8, r3
    4630:	0073      	lsls	r3, r6, #1
    4632:	0e1b      	lsrs	r3, r3, #24
    4634:	0ff6      	lsrs	r6, r6, #31
    4636:	2b00      	cmp	r3, #0
    4638:	d01b      	beq.n	4672 <__aeabi_fdiv+0x76>
    463a:	2bff      	cmp	r3, #255	; 0xff
    463c:	d013      	beq.n	4666 <__aeabi_fdiv+0x6a>
    463e:	4642      	mov	r2, r8
    4640:	2180      	movs	r1, #128	; 0x80
    4642:	00d2      	lsls	r2, r2, #3
    4644:	04c9      	lsls	r1, r1, #19
    4646:	4311      	orrs	r1, r2
    4648:	4688      	mov	r8, r1
    464a:	2000      	movs	r0, #0
    464c:	3b7f      	subs	r3, #127	; 0x7f
    464e:	0029      	movs	r1, r5
    4650:	1aff      	subs	r7, r7, r3
    4652:	464b      	mov	r3, r9
    4654:	4071      	eors	r1, r6
    4656:	b2c9      	uxtb	r1, r1
    4658:	2b0f      	cmp	r3, #15
    465a:	d900      	bls.n	465e <__aeabi_fdiv+0x62>
    465c:	e0b5      	b.n	47ca <__aeabi_fdiv+0x1ce>
    465e:	4a74      	ldr	r2, [pc, #464]	; (4830 <__aeabi_fdiv+0x234>)
    4660:	009b      	lsls	r3, r3, #2
    4662:	58d3      	ldr	r3, [r2, r3]
    4664:	469f      	mov	pc, r3
    4666:	4643      	mov	r3, r8
    4668:	2b00      	cmp	r3, #0
    466a:	d13f      	bne.n	46ec <__aeabi_fdiv+0xf0>
    466c:	3fff      	subs	r7, #255	; 0xff
    466e:	3302      	adds	r3, #2
    4670:	e003      	b.n	467a <__aeabi_fdiv+0x7e>
    4672:	4643      	mov	r3, r8
    4674:	2b00      	cmp	r3, #0
    4676:	d12d      	bne.n	46d4 <__aeabi_fdiv+0xd8>
    4678:	2301      	movs	r3, #1
    467a:	0029      	movs	r1, r5
    467c:	464a      	mov	r2, r9
    467e:	4071      	eors	r1, r6
    4680:	b2c9      	uxtb	r1, r1
    4682:	431a      	orrs	r2, r3
    4684:	2a0e      	cmp	r2, #14
    4686:	d838      	bhi.n	46fa <__aeabi_fdiv+0xfe>
    4688:	486a      	ldr	r0, [pc, #424]	; (4834 <__aeabi_fdiv+0x238>)
    468a:	0092      	lsls	r2, r2, #2
    468c:	5882      	ldr	r2, [r0, r2]
    468e:	4697      	mov	pc, r2
    4690:	2c00      	cmp	r4, #0
    4692:	d113      	bne.n	46bc <__aeabi_fdiv+0xc0>
    4694:	2304      	movs	r3, #4
    4696:	4699      	mov	r9, r3
    4698:	3b03      	subs	r3, #3
    469a:	2700      	movs	r7, #0
    469c:	469a      	mov	sl, r3
    469e:	e7c4      	b.n	462a <__aeabi_fdiv+0x2e>
    46a0:	2c00      	cmp	r4, #0
    46a2:	d105      	bne.n	46b0 <__aeabi_fdiv+0xb4>
    46a4:	2308      	movs	r3, #8
    46a6:	4699      	mov	r9, r3
    46a8:	3b06      	subs	r3, #6
    46aa:	27ff      	movs	r7, #255	; 0xff
    46ac:	469a      	mov	sl, r3
    46ae:	e7bc      	b.n	462a <__aeabi_fdiv+0x2e>
    46b0:	230c      	movs	r3, #12
    46b2:	4699      	mov	r9, r3
    46b4:	3b09      	subs	r3, #9
    46b6:	27ff      	movs	r7, #255	; 0xff
    46b8:	469a      	mov	sl, r3
    46ba:	e7b6      	b.n	462a <__aeabi_fdiv+0x2e>
    46bc:	0020      	movs	r0, r4
    46be:	f000 fd01 	bl	50c4 <__clzsi2>
    46c2:	2776      	movs	r7, #118	; 0x76
    46c4:	1f43      	subs	r3, r0, #5
    46c6:	409c      	lsls	r4, r3
    46c8:	2300      	movs	r3, #0
    46ca:	427f      	negs	r7, r7
    46cc:	4699      	mov	r9, r3
    46ce:	469a      	mov	sl, r3
    46d0:	1a3f      	subs	r7, r7, r0
    46d2:	e7aa      	b.n	462a <__aeabi_fdiv+0x2e>
    46d4:	4640      	mov	r0, r8
    46d6:	f000 fcf5 	bl	50c4 <__clzsi2>
    46da:	4642      	mov	r2, r8
    46dc:	1f43      	subs	r3, r0, #5
    46de:	409a      	lsls	r2, r3
    46e0:	2376      	movs	r3, #118	; 0x76
    46e2:	425b      	negs	r3, r3
    46e4:	1a1b      	subs	r3, r3, r0
    46e6:	4690      	mov	r8, r2
    46e8:	2000      	movs	r0, #0
    46ea:	e7b0      	b.n	464e <__aeabi_fdiv+0x52>
    46ec:	2303      	movs	r3, #3
    46ee:	464a      	mov	r2, r9
    46f0:	431a      	orrs	r2, r3
    46f2:	4691      	mov	r9, r2
    46f4:	2003      	movs	r0, #3
    46f6:	33fc      	adds	r3, #252	; 0xfc
    46f8:	e7a9      	b.n	464e <__aeabi_fdiv+0x52>
    46fa:	000d      	movs	r5, r1
    46fc:	20ff      	movs	r0, #255	; 0xff
    46fe:	2200      	movs	r2, #0
    4700:	05c0      	lsls	r0, r0, #23
    4702:	07ed      	lsls	r5, r5, #31
    4704:	4310      	orrs	r0, r2
    4706:	4328      	orrs	r0, r5
    4708:	bce0      	pop	{r5, r6, r7}
    470a:	46ba      	mov	sl, r7
    470c:	46b1      	mov	r9, r6
    470e:	46a8      	mov	r8, r5
    4710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4712:	000d      	movs	r5, r1
    4714:	2000      	movs	r0, #0
    4716:	2200      	movs	r2, #0
    4718:	e7f2      	b.n	4700 <__aeabi_fdiv+0x104>
    471a:	4653      	mov	r3, sl
    471c:	2b02      	cmp	r3, #2
    471e:	d0ed      	beq.n	46fc <__aeabi_fdiv+0x100>
    4720:	2b03      	cmp	r3, #3
    4722:	d033      	beq.n	478c <__aeabi_fdiv+0x190>
    4724:	46a0      	mov	r8, r4
    4726:	2b01      	cmp	r3, #1
    4728:	d105      	bne.n	4736 <__aeabi_fdiv+0x13a>
    472a:	2000      	movs	r0, #0
    472c:	2200      	movs	r2, #0
    472e:	e7e7      	b.n	4700 <__aeabi_fdiv+0x104>
    4730:	0035      	movs	r5, r6
    4732:	2803      	cmp	r0, #3
    4734:	d07a      	beq.n	482c <__aeabi_fdiv+0x230>
    4736:	003b      	movs	r3, r7
    4738:	337f      	adds	r3, #127	; 0x7f
    473a:	2b00      	cmp	r3, #0
    473c:	dd2d      	ble.n	479a <__aeabi_fdiv+0x19e>
    473e:	4642      	mov	r2, r8
    4740:	0752      	lsls	r2, r2, #29
    4742:	d007      	beq.n	4754 <__aeabi_fdiv+0x158>
    4744:	220f      	movs	r2, #15
    4746:	4641      	mov	r1, r8
    4748:	400a      	ands	r2, r1
    474a:	2a04      	cmp	r2, #4
    474c:	d002      	beq.n	4754 <__aeabi_fdiv+0x158>
    474e:	2204      	movs	r2, #4
    4750:	4694      	mov	ip, r2
    4752:	44e0      	add	r8, ip
    4754:	4642      	mov	r2, r8
    4756:	0112      	lsls	r2, r2, #4
    4758:	d505      	bpl.n	4766 <__aeabi_fdiv+0x16a>
    475a:	4642      	mov	r2, r8
    475c:	4b36      	ldr	r3, [pc, #216]	; (4838 <__aeabi_fdiv+0x23c>)
    475e:	401a      	ands	r2, r3
    4760:	003b      	movs	r3, r7
    4762:	4690      	mov	r8, r2
    4764:	3380      	adds	r3, #128	; 0x80
    4766:	2bfe      	cmp	r3, #254	; 0xfe
    4768:	dcc8      	bgt.n	46fc <__aeabi_fdiv+0x100>
    476a:	4642      	mov	r2, r8
    476c:	0192      	lsls	r2, r2, #6
    476e:	0a52      	lsrs	r2, r2, #9
    4770:	b2d8      	uxtb	r0, r3
    4772:	e7c5      	b.n	4700 <__aeabi_fdiv+0x104>
    4774:	2280      	movs	r2, #128	; 0x80
    4776:	2500      	movs	r5, #0
    4778:	20ff      	movs	r0, #255	; 0xff
    477a:	03d2      	lsls	r2, r2, #15
    477c:	e7c0      	b.n	4700 <__aeabi_fdiv+0x104>
    477e:	2280      	movs	r2, #128	; 0x80
    4780:	03d2      	lsls	r2, r2, #15
    4782:	4214      	tst	r4, r2
    4784:	d002      	beq.n	478c <__aeabi_fdiv+0x190>
    4786:	4643      	mov	r3, r8
    4788:	4213      	tst	r3, r2
    478a:	d049      	beq.n	4820 <__aeabi_fdiv+0x224>
    478c:	2280      	movs	r2, #128	; 0x80
    478e:	03d2      	lsls	r2, r2, #15
    4790:	4322      	orrs	r2, r4
    4792:	0252      	lsls	r2, r2, #9
    4794:	20ff      	movs	r0, #255	; 0xff
    4796:	0a52      	lsrs	r2, r2, #9
    4798:	e7b2      	b.n	4700 <__aeabi_fdiv+0x104>
    479a:	2201      	movs	r2, #1
    479c:	1ad3      	subs	r3, r2, r3
    479e:	2b1b      	cmp	r3, #27
    47a0:	dcc3      	bgt.n	472a <__aeabi_fdiv+0x12e>
    47a2:	4642      	mov	r2, r8
    47a4:	40da      	lsrs	r2, r3
    47a6:	4643      	mov	r3, r8
    47a8:	379e      	adds	r7, #158	; 0x9e
    47aa:	40bb      	lsls	r3, r7
    47ac:	1e59      	subs	r1, r3, #1
    47ae:	418b      	sbcs	r3, r1
    47b0:	431a      	orrs	r2, r3
    47b2:	0753      	lsls	r3, r2, #29
    47b4:	d004      	beq.n	47c0 <__aeabi_fdiv+0x1c4>
    47b6:	230f      	movs	r3, #15
    47b8:	4013      	ands	r3, r2
    47ba:	2b04      	cmp	r3, #4
    47bc:	d000      	beq.n	47c0 <__aeabi_fdiv+0x1c4>
    47be:	3204      	adds	r2, #4
    47c0:	0153      	lsls	r3, r2, #5
    47c2:	d529      	bpl.n	4818 <__aeabi_fdiv+0x21c>
    47c4:	2001      	movs	r0, #1
    47c6:	2200      	movs	r2, #0
    47c8:	e79a      	b.n	4700 <__aeabi_fdiv+0x104>
    47ca:	4642      	mov	r2, r8
    47cc:	0163      	lsls	r3, r4, #5
    47ce:	0155      	lsls	r5, r2, #5
    47d0:	42ab      	cmp	r3, r5
    47d2:	d215      	bcs.n	4800 <__aeabi_fdiv+0x204>
    47d4:	201b      	movs	r0, #27
    47d6:	2200      	movs	r2, #0
    47d8:	3f01      	subs	r7, #1
    47da:	2601      	movs	r6, #1
    47dc:	001c      	movs	r4, r3
    47de:	0052      	lsls	r2, r2, #1
    47e0:	005b      	lsls	r3, r3, #1
    47e2:	2c00      	cmp	r4, #0
    47e4:	db01      	blt.n	47ea <__aeabi_fdiv+0x1ee>
    47e6:	429d      	cmp	r5, r3
    47e8:	d801      	bhi.n	47ee <__aeabi_fdiv+0x1f2>
    47ea:	1b5b      	subs	r3, r3, r5
    47ec:	4332      	orrs	r2, r6
    47ee:	3801      	subs	r0, #1
    47f0:	2800      	cmp	r0, #0
    47f2:	d1f3      	bne.n	47dc <__aeabi_fdiv+0x1e0>
    47f4:	1e58      	subs	r0, r3, #1
    47f6:	4183      	sbcs	r3, r0
    47f8:	4313      	orrs	r3, r2
    47fa:	4698      	mov	r8, r3
    47fc:	000d      	movs	r5, r1
    47fe:	e79a      	b.n	4736 <__aeabi_fdiv+0x13a>
    4800:	201a      	movs	r0, #26
    4802:	2201      	movs	r2, #1
    4804:	1b5b      	subs	r3, r3, r5
    4806:	e7e8      	b.n	47da <__aeabi_fdiv+0x1de>
    4808:	3b02      	subs	r3, #2
    480a:	425a      	negs	r2, r3
    480c:	4153      	adcs	r3, r2
    480e:	425b      	negs	r3, r3
    4810:	0035      	movs	r5, r6
    4812:	2200      	movs	r2, #0
    4814:	b2d8      	uxtb	r0, r3
    4816:	e773      	b.n	4700 <__aeabi_fdiv+0x104>
    4818:	0192      	lsls	r2, r2, #6
    481a:	2000      	movs	r0, #0
    481c:	0a52      	lsrs	r2, r2, #9
    481e:	e76f      	b.n	4700 <__aeabi_fdiv+0x104>
    4820:	431a      	orrs	r2, r3
    4822:	0252      	lsls	r2, r2, #9
    4824:	0035      	movs	r5, r6
    4826:	20ff      	movs	r0, #255	; 0xff
    4828:	0a52      	lsrs	r2, r2, #9
    482a:	e769      	b.n	4700 <__aeabi_fdiv+0x104>
    482c:	4644      	mov	r4, r8
    482e:	e7ad      	b.n	478c <__aeabi_fdiv+0x190>
    4830:	00005760 	.word	0x00005760
    4834:	000057a0 	.word	0x000057a0
    4838:	f7ffffff 	.word	0xf7ffffff

0000483c <__eqsf2>:
    483c:	b570      	push	{r4, r5, r6, lr}
    483e:	0042      	lsls	r2, r0, #1
    4840:	024e      	lsls	r6, r1, #9
    4842:	004c      	lsls	r4, r1, #1
    4844:	0245      	lsls	r5, r0, #9
    4846:	0a6d      	lsrs	r5, r5, #9
    4848:	0e12      	lsrs	r2, r2, #24
    484a:	0fc3      	lsrs	r3, r0, #31
    484c:	0a76      	lsrs	r6, r6, #9
    484e:	0e24      	lsrs	r4, r4, #24
    4850:	0fc9      	lsrs	r1, r1, #31
    4852:	2aff      	cmp	r2, #255	; 0xff
    4854:	d010      	beq.n	4878 <__eqsf2+0x3c>
    4856:	2cff      	cmp	r4, #255	; 0xff
    4858:	d00c      	beq.n	4874 <__eqsf2+0x38>
    485a:	2001      	movs	r0, #1
    485c:	42a2      	cmp	r2, r4
    485e:	d10a      	bne.n	4876 <__eqsf2+0x3a>
    4860:	42b5      	cmp	r5, r6
    4862:	d108      	bne.n	4876 <__eqsf2+0x3a>
    4864:	428b      	cmp	r3, r1
    4866:	d00f      	beq.n	4888 <__eqsf2+0x4c>
    4868:	2a00      	cmp	r2, #0
    486a:	d104      	bne.n	4876 <__eqsf2+0x3a>
    486c:	0028      	movs	r0, r5
    486e:	1e43      	subs	r3, r0, #1
    4870:	4198      	sbcs	r0, r3
    4872:	e000      	b.n	4876 <__eqsf2+0x3a>
    4874:	2001      	movs	r0, #1
    4876:	bd70      	pop	{r4, r5, r6, pc}
    4878:	2001      	movs	r0, #1
    487a:	2cff      	cmp	r4, #255	; 0xff
    487c:	d1fb      	bne.n	4876 <__eqsf2+0x3a>
    487e:	4335      	orrs	r5, r6
    4880:	d1f9      	bne.n	4876 <__eqsf2+0x3a>
    4882:	404b      	eors	r3, r1
    4884:	0018      	movs	r0, r3
    4886:	e7f6      	b.n	4876 <__eqsf2+0x3a>
    4888:	2000      	movs	r0, #0
    488a:	e7f4      	b.n	4876 <__eqsf2+0x3a>

0000488c <__gesf2>:
    488c:	b530      	push	{r4, r5, lr}
    488e:	0042      	lsls	r2, r0, #1
    4890:	0244      	lsls	r4, r0, #9
    4892:	024d      	lsls	r5, r1, #9
    4894:	0fc3      	lsrs	r3, r0, #31
    4896:	0048      	lsls	r0, r1, #1
    4898:	0a64      	lsrs	r4, r4, #9
    489a:	0e12      	lsrs	r2, r2, #24
    489c:	0a6d      	lsrs	r5, r5, #9
    489e:	0e00      	lsrs	r0, r0, #24
    48a0:	0fc9      	lsrs	r1, r1, #31
    48a2:	2aff      	cmp	r2, #255	; 0xff
    48a4:	d019      	beq.n	48da <__gesf2+0x4e>
    48a6:	28ff      	cmp	r0, #255	; 0xff
    48a8:	d00b      	beq.n	48c2 <__gesf2+0x36>
    48aa:	2a00      	cmp	r2, #0
    48ac:	d11e      	bne.n	48ec <__gesf2+0x60>
    48ae:	2800      	cmp	r0, #0
    48b0:	d10b      	bne.n	48ca <__gesf2+0x3e>
    48b2:	2d00      	cmp	r5, #0
    48b4:	d027      	beq.n	4906 <__gesf2+0x7a>
    48b6:	2c00      	cmp	r4, #0
    48b8:	d134      	bne.n	4924 <__gesf2+0x98>
    48ba:	2900      	cmp	r1, #0
    48bc:	d02f      	beq.n	491e <__gesf2+0x92>
    48be:	0008      	movs	r0, r1
    48c0:	bd30      	pop	{r4, r5, pc}
    48c2:	2d00      	cmp	r5, #0
    48c4:	d128      	bne.n	4918 <__gesf2+0x8c>
    48c6:	2a00      	cmp	r2, #0
    48c8:	d101      	bne.n	48ce <__gesf2+0x42>
    48ca:	2c00      	cmp	r4, #0
    48cc:	d0f5      	beq.n	48ba <__gesf2+0x2e>
    48ce:	428b      	cmp	r3, r1
    48d0:	d107      	bne.n	48e2 <__gesf2+0x56>
    48d2:	2b00      	cmp	r3, #0
    48d4:	d023      	beq.n	491e <__gesf2+0x92>
    48d6:	0018      	movs	r0, r3
    48d8:	e7f2      	b.n	48c0 <__gesf2+0x34>
    48da:	2c00      	cmp	r4, #0
    48dc:	d11c      	bne.n	4918 <__gesf2+0x8c>
    48de:	28ff      	cmp	r0, #255	; 0xff
    48e0:	d014      	beq.n	490c <__gesf2+0x80>
    48e2:	1e58      	subs	r0, r3, #1
    48e4:	2302      	movs	r3, #2
    48e6:	4018      	ands	r0, r3
    48e8:	3801      	subs	r0, #1
    48ea:	e7e9      	b.n	48c0 <__gesf2+0x34>
    48ec:	2800      	cmp	r0, #0
    48ee:	d0f8      	beq.n	48e2 <__gesf2+0x56>
    48f0:	428b      	cmp	r3, r1
    48f2:	d1f6      	bne.n	48e2 <__gesf2+0x56>
    48f4:	4282      	cmp	r2, r0
    48f6:	dcf4      	bgt.n	48e2 <__gesf2+0x56>
    48f8:	dbeb      	blt.n	48d2 <__gesf2+0x46>
    48fa:	42ac      	cmp	r4, r5
    48fc:	d8f1      	bhi.n	48e2 <__gesf2+0x56>
    48fe:	2000      	movs	r0, #0
    4900:	42ac      	cmp	r4, r5
    4902:	d2dd      	bcs.n	48c0 <__gesf2+0x34>
    4904:	e7e5      	b.n	48d2 <__gesf2+0x46>
    4906:	2c00      	cmp	r4, #0
    4908:	d0da      	beq.n	48c0 <__gesf2+0x34>
    490a:	e7ea      	b.n	48e2 <__gesf2+0x56>
    490c:	2d00      	cmp	r5, #0
    490e:	d103      	bne.n	4918 <__gesf2+0x8c>
    4910:	428b      	cmp	r3, r1
    4912:	d1e6      	bne.n	48e2 <__gesf2+0x56>
    4914:	2000      	movs	r0, #0
    4916:	e7d3      	b.n	48c0 <__gesf2+0x34>
    4918:	2002      	movs	r0, #2
    491a:	4240      	negs	r0, r0
    491c:	e7d0      	b.n	48c0 <__gesf2+0x34>
    491e:	2001      	movs	r0, #1
    4920:	4240      	negs	r0, r0
    4922:	e7cd      	b.n	48c0 <__gesf2+0x34>
    4924:	428b      	cmp	r3, r1
    4926:	d0e8      	beq.n	48fa <__gesf2+0x6e>
    4928:	e7db      	b.n	48e2 <__gesf2+0x56>
    492a:	46c0      	nop			; (mov r8, r8)

0000492c <__lesf2>:
    492c:	b530      	push	{r4, r5, lr}
    492e:	0042      	lsls	r2, r0, #1
    4930:	0244      	lsls	r4, r0, #9
    4932:	024d      	lsls	r5, r1, #9
    4934:	0fc3      	lsrs	r3, r0, #31
    4936:	0048      	lsls	r0, r1, #1
    4938:	0a64      	lsrs	r4, r4, #9
    493a:	0e12      	lsrs	r2, r2, #24
    493c:	0a6d      	lsrs	r5, r5, #9
    493e:	0e00      	lsrs	r0, r0, #24
    4940:	0fc9      	lsrs	r1, r1, #31
    4942:	2aff      	cmp	r2, #255	; 0xff
    4944:	d01a      	beq.n	497c <__lesf2+0x50>
    4946:	28ff      	cmp	r0, #255	; 0xff
    4948:	d00e      	beq.n	4968 <__lesf2+0x3c>
    494a:	2a00      	cmp	r2, #0
    494c:	d11e      	bne.n	498c <__lesf2+0x60>
    494e:	2800      	cmp	r0, #0
    4950:	d10e      	bne.n	4970 <__lesf2+0x44>
    4952:	2d00      	cmp	r5, #0
    4954:	d02a      	beq.n	49ac <__lesf2+0x80>
    4956:	2c00      	cmp	r4, #0
    4958:	d00c      	beq.n	4974 <__lesf2+0x48>
    495a:	428b      	cmp	r3, r1
    495c:	d01d      	beq.n	499a <__lesf2+0x6e>
    495e:	1e58      	subs	r0, r3, #1
    4960:	2302      	movs	r3, #2
    4962:	4018      	ands	r0, r3
    4964:	3801      	subs	r0, #1
    4966:	e010      	b.n	498a <__lesf2+0x5e>
    4968:	2d00      	cmp	r5, #0
    496a:	d10d      	bne.n	4988 <__lesf2+0x5c>
    496c:	2a00      	cmp	r2, #0
    496e:	d120      	bne.n	49b2 <__lesf2+0x86>
    4970:	2c00      	cmp	r4, #0
    4972:	d11e      	bne.n	49b2 <__lesf2+0x86>
    4974:	2900      	cmp	r1, #0
    4976:	d023      	beq.n	49c0 <__lesf2+0x94>
    4978:	0008      	movs	r0, r1
    497a:	e006      	b.n	498a <__lesf2+0x5e>
    497c:	2c00      	cmp	r4, #0
    497e:	d103      	bne.n	4988 <__lesf2+0x5c>
    4980:	28ff      	cmp	r0, #255	; 0xff
    4982:	d1ec      	bne.n	495e <__lesf2+0x32>
    4984:	2d00      	cmp	r5, #0
    4986:	d017      	beq.n	49b8 <__lesf2+0x8c>
    4988:	2002      	movs	r0, #2
    498a:	bd30      	pop	{r4, r5, pc}
    498c:	2800      	cmp	r0, #0
    498e:	d0e6      	beq.n	495e <__lesf2+0x32>
    4990:	428b      	cmp	r3, r1
    4992:	d1e4      	bne.n	495e <__lesf2+0x32>
    4994:	4282      	cmp	r2, r0
    4996:	dce2      	bgt.n	495e <__lesf2+0x32>
    4998:	db04      	blt.n	49a4 <__lesf2+0x78>
    499a:	42ac      	cmp	r4, r5
    499c:	d8df      	bhi.n	495e <__lesf2+0x32>
    499e:	2000      	movs	r0, #0
    49a0:	42ac      	cmp	r4, r5
    49a2:	d2f2      	bcs.n	498a <__lesf2+0x5e>
    49a4:	2b00      	cmp	r3, #0
    49a6:	d00b      	beq.n	49c0 <__lesf2+0x94>
    49a8:	0018      	movs	r0, r3
    49aa:	e7ee      	b.n	498a <__lesf2+0x5e>
    49ac:	2c00      	cmp	r4, #0
    49ae:	d0ec      	beq.n	498a <__lesf2+0x5e>
    49b0:	e7d5      	b.n	495e <__lesf2+0x32>
    49b2:	428b      	cmp	r3, r1
    49b4:	d1d3      	bne.n	495e <__lesf2+0x32>
    49b6:	e7f5      	b.n	49a4 <__lesf2+0x78>
    49b8:	2000      	movs	r0, #0
    49ba:	428b      	cmp	r3, r1
    49bc:	d0e5      	beq.n	498a <__lesf2+0x5e>
    49be:	e7ce      	b.n	495e <__lesf2+0x32>
    49c0:	2001      	movs	r0, #1
    49c2:	4240      	negs	r0, r0
    49c4:	e7e1      	b.n	498a <__lesf2+0x5e>
    49c6:	46c0      	nop			; (mov r8, r8)

000049c8 <__aeabi_fmul>:
    49c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ca:	464f      	mov	r7, r9
    49cc:	4646      	mov	r6, r8
    49ce:	46d6      	mov	lr, sl
    49d0:	0243      	lsls	r3, r0, #9
    49d2:	0a5b      	lsrs	r3, r3, #9
    49d4:	4699      	mov	r9, r3
    49d6:	0043      	lsls	r3, r0, #1
    49d8:	b5c0      	push	{r6, r7, lr}
    49da:	0e1b      	lsrs	r3, r3, #24
    49dc:	1c0e      	adds	r6, r1, #0
    49de:	0fc5      	lsrs	r5, r0, #31
    49e0:	2b00      	cmp	r3, #0
    49e2:	d100      	bne.n	49e6 <__aeabi_fmul+0x1e>
    49e4:	e085      	b.n	4af2 <__aeabi_fmul+0x12a>
    49e6:	2bff      	cmp	r3, #255	; 0xff
    49e8:	d100      	bne.n	49ec <__aeabi_fmul+0x24>
    49ea:	e08b      	b.n	4b04 <__aeabi_fmul+0x13c>
    49ec:	464a      	mov	r2, r9
    49ee:	2180      	movs	r1, #128	; 0x80
    49f0:	00d2      	lsls	r2, r2, #3
    49f2:	04c9      	lsls	r1, r1, #19
    49f4:	4311      	orrs	r1, r2
    49f6:	227f      	movs	r2, #127	; 0x7f
    49f8:	4252      	negs	r2, r2
    49fa:	4690      	mov	r8, r2
    49fc:	4498      	add	r8, r3
    49fe:	2300      	movs	r3, #0
    4a00:	4689      	mov	r9, r1
    4a02:	2700      	movs	r7, #0
    4a04:	469a      	mov	sl, r3
    4a06:	0274      	lsls	r4, r6, #9
    4a08:	0073      	lsls	r3, r6, #1
    4a0a:	0a64      	lsrs	r4, r4, #9
    4a0c:	0e1b      	lsrs	r3, r3, #24
    4a0e:	0ff6      	lsrs	r6, r6, #31
    4a10:	2b00      	cmp	r3, #0
    4a12:	d064      	beq.n	4ade <__aeabi_fmul+0x116>
    4a14:	2bff      	cmp	r3, #255	; 0xff
    4a16:	d01f      	beq.n	4a58 <__aeabi_fmul+0x90>
    4a18:	2280      	movs	r2, #128	; 0x80
    4a1a:	3b7f      	subs	r3, #127	; 0x7f
    4a1c:	00e4      	lsls	r4, r4, #3
    4a1e:	04d2      	lsls	r2, r2, #19
    4a20:	4443      	add	r3, r8
    4a22:	2000      	movs	r0, #0
    4a24:	4314      	orrs	r4, r2
    4a26:	1c59      	adds	r1, r3, #1
    4a28:	2f0a      	cmp	r7, #10
    4a2a:	dc2b      	bgt.n	4a84 <__aeabi_fmul+0xbc>
    4a2c:	4075      	eors	r5, r6
    4a2e:	2f02      	cmp	r7, #2
    4a30:	dc22      	bgt.n	4a78 <__aeabi_fmul+0xb0>
    4a32:	3f01      	subs	r7, #1
    4a34:	2f01      	cmp	r7, #1
    4a36:	d900      	bls.n	4a3a <__aeabi_fmul+0x72>
    4a38:	e0bb      	b.n	4bb2 <__aeabi_fmul+0x1ea>
    4a3a:	2802      	cmp	r0, #2
    4a3c:	d06b      	beq.n	4b16 <__aeabi_fmul+0x14e>
    4a3e:	2801      	cmp	r0, #1
    4a40:	d12a      	bne.n	4a98 <__aeabi_fmul+0xd0>
    4a42:	2000      	movs	r0, #0
    4a44:	2200      	movs	r2, #0
    4a46:	05c0      	lsls	r0, r0, #23
    4a48:	07ed      	lsls	r5, r5, #31
    4a4a:	4310      	orrs	r0, r2
    4a4c:	4328      	orrs	r0, r5
    4a4e:	bce0      	pop	{r5, r6, r7}
    4a50:	46ba      	mov	sl, r7
    4a52:	46b1      	mov	r9, r6
    4a54:	46a8      	mov	r8, r5
    4a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a58:	2c00      	cmp	r4, #0
    4a5a:	d064      	beq.n	4b26 <__aeabi_fmul+0x15e>
    4a5c:	2203      	movs	r2, #3
    4a5e:	4641      	mov	r1, r8
    4a60:	4643      	mov	r3, r8
    4a62:	4317      	orrs	r7, r2
    4a64:	002a      	movs	r2, r5
    4a66:	3101      	adds	r1, #1
    4a68:	33ff      	adds	r3, #255	; 0xff
    4a6a:	4072      	eors	r2, r6
    4a6c:	31ff      	adds	r1, #255	; 0xff
    4a6e:	2f0a      	cmp	r7, #10
    4a70:	dd00      	ble.n	4a74 <__aeabi_fmul+0xac>
    4a72:	e0d7      	b.n	4c24 <__aeabi_fmul+0x25c>
    4a74:	0015      	movs	r5, r2
    4a76:	2003      	movs	r0, #3
    4a78:	2201      	movs	r2, #1
    4a7a:	40ba      	lsls	r2, r7
    4a7c:	27a6      	movs	r7, #166	; 0xa6
    4a7e:	00ff      	lsls	r7, r7, #3
    4a80:	423a      	tst	r2, r7
    4a82:	d020      	beq.n	4ac6 <__aeabi_fmul+0xfe>
    4a84:	4653      	mov	r3, sl
    4a86:	2b02      	cmp	r3, #2
    4a88:	d045      	beq.n	4b16 <__aeabi_fmul+0x14e>
    4a8a:	2b03      	cmp	r3, #3
    4a8c:	d100      	bne.n	4a90 <__aeabi_fmul+0xc8>
    4a8e:	e0bb      	b.n	4c08 <__aeabi_fmul+0x240>
    4a90:	4650      	mov	r0, sl
    4a92:	464c      	mov	r4, r9
    4a94:	2801      	cmp	r0, #1
    4a96:	d0d4      	beq.n	4a42 <__aeabi_fmul+0x7a>
    4a98:	000b      	movs	r3, r1
    4a9a:	337f      	adds	r3, #127	; 0x7f
    4a9c:	2b00      	cmp	r3, #0
    4a9e:	dd70      	ble.n	4b82 <__aeabi_fmul+0x1ba>
    4aa0:	0762      	lsls	r2, r4, #29
    4aa2:	d004      	beq.n	4aae <__aeabi_fmul+0xe6>
    4aa4:	220f      	movs	r2, #15
    4aa6:	4022      	ands	r2, r4
    4aa8:	2a04      	cmp	r2, #4
    4aaa:	d000      	beq.n	4aae <__aeabi_fmul+0xe6>
    4aac:	3404      	adds	r4, #4
    4aae:	0122      	lsls	r2, r4, #4
    4ab0:	d503      	bpl.n	4aba <__aeabi_fmul+0xf2>
    4ab2:	4b63      	ldr	r3, [pc, #396]	; (4c40 <__aeabi_fmul+0x278>)
    4ab4:	401c      	ands	r4, r3
    4ab6:	000b      	movs	r3, r1
    4ab8:	3380      	adds	r3, #128	; 0x80
    4aba:	2bfe      	cmp	r3, #254	; 0xfe
    4abc:	dc2b      	bgt.n	4b16 <__aeabi_fmul+0x14e>
    4abe:	01a2      	lsls	r2, r4, #6
    4ac0:	0a52      	lsrs	r2, r2, #9
    4ac2:	b2d8      	uxtb	r0, r3
    4ac4:	e7bf      	b.n	4a46 <__aeabi_fmul+0x7e>
    4ac6:	2790      	movs	r7, #144	; 0x90
    4ac8:	00bf      	lsls	r7, r7, #2
    4aca:	423a      	tst	r2, r7
    4acc:	d126      	bne.n	4b1c <__aeabi_fmul+0x154>
    4ace:	3fb9      	subs	r7, #185	; 0xb9
    4ad0:	3fff      	subs	r7, #255	; 0xff
    4ad2:	4217      	tst	r7, r2
    4ad4:	d06d      	beq.n	4bb2 <__aeabi_fmul+0x1ea>
    4ad6:	0035      	movs	r5, r6
    4ad8:	46a1      	mov	r9, r4
    4ada:	4682      	mov	sl, r0
    4adc:	e7d2      	b.n	4a84 <__aeabi_fmul+0xbc>
    4ade:	2c00      	cmp	r4, #0
    4ae0:	d141      	bne.n	4b66 <__aeabi_fmul+0x19e>
    4ae2:	2301      	movs	r3, #1
    4ae4:	431f      	orrs	r7, r3
    4ae6:	4643      	mov	r3, r8
    4ae8:	2001      	movs	r0, #1
    4aea:	1c59      	adds	r1, r3, #1
    4aec:	2f0a      	cmp	r7, #10
    4aee:	dd9d      	ble.n	4a2c <__aeabi_fmul+0x64>
    4af0:	e7c8      	b.n	4a84 <__aeabi_fmul+0xbc>
    4af2:	464b      	mov	r3, r9
    4af4:	2b00      	cmp	r3, #0
    4af6:	d127      	bne.n	4b48 <__aeabi_fmul+0x180>
    4af8:	2300      	movs	r3, #0
    4afa:	4698      	mov	r8, r3
    4afc:	3301      	adds	r3, #1
    4afe:	2704      	movs	r7, #4
    4b00:	469a      	mov	sl, r3
    4b02:	e780      	b.n	4a06 <__aeabi_fmul+0x3e>
    4b04:	464b      	mov	r3, r9
    4b06:	2b00      	cmp	r3, #0
    4b08:	d118      	bne.n	4b3c <__aeabi_fmul+0x174>
    4b0a:	23ff      	movs	r3, #255	; 0xff
    4b0c:	4698      	mov	r8, r3
    4b0e:	3bfd      	subs	r3, #253	; 0xfd
    4b10:	2708      	movs	r7, #8
    4b12:	469a      	mov	sl, r3
    4b14:	e777      	b.n	4a06 <__aeabi_fmul+0x3e>
    4b16:	20ff      	movs	r0, #255	; 0xff
    4b18:	2200      	movs	r2, #0
    4b1a:	e794      	b.n	4a46 <__aeabi_fmul+0x7e>
    4b1c:	2280      	movs	r2, #128	; 0x80
    4b1e:	2500      	movs	r5, #0
    4b20:	20ff      	movs	r0, #255	; 0xff
    4b22:	03d2      	lsls	r2, r2, #15
    4b24:	e78f      	b.n	4a46 <__aeabi_fmul+0x7e>
    4b26:	2302      	movs	r3, #2
    4b28:	431f      	orrs	r7, r3
    4b2a:	4643      	mov	r3, r8
    4b2c:	1c59      	adds	r1, r3, #1
    4b2e:	31ff      	adds	r1, #255	; 0xff
    4b30:	2f0a      	cmp	r7, #10
    4b32:	dca7      	bgt.n	4a84 <__aeabi_fmul+0xbc>
    4b34:	2002      	movs	r0, #2
    4b36:	33ff      	adds	r3, #255	; 0xff
    4b38:	4075      	eors	r5, r6
    4b3a:	e778      	b.n	4a2e <__aeabi_fmul+0x66>
    4b3c:	23ff      	movs	r3, #255	; 0xff
    4b3e:	4698      	mov	r8, r3
    4b40:	3bfc      	subs	r3, #252	; 0xfc
    4b42:	270c      	movs	r7, #12
    4b44:	469a      	mov	sl, r3
    4b46:	e75e      	b.n	4a06 <__aeabi_fmul+0x3e>
    4b48:	4648      	mov	r0, r9
    4b4a:	f000 fabb 	bl	50c4 <__clzsi2>
    4b4e:	464a      	mov	r2, r9
    4b50:	1f43      	subs	r3, r0, #5
    4b52:	409a      	lsls	r2, r3
    4b54:	2376      	movs	r3, #118	; 0x76
    4b56:	425b      	negs	r3, r3
    4b58:	1a1b      	subs	r3, r3, r0
    4b5a:	4698      	mov	r8, r3
    4b5c:	2300      	movs	r3, #0
    4b5e:	4691      	mov	r9, r2
    4b60:	2700      	movs	r7, #0
    4b62:	469a      	mov	sl, r3
    4b64:	e74f      	b.n	4a06 <__aeabi_fmul+0x3e>
    4b66:	0020      	movs	r0, r4
    4b68:	f000 faac 	bl	50c4 <__clzsi2>
    4b6c:	1f43      	subs	r3, r0, #5
    4b6e:	409c      	lsls	r4, r3
    4b70:	4643      	mov	r3, r8
    4b72:	1a1b      	subs	r3, r3, r0
    4b74:	3b76      	subs	r3, #118	; 0x76
    4b76:	2000      	movs	r0, #0
    4b78:	1c59      	adds	r1, r3, #1
    4b7a:	2f0a      	cmp	r7, #10
    4b7c:	dc00      	bgt.n	4b80 <__aeabi_fmul+0x1b8>
    4b7e:	e755      	b.n	4a2c <__aeabi_fmul+0x64>
    4b80:	e780      	b.n	4a84 <__aeabi_fmul+0xbc>
    4b82:	2201      	movs	r2, #1
    4b84:	1ad3      	subs	r3, r2, r3
    4b86:	2b1b      	cmp	r3, #27
    4b88:	dd00      	ble.n	4b8c <__aeabi_fmul+0x1c4>
    4b8a:	e75a      	b.n	4a42 <__aeabi_fmul+0x7a>
    4b8c:	319e      	adds	r1, #158	; 0x9e
    4b8e:	0022      	movs	r2, r4
    4b90:	408c      	lsls	r4, r1
    4b92:	40da      	lsrs	r2, r3
    4b94:	1e63      	subs	r3, r4, #1
    4b96:	419c      	sbcs	r4, r3
    4b98:	4322      	orrs	r2, r4
    4b9a:	0753      	lsls	r3, r2, #29
    4b9c:	d004      	beq.n	4ba8 <__aeabi_fmul+0x1e0>
    4b9e:	230f      	movs	r3, #15
    4ba0:	4013      	ands	r3, r2
    4ba2:	2b04      	cmp	r3, #4
    4ba4:	d000      	beq.n	4ba8 <__aeabi_fmul+0x1e0>
    4ba6:	3204      	adds	r2, #4
    4ba8:	0153      	lsls	r3, r2, #5
    4baa:	d537      	bpl.n	4c1c <__aeabi_fmul+0x254>
    4bac:	2001      	movs	r0, #1
    4bae:	2200      	movs	r2, #0
    4bb0:	e749      	b.n	4a46 <__aeabi_fmul+0x7e>
    4bb2:	0c20      	lsrs	r0, r4, #16
    4bb4:	464a      	mov	r2, r9
    4bb6:	0424      	lsls	r4, r4, #16
    4bb8:	0c24      	lsrs	r4, r4, #16
    4bba:	0027      	movs	r7, r4
    4bbc:	0c16      	lsrs	r6, r2, #16
    4bbe:	0412      	lsls	r2, r2, #16
    4bc0:	0c12      	lsrs	r2, r2, #16
    4bc2:	4374      	muls	r4, r6
    4bc4:	4357      	muls	r7, r2
    4bc6:	4346      	muls	r6, r0
    4bc8:	4350      	muls	r0, r2
    4bca:	0c3a      	lsrs	r2, r7, #16
    4bcc:	1900      	adds	r0, r0, r4
    4bce:	1812      	adds	r2, r2, r0
    4bd0:	4294      	cmp	r4, r2
    4bd2:	d903      	bls.n	4bdc <__aeabi_fmul+0x214>
    4bd4:	2080      	movs	r0, #128	; 0x80
    4bd6:	0240      	lsls	r0, r0, #9
    4bd8:	4684      	mov	ip, r0
    4bda:	4466      	add	r6, ip
    4bdc:	043f      	lsls	r7, r7, #16
    4bde:	0410      	lsls	r0, r2, #16
    4be0:	0c3f      	lsrs	r7, r7, #16
    4be2:	19c0      	adds	r0, r0, r7
    4be4:	0184      	lsls	r4, r0, #6
    4be6:	1e67      	subs	r7, r4, #1
    4be8:	41bc      	sbcs	r4, r7
    4bea:	0c12      	lsrs	r2, r2, #16
    4bec:	0e80      	lsrs	r0, r0, #26
    4bee:	1992      	adds	r2, r2, r6
    4bf0:	4304      	orrs	r4, r0
    4bf2:	0192      	lsls	r2, r2, #6
    4bf4:	4314      	orrs	r4, r2
    4bf6:	0112      	lsls	r2, r2, #4
    4bf8:	d50e      	bpl.n	4c18 <__aeabi_fmul+0x250>
    4bfa:	2301      	movs	r3, #1
    4bfc:	0862      	lsrs	r2, r4, #1
    4bfe:	401c      	ands	r4, r3
    4c00:	4314      	orrs	r4, r2
    4c02:	e749      	b.n	4a98 <__aeabi_fmul+0xd0>
    4c04:	0035      	movs	r5, r6
    4c06:	46a1      	mov	r9, r4
    4c08:	2280      	movs	r2, #128	; 0x80
    4c0a:	464b      	mov	r3, r9
    4c0c:	03d2      	lsls	r2, r2, #15
    4c0e:	431a      	orrs	r2, r3
    4c10:	0252      	lsls	r2, r2, #9
    4c12:	20ff      	movs	r0, #255	; 0xff
    4c14:	0a52      	lsrs	r2, r2, #9
    4c16:	e716      	b.n	4a46 <__aeabi_fmul+0x7e>
    4c18:	0019      	movs	r1, r3
    4c1a:	e73d      	b.n	4a98 <__aeabi_fmul+0xd0>
    4c1c:	0192      	lsls	r2, r2, #6
    4c1e:	2000      	movs	r0, #0
    4c20:	0a52      	lsrs	r2, r2, #9
    4c22:	e710      	b.n	4a46 <__aeabi_fmul+0x7e>
    4c24:	2f0f      	cmp	r7, #15
    4c26:	d1ed      	bne.n	4c04 <__aeabi_fmul+0x23c>
    4c28:	2280      	movs	r2, #128	; 0x80
    4c2a:	464b      	mov	r3, r9
    4c2c:	03d2      	lsls	r2, r2, #15
    4c2e:	4213      	tst	r3, r2
    4c30:	d0ea      	beq.n	4c08 <__aeabi_fmul+0x240>
    4c32:	4214      	tst	r4, r2
    4c34:	d1e8      	bne.n	4c08 <__aeabi_fmul+0x240>
    4c36:	0035      	movs	r5, r6
    4c38:	20ff      	movs	r0, #255	; 0xff
    4c3a:	4322      	orrs	r2, r4
    4c3c:	e703      	b.n	4a46 <__aeabi_fmul+0x7e>
    4c3e:	46c0      	nop			; (mov r8, r8)
    4c40:	f7ffffff 	.word	0xf7ffffff

00004c44 <__aeabi_fsub>:
    4c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c46:	0243      	lsls	r3, r0, #9
    4c48:	0045      	lsls	r5, r0, #1
    4c4a:	0fc4      	lsrs	r4, r0, #31
    4c4c:	0248      	lsls	r0, r1, #9
    4c4e:	0a42      	lsrs	r2, r0, #9
    4c50:	4694      	mov	ip, r2
    4c52:	004a      	lsls	r2, r1, #1
    4c54:	0a5e      	lsrs	r6, r3, #9
    4c56:	0e2d      	lsrs	r5, r5, #24
    4c58:	099b      	lsrs	r3, r3, #6
    4c5a:	0e12      	lsrs	r2, r2, #24
    4c5c:	0fc9      	lsrs	r1, r1, #31
    4c5e:	0980      	lsrs	r0, r0, #6
    4c60:	2aff      	cmp	r2, #255	; 0xff
    4c62:	d023      	beq.n	4cac <__aeabi_fsub+0x68>
    4c64:	2701      	movs	r7, #1
    4c66:	4079      	eors	r1, r7
    4c68:	1aaf      	subs	r7, r5, r2
    4c6a:	428c      	cmp	r4, r1
    4c6c:	d00f      	beq.n	4c8e <__aeabi_fsub+0x4a>
    4c6e:	2f00      	cmp	r7, #0
    4c70:	dc00      	bgt.n	4c74 <__aeabi_fsub+0x30>
    4c72:	e15d      	b.n	4f30 <__aeabi_fsub+0x2ec>
    4c74:	2a00      	cmp	r2, #0
    4c76:	d12f      	bne.n	4cd8 <__aeabi_fsub+0x94>
    4c78:	2800      	cmp	r0, #0
    4c7a:	d100      	bne.n	4c7e <__aeabi_fsub+0x3a>
    4c7c:	e090      	b.n	4da0 <__aeabi_fsub+0x15c>
    4c7e:	1e7a      	subs	r2, r7, #1
    4c80:	2f01      	cmp	r7, #1
    4c82:	d100      	bne.n	4c86 <__aeabi_fsub+0x42>
    4c84:	e11a      	b.n	4ebc <__aeabi_fsub+0x278>
    4c86:	2fff      	cmp	r7, #255	; 0xff
    4c88:	d01c      	beq.n	4cc4 <__aeabi_fsub+0x80>
    4c8a:	0017      	movs	r7, r2
    4c8c:	e029      	b.n	4ce2 <__aeabi_fsub+0x9e>
    4c8e:	2f00      	cmp	r7, #0
    4c90:	dc00      	bgt.n	4c94 <__aeabi_fsub+0x50>
    4c92:	e159      	b.n	4f48 <__aeabi_fsub+0x304>
    4c94:	2a00      	cmp	r2, #0
    4c96:	d052      	beq.n	4d3e <__aeabi_fsub+0xfa>
    4c98:	2dff      	cmp	r5, #255	; 0xff
    4c9a:	d013      	beq.n	4cc4 <__aeabi_fsub+0x80>
    4c9c:	2280      	movs	r2, #128	; 0x80
    4c9e:	04d2      	lsls	r2, r2, #19
    4ca0:	4310      	orrs	r0, r2
    4ca2:	2f1b      	cmp	r7, #27
    4ca4:	dc00      	bgt.n	4ca8 <__aeabi_fsub+0x64>
    4ca6:	e06a      	b.n	4d7e <__aeabi_fsub+0x13a>
    4ca8:	3301      	adds	r3, #1
    4caa:	e02b      	b.n	4d04 <__aeabi_fsub+0xc0>
    4cac:	2800      	cmp	r0, #0
    4cae:	d03b      	beq.n	4d28 <__aeabi_fsub+0xe4>
    4cb0:	428c      	cmp	r4, r1
    4cb2:	d04d      	beq.n	4d50 <__aeabi_fsub+0x10c>
    4cb4:	2dff      	cmp	r5, #255	; 0xff
    4cb6:	d100      	bne.n	4cba <__aeabi_fsub+0x76>
    4cb8:	e08f      	b.n	4dda <__aeabi_fsub+0x196>
    4cba:	2d00      	cmp	r5, #0
    4cbc:	d100      	bne.n	4cc0 <__aeabi_fsub+0x7c>
    4cbe:	e0ab      	b.n	4e18 <__aeabi_fsub+0x1d4>
    4cc0:	000c      	movs	r4, r1
    4cc2:	0003      	movs	r3, r0
    4cc4:	08db      	lsrs	r3, r3, #3
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d067      	beq.n	4d9a <__aeabi_fsub+0x156>
    4cca:	2280      	movs	r2, #128	; 0x80
    4ccc:	03d2      	lsls	r2, r2, #15
    4cce:	4313      	orrs	r3, r2
    4cd0:	025b      	lsls	r3, r3, #9
    4cd2:	20ff      	movs	r0, #255	; 0xff
    4cd4:	0a5b      	lsrs	r3, r3, #9
    4cd6:	e022      	b.n	4d1e <__aeabi_fsub+0xda>
    4cd8:	2dff      	cmp	r5, #255	; 0xff
    4cda:	d0f3      	beq.n	4cc4 <__aeabi_fsub+0x80>
    4cdc:	2280      	movs	r2, #128	; 0x80
    4cde:	04d2      	lsls	r2, r2, #19
    4ce0:	4310      	orrs	r0, r2
    4ce2:	2201      	movs	r2, #1
    4ce4:	2f1b      	cmp	r7, #27
    4ce6:	dc07      	bgt.n	4cf8 <__aeabi_fsub+0xb4>
    4ce8:	2120      	movs	r1, #32
    4cea:	1bc9      	subs	r1, r1, r7
    4cec:	0002      	movs	r2, r0
    4cee:	4088      	lsls	r0, r1
    4cf0:	40fa      	lsrs	r2, r7
    4cf2:	1e41      	subs	r1, r0, #1
    4cf4:	4188      	sbcs	r0, r1
    4cf6:	4302      	orrs	r2, r0
    4cf8:	1a9b      	subs	r3, r3, r2
    4cfa:	015a      	lsls	r2, r3, #5
    4cfc:	d456      	bmi.n	4dac <__aeabi_fsub+0x168>
    4cfe:	2207      	movs	r2, #7
    4d00:	401a      	ands	r2, r3
    4d02:	d04e      	beq.n	4da2 <__aeabi_fsub+0x15e>
    4d04:	220f      	movs	r2, #15
    4d06:	401a      	ands	r2, r3
    4d08:	2a04      	cmp	r2, #4
    4d0a:	d000      	beq.n	4d0e <__aeabi_fsub+0xca>
    4d0c:	3304      	adds	r3, #4
    4d0e:	015a      	lsls	r2, r3, #5
    4d10:	d547      	bpl.n	4da2 <__aeabi_fsub+0x15e>
    4d12:	1c68      	adds	r0, r5, #1
    4d14:	2dfe      	cmp	r5, #254	; 0xfe
    4d16:	d040      	beq.n	4d9a <__aeabi_fsub+0x156>
    4d18:	019b      	lsls	r3, r3, #6
    4d1a:	0a5b      	lsrs	r3, r3, #9
    4d1c:	b2c0      	uxtb	r0, r0
    4d1e:	05c0      	lsls	r0, r0, #23
    4d20:	4318      	orrs	r0, r3
    4d22:	07e4      	lsls	r4, r4, #31
    4d24:	4320      	orrs	r0, r4
    4d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d28:	2701      	movs	r7, #1
    4d2a:	4079      	eors	r1, r7
    4d2c:	428c      	cmp	r4, r1
    4d2e:	d1c1      	bne.n	4cb4 <__aeabi_fsub+0x70>
    4d30:	2dff      	cmp	r5, #255	; 0xff
    4d32:	d010      	beq.n	4d56 <__aeabi_fsub+0x112>
    4d34:	2d00      	cmp	r5, #0
    4d36:	d100      	bne.n	4d3a <__aeabi_fsub+0xf6>
    4d38:	e0e7      	b.n	4f0a <__aeabi_fsub+0x2c6>
    4d3a:	2300      	movs	r3, #0
    4d3c:	e7c2      	b.n	4cc4 <__aeabi_fsub+0x80>
    4d3e:	2800      	cmp	r0, #0
    4d40:	d02e      	beq.n	4da0 <__aeabi_fsub+0x15c>
    4d42:	1e7a      	subs	r2, r7, #1
    4d44:	2f01      	cmp	r7, #1
    4d46:	d07f      	beq.n	4e48 <__aeabi_fsub+0x204>
    4d48:	2fff      	cmp	r7, #255	; 0xff
    4d4a:	d0bb      	beq.n	4cc4 <__aeabi_fsub+0x80>
    4d4c:	0017      	movs	r7, r2
    4d4e:	e7a8      	b.n	4ca2 <__aeabi_fsub+0x5e>
    4d50:	2dff      	cmp	r5, #255	; 0xff
    4d52:	d000      	beq.n	4d56 <__aeabi_fsub+0x112>
    4d54:	e083      	b.n	4e5e <__aeabi_fsub+0x21a>
    4d56:	27fe      	movs	r7, #254	; 0xfe
    4d58:	1c6a      	adds	r2, r5, #1
    4d5a:	4217      	tst	r7, r2
    4d5c:	d000      	beq.n	4d60 <__aeabi_fsub+0x11c>
    4d5e:	e08d      	b.n	4e7c <__aeabi_fsub+0x238>
    4d60:	2d00      	cmp	r5, #0
    4d62:	d000      	beq.n	4d66 <__aeabi_fsub+0x122>
    4d64:	e0ad      	b.n	4ec2 <__aeabi_fsub+0x27e>
    4d66:	2b00      	cmp	r3, #0
    4d68:	d100      	bne.n	4d6c <__aeabi_fsub+0x128>
    4d6a:	e0d2      	b.n	4f12 <__aeabi_fsub+0x2ce>
    4d6c:	2800      	cmp	r0, #0
    4d6e:	d000      	beq.n	4d72 <__aeabi_fsub+0x12e>
    4d70:	e0d1      	b.n	4f16 <__aeabi_fsub+0x2d2>
    4d72:	2500      	movs	r5, #0
    4d74:	08db      	lsrs	r3, r3, #3
    4d76:	025b      	lsls	r3, r3, #9
    4d78:	0a5b      	lsrs	r3, r3, #9
    4d7a:	b2e8      	uxtb	r0, r5
    4d7c:	e7cf      	b.n	4d1e <__aeabi_fsub+0xda>
    4d7e:	2120      	movs	r1, #32
    4d80:	1bc9      	subs	r1, r1, r7
    4d82:	0002      	movs	r2, r0
    4d84:	4088      	lsls	r0, r1
    4d86:	40fa      	lsrs	r2, r7
    4d88:	1e41      	subs	r1, r0, #1
    4d8a:	4188      	sbcs	r0, r1
    4d8c:	4310      	orrs	r0, r2
    4d8e:	181b      	adds	r3, r3, r0
    4d90:	015a      	lsls	r2, r3, #5
    4d92:	d5b4      	bpl.n	4cfe <__aeabi_fsub+0xba>
    4d94:	3501      	adds	r5, #1
    4d96:	2dff      	cmp	r5, #255	; 0xff
    4d98:	d15a      	bne.n	4e50 <__aeabi_fsub+0x20c>
    4d9a:	20ff      	movs	r0, #255	; 0xff
    4d9c:	2300      	movs	r3, #0
    4d9e:	e7be      	b.n	4d1e <__aeabi_fsub+0xda>
    4da0:	003d      	movs	r5, r7
    4da2:	08db      	lsrs	r3, r3, #3
    4da4:	2dff      	cmp	r5, #255	; 0xff
    4da6:	d100      	bne.n	4daa <__aeabi_fsub+0x166>
    4da8:	e78d      	b.n	4cc6 <__aeabi_fsub+0x82>
    4daa:	e7e4      	b.n	4d76 <__aeabi_fsub+0x132>
    4dac:	019e      	lsls	r6, r3, #6
    4dae:	09b6      	lsrs	r6, r6, #6
    4db0:	0030      	movs	r0, r6
    4db2:	f000 f987 	bl	50c4 <__clzsi2>
    4db6:	3805      	subs	r0, #5
    4db8:	4086      	lsls	r6, r0
    4dba:	4285      	cmp	r5, r0
    4dbc:	dc1f      	bgt.n	4dfe <__aeabi_fsub+0x1ba>
    4dbe:	2220      	movs	r2, #32
    4dc0:	1b40      	subs	r0, r0, r5
    4dc2:	3001      	adds	r0, #1
    4dc4:	1a12      	subs	r2, r2, r0
    4dc6:	0033      	movs	r3, r6
    4dc8:	4096      	lsls	r6, r2
    4dca:	40c3      	lsrs	r3, r0
    4dcc:	1e72      	subs	r2, r6, #1
    4dce:	4196      	sbcs	r6, r2
    4dd0:	2500      	movs	r5, #0
    4dd2:	4333      	orrs	r3, r6
    4dd4:	075a      	lsls	r2, r3, #29
    4dd6:	d195      	bne.n	4d04 <__aeabi_fsub+0xc0>
    4dd8:	e799      	b.n	4d0e <__aeabi_fsub+0xca>
    4dda:	27fe      	movs	r7, #254	; 0xfe
    4ddc:	1c6a      	adds	r2, r5, #1
    4dde:	4217      	tst	r7, r2
    4de0:	d111      	bne.n	4e06 <__aeabi_fsub+0x1c2>
    4de2:	2d00      	cmp	r5, #0
    4de4:	d15a      	bne.n	4e9c <__aeabi_fsub+0x258>
    4de6:	2b00      	cmp	r3, #0
    4de8:	d100      	bne.n	4dec <__aeabi_fsub+0x1a8>
    4dea:	e089      	b.n	4f00 <__aeabi_fsub+0x2bc>
    4dec:	2800      	cmp	r0, #0
    4dee:	d0c0      	beq.n	4d72 <__aeabi_fsub+0x12e>
    4df0:	1a1a      	subs	r2, r3, r0
    4df2:	0156      	lsls	r6, r2, #5
    4df4:	d400      	bmi.n	4df8 <__aeabi_fsub+0x1b4>
    4df6:	e096      	b.n	4f26 <__aeabi_fsub+0x2e2>
    4df8:	000c      	movs	r4, r1
    4dfa:	1ac3      	subs	r3, r0, r3
    4dfc:	e7ea      	b.n	4dd4 <__aeabi_fsub+0x190>
    4dfe:	4b58      	ldr	r3, [pc, #352]	; (4f60 <__aeabi_fsub+0x31c>)
    4e00:	1a2d      	subs	r5, r5, r0
    4e02:	4033      	ands	r3, r6
    4e04:	e7e6      	b.n	4dd4 <__aeabi_fsub+0x190>
    4e06:	1a1e      	subs	r6, r3, r0
    4e08:	0172      	lsls	r2, r6, #5
    4e0a:	d444      	bmi.n	4e96 <__aeabi_fsub+0x252>
    4e0c:	2e00      	cmp	r6, #0
    4e0e:	d1cf      	bne.n	4db0 <__aeabi_fsub+0x16c>
    4e10:	2400      	movs	r4, #0
    4e12:	2000      	movs	r0, #0
    4e14:	2300      	movs	r3, #0
    4e16:	e782      	b.n	4d1e <__aeabi_fsub+0xda>
    4e18:	25ff      	movs	r5, #255	; 0xff
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d038      	beq.n	4e90 <__aeabi_fsub+0x24c>
    4e1e:	1e6e      	subs	r6, r5, #1
    4e20:	2d01      	cmp	r5, #1
    4e22:	d06a      	beq.n	4efa <__aeabi_fsub+0x2b6>
    4e24:	2dff      	cmp	r5, #255	; 0xff
    4e26:	d100      	bne.n	4e2a <__aeabi_fsub+0x1e6>
    4e28:	e74a      	b.n	4cc0 <__aeabi_fsub+0x7c>
    4e2a:	2401      	movs	r4, #1
    4e2c:	2e1b      	cmp	r6, #27
    4e2e:	dc07      	bgt.n	4e40 <__aeabi_fsub+0x1fc>
    4e30:	2520      	movs	r5, #32
    4e32:	1bad      	subs	r5, r5, r6
    4e34:	001c      	movs	r4, r3
    4e36:	40ab      	lsls	r3, r5
    4e38:	40f4      	lsrs	r4, r6
    4e3a:	1e5d      	subs	r5, r3, #1
    4e3c:	41ab      	sbcs	r3, r5
    4e3e:	431c      	orrs	r4, r3
    4e40:	1b03      	subs	r3, r0, r4
    4e42:	0015      	movs	r5, r2
    4e44:	000c      	movs	r4, r1
    4e46:	e758      	b.n	4cfa <__aeabi_fsub+0xb6>
    4e48:	181b      	adds	r3, r3, r0
    4e4a:	2502      	movs	r5, #2
    4e4c:	015a      	lsls	r2, r3, #5
    4e4e:	d533      	bpl.n	4eb8 <__aeabi_fsub+0x274>
    4e50:	2201      	movs	r2, #1
    4e52:	4944      	ldr	r1, [pc, #272]	; (4f64 <__aeabi_fsub+0x320>)
    4e54:	401a      	ands	r2, r3
    4e56:	085b      	lsrs	r3, r3, #1
    4e58:	400b      	ands	r3, r1
    4e5a:	4313      	orrs	r3, r2
    4e5c:	e7ba      	b.n	4dd4 <__aeabi_fsub+0x190>
    4e5e:	2d00      	cmp	r5, #0
    4e60:	d131      	bne.n	4ec6 <__aeabi_fsub+0x282>
    4e62:	35ff      	adds	r5, #255	; 0xff
    4e64:	2b00      	cmp	r3, #0
    4e66:	d052      	beq.n	4f0e <__aeabi_fsub+0x2ca>
    4e68:	1e69      	subs	r1, r5, #1
    4e6a:	2d01      	cmp	r5, #1
    4e6c:	d020      	beq.n	4eb0 <__aeabi_fsub+0x26c>
    4e6e:	2dff      	cmp	r5, #255	; 0xff
    4e70:	d029      	beq.n	4ec6 <__aeabi_fsub+0x282>
    4e72:	291b      	cmp	r1, #27
    4e74:	dd36      	ble.n	4ee4 <__aeabi_fsub+0x2a0>
    4e76:	0015      	movs	r5, r2
    4e78:	1c43      	adds	r3, r0, #1
    4e7a:	e743      	b.n	4d04 <__aeabi_fsub+0xc0>
    4e7c:	2aff      	cmp	r2, #255	; 0xff
    4e7e:	d08c      	beq.n	4d9a <__aeabi_fsub+0x156>
    4e80:	181b      	adds	r3, r3, r0
    4e82:	085b      	lsrs	r3, r3, #1
    4e84:	0015      	movs	r5, r2
    4e86:	075a      	lsls	r2, r3, #29
    4e88:	d000      	beq.n	4e8c <__aeabi_fsub+0x248>
    4e8a:	e73b      	b.n	4d04 <__aeabi_fsub+0xc0>
    4e8c:	08db      	lsrs	r3, r3, #3
    4e8e:	e772      	b.n	4d76 <__aeabi_fsub+0x132>
    4e90:	000c      	movs	r4, r1
    4e92:	0003      	movs	r3, r0
    4e94:	e785      	b.n	4da2 <__aeabi_fsub+0x15e>
    4e96:	000c      	movs	r4, r1
    4e98:	1ac6      	subs	r6, r0, r3
    4e9a:	e789      	b.n	4db0 <__aeabi_fsub+0x16c>
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d114      	bne.n	4eca <__aeabi_fsub+0x286>
    4ea0:	2800      	cmp	r0, #0
    4ea2:	d000      	beq.n	4ea6 <__aeabi_fsub+0x262>
    4ea4:	e70c      	b.n	4cc0 <__aeabi_fsub+0x7c>
    4ea6:	2380      	movs	r3, #128	; 0x80
    4ea8:	2400      	movs	r4, #0
    4eaa:	20ff      	movs	r0, #255	; 0xff
    4eac:	03db      	lsls	r3, r3, #15
    4eae:	e736      	b.n	4d1e <__aeabi_fsub+0xda>
    4eb0:	181b      	adds	r3, r3, r0
    4eb2:	3501      	adds	r5, #1
    4eb4:	015a      	lsls	r2, r3, #5
    4eb6:	d4cb      	bmi.n	4e50 <__aeabi_fsub+0x20c>
    4eb8:	3d01      	subs	r5, #1
    4eba:	e720      	b.n	4cfe <__aeabi_fsub+0xba>
    4ebc:	2501      	movs	r5, #1
    4ebe:	1a1b      	subs	r3, r3, r0
    4ec0:	e71b      	b.n	4cfa <__aeabi_fsub+0xb6>
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d101      	bne.n	4eca <__aeabi_fsub+0x286>
    4ec6:	0003      	movs	r3, r0
    4ec8:	e6fc      	b.n	4cc4 <__aeabi_fsub+0x80>
    4eca:	2800      	cmp	r0, #0
    4ecc:	d100      	bne.n	4ed0 <__aeabi_fsub+0x28c>
    4ece:	e6f9      	b.n	4cc4 <__aeabi_fsub+0x80>
    4ed0:	2280      	movs	r2, #128	; 0x80
    4ed2:	03d2      	lsls	r2, r2, #15
    4ed4:	4296      	cmp	r6, r2
    4ed6:	d303      	bcc.n	4ee0 <__aeabi_fsub+0x29c>
    4ed8:	4594      	cmp	ip, r2
    4eda:	d201      	bcs.n	4ee0 <__aeabi_fsub+0x29c>
    4edc:	000c      	movs	r4, r1
    4ede:	0003      	movs	r3, r0
    4ee0:	08db      	lsrs	r3, r3, #3
    4ee2:	e6f2      	b.n	4cca <__aeabi_fsub+0x86>
    4ee4:	001d      	movs	r5, r3
    4ee6:	2620      	movs	r6, #32
    4ee8:	40cd      	lsrs	r5, r1
    4eea:	1a71      	subs	r1, r6, r1
    4eec:	408b      	lsls	r3, r1
    4eee:	1e59      	subs	r1, r3, #1
    4ef0:	418b      	sbcs	r3, r1
    4ef2:	432b      	orrs	r3, r5
    4ef4:	181b      	adds	r3, r3, r0
    4ef6:	0015      	movs	r5, r2
    4ef8:	e74a      	b.n	4d90 <__aeabi_fsub+0x14c>
    4efa:	000c      	movs	r4, r1
    4efc:	1ac3      	subs	r3, r0, r3
    4efe:	e6fc      	b.n	4cfa <__aeabi_fsub+0xb6>
    4f00:	2800      	cmp	r0, #0
    4f02:	d085      	beq.n	4e10 <__aeabi_fsub+0x1cc>
    4f04:	000c      	movs	r4, r1
    4f06:	0003      	movs	r3, r0
    4f08:	e733      	b.n	4d72 <__aeabi_fsub+0x12e>
    4f0a:	25ff      	movs	r5, #255	; 0xff
    4f0c:	e7aa      	b.n	4e64 <__aeabi_fsub+0x220>
    4f0e:	0003      	movs	r3, r0
    4f10:	e747      	b.n	4da2 <__aeabi_fsub+0x15e>
    4f12:	0003      	movs	r3, r0
    4f14:	e72d      	b.n	4d72 <__aeabi_fsub+0x12e>
    4f16:	181b      	adds	r3, r3, r0
    4f18:	015a      	lsls	r2, r3, #5
    4f1a:	d5b7      	bpl.n	4e8c <__aeabi_fsub+0x248>
    4f1c:	4a10      	ldr	r2, [pc, #64]	; (4f60 <__aeabi_fsub+0x31c>)
    4f1e:	3501      	adds	r5, #1
    4f20:	4013      	ands	r3, r2
    4f22:	08db      	lsrs	r3, r3, #3
    4f24:	e727      	b.n	4d76 <__aeabi_fsub+0x132>
    4f26:	1e13      	subs	r3, r2, #0
    4f28:	d100      	bne.n	4f2c <__aeabi_fsub+0x2e8>
    4f2a:	e771      	b.n	4e10 <__aeabi_fsub+0x1cc>
    4f2c:	08db      	lsrs	r3, r3, #3
    4f2e:	e722      	b.n	4d76 <__aeabi_fsub+0x132>
    4f30:	2f00      	cmp	r7, #0
    4f32:	d100      	bne.n	4f36 <__aeabi_fsub+0x2f2>
    4f34:	e751      	b.n	4dda <__aeabi_fsub+0x196>
    4f36:	1b56      	subs	r6, r2, r5
    4f38:	2d00      	cmp	r5, #0
    4f3a:	d101      	bne.n	4f40 <__aeabi_fsub+0x2fc>
    4f3c:	0035      	movs	r5, r6
    4f3e:	e76c      	b.n	4e1a <__aeabi_fsub+0x1d6>
    4f40:	2480      	movs	r4, #128	; 0x80
    4f42:	04e4      	lsls	r4, r4, #19
    4f44:	4323      	orrs	r3, r4
    4f46:	e770      	b.n	4e2a <__aeabi_fsub+0x1e6>
    4f48:	2f00      	cmp	r7, #0
    4f4a:	d100      	bne.n	4f4e <__aeabi_fsub+0x30a>
    4f4c:	e703      	b.n	4d56 <__aeabi_fsub+0x112>
    4f4e:	1b51      	subs	r1, r2, r5
    4f50:	2d00      	cmp	r5, #0
    4f52:	d101      	bne.n	4f58 <__aeabi_fsub+0x314>
    4f54:	000d      	movs	r5, r1
    4f56:	e785      	b.n	4e64 <__aeabi_fsub+0x220>
    4f58:	2580      	movs	r5, #128	; 0x80
    4f5a:	04ed      	lsls	r5, r5, #19
    4f5c:	432b      	orrs	r3, r5
    4f5e:	e788      	b.n	4e72 <__aeabi_fsub+0x22e>
    4f60:	fbffffff 	.word	0xfbffffff
    4f64:	7dffffff 	.word	0x7dffffff

00004f68 <__aeabi_f2iz>:
    4f68:	0241      	lsls	r1, r0, #9
    4f6a:	0042      	lsls	r2, r0, #1
    4f6c:	0fc3      	lsrs	r3, r0, #31
    4f6e:	0a49      	lsrs	r1, r1, #9
    4f70:	2000      	movs	r0, #0
    4f72:	0e12      	lsrs	r2, r2, #24
    4f74:	2a7e      	cmp	r2, #126	; 0x7e
    4f76:	dd03      	ble.n	4f80 <__aeabi_f2iz+0x18>
    4f78:	2a9d      	cmp	r2, #157	; 0x9d
    4f7a:	dd02      	ble.n	4f82 <__aeabi_f2iz+0x1a>
    4f7c:	4a09      	ldr	r2, [pc, #36]	; (4fa4 <__aeabi_f2iz+0x3c>)
    4f7e:	1898      	adds	r0, r3, r2
    4f80:	4770      	bx	lr
    4f82:	2080      	movs	r0, #128	; 0x80
    4f84:	0400      	lsls	r0, r0, #16
    4f86:	4301      	orrs	r1, r0
    4f88:	2a95      	cmp	r2, #149	; 0x95
    4f8a:	dc07      	bgt.n	4f9c <__aeabi_f2iz+0x34>
    4f8c:	2096      	movs	r0, #150	; 0x96
    4f8e:	1a82      	subs	r2, r0, r2
    4f90:	40d1      	lsrs	r1, r2
    4f92:	4248      	negs	r0, r1
    4f94:	2b00      	cmp	r3, #0
    4f96:	d1f3      	bne.n	4f80 <__aeabi_f2iz+0x18>
    4f98:	0008      	movs	r0, r1
    4f9a:	e7f1      	b.n	4f80 <__aeabi_f2iz+0x18>
    4f9c:	3a96      	subs	r2, #150	; 0x96
    4f9e:	4091      	lsls	r1, r2
    4fa0:	e7f7      	b.n	4f92 <__aeabi_f2iz+0x2a>
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	7fffffff 	.word	0x7fffffff

00004fa8 <__aeabi_i2f>:
    4fa8:	b570      	push	{r4, r5, r6, lr}
    4faa:	2800      	cmp	r0, #0
    4fac:	d013      	beq.n	4fd6 <__aeabi_i2f+0x2e>
    4fae:	17c3      	asrs	r3, r0, #31
    4fb0:	18c5      	adds	r5, r0, r3
    4fb2:	405d      	eors	r5, r3
    4fb4:	0fc4      	lsrs	r4, r0, #31
    4fb6:	0028      	movs	r0, r5
    4fb8:	f000 f884 	bl	50c4 <__clzsi2>
    4fbc:	239e      	movs	r3, #158	; 0x9e
    4fbe:	0001      	movs	r1, r0
    4fc0:	1a1b      	subs	r3, r3, r0
    4fc2:	2b96      	cmp	r3, #150	; 0x96
    4fc4:	dc0f      	bgt.n	4fe6 <__aeabi_i2f+0x3e>
    4fc6:	2808      	cmp	r0, #8
    4fc8:	d034      	beq.n	5034 <__aeabi_i2f+0x8c>
    4fca:	3908      	subs	r1, #8
    4fcc:	408d      	lsls	r5, r1
    4fce:	026d      	lsls	r5, r5, #9
    4fd0:	0a6d      	lsrs	r5, r5, #9
    4fd2:	b2d8      	uxtb	r0, r3
    4fd4:	e002      	b.n	4fdc <__aeabi_i2f+0x34>
    4fd6:	2400      	movs	r4, #0
    4fd8:	2000      	movs	r0, #0
    4fda:	2500      	movs	r5, #0
    4fdc:	05c0      	lsls	r0, r0, #23
    4fde:	4328      	orrs	r0, r5
    4fe0:	07e4      	lsls	r4, r4, #31
    4fe2:	4320      	orrs	r0, r4
    4fe4:	bd70      	pop	{r4, r5, r6, pc}
    4fe6:	2b99      	cmp	r3, #153	; 0x99
    4fe8:	dc16      	bgt.n	5018 <__aeabi_i2f+0x70>
    4fea:	1f42      	subs	r2, r0, #5
    4fec:	2805      	cmp	r0, #5
    4fee:	d000      	beq.n	4ff2 <__aeabi_i2f+0x4a>
    4ff0:	4095      	lsls	r5, r2
    4ff2:	002a      	movs	r2, r5
    4ff4:	4811      	ldr	r0, [pc, #68]	; (503c <__aeabi_i2f+0x94>)
    4ff6:	4002      	ands	r2, r0
    4ff8:	076e      	lsls	r6, r5, #29
    4ffa:	d009      	beq.n	5010 <__aeabi_i2f+0x68>
    4ffc:	260f      	movs	r6, #15
    4ffe:	4035      	ands	r5, r6
    5000:	2d04      	cmp	r5, #4
    5002:	d005      	beq.n	5010 <__aeabi_i2f+0x68>
    5004:	3204      	adds	r2, #4
    5006:	0155      	lsls	r5, r2, #5
    5008:	d502      	bpl.n	5010 <__aeabi_i2f+0x68>
    500a:	239f      	movs	r3, #159	; 0x9f
    500c:	4002      	ands	r2, r0
    500e:	1a5b      	subs	r3, r3, r1
    5010:	0192      	lsls	r2, r2, #6
    5012:	0a55      	lsrs	r5, r2, #9
    5014:	b2d8      	uxtb	r0, r3
    5016:	e7e1      	b.n	4fdc <__aeabi_i2f+0x34>
    5018:	2205      	movs	r2, #5
    501a:	1a12      	subs	r2, r2, r0
    501c:	0028      	movs	r0, r5
    501e:	40d0      	lsrs	r0, r2
    5020:	0002      	movs	r2, r0
    5022:	0008      	movs	r0, r1
    5024:	301b      	adds	r0, #27
    5026:	4085      	lsls	r5, r0
    5028:	0028      	movs	r0, r5
    502a:	1e45      	subs	r5, r0, #1
    502c:	41a8      	sbcs	r0, r5
    502e:	4302      	orrs	r2, r0
    5030:	0015      	movs	r5, r2
    5032:	e7de      	b.n	4ff2 <__aeabi_i2f+0x4a>
    5034:	026d      	lsls	r5, r5, #9
    5036:	2096      	movs	r0, #150	; 0x96
    5038:	0a6d      	lsrs	r5, r5, #9
    503a:	e7cf      	b.n	4fdc <__aeabi_i2f+0x34>
    503c:	fbffffff 	.word	0xfbffffff

00005040 <__aeabi_ui2f>:
    5040:	b570      	push	{r4, r5, r6, lr}
    5042:	1e04      	subs	r4, r0, #0
    5044:	d00e      	beq.n	5064 <__aeabi_ui2f+0x24>
    5046:	f000 f83d 	bl	50c4 <__clzsi2>
    504a:	239e      	movs	r3, #158	; 0x9e
    504c:	0001      	movs	r1, r0
    504e:	1a1b      	subs	r3, r3, r0
    5050:	2b96      	cmp	r3, #150	; 0x96
    5052:	dc0c      	bgt.n	506e <__aeabi_ui2f+0x2e>
    5054:	2808      	cmp	r0, #8
    5056:	d02f      	beq.n	50b8 <__aeabi_ui2f+0x78>
    5058:	3908      	subs	r1, #8
    505a:	408c      	lsls	r4, r1
    505c:	0264      	lsls	r4, r4, #9
    505e:	0a64      	lsrs	r4, r4, #9
    5060:	b2d8      	uxtb	r0, r3
    5062:	e001      	b.n	5068 <__aeabi_ui2f+0x28>
    5064:	2000      	movs	r0, #0
    5066:	2400      	movs	r4, #0
    5068:	05c0      	lsls	r0, r0, #23
    506a:	4320      	orrs	r0, r4
    506c:	bd70      	pop	{r4, r5, r6, pc}
    506e:	2b99      	cmp	r3, #153	; 0x99
    5070:	dc16      	bgt.n	50a0 <__aeabi_ui2f+0x60>
    5072:	1f42      	subs	r2, r0, #5
    5074:	2805      	cmp	r0, #5
    5076:	d000      	beq.n	507a <__aeabi_ui2f+0x3a>
    5078:	4094      	lsls	r4, r2
    507a:	0022      	movs	r2, r4
    507c:	4810      	ldr	r0, [pc, #64]	; (50c0 <__aeabi_ui2f+0x80>)
    507e:	4002      	ands	r2, r0
    5080:	0765      	lsls	r5, r4, #29
    5082:	d009      	beq.n	5098 <__aeabi_ui2f+0x58>
    5084:	250f      	movs	r5, #15
    5086:	402c      	ands	r4, r5
    5088:	2c04      	cmp	r4, #4
    508a:	d005      	beq.n	5098 <__aeabi_ui2f+0x58>
    508c:	3204      	adds	r2, #4
    508e:	0154      	lsls	r4, r2, #5
    5090:	d502      	bpl.n	5098 <__aeabi_ui2f+0x58>
    5092:	239f      	movs	r3, #159	; 0x9f
    5094:	4002      	ands	r2, r0
    5096:	1a5b      	subs	r3, r3, r1
    5098:	0192      	lsls	r2, r2, #6
    509a:	0a54      	lsrs	r4, r2, #9
    509c:	b2d8      	uxtb	r0, r3
    509e:	e7e3      	b.n	5068 <__aeabi_ui2f+0x28>
    50a0:	0002      	movs	r2, r0
    50a2:	0020      	movs	r0, r4
    50a4:	321b      	adds	r2, #27
    50a6:	4090      	lsls	r0, r2
    50a8:	0002      	movs	r2, r0
    50aa:	1e50      	subs	r0, r2, #1
    50ac:	4182      	sbcs	r2, r0
    50ae:	2005      	movs	r0, #5
    50b0:	1a40      	subs	r0, r0, r1
    50b2:	40c4      	lsrs	r4, r0
    50b4:	4314      	orrs	r4, r2
    50b6:	e7e0      	b.n	507a <__aeabi_ui2f+0x3a>
    50b8:	0264      	lsls	r4, r4, #9
    50ba:	2096      	movs	r0, #150	; 0x96
    50bc:	0a64      	lsrs	r4, r4, #9
    50be:	e7d3      	b.n	5068 <__aeabi_ui2f+0x28>
    50c0:	fbffffff 	.word	0xfbffffff

000050c4 <__clzsi2>:
    50c4:	211c      	movs	r1, #28
    50c6:	2301      	movs	r3, #1
    50c8:	041b      	lsls	r3, r3, #16
    50ca:	4298      	cmp	r0, r3
    50cc:	d301      	bcc.n	50d2 <__clzsi2+0xe>
    50ce:	0c00      	lsrs	r0, r0, #16
    50d0:	3910      	subs	r1, #16
    50d2:	0a1b      	lsrs	r3, r3, #8
    50d4:	4298      	cmp	r0, r3
    50d6:	d301      	bcc.n	50dc <__clzsi2+0x18>
    50d8:	0a00      	lsrs	r0, r0, #8
    50da:	3908      	subs	r1, #8
    50dc:	091b      	lsrs	r3, r3, #4
    50de:	4298      	cmp	r0, r3
    50e0:	d301      	bcc.n	50e6 <__clzsi2+0x22>
    50e2:	0900      	lsrs	r0, r0, #4
    50e4:	3904      	subs	r1, #4
    50e6:	a202      	add	r2, pc, #8	; (adr r2, 50f0 <__clzsi2+0x2c>)
    50e8:	5c10      	ldrb	r0, [r2, r0]
    50ea:	1840      	adds	r0, r0, r1
    50ec:	4770      	bx	lr
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	02020304 	.word	0x02020304
    50f4:	01010101 	.word	0x01010101
	...

00005100 <memset>:
    5100:	b5f0      	push	{r4, r5, r6, r7, lr}
    5102:	0005      	movs	r5, r0
    5104:	0783      	lsls	r3, r0, #30
    5106:	d049      	beq.n	519c <memset+0x9c>
    5108:	1e54      	subs	r4, r2, #1
    510a:	2a00      	cmp	r2, #0
    510c:	d045      	beq.n	519a <memset+0x9a>
    510e:	0003      	movs	r3, r0
    5110:	2603      	movs	r6, #3
    5112:	b2ca      	uxtb	r2, r1
    5114:	e002      	b.n	511c <memset+0x1c>
    5116:	3501      	adds	r5, #1
    5118:	3c01      	subs	r4, #1
    511a:	d33e      	bcc.n	519a <memset+0x9a>
    511c:	3301      	adds	r3, #1
    511e:	702a      	strb	r2, [r5, #0]
    5120:	4233      	tst	r3, r6
    5122:	d1f8      	bne.n	5116 <memset+0x16>
    5124:	2c03      	cmp	r4, #3
    5126:	d930      	bls.n	518a <memset+0x8a>
    5128:	22ff      	movs	r2, #255	; 0xff
    512a:	400a      	ands	r2, r1
    512c:	0215      	lsls	r5, r2, #8
    512e:	18ad      	adds	r5, r5, r2
    5130:	042a      	lsls	r2, r5, #16
    5132:	18ad      	adds	r5, r5, r2
    5134:	2c0f      	cmp	r4, #15
    5136:	d934      	bls.n	51a2 <memset+0xa2>
    5138:	0027      	movs	r7, r4
    513a:	3f10      	subs	r7, #16
    513c:	093f      	lsrs	r7, r7, #4
    513e:	013e      	lsls	r6, r7, #4
    5140:	46b4      	mov	ip, r6
    5142:	001e      	movs	r6, r3
    5144:	001a      	movs	r2, r3
    5146:	3610      	adds	r6, #16
    5148:	4466      	add	r6, ip
    514a:	6015      	str	r5, [r2, #0]
    514c:	6055      	str	r5, [r2, #4]
    514e:	6095      	str	r5, [r2, #8]
    5150:	60d5      	str	r5, [r2, #12]
    5152:	3210      	adds	r2, #16
    5154:	4296      	cmp	r6, r2
    5156:	d1f8      	bne.n	514a <memset+0x4a>
    5158:	3701      	adds	r7, #1
    515a:	013f      	lsls	r7, r7, #4
    515c:	19db      	adds	r3, r3, r7
    515e:	270f      	movs	r7, #15
    5160:	220c      	movs	r2, #12
    5162:	4027      	ands	r7, r4
    5164:	4022      	ands	r2, r4
    5166:	003c      	movs	r4, r7
    5168:	2a00      	cmp	r2, #0
    516a:	d00e      	beq.n	518a <memset+0x8a>
    516c:	1f3e      	subs	r6, r7, #4
    516e:	08b6      	lsrs	r6, r6, #2
    5170:	00b4      	lsls	r4, r6, #2
    5172:	46a4      	mov	ip, r4
    5174:	001a      	movs	r2, r3
    5176:	1d1c      	adds	r4, r3, #4
    5178:	4464      	add	r4, ip
    517a:	c220      	stmia	r2!, {r5}
    517c:	42a2      	cmp	r2, r4
    517e:	d1fc      	bne.n	517a <memset+0x7a>
    5180:	2403      	movs	r4, #3
    5182:	3601      	adds	r6, #1
    5184:	00b6      	lsls	r6, r6, #2
    5186:	199b      	adds	r3, r3, r6
    5188:	403c      	ands	r4, r7
    518a:	2c00      	cmp	r4, #0
    518c:	d005      	beq.n	519a <memset+0x9a>
    518e:	b2c9      	uxtb	r1, r1
    5190:	191c      	adds	r4, r3, r4
    5192:	7019      	strb	r1, [r3, #0]
    5194:	3301      	adds	r3, #1
    5196:	429c      	cmp	r4, r3
    5198:	d1fb      	bne.n	5192 <memset+0x92>
    519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    519c:	0003      	movs	r3, r0
    519e:	0014      	movs	r4, r2
    51a0:	e7c0      	b.n	5124 <memset+0x24>
    51a2:	0027      	movs	r7, r4
    51a4:	e7e2      	b.n	516c <memset+0x6c>
    51a6:	46c0      	nop			; (mov r8, r8)

000051a8 <__libc_init_array>:
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	4b0d      	ldr	r3, [pc, #52]	; (51e0 <__libc_init_array+0x38>)
    51ac:	4d0d      	ldr	r5, [pc, #52]	; (51e4 <__libc_init_array+0x3c>)
    51ae:	1b5e      	subs	r6, r3, r5
    51b0:	10b6      	asrs	r6, r6, #2
    51b2:	42ab      	cmp	r3, r5
    51b4:	d005      	beq.n	51c2 <__libc_init_array+0x1a>
    51b6:	2400      	movs	r4, #0
    51b8:	cd08      	ldmia	r5!, {r3}
    51ba:	3401      	adds	r4, #1
    51bc:	4798      	blx	r3
    51be:	42a6      	cmp	r6, r4
    51c0:	d8fa      	bhi.n	51b8 <__libc_init_array+0x10>
    51c2:	f000 fb0b 	bl	57dc <_init>
    51c6:	4b08      	ldr	r3, [pc, #32]	; (51e8 <__libc_init_array+0x40>)
    51c8:	4d08      	ldr	r5, [pc, #32]	; (51ec <__libc_init_array+0x44>)
    51ca:	1b5e      	subs	r6, r3, r5
    51cc:	10b6      	asrs	r6, r6, #2
    51ce:	42ab      	cmp	r3, r5
    51d0:	d005      	beq.n	51de <__libc_init_array+0x36>
    51d2:	2400      	movs	r4, #0
    51d4:	cd08      	ldmia	r5!, {r3}
    51d6:	3401      	adds	r4, #1
    51d8:	4798      	blx	r3
    51da:	42a6      	cmp	r6, r4
    51dc:	d8fa      	bhi.n	51d4 <__libc_init_array+0x2c>
    51de:	bd70      	pop	{r4, r5, r6, pc}
    51e0:	000057e8 	.word	0x000057e8
    51e4:	000057e8 	.word	0x000057e8
    51e8:	000057f0 	.word	0x000057f0
    51ec:	000057e8 	.word	0x000057e8

000051f0 <__retarget_lock_acquire_recursive>:
    51f0:	4770      	bx	lr
    51f2:	46c0      	nop			; (mov r8, r8)

000051f4 <__retarget_lock_release_recursive>:
    51f4:	4770      	bx	lr
    51f6:	46c0      	nop			; (mov r8, r8)

000051f8 <memcpy>:
    51f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51fa:	0005      	movs	r5, r0
    51fc:	2a0f      	cmp	r2, #15
    51fe:	d933      	bls.n	5268 <memcpy+0x70>
    5200:	2403      	movs	r4, #3
    5202:	0003      	movs	r3, r0
    5204:	0026      	movs	r6, r4
    5206:	430b      	orrs	r3, r1
    5208:	401e      	ands	r6, r3
    520a:	421c      	tst	r4, r3
    520c:	d137      	bne.n	527e <memcpy+0x86>
    520e:	0015      	movs	r5, r2
    5210:	3d10      	subs	r5, #16
    5212:	092d      	lsrs	r5, r5, #4
    5214:	0003      	movs	r3, r0
    5216:	000c      	movs	r4, r1
    5218:	46ac      	mov	ip, r5
    521a:	012f      	lsls	r7, r5, #4
    521c:	183f      	adds	r7, r7, r0
    521e:	6865      	ldr	r5, [r4, #4]
    5220:	605d      	str	r5, [r3, #4]
    5222:	68a5      	ldr	r5, [r4, #8]
    5224:	609d      	str	r5, [r3, #8]
    5226:	68e5      	ldr	r5, [r4, #12]
    5228:	60dd      	str	r5, [r3, #12]
    522a:	6825      	ldr	r5, [r4, #0]
    522c:	3410      	adds	r4, #16
    522e:	601d      	str	r5, [r3, #0]
    5230:	001d      	movs	r5, r3
    5232:	3310      	adds	r3, #16
    5234:	42bd      	cmp	r5, r7
    5236:	d1f2      	bne.n	521e <memcpy+0x26>
    5238:	4665      	mov	r5, ip
    523a:	230f      	movs	r3, #15
    523c:	240c      	movs	r4, #12
    523e:	3501      	adds	r5, #1
    5240:	012d      	lsls	r5, r5, #4
    5242:	1949      	adds	r1, r1, r5
    5244:	4013      	ands	r3, r2
    5246:	1945      	adds	r5, r0, r5
    5248:	4214      	tst	r4, r2
    524a:	d01a      	beq.n	5282 <memcpy+0x8a>
    524c:	598c      	ldr	r4, [r1, r6]
    524e:	51ac      	str	r4, [r5, r6]
    5250:	3604      	adds	r6, #4
    5252:	1b9c      	subs	r4, r3, r6
    5254:	2c03      	cmp	r4, #3
    5256:	d8f9      	bhi.n	524c <memcpy+0x54>
    5258:	3b04      	subs	r3, #4
    525a:	089b      	lsrs	r3, r3, #2
    525c:	3301      	adds	r3, #1
    525e:	009b      	lsls	r3, r3, #2
    5260:	18ed      	adds	r5, r5, r3
    5262:	18c9      	adds	r1, r1, r3
    5264:	2303      	movs	r3, #3
    5266:	401a      	ands	r2, r3
    5268:	1e56      	subs	r6, r2, #1
    526a:	2a00      	cmp	r2, #0
    526c:	d006      	beq.n	527c <memcpy+0x84>
    526e:	2300      	movs	r3, #0
    5270:	5ccc      	ldrb	r4, [r1, r3]
    5272:	001a      	movs	r2, r3
    5274:	54ec      	strb	r4, [r5, r3]
    5276:	3301      	adds	r3, #1
    5278:	4296      	cmp	r6, r2
    527a:	d1f9      	bne.n	5270 <memcpy+0x78>
    527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    527e:	1e56      	subs	r6, r2, #1
    5280:	e7f5      	b.n	526e <memcpy+0x76>
    5282:	001a      	movs	r2, r3
    5284:	e7f0      	b.n	5268 <memcpy+0x70>
    5286:	46c0      	nop			; (mov r8, r8)

00005288 <strlen>:
    5288:	b510      	push	{r4, lr}
    528a:	0783      	lsls	r3, r0, #30
    528c:	d00a      	beq.n	52a4 <strlen+0x1c>
    528e:	0003      	movs	r3, r0
    5290:	2103      	movs	r1, #3
    5292:	e002      	b.n	529a <strlen+0x12>
    5294:	3301      	adds	r3, #1
    5296:	420b      	tst	r3, r1
    5298:	d005      	beq.n	52a6 <strlen+0x1e>
    529a:	781a      	ldrb	r2, [r3, #0]
    529c:	2a00      	cmp	r2, #0
    529e:	d1f9      	bne.n	5294 <strlen+0xc>
    52a0:	1a18      	subs	r0, r3, r0
    52a2:	bd10      	pop	{r4, pc}
    52a4:	0003      	movs	r3, r0
    52a6:	6819      	ldr	r1, [r3, #0]
    52a8:	4a0c      	ldr	r2, [pc, #48]	; (52dc <strlen+0x54>)
    52aa:	4c0d      	ldr	r4, [pc, #52]	; (52e0 <strlen+0x58>)
    52ac:	188a      	adds	r2, r1, r2
    52ae:	438a      	bics	r2, r1
    52b0:	4222      	tst	r2, r4
    52b2:	d10f      	bne.n	52d4 <strlen+0x4c>
    52b4:	6859      	ldr	r1, [r3, #4]
    52b6:	4a09      	ldr	r2, [pc, #36]	; (52dc <strlen+0x54>)
    52b8:	3304      	adds	r3, #4
    52ba:	188a      	adds	r2, r1, r2
    52bc:	438a      	bics	r2, r1
    52be:	4222      	tst	r2, r4
    52c0:	d108      	bne.n	52d4 <strlen+0x4c>
    52c2:	6859      	ldr	r1, [r3, #4]
    52c4:	4a05      	ldr	r2, [pc, #20]	; (52dc <strlen+0x54>)
    52c6:	3304      	adds	r3, #4
    52c8:	188a      	adds	r2, r1, r2
    52ca:	438a      	bics	r2, r1
    52cc:	4222      	tst	r2, r4
    52ce:	d0f1      	beq.n	52b4 <strlen+0x2c>
    52d0:	e000      	b.n	52d4 <strlen+0x4c>
    52d2:	3301      	adds	r3, #1
    52d4:	781a      	ldrb	r2, [r3, #0]
    52d6:	2a00      	cmp	r2, #0
    52d8:	d1fb      	bne.n	52d2 <strlen+0x4a>
    52da:	e7e1      	b.n	52a0 <strlen+0x18>
    52dc:	fefefeff 	.word	0xfefefeff
    52e0:	80808080 	.word	0x80808080

000052e4 <register_fini>:
    52e4:	4b03      	ldr	r3, [pc, #12]	; (52f4 <register_fini+0x10>)
    52e6:	b510      	push	{r4, lr}
    52e8:	2b00      	cmp	r3, #0
    52ea:	d002      	beq.n	52f2 <register_fini+0xe>
    52ec:	4802      	ldr	r0, [pc, #8]	; (52f8 <register_fini+0x14>)
    52ee:	f000 f805 	bl	52fc <atexit>
    52f2:	bd10      	pop	{r4, pc}
    52f4:	00000000 	.word	0x00000000
    52f8:	0000530d 	.word	0x0000530d

000052fc <atexit>:
    52fc:	b510      	push	{r4, lr}
    52fe:	0001      	movs	r1, r0
    5300:	2300      	movs	r3, #0
    5302:	2200      	movs	r2, #0
    5304:	2000      	movs	r0, #0
    5306:	f000 f815 	bl	5334 <__register_exitproc>
    530a:	bd10      	pop	{r4, pc}

0000530c <__libc_fini_array>:
    530c:	b570      	push	{r4, r5, r6, lr}
    530e:	4c07      	ldr	r4, [pc, #28]	; (532c <__libc_fini_array+0x20>)
    5310:	4d07      	ldr	r5, [pc, #28]	; (5330 <__libc_fini_array+0x24>)
    5312:	1b64      	subs	r4, r4, r5
    5314:	10a4      	asrs	r4, r4, #2
    5316:	d005      	beq.n	5324 <__libc_fini_array+0x18>
    5318:	3c01      	subs	r4, #1
    531a:	00a3      	lsls	r3, r4, #2
    531c:	58eb      	ldr	r3, [r5, r3]
    531e:	4798      	blx	r3
    5320:	2c00      	cmp	r4, #0
    5322:	d1f9      	bne.n	5318 <__libc_fini_array+0xc>
    5324:	f000 fa64 	bl	57f0 <_fini>
    5328:	bd70      	pop	{r4, r5, r6, pc}
    532a:	46c0      	nop			; (mov r8, r8)
    532c:	00005800 	.word	0x00005800
    5330:	000057fc 	.word	0x000057fc

00005334 <__register_exitproc>:
    5334:	b5f0      	push	{r4, r5, r6, r7, lr}
    5336:	46d6      	mov	lr, sl
    5338:	464f      	mov	r7, r9
    533a:	4646      	mov	r6, r8
    533c:	4698      	mov	r8, r3
    533e:	4b22      	ldr	r3, [pc, #136]	; (53c8 <__register_exitproc+0x94>)
    5340:	b5c0      	push	{r6, r7, lr}
    5342:	0006      	movs	r6, r0
    5344:	6818      	ldr	r0, [r3, #0]
    5346:	4699      	mov	r9, r3
    5348:	000f      	movs	r7, r1
    534a:	4692      	mov	sl, r2
    534c:	f7ff ff50 	bl	51f0 <__retarget_lock_acquire_recursive>
    5350:	4b1e      	ldr	r3, [pc, #120]	; (53cc <__register_exitproc+0x98>)
    5352:	681d      	ldr	r5, [r3, #0]
    5354:	2d00      	cmp	r5, #0
    5356:	d02d      	beq.n	53b4 <__register_exitproc+0x80>
    5358:	686c      	ldr	r4, [r5, #4]
    535a:	2c1f      	cmp	r4, #31
    535c:	dc2d      	bgt.n	53ba <__register_exitproc+0x86>
    535e:	2e00      	cmp	r6, #0
    5360:	d10e      	bne.n	5380 <__register_exitproc+0x4c>
    5362:	1c63      	adds	r3, r4, #1
    5364:	606b      	str	r3, [r5, #4]
    5366:	464b      	mov	r3, r9
    5368:	3402      	adds	r4, #2
    536a:	00a4      	lsls	r4, r4, #2
    536c:	6818      	ldr	r0, [r3, #0]
    536e:	5167      	str	r7, [r4, r5]
    5370:	f7ff ff40 	bl	51f4 <__retarget_lock_release_recursive>
    5374:	2000      	movs	r0, #0
    5376:	bce0      	pop	{r5, r6, r7}
    5378:	46ba      	mov	sl, r7
    537a:	46b1      	mov	r9, r6
    537c:	46a8      	mov	r8, r5
    537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5380:	2288      	movs	r2, #136	; 0x88
    5382:	4651      	mov	r1, sl
    5384:	0028      	movs	r0, r5
    5386:	00a3      	lsls	r3, r4, #2
    5388:	18eb      	adds	r3, r5, r3
    538a:	5099      	str	r1, [r3, r2]
    538c:	3a87      	subs	r2, #135	; 0x87
    538e:	40a2      	lsls	r2, r4
    5390:	3089      	adds	r0, #137	; 0x89
    5392:	30ff      	adds	r0, #255	; 0xff
    5394:	6801      	ldr	r1, [r0, #0]
    5396:	4311      	orrs	r1, r2
    5398:	6001      	str	r1, [r0, #0]
    539a:	2184      	movs	r1, #132	; 0x84
    539c:	4640      	mov	r0, r8
    539e:	0049      	lsls	r1, r1, #1
    53a0:	5058      	str	r0, [r3, r1]
    53a2:	2e02      	cmp	r6, #2
    53a4:	d1dd      	bne.n	5362 <__register_exitproc+0x2e>
    53a6:	0029      	movs	r1, r5
    53a8:	318d      	adds	r1, #141	; 0x8d
    53aa:	31ff      	adds	r1, #255	; 0xff
    53ac:	680b      	ldr	r3, [r1, #0]
    53ae:	4313      	orrs	r3, r2
    53b0:	600b      	str	r3, [r1, #0]
    53b2:	e7d6      	b.n	5362 <__register_exitproc+0x2e>
    53b4:	4d06      	ldr	r5, [pc, #24]	; (53d0 <__register_exitproc+0x9c>)
    53b6:	601d      	str	r5, [r3, #0]
    53b8:	e7ce      	b.n	5358 <__register_exitproc+0x24>
    53ba:	464b      	mov	r3, r9
    53bc:	6818      	ldr	r0, [r3, #0]
    53be:	f7ff ff19 	bl	51f4 <__retarget_lock_release_recursive>
    53c2:	2001      	movs	r0, #1
    53c4:	4240      	negs	r0, r0
    53c6:	e7d6      	b.n	5376 <__register_exitproc+0x42>
    53c8:	2000009c 	.word	0x2000009c
    53cc:	200006c8 	.word	0x200006c8
    53d0:	200006cc 	.word	0x200006cc
    53d4:	41564e49 	.word	0x41564e49
    53d8:	0044494c 	.word	0x0044494c
    53dc:	20776152 	.word	0x20776152
    53e0:	69442058 	.word	0x69442058
    53e4:	74636572 	.word	0x74636572
    53e8:	206e6f69 	.word	0x206e6f69
    53ec:	65636341 	.word	0x65636341
    53f0:	6172656c 	.word	0x6172656c
    53f4:	6e6f6974 	.word	0x6e6f6974
    53f8:	00000000 	.word	0x00000000
    53fc:	20776152 	.word	0x20776152
    5400:	69442059 	.word	0x69442059
    5404:	74636572 	.word	0x74636572
    5408:	206e6f69 	.word	0x206e6f69
    540c:	65636341 	.word	0x65636341
    5410:	6172656c 	.word	0x6172656c
    5414:	6e6f6974 	.word	0x6e6f6974
    5418:	00000000 	.word	0x00000000
    541c:	20776152 	.word	0x20776152
    5420:	6944205a 	.word	0x6944205a
    5424:	74636572 	.word	0x74636572
    5428:	206e6f69 	.word	0x206e6f69
    542c:	65636341 	.word	0x65636341
    5430:	6172656c 	.word	0x6172656c
    5434:	6e6f6974 	.word	0x6e6f6974
    5438:	00000000 	.word	0x00000000
    543c:	20776152 	.word	0x20776152
    5440:	78412058 	.word	0x78412058
    5444:	41207369 	.word	0x41207369
    5448:	6c75676e 	.word	0x6c75676e
    544c:	56207261 	.word	0x56207261
    5450:	636f6c65 	.word	0x636f6c65
    5454:	00797469 	.word	0x00797469
    5458:	20776152 	.word	0x20776152
    545c:	78412059 	.word	0x78412059
    5460:	41207369 	.word	0x41207369
    5464:	6c75676e 	.word	0x6c75676e
    5468:	56207261 	.word	0x56207261
    546c:	636f6c65 	.word	0x636f6c65
    5470:	00797469 	.word	0x00797469
    5474:	20776152 	.word	0x20776152
    5478:	7841205a 	.word	0x7841205a
    547c:	41207369 	.word	0x41207369
    5480:	6c75676e 	.word	0x6c75676e
    5484:	56207261 	.word	0x56207261
    5488:	636f6c65 	.word	0x636f6c65
    548c:	00797469 	.word	0x00797469
    5490:	696c6143 	.word	0x696c6143
    5494:	74617262 	.word	0x74617262
    5498:	58206465 	.word	0x58206465
    549c:	72694420 	.word	0x72694420
    54a0:	69746365 	.word	0x69746365
    54a4:	41206e6f 	.word	0x41206e6f
    54a8:	6c656363 	.word	0x6c656363
    54ac:	74617265 	.word	0x74617265
    54b0:	006e6f69 	.word	0x006e6f69
    54b4:	696c6143 	.word	0x696c6143
    54b8:	74617262 	.word	0x74617262
    54bc:	59206465 	.word	0x59206465
    54c0:	72694420 	.word	0x72694420
    54c4:	69746365 	.word	0x69746365
    54c8:	41206e6f 	.word	0x41206e6f
    54cc:	6c656363 	.word	0x6c656363
    54d0:	74617265 	.word	0x74617265
    54d4:	006e6f69 	.word	0x006e6f69
    54d8:	696c6143 	.word	0x696c6143
    54dc:	74617262 	.word	0x74617262
    54e0:	5a206465 	.word	0x5a206465
    54e4:	72694420 	.word	0x72694420
    54e8:	69746365 	.word	0x69746365
    54ec:	41206e6f 	.word	0x41206e6f
    54f0:	6c656363 	.word	0x6c656363
    54f4:	74617265 	.word	0x74617265
    54f8:	006e6f69 	.word	0x006e6f69
    54fc:	696c6143 	.word	0x696c6143
    5500:	74617262 	.word	0x74617262
    5504:	58206465 	.word	0x58206465
    5508:	69784120 	.word	0x69784120
    550c:	6e412073 	.word	0x6e412073
    5510:	616c7567 	.word	0x616c7567
    5514:	65562072 	.word	0x65562072
    5518:	69636f6c 	.word	0x69636f6c
    551c:	00007974 	.word	0x00007974
    5520:	696c6143 	.word	0x696c6143
    5524:	74617262 	.word	0x74617262
    5528:	59206465 	.word	0x59206465
    552c:	69784120 	.word	0x69784120
    5530:	6e412073 	.word	0x6e412073
    5534:	616c7567 	.word	0x616c7567
    5538:	65562072 	.word	0x65562072
    553c:	69636f6c 	.word	0x69636f6c
    5540:	00007974 	.word	0x00007974
    5544:	696c6143 	.word	0x696c6143
    5548:	74617262 	.word	0x74617262
    554c:	5a206465 	.word	0x5a206465
    5550:	69784120 	.word	0x69784120
    5554:	6e412073 	.word	0x6e412073
    5558:	616c7567 	.word	0x616c7567
    555c:	65562072 	.word	0x65562072
    5560:	69636f6c 	.word	0x69636f6c
    5564:	00007974 	.word	0x00007974
    5568:	52504545 	.word	0x52504545
    556c:	4c204d4f 	.word	0x4c204d4f
    5570:	756f7961 	.word	0x756f7961
    5574:	61482074 	.word	0x61482074
    5578:	00006873 	.word	0x00006873
    557c:	65776f50 	.word	0x65776f50
    5580:	79432072 	.word	0x79432072
    5584:	73656c63 	.word	0x73656c63
    5588:	00000000 	.word	0x00000000
    558c:	61736944 	.word	0x61736944
    5590:	20656c62 	.word	0x20656c62
    5594:	7a7a7542 	.word	0x7a7a7542
    5598:	00007265 	.word	0x00007265
    559c:	61736944 	.word	0x61736944
    55a0:	20656c62 	.word	0x20656c62
    55a4:	0044454c 	.word	0x0044454c
    55a8:	61656c43 	.word	0x61656c43
    55ac:	6853206e 	.word	0x6853206e
    55b0:	6f647475 	.word	0x6f647475
    55b4:	00006e77 	.word	0x00006e77
    55b8:	40000000 	.word	0x40000000
    55bc:	00000001 	.word	0x00000001
    55c0:	00000be6 	.word	0x00000be6
    55c4:	00000bf2 	.word	0x00000bf2
    55c8:	00000c00 	.word	0x00000c00
    55cc:	00000c0e 	.word	0x00000c0e
    55d0:	00000c1c 	.word	0x00000c1c
    55d4:	00000c6a 	.word	0x00000c6a
    55d8:	00000c72 	.word	0x00000c72
    55dc:	00000c7c 	.word	0x00000c7c
    55e0:	00000c86 	.word	0x00000c86
    55e4:	00000c90 	.word	0x00000c90
    55e8:	00000cce 	.word	0x00000cce
    55ec:	00000cda 	.word	0x00000cda
    55f0:	00000ce8 	.word	0x00000ce8
    55f4:	00000cf6 	.word	0x00000cf6
    55f8:	00000d04 	.word	0x00000d04
    55fc:	00000d52 	.word	0x00000d52
    5600:	00000d5a 	.word	0x00000d5a
    5604:	00000d64 	.word	0x00000d64
    5608:	00000d6e 	.word	0x00000d6e
    560c:	00000d78 	.word	0x00000d78
    5610:	00000dde 	.word	0x00000dde
    5614:	00000db6 	.word	0x00000db6
    5618:	00000dc0 	.word	0x00000dc0
    561c:	00000dca 	.word	0x00000dca
    5620:	00000dd4 	.word	0x00000dd4

00005624 <uart1_descriptor>:
    5624:	02010302 00000002                       ........

0000562c <uart2_descriptor>:
    562c:	04030504 00000002                       ........

00005634 <uart3_descriptor>:
    5634:	0a090706 00000002                       ........

0000563c <uart4_descriptor>:
    563c:	0c0b0908 00000002 80000000 00000001     ................

0000564c <dma_spi_desc>:
    564c:	08070100                                 .....

00005651 <zero>:
    5651:	70000000 9400001d 7400001d 7800001d     ...p.......t...x
    5661:	7c00001d 8000001d 8400001d 8a00001d     ...|............
    5671:	d000001d e4000023 aa000023 e4000024     ....#...#...$...
    5681:	aa000023 f0000024 fc000023 aa000023     #...$...#...#...
    5691:	4c000024 60000024 aa000024 8a000024     $..L$..`$...$...
    56a1:	30000024 34333231 38373635 43424139     $..0123456789ABC
    56b1:	48474644 4d4c4b4a 5251504e 57565453     DFGHJKLMNPQRSTVW
    56c1:	005a5958 46000000 656c6e69 6c422079     XYZ....Finley Bl
    56d1:	656e6961 47000000 0032434e               aine...GNC2....

000056e0 <language_string>:
    56e0:	04090304                                ....

000056e4 <device_descriptor>:
    56e4:	02000112 400102ef 000e1209 02010200     .......@........
    56f4:	                                         ..

000056f6 <usb_num_endpoints>:
    56f6:	2e2e0003 2d2d2d2e 002e2e2e 308a0000     .....---.......0
    5706:	311c0000 312a0000 31380000 31460000     ...1..*1..81..F1
    5716:	31540000 30900000 00000000 00000000     ..T1...0........
    5726:	00000000 32f90000 00060000               .......2......

00005734 <time_ticks_us_mult>:
    5734:	00000030                                0...

00005738 <time_ticks_ms_mult>:
    5738:	0000bb80                                ....

0000573c <time_ticks_s_mult>:
    573c:	02dc6c00                                .l..

00005740 <CRC8_LUT_L>:
    5740:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

00005750 <CRC8_LUT_H>:
    5750:	90e07000 5727b7c7 1969f989 deae3e4e     .p....'W..i.N>..
    5760:	000047ca 000046fa 00004712 00004730     .G...F...G..0G..
    5770:	00004712 00004774 00004712 00004730     .G..tG...G..0G..
    5780:	000046fa 000046fa 00004774 00004730     .F...F..tG..0G..
    5790:	0000471a 0000471a 0000471a 0000477e     .G...G...G..~G..
    57a0:	000046fa 000046fa 00004712 00004808     .F...F...G...H..
    57b0:	00004712 00004774 00004712 00004808     .G..tG...G...H..
    57c0:	000046fa 000046fa 00004774 00004808     .F...F..tG...H..
    57d0:	0000471a 0000471a 0000471a              .G...G...G..

000057dc <_init>:
    57dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57de:	46c0      	nop			; (mov r8, r8)
    57e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57e2:	bc08      	pop	{r3}
    57e4:	469e      	mov	lr, r3
    57e6:	4770      	bx	lr

000057e8 <__init_array_start>:
    57e8:	000052e5 	.word	0x000052e5

000057ec <__frame_dummy_init_array_entry>:
    57ec:	0000012d                                -...

000057f0 <_fini>:
    57f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57f2:	46c0      	nop			; (mov r8, r8)
    57f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57f6:	bc08      	pop	{r3}
    57f8:	469e      	mov	lr, r3
    57fa:	4770      	bx	lr

000057fc <__do_global_dtors_aux_fini_array_entry>:
    57fc:	0101 0000                                   ....
