
output/GNC0200A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006434  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000100  20000000  00006434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008cc  20000100  00006540  00020100  2**4
                  ALLOC
  3 .stack        00002004  200009cc  00006e0c  00020100  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  5 .comment      0000004c  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001dd76  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00006952  00000000  00000000  0003deea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loclists 00007aca  00000000  00000000  0004483c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000ec0  00000000  00000000  0004c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 000010e1  00000000  00000000  0004d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  0000a4f6  00000000  00000000  0004e2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0001d425  00000000  00000000  0005879f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000b6282  00000000  00000000  00075bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  0000206c  00000000  00000000  0012be48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e5  00000000  00000000  0012deb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
    if (!get_address_from_id(type, id, &address, &size)) return false;
    memcpy(address, value, size);
    return true;
}

bool get_global(Global_Variable_IDs id, void* value) {
       0:	d0 29 00 20 55 01 00 00 51 01 00 00 51 01 00 00     .). U...Q...Q...
	...
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
    if (!get_address_from_id(type, id, &address, &size)) return false;
      2c:	51 01 00 00 00 00 00 00 00 00 00 00 51 01 00 00     Q...........Q...
    memcpy(value, address, size);
    return true;
      3c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
	// send adc read command
	spi_command(desc->sercom, BARO_ADC_READ);
	// receive data
	uint8_t data0 = spi_command(desc->sercom, 0);
      4c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	uint8_t data1 = spi_command(desc->sercom, 0);
      5c:	ad 48 00 00 51 01 00 00 e1 2a 00 00 fd 2a 00 00     .H..Q....*...*..
	uint8_t data2 = spi_command(desc->sercom, 0);
      6c:	51 01 00 00 51 01 00 00 19 2b 00 00 35 2b 00 00     Q...Q....+..5+..
      7c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
      8c:	a1 36 00 00 51 01 00 00 51 01 00 00 51 01 00 00     .6..Q...Q...Q...
      9c:	51 01 00 00 51 01 00 00 51 01 00 00 51 01 00 00     Q...Q...Q...Q...
	
	return ((uint32_t)data0 << 16) | ((uint32_t)data1 << 8) | ((uint32_t)data2);
}
      ac:	51 01 00 00 00 00 00 00 51 01 00 00                 Q.......Q...

000000b8 <deregister_tm_clones>:
	uint32_t nr_pages = (top / EEPROM_PAGE_SIZE) - (address / EEPROM_PAGE_SIZE) + 1;
	uint32_t data_index = 0;
	eeprom_write_enable(desc);
	for (int i = 0; i < nr_pages; ++i) {
		port_clear(desc->sspin.port, desc->sspin.pin);
		spi_command(desc->sercom, EEPROM_WRITE);
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <deregister_tm_clones+0x14>)
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <deregister_tm_clones+0x18>)
      bc:	b510      	push	{r4, lr}
      be:	4283      	cmp	r3, r0
      c0:	d003      	beq.n	ca <deregister_tm_clones+0x12>
		spi_command(desc->sercom, (uint8_t)(address >> 8));
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x1c>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <deregister_tm_clones+0x12>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	00006434 	.word	0x00006434
      d0:	00006434 	.word	0x00006434
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	4806      	ldr	r0, [pc, #24]	; (f4 <register_tm_clones+0x1c>)
      da:	4907      	ldr	r1, [pc, #28]	; (f8 <register_tm_clones+0x20>)
		spi_command(desc->sercom, (uint8_t)address);
      dc:	1a09      	subs	r1, r1, r0
      de:	108b      	asrs	r3, r1, #2
      e0:	0fc9      	lsrs	r1, r1, #31
      e2:	18c9      	adds	r1, r1, r3
      e4:	b510      	push	{r4, lr}
      e6:	1049      	asrs	r1, r1, #1
      e8:	d003      	beq.n	f2 <register_tm_clones+0x1a>
      ea:	4b04      	ldr	r3, [pc, #16]	; (fc <register_tm_clones+0x24>)
      ec:	2b00      	cmp	r3, #0
      ee:	d000      	beq.n	f2 <register_tm_clones+0x1a>
      f0:	4798      	blx	r3
      f2:	bd10      	pop	{r4, pc}
		for (int j = address % EEPROM_PAGE_SIZE; address <= top && j < EEPROM_PAGE_SIZE; ++j) {
      f4:	00006434 	.word	0x00006434
      f8:	00006434 	.word	0x00006434
		}
		port_set(desc->sspin.port, desc->sspin.pin);
		// wait until write cycle is done
		while (eeprom_read_status(desc) & EEPROM_RDY_MASK);
	}
	eeprom_write_disable(desc);
      fc:	00000000 	.word	0x00000000

00000100 <__do_global_dtors_aux>:
}
     100:	b510      	push	{r4, lr}
     102:	4c07      	ldr	r4, [pc, #28]	; (120 <__do_global_dtors_aux+0x20>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	2b00      	cmp	r3, #0
     108:	d109      	bne.n	11e <__do_global_dtors_aux+0x1e>
     10a:	f7ff ffd5 	bl	b8 <deregister_tm_clones>
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <__do_global_dtors_aux+0x24>)
     110:	2b00      	cmp	r3, #0
     112:	d002      	beq.n	11a <__do_global_dtors_aux+0x1a>
     114:	4804      	ldr	r0, [pc, #16]	; (128 <__do_global_dtors_aux+0x28>)
     116:	e000      	b.n	11a <__do_global_dtors_aux+0x1a>
     118:	bf00      	nop
     11a:	2301      	movs	r3, #1
     11c:	7023      	strb	r3, [r4, #0]
     11e:	bd10      	pop	{r4, pc}
     120:	20000100 	.word	0x20000100
     124:	00000000 	.word	0x00000000
			//// store data to write
			//imu_write_byte(imudesc, I2C_SLV0_DO, *(uint8_t*)(request->data));
			//// enable i2c and send byte
			//imu_write_byte(imudesc, I2C_SLV0_CTRL, 0x80 | 0x01);
			// wait
			busrequest->busy_until = time_read_ticks() + (uint32_t)(10000) * TIME_TICKS_US_MULT;
     128:	00006434 	.word	0x00006434

0000012c <frame_dummy>:
     12c:	4b05      	ldr	r3, [pc, #20]	; (144 <frame_dummy+0x18>)
     12e:	b510      	push	{r4, lr}
     130:	2b00      	cmp	r3, #0
     132:	d003      	beq.n	13c <frame_dummy+0x10>
     134:	4904      	ldr	r1, [pc, #16]	; (148 <frame_dummy+0x1c>)
     136:	4805      	ldr	r0, [pc, #20]	; (14c <frame_dummy+0x20>)
     138:	e000      	b.n	13c <frame_dummy+0x10>
     13a:	bf00      	nop
     13c:	f7ff ffcc 	bl	d8 <register_tm_clones>
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
			busrequest->busy = true;
     144:	00000000 	.word	0x00000000
			
			//rtos_delay_us(10000);
			//mag_write_byte(imudesc, request->address, *(uint8_t*)(request->data));
			//mag_write_byte(imudesc, MAG_CNTL2, 0x08);
			
			IMU_OFF_BUS();
     148:	20000104 	.word	0x20000104
     14c:	00006434 	.word	0x00006434

00000150 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     150:	e7fe      	b.n	150 <Dummy_Handler>
	...

00000154 <Reset_Handler>:
{
     154:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     156:	4b12      	ldr	r3, [pc, #72]	; (1a0 <Reset_Handler+0x4c>)
     158:	4a12      	ldr	r2, [pc, #72]	; (1a4 <Reset_Handler+0x50>)
     15a:	4293      	cmp	r3, r2
     15c:	d007      	beq.n	16e <Reset_Handler+0x1a>
        pDest = &_srelocate;
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <Reset_Handler+0x50>)
        pSrc = &_etext;
     160:	4a0f      	ldr	r2, [pc, #60]	; (1a0 <Reset_Handler+0x4c>)
     162:	e001      	b.n	168 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     164:	ca02      	ldmia	r2!, {r1}
     166:	c302      	stmia	r3!, {r1}
                for (; pDest < &_erelocate;) {
     168:	490f      	ldr	r1, [pc, #60]	; (1a8 <Reset_Handler+0x54>)
     16a:	428b      	cmp	r3, r1
     16c:	d3fa      	bcc.n	164 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     16e:	4b0f      	ldr	r3, [pc, #60]	; (1ac <Reset_Handler+0x58>)
     170:	e001      	b.n	176 <Reset_Handler+0x22>
                *pDest++ = 0;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	4a0e      	ldr	r2, [pc, #56]	; (1b0 <Reset_Handler+0x5c>)
     178:	4293      	cmp	r3, r2
     17a:	d3fa      	bcc.n	172 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x60>)
     17e:	22ff      	movs	r2, #255	; 0xff
     180:	4393      	bics	r3, r2
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x64>)
     184:	6093      	str	r3, [r2, #8]
        if (_on_reset) {
     186:	4b0d      	ldr	r3, [pc, #52]	; (1bc <Reset_Handler+0x68>)
     188:	2b00      	cmp	r3, #0
     18a:	d000      	beq.n	18e <Reset_Handler+0x3a>
                _on_reset();
     18c:	4798      	blx	r3
        __libc_init_array();
     18e:	4b0c      	ldr	r3, [pc, #48]	; (1c0 <Reset_Handler+0x6c>)
     190:	4798      	blx	r3
        if (_on_bootstrap) {
     192:	4b0c      	ldr	r3, [pc, #48]	; (1c4 <Reset_Handler+0x70>)
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <Reset_Handler+0x46>
                _on_bootstrap();
     198:	4798      	blx	r3
        rtos_main();
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <Reset_Handler+0x74>)
     19c:	4798      	blx	r3
        while (1);
     19e:	e7fe      	b.n	19e <Reset_Handler+0x4a>
     1a0:	00006434 	.word	0x00006434
     1a4:	20000000 	.word	0x20000000
     1a8:	20000100 	.word	0x20000100
     1ac:	20000100 	.word	0x20000100
     1b0:	200009cc 	.word	0x200009cc
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	00000000 	.word	0x00000000
     1c0:	00005af9 	.word	0x00005af9
     1c4:	00000000 	.word	0x00000000
     1c8:	0000362d 	.word	0x0000362d

000001cc <getGlobalHash>:
uint8_t rxframe[GNCLINK_FRAME_TOTAL_LENGTH];
uint8_t txframe[GNCLINK_FRAME_TOTAL_LENGTH];

extern void SOS();

bool getGlobalHash() {
     1cc:	b510      	push	{r4, lr}
    uint32_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     1ce:	4c06      	ldr	r4, [pc, #24]	; (1e8 <getGlobalHash+0x1c>)
     1d0:	0020      	movs	r0, r4
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <getGlobalHash+0x20>)
     1d4:	4798      	blx	r3
    *payload = __GLOBAL_HASH;
     1d6:	4b06      	ldr	r3, [pc, #24]	; (1f0 <getGlobalHash+0x24>)
     1d8:	6003      	str	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetGlobalHash, GNClink_PacketFlags_Response, 4)) return false;
     1da:	2304      	movs	r3, #4
     1dc:	2202      	movs	r2, #2
     1de:	2101      	movs	r1, #1
     1e0:	0020      	movs	r0, r4
     1e2:	4c04      	ldr	r4, [pc, #16]	; (1f4 <getGlobalHash+0x28>)
     1e4:	47a0      	blx	r4
    return true;
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	2000011c 	.word	0x2000011c
     1ec:	000049b5 	.word	0x000049b5
     1f0:	5006f37a 	.word	0x5006f37a
     1f4:	000049b9 	.word	0x000049b9

000001f8 <getValueList>:

bool getValueList() {
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46c6      	mov	lr, r8
     1fc:	b500      	push	{lr}
     1fe:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     200:	4d1a      	ldr	r5, [pc, #104]	; (26c <getValueList+0x74>)
     202:	0028      	movs	r0, r5
     204:	3040      	adds	r0, #64	; 0x40
     206:	4c1a      	ldr	r4, [pc, #104]	; (270 <getValueList+0x78>)
     208:	47a0      	blx	r4
     20a:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     20c:	0028      	movs	r0, r5
     20e:	47a0      	blx	r4
     210:	4680      	mov	r8, r0
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     212:	783e      	ldrb	r6, [r7, #0]
     214:	b2f6      	uxtb	r6, r6
    if (IDCount > (GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1) / 2) {
     216:	2e1d      	cmp	r6, #29
     218:	d825      	bhi.n	266 <getValueList+0x6e>
        // too many IDs, do something...
        return false;
    }

    int payloadIndex = 0;
    for (int index = 0; index < IDCount; ++index) {
     21a:	2400      	movs	r4, #0
    int payloadIndex = 0;
     21c:	2500      	movs	r5, #0
     21e:	e007      	b.n	230 <getValueList+0x38>
            // no more space, do something...
            return false;
        }

        // copy value to payload
        memcpy(&txpayload[payloadIndex], address, size);
     220:	4643      	mov	r3, r8
     222:	1958      	adds	r0, r3, r5
     224:	9900      	ldr	r1, [sp, #0]
     226:	4b13      	ldr	r3, [pc, #76]	; (274 <getValueList+0x7c>)
     228:	4798      	blx	r3
        payloadIndex += size;
     22a:	9b01      	ldr	r3, [sp, #4]
     22c:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     22e:	3401      	adds	r4, #1
     230:	42b4      	cmp	r4, r6
     232:	da11      	bge.n	258 <getValueList+0x60>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     234:	0063      	lsls	r3, r4, #1
     236:	18fb      	adds	r3, r7, r3
     238:	7858      	ldrb	r0, [r3, #1]
        if (!get_global_address_size(ID, &address, &size)) {
     23a:	aa01      	add	r2, sp, #4
     23c:	4669      	mov	r1, sp
     23e:	4b0e      	ldr	r3, [pc, #56]	; (278 <getValueList+0x80>)
     240:	4798      	blx	r3
     242:	2800      	cmp	r0, #0
     244:	d003      	beq.n	24e <getValueList+0x56>
        if (payloadIndex + size > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     246:	9a01      	ldr	r2, [sp, #4]
     248:	1953      	adds	r3, r2, r5
     24a:	2b3b      	cmp	r3, #59	; 0x3b
     24c:	d9e8      	bls.n	220 <getValueList+0x28>
            return false;
     24e:	2000      	movs	r0, #0
    }

    // construct response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
    return true;
}
     250:	b002      	add	sp, #8
     252:	bc80      	pop	{r7}
     254:	46b8      	mov	r8, r7
     256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueList, GNClink_PacketFlags_Response, payloadIndex)) return false;
     258:	4804      	ldr	r0, [pc, #16]	; (26c <getValueList+0x74>)
     25a:	002b      	movs	r3, r5
     25c:	2202      	movs	r2, #2
     25e:	2102      	movs	r1, #2
     260:	4c06      	ldr	r4, [pc, #24]	; (27c <getValueList+0x84>)
     262:	47a0      	blx	r4
     264:	e7f4      	b.n	250 <getValueList+0x58>
        return false;
     266:	2000      	movs	r0, #0
     268:	e7f2      	b.n	250 <getValueList+0x58>
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	2000011c 	.word	0x2000011c
     270:	000049b5 	.word	0x000049b5
     274:	00005b49 	.word	0x00005b49
     278:	0000079d 	.word	0x0000079d
     27c:	000049b9 	.word	0x000049b9

00000280 <setValueList>:

bool setValueList() {
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	46c6      	mov	lr, r8
     284:	b500      	push	{lr}
     286:	b082      	sub	sp, #8
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     288:	4d18      	ldr	r5, [pc, #96]	; (2ec <setValueList+0x6c>)
     28a:	0028      	movs	r0, r5
     28c:	3040      	adds	r0, #64	; 0x40
     28e:	4c18      	ldr	r4, [pc, #96]	; (2f0 <setValueList+0x70>)
     290:	47a0      	blx	r4
     292:	0007      	movs	r7, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     294:	0028      	movs	r0, r5
     296:	47a0      	blx	r4

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     298:	783b      	ldrb	r3, [r7, #0]
     29a:	b2db      	uxtb	r3, r3
     29c:	4698      	mov	r8, r3

    int payloadIndex = 1;
    for (int index = 0; index < IDCount; ++index) {
     29e:	2600      	movs	r6, #0
    int payloadIndex = 1;
     2a0:	2501      	movs	r5, #1
    for (int index = 0; index < IDCount; ++index) {
     2a2:	e008      	b.n	2b6 <setValueList+0x36>
            // Buffer overrun, do something...
            return false;
        }

        // copy value from payload to globals
        memcpy(address, &rxpayload[payloadIndex + 2], size);
     2a4:	3402      	adds	r4, #2
     2a6:	1939      	adds	r1, r7, r4
     2a8:	9800      	ldr	r0, [sp, #0]
     2aa:	4b12      	ldr	r3, [pc, #72]	; (2f4 <setValueList+0x74>)
     2ac:	4798      	blx	r3
        payloadIndex += size + 2;
     2ae:	9b01      	ldr	r3, [sp, #4]
     2b0:	3302      	adds	r3, #2
     2b2:	18ed      	adds	r5, r5, r3
    for (int index = 0; index < IDCount; ++index) {
     2b4:	3601      	adds	r6, #1
     2b6:	4546      	cmp	r6, r8
     2b8:	da11      	bge.n	2de <setValueList+0x5e>
        Global_Variable_IDs ID = (Global_Variable_IDs)*((uint16_t*)(rxpayload + payloadIndex));
     2ba:	002c      	movs	r4, r5
     2bc:	5d78      	ldrb	r0, [r7, r5]
        if (!get_global_address_size(ID, &address, &size)) {
     2be:	aa01      	add	r2, sp, #4
     2c0:	4669      	mov	r1, sp
     2c2:	4b0d      	ldr	r3, [pc, #52]	; (2f8 <setValueList+0x78>)
     2c4:	4798      	blx	r3
     2c6:	2800      	cmp	r0, #0
     2c8:	d004      	beq.n	2d4 <setValueList+0x54>
        if (payloadIndex + size + 2 > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) {
     2ca:	9a01      	ldr	r2, [sp, #4]
     2cc:	1953      	adds	r3, r2, r5
     2ce:	3302      	adds	r3, #2
     2d0:	2b3b      	cmp	r3, #59	; 0x3b
     2d2:	d9e7      	bls.n	2a4 <setValueList+0x24>
            return false;
     2d4:	2000      	movs	r0, #0
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SetValueList, GNClink_PacketFlags_Response, 0)) return false;
    return true;
}
     2d6:	b002      	add	sp, #8
     2d8:	bc80      	pop	{r7}
     2da:	46b8      	mov	r8, r7
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SetValueList, GNClink_PacketFlags_Response, 0)) return false;
     2de:	4803      	ldr	r0, [pc, #12]	; (2ec <setValueList+0x6c>)
     2e0:	2300      	movs	r3, #0
     2e2:	2202      	movs	r2, #2
     2e4:	2103      	movs	r1, #3
     2e6:	4c05      	ldr	r4, [pc, #20]	; (2fc <setValueList+0x7c>)
     2e8:	47a0      	blx	r4
     2ea:	e7f4      	b.n	2d6 <setValueList+0x56>
     2ec:	2000011c 	.word	0x2000011c
     2f0:	000049b5 	.word	0x000049b5
     2f4:	00005b49 	.word	0x00005b49
     2f8:	0000079d 	.word	0x0000079d
     2fc:	000049b9 	.word	0x000049b9

00000300 <loadValueList>:

bool loadValueList() {
     300:	b570      	push	{r4, r5, r6, lr}
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     302:	4e0f      	ldr	r6, [pc, #60]	; (340 <loadValueList+0x40>)
     304:	0030      	movs	r0, r6
     306:	3040      	adds	r0, #64	; 0x40
     308:	4c0e      	ldr	r4, [pc, #56]	; (344 <loadValueList+0x44>)
     30a:	47a0      	blx	r4
     30c:	0005      	movs	r5, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     30e:	0030      	movs	r0, r6
     310:	47a0      	blx	r4
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     312:	782e      	ldrb	r6, [r5, #0]
     314:	b2f6      	uxtb	r6, r6

    for (int index = 0; index < IDCount; ++index) {
     316:	2400      	movs	r4, #0
     318:	e000      	b.n	31c <loadValueList+0x1c>
     31a:	3401      	adds	r4, #1
     31c:	42b4      	cmp	r4, r6
     31e:	da07      	bge.n	330 <loadValueList+0x30>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     320:	0063      	lsls	r3, r4, #1
     322:	18eb      	adds	r3, r5, r3
     324:	7858      	ldrb	r0, [r3, #1]

        if (!load_global(ID)) {
     326:	4b08      	ldr	r3, [pc, #32]	; (348 <loadValueList+0x48>)
     328:	4798      	blx	r3
     32a:	2800      	cmp	r0, #0
     32c:	d1f5      	bne.n	31a <loadValueList+0x1a>
     32e:	e005      	b.n	33c <loadValueList+0x3c>
            return false;
        }
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_LoadValueList, GNClink_PacketFlags_Response, 0)) return false;
     330:	4803      	ldr	r0, [pc, #12]	; (340 <loadValueList+0x40>)
     332:	2300      	movs	r3, #0
     334:	2202      	movs	r2, #2
     336:	2105      	movs	r1, #5
     338:	4c04      	ldr	r4, [pc, #16]	; (34c <loadValueList+0x4c>)
     33a:	47a0      	blx	r4
    return true;
}
     33c:	bd70      	pop	{r4, r5, r6, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	2000011c 	.word	0x2000011c
     344:	000049b5 	.word	0x000049b5
     348:	000007d5 	.word	0x000007d5
     34c:	000049b9 	.word	0x000049b9

00000350 <saveValueList>:

bool saveValueList() {
     350:	b570      	push	{r4, r5, r6, lr}
    volatile uint8_t* rxpayload = GNClink_Get_Packet_Payload_Pointer(rxpacket); // no idea why this needs to be volatile???
     352:	4e0f      	ldr	r6, [pc, #60]	; (390 <saveValueList+0x40>)
     354:	0030      	movs	r0, r6
     356:	3040      	adds	r0, #64	; 0x40
     358:	4c0e      	ldr	r4, [pc, #56]	; (394 <saveValueList+0x44>)
     35a:	47a0      	blx	r4
     35c:	0005      	movs	r5, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     35e:	0030      	movs	r0, r6
     360:	47a0      	blx	r4
    uint16_t* idList = (uint16_t*)(rxpayload + 1);

    // get number of IDs in list
    int IDCount = (int)*rxpayload;
     362:	782e      	ldrb	r6, [r5, #0]
     364:	b2f6      	uxtb	r6, r6

    for (int index = 0; index < IDCount; ++index) {
     366:	2400      	movs	r4, #0
     368:	e000      	b.n	36c <saveValueList+0x1c>
     36a:	3401      	adds	r4, #1
     36c:	42b4      	cmp	r4, r6
     36e:	da07      	bge.n	380 <saveValueList+0x30>
        Global_Variable_IDs ID = (Global_Variable_IDs)idList[index];
     370:	0063      	lsls	r3, r4, #1
     372:	18eb      	adds	r3, r5, r3
     374:	7858      	ldrb	r0, [r3, #1]

        if (!save_global(ID)) {
     376:	4b08      	ldr	r3, [pc, #32]	; (398 <saveValueList+0x48>)
     378:	4798      	blx	r3
     37a:	2800      	cmp	r0, #0
     37c:	d1f5      	bne.n	36a <saveValueList+0x1a>
     37e:	e005      	b.n	38c <saveValueList+0x3c>
            return false;
        }
    }

    // construct empty response packet
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_SaveValueList, GNClink_PacketFlags_Response, 0)) return false;
     380:	4803      	ldr	r0, [pc, #12]	; (390 <saveValueList+0x40>)
     382:	2300      	movs	r3, #0
     384:	2202      	movs	r2, #2
     386:	2104      	movs	r1, #4
     388:	4c04      	ldr	r4, [pc, #16]	; (39c <saveValueList+0x4c>)
     38a:	47a0      	blx	r4
    return true;
}
     38c:	bd70      	pop	{r4, r5, r6, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	2000011c 	.word	0x2000011c
     394:	000049b5 	.word	0x000049b5
     398:	00000835 	.word	0x00000835
     39c:	000049b9 	.word	0x000049b9

000003a0 <getValueCount>:

bool getValueCount() {
     3a0:	b510      	push	{r4, lr}
    uint16_t* payload = (uint32_t*)GNClink_Get_Packet_Payload_Pointer(txpacket);
     3a2:	4c06      	ldr	r4, [pc, #24]	; (3bc <getValueCount+0x1c>)
     3a4:	0020      	movs	r0, r4
     3a6:	4b06      	ldr	r3, [pc, #24]	; (3c0 <getValueCount+0x20>)
     3a8:	4798      	blx	r3
    *payload = __GLOBAL_ID_END - __GLOBAL_ID_START;
     3aa:	2328      	movs	r3, #40	; 0x28
     3ac:	8003      	strh	r3, [r0, #0]
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueCount, GNClink_PacketFlags_Response, 2)) return false;
     3ae:	3b26      	subs	r3, #38	; 0x26
     3b0:	2202      	movs	r2, #2
     3b2:	2106      	movs	r1, #6
     3b4:	0020      	movs	r0, r4
     3b6:	4c03      	ldr	r4, [pc, #12]	; (3c4 <getValueCount+0x24>)
     3b8:	47a0      	blx	r4
    return true;
}
     3ba:	bd10      	pop	{r4, pc}
     3bc:	2000011c 	.word	0x2000011c
     3c0:	000049b5 	.word	0x000049b5
     3c4:	000049b9 	.word	0x000049b9

000003c8 <getValueName>:

bool getValueName() {
     3c8:	b570      	push	{r4, r5, r6, lr}
     3ca:	b082      	sub	sp, #8
    uint16_t* rxpayload = (uint16_t*)GNClink_Get_Packet_Payload_Pointer(rxpacket);
     3cc:	4e14      	ldr	r6, [pc, #80]	; (420 <getValueName+0x58>)
     3ce:	0030      	movs	r0, r6
     3d0:	3040      	adds	r0, #64	; 0x40
     3d2:	4d14      	ldr	r5, [pc, #80]	; (424 <getValueName+0x5c>)
     3d4:	47a8      	blx	r5
     3d6:	0004      	movs	r4, r0
    uint8_t* txpayload = GNClink_Get_Packet_Payload_Pointer(txpacket);
     3d8:	0030      	movs	r0, r6
     3da:	47a8      	blx	r5
     3dc:	0005      	movs	r5, r0

    // get variable ID
    uint16_t id = *rxpayload;
     3de:	8824      	ldrh	r4, [r4, #0]

    int length = 0;
     3e0:	2300      	movs	r3, #0
     3e2:	9301      	str	r3, [sp, #4]

    __Global_Variable_Types type;
    if (!get_global_type_from_id(id, &type)) return false;
     3e4:	b2e4      	uxtb	r4, r4
     3e6:	466b      	mov	r3, sp
     3e8:	1cd9      	adds	r1, r3, #3
     3ea:	0020      	movs	r0, r4
     3ec:	4b0e      	ldr	r3, [pc, #56]	; (428 <getValueName+0x60>)
     3ee:	4798      	blx	r3
     3f0:	2800      	cmp	r0, #0
     3f2:	d101      	bne.n	3f8 <getValueName+0x30>

    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;

    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
    return true;
}
     3f4:	b002      	add	sp, #8
     3f6:	bd70      	pop	{r4, r5, r6, pc}
    *txpayload = (uint8_t*)type;
     3f8:	466b      	mov	r3, sp
     3fa:	3303      	adds	r3, #3
     3fc:	781b      	ldrb	r3, [r3, #0]
     3fe:	702b      	strb	r3, [r5, #0]
    if (!get_global_name(id, txpayload + 1, &length, GNCLINK_PACKET_MAX_PAYLOAD_LENGTH - 1)) return false;
     400:	1c69      	adds	r1, r5, #1
     402:	233a      	movs	r3, #58	; 0x3a
     404:	aa01      	add	r2, sp, #4
     406:	0020      	movs	r0, r4
     408:	4c08      	ldr	r4, [pc, #32]	; (42c <getValueName+0x64>)
     40a:	47a0      	blx	r4
     40c:	2800      	cmp	r0, #0
     40e:	d0f1      	beq.n	3f4 <getValueName+0x2c>
    if (!GNClink_Construct_Packet(txpacket, GNClink_PacketType_GetValueName, GNClink_PacketFlags_Response, length + 1)) return false;
     410:	9b01      	ldr	r3, [sp, #4]
     412:	3301      	adds	r3, #1
     414:	4802      	ldr	r0, [pc, #8]	; (420 <getValueName+0x58>)
     416:	2202      	movs	r2, #2
     418:	2107      	movs	r1, #7
     41a:	4c05      	ldr	r4, [pc, #20]	; (430 <getValueName+0x68>)
     41c:	47a0      	blx	r4
     41e:	e7e9      	b.n	3f4 <getValueName+0x2c>
     420:	2000011c 	.word	0x2000011c
     424:	000049b5 	.word	0x000049b5
     428:	00000755 	.word	0x00000755
     42c:	00000895 	.word	0x00000895
     430:	000049b9 	.word	0x000049b9

00000434 <evaluatePacket>:

bool evaluatePacket() {
     434:	b510      	push	{r4, lr}
    // check packet
    if (!GNClink_Check_Packet(rxpacket)) {
     436:	481b      	ldr	r0, [pc, #108]	; (4a4 <evaluatePacket+0x70>)
     438:	4b1b      	ldr	r3, [pc, #108]	; (4a8 <evaluatePacket+0x74>)
     43a:	4798      	blx	r3
     43c:	1e04      	subs	r4, r0, #0
     43e:	d006      	beq.n	44e <evaluatePacket+0x1a>
    // reset_process(&bz);
    // bz_count = (int)(*GNClink_Get_Packet_Payload_Pointer(rxpacket));
    // dispatch_process(&bz);

    // check packet is not response packet
    GNClink_PacketFlags flags = GNClink_Get_Packet_Flags(rxpacket);
     440:	4818      	ldr	r0, [pc, #96]	; (4a4 <evaluatePacket+0x70>)
     442:	4b1a      	ldr	r3, [pc, #104]	; (4ac <evaluatePacket+0x78>)
     444:	4798      	blx	r3
    if (flags & GNClink_PacketFlags_Response) return false;
     446:	0780      	lsls	r0, r0, #30
     448:	d505      	bpl.n	456 <evaluatePacket+0x22>
     44a:	2400      	movs	r4, #0
     44c:	e001      	b.n	452 <evaluatePacket+0x1e>
        SOS();
     44e:	4b18      	ldr	r3, [pc, #96]	; (4b0 <evaluatePacket+0x7c>)
     450:	4798      	blx	r3
        default:
        return false;
    }

    return false;
}
     452:	0020      	movs	r0, r4
     454:	bd10      	pop	{r4, pc}
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     456:	4813      	ldr	r0, [pc, #76]	; (4a4 <evaluatePacket+0x70>)
     458:	4b16      	ldr	r3, [pc, #88]	; (4b4 <evaluatePacket+0x80>)
     45a:	4798      	blx	r3
     45c:	2807      	cmp	r0, #7
     45e:	d81f      	bhi.n	4a0 <evaluatePacket+0x6c>
     460:	0080      	lsls	r0, r0, #2
     462:	4b15      	ldr	r3, [pc, #84]	; (4b8 <evaluatePacket+0x84>)
     464:	581b      	ldr	r3, [r3, r0]
     466:	469f      	mov	pc, r3
        return getGlobalHash();
     468:	4b14      	ldr	r3, [pc, #80]	; (4bc <evaluatePacket+0x88>)
     46a:	4798      	blx	r3
     46c:	0004      	movs	r4, r0
     46e:	e7f0      	b.n	452 <evaluatePacket+0x1e>
        return getValueList();
     470:	4b13      	ldr	r3, [pc, #76]	; (4c0 <evaluatePacket+0x8c>)
     472:	4798      	blx	r3
     474:	0004      	movs	r4, r0
     476:	e7ec      	b.n	452 <evaluatePacket+0x1e>
        return setValueList();
     478:	4b12      	ldr	r3, [pc, #72]	; (4c4 <evaluatePacket+0x90>)
     47a:	4798      	blx	r3
     47c:	0004      	movs	r4, r0
     47e:	e7e8      	b.n	452 <evaluatePacket+0x1e>
        return loadValueList();
     480:	4b11      	ldr	r3, [pc, #68]	; (4c8 <evaluatePacket+0x94>)
     482:	4798      	blx	r3
     484:	0004      	movs	r4, r0
     486:	e7e4      	b.n	452 <evaluatePacket+0x1e>
        return saveValueList();
     488:	4b10      	ldr	r3, [pc, #64]	; (4cc <evaluatePacket+0x98>)
     48a:	4798      	blx	r3
     48c:	0004      	movs	r4, r0
     48e:	e7e0      	b.n	452 <evaluatePacket+0x1e>
        return getValueCount();
     490:	4b0f      	ldr	r3, [pc, #60]	; (4d0 <evaluatePacket+0x9c>)
     492:	4798      	blx	r3
     494:	0004      	movs	r4, r0
     496:	e7dc      	b.n	452 <evaluatePacket+0x1e>
        return getValueName();
     498:	4b0e      	ldr	r3, [pc, #56]	; (4d4 <evaluatePacket+0xa0>)
     49a:	4798      	blx	r3
     49c:	0004      	movs	r4, r0
     49e:	e7d8      	b.n	452 <evaluatePacket+0x1e>
    switch (GNClink_Get_Packet_Type(rxpacket)) {
     4a0:	2400      	movs	r4, #0
     4a2:	e7d6      	b.n	452 <evaluatePacket+0x1e>
     4a4:	2000015c 	.word	0x2000015c
     4a8:	000049e5 	.word	0x000049e5
     4ac:	00004a19 	.word	0x00004a19
     4b0:	00003609 	.word	0x00003609
     4b4:	00004a15 	.word	0x00004a15
     4b8:	00005d24 	.word	0x00005d24
     4bc:	000001cd 	.word	0x000001cd
     4c0:	000001f9 	.word	0x000001f9
     4c4:	00000281 	.word	0x00000281
     4c8:	00000301 	.word	0x00000301
     4cc:	00000351 	.word	0x00000351
     4d0:	000003a1 	.word	0x000003a1
     4d4:	000003c9 	.word	0x000003c9

000004d8 <get_packet>:

// returns false if resend is being requested
bool get_packet() {
     4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4da:	b083      	sub	sp, #12
    // set previous received packets to zero to avoid any propagation
    memset(rxpacket, 0, sizeof(rxpacket));
     4dc:	4834      	ldr	r0, [pc, #208]	; (5b0 <get_packet+0xd8>)
     4de:	2240      	movs	r2, #64	; 0x40
     4e0:	2100      	movs	r1, #0
     4e2:	4c34      	ldr	r4, [pc, #208]	; (5b4 <get_packet+0xdc>)
     4e4:	47a0      	blx	r4
    memset(rxframe, 0, sizeof(rxframe));
     4e6:	4834      	ldr	r0, [pc, #208]	; (5b8 <get_packet+0xe0>)
     4e8:	2214      	movs	r2, #20
     4ea:	2100      	movs	r1, #0
     4ec:	47a0      	blx	r4

    bool receivedFrames[GNCLINK_MAX_FRAMES_PER_PACKET];
    for (int i = 0; i < GNCLINK_MAX_FRAMES_PER_PACKET; ++i) receivedFrames[i] = false;
     4ee:	2300      	movs	r3, #0
     4f0:	e003      	b.n	4fa <get_packet+0x22>
     4f2:	aa01      	add	r2, sp, #4
     4f4:	2100      	movs	r1, #0
     4f6:	54d1      	strb	r1, [r2, r3]
     4f8:	3301      	adds	r3, #1
     4fa:	2b03      	cmp	r3, #3
     4fc:	ddf9      	ble.n	4f2 <get_packet+0x1a>
     4fe:	e02a      	b.n	556 <get_packet+0x7e>
            continue;
        }

        // check if frame is requesting resend
        if (GNClink_Frame_RequestResend(rxframe)) {
            return false;
     500:	2500      	movs	r5, #0
            // packet fully received
            else break;
        }
    }
    return true;
}
     502:	0028      	movs	r0, r5
     504:	b003      	add	sp, #12
     506:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     508:	3401      	adds	r4, #1
     50a:	482b      	ldr	r0, [pc, #172]	; (5b8 <get_packet+0xe0>)
     50c:	4b2b      	ldr	r3, [pc, #172]	; (5bc <get_packet+0xe4>)
     50e:	4798      	blx	r3
     510:	42a0      	cmp	r0, r4
     512:	dd07      	ble.n	524 <get_packet+0x4c>
                if (!receivedFrames[i]) payload->resendIndexes[resendCount++] = (uint8_t)i;
     514:	ab01      	add	r3, sp, #4
     516:	5d1b      	ldrb	r3, [r3, r4]
     518:	2b00      	cmp	r3, #0
     51a:	d1f5      	bne.n	508 <get_packet+0x30>
     51c:	19bb      	adds	r3, r7, r6
     51e:	705c      	strb	r4, [r3, #1]
     520:	3601      	adds	r6, #1
     522:	e7f1      	b.n	508 <get_packet+0x30>
            if (resendCount) {
     524:	2e00      	cmp	r6, #0
     526:	d0ec      	beq.n	502 <get_packet+0x2a>
                payload->resendCount = (uint8_t)resendCount;
     528:	703e      	strb	r6, [r7, #0]
                GNClink_Construct_RequestResendFrame(txframe);
     52a:	4d25      	ldr	r5, [pc, #148]	; (5c0 <get_packet+0xe8>)
     52c:	0028      	movs	r0, r5
     52e:	4b25      	ldr	r3, [pc, #148]	; (5c4 <get_packet+0xec>)
     530:	4798      	blx	r3
                led_on(); // only flash if resend is being performed
     532:	2480      	movs	r4, #128	; 0x80
     534:	03e4      	lsls	r4, r4, #15
     536:	0021      	movs	r1, r4
     538:	2001      	movs	r0, #1
     53a:	4b23      	ldr	r3, [pc, #140]	; (5c8 <get_packet+0xf0>)
     53c:	4798      	blx	r3
                serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     53e:	2214      	movs	r2, #20
     540:	0029      	movs	r1, r5
     542:	2000      	movs	r0, #0
     544:	4b21      	ldr	r3, [pc, #132]	; (5cc <get_packet+0xf4>)
     546:	4798      	blx	r3
                serial_write_wait_until_complete(PORT0);
     548:	2000      	movs	r0, #0
     54a:	4b21      	ldr	r3, [pc, #132]	; (5d0 <get_packet+0xf8>)
     54c:	4798      	blx	r3
                led_off();
     54e:	0021      	movs	r1, r4
     550:	2001      	movs	r0, #1
     552:	4b20      	ldr	r3, [pc, #128]	; (5d4 <get_packet+0xfc>)
     554:	4798      	blx	r3
        serial_read_start(PORT0, rxframe, GNCLINK_FRAME_TOTAL_LENGTH);
     556:	4c18      	ldr	r4, [pc, #96]	; (5b8 <get_packet+0xe0>)
     558:	2214      	movs	r2, #20
     55a:	0021      	movs	r1, r4
     55c:	2000      	movs	r0, #0
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <get_packet+0x100>)
     560:	4798      	blx	r3
        serial_read_wait_until_complete(PORT0); // Consider using _or_timeout in the future
     562:	2000      	movs	r0, #0
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <get_packet+0x104>)
     566:	4798      	blx	r3
        if (!GNClink_Check_Frame(rxframe)) {
     568:	0020      	movs	r0, r4
     56a:	4b1d      	ldr	r3, [pc, #116]	; (5e0 <get_packet+0x108>)
     56c:	4798      	blx	r3
     56e:	1e05      	subs	r5, r0, #0
     570:	d0f1      	beq.n	556 <get_packet+0x7e>
        if (GNClink_Frame_RequestResend(rxframe)) {
     572:	4811      	ldr	r0, [pc, #68]	; (5b8 <get_packet+0xe0>)
     574:	4b1b      	ldr	r3, [pc, #108]	; (5e4 <get_packet+0x10c>)
     576:	4798      	blx	r3
     578:	2800      	cmp	r0, #0
     57a:	d1c1      	bne.n	500 <get_packet+0x28>
        receivedFrames[GNClink_Get_Frame_Index(rxframe)] = true;
     57c:	4c0e      	ldr	r4, [pc, #56]	; (5b8 <get_packet+0xe0>)
     57e:	0020      	movs	r0, r4
     580:	4b0e      	ldr	r3, [pc, #56]	; (5bc <get_packet+0xe4>)
     582:	4798      	blx	r3
     584:	2301      	movs	r3, #1
     586:	aa01      	add	r2, sp, #4
     588:	5413      	strb	r3, [r2, r0]
        bool moreFrames = true;
     58a:	466a      	mov	r2, sp
     58c:	70d3      	strb	r3, [r2, #3]
        GNClink_Reconstruct_Packet_From_Frames(rxframe, rxpacket, &moreFrames);
     58e:	4908      	ldr	r1, [pc, #32]	; (5b0 <get_packet+0xd8>)
     590:	3203      	adds	r2, #3
     592:	0020      	movs	r0, r4
     594:	4b14      	ldr	r3, [pc, #80]	; (5e8 <get_packet+0x110>)
     596:	4798      	blx	r3
        if (!moreFrames) {
     598:	466b      	mov	r3, sp
     59a:	78db      	ldrb	r3, [r3, #3]
     59c:	2b00      	cmp	r3, #0
     59e:	d1da      	bne.n	556 <get_packet+0x7e>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(txframe);
     5a0:	4807      	ldr	r0, [pc, #28]	; (5c0 <get_packet+0xe8>)
     5a2:	4b12      	ldr	r3, [pc, #72]	; (5ec <get_packet+0x114>)
     5a4:	4798      	blx	r3
     5a6:	0007      	movs	r7, r0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     5a8:	2400      	movs	r4, #0
            int resendCount = 0;
     5aa:	2600      	movs	r6, #0
            for (int i = 0; i < GNClink_Get_Frame_Index(rxframe); ++i) {
     5ac:	e7ad      	b.n	50a <get_packet+0x32>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	2000015c 	.word	0x2000015c
     5b4:	00005a51 	.word	0x00005a51
     5b8:	2000019c 	.word	0x2000019c
     5bc:	00004adb 	.word	0x00004adb
     5c0:	200001b0 	.word	0x200001b0
     5c4:	00004ae1 	.word	0x00004ae1
     5c8:	000022d1 	.word	0x000022d1
     5cc:	00000edd 	.word	0x00000edd
     5d0:	00000f65 	.word	0x00000f65
     5d4:	000022e1 	.word	0x000022e1
     5d8:	00000fc5 	.word	0x00000fc5
     5dc:	0000104d 	.word	0x0000104d
     5e0:	00004aa5 	.word	0x00004aa5
     5e4:	00004ad1 	.word	0x00004ad1
     5e8:	00004b01 	.word	0x00004b01
     5ec:	00004a1d 	.word	0x00004a1d

000005f0 <send_packet>:

bool send_packet(bool resendFrames) {
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	b084      	sub	sp, #16
     5f4:	0005      	movs	r5, r0
    int count = 0;
    bool moreFrames = true;
     5f6:	230f      	movs	r3, #15
     5f8:	446b      	add	r3, sp
     5fa:	2201      	movs	r2, #1
     5fc:	701a      	strb	r2, [r3, #0]
    int count = 0;
     5fe:	2400      	movs	r4, #0
    while (moreFrames) {
     600:	e01a      	b.n	638 <send_packet+0x48>
        // check if frames are being resent
        if (resendFrames) {
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
            // break if all have been sent
            if (count == payload->resendCount) break;
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     602:	2202      	movs	r2, #2
     604:	e029      	b.n	65a <send_packet+0x6a>
        int frameIndex = count;
     606:	0023      	movs	r3, r4
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     608:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
        }

        // send frames
        GNClink_Get_Frame(txpacket, txframe, frameFlags, frameIndex, &moreFrames);
     60a:	491a      	ldr	r1, [pc, #104]	; (674 <send_packet+0x84>)
     60c:	481a      	ldr	r0, [pc, #104]	; (678 <send_packet+0x88>)
     60e:	260f      	movs	r6, #15
     610:	446e      	add	r6, sp
     612:	9600      	str	r6, [sp, #0]
     614:	4e19      	ldr	r6, [pc, #100]	; (67c <send_packet+0x8c>)
     616:	47b0      	blx	r6
        // send frame
#ifdef COMMS_TEST
        int random_value = rand() % 10;
        if (random_value != 0) {
#endif
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     618:	2d00      	cmp	r5, #0
     61a:	d121      	bne.n	660 <send_packet+0x70>
        serial_write_start(PORT0, txframe, GNCLINK_FRAME_TOTAL_LENGTH);
     61c:	4915      	ldr	r1, [pc, #84]	; (674 <send_packet+0x84>)
     61e:	2214      	movs	r2, #20
     620:	2000      	movs	r0, #0
     622:	4b17      	ldr	r3, [pc, #92]	; (680 <send_packet+0x90>)
     624:	4798      	blx	r3
        serial_write_wait_until_complete(PORT0);
     626:	2000      	movs	r0, #0
     628:	4b16      	ldr	r3, [pc, #88]	; (684 <send_packet+0x94>)
     62a:	4798      	blx	r3
        led_off();
     62c:	2180      	movs	r1, #128	; 0x80
     62e:	03c9      	lsls	r1, r1, #15
     630:	2001      	movs	r0, #1
     632:	4b15      	ldr	r3, [pc, #84]	; (688 <send_packet+0x98>)
     634:	4798      	blx	r3
#ifdef COMMS_TEST
        }
#endif

        ++count;
     636:	3401      	adds	r4, #1
    while (moreFrames) {
     638:	230f      	movs	r3, #15
     63a:	446b      	add	r3, sp
     63c:	781b      	ldrb	r3, [r3, #0]
     63e:	2b00      	cmp	r3, #0
     640:	d014      	beq.n	66c <send_packet+0x7c>
        if (resendFrames) {
     642:	2d00      	cmp	r5, #0
     644:	d0df      	beq.n	606 <send_packet+0x16>
            GNClink_FramePayload_RequestResend* payload = (GNClink_FramePayload_RequestResend*)GNClink_Get_Frame_Payload_Pointer(rxframe);
     646:	4811      	ldr	r0, [pc, #68]	; (68c <send_packet+0x9c>)
     648:	4b11      	ldr	r3, [pc, #68]	; (690 <send_packet+0xa0>)
     64a:	4798      	blx	r3
            if (count == payload->resendCount) break;
     64c:	7803      	ldrb	r3, [r0, #0]
     64e:	42a3      	cmp	r3, r4
     650:	d00c      	beq.n	66c <send_packet+0x7c>
            if (count == payload->resendCount - 1) frameFlags |= GNClink_FrameFlags_TransactionEnd;
     652:	3b01      	subs	r3, #1
     654:	42a3      	cmp	r3, r4
     656:	d0d4      	beq.n	602 <send_packet+0x12>
        GNClink_FrameFlags frameFlags = GNClink_FrameFlags_None;
     658:	2200      	movs	r2, #0
            frameIndex = payload->resendIndexes[count];
     65a:	1900      	adds	r0, r0, r4
     65c:	7843      	ldrb	r3, [r0, #1]
     65e:	e7d4      	b.n	60a <send_packet+0x1a>
        if (resendFrames) led_on(); // only flash LED if resend is being performed
     660:	2180      	movs	r1, #128	; 0x80
     662:	03c9      	lsls	r1, r1, #15
     664:	2001      	movs	r0, #1
     666:	4b0b      	ldr	r3, [pc, #44]	; (694 <send_packet+0xa4>)
     668:	4798      	blx	r3
     66a:	e7d7      	b.n	61c <send_packet+0x2c>
    }
    return true;
}
     66c:	2001      	movs	r0, #1
     66e:	b004      	add	sp, #16
     670:	bd70      	pop	{r4, r5, r6, pc}
     672:	46c0      	nop			; (mov r8, r8)
     674:	200001b0 	.word	0x200001b0
     678:	2000011c 	.word	0x2000011c
     67c:	00004a21 	.word	0x00004a21
     680:	00000edd 	.word	0x00000edd
     684:	00000f65 	.word	0x00000f65
     688:	000022e1 	.word	0x000022e1
     68c:	2000019c 	.word	0x2000019c
     690:	00004a1d 	.word	0x00004a1d
     694:	000022d1 	.word	0x000022d1

00000698 <comms_loop>:

bool comms_loop() {
     698:	b510      	push	{r4, lr}
    bool run = true;
    while (run) {
     69a:	e002      	b.n	6a2 <comms_loop+0xa>
        // get packet, resend if required
        while (!get_packet()) {
            send_packet(true);
     69c:	2001      	movs	r0, #1
     69e:	4b07      	ldr	r3, [pc, #28]	; (6bc <comms_loop+0x24>)
     6a0:	4798      	blx	r3
        while (!get_packet()) {
     6a2:	4b07      	ldr	r3, [pc, #28]	; (6c0 <comms_loop+0x28>)
     6a4:	4798      	blx	r3
     6a6:	2800      	cmp	r0, #0
     6a8:	d0f8      	beq.n	69c <comms_loop+0x4>
        }

        if (evaluatePacket()) {
     6aa:	4b06      	ldr	r3, [pc, #24]	; (6c4 <comms_loop+0x2c>)
     6ac:	4798      	blx	r3
     6ae:	2800      	cmp	r0, #0
     6b0:	d0f7      	beq.n	6a2 <comms_loop+0xa>
            send_packet(false);
     6b2:	2000      	movs	r0, #0
     6b4:	4b01      	ldr	r3, [pc, #4]	; (6bc <comms_loop+0x24>)
     6b6:	4798      	blx	r3
     6b8:	e7f3      	b.n	6a2 <comms_loop+0xa>
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	000005f1 	.word	0x000005f1
     6c0:	000004d9 	.word	0x000004d9
     6c4:	00000435 	.word	0x00000435

000006c8 <get_address_from_id>:
    switch (type) {
     6c8:	2808      	cmp	r0, #8
     6ca:	d02b      	beq.n	724 <get_address_from_id+0x5c>
     6cc:	d810      	bhi.n	6f0 <get_address_from_id+0x28>
     6ce:	2803      	cmp	r0, #3
     6d0:	d01c      	beq.n	70c <get_address_from_id+0x44>
     6d2:	2804      	cmp	r0, #4
     6d4:	d133      	bne.n	73e <get_address_from_id+0x76>
        if (id < __GLOBAL_U32_ID_START || id >= __GLOBAL_U32_ID_END) return false;
     6d6:	0008      	movs	r0, r1
     6d8:	380e      	subs	r0, #14
     6da:	b2c0      	uxtb	r0, r0
     6dc:	2801      	cmp	r0, #1
     6de:	d82e      	bhi.n	73e <get_address_from_id+0x76>
        *size = 4;
     6e0:	2004      	movs	r0, #4
     6e2:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U32_ID_START;
     6e4:	390e      	subs	r1, #14
        *address = &(globals.__GLOBAL_U32_START_VARIABLE) + index;
     6e6:	4b17      	ldr	r3, [pc, #92]	; (744 <get_address_from_id+0x7c>)
     6e8:	0089      	lsls	r1, r1, #2
     6ea:	185b      	adds	r3, r3, r1
     6ec:	6013      	str	r3, [r2, #0]
        break;
     6ee:	e027      	b.n	740 <get_address_from_id+0x78>
    switch (type) {
     6f0:	280b      	cmp	r0, #11
     6f2:	d124      	bne.n	73e <get_address_from_id+0x76>
        if (id < __GLOBAL_BOOL_ID_START || id >= __GLOBAL_BOOL_ID_END) return false;
     6f4:	0008      	movs	r0, r1
     6f6:	3820      	subs	r0, #32
     6f8:	b2c0      	uxtb	r0, r0
     6fa:	2808      	cmp	r0, #8
     6fc:	d81f      	bhi.n	73e <get_address_from_id+0x76>
        *size = 1;
     6fe:	2001      	movs	r0, #1
     700:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_BOOL_ID_START;
     702:	3920      	subs	r1, #32
        *address = &(globals.__GLOBAL_BOOL_START_VARIABLE) + index;
     704:	4b10      	ldr	r3, [pc, #64]	; (748 <get_address_from_id+0x80>)
     706:	185b      	adds	r3, r3, r1
     708:	6013      	str	r3, [r2, #0]
}
     70a:	e019      	b.n	740 <get_address_from_id+0x78>
        if (id < __GLOBAL_I32_ID_START || id >= __GLOBAL_I32_ID_END) return false;
     70c:	1e48      	subs	r0, r1, #1
     70e:	b2c0      	uxtb	r0, r0
     710:	280c      	cmp	r0, #12
     712:	d814      	bhi.n	73e <get_address_from_id+0x76>
        *size = 4;
     714:	2004      	movs	r0, #4
     716:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_I32_ID_START;
     718:	3901      	subs	r1, #1
        *address = &(globals.__GLOBAL_I32_START_VARIABLE) + index;
     71a:	4b0c      	ldr	r3, [pc, #48]	; (74c <get_address_from_id+0x84>)
     71c:	0089      	lsls	r1, r1, #2
     71e:	185b      	adds	r3, r3, r1
     720:	6013      	str	r3, [r2, #0]
        break;
     722:	e00d      	b.n	740 <get_address_from_id+0x78>
        if (id < __GLOBAL_U16_ID_START || id >= __GLOBAL_U16_ID_END) return false;
     724:	0008      	movs	r0, r1
     726:	3810      	subs	r0, #16
     728:	b2c0      	uxtb	r0, r0
     72a:	280f      	cmp	r0, #15
     72c:	d807      	bhi.n	73e <get_address_from_id+0x76>
        *size = 2;
     72e:	2002      	movs	r0, #2
     730:	6018      	str	r0, [r3, #0]
        index = id - __GLOBAL_U16_ID_START;
     732:	3910      	subs	r1, #16
        *address = &(globals.__GLOBAL_U16_START_VARIABLE) + index;
     734:	4b06      	ldr	r3, [pc, #24]	; (750 <get_address_from_id+0x88>)
     736:	0049      	lsls	r1, r1, #1
     738:	185b      	adds	r3, r3, r1
     73a:	6013      	str	r3, [r2, #0]
        break;
     73c:	e000      	b.n	740 <get_address_from_id+0x78>
}
     73e:	2000      	movs	r0, #0
     740:	4770      	bx	lr
     742:	46c0      	nop			; (mov r8, r8)
     744:	200001fc 	.word	0x200001fc
     748:	20000224 	.word	0x20000224
     74c:	200001c8 	.word	0x200001c8
     750:	20000204 	.word	0x20000204

00000754 <get_global_type_from_id>:
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     754:	1e43      	subs	r3, r0, #1
     756:	b2db      	uxtb	r3, r3
     758:	2b27      	cmp	r3, #39	; 0x27
     75a:	d81d      	bhi.n	798 <get_global_type_from_id+0x44>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     75c:	2800      	cmp	r0, #0
     75e:	d00b      	beq.n	778 <get_global_type_from_id+0x24>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     760:	280d      	cmp	r0, #13
     762:	d90d      	bls.n	780 <get_global_type_from_id+0x2c>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     764:	280f      	cmp	r0, #15
     766:	d90f      	bls.n	788 <get_global_type_from_id+0x34>
    if (id - __GLOBAL_U16_ID_END < 0) {*type = __U16; return true;}
     768:	281f      	cmp	r0, #31
     76a:	d911      	bls.n	790 <get_global_type_from_id+0x3c>
    if (id - __GLOBAL_BOOL_ID_END < 0) {*type = __BOOL; return true;}
     76c:	2828      	cmp	r0, #40	; 0x28
     76e:	d814      	bhi.n	79a <get_global_type_from_id+0x46>
     770:	230b      	movs	r3, #11
     772:	700b      	strb	r3, [r1, #0]
     774:	2001      	movs	r0, #1
     776:	e010      	b.n	79a <get_global_type_from_id+0x46>
    if (id - __GLOBAL_U64_ID_END < 0) {*type = __U64; return true;}
     778:	2301      	movs	r3, #1
     77a:	700b      	strb	r3, [r1, #0]
     77c:	3001      	adds	r0, #1
     77e:	e00c      	b.n	79a <get_global_type_from_id+0x46>
    if (id - __GLOBAL_I32_ID_END < 0) {*type = __I32; return true;}
     780:	2303      	movs	r3, #3
     782:	700b      	strb	r3, [r1, #0]
     784:	2001      	movs	r0, #1
     786:	e008      	b.n	79a <get_global_type_from_id+0x46>
    if (id - __GLOBAL_U32_ID_END < 0) {*type = __U32; return true;}
     788:	2304      	movs	r3, #4
     78a:	700b      	strb	r3, [r1, #0]
     78c:	2001      	movs	r0, #1
     78e:	e004      	b.n	79a <get_global_type_from_id+0x46>
    if (id - __GLOBAL_U16_ID_END < 0) {*type = __U16; return true;}
     790:	2308      	movs	r3, #8
     792:	700b      	strb	r3, [r1, #0]
     794:	2001      	movs	r0, #1
     796:	e000      	b.n	79a <get_global_type_from_id+0x46>
    if (id - __GLOBAL_ID_START < 0 || id >= __GLOBAL_ID_END) return false;
     798:	2000      	movs	r0, #0
}
     79a:	4770      	bx	lr

0000079c <get_global_address_size>:
bool get_global_address_size(Global_Variable_IDs id, void** address, int* size) {
     79c:	b570      	push	{r4, r5, r6, lr}
     79e:	b082      	sub	sp, #8
     7a0:	0004      	movs	r4, r0
     7a2:	000d      	movs	r5, r1
     7a4:	0016      	movs	r6, r2
    if (!get_global_type_from_id(id, &type)) return false;
     7a6:	466b      	mov	r3, sp
     7a8:	1dd9      	adds	r1, r3, #7
     7aa:	4b08      	ldr	r3, [pc, #32]	; (7cc <get_global_address_size+0x30>)
     7ac:	4798      	blx	r3
     7ae:	2800      	cmp	r0, #0
     7b0:	d102      	bne.n	7b8 <get_global_address_size+0x1c>
}
     7b2:	2000      	movs	r0, #0
     7b4:	b002      	add	sp, #8
     7b6:	bd70      	pop	{r4, r5, r6, pc}
    if (!get_address_from_id(type, id, address, size)) return false;
     7b8:	466b      	mov	r3, sp
     7ba:	79d8      	ldrb	r0, [r3, #7]
     7bc:	0033      	movs	r3, r6
     7be:	002a      	movs	r2, r5
     7c0:	0021      	movs	r1, r4
     7c2:	4c03      	ldr	r4, [pc, #12]	; (7d0 <get_global_address_size+0x34>)
     7c4:	47a0      	blx	r4
     7c6:	2800      	cmp	r0, #0
     7c8:	d1f4      	bne.n	7b4 <get_global_address_size+0x18>
     7ca:	e7f2      	b.n	7b2 <get_global_address_size+0x16>
     7cc:	00000755 	.word	0x00000755
     7d0:	000006c9 	.word	0x000006c9

000007d4 <load_global>:
}

bool load_global(Global_Variable_IDs id) {
     7d4:	b530      	push	{r4, r5, lr}
     7d6:	b08f      	sub	sp, #60	; 0x3c
     7d8:	0005      	movs	r5, r0
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
     7da:	2137      	movs	r1, #55	; 0x37
     7dc:	4469      	add	r1, sp
     7de:	4b10      	ldr	r3, [pc, #64]	; (820 <load_global+0x4c>)
     7e0:	4798      	blx	r3
     7e2:	1e04      	subs	r4, r0, #0
     7e4:	d102      	bne.n	7ec <load_global+0x18>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
    EEPROM_Request request;
    eeprom_read_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}
     7e6:	0020      	movs	r0, r4
     7e8:	b00f      	add	sp, #60	; 0x3c
     7ea:	bd30      	pop	{r4, r5, pc}
    if (!get_address_from_id(type, id, &address, &size)) return false;
     7ec:	2337      	movs	r3, #55	; 0x37
     7ee:	446b      	add	r3, sp
     7f0:	7818      	ldrb	r0, [r3, #0]
     7f2:	ab0b      	add	r3, sp, #44	; 0x2c
     7f4:	aa0c      	add	r2, sp, #48	; 0x30
     7f6:	0029      	movs	r1, r5
     7f8:	4c0a      	ldr	r4, [pc, #40]	; (824 <load_global+0x50>)
     7fa:	47a0      	blx	r4
     7fc:	1e04      	subs	r4, r0, #0
     7fe:	d0f2      	beq.n	7e6 <load_global+0x12>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
     800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     802:	4909      	ldr	r1, [pc, #36]	; (828 <load_global+0x54>)
     804:	2320      	movs	r3, #32
     806:	1a5b      	subs	r3, r3, r1
     808:	189b      	adds	r3, r3, r2
     80a:	930a      	str	r3, [sp, #40]	; 0x28
    eeprom_read_request(&request, eeprom_address, address, size);
     80c:	990a      	ldr	r1, [sp, #40]	; 0x28
     80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     810:	4668      	mov	r0, sp
     812:	4d06      	ldr	r5, [pc, #24]	; (82c <load_global+0x58>)
     814:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     816:	4668      	mov	r0, sp
     818:	4b05      	ldr	r3, [pc, #20]	; (830 <load_global+0x5c>)
     81a:	4798      	blx	r3
    return true;
     81c:	e7e3      	b.n	7e6 <load_global+0x12>
     81e:	46c0      	nop			; (mov r8, r8)
     820:	00000755 	.word	0x00000755
     824:	000006c9 	.word	0x000006c9
     828:	200001c8 	.word	0x200001c8
     82c:	000009d9 	.word	0x000009d9
     830:	000041a5 	.word	0x000041a5

00000834 <save_global>:

bool save_global(Global_Variable_IDs id) {
     834:	b530      	push	{r4, r5, lr}
     836:	b08f      	sub	sp, #60	; 0x3c
     838:	0005      	movs	r5, r0
    __Global_Variable_Types type;
    void* address;
    int size;
    if (!get_global_type_from_id(id, &type)) return false;
     83a:	2137      	movs	r1, #55	; 0x37
     83c:	4469      	add	r1, sp
     83e:	4b10      	ldr	r3, [pc, #64]	; (880 <save_global+0x4c>)
     840:	4798      	blx	r3
     842:	1e04      	subs	r4, r0, #0
     844:	d102      	bne.n	84c <save_global+0x18>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
    EEPROM_Request request;
    eeprom_write_request(&request, eeprom_address, address, size);
    eeprom_wait_until_done(&request);
    return true;
}
     846:	0020      	movs	r0, r4
     848:	b00f      	add	sp, #60	; 0x3c
     84a:	bd30      	pop	{r4, r5, pc}
    if (!get_address_from_id(type, id, &address, &size)) return false;
     84c:	2337      	movs	r3, #55	; 0x37
     84e:	446b      	add	r3, sp
     850:	7818      	ldrb	r0, [r3, #0]
     852:	ab0b      	add	r3, sp, #44	; 0x2c
     854:	aa0c      	add	r2, sp, #48	; 0x30
     856:	0029      	movs	r1, r5
     858:	4c0a      	ldr	r4, [pc, #40]	; (884 <save_global+0x50>)
     85a:	47a0      	blx	r4
     85c:	1e04      	subs	r4, r0, #0
     85e:	d0f2      	beq.n	846 <save_global+0x12>
    volatile uint32_t eeprom_address = __EEPROM_GLOBAL_VARIABLES_START_ADDRESS + (uint32_t)address - (uint32_t)(&globals);
     860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     862:	4909      	ldr	r1, [pc, #36]	; (888 <save_global+0x54>)
     864:	2320      	movs	r3, #32
     866:	1a5b      	subs	r3, r3, r1
     868:	189b      	adds	r3, r3, r2
     86a:	930a      	str	r3, [sp, #40]	; 0x28
    eeprom_write_request(&request, eeprom_address, address, size);
     86c:	990a      	ldr	r1, [sp, #40]	; 0x28
     86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     870:	4668      	mov	r0, sp
     872:	4d06      	ldr	r5, [pc, #24]	; (88c <save_global+0x58>)
     874:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     876:	4668      	mov	r0, sp
     878:	4b05      	ldr	r3, [pc, #20]	; (890 <save_global+0x5c>)
     87a:	4798      	blx	r3
    return true;
     87c:	e7e3      	b.n	846 <save_global+0x12>
     87e:	46c0      	nop			; (mov r8, r8)
     880:	00000755 	.word	0x00000755
     884:	000006c9 	.word	0x000006c9
     888:	200001c8 	.word	0x200001c8
     88c:	00000a05 	.word	0x00000a05
     890:	000041a5 	.word	0x000041a5

00000894 <get_global_name>:

bool get_global_name(Global_Variable_IDs id, uint8_t* buffer, int* length, int maxLength) {
     894:	b5f0      	push	{r4, r5, r6, r7, lr}
     896:	46c6      	mov	lr, r8
     898:	b500      	push	{lr}
     89a:	000d      	movs	r5, r1
     89c:	0017      	movs	r7, r2
     89e:	001c      	movs	r4, r3
    bool ret = true;
    if (id >= __GLOBAL_ID_END) {
     8a0:	2828      	cmp	r0, #40	; 0x28
     8a2:	d817      	bhi.n	8d4 <get_global_name+0x40>
    bool ret = true;
     8a4:	2301      	movs	r3, #1
     8a6:	4698      	mov	r8, r3
        id = 0;
        ret = false;
    }

    *length = MIN_2(maxLength, strlen(global_variable_names[id]) + 1);
     8a8:	0006      	movs	r6, r0
     8aa:	4b0c      	ldr	r3, [pc, #48]	; (8dc <get_global_name+0x48>)
     8ac:	0080      	lsls	r0, r0, #2
     8ae:	58c0      	ldr	r0, [r0, r3]
     8b0:	4b0b      	ldr	r3, [pc, #44]	; (8e0 <get_global_name+0x4c>)
     8b2:	4798      	blx	r3
     8b4:	3001      	adds	r0, #1
     8b6:	42a0      	cmp	r0, r4
     8b8:	d800      	bhi.n	8bc <get_global_name+0x28>
     8ba:	0004      	movs	r4, r0
     8bc:	603c      	str	r4, [r7, #0]

    memcpy(buffer, global_variable_names[id], *length);
     8be:	4b07      	ldr	r3, [pc, #28]	; (8dc <get_global_name+0x48>)
     8c0:	00b6      	lsls	r6, r6, #2
     8c2:	58f1      	ldr	r1, [r6, r3]
     8c4:	0022      	movs	r2, r4
     8c6:	0028      	movs	r0, r5
     8c8:	4b06      	ldr	r3, [pc, #24]	; (8e4 <get_global_name+0x50>)
     8ca:	4798      	blx	r3

    return ret;
}
     8cc:	4640      	mov	r0, r8
     8ce:	bc80      	pop	{r7}
     8d0:	46b8      	mov	r8, r7
     8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = false;
     8d4:	2300      	movs	r3, #0
     8d6:	4698      	mov	r8, r3
        id = 0;
     8d8:	2000      	movs	r0, #0
     8da:	e7e5      	b.n	8a8 <get_global_name+0x14>
     8dc:	20000000 	.word	0x20000000
     8e0:	00005bd9 	.word	0x00005bd9
     8e4:	00005b49 	.word	0x00005b49

000008e8 <init_globals>:

bool init_globals() {
     8e8:	b570      	push	{r4, r5, r6, lr}
     8ea:	b08a      	sub	sp, #40	; 0x28
    // load header
    EEPROM_Request request;
    eeprom_read_request(&request, 0, &__eeprom_header, sizeof(__eeprom_header));
     8ec:	4c1b      	ldr	r4, [pc, #108]	; (95c <init_globals+0x74>)
     8ee:	0022      	movs	r2, r4
     8f0:	3268      	adds	r2, #104	; 0x68
     8f2:	2308      	movs	r3, #8
     8f4:	2100      	movs	r1, #0
     8f6:	4668      	mov	r0, sp
     8f8:	4d19      	ldr	r5, [pc, #100]	; (960 <init_globals+0x78>)
     8fa:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     8fc:	4668      	mov	r0, sp
     8fe:	4b19      	ldr	r3, [pc, #100]	; (964 <init_globals+0x7c>)
     900:	4798      	blx	r3
    
    // check and modify header values
    if (__eeprom_header.GlobalHash != __GLOBAL_HASH) {
     902:	6ea2      	ldr	r2, [r4, #104]	; 0x68
     904:	4b18      	ldr	r3, [pc, #96]	; (968 <init_globals+0x80>)
     906:	429a      	cmp	r2, r3
     908:	d11c      	bne.n	944 <init_globals+0x5c>
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
        eeprom_wait_until_done(&request);
    }
    
    ++__eeprom_header.StartupCount;
     90a:	4c14      	ldr	r4, [pc, #80]	; (95c <init_globals+0x74>)
     90c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     90e:	3301      	adds	r3, #1
     910:	66e3      	str	r3, [r4, #108]	; 0x6c
    eeprom_write_request(&request, 4, &(__eeprom_header.StartupCount), 4);
     912:	0022      	movs	r2, r4
     914:	326c      	adds	r2, #108	; 0x6c
     916:	2304      	movs	r3, #4
     918:	2104      	movs	r1, #4
     91a:	4668      	mov	r0, sp
     91c:	4d13      	ldr	r5, [pc, #76]	; (96c <init_globals+0x84>)
     91e:	47a8      	blx	r5
    eeprom_wait_until_done(&request);
     920:	4668      	mov	r0, sp
     922:	4d10      	ldr	r5, [pc, #64]	; (964 <init_globals+0x7c>)
     924:	47a8      	blx	r5

    // load globals
    eeprom_read_request(&request, __EEPROM_GLOBAL_VARIABLES_START_ADDRESS, &globals, sizeof(globals));
     926:	2368      	movs	r3, #104	; 0x68
     928:	0022      	movs	r2, r4
     92a:	2120      	movs	r1, #32
     92c:	4668      	mov	r0, sp
     92e:	4e0c      	ldr	r6, [pc, #48]	; (960 <init_globals+0x78>)
     930:	47b0      	blx	r6
    eeprom_wait_until_done(&request);
     932:	4668      	mov	r0, sp
     934:	47a8      	blx	r5

    globals.GlobalHash = __eeprom_header.GlobalHash;
     936:	6ea3      	ldr	r3, [r4, #104]	; 0x68
     938:	6363      	str	r3, [r4, #52]	; 0x34
    globals.StartupCount = __eeprom_header.StartupCount;
     93a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     93c:	63a3      	str	r3, [r4, #56]	; 0x38

    return true;
     93e:	2001      	movs	r0, #1
     940:	b00a      	add	sp, #40	; 0x28
     942:	bd70      	pop	{r4, r5, r6, pc}
        __eeprom_header.GlobalHash = __GLOBAL_HASH;
     944:	4a05      	ldr	r2, [pc, #20]	; (95c <init_globals+0x74>)
     946:	6693      	str	r3, [r2, #104]	; 0x68
        eeprom_write_request(&request, 0, &(__eeprom_header.GlobalHash), 4);
     948:	3268      	adds	r2, #104	; 0x68
     94a:	2304      	movs	r3, #4
     94c:	2100      	movs	r1, #0
     94e:	4668      	mov	r0, sp
     950:	4c06      	ldr	r4, [pc, #24]	; (96c <init_globals+0x84>)
     952:	47a0      	blx	r4
        eeprom_wait_until_done(&request);
     954:	4668      	mov	r0, sp
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <init_globals+0x7c>)
     958:	4798      	blx	r3
     95a:	e7d6      	b.n	90a <init_globals+0x22>
     95c:	200001c8 	.word	0x200001c8
     960:	000009d9 	.word	0x000009d9
     964:	000041a5 	.word	0x000041a5
     968:	5006f37a 	.word	0x5006f37a
     96c:	00000a05 	.word	0x00000a05

00000970 <init_eeprom>:
#include "global_eeprom.h"
#include "util.h"

EEPROM_Descriptor eeprom_desc;

bool init_eeprom() {
     970:	b510      	push	{r4, lr}
     972:	b084      	sub	sp, #16
	port_set(EEPROM_SS_PORT, EEPROM_SS_PIN);
     974:	2480      	movs	r4, #128	; 0x80
     976:	05e4      	lsls	r4, r4, #23
     978:	0021      	movs	r1, r4
     97a:	2001      	movs	r0, #1
     97c:	4b0b      	ldr	r3, [pc, #44]	; (9ac <init_eeprom+0x3c>)
     97e:	4798      	blx	r3
	port_set_output(EEPROM_SS_PORT, EEPROM_SS_PIN);
     980:	0021      	movs	r1, r4
     982:	2001      	movs	r0, #1
     984:	4b0a      	ldr	r3, [pc, #40]	; (9b0 <init_eeprom+0x40>)
     986:	4798      	blx	r3

    Pin eeprom_ss = {.port = EEPROM_SS_PORT, .pin = EEPROM_SS_PIN};
     988:	ab02      	add	r3, sp, #8
     98a:	490a      	ldr	r1, [pc, #40]	; (9b4 <init_eeprom+0x44>)
     98c:	680a      	ldr	r2, [r1, #0]
     98e:	9202      	str	r2, [sp, #8]
     990:	7909      	ldrb	r1, [r1, #4]
     992:	7119      	strb	r1, [r3, #4]
	eeprom_init(&eeprom_desc, SPI_SERCOM, eeprom_ss, SPI_EEPROM_SIZE);
     994:	4808      	ldr	r0, [pc, #32]	; (9b8 <init_eeprom+0x48>)
     996:	2180      	movs	r1, #128	; 0x80
     998:	0209      	lsls	r1, r1, #8
     99a:	9100      	str	r1, [sp, #0]
     99c:	9b03      	ldr	r3, [sp, #12]
     99e:	4907      	ldr	r1, [pc, #28]	; (9bc <init_eeprom+0x4c>)
     9a0:	4c07      	ldr	r4, [pc, #28]	; (9c0 <init_eeprom+0x50>)
     9a2:	47a0      	blx	r4

    return true;
}
     9a4:	2001      	movs	r0, #1
     9a6:	b004      	add	sp, #16
     9a8:	bd10      	pop	{r4, pc}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	000022d1 	.word	0x000022d1
     9b0:	000022c1 	.word	0x000022c1
     9b4:	000060b0 	.word	0x000060b0
     9b8:	20000238 	.word	0x20000238
     9bc:	42001400 	.word	0x42001400
     9c0:	00001b71 	.word	0x00001b71

000009c4 <check_eeprom>:

bool check_eeprom() {
     9c4:	b510      	push	{r4, lr}
    return eeprom_check(&eeprom_desc);
     9c6:	4802      	ldr	r0, [pc, #8]	; (9d0 <check_eeprom+0xc>)
     9c8:	4b02      	ldr	r3, [pc, #8]	; (9d4 <check_eeprom+0x10>)
     9ca:	4798      	blx	r3
}
     9cc:	bd10      	pop	{r4, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	20000238 	.word	0x20000238
     9d4:	00001d1d 	.word	0x00001d1d

000009d8 <eeprom_read_request>:


void eeprom_read_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     9d8:	b530      	push	{r4, r5, lr}
     9da:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Read, address, size, buffer);
     9dc:	4d06      	ldr	r5, [pc, #24]	; (9f8 <eeprom_read_request+0x20>)
     9de:	4c07      	ldr	r4, [pc, #28]	; (9fc <eeprom_read_request+0x24>)
     9e0:	9203      	str	r2, [sp, #12]
     9e2:	9302      	str	r3, [sp, #8]
     9e4:	9101      	str	r1, [sp, #4]
     9e6:	2300      	movs	r3, #0
     9e8:	9300      	str	r3, [sp, #0]
     9ea:	002a      	movs	r2, r5
     9ec:	0001      	movs	r1, r0
     9ee:	0020      	movs	r0, r4
     9f0:	4c03      	ldr	r4, [pc, #12]	; (a00 <eeprom_read_request+0x28>)
     9f2:	47a0      	blx	r4
}
     9f4:	b005      	add	sp, #20
     9f6:	bd30      	pop	{r4, r5, pc}
     9f8:	20000238 	.word	0x20000238
     9fc:	20000340 	.word	0x20000340
     a00:	00004171 	.word	0x00004171

00000a04 <eeprom_write_request>:

void eeprom_write_request(EEPROM_Request* request, uint32_t address, void* buffer, int size) {
     a04:	b530      	push	{r4, r5, lr}
     a06:	b085      	sub	sp, #20
    eeprom_request(&spiproc, request, &eeprom_desc, SPI_DEVICE_EEPROM, EEPROM_Write, address, size, buffer);
     a08:	4d07      	ldr	r5, [pc, #28]	; (a28 <eeprom_write_request+0x24>)
     a0a:	4c08      	ldr	r4, [pc, #32]	; (a2c <eeprom_write_request+0x28>)
     a0c:	9203      	str	r2, [sp, #12]
     a0e:	9302      	str	r3, [sp, #8]
     a10:	9101      	str	r1, [sp, #4]
     a12:	2301      	movs	r3, #1
     a14:	9300      	str	r3, [sp, #0]
     a16:	2300      	movs	r3, #0
     a18:	002a      	movs	r2, r5
     a1a:	0001      	movs	r1, r0
     a1c:	0020      	movs	r0, r4
     a1e:	4c04      	ldr	r4, [pc, #16]	; (a30 <eeprom_write_request+0x2c>)
     a20:	47a0      	blx	r4
     a22:	b005      	add	sp, #20
     a24:	bd30      	pop	{r4, r5, pc}
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	20000238 	.word	0x20000238
     a2c:	20000340 	.word	0x20000340
     a30:	00004171 	.word	0x00004171

00000a34 <imu_init>:
uint8_t gyro_config_1 = 0;

// extern void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data);
#define SWAPI16(x) ((int16_t)(((x << 8) & 0xFF00) | ((x >> 8) & 0x00FF)))

bool imu_init() {
     a34:	b5f0      	push	{r4, r5, r6, r7, lr}
     a36:	b083      	sub	sp, #12
	port_set(IMU_SS_PORT, IMU_SS_PIN);
     a38:	2480      	movs	r4, #128	; 0x80
     a3a:	0524      	lsls	r4, r4, #20
     a3c:	0021      	movs	r1, r4
     a3e:	2000      	movs	r0, #0
     a40:	4e15      	ldr	r6, [pc, #84]	; (a98 <imu_init+0x64>)
     a42:	47b0      	blx	r6
	port_set_output(IMU_SS_PORT, IMU_SS_PIN);
     a44:	0021      	movs	r1, r4
     a46:	2000      	movs	r0, #0
     a48:	4f14      	ldr	r7, [pc, #80]	; (a9c <imu_init+0x68>)
     a4a:	47b8      	blx	r7
	IMU_OFF_BUS();
     a4c:	2580      	movs	r5, #128	; 0x80
     a4e:	03ad      	lsls	r5, r5, #14
     a50:	0029      	movs	r1, r5
     a52:	2000      	movs	r0, #0
     a54:	4b12      	ldr	r3, [pc, #72]	; (aa0 <imu_init+0x6c>)
     a56:	4798      	blx	r3
	port_set_output(IMU_BUSEN_PORT, IMU_BUSEN_PIN);
     a58:	0029      	movs	r1, r5
     a5a:	2000      	movs	r0, #0
     a5c:	47b8      	blx	r7

    bool ret = true;
    IMU_ON_BUS();
     a5e:	0029      	movs	r1, r5
     a60:	2000      	movs	r0, #0
     a62:	47b0      	blx	r6
    Pin imu_ss = {.port = IMU_SS_PORT, .pin = IMU_SS_PIN};
     a64:	9400      	str	r4, [sp, #0]
     a66:	2300      	movs	r3, #0
     a68:	466a      	mov	r2, sp
     a6a:	7113      	strb	r3, [r2, #4]
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     a6c:	480d      	ldr	r0, [pc, #52]	; (aa4 <imu_init+0x70>)
     a6e:	0022      	movs	r2, r4
     a70:	9b01      	ldr	r3, [sp, #4]
     a72:	490d      	ldr	r1, [pc, #52]	; (aa8 <imu_init+0x74>)
     a74:	4c0d      	ldr	r4, [pc, #52]	; (aac <imu_init+0x78>)
     a76:	47a0      	blx	r4
     a78:	1e04      	subs	r4, r0, #0
     a7a:	d107      	bne.n	a8c <imu_init+0x58>
        ret = false;
    IMU_OFF_BUS();
     a7c:	2180      	movs	r1, #128	; 0x80
     a7e:	0389      	lsls	r1, r1, #14
     a80:	2000      	movs	r0, #0
     a82:	4b07      	ldr	r3, [pc, #28]	; (aa0 <imu_init+0x6c>)
     a84:	4798      	blx	r3
    return ret;
}
     a86:	0020      	movs	r0, r4
     a88:	b003      	add	sp, #12
     a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!imu_icm20948_init(&imu_desc, SPI_SERCOM, imu_ss) || !mag_icm20948_init(&imu_desc))
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <imu_init+0x70>)
     a8e:	4b08      	ldr	r3, [pc, #32]	; (ab0 <imu_init+0x7c>)
     a90:	4798      	blx	r3
     a92:	0004      	movs	r4, r0
     a94:	e7f2      	b.n	a7c <imu_init+0x48>
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	000022d1 	.word	0x000022d1
     a9c:	000022c1 	.word	0x000022c1
     aa0:	000022e1 	.word	0x000022e1
     aa4:	20000244 	.word	0x20000244
     aa8:	42001400 	.word	0x42001400
     aac:	000020f1 	.word	0x000020f1
     ab0:	00002235 	.word	0x00002235

00000ab4 <check_imu>:

bool check_imu() {
     ab4:	b510      	push	{r4, lr}
    bool pass = true;
    // check imu, and if good check internal magnetometer
	IMU_ON_BUS();
     ab6:	2180      	movs	r1, #128	; 0x80
     ab8:	0389      	lsls	r1, r1, #14
     aba:	2000      	movs	r0, #0
     abc:	4b09      	ldr	r3, [pc, #36]	; (ae4 <check_imu+0x30>)
     abe:	4798      	blx	r3
	if (!imu_icm20948_check(&imu_desc)) pass = false;
     ac0:	4809      	ldr	r0, [pc, #36]	; (ae8 <check_imu+0x34>)
     ac2:	4b0a      	ldr	r3, [pc, #40]	; (aec <check_imu+0x38>)
     ac4:	4798      	blx	r3
     ac6:	1e04      	subs	r4, r0, #0
     ac8:	d106      	bne.n	ad8 <check_imu+0x24>
	if (pass)
		if (!mag_icm20948_check(&imu_desc)) pass = false;
	IMU_OFF_BUS();
     aca:	2180      	movs	r1, #128	; 0x80
     acc:	0389      	lsls	r1, r1, #14
     ace:	2000      	movs	r0, #0
     ad0:	4b07      	ldr	r3, [pc, #28]	; (af0 <check_imu+0x3c>)
     ad2:	4798      	blx	r3
    return pass;
}
     ad4:	0020      	movs	r0, r4
     ad6:	bd10      	pop	{r4, pc}
		if (!mag_icm20948_check(&imu_desc)) pass = false;
     ad8:	4803      	ldr	r0, [pc, #12]	; (ae8 <check_imu+0x34>)
     ada:	4b06      	ldr	r3, [pc, #24]	; (af4 <check_imu+0x40>)
     adc:	4798      	blx	r3
     ade:	0004      	movs	r4, r0
     ae0:	e7f3      	b.n	aca <check_imu+0x16>
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	000022d1 	.word	0x000022d1
     ae8:	20000244 	.word	0x20000244
     aec:	00002161 	.word	0x00002161
     af0:	000022e1 	.word	0x000022e1
     af4:	00002291 	.word	0x00002291

00000af8 <request_imu_data>:

void request_imu_data() {
     af8:	b510      	push	{r4, lr}
     afa:	b086      	sub	sp, #24
    // if there is still a pending request, wait.
    // if (!imu_icm20948_done(&request)) imu_icm20948_wait_until_done(&request);
    imu_icm20948_request(&spiproc, &data_request, &imu_desc, SPI_DEVICE_IMU, IMU_Read, 0, ACCEL_XOUT_H, sizeof(raw_data), &raw_data);
     afc:	4a09      	ldr	r2, [pc, #36]	; (b24 <request_imu_data+0x2c>)
     afe:	0011      	movs	r1, r2
     b00:	310c      	adds	r1, #12
     b02:	4809      	ldr	r0, [pc, #36]	; (b28 <request_imu_data+0x30>)
     b04:	0013      	movs	r3, r2
     b06:	3334      	adds	r3, #52	; 0x34
     b08:	9304      	str	r3, [sp, #16]
     b0a:	230e      	movs	r3, #14
     b0c:	9303      	str	r3, [sp, #12]
     b0e:	331f      	adds	r3, #31
     b10:	9302      	str	r3, [sp, #8]
     b12:	2300      	movs	r3, #0
     b14:	9301      	str	r3, [sp, #4]
     b16:	9300      	str	r3, [sp, #0]
     b18:	3302      	adds	r3, #2
     b1a:	4c04      	ldr	r4, [pc, #16]	; (b2c <request_imu_data+0x34>)
     b1c:	47a0      	blx	r4
}
     b1e:	b006      	add	sp, #24
     b20:	bd10      	pop	{r4, pc}
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	20000244 	.word	0x20000244
     b28:	20000340 	.word	0x20000340
     b2c:	00004415 	.word	0x00004415

00000b30 <wait_for_imu_data>:

void wait_for_imu_data() {
     b30:	b5f0      	push	{r4, r5, r6, r7, lr}
     b32:	46c6      	mov	lr, r8
     b34:	b500      	push	{lr}
     b36:	b086      	sub	sp, #24
    imu_icm20948_wait_until_done(&data_request);
     b38:	4c8c      	ldr	r4, [pc, #560]	; (d6c <wait_for_imu_data+0x23c>)
     b3a:	0020      	movs	r0, r4
     b3c:	300c      	adds	r0, #12
     b3e:	4b8c      	ldr	r3, [pc, #560]	; (d70 <wait_for_imu_data+0x240>)
     b40:	4798      	blx	r3

    // float accel_multiplier = __G__ * (ACCEL_MIN_RANGE_G << accel_fs_sel) / ACCEL_RAW_RANGE;
    int32_t accel_multiplier = (__G__ * ACCEL_MIN_RANGE_G) >> (15 - accel_fs_sel);
     b42:	6c66      	ldr	r6, [r4, #68]	; 0x44
     b44:	230f      	movs	r3, #15
     b46:	469c      	mov	ip, r3
     b48:	1b9b      	subs	r3, r3, r6
     b4a:	488a      	ldr	r0, [pc, #552]	; (d74 <wait_for_imu_data+0x244>)
     b4c:	4118      	asrs	r0, r3
    globals.AccelerationXRaw = SWAPI16(raw_data.accel_x) * accel_multiplier;
     b4e:	2234      	movs	r2, #52	; 0x34
     b50:	5ea3      	ldrsh	r3, [r4, r2]
     b52:	0219      	lsls	r1, r3, #8
     b54:	b209      	sxth	r1, r1
     b56:	b29b      	uxth	r3, r3
     b58:	0a1b      	lsrs	r3, r3, #8
     b5a:	4319      	orrs	r1, r3
     b5c:	0003      	movs	r3, r0
     b5e:	434b      	muls	r3, r1
     b60:	4f85      	ldr	r7, [pc, #532]	; (d78 <wait_for_imu_data+0x248>)
     b62:	603b      	str	r3, [r7, #0]
    globals.AccelerationYRaw = SWAPI16(raw_data.accel_y) * accel_multiplier;
     b64:	2236      	movs	r2, #54	; 0x36
     b66:	5ea3      	ldrsh	r3, [r4, r2]
     b68:	021a      	lsls	r2, r3, #8
     b6a:	b212      	sxth	r2, r2
     b6c:	b29b      	uxth	r3, r3
     b6e:	0a1b      	lsrs	r3, r3, #8
     b70:	431a      	orrs	r2, r3
     b72:	0003      	movs	r3, r0
     b74:	4353      	muls	r3, r2
     b76:	607b      	str	r3, [r7, #4]
    globals.AccelerationZRaw = SWAPI16(raw_data.accel_z) * accel_multiplier;
     b78:	2338      	movs	r3, #56	; 0x38
     b7a:	5ee5      	ldrsh	r5, [r4, r3]
     b7c:	022b      	lsls	r3, r5, #8
     b7e:	b21b      	sxth	r3, r3
     b80:	b2ad      	uxth	r5, r5
     b82:	0a2d      	lsrs	r5, r5, #8
     b84:	432b      	orrs	r3, r5
     b86:	4698      	mov	r8, r3
     b88:	4358      	muls	r0, r3
     b8a:	60b8      	str	r0, [r7, #8]

    // float gyro_multiplier = (float)(GYRO_MIN_RANGE_DEGREES << gyro_fs_sel) / GYRO_RAW_RANGE;
    int32_t gyro_multiplier = (GYRO_MIN_RANGE_MICRORADIANS) >> (15 - gyro_fs_sel);
     b8c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
     b8e:	4660      	mov	r0, ip
     b90:	1b45      	subs	r5, r0, r5
     b92:	487a      	ldr	r0, [pc, #488]	; (d7c <wait_for_imu_data+0x24c>)
     b94:	4128      	asrs	r0, r5
    globals.AngularVelocityXRaw = SWAPI16(raw_data.gyro_x) * gyro_multiplier;
     b96:	233a      	movs	r3, #58	; 0x3a
     b98:	5ee5      	ldrsh	r5, [r4, r3]
     b9a:	46ac      	mov	ip, r5
     b9c:	022d      	lsls	r5, r5, #8
     b9e:	b22d      	sxth	r5, r5
     ba0:	4663      	mov	r3, ip
     ba2:	b29b      	uxth	r3, r3
     ba4:	0a1b      	lsrs	r3, r3, #8
     ba6:	431d      	orrs	r5, r3
     ba8:	4345      	muls	r5, r0
     baa:	60fd      	str	r5, [r7, #12]
    globals.AngularVelocityYRaw = SWAPI16(raw_data.gyro_y)* gyro_multiplier;
     bac:	253c      	movs	r5, #60	; 0x3c
     bae:	5f63      	ldrsh	r3, [r4, r5]
     bb0:	021d      	lsls	r5, r3, #8
     bb2:	b22d      	sxth	r5, r5
     bb4:	b29b      	uxth	r3, r3
     bb6:	0a1b      	lsrs	r3, r3, #8
     bb8:	431d      	orrs	r5, r3
     bba:	4345      	muls	r5, r0
     bbc:	613d      	str	r5, [r7, #16]
    globals.AngularVelocityZRaw = SWAPI16(raw_data.gyro_z) * gyro_multiplier;
     bbe:	233e      	movs	r3, #62	; 0x3e
     bc0:	5ee4      	ldrsh	r4, [r4, r3]
     bc2:	0225      	lsls	r5, r4, #8
     bc4:	b22d      	sxth	r5, r5
     bc6:	b2a4      	uxth	r4, r4
     bc8:	0a24      	lsrs	r4, r4, #8
     bca:	432c      	orrs	r4, r5
     bcc:	4360      	muls	r0, r4
     bce:	6178      	str	r0, [r7, #20]

    // adjust accelerometer range
    int16_t accel_max = UMAX_3(SWAPI16(raw_data.accel_x), SWAPI16(raw_data.accel_y), SWAPI16(raw_data.accel_z));
     bd0:	4643      	mov	r3, r8
     bd2:	17d8      	asrs	r0, r3, #31
     bd4:	181b      	adds	r3, r3, r0
     bd6:	4043      	eors	r3, r0
     bd8:	b29b      	uxth	r3, r3
     bda:	17d0      	asrs	r0, r2, #31
     bdc:	1812      	adds	r2, r2, r0
     bde:	4042      	eors	r2, r0
     be0:	b292      	uxth	r2, r2
     be2:	17c8      	asrs	r0, r1, #31
     be4:	1809      	adds	r1, r1, r0
     be6:	4041      	eors	r1, r0
     be8:	b289      	uxth	r1, r1
     bea:	1c10      	adds	r0, r2, #0
     bec:	428a      	cmp	r2, r1
     bee:	d200      	bcs.n	bf2 <wait_for_imu_data+0xc2>
     bf0:	1c08      	adds	r0, r1, #0
     bf2:	1c1a      	adds	r2, r3, #0
     bf4:	b281      	uxth	r1, r0
     bf6:	428b      	cmp	r3, r1
     bf8:	d200      	bcs.n	bfc <wait_for_imu_data+0xcc>
     bfa:	1c02      	adds	r2, r0, #0
     bfc:	b212      	sxth	r2, r2
    if (accel_fs_sel != ACCEL_FS_SEL_MAX && accel_max > ACCEL_FS_SEL_HIGH_THRESHOLD) {
     bfe:	2e03      	cmp	r6, #3
     c00:	d002      	beq.n	c08 <wait_for_imu_data+0xd8>
     c02:	4b5f      	ldr	r3, [pc, #380]	; (d80 <wait_for_imu_data+0x250>)
     c04:	429a      	cmp	r2, r3
     c06:	dc40      	bgt.n	c8a <wait_for_imu_data+0x15a>
        ++accel_fs_sel;
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }
    else if (accel_fs_sel != ACCEL_FS_SEL_MIN && accel_max < ACCEL_FS_SEL_LOW_THRESHOLD) {
     c08:	2e00      	cmp	r6, #0
     c0a:	d002      	beq.n	c12 <wait_for_imu_data+0xe2>
     c0c:	4b5d      	ldr	r3, [pc, #372]	; (d84 <wait_for_imu_data+0x254>)
     c0e:	429a      	cmp	r2, r3
     c10:	dd55      	ble.n	cbe <wait_for_imu_data+0x18e>
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
    }

    // adjust gyro range
    int16_t gyro_max = UMAX_3(SWAPI16(raw_data.gyro_x), SWAPI16(raw_data.gyro_y), SWAPI16(raw_data.gyro_z));
     c12:	4856      	ldr	r0, [pc, #344]	; (d6c <wait_for_imu_data+0x23c>)
     c14:	233e      	movs	r3, #62	; 0x3e
     c16:	5ec2      	ldrsh	r2, [r0, r3]
     c18:	0213      	lsls	r3, r2, #8
     c1a:	b21b      	sxth	r3, r3
     c1c:	b292      	uxth	r2, r2
     c1e:	0a12      	lsrs	r2, r2, #8
     c20:	4313      	orrs	r3, r2
     c22:	17da      	asrs	r2, r3, #31
     c24:	189b      	adds	r3, r3, r2
     c26:	4053      	eors	r3, r2
     c28:	b29b      	uxth	r3, r3
     c2a:	223c      	movs	r2, #60	; 0x3c
     c2c:	5e81      	ldrsh	r1, [r0, r2]
     c2e:	020a      	lsls	r2, r1, #8
     c30:	b212      	sxth	r2, r2
     c32:	b289      	uxth	r1, r1
     c34:	0a09      	lsrs	r1, r1, #8
     c36:	430a      	orrs	r2, r1
     c38:	17d1      	asrs	r1, r2, #31
     c3a:	1852      	adds	r2, r2, r1
     c3c:	404a      	eors	r2, r1
     c3e:	b292      	uxth	r2, r2
     c40:	213a      	movs	r1, #58	; 0x3a
     c42:	5e40      	ldrsh	r0, [r0, r1]
     c44:	0201      	lsls	r1, r0, #8
     c46:	b209      	sxth	r1, r1
     c48:	b280      	uxth	r0, r0
     c4a:	0a00      	lsrs	r0, r0, #8
     c4c:	4301      	orrs	r1, r0
     c4e:	17c8      	asrs	r0, r1, #31
     c50:	1809      	adds	r1, r1, r0
     c52:	4041      	eors	r1, r0
     c54:	b289      	uxth	r1, r1
     c56:	1c10      	adds	r0, r2, #0
     c58:	428a      	cmp	r2, r1
     c5a:	d200      	bcs.n	c5e <wait_for_imu_data+0x12e>
     c5c:	1c08      	adds	r0, r1, #0
     c5e:	1c1a      	adds	r2, r3, #0
     c60:	b281      	uxth	r1, r0
     c62:	428b      	cmp	r3, r1
     c64:	d200      	bcs.n	c68 <wait_for_imu_data+0x138>
     c66:	1c02      	adds	r2, r0, #0
     c68:	b212      	sxth	r2, r2
    if (gyro_fs_sel != GYRO_FS_SEL_MAX && gyro_max > GYRO_FS_SEL_HIGH_THRESHOLD) {
     c6a:	4b40      	ldr	r3, [pc, #256]	; (d6c <wait_for_imu_data+0x23c>)
     c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     c6e:	2b03      	cmp	r3, #3
     c70:	d002      	beq.n	c78 <wait_for_imu_data+0x148>
     c72:	4943      	ldr	r1, [pc, #268]	; (d80 <wait_for_imu_data+0x250>)
     c74:	428a      	cmp	r2, r1
     c76:	dc3c      	bgt.n	cf2 <wait_for_imu_data+0x1c2>
        ++gyro_fs_sel;
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_on();
    }
    else if (gyro_fs_sel != GYRO_FS_SEL_MIN && gyro_max < GYRO_FS_SEL_LOW_THRESHOLD) {
     c78:	2b00      	cmp	r3, #0
     c7a:	d002      	beq.n	c82 <wait_for_imu_data+0x152>
     c7c:	4941      	ldr	r1, [pc, #260]	; (d84 <wait_for_imu_data+0x254>)
     c7e:	428a      	cmp	r2, r1
     c80:	dd55      	ble.n	d2e <wait_for_imu_data+0x1fe>
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
        led_off();
    }

     c82:	b006      	add	sp, #24
     c84:	bc80      	pop	{r7}
     c86:	46b8      	mov	r8, r7
     c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++accel_fs_sel;
     c8a:	3601      	adds	r6, #1
     c8c:	4a37      	ldr	r2, [pc, #220]	; (d6c <wait_for_imu_data+0x23c>)
     c8e:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     c90:	b2f6      	uxtb	r6, r6
     c92:	0076      	lsls	r6, r6, #1
     c94:	2306      	movs	r3, #6
     c96:	401e      	ands	r6, r3
     c98:	3346      	adds	r3, #70	; 0x46
     c9a:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     c9c:	0011      	movs	r1, r2
     c9e:	3150      	adds	r1, #80	; 0x50
     ca0:	4839      	ldr	r0, [pc, #228]	; (d88 <wait_for_imu_data+0x258>)
     ca2:	0013      	movs	r3, r2
     ca4:	334c      	adds	r3, #76	; 0x4c
     ca6:	9304      	str	r3, [sp, #16]
     ca8:	2301      	movs	r3, #1
     caa:	9303      	str	r3, [sp, #12]
     cac:	2414      	movs	r4, #20
     cae:	9402      	str	r4, [sp, #8]
     cb0:	3c12      	subs	r4, #18
     cb2:	9401      	str	r4, [sp, #4]
     cb4:	9300      	str	r3, [sp, #0]
     cb6:	3301      	adds	r3, #1
     cb8:	4c34      	ldr	r4, [pc, #208]	; (d8c <wait_for_imu_data+0x25c>)
     cba:	47a0      	blx	r4
     cbc:	e7a9      	b.n	c12 <wait_for_imu_data+0xe2>
        --accel_fs_sel;
     cbe:	3e01      	subs	r6, #1
     cc0:	4a2a      	ldr	r2, [pc, #168]	; (d6c <wait_for_imu_data+0x23c>)
     cc2:	6456      	str	r6, [r2, #68]	; 0x44
        accel_config_1 = 0b00000110 & (uint8_t)(accel_fs_sel << 1);
     cc4:	b2f6      	uxtb	r6, r6
     cc6:	0076      	lsls	r6, r6, #1
     cc8:	2306      	movs	r3, #6
     cca:	401e      	ands	r6, r3
     ccc:	3346      	adds	r3, #70	; 0x46
     cce:	54d6      	strb	r6, [r2, r3]
        imu_icm20948_request(&spiproc, &accel_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, ACCEL_CONFIG, 1, &accel_config_1);
     cd0:	0011      	movs	r1, r2
     cd2:	3150      	adds	r1, #80	; 0x50
     cd4:	482c      	ldr	r0, [pc, #176]	; (d88 <wait_for_imu_data+0x258>)
     cd6:	0013      	movs	r3, r2
     cd8:	334c      	adds	r3, #76	; 0x4c
     cda:	9304      	str	r3, [sp, #16]
     cdc:	2301      	movs	r3, #1
     cde:	9303      	str	r3, [sp, #12]
     ce0:	2414      	movs	r4, #20
     ce2:	9402      	str	r4, [sp, #8]
     ce4:	3c12      	subs	r4, #18
     ce6:	9401      	str	r4, [sp, #4]
     ce8:	9300      	str	r3, [sp, #0]
     cea:	3301      	adds	r3, #1
     cec:	4c27      	ldr	r4, [pc, #156]	; (d8c <wait_for_imu_data+0x25c>)
     cee:	47a0      	blx	r4
     cf0:	e78f      	b.n	c12 <wait_for_imu_data+0xe2>
        ++gyro_fs_sel;
     cf2:	3301      	adds	r3, #1
     cf4:	4a1d      	ldr	r2, [pc, #116]	; (d6c <wait_for_imu_data+0x23c>)
     cf6:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     cf8:	b2db      	uxtb	r3, r3
     cfa:	005b      	lsls	r3, r3, #1
     cfc:	2106      	movs	r1, #6
     cfe:	400b      	ands	r3, r1
     d00:	3172      	adds	r1, #114	; 0x72
     d02:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     d04:	0011      	movs	r1, r2
     d06:	317c      	adds	r1, #124	; 0x7c
     d08:	481f      	ldr	r0, [pc, #124]	; (d88 <wait_for_imu_data+0x258>)
     d0a:	0013      	movs	r3, r2
     d0c:	3378      	adds	r3, #120	; 0x78
     d0e:	9304      	str	r3, [sp, #16]
     d10:	2301      	movs	r3, #1
     d12:	9303      	str	r3, [sp, #12]
     d14:	9302      	str	r3, [sp, #8]
     d16:	2402      	movs	r4, #2
     d18:	9401      	str	r4, [sp, #4]
     d1a:	9300      	str	r3, [sp, #0]
     d1c:	3301      	adds	r3, #1
     d1e:	4c1b      	ldr	r4, [pc, #108]	; (d8c <wait_for_imu_data+0x25c>)
     d20:	47a0      	blx	r4
        led_on();
     d22:	2180      	movs	r1, #128	; 0x80
     d24:	03c9      	lsls	r1, r1, #15
     d26:	2001      	movs	r0, #1
     d28:	4b19      	ldr	r3, [pc, #100]	; (d90 <wait_for_imu_data+0x260>)
     d2a:	4798      	blx	r3
     d2c:	e7a9      	b.n	c82 <wait_for_imu_data+0x152>
        --gyro_fs_sel;
     d2e:	3b01      	subs	r3, #1
     d30:	4a0e      	ldr	r2, [pc, #56]	; (d6c <wait_for_imu_data+0x23c>)
     d32:	6493      	str	r3, [r2, #72]	; 0x48
        gyro_config_1 = 0b00000110 & (uint8_t)(gyro_fs_sel << 1);
     d34:	b2db      	uxtb	r3, r3
     d36:	005b      	lsls	r3, r3, #1
     d38:	2106      	movs	r1, #6
     d3a:	400b      	ands	r3, r1
     d3c:	3172      	adds	r1, #114	; 0x72
     d3e:	5453      	strb	r3, [r2, r1]
        imu_icm20948_request(&spiproc, &gyro_range_request, &imu_desc, SPI_DEVICE_IMU, IMU_Write, 2, GYRO_CONFIG_1, 1, &gyro_config_1);
     d40:	0011      	movs	r1, r2
     d42:	317c      	adds	r1, #124	; 0x7c
     d44:	4810      	ldr	r0, [pc, #64]	; (d88 <wait_for_imu_data+0x258>)
     d46:	0013      	movs	r3, r2
     d48:	3378      	adds	r3, #120	; 0x78
     d4a:	9304      	str	r3, [sp, #16]
     d4c:	2301      	movs	r3, #1
     d4e:	9303      	str	r3, [sp, #12]
     d50:	9302      	str	r3, [sp, #8]
     d52:	2402      	movs	r4, #2
     d54:	9401      	str	r4, [sp, #4]
     d56:	9300      	str	r3, [sp, #0]
     d58:	3301      	adds	r3, #1
     d5a:	4c0c      	ldr	r4, [pc, #48]	; (d8c <wait_for_imu_data+0x25c>)
     d5c:	47a0      	blx	r4
        led_off();
     d5e:	2180      	movs	r1, #128	; 0x80
     d60:	03c9      	lsls	r1, r1, #15
     d62:	2001      	movs	r0, #1
     d64:	4b0b      	ldr	r3, [pc, #44]	; (d94 <wait_for_imu_data+0x264>)
     d66:	4798      	blx	r3
     d68:	e78b      	b.n	c82 <wait_for_imu_data+0x152>
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	20000244 	.word	0x20000244
     d70:	00004451 	.word	0x00004451
     d74:	012b4674 	.word	0x012b4674
     d78:	200001c8 	.word	0x200001c8
     d7c:	0042943b 	.word	0x0042943b
     d80:	00007333 	.word	0x00007333
     d84:	00003333 	.word	0x00003333
     d88:	20000340 	.word	0x20000340
     d8c:	00004415 	.word	0x00004415
     d90:	000022d1 	.word	0x000022d1
     d94:	000022e1 	.word	0x000022e1

00000d98 <serial_init>:
    .rxtrig = UART4_DMA_RX_TRIGGER,
    .priority = UART4_DMA_PRIORITY
};


bool serial_init() {
     d98:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

	// init uart
	port_wrconfig(UART1_PORT, UART1_PMUX, UART1_PINS);
     d9a:	22c0      	movs	r2, #192	; 0xc0
     d9c:	0092      	lsls	r2, r2, #2
     d9e:	2102      	movs	r1, #2
     da0:	2000      	movs	r0, #0
     da2:	4c19      	ldr	r4, [pc, #100]	; (e08 <serial_init+0x70>)
     da4:	47a0      	blx	r4
	port_wrconfig(UART2_PORT, UART2_PMUX, UART2_PINS);
     da6:	22c0      	movs	r2, #192	; 0xc0
     da8:	0312      	lsls	r2, r2, #12
     daa:	2102      	movs	r1, #2
     dac:	2000      	movs	r0, #0
     dae:	47a0      	blx	r4
	port_wrconfig(UART3_PORT, UART3_PMUX, UART3_PINS);
     db0:	22c0      	movs	r2, #192	; 0xc0
     db2:	0212      	lsls	r2, r2, #8
     db4:	2102      	movs	r1, #2
     db6:	2001      	movs	r0, #1
     db8:	47a0      	blx	r4
	port_wrconfig(UART4_PORT, UART4_PMUX, UART4_PINS);
     dba:	22c0      	movs	r2, #192	; 0xc0
     dbc:	0292      	lsls	r2, r2, #10
     dbe:	2102      	movs	r1, #2
     dc0:	2001      	movs	r0, #1
     dc2:	47a0      	blx	r4
	if (!uart_init(UART1_SERCOM, UART1_RXPO, UART1_TXPO, UART1_BAUD)) ret = false;
     dc4:	2596      	movs	r5, #150	; 0x96
     dc6:	01ad      	lsls	r5, r5, #6
     dc8:	002b      	movs	r3, r5
     dca:	2200      	movs	r2, #0
     dcc:	2101      	movs	r1, #1
     dce:	480f      	ldr	r0, [pc, #60]	; (e0c <serial_init+0x74>)
     dd0:	4c0f      	ldr	r4, [pc, #60]	; (e10 <serial_init+0x78>)
     dd2:	47a0      	blx	r4
	if (!uart_init(UART2_SERCOM, UART2_RXPO, UART2_TXPO, UART2_BAUD)) ret = false;
     dd4:	4b0f      	ldr	r3, [pc, #60]	; (e14 <serial_init+0x7c>)
     dd6:	2201      	movs	r2, #1
     dd8:	2103      	movs	r1, #3
     dda:	480f      	ldr	r0, [pc, #60]	; (e18 <serial_init+0x80>)
     ddc:	47a0      	blx	r4
	if (!uart_init(UART3_SERCOM, UART3_RXPO, UART3_TXPO, UART3_BAUD)) ret = false;
     dde:	002b      	movs	r3, r5
     de0:	2201      	movs	r2, #1
     de2:	2103      	movs	r1, #3
     de4:	480d      	ldr	r0, [pc, #52]	; (e1c <serial_init+0x84>)
     de6:	47a0      	blx	r4
	if (!uart_init(UART4_SERCOM, UART4_RXPO, UART4_TXPO, UART4_BAUD)) ret = false;
     de8:	2396      	movs	r3, #150	; 0x96
     dea:	015b      	lsls	r3, r3, #5
     dec:	2200      	movs	r2, #0
     dee:	2101      	movs	r1, #1
     df0:	480b      	ldr	r0, [pc, #44]	; (e20 <serial_init+0x88>)
     df2:	47a0      	blx	r4
    
	// init usb
	rtos_usb_init(USB_STACK_BASE, USB_STACK_SIZE);
     df4:	2180      	movs	r1, #128	; 0x80
     df6:	20e0      	movs	r0, #224	; 0xe0
     df8:	0049      	lsls	r1, r1, #1
     dfa:	00c0      	lsls	r0, r0, #3
     dfc:	4b09      	ldr	r3, [pc, #36]	; (e24 <serial_init+0x8c>)
     dfe:	4798      	blx	r3
	usb_attach();
     e00:	4b09      	ldr	r3, [pc, #36]	; (e28 <serial_init+0x90>)
     e02:	4798      	blx	r3
}
     e04:	bd70      	pop	{r4, r5, r6, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	000022f1 	.word	0x000022f1
     e0c:	42000800 	.word	0x42000800
     e10:	000029f9 	.word	0x000029f9
     e14:	000668a0 	.word	0x000668a0
     e18:	42000c00 	.word	0x42000c00
     e1c:	42001800 	.word	0x42001800
     e20:	42001c00 	.word	0x42001c00
     e24:	00004825 	.word	0x00004825
     e28:	0000314d 	.word	0x0000314d

00000e2c <serial_set_baud>:
bool serial_quit() {
    // will kill usb process which would remain running
    rtos_usb_quit();
}

bool serial_set_baud(Serial_Port_IDs port, uint32_t baud) {
     e2c:	b510      	push	{r4, lr}
    switch (port) {
     e2e:	2804      	cmp	r0, #4
     e30:	d803      	bhi.n	e3a <serial_set_baud+0xe>
     e32:	0080      	lsls	r0, r0, #2
     e34:	4b0d      	ldr	r3, [pc, #52]	; (e6c <serial_set_baud+0x40>)
     e36:	581b      	ldr	r3, [r3, r0]
     e38:	469f      	mov	pc, r3
     e3a:	2000      	movs	r0, #0
     e3c:	e014      	b.n	e68 <serial_set_baud+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_set_baud(UART1_SERCOM, baud);
     e3e:	480c      	ldr	r0, [pc, #48]	; (e70 <serial_set_baud+0x44>)
     e40:	4b0c      	ldr	r3, [pc, #48]	; (e74 <serial_set_baud+0x48>)
     e42:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     e44:	2001      	movs	r0, #1
        break;
     e46:	e00f      	b.n	e68 <serial_set_baud+0x3c>
        uart_set_baud(UART2_SERCOM, baud);
     e48:	480b      	ldr	r0, [pc, #44]	; (e78 <serial_set_baud+0x4c>)
     e4a:	4b0a      	ldr	r3, [pc, #40]	; (e74 <serial_set_baud+0x48>)
     e4c:	4798      	blx	r3
    return true;
     e4e:	2001      	movs	r0, #1
        break;
     e50:	e00a      	b.n	e68 <serial_set_baud+0x3c>
        uart_set_baud(UART3_SERCOM, baud);
     e52:	480a      	ldr	r0, [pc, #40]	; (e7c <serial_set_baud+0x50>)
     e54:	4b07      	ldr	r3, [pc, #28]	; (e74 <serial_set_baud+0x48>)
     e56:	4798      	blx	r3
    return true;
     e58:	2001      	movs	r0, #1
        break;
     e5a:	e005      	b.n	e68 <serial_set_baud+0x3c>
        uart_set_baud(UART4_SERCOM, baud);
     e5c:	4808      	ldr	r0, [pc, #32]	; (e80 <serial_set_baud+0x54>)
     e5e:	4b05      	ldr	r3, [pc, #20]	; (e74 <serial_set_baud+0x48>)
     e60:	4798      	blx	r3
    return true;
     e62:	2001      	movs	r0, #1
        break;
     e64:	e000      	b.n	e68 <serial_set_baud+0x3c>
    return true;
     e66:	2001      	movs	r0, #1
}
     e68:	bd10      	pop	{r4, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	000060b8 	.word	0x000060b8
     e70:	42000800 	.word	0x42000800
     e74:	00002991 	.word	0x00002991
     e78:	42000c00 	.word	0x42000c00
     e7c:	42001800 	.word	0x42001800
     e80:	42001c00 	.word	0x42001c00

00000e84 <serial_enable_interrupt>:

bool serial_enable_interrupt(Serial_Port_IDs port, void (*callback)(void)) {
     e84:	b510      	push	{r4, lr}
        switch (port) {
     e86:	2804      	cmp	r0, #4
     e88:	d803      	bhi.n	e92 <serial_enable_interrupt+0xe>
     e8a:	0080      	lsls	r0, r0, #2
     e8c:	4b0d      	ldr	r3, [pc, #52]	; (ec4 <serial_enable_interrupt+0x40>)
     e8e:	581b      	ldr	r3, [r3, r0]
     e90:	469f      	mov	pc, r3
     e92:	2000      	movs	r0, #0
     e94:	e014      	b.n	ec0 <serial_enable_interrupt+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_set_interrupt(UART1_SERCOM, callback);
     e96:	480c      	ldr	r0, [pc, #48]	; (ec8 <serial_enable_interrupt+0x44>)
     e98:	4b0c      	ldr	r3, [pc, #48]	; (ecc <serial_enable_interrupt+0x48>)
     e9a:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     e9c:	2001      	movs	r0, #1
        break;
     e9e:	e00f      	b.n	ec0 <serial_enable_interrupt+0x3c>
        uart_set_interrupt(UART2_SERCOM, callback);
     ea0:	480b      	ldr	r0, [pc, #44]	; (ed0 <serial_enable_interrupt+0x4c>)
     ea2:	4b0a      	ldr	r3, [pc, #40]	; (ecc <serial_enable_interrupt+0x48>)
     ea4:	4798      	blx	r3
    return true;
     ea6:	2001      	movs	r0, #1
        break;
     ea8:	e00a      	b.n	ec0 <serial_enable_interrupt+0x3c>
        uart_set_interrupt(UART3_SERCOM, callback);
     eaa:	480a      	ldr	r0, [pc, #40]	; (ed4 <serial_enable_interrupt+0x50>)
     eac:	4b07      	ldr	r3, [pc, #28]	; (ecc <serial_enable_interrupt+0x48>)
     eae:	4798      	blx	r3
    return true;
     eb0:	2001      	movs	r0, #1
        break;
     eb2:	e005      	b.n	ec0 <serial_enable_interrupt+0x3c>
        uart_set_interrupt(UART4_SERCOM, callback);
     eb4:	4808      	ldr	r0, [pc, #32]	; (ed8 <serial_enable_interrupt+0x54>)
     eb6:	4b05      	ldr	r3, [pc, #20]	; (ecc <serial_enable_interrupt+0x48>)
     eb8:	4798      	blx	r3
    return true;
     eba:	2001      	movs	r0, #1
        break;
     ebc:	e000      	b.n	ec0 <serial_enable_interrupt+0x3c>
    return true;
     ebe:	2001      	movs	r0, #1
}
     ec0:	bd10      	pop	{r4, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	000060cc 	.word	0x000060cc
     ec8:	42000800 	.word	0x42000800
     ecc:	00002a55 	.word	0x00002a55
     ed0:	42000c00 	.word	0x42000c00
     ed4:	42001800 	.word	0x42001800
     ed8:	42001c00 	.word	0x42001c00

00000edc <serial_write_start>:


bool serial_write_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     edc:	b570      	push	{r4, r5, r6, lr}
     ede:	000e      	movs	r6, r1
     ee0:	0013      	movs	r3, r2
    switch (port) {
     ee2:	2804      	cmp	r0, #4
     ee4:	d825      	bhi.n	f32 <serial_write_start+0x56>
     ee6:	0080      	lsls	r0, r0, #2
     ee8:	4d13      	ldr	r5, [pc, #76]	; (f38 <serial_write_start+0x5c>)
     eea:	582c      	ldr	r4, [r5, r0]
     eec:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_send_buffer(buffer, count);
     eee:	0011      	movs	r1, r2
     ef0:	0030      	movs	r0, r6
     ef2:	4b12      	ldr	r3, [pc, #72]	; (f3c <serial_write_start+0x60>)
     ef4:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     ef6:	2001      	movs	r0, #1
}
     ef8:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_send_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     efa:	4911      	ldr	r1, [pc, #68]	; (f40 <serial_write_start+0x64>)
     efc:	0032      	movs	r2, r6
     efe:	4811      	ldr	r0, [pc, #68]	; (f44 <serial_write_start+0x68>)
     f00:	4c11      	ldr	r4, [pc, #68]	; (f48 <serial_write_start+0x6c>)
     f02:	47a0      	blx	r4
    return true;
     f04:	2001      	movs	r0, #1
        break;
     f06:	e7f7      	b.n	ef8 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     f08:	4910      	ldr	r1, [pc, #64]	; (f4c <serial_write_start+0x70>)
     f0a:	0032      	movs	r2, r6
     f0c:	4810      	ldr	r0, [pc, #64]	; (f50 <serial_write_start+0x74>)
     f0e:	4c0e      	ldr	r4, [pc, #56]	; (f48 <serial_write_start+0x6c>)
     f10:	47a0      	blx	r4
    return true;
     f12:	2001      	movs	r0, #1
        break;
     f14:	e7f0      	b.n	ef8 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     f16:	490f      	ldr	r1, [pc, #60]	; (f54 <serial_write_start+0x78>)
     f18:	0032      	movs	r2, r6
     f1a:	480f      	ldr	r0, [pc, #60]	; (f58 <serial_write_start+0x7c>)
     f1c:	4c0a      	ldr	r4, [pc, #40]	; (f48 <serial_write_start+0x6c>)
     f1e:	47a0      	blx	r4
    return true;
     f20:	2001      	movs	r0, #1
        break;
     f22:	e7e9      	b.n	ef8 <serial_write_start+0x1c>
        rtos_uart_start_send_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
     f24:	490d      	ldr	r1, [pc, #52]	; (f5c <serial_write_start+0x80>)
     f26:	0032      	movs	r2, r6
     f28:	480d      	ldr	r0, [pc, #52]	; (f60 <serial_write_start+0x84>)
     f2a:	4c07      	ldr	r4, [pc, #28]	; (f48 <serial_write_start+0x6c>)
     f2c:	47a0      	blx	r4
    return true;
     f2e:	2001      	movs	r0, #1
        break;
     f30:	e7e2      	b.n	ef8 <serial_write_start+0x1c>
    switch (port) {
     f32:	2000      	movs	r0, #0
     f34:	e7e0      	b.n	ef8 <serial_write_start+0x1c>
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	000060e0 	.word	0x000060e0
     f3c:	000048cd 	.word	0x000048cd
     f40:	00006158 	.word	0x00006158
     f44:	42000800 	.word	0x42000800
     f48:	000045e9 	.word	0x000045e9
     f4c:	00006160 	.word	0x00006160
     f50:	42000c00 	.word	0x42000c00
     f54:	00006168 	.word	0x00006168
     f58:	42001800 	.word	0x42001800
     f5c:	00006170 	.word	0x00006170
     f60:	42001c00 	.word	0x42001c00

00000f64 <serial_write_wait_until_complete>:

bool serial_write_wait_until_complete(Serial_Port_IDs port) {
     f64:	b510      	push	{r4, lr}
    switch (port) {
     f66:	2804      	cmp	r0, #4
     f68:	d81b      	bhi.n	fa2 <serial_write_wait_until_complete+0x3e>
     f6a:	0080      	lsls	r0, r0, #2
     f6c:	4b0e      	ldr	r3, [pc, #56]	; (fa8 <serial_write_wait_until_complete+0x44>)
     f6e:	581b      	ldr	r3, [r3, r0]
     f70:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_send_complete();
     f72:	4b0e      	ldr	r3, [pc, #56]	; (fac <serial_write_wait_until_complete+0x48>)
     f74:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     f76:	2001      	movs	r0, #1
}
     f78:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_send_complete(&uart1_descriptor);
     f7a:	480d      	ldr	r0, [pc, #52]	; (fb0 <serial_write_wait_until_complete+0x4c>)
     f7c:	4b0d      	ldr	r3, [pc, #52]	; (fb4 <serial_write_wait_until_complete+0x50>)
     f7e:	4798      	blx	r3
    return true;
     f80:	2001      	movs	r0, #1
        break;
     f82:	e7f9      	b.n	f78 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart2_descriptor);
     f84:	480c      	ldr	r0, [pc, #48]	; (fb8 <serial_write_wait_until_complete+0x54>)
     f86:	4b0b      	ldr	r3, [pc, #44]	; (fb4 <serial_write_wait_until_complete+0x50>)
     f88:	4798      	blx	r3
    return true;
     f8a:	2001      	movs	r0, #1
        break;
     f8c:	e7f4      	b.n	f78 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart3_descriptor);
     f8e:	480b      	ldr	r0, [pc, #44]	; (fbc <serial_write_wait_until_complete+0x58>)
     f90:	4b08      	ldr	r3, [pc, #32]	; (fb4 <serial_write_wait_until_complete+0x50>)
     f92:	4798      	blx	r3
    return true;
     f94:	2001      	movs	r0, #1
        break;
     f96:	e7ef      	b.n	f78 <serial_write_wait_until_complete+0x14>
        rtos_uart_wait_until_send_complete(&uart4_descriptor);
     f98:	4809      	ldr	r0, [pc, #36]	; (fc0 <serial_write_wait_until_complete+0x5c>)
     f9a:	4b06      	ldr	r3, [pc, #24]	; (fb4 <serial_write_wait_until_complete+0x50>)
     f9c:	4798      	blx	r3
    return true;
     f9e:	2001      	movs	r0, #1
        break;
     fa0:	e7ea      	b.n	f78 <serial_write_wait_until_complete+0x14>
    switch (port) {
     fa2:	2000      	movs	r0, #0
     fa4:	e7e8      	b.n	f78 <serial_write_wait_until_complete+0x14>
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	000060f4 	.word	0x000060f4
     fac:	00004919 	.word	0x00004919
     fb0:	00006158 	.word	0x00006158
     fb4:	00004659 	.word	0x00004659
     fb8:	00006160 	.word	0x00006160
     fbc:	00006168 	.word	0x00006168
     fc0:	00006170 	.word	0x00006170

00000fc4 <serial_read_start>:


bool serial_read_start(Serial_Port_IDs port, uint8_t* buffer, int count) {
     fc4:	b570      	push	{r4, r5, r6, lr}
     fc6:	000e      	movs	r6, r1
     fc8:	0013      	movs	r3, r2
    switch (port) {
     fca:	2804      	cmp	r0, #4
     fcc:	d825      	bhi.n	101a <serial_read_start+0x56>
     fce:	0080      	lsls	r0, r0, #2
     fd0:	4d13      	ldr	r5, [pc, #76]	; (1020 <serial_read_start+0x5c>)
     fd2:	582c      	ldr	r4, [r5, r0]
     fd4:	46a7      	mov	pc, r4
        case PORT0:
        rtos_usb_start_read_buffer(buffer, count);
     fd6:	0011      	movs	r1, r2
     fd8:	0030      	movs	r0, r6
     fda:	4b12      	ldr	r3, [pc, #72]	; (1024 <serial_read_start+0x60>)
     fdc:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
     fde:	2001      	movs	r0, #1
}
     fe0:	bd70      	pop	{r4, r5, r6, pc}
        rtos_uart_start_read_buffer(UART1_SERCOM, &uart1_descriptor, buffer, count);
     fe2:	4911      	ldr	r1, [pc, #68]	; (1028 <serial_read_start+0x64>)
     fe4:	0032      	movs	r2, r6
     fe6:	4811      	ldr	r0, [pc, #68]	; (102c <serial_read_start+0x68>)
     fe8:	4c11      	ldr	r4, [pc, #68]	; (1030 <serial_read_start+0x6c>)
     fea:	47a0      	blx	r4
    return true;
     fec:	2001      	movs	r0, #1
        break;
     fee:	e7f7      	b.n	fe0 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART2_SERCOM, &uart2_descriptor, buffer, count);
     ff0:	4910      	ldr	r1, [pc, #64]	; (1034 <serial_read_start+0x70>)
     ff2:	0032      	movs	r2, r6
     ff4:	4810      	ldr	r0, [pc, #64]	; (1038 <serial_read_start+0x74>)
     ff6:	4c0e      	ldr	r4, [pc, #56]	; (1030 <serial_read_start+0x6c>)
     ff8:	47a0      	blx	r4
    return true;
     ffa:	2001      	movs	r0, #1
        break;
     ffc:	e7f0      	b.n	fe0 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART3_SERCOM, &uart3_descriptor, buffer, count);
     ffe:	490f      	ldr	r1, [pc, #60]	; (103c <serial_read_start+0x78>)
    1000:	0032      	movs	r2, r6
    1002:	480f      	ldr	r0, [pc, #60]	; (1040 <serial_read_start+0x7c>)
    1004:	4c0a      	ldr	r4, [pc, #40]	; (1030 <serial_read_start+0x6c>)
    1006:	47a0      	blx	r4
    return true;
    1008:	2001      	movs	r0, #1
        break;
    100a:	e7e9      	b.n	fe0 <serial_read_start+0x1c>
        rtos_uart_start_read_buffer(UART4_SERCOM, &uart4_descriptor, buffer, count);
    100c:	490d      	ldr	r1, [pc, #52]	; (1044 <serial_read_start+0x80>)
    100e:	0032      	movs	r2, r6
    1010:	480d      	ldr	r0, [pc, #52]	; (1048 <serial_read_start+0x84>)
    1012:	4c07      	ldr	r4, [pc, #28]	; (1030 <serial_read_start+0x6c>)
    1014:	47a0      	blx	r4
    return true;
    1016:	2001      	movs	r0, #1
        break;
    1018:	e7e2      	b.n	fe0 <serial_read_start+0x1c>
    switch (port) {
    101a:	2000      	movs	r0, #0
    101c:	e7e0      	b.n	fe0 <serial_read_start+0x1c>
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00006108 	.word	0x00006108
    1024:	00004935 	.word	0x00004935
    1028:	00006158 	.word	0x00006158
    102c:	42000800 	.word	0x42000800
    1030:	00004669 	.word	0x00004669
    1034:	00006160 	.word	0x00006160
    1038:	42000c00 	.word	0x42000c00
    103c:	00006168 	.word	0x00006168
    1040:	42001800 	.word	0x42001800
    1044:	00006170 	.word	0x00006170
    1048:	42001c00 	.word	0x42001c00

0000104c <serial_read_wait_until_complete>:

bool serial_read_wait_until_complete(Serial_Port_IDs port) {
    104c:	b510      	push	{r4, lr}
    switch (port) {
    104e:	2804      	cmp	r0, #4
    1050:	d81b      	bhi.n	108a <serial_read_wait_until_complete+0x3e>
    1052:	0080      	lsls	r0, r0, #2
    1054:	4b0e      	ldr	r3, [pc, #56]	; (1090 <serial_read_wait_until_complete+0x44>)
    1056:	581b      	ldr	r3, [r3, r0]
    1058:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete();
    105a:	4b0e      	ldr	r3, [pc, #56]	; (1094 <serial_read_wait_until_complete+0x48>)
    105c:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    105e:	2001      	movs	r0, #1
}
    1060:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete(&uart1_descriptor);
    1062:	480d      	ldr	r0, [pc, #52]	; (1098 <serial_read_wait_until_complete+0x4c>)
    1064:	4b0d      	ldr	r3, [pc, #52]	; (109c <serial_read_wait_until_complete+0x50>)
    1066:	4798      	blx	r3
    return true;
    1068:	2001      	movs	r0, #1
        break;
    106a:	e7f9      	b.n	1060 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart2_descriptor);
    106c:	480c      	ldr	r0, [pc, #48]	; (10a0 <serial_read_wait_until_complete+0x54>)
    106e:	4b0b      	ldr	r3, [pc, #44]	; (109c <serial_read_wait_until_complete+0x50>)
    1070:	4798      	blx	r3
    return true;
    1072:	2001      	movs	r0, #1
        break;
    1074:	e7f4      	b.n	1060 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart3_descriptor);
    1076:	480b      	ldr	r0, [pc, #44]	; (10a4 <serial_read_wait_until_complete+0x58>)
    1078:	4b08      	ldr	r3, [pc, #32]	; (109c <serial_read_wait_until_complete+0x50>)
    107a:	4798      	blx	r3
    return true;
    107c:	2001      	movs	r0, #1
        break;
    107e:	e7ef      	b.n	1060 <serial_read_wait_until_complete+0x14>
        rtos_uart_wait_until_read_complete(&uart4_descriptor);
    1080:	4809      	ldr	r0, [pc, #36]	; (10a8 <serial_read_wait_until_complete+0x5c>)
    1082:	4b06      	ldr	r3, [pc, #24]	; (109c <serial_read_wait_until_complete+0x50>)
    1084:	4798      	blx	r3
    return true;
    1086:	2001      	movs	r0, #1
        break;
    1088:	e7ea      	b.n	1060 <serial_read_wait_until_complete+0x14>
    switch (port) {
    108a:	2000      	movs	r0, #0
    108c:	e7e8      	b.n	1060 <serial_read_wait_until_complete+0x14>
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	0000611c 	.word	0x0000611c
    1094:	0000496d 	.word	0x0000496d
    1098:	00006158 	.word	0x00006158
    109c:	000046d9 	.word	0x000046d9
    10a0:	00006160 	.word	0x00006160
    10a4:	00006168 	.word	0x00006168
    10a8:	00006170 	.word	0x00006170

000010ac <serial_read_start_infinite>:

bool serial_read_start_infinite(Serial_Port_IDs port, uint8_t* buffer, int count) {
    10ac:	b510      	push	{r4, lr}
    10ae:	0013      	movs	r3, r2
    switch (port) {
    10b0:	2803      	cmp	r0, #3
    10b2:	d022      	beq.n	10fa <serial_read_start_infinite+0x4e>
    10b4:	d80d      	bhi.n	10d2 <serial_read_start_infinite+0x26>
    10b6:	2801      	cmp	r0, #1
    10b8:	d017      	beq.n	10ea <serial_read_start_infinite+0x3e>
    10ba:	2802      	cmp	r0, #2
    10bc:	d107      	bne.n	10ce <serial_read_start_infinite+0x22>
        case PORT1:
        rtos_uart_start_read_buffer_infinite(UART1_SERCOM, &uart1_descriptor, buffer, count);
        break;

        case PORT2:
        rtos_uart_start_read_buffer_infinite(UART2_SERCOM, &uart2_descriptor, buffer, count);
    10be:	4813      	ldr	r0, [pc, #76]	; (110c <serial_read_start_infinite+0x60>)
    10c0:	000a      	movs	r2, r1
    10c2:	0001      	movs	r1, r0
    10c4:	4812      	ldr	r0, [pc, #72]	; (1110 <serial_read_start_infinite+0x64>)
    10c6:	4c13      	ldr	r4, [pc, #76]	; (1114 <serial_read_start_infinite+0x68>)
    10c8:	47a0      	blx	r4
        default:
        return false;
        break;
    }

    return true;
    10ca:	2001      	movs	r0, #1
        break;
    10cc:	e00c      	b.n	10e8 <serial_read_start_infinite+0x3c>
    switch (port) {
    10ce:	2000      	movs	r0, #0
    10d0:	e00a      	b.n	10e8 <serial_read_start_infinite+0x3c>
    10d2:	2804      	cmp	r0, #4
    10d4:	d107      	bne.n	10e6 <serial_read_start_infinite+0x3a>
        rtos_uart_start_read_buffer_infinite(UART4_SERCOM, &uart4_descriptor, buffer, count);
    10d6:	4810      	ldr	r0, [pc, #64]	; (1118 <serial_read_start_infinite+0x6c>)
    10d8:	000a      	movs	r2, r1
    10da:	0001      	movs	r1, r0
    10dc:	480f      	ldr	r0, [pc, #60]	; (111c <serial_read_start_infinite+0x70>)
    10de:	4c0d      	ldr	r4, [pc, #52]	; (1114 <serial_read_start_infinite+0x68>)
    10e0:	47a0      	blx	r4
    return true;
    10e2:	2001      	movs	r0, #1
        break;
    10e4:	e000      	b.n	10e8 <serial_read_start_infinite+0x3c>
    switch (port) {
    10e6:	2000      	movs	r0, #0
}
    10e8:	bd10      	pop	{r4, pc}
        rtos_uart_start_read_buffer_infinite(UART1_SERCOM, &uart1_descriptor, buffer, count);
    10ea:	480d      	ldr	r0, [pc, #52]	; (1120 <serial_read_start_infinite+0x74>)
    10ec:	000a      	movs	r2, r1
    10ee:	0001      	movs	r1, r0
    10f0:	480c      	ldr	r0, [pc, #48]	; (1124 <serial_read_start_infinite+0x78>)
    10f2:	4c08      	ldr	r4, [pc, #32]	; (1114 <serial_read_start_infinite+0x68>)
    10f4:	47a0      	blx	r4
    return true;
    10f6:	2001      	movs	r0, #1
        break;
    10f8:	e7f6      	b.n	10e8 <serial_read_start_infinite+0x3c>
        rtos_uart_start_read_buffer_infinite(UART3_SERCOM, &uart3_descriptor, buffer, count);
    10fa:	480b      	ldr	r0, [pc, #44]	; (1128 <serial_read_start_infinite+0x7c>)
    10fc:	000a      	movs	r2, r1
    10fe:	0001      	movs	r1, r0
    1100:	480a      	ldr	r0, [pc, #40]	; (112c <serial_read_start_infinite+0x80>)
    1102:	4c04      	ldr	r4, [pc, #16]	; (1114 <serial_read_start_infinite+0x68>)
    1104:	47a0      	blx	r4
    return true;
    1106:	2001      	movs	r0, #1
        break;
    1108:	e7ee      	b.n	10e8 <serial_read_start_infinite+0x3c>
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	00006160 	.word	0x00006160
    1110:	42000c00 	.word	0x42000c00
    1114:	00004705 	.word	0x00004705
    1118:	00006170 	.word	0x00006170
    111c:	42001c00 	.word	0x42001c00
    1120:	00006158 	.word	0x00006158
    1124:	42000800 	.word	0x42000800
    1128:	00006168 	.word	0x00006168
    112c:	42001800 	.word	0x42001800

00001130 <serial_read_wait_until_complete_or_timeout>:

bool serial_read_wait_until_complete_or_timeout(Serial_Port_IDs port, uint32_t timeout_ms) {
    1130:	b510      	push	{r4, lr}
    switch (port) {
    1132:	2804      	cmp	r0, #4
    1134:	d827      	bhi.n	1186 <serial_read_wait_until_complete_or_timeout+0x56>
    1136:	0080      	lsls	r0, r0, #2
    1138:	4b14      	ldr	r3, [pc, #80]	; (118c <serial_read_wait_until_complete_or_timeout+0x5c>)
    113a:	581b      	ldr	r3, [r3, r0]
    113c:	469f      	mov	pc, r3
        case PORT0:
        rtos_usb_wait_until_read_complete(); // USB doesn't time out
    113e:	4b14      	ldr	r3, [pc, #80]	; (1190 <serial_read_wait_until_complete_or_timeout+0x60>)
    1140:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    1142:	2001      	movs	r0, #1
}
    1144:	bd10      	pop	{r4, pc}
        rtos_uart_wait_until_read_complete_or_timeout(&uart1_descriptor, timeout_ms * time_ticks_ms_mult);
    1146:	4b13      	ldr	r3, [pc, #76]	; (1194 <serial_read_wait_until_complete_or_timeout+0x64>)
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	4359      	muls	r1, r3
    114c:	4812      	ldr	r0, [pc, #72]	; (1198 <serial_read_wait_until_complete_or_timeout+0x68>)
    114e:	4b13      	ldr	r3, [pc, #76]	; (119c <serial_read_wait_until_complete_or_timeout+0x6c>)
    1150:	4798      	blx	r3
    return true;
    1152:	2001      	movs	r0, #1
        break;
    1154:	e7f6      	b.n	1144 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart2_descriptor, timeout_ms * time_ticks_ms_mult);
    1156:	4b0f      	ldr	r3, [pc, #60]	; (1194 <serial_read_wait_until_complete_or_timeout+0x64>)
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	4359      	muls	r1, r3
    115c:	4810      	ldr	r0, [pc, #64]	; (11a0 <serial_read_wait_until_complete_or_timeout+0x70>)
    115e:	4b0f      	ldr	r3, [pc, #60]	; (119c <serial_read_wait_until_complete_or_timeout+0x6c>)
    1160:	4798      	blx	r3
    return true;
    1162:	2001      	movs	r0, #1
        break;
    1164:	e7ee      	b.n	1144 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart3_descriptor, timeout_ms * time_ticks_ms_mult);
    1166:	4b0b      	ldr	r3, [pc, #44]	; (1194 <serial_read_wait_until_complete_or_timeout+0x64>)
    1168:	681b      	ldr	r3, [r3, #0]
    116a:	4359      	muls	r1, r3
    116c:	480d      	ldr	r0, [pc, #52]	; (11a4 <serial_read_wait_until_complete_or_timeout+0x74>)
    116e:	4b0b      	ldr	r3, [pc, #44]	; (119c <serial_read_wait_until_complete_or_timeout+0x6c>)
    1170:	4798      	blx	r3
    return true;
    1172:	2001      	movs	r0, #1
        break;
    1174:	e7e6      	b.n	1144 <serial_read_wait_until_complete_or_timeout+0x14>
        rtos_uart_wait_until_read_complete_or_timeout(&uart4_descriptor, timeout_ms * time_ticks_ms_mult);
    1176:	4b07      	ldr	r3, [pc, #28]	; (1194 <serial_read_wait_until_complete_or_timeout+0x64>)
    1178:	681b      	ldr	r3, [r3, #0]
    117a:	4359      	muls	r1, r3
    117c:	480a      	ldr	r0, [pc, #40]	; (11a8 <serial_read_wait_until_complete_or_timeout+0x78>)
    117e:	4b07      	ldr	r3, [pc, #28]	; (119c <serial_read_wait_until_complete_or_timeout+0x6c>)
    1180:	4798      	blx	r3
    return true;
    1182:	2001      	movs	r0, #1
        break;
    1184:	e7de      	b.n	1144 <serial_read_wait_until_complete_or_timeout+0x14>
    switch (port) {
    1186:	2000      	movs	r0, #0
    1188:	e7dc      	b.n	1144 <serial_read_wait_until_complete_or_timeout+0x14>
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00006130 	.word	0x00006130
    1190:	0000496d 	.word	0x0000496d
    1194:	0000636c 	.word	0x0000636c
    1198:	00006158 	.word	0x00006158
    119c:	000046e9 	.word	0x000046e9
    11a0:	00006160 	.word	0x00006160
    11a4:	00006168 	.word	0x00006168
    11a8:	00006170 	.word	0x00006170

000011ac <serial_flush>:

bool serial_flush(Serial_Port_IDs port) {
    11ac:	b510      	push	{r4, lr}
    switch (port) {
    11ae:	2804      	cmp	r0, #4
    11b0:	d803      	bhi.n	11ba <serial_flush+0xe>
    11b2:	0080      	lsls	r0, r0, #2
    11b4:	4b0d      	ldr	r3, [pc, #52]	; (11ec <serial_flush+0x40>)
    11b6:	581b      	ldr	r3, [r3, r0]
    11b8:	469f      	mov	pc, r3
    11ba:	2000      	movs	r0, #0
    11bc:	e014      	b.n	11e8 <serial_flush+0x3c>
        case PORT0:
        break;

        case PORT1:
        uart_flush(UART1_SERCOM);
    11be:	480c      	ldr	r0, [pc, #48]	; (11f0 <serial_flush+0x44>)
    11c0:	4b0c      	ldr	r3, [pc, #48]	; (11f4 <serial_flush+0x48>)
    11c2:	4798      	blx	r3
        default:
        return false;
        break;
    }

    return true;
    11c4:	2001      	movs	r0, #1
        break;
    11c6:	e00f      	b.n	11e8 <serial_flush+0x3c>
        uart_flush(UART2_SERCOM);
    11c8:	480b      	ldr	r0, [pc, #44]	; (11f8 <serial_flush+0x4c>)
    11ca:	4b0a      	ldr	r3, [pc, #40]	; (11f4 <serial_flush+0x48>)
    11cc:	4798      	blx	r3
    return true;
    11ce:	2001      	movs	r0, #1
        break;
    11d0:	e00a      	b.n	11e8 <serial_flush+0x3c>
        uart_flush(UART3_SERCOM);
    11d2:	480a      	ldr	r0, [pc, #40]	; (11fc <serial_flush+0x50>)
    11d4:	4b07      	ldr	r3, [pc, #28]	; (11f4 <serial_flush+0x48>)
    11d6:	4798      	blx	r3
    return true;
    11d8:	2001      	movs	r0, #1
        break;
    11da:	e005      	b.n	11e8 <serial_flush+0x3c>
        uart_flush(UART4_SERCOM);
    11dc:	4808      	ldr	r0, [pc, #32]	; (1200 <serial_flush+0x54>)
    11de:	4b05      	ldr	r3, [pc, #20]	; (11f4 <serial_flush+0x48>)
    11e0:	4798      	blx	r3
    return true;
    11e2:	2001      	movs	r0, #1
        break;
    11e4:	e000      	b.n	11e8 <serial_flush+0x3c>
    return true;
    11e6:	2001      	movs	r0, #1
    11e8:	bd10      	pop	{r4, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	00006144 	.word	0x00006144
    11f0:	42000800 	.word	0x42000800
    11f4:	00002ad5 	.word	0x00002ad5
    11f8:	42000c00 	.word	0x42000c00
    11fc:	42001800 	.word	0x42001800
    1200:	42001c00 	.word	0x42001c00

00001204 <buzzer>:
	serial_quit();
}

volatile int usb_int_counter = 0;

void buzzer() {
    1204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1206:	46ce      	mov	lr, r9
    1208:	4647      	mov	r7, r8
    120a:	b580      	push	{r7, lr}
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
    120c:	2106      	movs	r1, #6
    120e:	482a      	ldr	r0, [pc, #168]	; (12b8 <buzzer+0xb4>)
    1210:	4b2a      	ldr	r3, [pc, #168]	; (12bc <buzzer+0xb8>)
    1212:	4798      	blx	r3
    1214:	2800      	cmp	r0, #0
    1216:	d019      	beq.n	124c <buzzer+0x48>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
    1218:	4929      	ldr	r1, [pc, #164]	; (12c0 <buzzer+0xbc>)
    121a:	4827      	ldr	r0, [pc, #156]	; (12b8 <buzzer+0xb4>)
    121c:	4b29      	ldr	r3, [pc, #164]	; (12c4 <buzzer+0xc0>)
    121e:	4798      	blx	r3
    1220:	2800      	cmp	r0, #0
    1222:	d016      	beq.n	1252 <buzzer+0x4e>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
    1224:	2200      	movs	r2, #0
    1226:	2101      	movs	r1, #1
    1228:	4823      	ldr	r0, [pc, #140]	; (12b8 <buzzer+0xb4>)
    122a:	4b27      	ldr	r3, [pc, #156]	; (12c8 <buzzer+0xc4>)
    122c:	4798      	blx	r3
    122e:	2800      	cmp	r0, #0
    1230:	d012      	beq.n	1258 <buzzer+0x54>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
    1232:	4821      	ldr	r0, [pc, #132]	; (12b8 <buzzer+0xb4>)
    1234:	4b25      	ldr	r3, [pc, #148]	; (12cc <buzzer+0xc8>)
    1236:	4798      	blx	r3
    1238:	2800      	cmp	r0, #0
    123a:	d010      	beq.n	125e <buzzer+0x5a>
	
	port_wrconfig(PORT_PORTB, PORT_PMUX_E, PORT_PB23);
    123c:	2280      	movs	r2, #128	; 0x80
    123e:	0412      	lsls	r2, r2, #16
    1240:	2104      	movs	r1, #4
    1242:	2001      	movs	r0, #1
    1244:	4b22      	ldr	r3, [pc, #136]	; (12d0 <buzzer+0xcc>)
    1246:	4798      	blx	r3
	
	for (int i = 0; i < 2; ++i) {
    1248:	2500      	movs	r5, #0
    124a:	e02e      	b.n	12aa <buzzer+0xa6>
	if (!pwm_init_tc(TC7_REGS, PWM_PRESCALER_DIV256)) SOS();
    124c:	4b21      	ldr	r3, [pc, #132]	; (12d4 <buzzer+0xd0>)
    124e:	4798      	blx	r3
    1250:	e7e2      	b.n	1218 <buzzer+0x14>
	if (!pwm_set_frequency_tc(TC7_REGS, 2825)) SOS();
    1252:	4b20      	ldr	r3, [pc, #128]	; (12d4 <buzzer+0xd0>)
    1254:	4798      	blx	r3
    1256:	e7e5      	b.n	1224 <buzzer+0x20>
	if (!pwm_set_duty_tc(TC7_REGS, 1, 0.0f)) SOS();
    1258:	4b1e      	ldr	r3, [pc, #120]	; (12d4 <buzzer+0xd0>)
    125a:	4798      	blx	r3
    125c:	e7e9      	b.n	1232 <buzzer+0x2e>
	if (!pwm_enable_tc(TC7_REGS)) SOS();
    125e:	4b1d      	ldr	r3, [pc, #116]	; (12d4 <buzzer+0xd0>)
    1260:	4798      	blx	r3
    1262:	e7eb      	b.n	123c <buzzer+0x38>
		pwm_set_duty_tc(TC7_REGS, 1, 0.5f);
    1264:	4b14      	ldr	r3, [pc, #80]	; (12b8 <buzzer+0xb4>)
    1266:	4698      	mov	r8, r3
    1268:	22fc      	movs	r2, #252	; 0xfc
    126a:	0592      	lsls	r2, r2, #22
    126c:	2101      	movs	r1, #1
    126e:	0018      	movs	r0, r3
    1270:	4f15      	ldr	r7, [pc, #84]	; (12c8 <buzzer+0xc4>)
    1272:	47b8      	blx	r7
		led_on();
    1274:	2680      	movs	r6, #128	; 0x80
    1276:	03f6      	lsls	r6, r6, #15
    1278:	0031      	movs	r1, r6
    127a:	2001      	movs	r0, #1
    127c:	4b16      	ldr	r3, [pc, #88]	; (12d8 <buzzer+0xd4>)
    127e:	4798      	blx	r3
		rtos_delay_ms(75);
    1280:	4b16      	ldr	r3, [pc, #88]	; (12dc <buzzer+0xd8>)
    1282:	681a      	ldr	r2, [r3, #0]
    1284:	0093      	lsls	r3, r2, #2
    1286:	189b      	adds	r3, r3, r2
    1288:	011c      	lsls	r4, r3, #4
    128a:	1ae4      	subs	r4, r4, r3
    128c:	0020      	movs	r0, r4
    128e:	4b14      	ldr	r3, [pc, #80]	; (12e0 <buzzer+0xdc>)
    1290:	4699      	mov	r9, r3
    1292:	4798      	blx	r3
		pwm_set_duty_tc(TC7_REGS, 1, 0.0f);
    1294:	2200      	movs	r2, #0
    1296:	2101      	movs	r1, #1
    1298:	4640      	mov	r0, r8
    129a:	47b8      	blx	r7
		led_off();
    129c:	0031      	movs	r1, r6
    129e:	2001      	movs	r0, #1
    12a0:	4b10      	ldr	r3, [pc, #64]	; (12e4 <buzzer+0xe0>)
    12a2:	4798      	blx	r3
		rtos_delay_ms(75);
    12a4:	0020      	movs	r0, r4
    12a6:	47c8      	blx	r9
	for (int i = 0; i < 2; ++i) {
    12a8:	3501      	adds	r5, #1
    12aa:	2d01      	cmp	r5, #1
    12ac:	ddda      	ble.n	1264 <buzzer+0x60>
	// 	led_on();
	// 	rtos_delay_ms(200);
	// 	led_off();
	// 	rtos_delay_ms(200);
	// }
    12ae:	bcc0      	pop	{r6, r7}
    12b0:	46b9      	mov	r9, r7
    12b2:	46b0      	mov	r8, r6
    12b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	42003c00 	.word	0x42003c00
    12bc:	0000233d 	.word	0x0000233d
    12c0:	45309000 	.word	0x45309000
    12c4:	000024a1 	.word	0x000024a1
    12c8:	0000252d 	.word	0x0000252d
    12cc:	00002411 	.word	0x00002411
    12d0:	000022f1 	.word	0x000022f1
    12d4:	00003609 	.word	0x00003609
    12d8:	000022d1 	.word	0x000022d1
    12dc:	0000636c 	.word	0x0000636c
    12e0:	00003b65 	.word	0x00003b65
    12e4:	000022e1 	.word	0x000022e1

000012e8 <selftest>:
bool selftest() {
    12e8:	b570      	push	{r4, r5, r6, lr}
	if (!check_imu()) pass = false;
    12ea:	4b0a      	ldr	r3, [pc, #40]	; (1314 <selftest+0x2c>)
    12ec:	4798      	blx	r3
    12ee:	0004      	movs	r4, r0
	if (!baro_check(&baro_desc)) pass = false;
    12f0:	4809      	ldr	r0, [pc, #36]	; (1318 <selftest+0x30>)
    12f2:	4b0a      	ldr	r3, [pc, #40]	; (131c <selftest+0x34>)
    12f4:	4798      	blx	r3
    12f6:	1e05      	subs	r5, r0, #0
    12f8:	d000      	beq.n	12fc <selftest+0x14>
    12fa:	0025      	movs	r5, r4
	if (!check_eeprom()) pass = false;
    12fc:	4b08      	ldr	r3, [pc, #32]	; (1320 <selftest+0x38>)
    12fe:	4798      	blx	r3
    1300:	1e04      	subs	r4, r0, #0
    1302:	d000      	beq.n	1306 <selftest+0x1e>
    1304:	002c      	movs	r4, r5
	if (!flash_check(&flash_desc)) pass = false;
    1306:	4807      	ldr	r0, [pc, #28]	; (1324 <selftest+0x3c>)
    1308:	4b07      	ldr	r3, [pc, #28]	; (1328 <selftest+0x40>)
    130a:	4798      	blx	r3
    130c:	2800      	cmp	r0, #0
    130e:	d000      	beq.n	1312 <selftest+0x2a>
    1310:	0020      	movs	r0, r4
}
    1312:	bd70      	pop	{r4, r5, r6, pc}
    1314:	00000ab5 	.word	0x00000ab5
    1318:	2000039c 	.word	0x2000039c
    131c:	0000194d 	.word	0x0000194d
    1320:	000009c5 	.word	0x000009c5
    1324:	200003b8 	.word	0x200003b8
    1328:	00001de1 	.word	0x00001de1

0000132c <init>:
bool init() {
    132c:	b570      	push	{r4, r5, r6, lr}
    132e:	b084      	sub	sp, #16
	port_wrconfig(SPI_PORT_A, SPI_PMUX_A, SPI_PINS_A);
    1330:	22c0      	movs	r2, #192	; 0xc0
    1332:	0412      	lsls	r2, r2, #16
    1334:	2102      	movs	r1, #2
    1336:	2000      	movs	r0, #0
    1338:	4c39      	ldr	r4, [pc, #228]	; (1420 <init+0xf4>)
    133a:	47a0      	blx	r4
	port_wrconfig(SPI_PORT_B, SPI_PMUX_B, SPI_PINS_B);
    133c:	2280      	movs	r2, #128	; 0x80
    133e:	0352      	lsls	r2, r2, #13
    1340:	2103      	movs	r1, #3
    1342:	2000      	movs	r0, #0
    1344:	47a0      	blx	r4
	port_set(BARO_SS_PORT, BARO_SS_PIN);
    1346:	2480      	movs	r4, #128	; 0x80
    1348:	0564      	lsls	r4, r4, #21
    134a:	0021      	movs	r1, r4
    134c:	2000      	movs	r0, #0
    134e:	4e35      	ldr	r6, [pc, #212]	; (1424 <init+0xf8>)
    1350:	47b0      	blx	r6
	port_set(FLASH_SS_PORT, FLASH_SS_PIN);
    1352:	2580      	movs	r5, #128	; 0x80
    1354:	062d      	lsls	r5, r5, #24
    1356:	0029      	movs	r1, r5
    1358:	2001      	movs	r0, #1
    135a:	47b0      	blx	r6
	port_set_output(BARO_SS_PORT, BARO_SS_PIN);
    135c:	0021      	movs	r1, r4
    135e:	2000      	movs	r0, #0
    1360:	4c31      	ldr	r4, [pc, #196]	; (1428 <init+0xfc>)
    1362:	47a0      	blx	r4
	port_set_output(FLASH_SS_PORT, FLASH_SS_PIN);
    1364:	0029      	movs	r1, r5
    1366:	2001      	movs	r0, #1
    1368:	47a0      	blx	r4
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    136a:	4b30      	ldr	r3, [pc, #192]	; (142c <init+0x100>)
    136c:	9301      	str	r3, [sp, #4]
    136e:	2300      	movs	r3, #0
    1370:	9300      	str	r3, [sp, #0]
    1372:	3302      	adds	r3, #2
    1374:	2200      	movs	r2, #0
    1376:	2100      	movs	r1, #0
    1378:	482d      	ldr	r0, [pc, #180]	; (1430 <init+0x104>)
    137a:	4c2e      	ldr	r4, [pc, #184]	; (1434 <init+0x108>)
    137c:	47a0      	blx	r4
    137e:	2800      	cmp	r0, #0
    1380:	d03e      	beq.n	1400 <init+0xd4>
	dma_init();
    1382:	4b2d      	ldr	r3, [pc, #180]	; (1438 <init+0x10c>)
    1384:	4798      	blx	r3
	if (!serial_init()) SOS();
    1386:	4b2d      	ldr	r3, [pc, #180]	; (143c <init+0x110>)
    1388:	4798      	blx	r3
    138a:	2800      	cmp	r0, #0
    138c:	d03b      	beq.n	1406 <init+0xda>
	if (!imu_init()) SOS();
    138e:	4b2c      	ldr	r3, [pc, #176]	; (1440 <init+0x114>)
    1390:	4798      	blx	r3
    1392:	2800      	cmp	r0, #0
    1394:	d03a      	beq.n	140c <init+0xe0>
		Pin baro_ss = {.port = BARO_SS_PORT, .pin = BARO_SS_PIN};
    1396:	ab02      	add	r3, sp, #8
    1398:	2280      	movs	r2, #128	; 0x80
    139a:	0552      	lsls	r2, r2, #21
    139c:	9202      	str	r2, [sp, #8]
    139e:	2100      	movs	r1, #0
    13a0:	7119      	strb	r1, [r3, #4]
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    13a2:	4828      	ldr	r0, [pc, #160]	; (1444 <init+0x118>)
    13a4:	9b03      	ldr	r3, [sp, #12]
    13a6:	4922      	ldr	r1, [pc, #136]	; (1430 <init+0x104>)
    13a8:	4c27      	ldr	r4, [pc, #156]	; (1448 <init+0x11c>)
    13aa:	47a0      	blx	r4
    13ac:	2800      	cmp	r0, #0
    13ae:	d030      	beq.n	1412 <init+0xe6>
	init_eeprom();
    13b0:	4b26      	ldr	r3, [pc, #152]	; (144c <init+0x120>)
    13b2:	4798      	blx	r3
		Pin flash_ss = {.port = FLASH_SS_PORT, .pin = FLASH_SS_PIN};
    13b4:	ab02      	add	r3, sp, #8
    13b6:	4c26      	ldr	r4, [pc, #152]	; (1450 <init+0x124>)
    13b8:	6822      	ldr	r2, [r4, #0]
    13ba:	9202      	str	r2, [sp, #8]
    13bc:	7921      	ldrb	r1, [r4, #4]
    13be:	7119      	strb	r1, [r3, #4]
		flash_init(&flash_desc, SPI_SERCOM, flash_ss, SPI_FLASH_SIZE, SPI_FLASH_DENSITY_CODE);
    13c0:	4d1b      	ldr	r5, [pc, #108]	; (1430 <init+0x104>)
    13c2:	4824      	ldr	r0, [pc, #144]	; (1454 <init+0x128>)
    13c4:	2107      	movs	r1, #7
    13c6:	9101      	str	r1, [sp, #4]
    13c8:	2180      	movs	r1, #128	; 0x80
    13ca:	03c9      	lsls	r1, r1, #15
    13cc:	9100      	str	r1, [sp, #0]
    13ce:	9b03      	ldr	r3, [sp, #12]
    13d0:	0029      	movs	r1, r5
    13d2:	4e21      	ldr	r6, [pc, #132]	; (1458 <init+0x12c>)
    13d4:	47b0      	blx	r6
	busmanager_new_process(&spiproc, SPIMGR_STACK_BASE, SPIMGR_STACK_SIZE, SPI_SERCOM, &dma_spi_desc);
    13d6:	2280      	movs	r2, #128	; 0x80
    13d8:	2190      	movs	r1, #144	; 0x90
    13da:	4820      	ldr	r0, [pc, #128]	; (145c <init+0x130>)
    13dc:	3408      	adds	r4, #8
    13de:	9400      	str	r4, [sp, #0]
    13e0:	002b      	movs	r3, r5
    13e2:	0092      	lsls	r2, r2, #2
    13e4:	0109      	lsls	r1, r1, #4
    13e6:	4c1e      	ldr	r4, [pc, #120]	; (1460 <init+0x134>)
    13e8:	47a0      	blx	r4
	init_globals();
    13ea:	4b1e      	ldr	r3, [pc, #120]	; (1464 <init+0x138>)
    13ec:	4798      	blx	r3
	if (!receiver_init(PORT2)) SOS();
    13ee:	2002      	movs	r0, #2
    13f0:	4b1d      	ldr	r3, [pc, #116]	; (1468 <init+0x13c>)
    13f2:	4798      	blx	r3
    13f4:	2800      	cmp	r0, #0
    13f6:	d00f      	beq.n	1418 <init+0xec>
	return selftest();
    13f8:	4b1c      	ldr	r3, [pc, #112]	; (146c <init+0x140>)
    13fa:	4798      	blx	r3
}
    13fc:	b004      	add	sp, #16
    13fe:	bd70      	pop	{r4, r5, r6, pc}
	if (!spi_init(SPI_SERCOM, 0, 0, SPI_DIPO, SPI_DOPO, SPI_BAUD)) SOS();
    1400:	4b1b      	ldr	r3, [pc, #108]	; (1470 <init+0x144>)
    1402:	4798      	blx	r3
    1404:	e7bd      	b.n	1382 <init+0x56>
	if (!serial_init()) SOS();
    1406:	4b1a      	ldr	r3, [pc, #104]	; (1470 <init+0x144>)
    1408:	4798      	blx	r3
    140a:	e7c0      	b.n	138e <init+0x62>
	if (!imu_init()) SOS();
    140c:	4b18      	ldr	r3, [pc, #96]	; (1470 <init+0x144>)
    140e:	4798      	blx	r3
    1410:	e7c1      	b.n	1396 <init+0x6a>
		if (!baro_init(&baro_desc, SPI_SERCOM, baro_ss)) SOS();
    1412:	4b17      	ldr	r3, [pc, #92]	; (1470 <init+0x144>)
    1414:	4798      	blx	r3
    1416:	e7cb      	b.n	13b0 <init+0x84>
	if (!receiver_init(PORT2)) SOS();
    1418:	4b15      	ldr	r3, [pc, #84]	; (1470 <init+0x144>)
    141a:	4798      	blx	r3
    141c:	e7ec      	b.n	13f8 <init+0xcc>
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	000022f1 	.word	0x000022f1
    1424:	000022d1 	.word	0x000022d1
    1428:	000022c1 	.word	0x000022c1
    142c:	005b8d80 	.word	0x005b8d80
    1430:	42001400 	.word	0x42001400
    1434:	00002755 	.word	0x00002755
    1438:	00001a3d 	.word	0x00001a3d
    143c:	00000d99 	.word	0x00000d99
    1440:	00000a35 	.word	0x00000a35
    1444:	2000039c 	.word	0x2000039c
    1448:	000019c9 	.word	0x000019c9
    144c:	00000971 	.word	0x00000971
    1450:	00006178 	.word	0x00006178
    1454:	200003b8 	.word	0x200003b8
    1458:	00001d59 	.word	0x00001d59
    145c:	20000340 	.word	0x20000340
    1460:	00003e0d 	.word	0x00003e0d
    1464:	000008e9 	.word	0x000008e9
    1468:	000017e9 	.word	0x000017e9
    146c:	000012e9 	.word	0x000012e9
    1470:	00003609 	.word	0x00003609

00001474 <main>:
int main(void) {
    1474:	b530      	push	{r4, r5, lr}
    1476:	b083      	sub	sp, #12
	if (!init()) SOS();
    1478:	4b12      	ldr	r3, [pc, #72]	; (14c4 <main+0x50>)
    147a:	4798      	blx	r3
    147c:	2800      	cmp	r0, #0
    147e:	d01e      	beq.n	14be <main+0x4a>
	init_process(&bz, buzzer, BUZZER_STACK_BASE, BUZZER_STACK_SIZE);
    1480:	2380      	movs	r3, #128	; 0x80
    1482:	2280      	movs	r2, #128	; 0x80
    1484:	4910      	ldr	r1, [pc, #64]	; (14c8 <main+0x54>)
    1486:	4c11      	ldr	r4, [pc, #68]	; (14cc <main+0x58>)
    1488:	005b      	lsls	r3, r3, #1
    148a:	0112      	lsls	r2, r2, #4
    148c:	0020      	movs	r0, r4
    148e:	4d10      	ldr	r5, [pc, #64]	; (14d0 <main+0x5c>)
    1490:	47a8      	blx	r5
	dispatch_process(&bz);
    1492:	0020      	movs	r0, r4
    1494:	4b0f      	ldr	r3, [pc, #60]	; (14d4 <main+0x60>)
    1496:	4798      	blx	r3
	start_navigation();
    1498:	4b0f      	ldr	r3, [pc, #60]	; (14d8 <main+0x64>)
    149a:	4798      	blx	r3
	volatile fp32_t testvalue1 = FP32_FROM_MILLI(10);
    149c:	4b0f      	ldr	r3, [pc, #60]	; (14dc <main+0x68>)
    149e:	9301      	str	r3, [sp, #4]
	volatile fp32_t testvalue2 = FP32_FROM_INT(14);
    14a0:	23e0      	movs	r3, #224	; 0xe0
    14a2:	031b      	lsls	r3, r3, #12
    14a4:	9300      	str	r3, [sp, #0]
	testvalue1 = fp_multiply(testvalue1, testvalue2);
    14a6:	9801      	ldr	r0, [sp, #4]
    14a8:	9900      	ldr	r1, [sp, #0]
    14aa:	4b0d      	ldr	r3, [pc, #52]	; (14e0 <main+0x6c>)
    14ac:	4798      	blx	r3
    14ae:	9001      	str	r0, [sp, #4]
	comms_loop();
    14b0:	4b0c      	ldr	r3, [pc, #48]	; (14e4 <main+0x70>)
    14b2:	4798      	blx	r3
		rtos_delay_ms(1);
    14b4:	4b0c      	ldr	r3, [pc, #48]	; (14e8 <main+0x74>)
    14b6:	6818      	ldr	r0, [r3, #0]
    14b8:	4b0c      	ldr	r3, [pc, #48]	; (14ec <main+0x78>)
    14ba:	4798      	blx	r3
	while (1) {
    14bc:	e7fa      	b.n	14b4 <main+0x40>
	if (!init()) SOS();
    14be:	4b0c      	ldr	r3, [pc, #48]	; (14f0 <main+0x7c>)
    14c0:	4798      	blx	r3
    14c2:	e7dd      	b.n	1480 <main+0xc>
    14c4:	0000132d 	.word	0x0000132d
    14c8:	00001205 	.word	0x00001205
    14cc:	200002e8 	.word	0x200002e8
    14d0:	000036c9 	.word	0x000036c9
    14d4:	000037ad 	.word	0x000037ad
    14d8:	0000153d 	.word	0x0000153d
    14dc:	0000028f 	.word	0x0000028f
    14e0:	00004b31 	.word	0x00004b31
    14e4:	00000699 	.word	0x00000699
    14e8:	0000636c 	.word	0x0000636c
    14ec:	00003b65 	.word	0x00003b65
    14f0:	00003609 	.word	0x00003609

000014f4 <navigation>:
#include "global_imu.h"
#include "util.h"

Process navigation_process;

void navigation() {
    14f4:	b510      	push	{r4, lr}
    14f6:	e00d      	b.n	1514 <navigation+0x20>
	while (1) {
		if (!globals.RunNavProcess) {
			wait_until_true(&globals.RunNavProcess);
    14f8:	4809      	ldr	r0, [pc, #36]	; (1520 <navigation+0x2c>)
    14fa:	3301      	adds	r3, #1
    14fc:	32a0      	adds	r2, #160	; 0xa0
    14fe:	2100      	movs	r1, #0
    1500:	4c08      	ldr	r4, [pc, #32]	; (1524 <navigation+0x30>)
    1502:	47a0      	blx	r4
		}
        // led_on();
		request_imu_data();
    1504:	4b08      	ldr	r3, [pc, #32]	; (1528 <navigation+0x34>)
    1506:	4798      	blx	r3
		wait_for_imu_data();
    1508:	4b08      	ldr	r3, [pc, #32]	; (152c <navigation+0x38>)
    150a:	4798      	blx	r3
        // led_off();
		rtos_delay_ms(1);
    150c:	4b08      	ldr	r3, [pc, #32]	; (1530 <navigation+0x3c>)
    150e:	6818      	ldr	r0, [r3, #0]
    1510:	4b08      	ldr	r3, [pc, #32]	; (1534 <navigation+0x40>)
    1512:	4798      	blx	r3
		if (!globals.RunNavProcess) {
    1514:	4b08      	ldr	r3, [pc, #32]	; (1538 <navigation+0x44>)
    1516:	225f      	movs	r2, #95	; 0x5f
    1518:	5c9b      	ldrb	r3, [r3, r2]
    151a:	2b00      	cmp	r3, #0
    151c:	d0ec      	beq.n	14f8 <navigation+0x4>
    151e:	e7f1      	b.n	1504 <navigation+0x10>
    1520:	20000227 	.word	0x20000227
    1524:	00003a31 	.word	0x00003a31
    1528:	00000af9 	.word	0x00000af9
    152c:	00000b31 	.word	0x00000b31
    1530:	0000636c 	.word	0x0000636c
    1534:	00003b65 	.word	0x00003b65
    1538:	200001c8 	.word	0x200001c8

0000153c <start_navigation>:
	}
}

void start_navigation() {
    153c:	b570      	push	{r4, r5, r6, lr}
    init_process(&navigation_process, navigation, NAVIGATION_STACK_BASE, NAVIGATION_STACK_SIZE);
    153e:	23c0      	movs	r3, #192	; 0xc0
    1540:	22c0      	movs	r2, #192	; 0xc0
    1542:	4905      	ldr	r1, [pc, #20]	; (1558 <start_navigation+0x1c>)
    1544:	4c05      	ldr	r4, [pc, #20]	; (155c <start_navigation+0x20>)
    1546:	009b      	lsls	r3, r3, #2
    1548:	0112      	lsls	r2, r2, #4
    154a:	0020      	movs	r0, r4
    154c:	4d04      	ldr	r5, [pc, #16]	; (1560 <start_navigation+0x24>)
    154e:	47a8      	blx	r5
    dispatch_process(&navigation_process);
    1550:	0020      	movs	r0, r4
    1552:	4b04      	ldr	r3, [pc, #16]	; (1564 <start_navigation+0x28>)
    1554:	4798      	blx	r3
    1556:	bd70      	pop	{r4, r5, r6, pc}
    1558:	000014f5 	.word	0x000014f5
    155c:	20000314 	.word	0x20000314
    1560:	000036c9 	.word	0x000036c9
    1564:	000037ad 	.word	0x000037ad

00001568 <crc8_dvb_s2>:
    0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74, 0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D,
    0xD6, 0x03, 0xA9, 0x7C, 0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
    0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9
};

uint8_t crc8_dvb_s2(int index, uint8_t len) {
    1568:	b570      	push	{r4, r5, r6, lr}
    156a:	0006      	movs	r6, r0
    uint8_t crc = 0;
    for (uint8_t i = 0; i < len - 1; i++)
    156c:	2200      	movs	r2, #0
    uint8_t crc = 0;
    156e:	2000      	movs	r0, #0
    for (uint8_t i = 0; i < len - 1; i++)
    1570:	e00e      	b.n	1590 <crc8_dvb_s2+0x28>
    {
        crc = crc8tab[crc ^ crsf_cached_buffer[(index + 2 + i) % 64]];
    1572:	1cb3      	adds	r3, r6, #2
    1574:	189b      	adds	r3, r3, r2
    1576:	17dd      	asrs	r5, r3, #31
    1578:	0ead      	lsrs	r5, r5, #26
    157a:	195b      	adds	r3, r3, r5
    157c:	243f      	movs	r4, #63	; 0x3f
    157e:	4023      	ands	r3, r4
    1580:	1b5b      	subs	r3, r3, r5
    1582:	4c05      	ldr	r4, [pc, #20]	; (1598 <crc8_dvb_s2+0x30>)
    1584:	5ce3      	ldrb	r3, [r4, r3]
    1586:	4043      	eors	r3, r0
    1588:	4804      	ldr	r0, [pc, #16]	; (159c <crc8_dvb_s2+0x34>)
    158a:	5cc0      	ldrb	r0, [r0, r3]
    for (uint8_t i = 0; i < len - 1; i++)
    158c:	3201      	adds	r2, #1
    158e:	b2d2      	uxtb	r2, r2
    1590:	1e4b      	subs	r3, r1, #1
    1592:	429a      	cmp	r2, r3
    1594:	dbed      	blt.n	1572 <crc8_dvb_s2+0xa>
    }
    return crc;
}
    1596:	bd70      	pop	{r4, r5, r6, pc}
    1598:	200003c8 	.word	0x200003c8
    159c:	00006188 	.word	0x00006188

000015a0 <rc_channels_packed>:

bool rc_channels_packed(int index, uint8_t len) {
    15a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15a2:	0004      	movs	r4, r0
    uint8_t crc = crsf_cached_buffer[(index + len + 1) % 64];
    15a4:	180b      	adds	r3, r1, r0
    15a6:	3301      	adds	r3, #1
    15a8:	17d8      	asrs	r0, r3, #31
    15aa:	0e80      	lsrs	r0, r0, #26
    15ac:	181b      	adds	r3, r3, r0
    15ae:	223f      	movs	r2, #63	; 0x3f
    15b0:	4013      	ands	r3, r2
    15b2:	1a1b      	subs	r3, r3, r0
    15b4:	4a43      	ldr	r2, [pc, #268]	; (16c4 <rc_channels_packed+0x124>)
    15b6:	5cd5      	ldrb	r5, [r2, r3]

    // check length
    if (len != 24) return false;
    15b8:	2918      	cmp	r1, #24
    15ba:	d001      	beq.n	15c0 <rc_channels_packed+0x20>
    15bc:	2000      	movs	r0, #0
    globals.RCchannel14 = crsf_channels.ch13;
    globals.RCchannel15 = crsf_channels.ch14;
    globals.RCchannel16 = crsf_channels.ch15;

    return true;
}
    15be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (crc8_dvb_s2(index, len) != crc) return false;
    15c0:	0020      	movs	r0, r4
    15c2:	4b41      	ldr	r3, [pc, #260]	; (16c8 <rc_channels_packed+0x128>)
    15c4:	4798      	blx	r3
    15c6:	42a8      	cmp	r0, r5
    15c8:	d000      	beq.n	15cc <rc_channels_packed+0x2c>
    15ca:	e078      	b.n	16be <rc_channels_packed+0x11e>
    for (int i = 0; i < sizeof(crsf_channels); ++i) {
    15cc:	2100      	movs	r1, #0
    15ce:	e00d      	b.n	15ec <rc_channels_packed+0x4c>
        *((uint8_t*)&(crsf_channels) + i) = crsf_cached_buffer[(index + 3 + i) % 64];
    15d0:	1ce3      	adds	r3, r4, #3
    15d2:	185b      	adds	r3, r3, r1
    15d4:	17d8      	asrs	r0, r3, #31
    15d6:	0e80      	lsrs	r0, r0, #26
    15d8:	181b      	adds	r3, r3, r0
    15da:	223f      	movs	r2, #63	; 0x3f
    15dc:	4013      	ands	r3, r2
    15de:	1a1b      	subs	r3, r3, r0
    15e0:	4a38      	ldr	r2, [pc, #224]	; (16c4 <rc_channels_packed+0x124>)
    15e2:	0010      	movs	r0, r2
    15e4:	3040      	adds	r0, #64	; 0x40
    15e6:	5cd3      	ldrb	r3, [r2, r3]
    15e8:	5443      	strb	r3, [r0, r1]
    for (int i = 0; i < sizeof(crsf_channels); ++i) {
    15ea:	3101      	adds	r1, #1
    15ec:	2915      	cmp	r1, #21
    15ee:	d9ef      	bls.n	15d0 <rc_channels_packed+0x30>
    globals.RCchannel1 = crsf_channels.ch0;
    15f0:	4b34      	ldr	r3, [pc, #208]	; (16c4 <rc_channels_packed+0x124>)
    15f2:	2440      	movs	r4, #64	; 0x40
    15f4:	5b19      	ldrh	r1, [r3, r4]
    15f6:	0549      	lsls	r1, r1, #21
    15f8:	0d49      	lsrs	r1, r1, #21
    15fa:	4a34      	ldr	r2, [pc, #208]	; (16cc <rc_channels_packed+0x12c>)
    15fc:	8791      	strh	r1, [r2, #60]	; 0x3c
    globals.RCchannel2 = crsf_channels.ch1;
    15fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1600:	0289      	lsls	r1, r1, #10
    1602:	0d49      	lsrs	r1, r1, #21
    1604:	87d1      	strh	r1, [r2, #62]	; 0x3e
    globals.RCchannel3 = crsf_channels.ch2;
    1606:	2642      	movs	r6, #66	; 0x42
    1608:	5b9d      	ldrh	r5, [r3, r6]
    160a:	09ad      	lsrs	r5, r5, #6
    160c:	2044      	movs	r0, #68	; 0x44
    160e:	5c1f      	ldrb	r7, [r3, r0]
    1610:	2101      	movs	r1, #1
    1612:	4039      	ands	r1, r7
    1614:	0289      	lsls	r1, r1, #10
    1616:	4329      	orrs	r1, r5
    1618:	5311      	strh	r1, [r2, r4]
    globals.RCchannel4 = crsf_channels.ch3;
    161a:	5a19      	ldrh	r1, [r3, r0]
    161c:	0509      	lsls	r1, r1, #20
    161e:	0d49      	lsrs	r1, r1, #21
    1620:	5391      	strh	r1, [r2, r6]
    globals.RCchannel5 = crsf_channels.ch4;
    1622:	6c59      	ldr	r1, [r3, #68]	; 0x44
    1624:	0249      	lsls	r1, r1, #9
    1626:	0d49      	lsrs	r1, r1, #21
    1628:	5211      	strh	r1, [r2, r0]
    globals.RCchannel6 = crsf_channels.ch5;
    162a:	2546      	movs	r5, #70	; 0x46
    162c:	5b5c      	ldrh	r4, [r3, r5]
    162e:	09e4      	lsrs	r4, r4, #7
    1630:	3004      	adds	r0, #4
    1632:	5c1e      	ldrb	r6, [r3, r0]
    1634:	2103      	movs	r1, #3
    1636:	4031      	ands	r1, r6
    1638:	0249      	lsls	r1, r1, #9
    163a:	4321      	orrs	r1, r4
    163c:	5351      	strh	r1, [r2, r5]
    globals.RCchannel7 = crsf_channels.ch6;
    163e:	5a19      	ldrh	r1, [r3, r0]
    1640:	04c9      	lsls	r1, r1, #19
    1642:	0d49      	lsrs	r1, r1, #21
    1644:	5211      	strh	r1, [r2, r0]
    globals.RCchannel8 = crsf_channels.ch7;
    1646:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1648:	0209      	lsls	r1, r1, #8
    164a:	0d49      	lsrs	r1, r1, #21
    164c:	3002      	adds	r0, #2
    164e:	5211      	strh	r1, [r2, r0]
    globals.RCchannel9 = crsf_channels.ch8;
    1650:	214b      	movs	r1, #75	; 0x4b
    1652:	5c5c      	ldrb	r4, [r3, r1]
    1654:	3002      	adds	r0, #2
    1656:	5c1d      	ldrb	r5, [r3, r0]
    1658:	3944      	subs	r1, #68	; 0x44
    165a:	4029      	ands	r1, r5
    165c:	0209      	lsls	r1, r1, #8
    165e:	4321      	orrs	r1, r4
    1660:	5211      	strh	r1, [r2, r0]
    globals.RCchannel10 = crsf_channels.ch9;
    1662:	5a19      	ldrh	r1, [r3, r0]
    1664:	0489      	lsls	r1, r1, #18
    1666:	0d49      	lsrs	r1, r1, #21
    1668:	3002      	adds	r0, #2
    166a:	5211      	strh	r1, [r2, r0]
    globals.RCchannel11 = crsf_channels.ch10;
    166c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    166e:	01c9      	lsls	r1, r1, #7
    1670:	0d49      	lsrs	r1, r1, #21
    1672:	3002      	adds	r0, #2
    1674:	5211      	strh	r1, [r2, r0]
    globals.RCchannel12 = crsf_channels.ch11;
    1676:	214f      	movs	r1, #79	; 0x4f
    1678:	5c5c      	ldrb	r4, [r3, r1]
    167a:	0864      	lsrs	r4, r4, #1
    167c:	5c1d      	ldrb	r5, [r3, r0]
    167e:	3940      	subs	r1, #64	; 0x40
    1680:	4029      	ands	r1, r5
    1682:	01c9      	lsls	r1, r1, #7
    1684:	4321      	orrs	r1, r4
    1686:	2452      	movs	r4, #82	; 0x52
    1688:	5311      	strh	r1, [r2, r4]
    globals.RCchannel13 = crsf_channels.ch12;
    168a:	5a19      	ldrh	r1, [r3, r0]
    168c:	0449      	lsls	r1, r1, #17
    168e:	0d49      	lsrs	r1, r1, #21
    1690:	3004      	adds	r0, #4
    1692:	5211      	strh	r1, [r2, r0]
    globals.RCchannel14 = crsf_channels.ch13;
    1694:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1696:	0189      	lsls	r1, r1, #6
    1698:	0d49      	lsrs	r1, r1, #21
    169a:	3404      	adds	r4, #4
    169c:	5311      	strh	r1, [r2, r4]
    globals.RCchannel15 = crsf_channels.ch14;
    169e:	2153      	movs	r1, #83	; 0x53
    16a0:	5c5c      	ldrb	r4, [r3, r1]
    16a2:	08a4      	lsrs	r4, r4, #2
    16a4:	5c1d      	ldrb	r5, [r3, r0]
    16a6:	3934      	subs	r1, #52	; 0x34
    16a8:	4029      	ands	r1, r5
    16aa:	0189      	lsls	r1, r1, #6
    16ac:	4321      	orrs	r1, r4
    16ae:	2458      	movs	r4, #88	; 0x58
    16b0:	5311      	strh	r1, [r2, r4]
    globals.RCchannel16 = crsf_channels.ch15;
    16b2:	5a1b      	ldrh	r3, [r3, r0]
    16b4:	095b      	lsrs	r3, r3, #5
    16b6:	215a      	movs	r1, #90	; 0x5a
    16b8:	5253      	strh	r3, [r2, r1]
    return true;
    16ba:	3853      	subs	r0, #83	; 0x53
    16bc:	e77f      	b.n	15be <rc_channels_packed+0x1e>
    if (crc8_dvb_s2(index, len) != crc) return false;
    16be:	2000      	movs	r0, #0
    16c0:	e77d      	b.n	15be <rc_channels_packed+0x1e>
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	200003c8 	.word	0x200003c8
    16c8:	00001569 	.word	0x00001569
    16cc:	200001c8 	.word	0x200001c8

000016d0 <link_statistics>:

bool link_statistics(int index, uint8_t len) {
    16d0:	b570      	push	{r4, r5, r6, lr}
    16d2:	0004      	movs	r4, r0
    uint8_t crc = crsf_cached_buffer[(index + len + 1) % 64];
    16d4:	180b      	adds	r3, r1, r0
    16d6:	3301      	adds	r3, #1
    16d8:	17d8      	asrs	r0, r3, #31
    16da:	0e80      	lsrs	r0, r0, #26
    16dc:	181b      	adds	r3, r3, r0
    16de:	223f      	movs	r2, #63	; 0x3f
    16e0:	4013      	ands	r3, r2
    16e2:	1a1b      	subs	r3, r3, r0
    16e4:	4a15      	ldr	r2, [pc, #84]	; (173c <link_statistics+0x6c>)
    16e6:	5cd5      	ldrb	r5, [r2, r3]

    // check length
    if (len != 12) return false;
    16e8:	290c      	cmp	r1, #12
    16ea:	d001      	beq.n	16f0 <link_statistics+0x20>
        *((uint8_t*)&(crsf_link_statistics) + i) = crsf_cached_buffer[(index + 3 + i) % 64];
    }

    if (crsf_link_statistics.uplink_linkqly == 0) globals.RCRXFailsafe = true;
    else globals.RCRXFailsafe = false;
}
    16ec:	2000      	movs	r0, #0
    16ee:	bd70      	pop	{r4, r5, r6, pc}
    if (crc8_dvb_s2(index, len) != crc) return false;
    16f0:	0020      	movs	r0, r4
    16f2:	4b13      	ldr	r3, [pc, #76]	; (1740 <link_statistics+0x70>)
    16f4:	4798      	blx	r3
    16f6:	42a8      	cmp	r0, r5
    16f8:	d1f8      	bne.n	16ec <link_statistics+0x1c>
    for (int i = 0; i < sizeof(crsf_link_statistics); ++i) {
    16fa:	2100      	movs	r1, #0
    16fc:	e00d      	b.n	171a <link_statistics+0x4a>
        *((uint8_t*)&(crsf_link_statistics) + i) = crsf_cached_buffer[(index + 3 + i) % 64];
    16fe:	1ce3      	adds	r3, r4, #3
    1700:	185b      	adds	r3, r3, r1
    1702:	17d8      	asrs	r0, r3, #31
    1704:	0e80      	lsrs	r0, r0, #26
    1706:	181b      	adds	r3, r3, r0
    1708:	223f      	movs	r2, #63	; 0x3f
    170a:	4013      	ands	r3, r2
    170c:	1a1b      	subs	r3, r3, r0
    170e:	4a0b      	ldr	r2, [pc, #44]	; (173c <link_statistics+0x6c>)
    1710:	0010      	movs	r0, r2
    1712:	3058      	adds	r0, #88	; 0x58
    1714:	5cd3      	ldrb	r3, [r2, r3]
    1716:	5443      	strb	r3, [r0, r1]
    for (int i = 0; i < sizeof(crsf_link_statistics); ++i) {
    1718:	3101      	adds	r1, #1
    171a:	2909      	cmp	r1, #9
    171c:	d9ef      	bls.n	16fe <link_statistics+0x2e>
    if (crsf_link_statistics.uplink_linkqly == 0) globals.RCRXFailsafe = true;
    171e:	4b09      	ldr	r3, [pc, #36]	; (1744 <link_statistics+0x74>)
    1720:	789b      	ldrb	r3, [r3, #2]
    1722:	2b00      	cmp	r3, #0
    1724:	d104      	bne.n	1730 <link_statistics+0x60>
    1726:	4b08      	ldr	r3, [pc, #32]	; (1748 <link_statistics+0x78>)
    1728:	2262      	movs	r2, #98	; 0x62
    172a:	2101      	movs	r1, #1
    172c:	5499      	strb	r1, [r3, r2]
    172e:	e7de      	b.n	16ee <link_statistics+0x1e>
    else globals.RCRXFailsafe = false;
    1730:	4b05      	ldr	r3, [pc, #20]	; (1748 <link_statistics+0x78>)
    1732:	2262      	movs	r2, #98	; 0x62
    1734:	2100      	movs	r1, #0
    1736:	5499      	strb	r1, [r3, r2]
}
    1738:	e7d9      	b.n	16ee <link_statistics+0x1e>
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	200003c8 	.word	0x200003c8
    1740:	00001569 	.word	0x00001569
    1744:	20000420 	.word	0x20000420
    1748:	200001c8 	.word	0x200001c8

0000174c <investigate_packet>:

bool investigate_packet(int index) {
    174c:	b570      	push	{r4, r5, r6, lr}
    uint8_t len = crsf_cached_buffer[(index + 1) % 64];
    174e:	1c43      	adds	r3, r0, #1
    1750:	17d9      	asrs	r1, r3, #31
    1752:	0e89      	lsrs	r1, r1, #26
    1754:	185b      	adds	r3, r3, r1
    1756:	223f      	movs	r2, #63	; 0x3f
    1758:	4013      	ands	r3, r2
    175a:	1a5b      	subs	r3, r3, r1
    175c:	4d0a      	ldr	r5, [pc, #40]	; (1788 <investigate_packet+0x3c>)
    175e:	5ce9      	ldrb	r1, [r5, r3]
    uint8_t type = crsf_cached_buffer[(index + 2) % 64];
    1760:	1c84      	adds	r4, r0, #2
    1762:	17e3      	asrs	r3, r4, #31
    1764:	0e9b      	lsrs	r3, r3, #26
    1766:	18e4      	adds	r4, r4, r3
    1768:	4022      	ands	r2, r4
    176a:	1ad2      	subs	r2, r2, r3
    176c:	5cab      	ldrb	r3, [r5, r2]

    switch (type) {
    176e:	2b14      	cmp	r3, #20
    1770:	d004      	beq.n	177c <investigate_packet+0x30>
    1772:	2b16      	cmp	r3, #22
    1774:	d105      	bne.n	1782 <investigate_packet+0x36>
        case CRSF_FRAMETYPE_RC_CHANNELS_PACKED:
        return rc_channels_packed(index, len);
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <investigate_packet+0x40>)
    1778:	4798      	blx	r3
    177a:	e003      	b.n	1784 <investigate_packet+0x38>

        case CRSF_FRAMETYPE_LINK_STATISTICS:
        return link_statistics(index, len);
    177c:	4b04      	ldr	r3, [pc, #16]	; (1790 <investigate_packet+0x44>)
    177e:	4798      	blx	r3
    1780:	e000      	b.n	1784 <investigate_packet+0x38>
    switch (type) {
    1782:	2000      	movs	r0, #0
        
        default:
        return false;
    }
}
    1784:	bd70      	pop	{r4, r5, r6, pc}
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	200003c8 	.word	0x200003c8
    178c:	000015a1 	.word	0x000015a1
    1790:	000016d1 	.word	0x000016d1

00001794 <receiver_main>:

void receiver_main() {
    1794:	b510      	push	{r4, lr}
    1796:	e01a      	b.n	17ce <receiver_main+0x3a>
    while (1) {
        for (int i = 0; i < sizeof(crsf_receive_buffer); ++i) {
    1798:	3401      	adds	r4, #1
    179a:	2c3f      	cmp	r4, #63	; 0x3f
    179c:	d810      	bhi.n	17c0 <receiver_main+0x2c>
            if (crsf_receive_buffer[i] == CRSF_SYNC_BYTE) {
    179e:	4b0d      	ldr	r3, [pc, #52]	; (17d4 <receiver_main+0x40>)
    17a0:	191b      	adds	r3, r3, r4
    17a2:	2264      	movs	r2, #100	; 0x64
    17a4:	5c9b      	ldrb	r3, [r3, r2]
    17a6:	2bc8      	cmp	r3, #200	; 0xc8
    17a8:	d1f6      	bne.n	1798 <receiver_main+0x4>
                memcpy(crsf_cached_buffer, crsf_receive_buffer, sizeof(crsf_cached_buffer));
    17aa:	480a      	ldr	r0, [pc, #40]	; (17d4 <receiver_main+0x40>)
    17ac:	0001      	movs	r1, r0
    17ae:	3164      	adds	r1, #100	; 0x64
    17b0:	3a24      	subs	r2, #36	; 0x24
    17b2:	4b09      	ldr	r3, [pc, #36]	; (17d8 <receiver_main+0x44>)
    17b4:	4798      	blx	r3
                if (investigate_packet(i)) break;
    17b6:	0020      	movs	r0, r4
    17b8:	4b08      	ldr	r3, [pc, #32]	; (17dc <receiver_main+0x48>)
    17ba:	4798      	blx	r3
    17bc:	2800      	cmp	r0, #0
    17be:	d0eb      	beq.n	1798 <receiver_main+0x4>
            }
        }

        rtos_delay_ms(10);
    17c0:	4b07      	ldr	r3, [pc, #28]	; (17e0 <receiver_main+0x4c>)
    17c2:	681b      	ldr	r3, [r3, #0]
    17c4:	0098      	lsls	r0, r3, #2
    17c6:	18c0      	adds	r0, r0, r3
    17c8:	0040      	lsls	r0, r0, #1
    17ca:	4b06      	ldr	r3, [pc, #24]	; (17e4 <receiver_main+0x50>)
    17cc:	4798      	blx	r3
        for (int i = 0; i < sizeof(crsf_receive_buffer); ++i) {
    17ce:	2400      	movs	r4, #0
    17d0:	e7e3      	b.n	179a <receiver_main+0x6>
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	200003c8 	.word	0x200003c8
    17d8:	00005b49 	.word	0x00005b49
    17dc:	0000174d 	.word	0x0000174d
    17e0:	0000636c 	.word	0x0000636c
    17e4:	00003b65 	.word	0x00003b65

000017e8 <receiver_init>:
    }
}

bool receiver_init(Serial_Port_IDs port) {
    17e8:	b570      	push	{r4, r5, r6, lr}
    // configure baud rate for CRSF
    // serial_set_baud(port, CRSF_BAUDRATE); // FIX TO NOT CRASH AFTER INIT

    // Start infinite receive buffer
	if (!serial_read_start_infinite(port, crsf_receive_buffer, sizeof(crsf_receive_buffer))) return false;
    17ea:	490a      	ldr	r1, [pc, #40]	; (1814 <receiver_init+0x2c>)
    17ec:	2240      	movs	r2, #64	; 0x40
    17ee:	4b0a      	ldr	r3, [pc, #40]	; (1818 <receiver_init+0x30>)
    17f0:	4798      	blx	r3
    17f2:	1e04      	subs	r4, r0, #0
    17f4:	d101      	bne.n	17fa <receiver_init+0x12>
    // start up new process
    init_process(&receiver_process, receiver_main, RC_RECEIVER_STACK_BASE, RC_RECEIVER_STACK_SIZE);
    dispatch_process(&receiver_process);

    return true;
    17f6:	0020      	movs	r0, r4
    17f8:	bd70      	pop	{r4, r5, r6, pc}
    init_process(&receiver_process, receiver_main, RC_RECEIVER_STACK_BASE, RC_RECEIVER_STACK_SIZE);
    17fa:	2380      	movs	r3, #128	; 0x80
    17fc:	22b0      	movs	r2, #176	; 0xb0
    17fe:	4907      	ldr	r1, [pc, #28]	; (181c <receiver_init+0x34>)
    1800:	4d07      	ldr	r5, [pc, #28]	; (1820 <receiver_init+0x38>)
    1802:	005b      	lsls	r3, r3, #1
    1804:	0112      	lsls	r2, r2, #4
    1806:	0028      	movs	r0, r5
    1808:	4e06      	ldr	r6, [pc, #24]	; (1824 <receiver_init+0x3c>)
    180a:	47b0      	blx	r6
    dispatch_process(&receiver_process);
    180c:	0028      	movs	r0, r5
    180e:	4b06      	ldr	r3, [pc, #24]	; (1828 <receiver_init+0x40>)
    1810:	4798      	blx	r3
    return true;
    1812:	e7f0      	b.n	17f6 <receiver_init+0xe>
    1814:	2000042c 	.word	0x2000042c
    1818:	000010ad 	.word	0x000010ad
    181c:	00001795 	.word	0x00001795
    1820:	2000046c 	.word	0x2000046c
    1824:	000036c9 	.word	0x000036c9
    1828:	000037ad 	.word	0x000037ad

0000182c <baro_send_command>:
void baro_send_command(Barometer_Descriptor* desc, uint8_t command, uint16_t delay) {
    182c:	b570      	push	{r4, r5, r6, lr}
    182e:	0004      	movs	r4, r0
    1830:	000e      	movs	r6, r1
    1832:	0015      	movs	r5, r2
	port_clear(desc->sspin.port, desc->sspin.pin);
    1834:	7d03      	ldrb	r3, [r0, #20]
    1836:	7d42      	ldrb	r2, [r0, #21]
    1838:	0212      	lsls	r2, r2, #8
    183a:	431a      	orrs	r2, r3
    183c:	7d83      	ldrb	r3, [r0, #22]
    183e:	041b      	lsls	r3, r3, #16
    1840:	4313      	orrs	r3, r2
    1842:	7dc1      	ldrb	r1, [r0, #23]
    1844:	0609      	lsls	r1, r1, #24
    1846:	4319      	orrs	r1, r3
    1848:	7e00      	ldrb	r0, [r0, #24]
    184a:	4b11      	ldr	r3, [pc, #68]	; (1890 <baro_send_command+0x64>)
    184c:	4798      	blx	r3
	spi_command(desc->sercom, command);
    184e:	7c23      	ldrb	r3, [r4, #16]
    1850:	7c62      	ldrb	r2, [r4, #17]
    1852:	0212      	lsls	r2, r2, #8
    1854:	431a      	orrs	r2, r3
    1856:	7ca3      	ldrb	r3, [r4, #18]
    1858:	041b      	lsls	r3, r3, #16
    185a:	4313      	orrs	r3, r2
    185c:	7ce0      	ldrb	r0, [r4, #19]
    185e:	0600      	lsls	r0, r0, #24
    1860:	4318      	orrs	r0, r3
    1862:	0031      	movs	r1, r6
    1864:	4b0b      	ldr	r3, [pc, #44]	; (1894 <baro_send_command+0x68>)
    1866:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1868:	7d23      	ldrb	r3, [r4, #20]
    186a:	7d62      	ldrb	r2, [r4, #21]
    186c:	0212      	lsls	r2, r2, #8
    186e:	431a      	orrs	r2, r3
    1870:	7da3      	ldrb	r3, [r4, #22]
    1872:	041b      	lsls	r3, r3, #16
    1874:	4313      	orrs	r3, r2
    1876:	7de1      	ldrb	r1, [r4, #23]
    1878:	0609      	lsls	r1, r1, #24
    187a:	4319      	orrs	r1, r3
    187c:	7e20      	ldrb	r0, [r4, #24]
    187e:	4b06      	ldr	r3, [pc, #24]	; (1898 <baro_send_command+0x6c>)
    1880:	4798      	blx	r3
	delay_us(delay);
    1882:	0068      	lsls	r0, r5, #1
    1884:	1940      	adds	r0, r0, r5
    1886:	0040      	lsls	r0, r0, #1
    1888:	4b04      	ldr	r3, [pc, #16]	; (189c <baro_send_command+0x70>)
    188a:	4798      	blx	r3
}
    188c:	bd70      	pop	{r4, r5, r6, pc}
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	000022e1 	.word	0x000022e1
    1894:	000027bd 	.word	0x000027bd
    1898:	000022d1 	.word	0x000022d1
    189c:	000028a1 	.word	0x000028a1

000018a0 <baro_read_prom>:
void baro_read_prom(Barometer_Descriptor* desc) {
    18a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18a2:	0004      	movs	r4, r0
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    18a4:	26a0      	movs	r6, #160	; 0xa0
    18a6:	e047      	b.n	1938 <baro_read_prom+0x98>
		port_clear(desc->sspin.port, desc->sspin.pin);
    18a8:	7d23      	ldrb	r3, [r4, #20]
    18aa:	7d62      	ldrb	r2, [r4, #21]
    18ac:	0212      	lsls	r2, r2, #8
    18ae:	431a      	orrs	r2, r3
    18b0:	7da3      	ldrb	r3, [r4, #22]
    18b2:	041b      	lsls	r3, r3, #16
    18b4:	4313      	orrs	r3, r2
    18b6:	7de1      	ldrb	r1, [r4, #23]
    18b8:	0609      	lsls	r1, r1, #24
    18ba:	4319      	orrs	r1, r3
    18bc:	7e20      	ldrb	r0, [r4, #24]
    18be:	4b20      	ldr	r3, [pc, #128]	; (1940 <baro_read_prom+0xa0>)
    18c0:	4798      	blx	r3
		spi_command(desc->sercom, addr);
    18c2:	7c23      	ldrb	r3, [r4, #16]
    18c4:	7c62      	ldrb	r2, [r4, #17]
    18c6:	0212      	lsls	r2, r2, #8
    18c8:	431a      	orrs	r2, r3
    18ca:	7ca3      	ldrb	r3, [r4, #18]
    18cc:	041b      	lsls	r3, r3, #16
    18ce:	4313      	orrs	r3, r2
    18d0:	7ce0      	ldrb	r0, [r4, #19]
    18d2:	0600      	lsls	r0, r0, #24
    18d4:	4318      	orrs	r0, r3
    18d6:	0031      	movs	r1, r6
    18d8:	4f1a      	ldr	r7, [pc, #104]	; (1944 <baro_read_prom+0xa4>)
    18da:	47b8      	blx	r7
		uint8_t data0 = spi_command(desc->sercom, 0);
    18dc:	7c23      	ldrb	r3, [r4, #16]
    18de:	7c62      	ldrb	r2, [r4, #17]
    18e0:	0212      	lsls	r2, r2, #8
    18e2:	431a      	orrs	r2, r3
    18e4:	7ca3      	ldrb	r3, [r4, #18]
    18e6:	041b      	lsls	r3, r3, #16
    18e8:	4313      	orrs	r3, r2
    18ea:	7ce0      	ldrb	r0, [r4, #19]
    18ec:	0600      	lsls	r0, r0, #24
    18ee:	4318      	orrs	r0, r3
    18f0:	2100      	movs	r1, #0
    18f2:	47b8      	blx	r7
    18f4:	0005      	movs	r5, r0
		uint8_t data1 = spi_command(desc->sercom, 0);
    18f6:	7c23      	ldrb	r3, [r4, #16]
    18f8:	7c62      	ldrb	r2, [r4, #17]
    18fa:	0212      	lsls	r2, r2, #8
    18fc:	431a      	orrs	r2, r3
    18fe:	7ca3      	ldrb	r3, [r4, #18]
    1900:	041b      	lsls	r3, r3, #16
    1902:	4313      	orrs	r3, r2
    1904:	7ce0      	ldrb	r0, [r4, #19]
    1906:	0600      	lsls	r0, r0, #24
    1908:	4318      	orrs	r0, r3
    190a:	2100      	movs	r1, #0
    190c:	47b8      	blx	r7
    190e:	0007      	movs	r7, r0
		port_set(desc->sspin.port, desc->sspin.pin);
    1910:	7d23      	ldrb	r3, [r4, #20]
    1912:	7d62      	ldrb	r2, [r4, #21]
    1914:	0212      	lsls	r2, r2, #8
    1916:	431a      	orrs	r2, r3
    1918:	7da3      	ldrb	r3, [r4, #22]
    191a:	041b      	lsls	r3, r3, #16
    191c:	4313      	orrs	r3, r2
    191e:	7de1      	ldrb	r1, [r4, #23]
    1920:	0609      	lsls	r1, r1, #24
    1922:	4319      	orrs	r1, r3
    1924:	7e20      	ldrb	r0, [r4, #24]
    1926:	4b08      	ldr	r3, [pc, #32]	; (1948 <baro_read_prom+0xa8>)
    1928:	4798      	blx	r3
		uint16_t* promvalptr = (uint16_t*)((uint8_t*)(&(desc->prom)) + addr - BARO_PROM_SETUP);
    192a:	0033      	movs	r3, r6
    192c:	3ba0      	subs	r3, #160	; 0xa0
		*promvalptr = ((uint16_t)data0 << 8) | ((uint16_t)data1);
    192e:	022d      	lsls	r5, r5, #8
    1930:	433d      	orrs	r5, r7
    1932:	52e5      	strh	r5, [r4, r3]
	for (uint8_t addr = BARO_PROM_SETUP; addr <= BARO_PROM_CRC; addr += 2) {
    1934:	3602      	adds	r6, #2
    1936:	b2f6      	uxtb	r6, r6
    1938:	2eae      	cmp	r6, #174	; 0xae
    193a:	d9b5      	bls.n	18a8 <baro_read_prom+0x8>
}
    193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	000022e1 	.word	0x000022e1
    1944:	000027bd 	.word	0x000027bd
    1948:	000022d1 	.word	0x000022d1

0000194c <baro_check>:

bool baro_check(Barometer_Descriptor* desc) {
    194c:	b530      	push	{r4, r5, lr}
    194e:	0004      	movs	r4, r0
	// check CRC
	// remainder
	uint16_t n_rem = 0;
	// save value of crc in prom
	uint16_t prom_crc = desc->prom.crc;
    1950:	7b83      	ldrb	r3, [r0, #14]
    1952:	7bc5      	ldrb	r5, [r0, #15]
    1954:	022d      	lsls	r5, r5, #8
    1956:	431d      	orrs	r5, r3
	// zero final 8 bits
	desc->prom.crc &= 0xFF00;
    1958:	23ff      	movs	r3, #255	; 0xff
    195a:	002a      	movs	r2, r5
    195c:	439a      	bics	r2, r3
    195e:	0013      	movs	r3, r2
    1960:	2200      	movs	r2, #0
    1962:	7382      	strb	r2, [r0, #14]
    1964:	0a1b      	lsrs	r3, r3, #8
    1966:	73c3      	strb	r3, [r0, #15]
	// create indexable pointer
	uint16_t* prom = (uint16_t*)&(desc->prom);
	// zero crc byte
	desc->prom.crc &= 0xFF00;
	// loop through bytes
	for (int i = 0; i < 16; ++i) {
    1968:	2000      	movs	r0, #0
	uint16_t n_rem = 0;
    196a:	2300      	movs	r3, #0
	for (int i = 0; i < 16; ++i) {
    196c:	e014      	b.n	1998 <baro_check+0x4c>
		uint16_t byte;
		// select LSB or MSB
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    196e:	1042      	asrs	r2, r0, #1
    1970:	0052      	lsls	r2, r2, #1
    1972:	5aa2      	ldrh	r2, [r4, r2]
    1974:	0a12      	lsrs	r2, r2, #8
    1976:	e018      	b.n	19aa <baro_check+0x5e>
		n_rem ^= byte;
		// loop through bits
		for (int j = 0; j < 8; ++j) {
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1978:	005b      	lsls	r3, r3, #1
    197a:	b29b      	uxth	r3, r3
		for (int j = 0; j < 8; ++j) {
    197c:	3201      	adds	r2, #1
    197e:	2a07      	cmp	r2, #7
    1980:	dc09      	bgt.n	1996 <baro_check+0x4a>
			n_rem = (n_rem & 0x8000) ? (n_rem << 1) ^ 0x3000 : (n_rem << 1);
    1982:	b219      	sxth	r1, r3
    1984:	2900      	cmp	r1, #0
    1986:	daf7      	bge.n	1978 <baro_check+0x2c>
    1988:	0059      	lsls	r1, r3, #1
    198a:	23c0      	movs	r3, #192	; 0xc0
    198c:	019b      	lsls	r3, r3, #6
    198e:	404b      	eors	r3, r1
    1990:	b21b      	sxth	r3, r3
    1992:	b29b      	uxth	r3, r3
    1994:	e7f2      	b.n	197c <baro_check+0x30>
	for (int i = 0; i < 16; ++i) {
    1996:	3001      	adds	r0, #1
    1998:	280f      	cmp	r0, #15
    199a:	dc09      	bgt.n	19b0 <baro_check+0x64>
		byte = (i & 1) ? prom[i >> 1] & 0xFF : prom[i >> 1] >> 8;
    199c:	07c2      	lsls	r2, r0, #31
    199e:	d5e6      	bpl.n	196e <baro_check+0x22>
    19a0:	1042      	asrs	r2, r0, #1
    19a2:	0052      	lsls	r2, r2, #1
    19a4:	5aa1      	ldrh	r1, [r4, r2]
    19a6:	22ff      	movs	r2, #255	; 0xff
    19a8:	400a      	ands	r2, r1
		n_rem ^= byte;
    19aa:	4053      	eors	r3, r2
		for (int j = 0; j < 8; ++j) {
    19ac:	2200      	movs	r2, #0
    19ae:	e7e6      	b.n	197e <baro_check+0x32>
		}
	}
	n_rem = (0xF & (n_rem >> 12));
    19b0:	0b1b      	lsrs	r3, r3, #12
	desc->prom.crc = prom_crc;
    19b2:	73a5      	strb	r5, [r4, #14]
    19b4:	0a2a      	lsrs	r2, r5, #8
    19b6:	73e2      	strb	r2, [r4, #15]
	return n_rem == (prom_crc & 0xF);
    19b8:	200f      	movs	r0, #15
    19ba:	4028      	ands	r0, r5
    19bc:	1ac0      	subs	r0, r0, r3
    19be:	4243      	negs	r3, r0
    19c0:	4158      	adcs	r0, r3
    19c2:	b2c0      	uxtb	r0, r0
}
    19c4:	bd30      	pop	{r4, r5, pc}
	...

000019c8 <baro_init>:

bool baro_init(Barometer_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    19c8:	b570      	push	{r4, r5, r6, lr}
    19ca:	b082      	sub	sp, #8
    19cc:	0005      	movs	r5, r0
    19ce:	000c      	movs	r4, r1
    19d0:	9200      	str	r2, [sp, #0]
    19d2:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    19d4:	0008      	movs	r0, r1
    19d6:	4b0e      	ldr	r3, [pc, #56]	; (1a10 <baro_init+0x48>)
    19d8:	4798      	blx	r3
    19da:	1e06      	subs	r6, r0, #0
    19dc:	d102      	bne.n	19e4 <baro_init+0x1c>
	baro_send_command(desc, BARO_RESET, 3000);
	// read prom
	baro_read_prom(desc);
	
	return true;
}
    19de:	0030      	movs	r0, r6
    19e0:	b002      	add	sp, #8
    19e2:	bd70      	pop	{r4, r5, r6, pc}
	desc->sercom = sercom;
    19e4:	742c      	strb	r4, [r5, #16]
    19e6:	0a23      	lsrs	r3, r4, #8
    19e8:	746b      	strb	r3, [r5, #17]
    19ea:	0c23      	lsrs	r3, r4, #16
    19ec:	74ab      	strb	r3, [r5, #18]
    19ee:	0e24      	lsrs	r4, r4, #24
    19f0:	74ec      	strb	r4, [r5, #19]
	desc->sspin = sspin;
    19f2:	0028      	movs	r0, r5
    19f4:	3014      	adds	r0, #20
    19f6:	2205      	movs	r2, #5
    19f8:	4669      	mov	r1, sp
    19fa:	4b06      	ldr	r3, [pc, #24]	; (1a14 <baro_init+0x4c>)
    19fc:	4798      	blx	r3
	baro_send_command(desc, BARO_RESET, 3000);
    19fe:	4a06      	ldr	r2, [pc, #24]	; (1a18 <baro_init+0x50>)
    1a00:	211e      	movs	r1, #30
    1a02:	0028      	movs	r0, r5
    1a04:	4b05      	ldr	r3, [pc, #20]	; (1a1c <baro_init+0x54>)
    1a06:	4798      	blx	r3
	baro_read_prom(desc);
    1a08:	0028      	movs	r0, r5
    1a0a:	4b05      	ldr	r3, [pc, #20]	; (1a20 <baro_init+0x58>)
    1a0c:	4798      	blx	r3
	return true;
    1a0e:	e7e6      	b.n	19de <baro_init+0x16>
    1a10:	000025cd 	.word	0x000025cd
    1a14:	00005b49 	.word	0x00005b49
    1a18:	00000bb8 	.word	0x00000bb8
    1a1c:	0000182d 	.word	0x0000182d
    1a20:	000018a1 	.word	0x000018a1

00001a24 <dma_set_channel>:

DMA_Descriptor_Type dma_descriptor[DMA_CHANNELS] __attribute__ ((aligned (8)));
DMA_Descriptor_Type dma_descriptor_writeback[DMA_CHANNELS] __attribute__ ((aligned (8)));

bool dma_set_channel(uint8_t channel) {
	if (channel < 12) {
    1a24:	280b      	cmp	r0, #11
    1a26:	d804      	bhi.n	1a32 <dma_set_channel+0xe>
		DMAC_REGS->DMAC_CHID = channel;
    1a28:	4a03      	ldr	r2, [pc, #12]	; (1a38 <dma_set_channel+0x14>)
    1a2a:	233f      	movs	r3, #63	; 0x3f
    1a2c:	54d0      	strb	r0, [r2, r3]
		return true;
    1a2e:	2001      	movs	r0, #1
	}
	else return false;
}
    1a30:	4770      	bx	lr
	else return false;
    1a32:	2000      	movs	r0, #0
    1a34:	e7fc      	b.n	1a30 <dma_set_channel+0xc>
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	41004800 	.word	0x41004800

00001a3c <dma_init>:

void dma_init() {
	// enable bus clocks
	PM_REGS->PM_AHBMASK |= PM_AHBMASK_DMAC(1);
    1a3c:	4b07      	ldr	r3, [pc, #28]	; (1a5c <dma_init+0x20>)
    1a3e:	695a      	ldr	r2, [r3, #20]
    1a40:	2120      	movs	r1, #32
    1a42:	430a      	orrs	r2, r1
    1a44:	615a      	str	r2, [r3, #20]
	PM_REGS->PM_APBBMASK |= PM_AHBMASK_DMAC(1);
    1a46:	69da      	ldr	r2, [r3, #28]
    1a48:	430a      	orrs	r2, r1
    1a4a:	61da      	str	r2, [r3, #28]
	
	// tell DMAC where root descriptors are 
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma_descriptor;
    1a4c:	4a04      	ldr	r2, [pc, #16]	; (1a60 <dma_init+0x24>)
    1a4e:	4b05      	ldr	r3, [pc, #20]	; (1a64 <dma_init+0x28>)
    1a50:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma_descriptor_writeback;
    1a52:	4a05      	ldr	r2, [pc, #20]	; (1a68 <dma_init+0x2c>)
    1a54:	639a      	str	r2, [r3, #56]	; 0x38
	
	// enable DMAC
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1) | DMAC_CTRL_LVLEN1(1) |
    1a56:	4a05      	ldr	r2, [pc, #20]	; (1a6c <dma_init+0x30>)
    1a58:	801a      	strh	r2, [r3, #0]
		DMAC_CTRL_LVLEN2(1) | DMAC_CTRL_LVLEN3(1) |
		DMAC_CTRL_DMAENABLE(1);
}
    1a5a:	4770      	bx	lr
    1a5c:	40000400 	.word	0x40000400
    1a60:	20000538 	.word	0x20000538
    1a64:	41004800 	.word	0x41004800
    1a68:	20000498 	.word	0x20000498
    1a6c:	00000f02 	.word	0x00000f02

00001a70 <dma_create_descriptor>:

bool dma_create_descriptor(DMA_Descriptor_Type* descriptor, bool incsource, bool incdest,
	uint8_t beatsize, uint16_t count, void* src, void* dst, void* nextdescriptor) {
    1a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a72:	ac05      	add	r4, sp, #20
    1a74:	8826      	ldrh	r6, [r4, #0]
		
	// check beatsize is in range
	if (beatsize > 0x2) return false;
    1a76:	2b02      	cmp	r3, #2
    1a78:	d82d      	bhi.n	1ad6 <dma_create_descriptor+0x66>
	
	// set BTCTRL register	
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1a7a:	2900      	cmp	r1, #0
    1a7c:	d023      	beq.n	1ac6 <dma_create_descriptor+0x56>
    1a7e:	2480      	movs	r4, #128	; 0x80
    1a80:	00e4      	lsls	r4, r4, #3
    1a82:	2a00      	cmp	r2, #0
    1a84:	d021      	beq.n	1aca <dma_create_descriptor+0x5a>
    1a86:	2580      	movs	r5, #128	; 0x80
    1a88:	012d      	lsls	r5, r5, #4
    1a8a:	432c      	orrs	r4, r5
		DMAC_BTCTRL_BEATSIZE((uint32_t)beatsize) | DMAC_BTCTRL_BLOCKACT_NOACT |
    1a8c:	021d      	lsls	r5, r3, #8
    1a8e:	27c0      	movs	r7, #192	; 0xc0
    1a90:	00bf      	lsls	r7, r7, #2
    1a92:	403d      	ands	r5, r7
    1a94:	432c      	orrs	r4, r5
		DMAC_BTCTRL_EVOSEL_DISABLE | DMAC_BTCTRL_VALID(1);
    1a96:	2501      	movs	r5, #1
    1a98:	432c      	orrs	r4, r5
	descriptor->BTCTRL.reg = DMAC_BTCTRL_STEPSIZE_X1 | DMAC_BTCTRL_STEPSEL_DST | 
    1a9a:	8004      	strh	r4, [r0, #0]
	
	// set number of beats in transfer
	descriptor->BTCNT = count;
    1a9c:	8046      	strh	r6, [r0, #2]
	
	// set source & destination address
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    1a9e:	2900      	cmp	r1, #0
    1aa0:	d015      	beq.n	1ace <dma_create_descriptor+0x5e>
    1aa2:	1c59      	adds	r1, r3, #1
    1aa4:	4371      	muls	r1, r6
    1aa6:	9c06      	ldr	r4, [sp, #24]
    1aa8:	46a4      	mov	ip, r4
    1aaa:	4461      	add	r1, ip
    1aac:	6041      	str	r1, [r0, #4]
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    1aae:	2a00      	cmp	r2, #0
    1ab0:	d00f      	beq.n	1ad2 <dma_create_descriptor+0x62>
    1ab2:	3301      	adds	r3, #1
    1ab4:	4373      	muls	r3, r6
    1ab6:	9a07      	ldr	r2, [sp, #28]
    1ab8:	4694      	mov	ip, r2
    1aba:	4463      	add	r3, ip
    1abc:	6083      	str	r3, [r0, #8]
	
	// set address of next descriptor
	descriptor->DESCADDR = (uint32_t)nextdescriptor;
    1abe:	9b08      	ldr	r3, [sp, #32]
    1ac0:	60c3      	str	r3, [r0, #12]
	
	return true;
    1ac2:	2001      	movs	r0, #1
}
    1ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		((incsource) ? DMAC_BTCTRL_SRCINC(1) : 0) | ((incdest) ? DMAC_BTCTRL_DSTINC(1) : 0) |
    1ac6:	2400      	movs	r4, #0
    1ac8:	e7db      	b.n	1a82 <dma_create_descriptor+0x12>
    1aca:	2500      	movs	r5, #0
    1acc:	e7dd      	b.n	1a8a <dma_create_descriptor+0x1a>
	descriptor->SRCADDR = (incsource) ? (uint32_t)src + count * (beatsize + 1) : (uint32_t)src;
    1ace:	9906      	ldr	r1, [sp, #24]
    1ad0:	e7ec      	b.n	1aac <dma_create_descriptor+0x3c>
	descriptor->DSTADDR = (incdest) ? (uint32_t)dst + count * (beatsize + 1) : (uint32_t)dst;
    1ad2:	9b07      	ldr	r3, [sp, #28]
    1ad4:	e7f2      	b.n	1abc <dma_create_descriptor+0x4c>
	if (beatsize > 0x2) return false;
    1ad6:	2000      	movs	r0, #0
    1ad8:	e7f4      	b.n	1ac4 <dma_create_descriptor+0x54>
	...

00001adc <dma_init_channel>:

bool dma_init_channel(uint8_t channel, uint8_t trigact, uint8_t trigsrc, uint8_t priority) {
    1adc:	b570      	push	{r4, r5, r6, lr}
    1ade:	000c      	movs	r4, r1
    1ae0:	0015      	movs	r5, r2
    1ae2:	001e      	movs	r6, r3
	if (!dma_set_channel(channel)) return false;
    1ae4:	4b0e      	ldr	r3, [pc, #56]	; (1b20 <dma_init_channel+0x44>)
    1ae6:	4798      	blx	r3
    1ae8:	2800      	cmp	r0, #0
    1aea:	d012      	beq.n	1b12 <dma_init_channel+0x36>
	if (priority > 3) return false;
    1aec:	2e03      	cmp	r6, #3
    1aee:	d811      	bhi.n	1b14 <dma_init_channel+0x38>
	if (trigact > 3 || trigact == 1) return false;
    1af0:	2c03      	cmp	r4, #3
    1af2:	d811      	bhi.n	1b18 <dma_init_channel+0x3c>
    1af4:	2c01      	cmp	r4, #1
    1af6:	d011      	beq.n	1b1c <dma_init_channel+0x40>
	
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1af8:	05a4      	lsls	r4, r4, #22
    1afa:	23c0      	movs	r3, #192	; 0xc0
    1afc:	041b      	lsls	r3, r3, #16
    1afe:	401c      	ands	r4, r3
    1b00:	022d      	lsls	r5, r5, #8
    1b02:	23fc      	movs	r3, #252	; 0xfc
    1b04:	019b      	lsls	r3, r3, #6
    1b06:	401d      	ands	r5, r3
    1b08:	432c      	orrs	r4, r5
		((uint32_t)priority << DMAC_CHCTRLB_LVL_Pos);
    1b0a:	0176      	lsls	r6, r6, #5
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT((uint32_t)trigact) | DMAC_CHCTRLB_TRIGSRC((uint32_t)trigsrc) |
    1b0c:	4334      	orrs	r4, r6
    1b0e:	4a05      	ldr	r2, [pc, #20]	; (1b24 <dma_init_channel+0x48>)
    1b10:	6454      	str	r4, [r2, #68]	; 0x44
		
	return true;
}
    1b12:	bd70      	pop	{r4, r5, r6, pc}
	if (priority > 3) return false;
    1b14:	2000      	movs	r0, #0
    1b16:	e7fc      	b.n	1b12 <dma_init_channel+0x36>
	if (trigact > 3 || trigact == 1) return false;
    1b18:	2000      	movs	r0, #0
    1b1a:	e7fa      	b.n	1b12 <dma_init_channel+0x36>
    1b1c:	2000      	movs	r0, #0
    1b1e:	e7f8      	b.n	1b12 <dma_init_channel+0x36>
    1b20:	00001a25 	.word	0x00001a25
    1b24:	41004800 	.word	0x41004800

00001b28 <dma_enable_channel>:

bool dma_enable_channel(uint8_t channel) {
    1b28:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    1b2a:	4b07      	ldr	r3, [pc, #28]	; (1b48 <dma_enable_channel+0x20>)
    1b2c:	4798      	blx	r3
    1b2e:	2800      	cmp	r0, #0
    1b30:	d009      	beq.n	1b46 <dma_enable_channel+0x1e>
	
	// clear interrupt
	DMAC_REGS->DMAC_CHINTFLAG = DMAC_CHINTFLAG_TCMPL(1);
    1b32:	4a06      	ldr	r2, [pc, #24]	; (1b4c <dma_enable_channel+0x24>)
    1b34:	234e      	movs	r3, #78	; 0x4e
    1b36:	2102      	movs	r1, #2
    1b38:	54d1      	strb	r1, [r2, r3]
	// enable channel
	DMAC_REGS->DMAC_CHCTRLA |= DMAC_CHCTRLA_ENABLE(1);
    1b3a:	313e      	adds	r1, #62	; 0x3e
    1b3c:	5c53      	ldrb	r3, [r2, r1]
    1b3e:	2402      	movs	r4, #2
    1b40:	4323      	orrs	r3, r4
    1b42:	b2db      	uxtb	r3, r3
    1b44:	5453      	strb	r3, [r2, r1]
	return true;
}
    1b46:	bd10      	pop	{r4, pc}
    1b48:	00001a25 	.word	0x00001a25
    1b4c:	41004800 	.word	0x41004800

00001b50 <dma_disable_channel>:

bool dma_disable_channel(uint8_t channel) {
    1b50:	b510      	push	{r4, lr}
	if (!dma_set_channel(channel)) return false;
    1b52:	4b05      	ldr	r3, [pc, #20]	; (1b68 <dma_disable_channel+0x18>)
    1b54:	4798      	blx	r3
    1b56:	2800      	cmp	r0, #0
    1b58:	d005      	beq.n	1b66 <dma_disable_channel+0x16>
	
	// disable channel
	DMAC_REGS->DMAC_CHCTRLA &= ~DMAC_CHCTRLA_ENABLE(1);
    1b5a:	4904      	ldr	r1, [pc, #16]	; (1b6c <dma_disable_channel+0x1c>)
    1b5c:	2240      	movs	r2, #64	; 0x40
    1b5e:	5c8b      	ldrb	r3, [r1, r2]
    1b60:	2402      	movs	r4, #2
    1b62:	43a3      	bics	r3, r4
    1b64:	548b      	strb	r3, [r1, r2]
	return true;
}
    1b66:	bd10      	pop	{r4, pc}
    1b68:	00001a25 	.word	0x00001a25
    1b6c:	41004800 	.word	0x41004800

00001b70 <eeprom_init>:
void eeprom_init(EEPROM_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint16_t size) {
    1b70:	b530      	push	{r4, r5, lr}
    1b72:	b083      	sub	sp, #12
    1b74:	0004      	movs	r4, r0
    1b76:	9200      	str	r2, [sp, #0]
    1b78:	9301      	str	r3, [sp, #4]
    1b7a:	ab06      	add	r3, sp, #24
    1b7c:	881d      	ldrh	r5, [r3, #0]
	desc->sercom = sercom;
    1b7e:	7001      	strb	r1, [r0, #0]
    1b80:	0a0b      	lsrs	r3, r1, #8
    1b82:	7043      	strb	r3, [r0, #1]
    1b84:	0c0b      	lsrs	r3, r1, #16
    1b86:	7083      	strb	r3, [r0, #2]
    1b88:	0e09      	lsrs	r1, r1, #24
    1b8a:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1b8c:	3004      	adds	r0, #4
    1b8e:	2205      	movs	r2, #5
    1b90:	4669      	mov	r1, sp
    1b92:	4b10      	ldr	r3, [pc, #64]	; (1bd4 <eeprom_init+0x64>)
    1b94:	4798      	blx	r3
	desc->size = size;
    1b96:	7265      	strb	r5, [r4, #9]
    1b98:	0a2d      	lsrs	r5, r5, #8
    1b9a:	72a5      	strb	r5, [r4, #10]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1b9c:	7923      	ldrb	r3, [r4, #4]
    1b9e:	7962      	ldrb	r2, [r4, #5]
    1ba0:	0212      	lsls	r2, r2, #8
    1ba2:	431a      	orrs	r2, r3
    1ba4:	79a3      	ldrb	r3, [r4, #6]
    1ba6:	041b      	lsls	r3, r3, #16
    1ba8:	4313      	orrs	r3, r2
    1baa:	79e1      	ldrb	r1, [r4, #7]
    1bac:	0609      	lsls	r1, r1, #24
    1bae:	4319      	orrs	r1, r3
    1bb0:	7a20      	ldrb	r0, [r4, #8]
    1bb2:	4b09      	ldr	r3, [pc, #36]	; (1bd8 <eeprom_init+0x68>)
    1bb4:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1bb6:	7923      	ldrb	r3, [r4, #4]
    1bb8:	7962      	ldrb	r2, [r4, #5]
    1bba:	0212      	lsls	r2, r2, #8
    1bbc:	431a      	orrs	r2, r3
    1bbe:	79a3      	ldrb	r3, [r4, #6]
    1bc0:	041b      	lsls	r3, r3, #16
    1bc2:	4313      	orrs	r3, r2
    1bc4:	79e1      	ldrb	r1, [r4, #7]
    1bc6:	0609      	lsls	r1, r1, #24
    1bc8:	4319      	orrs	r1, r3
    1bca:	7a20      	ldrb	r0, [r4, #8]
    1bcc:	4b03      	ldr	r3, [pc, #12]	; (1bdc <eeprom_init+0x6c>)
    1bce:	4798      	blx	r3
}
    1bd0:	b003      	add	sp, #12
    1bd2:	bd30      	pop	{r4, r5, pc}
    1bd4:	00005b49 	.word	0x00005b49
    1bd8:	000022c1 	.word	0x000022c1
    1bdc:	000022d1 	.word	0x000022d1

00001be0 <eeprom_write_enable>:
void eeprom_write_enable(EEPROM_Descriptor* desc) {
    1be0:	b510      	push	{r4, lr}
    1be2:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1be4:	7903      	ldrb	r3, [r0, #4]
    1be6:	7942      	ldrb	r2, [r0, #5]
    1be8:	0212      	lsls	r2, r2, #8
    1bea:	431a      	orrs	r2, r3
    1bec:	7983      	ldrb	r3, [r0, #6]
    1bee:	041b      	lsls	r3, r3, #16
    1bf0:	4313      	orrs	r3, r2
    1bf2:	79c1      	ldrb	r1, [r0, #7]
    1bf4:	0609      	lsls	r1, r1, #24
    1bf6:	4319      	orrs	r1, r3
    1bf8:	7a00      	ldrb	r0, [r0, #8]
    1bfa:	4b0e      	ldr	r3, [pc, #56]	; (1c34 <eeprom_write_enable+0x54>)
    1bfc:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WREN);
    1bfe:	7823      	ldrb	r3, [r4, #0]
    1c00:	7862      	ldrb	r2, [r4, #1]
    1c02:	0212      	lsls	r2, r2, #8
    1c04:	431a      	orrs	r2, r3
    1c06:	78a3      	ldrb	r3, [r4, #2]
    1c08:	041b      	lsls	r3, r3, #16
    1c0a:	4313      	orrs	r3, r2
    1c0c:	78e0      	ldrb	r0, [r4, #3]
    1c0e:	0600      	lsls	r0, r0, #24
    1c10:	4318      	orrs	r0, r3
    1c12:	2106      	movs	r1, #6
    1c14:	4b08      	ldr	r3, [pc, #32]	; (1c38 <eeprom_write_enable+0x58>)
    1c16:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1c18:	7923      	ldrb	r3, [r4, #4]
    1c1a:	7962      	ldrb	r2, [r4, #5]
    1c1c:	0212      	lsls	r2, r2, #8
    1c1e:	431a      	orrs	r2, r3
    1c20:	79a3      	ldrb	r3, [r4, #6]
    1c22:	041b      	lsls	r3, r3, #16
    1c24:	4313      	orrs	r3, r2
    1c26:	79e1      	ldrb	r1, [r4, #7]
    1c28:	0609      	lsls	r1, r1, #24
    1c2a:	4319      	orrs	r1, r3
    1c2c:	7a20      	ldrb	r0, [r4, #8]
    1c2e:	4b03      	ldr	r3, [pc, #12]	; (1c3c <eeprom_write_enable+0x5c>)
    1c30:	4798      	blx	r3
}
    1c32:	bd10      	pop	{r4, pc}
    1c34:	000022e1 	.word	0x000022e1
    1c38:	000027bd 	.word	0x000027bd
    1c3c:	000022d1 	.word	0x000022d1

00001c40 <eeprom_write_disable>:
void eeprom_write_disable(EEPROM_Descriptor* desc) {
    1c40:	b510      	push	{r4, lr}
    1c42:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1c44:	7903      	ldrb	r3, [r0, #4]
    1c46:	7942      	ldrb	r2, [r0, #5]
    1c48:	0212      	lsls	r2, r2, #8
    1c4a:	431a      	orrs	r2, r3
    1c4c:	7983      	ldrb	r3, [r0, #6]
    1c4e:	041b      	lsls	r3, r3, #16
    1c50:	4313      	orrs	r3, r2
    1c52:	79c1      	ldrb	r1, [r0, #7]
    1c54:	0609      	lsls	r1, r1, #24
    1c56:	4319      	orrs	r1, r3
    1c58:	7a00      	ldrb	r0, [r0, #8]
    1c5a:	4b0e      	ldr	r3, [pc, #56]	; (1c94 <eeprom_write_disable+0x54>)
    1c5c:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_WRDI);
    1c5e:	7823      	ldrb	r3, [r4, #0]
    1c60:	7862      	ldrb	r2, [r4, #1]
    1c62:	0212      	lsls	r2, r2, #8
    1c64:	431a      	orrs	r2, r3
    1c66:	78a3      	ldrb	r3, [r4, #2]
    1c68:	041b      	lsls	r3, r3, #16
    1c6a:	4313      	orrs	r3, r2
    1c6c:	78e0      	ldrb	r0, [r4, #3]
    1c6e:	0600      	lsls	r0, r0, #24
    1c70:	4318      	orrs	r0, r3
    1c72:	2104      	movs	r1, #4
    1c74:	4b08      	ldr	r3, [pc, #32]	; (1c98 <eeprom_write_disable+0x58>)
    1c76:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1c78:	7923      	ldrb	r3, [r4, #4]
    1c7a:	7962      	ldrb	r2, [r4, #5]
    1c7c:	0212      	lsls	r2, r2, #8
    1c7e:	431a      	orrs	r2, r3
    1c80:	79a3      	ldrb	r3, [r4, #6]
    1c82:	041b      	lsls	r3, r3, #16
    1c84:	4313      	orrs	r3, r2
    1c86:	79e1      	ldrb	r1, [r4, #7]
    1c88:	0609      	lsls	r1, r1, #24
    1c8a:	4319      	orrs	r1, r3
    1c8c:	7a20      	ldrb	r0, [r4, #8]
    1c8e:	4b03      	ldr	r3, [pc, #12]	; (1c9c <eeprom_write_disable+0x5c>)
    1c90:	4798      	blx	r3
}
    1c92:	bd10      	pop	{r4, pc}
    1c94:	000022e1 	.word	0x000022e1
    1c98:	000027bd 	.word	0x000027bd
    1c9c:	000022d1 	.word	0x000022d1

00001ca0 <eeprom_read_status>:
uint8_t eeprom_read_status(EEPROM_Descriptor* desc) {
    1ca0:	b570      	push	{r4, r5, r6, lr}
    1ca2:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1ca4:	7903      	ldrb	r3, [r0, #4]
    1ca6:	7942      	ldrb	r2, [r0, #5]
    1ca8:	0212      	lsls	r2, r2, #8
    1caa:	431a      	orrs	r2, r3
    1cac:	7983      	ldrb	r3, [r0, #6]
    1cae:	041b      	lsls	r3, r3, #16
    1cb0:	4313      	orrs	r3, r2
    1cb2:	79c1      	ldrb	r1, [r0, #7]
    1cb4:	0609      	lsls	r1, r1, #24
    1cb6:	4319      	orrs	r1, r3
    1cb8:	7a00      	ldrb	r0, [r0, #8]
    1cba:	4b15      	ldr	r3, [pc, #84]	; (1d10 <eeprom_read_status+0x70>)
    1cbc:	4798      	blx	r3
	spi_command(desc->sercom, EEPROM_RDSR);
    1cbe:	7823      	ldrb	r3, [r4, #0]
    1cc0:	7862      	ldrb	r2, [r4, #1]
    1cc2:	0212      	lsls	r2, r2, #8
    1cc4:	431a      	orrs	r2, r3
    1cc6:	78a3      	ldrb	r3, [r4, #2]
    1cc8:	041b      	lsls	r3, r3, #16
    1cca:	4313      	orrs	r3, r2
    1ccc:	78e0      	ldrb	r0, [r4, #3]
    1cce:	0600      	lsls	r0, r0, #24
    1cd0:	4318      	orrs	r0, r3
    1cd2:	2105      	movs	r1, #5
    1cd4:	4d0f      	ldr	r5, [pc, #60]	; (1d14 <eeprom_read_status+0x74>)
    1cd6:	47a8      	blx	r5
	uint8_t out = spi_command(desc->sercom, 0);
    1cd8:	7823      	ldrb	r3, [r4, #0]
    1cda:	7862      	ldrb	r2, [r4, #1]
    1cdc:	0212      	lsls	r2, r2, #8
    1cde:	431a      	orrs	r2, r3
    1ce0:	78a3      	ldrb	r3, [r4, #2]
    1ce2:	041b      	lsls	r3, r3, #16
    1ce4:	4313      	orrs	r3, r2
    1ce6:	78e0      	ldrb	r0, [r4, #3]
    1ce8:	0600      	lsls	r0, r0, #24
    1cea:	4318      	orrs	r0, r3
    1cec:	2100      	movs	r1, #0
    1cee:	47a8      	blx	r5
    1cf0:	0005      	movs	r5, r0
	port_set(desc->sspin.port, desc->sspin.pin);
    1cf2:	7923      	ldrb	r3, [r4, #4]
    1cf4:	7962      	ldrb	r2, [r4, #5]
    1cf6:	0212      	lsls	r2, r2, #8
    1cf8:	431a      	orrs	r2, r3
    1cfa:	79a3      	ldrb	r3, [r4, #6]
    1cfc:	041b      	lsls	r3, r3, #16
    1cfe:	4313      	orrs	r3, r2
    1d00:	79e1      	ldrb	r1, [r4, #7]
    1d02:	0609      	lsls	r1, r1, #24
    1d04:	4319      	orrs	r1, r3
    1d06:	7a20      	ldrb	r0, [r4, #8]
    1d08:	4b03      	ldr	r3, [pc, #12]	; (1d18 <eeprom_read_status+0x78>)
    1d0a:	4798      	blx	r3
}
    1d0c:	0028      	movs	r0, r5
    1d0e:	bd70      	pop	{r4, r5, r6, pc}
    1d10:	000022e1 	.word	0x000022e1
    1d14:	000027bd 	.word	0x000027bd
    1d18:	000022d1 	.word	0x000022d1

00001d1c <eeprom_check>:

// checks eeprom by toggling write enable bit
bool eeprom_check(EEPROM_Descriptor* desc) {
    1d1c:	b510      	push	{r4, lr}
    1d1e:	0004      	movs	r4, r0
	eeprom_write_enable(desc);
    1d20:	4b0a      	ldr	r3, [pc, #40]	; (1d4c <eeprom_check+0x30>)
    1d22:	4798      	blx	r3
	if (!(eeprom_read_status(desc) & EEPROM_WEL_MASK)) return false;
    1d24:	0020      	movs	r0, r4
    1d26:	4b0a      	ldr	r3, [pc, #40]	; (1d50 <eeprom_check+0x34>)
    1d28:	4798      	blx	r3
    1d2a:	0780      	lsls	r0, r0, #30
    1d2c:	d401      	bmi.n	1d32 <eeprom_check+0x16>
    1d2e:	2000      	movs	r0, #0
	eeprom_write_disable(desc);
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
	return true;
    1d30:	bd10      	pop	{r4, pc}
	eeprom_write_disable(desc);
    1d32:	0020      	movs	r0, r4
    1d34:	4b07      	ldr	r3, [pc, #28]	; (1d54 <eeprom_check+0x38>)
    1d36:	4798      	blx	r3
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1d38:	0020      	movs	r0, r4
    1d3a:	4b05      	ldr	r3, [pc, #20]	; (1d50 <eeprom_check+0x34>)
    1d3c:	4798      	blx	r3
    1d3e:	0780      	lsls	r0, r0, #30
    1d40:	d401      	bmi.n	1d46 <eeprom_check+0x2a>
	return true;
    1d42:	2001      	movs	r0, #1
    1d44:	e7f4      	b.n	1d30 <eeprom_check+0x14>
	if (eeprom_read_status(desc) & EEPROM_WEL_MASK) return false;
    1d46:	2000      	movs	r0, #0
    1d48:	e7f2      	b.n	1d30 <eeprom_check+0x14>
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	00001be1 	.word	0x00001be1
    1d50:	00001ca1 	.word	0x00001ca1
    1d54:	00001c41 	.word	0x00001c41

00001d58 <flash_init>:
#include "flash_at25.h"
#include "spi.h"

void flash_init(FLASH_Descriptor* desc, sercom_registers_t* sercom, Pin sspin, uint32_t size, uint8_t density_code) {
    1d58:	b570      	push	{r4, r5, r6, lr}
    1d5a:	b082      	sub	sp, #8
    1d5c:	0004      	movs	r4, r0
    1d5e:	9200      	str	r2, [sp, #0]
    1d60:	9301      	str	r3, [sp, #4]
    1d62:	ab06      	add	r3, sp, #24
    1d64:	cb20      	ldmia	r3!, {r5}
    1d66:	781e      	ldrb	r6, [r3, #0]
	desc->sercom = sercom;
    1d68:	7001      	strb	r1, [r0, #0]
    1d6a:	0a0b      	lsrs	r3, r1, #8
    1d6c:	7043      	strb	r3, [r0, #1]
    1d6e:	0c0b      	lsrs	r3, r1, #16
    1d70:	7083      	strb	r3, [r0, #2]
    1d72:	0e09      	lsrs	r1, r1, #24
    1d74:	70c1      	strb	r1, [r0, #3]
	desc->sspin = sspin;
    1d76:	3008      	adds	r0, #8
    1d78:	2205      	movs	r2, #5
    1d7a:	4669      	mov	r1, sp
    1d7c:	4b15      	ldr	r3, [pc, #84]	; (1dd4 <flash_init+0x7c>)
    1d7e:	4798      	blx	r3
	desc->size = size;
    1d80:	7125      	strb	r5, [r4, #4]
    1d82:	0a2b      	lsrs	r3, r5, #8
    1d84:	7163      	strb	r3, [r4, #5]
    1d86:	0c2b      	lsrs	r3, r5, #16
    1d88:	71a3      	strb	r3, [r4, #6]
    1d8a:	0e2d      	lsrs	r5, r5, #24
    1d8c:	71e5      	strb	r5, [r4, #7]
	desc->density_code = density_code;
    1d8e:	221f      	movs	r2, #31
    1d90:	4032      	ands	r2, r6
    1d92:	7b63      	ldrb	r3, [r4, #13]
    1d94:	211f      	movs	r1, #31
    1d96:	438b      	bics	r3, r1
    1d98:	4313      	orrs	r3, r2
    1d9a:	7363      	strb	r3, [r4, #13]
	port_set_output(desc->sspin.port, desc->sspin.pin);
    1d9c:	7a23      	ldrb	r3, [r4, #8]
    1d9e:	7a62      	ldrb	r2, [r4, #9]
    1da0:	0212      	lsls	r2, r2, #8
    1da2:	431a      	orrs	r2, r3
    1da4:	7aa3      	ldrb	r3, [r4, #10]
    1da6:	041b      	lsls	r3, r3, #16
    1da8:	4313      	orrs	r3, r2
    1daa:	7ae1      	ldrb	r1, [r4, #11]
    1dac:	0609      	lsls	r1, r1, #24
    1dae:	4319      	orrs	r1, r3
    1db0:	7b20      	ldrb	r0, [r4, #12]
    1db2:	4b09      	ldr	r3, [pc, #36]	; (1dd8 <flash_init+0x80>)
    1db4:	4798      	blx	r3
	port_set(desc->sspin.port, desc->sspin.pin);
    1db6:	7a23      	ldrb	r3, [r4, #8]
    1db8:	7a62      	ldrb	r2, [r4, #9]
    1dba:	0212      	lsls	r2, r2, #8
    1dbc:	431a      	orrs	r2, r3
    1dbe:	7aa3      	ldrb	r3, [r4, #10]
    1dc0:	041b      	lsls	r3, r3, #16
    1dc2:	4313      	orrs	r3, r2
    1dc4:	7ae1      	ldrb	r1, [r4, #11]
    1dc6:	0609      	lsls	r1, r1, #24
    1dc8:	4319      	orrs	r1, r3
    1dca:	7b20      	ldrb	r0, [r4, #12]
    1dcc:	4b03      	ldr	r3, [pc, #12]	; (1ddc <flash_init+0x84>)
    1dce:	4798      	blx	r3
}
    1dd0:	b002      	add	sp, #8
    1dd2:	bd70      	pop	{r4, r5, r6, pc}
    1dd4:	00005b49 	.word	0x00005b49
    1dd8:	000022c1 	.word	0x000022c1
    1ddc:	000022d1 	.word	0x000022d1

00001de0 <flash_check>:

bool flash_check(FLASH_Descriptor* desc) {
    1de0:	b530      	push	{r4, r5, lr}
    1de2:	b083      	sub	sp, #12
    1de4:	0004      	movs	r4, r0
	port_clear(desc->sspin.port, desc->sspin.pin);
    1de6:	7a03      	ldrb	r3, [r0, #8]
    1de8:	7a42      	ldrb	r2, [r0, #9]
    1dea:	0212      	lsls	r2, r2, #8
    1dec:	431a      	orrs	r2, r3
    1dee:	7a83      	ldrb	r3, [r0, #10]
    1df0:	041b      	lsls	r3, r3, #16
    1df2:	4313      	orrs	r3, r2
    1df4:	7ac1      	ldrb	r1, [r0, #11]
    1df6:	0609      	lsls	r1, r1, #24
    1df8:	4319      	orrs	r1, r3
    1dfa:	7b00      	ldrb	r0, [r0, #12]
    1dfc:	4b24      	ldr	r3, [pc, #144]	; (1e90 <flash_check+0xb0>)
    1dfe:	4798      	blx	r3
	uint8_t jedecid[3];
	spi_command(desc->sercom, READ_JEDEC_ID);
    1e00:	7823      	ldrb	r3, [r4, #0]
    1e02:	7862      	ldrb	r2, [r4, #1]
    1e04:	0212      	lsls	r2, r2, #8
    1e06:	431a      	orrs	r2, r3
    1e08:	78a3      	ldrb	r3, [r4, #2]
    1e0a:	041b      	lsls	r3, r3, #16
    1e0c:	4313      	orrs	r3, r2
    1e0e:	78e0      	ldrb	r0, [r4, #3]
    1e10:	0600      	lsls	r0, r0, #24
    1e12:	4318      	orrs	r0, r3
    1e14:	219f      	movs	r1, #159	; 0x9f
    1e16:	4b1f      	ldr	r3, [pc, #124]	; (1e94 <flash_check+0xb4>)
    1e18:	4798      	blx	r3
	for (int i = 0; i < 3; ++i) jedecid[i] = spi_command(desc->sercom, 0);
    1e1a:	2500      	movs	r5, #0
    1e1c:	e00f      	b.n	1e3e <flash_check+0x5e>
    1e1e:	7823      	ldrb	r3, [r4, #0]
    1e20:	7862      	ldrb	r2, [r4, #1]
    1e22:	0212      	lsls	r2, r2, #8
    1e24:	431a      	orrs	r2, r3
    1e26:	78a3      	ldrb	r3, [r4, #2]
    1e28:	041b      	lsls	r3, r3, #16
    1e2a:	4313      	orrs	r3, r2
    1e2c:	78e0      	ldrb	r0, [r4, #3]
    1e2e:	0600      	lsls	r0, r0, #24
    1e30:	4318      	orrs	r0, r3
    1e32:	2100      	movs	r1, #0
    1e34:	4b17      	ldr	r3, [pc, #92]	; (1e94 <flash_check+0xb4>)
    1e36:	4798      	blx	r3
    1e38:	ab01      	add	r3, sp, #4
    1e3a:	5558      	strb	r0, [r3, r5]
    1e3c:	3501      	adds	r5, #1
    1e3e:	2d02      	cmp	r5, #2
    1e40:	dded      	ble.n	1e1e <flash_check+0x3e>
	port_set(desc->sspin.port, desc->sspin.pin);
    1e42:	7a23      	ldrb	r3, [r4, #8]
    1e44:	7a62      	ldrb	r2, [r4, #9]
    1e46:	0212      	lsls	r2, r2, #8
    1e48:	431a      	orrs	r2, r3
    1e4a:	7aa3      	ldrb	r3, [r4, #10]
    1e4c:	041b      	lsls	r3, r3, #16
    1e4e:	4313      	orrs	r3, r2
    1e50:	7ae1      	ldrb	r1, [r4, #11]
    1e52:	0609      	lsls	r1, r1, #24
    1e54:	4319      	orrs	r1, r3
    1e56:	7b20      	ldrb	r0, [r4, #12]
    1e58:	4b0f      	ldr	r3, [pc, #60]	; (1e98 <flash_check+0xb8>)
    1e5a:	4798      	blx	r3
	
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1e5c:	ab01      	add	r3, sp, #4
    1e5e:	781b      	ldrb	r3, [r3, #0]
    1e60:	2b1f      	cmp	r3, #31
    1e62:	d10e      	bne.n	1e82 <flash_check+0xa2>
    1e64:	ab01      	add	r3, sp, #4
    1e66:	785a      	ldrb	r2, [r3, #1]
    1e68:	7b63      	ldrb	r3, [r4, #13]
    1e6a:	06db      	lsls	r3, r3, #27
    1e6c:	0edb      	lsrs	r3, r3, #27
    1e6e:	2180      	movs	r1, #128	; 0x80
    1e70:	430b      	orrs	r3, r1
    1e72:	429a      	cmp	r2, r3
    1e74:	d108      	bne.n	1e88 <flash_check+0xa8>
		jedecid[2] == DEVICEID_2) return true;
    1e76:	ab01      	add	r3, sp, #4
    1e78:	789b      	ldrb	r3, [r3, #2]
	if (jedecid[0] == MANUFACTURER_ID && jedecid[1] == (DEVICEID_1_FAMILY_CODE | desc->density_code) &&
    1e7a:	2b01      	cmp	r3, #1
    1e7c:	d006      	beq.n	1e8c <flash_check+0xac>
	else return false;
    1e7e:	2000      	movs	r0, #0
    1e80:	e000      	b.n	1e84 <flash_check+0xa4>
    1e82:	2000      	movs	r0, #0
}
    1e84:	b003      	add	sp, #12
    1e86:	bd30      	pop	{r4, r5, pc}
	else return false;
    1e88:	2000      	movs	r0, #0
    1e8a:	e7fb      	b.n	1e84 <flash_check+0xa4>
		jedecid[2] == DEVICEID_2) return true;
    1e8c:	2001      	movs	r0, #1
    1e8e:	e7f9      	b.n	1e84 <flash_check+0xa4>
    1e90:	000022e1 	.word	0x000022e1
    1e94:	000027bd 	.word	0x000027bd
    1e98:	000022d1 	.word	0x000022d1

00001e9c <imu_icm20948_write_byte>:
#include "sercom.h"
#include "spi.h"
#include "time.h"


void imu_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    1e9c:	b570      	push	{r4, r5, r6, lr}
    1e9e:	0004      	movs	r4, r0
    1ea0:	000e      	movs	r6, r1
    1ea2:	0015      	movs	r5, r2
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1ea4:	7902      	ldrb	r2, [r0, #4]
    1ea6:	7943      	ldrb	r3, [r0, #5]
    1ea8:	021b      	lsls	r3, r3, #8
    1eaa:	4313      	orrs	r3, r2
    1eac:	7982      	ldrb	r2, [r0, #6]
    1eae:	0412      	lsls	r2, r2, #16
    1eb0:	431a      	orrs	r2, r3
    1eb2:	79c1      	ldrb	r1, [r0, #7]
    1eb4:	0609      	lsls	r1, r1, #24
    1eb6:	4311      	orrs	r1, r2
    1eb8:	7a00      	ldrb	r0, [r0, #8]
    1eba:	4b15      	ldr	r3, [pc, #84]	; (1f10 <imu_icm20948_write_byte+0x74>)
    1ebc:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    1ebe:	217f      	movs	r1, #127	; 0x7f
    1ec0:	4031      	ands	r1, r6
    1ec2:	7823      	ldrb	r3, [r4, #0]
    1ec4:	7862      	ldrb	r2, [r4, #1]
    1ec6:	0212      	lsls	r2, r2, #8
    1ec8:	431a      	orrs	r2, r3
    1eca:	78a3      	ldrb	r3, [r4, #2]
    1ecc:	041b      	lsls	r3, r3, #16
    1ece:	4313      	orrs	r3, r2
    1ed0:	78e0      	ldrb	r0, [r4, #3]
    1ed2:	0600      	lsls	r0, r0, #24
    1ed4:	4318      	orrs	r0, r3
    1ed6:	4e0f      	ldr	r6, [pc, #60]	; (1f14 <imu_icm20948_write_byte+0x78>)
    1ed8:	47b0      	blx	r6
	// send data
	spi_command(desc->sercom, data);
    1eda:	7823      	ldrb	r3, [r4, #0]
    1edc:	7862      	ldrb	r2, [r4, #1]
    1ede:	0212      	lsls	r2, r2, #8
    1ee0:	431a      	orrs	r2, r3
    1ee2:	78a3      	ldrb	r3, [r4, #2]
    1ee4:	041b      	lsls	r3, r3, #16
    1ee6:	4313      	orrs	r3, r2
    1ee8:	78e0      	ldrb	r0, [r4, #3]
    1eea:	0600      	lsls	r0, r0, #24
    1eec:	4318      	orrs	r0, r3
    1eee:	0029      	movs	r1, r5
    1ef0:	47b0      	blx	r6
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1ef2:	7923      	ldrb	r3, [r4, #4]
    1ef4:	7962      	ldrb	r2, [r4, #5]
    1ef6:	0212      	lsls	r2, r2, #8
    1ef8:	431a      	orrs	r2, r3
    1efa:	79a3      	ldrb	r3, [r4, #6]
    1efc:	041b      	lsls	r3, r3, #16
    1efe:	4313      	orrs	r3, r2
    1f00:	79e1      	ldrb	r1, [r4, #7]
    1f02:	0609      	lsls	r1, r1, #24
    1f04:	4319      	orrs	r1, r3
    1f06:	7a20      	ldrb	r0, [r4, #8]
    1f08:	4b03      	ldr	r3, [pc, #12]	; (1f18 <imu_icm20948_write_byte+0x7c>)
    1f0a:	4798      	blx	r3
}
    1f0c:	bd70      	pop	{r4, r5, r6, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	000022e1 	.word	0x000022e1
    1f14:	000027bd 	.word	0x000027bd
    1f18:	000022d1 	.word	0x000022d1

00001f1c <imu_icm20948_read_byte>:

uint8_t imu_icm20948_read_byte(IMU_ICM20948_Descriptor* desc, uint8_t address) {
    1f1c:	b570      	push	{r4, r5, r6, lr}
    1f1e:	0004      	movs	r4, r0
    1f20:	000d      	movs	r5, r1
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1f22:	7903      	ldrb	r3, [r0, #4]
    1f24:	7942      	ldrb	r2, [r0, #5]
    1f26:	0212      	lsls	r2, r2, #8
    1f28:	431a      	orrs	r2, r3
    1f2a:	7983      	ldrb	r3, [r0, #6]
    1f2c:	041b      	lsls	r3, r3, #16
    1f2e:	4313      	orrs	r3, r2
    1f30:	79c1      	ldrb	r1, [r0, #7]
    1f32:	0609      	lsls	r1, r1, #24
    1f34:	4319      	orrs	r1, r3
    1f36:	7a00      	ldrb	r0, [r0, #8]
    1f38:	4b16      	ldr	r3, [pc, #88]	; (1f94 <imu_icm20948_read_byte+0x78>)
    1f3a:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    1f3c:	2180      	movs	r1, #128	; 0x80
    1f3e:	4249      	negs	r1, r1
    1f40:	4329      	orrs	r1, r5
    1f42:	b2c9      	uxtb	r1, r1
    1f44:	7823      	ldrb	r3, [r4, #0]
    1f46:	7862      	ldrb	r2, [r4, #1]
    1f48:	0212      	lsls	r2, r2, #8
    1f4a:	431a      	orrs	r2, r3
    1f4c:	78a3      	ldrb	r3, [r4, #2]
    1f4e:	041b      	lsls	r3, r3, #16
    1f50:	4313      	orrs	r3, r2
    1f52:	78e0      	ldrb	r0, [r4, #3]
    1f54:	0600      	lsls	r0, r0, #24
    1f56:	4318      	orrs	r0, r3
    1f58:	4d0f      	ldr	r5, [pc, #60]	; (1f98 <imu_icm20948_read_byte+0x7c>)
    1f5a:	47a8      	blx	r5
	// send data
	uint8_t out = spi_command(desc->sercom, 0);
    1f5c:	7823      	ldrb	r3, [r4, #0]
    1f5e:	7862      	ldrb	r2, [r4, #1]
    1f60:	0212      	lsls	r2, r2, #8
    1f62:	431a      	orrs	r2, r3
    1f64:	78a3      	ldrb	r3, [r4, #2]
    1f66:	041b      	lsls	r3, r3, #16
    1f68:	4313      	orrs	r3, r2
    1f6a:	78e0      	ldrb	r0, [r4, #3]
    1f6c:	0600      	lsls	r0, r0, #24
    1f6e:	4318      	orrs	r0, r3
    1f70:	2100      	movs	r1, #0
    1f72:	47a8      	blx	r5
    1f74:	0005      	movs	r5, r0
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    1f76:	7923      	ldrb	r3, [r4, #4]
    1f78:	7962      	ldrb	r2, [r4, #5]
    1f7a:	0212      	lsls	r2, r2, #8
    1f7c:	431a      	orrs	r2, r3
    1f7e:	79a3      	ldrb	r3, [r4, #6]
    1f80:	041b      	lsls	r3, r3, #16
    1f82:	4313      	orrs	r3, r2
    1f84:	79e1      	ldrb	r1, [r4, #7]
    1f86:	0609      	lsls	r1, r1, #24
    1f88:	4319      	orrs	r1, r3
    1f8a:	7a20      	ldrb	r0, [r4, #8]
    1f8c:	4b03      	ldr	r3, [pc, #12]	; (1f9c <imu_icm20948_read_byte+0x80>)
    1f8e:	4798      	blx	r3
	return out;
}
    1f90:	0028      	movs	r0, r5
    1f92:	bd70      	pop	{r4, r5, r6, pc}
    1f94:	000022e1 	.word	0x000022e1
    1f98:	000027bd 	.word	0x000027bd
    1f9c:	000022d1 	.word	0x000022d1

00001fa0 <imu_icm20948_write>:

void imu_icm20948_write(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    1fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fa2:	46c6      	mov	lr, r8
    1fa4:	b500      	push	{lr}
    1fa6:	0004      	movs	r4, r0
    1fa8:	000d      	movs	r5, r1
    1faa:	0017      	movs	r7, r2
    1fac:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    1fae:	7902      	ldrb	r2, [r0, #4]
    1fb0:	7943      	ldrb	r3, [r0, #5]
    1fb2:	021b      	lsls	r3, r3, #8
    1fb4:	4313      	orrs	r3, r2
    1fb6:	7982      	ldrb	r2, [r0, #6]
    1fb8:	0412      	lsls	r2, r2, #16
    1fba:	431a      	orrs	r2, r3
    1fbc:	79c1      	ldrb	r1, [r0, #7]
    1fbe:	0609      	lsls	r1, r1, #24
    1fc0:	4311      	orrs	r1, r2
    1fc2:	7a00      	ldrb	r0, [r0, #8]
    1fc4:	4b19      	ldr	r3, [pc, #100]	; (202c <STACK_SIZE+0x2c>)
    1fc6:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address & IMU_WRITE_MASK);
    1fc8:	217f      	movs	r1, #127	; 0x7f
    1fca:	4029      	ands	r1, r5
    1fcc:	7823      	ldrb	r3, [r4, #0]
    1fce:	7862      	ldrb	r2, [r4, #1]
    1fd0:	0212      	lsls	r2, r2, #8
    1fd2:	431a      	orrs	r2, r3
    1fd4:	78a3      	ldrb	r3, [r4, #2]
    1fd6:	041b      	lsls	r3, r3, #16
    1fd8:	4313      	orrs	r3, r2
    1fda:	78e0      	ldrb	r0, [r4, #3]
    1fdc:	0600      	lsls	r0, r0, #24
    1fde:	4318      	orrs	r0, r3
    1fe0:	4b13      	ldr	r3, [pc, #76]	; (2030 <STACK_SIZE+0x30>)
    1fe2:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    1fe4:	2600      	movs	r6, #0
    1fe6:	e00e      	b.n	2006 <STACK_SIZE+0x6>
		spi_command(desc->sercom, data[i]);
    1fe8:	4643      	mov	r3, r8
    1fea:	5d99      	ldrb	r1, [r3, r6]
    1fec:	7822      	ldrb	r2, [r4, #0]
    1fee:	7863      	ldrb	r3, [r4, #1]
    1ff0:	021b      	lsls	r3, r3, #8
    1ff2:	4313      	orrs	r3, r2
    1ff4:	78a5      	ldrb	r5, [r4, #2]
    1ff6:	042d      	lsls	r5, r5, #16
    1ff8:	431d      	orrs	r5, r3
    1ffa:	78e0      	ldrb	r0, [r4, #3]
    1ffc:	0600      	lsls	r0, r0, #24
    1ffe:	4328      	orrs	r0, r5
    2000:	4b0b      	ldr	r3, [pc, #44]	; (2030 <STACK_SIZE+0x30>)
    2002:	4798      	blx	r3
	for (int i = 0; i < count; ++i) {
    2004:	3601      	adds	r6, #1
    2006:	42be      	cmp	r6, r7
    2008:	dbee      	blt.n	1fe8 <imu_icm20948_write+0x48>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    200a:	7923      	ldrb	r3, [r4, #4]
    200c:	7962      	ldrb	r2, [r4, #5]
    200e:	0212      	lsls	r2, r2, #8
    2010:	431a      	orrs	r2, r3
    2012:	79a3      	ldrb	r3, [r4, #6]
    2014:	041b      	lsls	r3, r3, #16
    2016:	4313      	orrs	r3, r2
    2018:	79e1      	ldrb	r1, [r4, #7]
    201a:	0609      	lsls	r1, r1, #24
    201c:	4319      	orrs	r1, r3
    201e:	7a20      	ldrb	r0, [r4, #8]
    2020:	4b04      	ldr	r3, [pc, #16]	; (2034 <STACK_SIZE+0x34>)
    2022:	4798      	blx	r3
}
    2024:	bc80      	pop	{r7}
    2026:	46b8      	mov	r8, r7
    2028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	000022e1 	.word	0x000022e1
    2030:	000027bd 	.word	0x000027bd
    2034:	000022d1 	.word	0x000022d1

00002038 <imu_icm20948_read>:

void imu_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, int count, uint8_t* data) {
    2038:	b5f0      	push	{r4, r5, r6, r7, lr}
    203a:	46c6      	mov	lr, r8
    203c:	b500      	push	{lr}
    203e:	0004      	movs	r4, r0
    2040:	000d      	movs	r5, r1
    2042:	0017      	movs	r7, r2
    2044:	4698      	mov	r8, r3
	// set ss low
	port_clear(desc->sspin.port, desc->sspin.pin);
    2046:	7903      	ldrb	r3, [r0, #4]
    2048:	7942      	ldrb	r2, [r0, #5]
    204a:	0212      	lsls	r2, r2, #8
    204c:	431a      	orrs	r2, r3
    204e:	7983      	ldrb	r3, [r0, #6]
    2050:	041b      	lsls	r3, r3, #16
    2052:	4313      	orrs	r3, r2
    2054:	79c1      	ldrb	r1, [r0, #7]
    2056:	0609      	lsls	r1, r1, #24
    2058:	4319      	orrs	r1, r3
    205a:	7a00      	ldrb	r0, [r0, #8]
    205c:	4b1b      	ldr	r3, [pc, #108]	; (20cc <imu_icm20948_read+0x94>)
    205e:	4798      	blx	r3
	// select address
	spi_command(desc->sercom, address | IMU_READ_MASK);
    2060:	2180      	movs	r1, #128	; 0x80
    2062:	4249      	negs	r1, r1
    2064:	4329      	orrs	r1, r5
    2066:	b2c9      	uxtb	r1, r1
    2068:	7823      	ldrb	r3, [r4, #0]
    206a:	7862      	ldrb	r2, [r4, #1]
    206c:	0212      	lsls	r2, r2, #8
    206e:	431a      	orrs	r2, r3
    2070:	78a3      	ldrb	r3, [r4, #2]
    2072:	041b      	lsls	r3, r3, #16
    2074:	4313      	orrs	r3, r2
    2076:	78e0      	ldrb	r0, [r4, #3]
    2078:	0600      	lsls	r0, r0, #24
    207a:	4318      	orrs	r0, r3
    207c:	4b14      	ldr	r3, [pc, #80]	; (20d0 <imu_icm20948_read+0x98>)
    207e:	4798      	blx	r3
	// send data
	for (int i = 0; i < count; ++i) {
    2080:	2500      	movs	r5, #0
    2082:	e010      	b.n	20a6 <imu_icm20948_read+0x6e>
		data[i] = spi_command(desc->sercom, 0);
    2084:	4643      	mov	r3, r8
    2086:	195e      	adds	r6, r3, r5
    2088:	7823      	ldrb	r3, [r4, #0]
    208a:	7862      	ldrb	r2, [r4, #1]
    208c:	0212      	lsls	r2, r2, #8
    208e:	431a      	orrs	r2, r3
    2090:	78a3      	ldrb	r3, [r4, #2]
    2092:	041b      	lsls	r3, r3, #16
    2094:	4313      	orrs	r3, r2
    2096:	78e0      	ldrb	r0, [r4, #3]
    2098:	0600      	lsls	r0, r0, #24
    209a:	4318      	orrs	r0, r3
    209c:	2100      	movs	r1, #0
    209e:	4b0c      	ldr	r3, [pc, #48]	; (20d0 <imu_icm20948_read+0x98>)
    20a0:	4798      	blx	r3
    20a2:	7030      	strb	r0, [r6, #0]
	for (int i = 0; i < count; ++i) {
    20a4:	3501      	adds	r5, #1
    20a6:	42bd      	cmp	r5, r7
    20a8:	dbec      	blt.n	2084 <imu_icm20948_read+0x4c>
	}
	// set ss high
	port_set(desc->sspin.port, desc->sspin.pin);
    20aa:	7923      	ldrb	r3, [r4, #4]
    20ac:	7962      	ldrb	r2, [r4, #5]
    20ae:	0212      	lsls	r2, r2, #8
    20b0:	431a      	orrs	r2, r3
    20b2:	79a3      	ldrb	r3, [r4, #6]
    20b4:	041b      	lsls	r3, r3, #16
    20b6:	4313      	orrs	r3, r2
    20b8:	79e1      	ldrb	r1, [r4, #7]
    20ba:	0609      	lsls	r1, r1, #24
    20bc:	4319      	orrs	r1, r3
    20be:	7a20      	ldrb	r0, [r4, #8]
    20c0:	4b04      	ldr	r3, [pc, #16]	; (20d4 <imu_icm20948_read+0x9c>)
    20c2:	4798      	blx	r3
}
    20c4:	bc80      	pop	{r7}
    20c6:	46b8      	mov	r8, r7
    20c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	000022e1 	.word	0x000022e1
    20d0:	000027bd 	.word	0x000027bd
    20d4:	000022d1 	.word	0x000022d1

000020d8 <imu_icm20948_user_bank>:

void imu_icm20948_user_bank(IMU_ICM20948_Descriptor* desc, int bank) {
    20d8:	b510      	push	{r4, lr}
	if (bank < 4 && bank >= 0) {
    20da:	2903      	cmp	r1, #3
    20dc:	d900      	bls.n	20e0 <imu_icm20948_user_bank+0x8>
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
	} 
}
    20de:	bd10      	pop	{r4, pc}
		imu_icm20948_write_byte(desc, REG_BANK_SEL, (bank << 4));
    20e0:	0109      	lsls	r1, r1, #4
    20e2:	b2ca      	uxtb	r2, r1
    20e4:	217f      	movs	r1, #127	; 0x7f
    20e6:	4b01      	ldr	r3, [pc, #4]	; (20ec <imu_icm20948_user_bank+0x14>)
    20e8:	4798      	blx	r3
}
    20ea:	e7f8      	b.n	20de <imu_icm20948_user_bank+0x6>
    20ec:	00001e9d 	.word	0x00001e9d

000020f0 <imu_icm20948_init>:

bool imu_icm20948_init(IMU_ICM20948_Descriptor* desc, sercom_registers_t* sercom, Pin sspin) {
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f2:	b083      	sub	sp, #12
    20f4:	0005      	movs	r5, r0
    20f6:	000c      	movs	r4, r1
    20f8:	9200      	str	r2, [sp, #0]
    20fa:	9301      	str	r3, [sp, #4]
	// check sercom
	if (!sercom_check(sercom)) return false;
    20fc:	0008      	movs	r0, r1
    20fe:	4b13      	ldr	r3, [pc, #76]	; (214c <imu_icm20948_init+0x5c>)
    2100:	4798      	blx	r3
    2102:	1e06      	subs	r6, r0, #0
    2104:	d102      	bne.n	210c <imu_icm20948_init+0x1c>
	
	// wait to exit sleep mode (unspecified in datasheet)
	delay_us(80);
	
	return true;
}
    2106:	0030      	movs	r0, r6
    2108:	b003      	add	sp, #12
    210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	desc->sercom = sercom;
    210c:	702c      	strb	r4, [r5, #0]
    210e:	0a23      	lsrs	r3, r4, #8
    2110:	706b      	strb	r3, [r5, #1]
    2112:	0c23      	lsrs	r3, r4, #16
    2114:	70ab      	strb	r3, [r5, #2]
    2116:	0e24      	lsrs	r4, r4, #24
    2118:	70ec      	strb	r4, [r5, #3]
	desc->sspin = sspin;
    211a:	1d28      	adds	r0, r5, #4
    211c:	2205      	movs	r2, #5
    211e:	4669      	mov	r1, sp
    2120:	4b0b      	ldr	r3, [pc, #44]	; (2150 <imu_icm20948_init+0x60>)
    2122:	4798      	blx	r3
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b10000000);
    2124:	2280      	movs	r2, #128	; 0x80
    2126:	2106      	movs	r1, #6
    2128:	0028      	movs	r0, r5
    212a:	4c0a      	ldr	r4, [pc, #40]	; (2154 <imu_icm20948_init+0x64>)
    212c:	47a0      	blx	r4
	delay_ms(11);
    212e:	480a      	ldr	r0, [pc, #40]	; (2158 <imu_icm20948_init+0x68>)
    2130:	4f0a      	ldr	r7, [pc, #40]	; (215c <imu_icm20948_init+0x6c>)
    2132:	47b8      	blx	r7
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00010000);
    2134:	2210      	movs	r2, #16
    2136:	2103      	movs	r1, #3
    2138:	0028      	movs	r0, r5
    213a:	47a0      	blx	r4
	imu_icm20948_write_byte(desc, PWR_MGMT_1, 0b00000001);
    213c:	2201      	movs	r2, #1
    213e:	2106      	movs	r1, #6
    2140:	0028      	movs	r0, r5
    2142:	47a0      	blx	r4
	delay_us(80);
    2144:	20f0      	movs	r0, #240	; 0xf0
    2146:	0040      	lsls	r0, r0, #1
    2148:	47b8      	blx	r7
	return true;
    214a:	e7dc      	b.n	2106 <imu_icm20948_init+0x16>
    214c:	000025cd 	.word	0x000025cd
    2150:	00005b49 	.word	0x00005b49
    2154:	00001e9d 	.word	0x00001e9d
    2158:	000101d0 	.word	0x000101d0
    215c:	000028a1 	.word	0x000028a1

00002160 <imu_icm20948_check>:

bool imu_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    2160:	b510      	push	{r4, lr}
    2162:	0004      	movs	r4, r0
	// set user bank
	imu_icm20948_user_bank(desc, 0);
    2164:	2100      	movs	r1, #0
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <imu_icm20948_check+0x20>)
    2168:	4798      	blx	r3
	uint8_t who_am_i = imu_icm20948_read_byte(desc, WHO_AM_I);
    216a:	2100      	movs	r1, #0
    216c:	0020      	movs	r0, r4
    216e:	4b05      	ldr	r3, [pc, #20]	; (2184 <imu_icm20948_check+0x24>)
    2170:	4798      	blx	r3
	
	if (who_am_i == WHO_AM_I_VAL) return true;
    2172:	28ea      	cmp	r0, #234	; 0xea
    2174:	d001      	beq.n	217a <imu_icm20948_check+0x1a>
	else return false;
    2176:	2000      	movs	r0, #0
}
    2178:	bd10      	pop	{r4, pc}
	if (who_am_i == WHO_AM_I_VAL) return true;
    217a:	38e9      	subs	r0, #233	; 0xe9
    217c:	e7fc      	b.n	2178 <imu_icm20948_check+0x18>
    217e:	46c0      	nop			; (mov r8, r8)
    2180:	000020d9 	.word	0x000020d9
    2184:	00001f1d 	.word	0x00001f1d

00002188 <mag_icm20948_write_byte>:

void mag_icm20948_write_byte(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t data) {
    2188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    218a:	0004      	movs	r4, r0
    218c:	000f      	movs	r7, r1
    218e:	0016      	movs	r6, r2
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    2190:	2103      	movs	r1, #3
    2192:	4b0b      	ldr	r3, [pc, #44]	; (21c0 <mag_icm20948_write_byte+0x38>)
    2194:	4798      	blx	r3
	
	// set slave address
	imu_icm20948_write_byte(desc, I2C_SLV0_ADDR, 0x0c);
    2196:	220c      	movs	r2, #12
    2198:	2103      	movs	r1, #3
    219a:	0020      	movs	r0, r4
    219c:	4d09      	ldr	r5, [pc, #36]	; (21c4 <mag_icm20948_write_byte+0x3c>)
    219e:	47a8      	blx	r5
	// set address to write in magnetometer
	imu_icm20948_write_byte(desc, I2C_SLV0_REG, address);
    21a0:	003a      	movs	r2, r7
    21a2:	2104      	movs	r1, #4
    21a4:	0020      	movs	r0, r4
    21a6:	47a8      	blx	r5
	// store data to write
	imu_icm20948_write_byte(desc, I2C_SLV0_DO, data);
    21a8:	0032      	movs	r2, r6
    21aa:	2106      	movs	r1, #6
    21ac:	0020      	movs	r0, r4
    21ae:	47a8      	blx	r5
	// enable i2c and send byte
	imu_icm20948_write_byte(desc, I2C_SLV0_CTRL, 0x80 | 0x01);
    21b0:	2281      	movs	r2, #129	; 0x81
    21b2:	2105      	movs	r1, #5
    21b4:	0020      	movs	r0, r4
    21b6:	47a8      	blx	r5
	
	// wait for transaction to complete
	delay_ms(10);
    21b8:	4803      	ldr	r0, [pc, #12]	; (21c8 <mag_icm20948_write_byte+0x40>)
    21ba:	4b04      	ldr	r3, [pc, #16]	; (21cc <mag_icm20948_write_byte+0x44>)
    21bc:	4798      	blx	r3
}
    21be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21c0:	000020d9 	.word	0x000020d9
    21c4:	00001e9d 	.word	0x00001e9d
    21c8:	0000ea60 	.word	0x0000ea60
    21cc:	000028a1 	.word	0x000028a1

000021d0 <mag_icm20948_read>:
	imu_icm20948_user_bank(desc, 0);
	
	return imu_icm20948_read_byte(desc, EXT_SLV_SENS_DATA_00);
}

void mag_icm20948_read(IMU_ICM20948_Descriptor* desc, uint8_t address, uint8_t count, uint8_t* data) {
    21d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d2:	46c6      	mov	lr, r8
    21d4:	b500      	push	{lr}
    21d6:	b082      	sub	sp, #8
    21d8:	0004      	movs	r4, r0
    21da:	000f      	movs	r7, r1
    21dc:	0015      	movs	r5, r2
    21de:	4698      	mov	r8, r3
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    21e0:	2103      	movs	r1, #3
    21e2:	4e0f      	ldr	r6, [pc, #60]	; (2220 <mag_icm20948_read+0x50>)
    21e4:	47b0      	blx	r6
	
	// set slave address
	// set address to read in magnetometer
	// enable i2c and request byte
	uint8_t request[3] = {0x0c | 0x80, address, 0x80 | count};
    21e6:	ab01      	add	r3, sp, #4
    21e8:	228c      	movs	r2, #140	; 0x8c
    21ea:	701a      	strb	r2, [r3, #0]
    21ec:	705f      	strb	r7, [r3, #1]
    21ee:	3a0d      	subs	r2, #13
    21f0:	3aff      	subs	r2, #255	; 0xff
    21f2:	432a      	orrs	r2, r5
    21f4:	709a      	strb	r2, [r3, #2]
	imu_icm20948_write(desc, I2C_SLV0_ADDR, 3, request);
    21f6:	2203      	movs	r2, #3
    21f8:	2103      	movs	r1, #3
    21fa:	0020      	movs	r0, r4
    21fc:	4f09      	ldr	r7, [pc, #36]	; (2224 <mag_icm20948_read+0x54>)
    21fe:	47b8      	blx	r7
	
	// wait for transfer to complete
	delay_us(1000); // random failiures at 800us
    2200:	4809      	ldr	r0, [pc, #36]	; (2228 <mag_icm20948_read+0x58>)
    2202:	4b0a      	ldr	r3, [pc, #40]	; (222c <mag_icm20948_read+0x5c>)
    2204:	4798      	blx	r3
	
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    2206:	2100      	movs	r1, #0
    2208:	0020      	movs	r0, r4
    220a:	47b0      	blx	r6
	
	// collect data
	imu_icm20948_read(desc, EXT_SLV_SENS_DATA_00, count, data);
    220c:	4643      	mov	r3, r8
    220e:	002a      	movs	r2, r5
    2210:	213b      	movs	r1, #59	; 0x3b
    2212:	0020      	movs	r0, r4
    2214:	4c06      	ldr	r4, [pc, #24]	; (2230 <mag_icm20948_read+0x60>)
    2216:	47a0      	blx	r4
}
    2218:	b002      	add	sp, #8
    221a:	bc80      	pop	{r7}
    221c:	46b8      	mov	r8, r7
    221e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2220:	000020d9 	.word	0x000020d9
    2224:	00001fa1 	.word	0x00001fa1
    2228:	00001770 	.word	0x00001770
    222c:	000028a1 	.word	0x000028a1
    2230:	00002039 	.word	0x00002039

00002234 <mag_icm20948_init>:

bool mag_icm20948_init(IMU_ICM20948_Descriptor* desc) {
    2234:	b570      	push	{r4, r5, r6, lr}
    2236:	0004      	movs	r4, r0
	// set user bank to 0
	imu_icm20948_user_bank(desc, 0);
    2238:	2100      	movs	r1, #0
    223a:	4e10      	ldr	r6, [pc, #64]	; (227c <mag_icm20948_init+0x48>)
    223c:	47b0      	blx	r6
	
	// enable i2c master
	imu_icm20948_write_byte(desc, USER_CTRL, 0b00100000);
    223e:	2220      	movs	r2, #32
    2240:	2103      	movs	r1, #3
    2242:	0020      	movs	r0, r4
    2244:	4d0e      	ldr	r5, [pc, #56]	; (2280 <mag_icm20948_init+0x4c>)
    2246:	47a8      	blx	r5
	
	// set user bank to 3
	imu_icm20948_user_bank(desc, 3);
    2248:	2103      	movs	r1, #3
    224a:	0020      	movs	r0, r4
    224c:	47b0      	blx	r6
	
	// set i2c master clock frequency to type 7 (recommended mode)
	imu_icm20948_write_byte(desc, I2C_MST_CTRL, 0x07);
    224e:	2207      	movs	r2, #7
    2250:	2101      	movs	r1, #1
    2252:	0020      	movs	r0, r4
    2254:	47a8      	blx	r5
	// enable delay odr for i2c slave 0
	imu_icm20948_write_byte(desc, I2C_MST_DELAY_CTRL, 0x01);
    2256:	2201      	movs	r2, #1
    2258:	2102      	movs	r1, #2
    225a:	0020      	movs	r0, r4
    225c:	47a8      	blx	r5
	
	// wait for transaction to process
	delay_ms(1);
    225e:	4809      	ldr	r0, [pc, #36]	; (2284 <mag_icm20948_init+0x50>)
    2260:	4b09      	ldr	r3, [pc, #36]	; (2288 <mag_icm20948_init+0x54>)
    2262:	4798      	blx	r3
	
	// reset
	mag_icm20948_write_byte(desc, MAG_CNTL3, 0x01);
    2264:	2201      	movs	r2, #1
    2266:	2132      	movs	r1, #50	; 0x32
    2268:	0020      	movs	r0, r4
    226a:	4d08      	ldr	r5, [pc, #32]	; (228c <mag_icm20948_init+0x58>)
    226c:	47a8      	blx	r5
	// set magnetometer to continuous measurement at 100hz
	mag_icm20948_write_byte(desc, MAG_CNTL2, 0x08);
    226e:	2208      	movs	r2, #8
    2270:	2131      	movs	r1, #49	; 0x31
    2272:	0020      	movs	r0, r4
    2274:	47a8      	blx	r5
	
	return true;
}
    2276:	2001      	movs	r0, #1
    2278:	bd70      	pop	{r4, r5, r6, pc}
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	000020d9 	.word	0x000020d9
    2280:	00001e9d 	.word	0x00001e9d
    2284:	00001770 	.word	0x00001770
    2288:	000028a1 	.word	0x000028a1
    228c:	00002189 	.word	0x00002189

00002290 <mag_icm20948_check>:

bool mag_icm20948_check(IMU_ICM20948_Descriptor* desc) {
    2290:	b530      	push	{r4, r5, lr}
    2292:	b083      	sub	sp, #12
	uint8_t who_am_i[2];
	//uint8_t who_am_i = imu_mag_read_byte(desc, MAG_WAI1);
	mag_icm20948_read(desc, MAG_WAI1, 2, who_am_i);
    2294:	ac01      	add	r4, sp, #4
    2296:	0023      	movs	r3, r4
    2298:	2202      	movs	r2, #2
    229a:	2100      	movs	r1, #0
    229c:	4d07      	ldr	r5, [pc, #28]	; (22bc <mag_icm20948_check+0x2c>)
    229e:	47a8      	blx	r5
	
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    22a0:	7823      	ldrb	r3, [r4, #0]
    22a2:	2b48      	cmp	r3, #72	; 0x48
    22a4:	d104      	bne.n	22b0 <mag_icm20948_check+0x20>
    22a6:	7863      	ldrb	r3, [r4, #1]
    22a8:	2b09      	cmp	r3, #9
    22aa:	d004      	beq.n	22b6 <mag_icm20948_check+0x26>
	else return false;
    22ac:	2000      	movs	r0, #0
    22ae:	e000      	b.n	22b2 <mag_icm20948_check+0x22>
    22b0:	2000      	movs	r0, #0
    22b2:	b003      	add	sp, #12
    22b4:	bd30      	pop	{r4, r5, pc}
	if (who_am_i[0] == MAG_WAI1_VAL && who_am_i[1] == MAG_WAI2_VAL) return true;
    22b6:	2001      	movs	r0, #1
    22b8:	e7fb      	b.n	22b2 <mag_icm20948_check+0x22>
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	000021d1 	.word	0x000021d1

000022c0 <port_set_output>:
#include "port.h"
#include <sam.h>

void port_set_output(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_DIRSET = pinmask;
    22c0:	01c0      	lsls	r0, r0, #7
    22c2:	4b02      	ldr	r3, [pc, #8]	; (22cc <port_set_output+0xc>)
    22c4:	469c      	mov	ip, r3
    22c6:	4460      	add	r0, ip
    22c8:	6081      	str	r1, [r0, #8]
}
    22ca:	4770      	bx	lr
    22cc:	41004400 	.word	0x41004400

000022d0 <port_set>:
	}
}


void port_set(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTSET = pinmask;
    22d0:	01c0      	lsls	r0, r0, #7
    22d2:	4b02      	ldr	r3, [pc, #8]	; (22dc <port_set+0xc>)
    22d4:	469c      	mov	ip, r3
    22d6:	4460      	add	r0, ip
    22d8:	6181      	str	r1, [r0, #24]
}
    22da:	4770      	bx	lr
    22dc:	41004400 	.word	0x41004400

000022e0 <port_clear>:

void port_clear(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTCLR = pinmask;
    22e0:	01c0      	lsls	r0, r0, #7
    22e2:	4b02      	ldr	r3, [pc, #8]	; (22ec <port_clear+0xc>)
    22e4:	469c      	mov	ip, r3
    22e6:	4460      	add	r0, ip
    22e8:	6141      	str	r1, [r0, #20]
}
    22ea:	4770      	bx	lr
    22ec:	41004400 	.word	0x41004400

000022f0 <port_wrconfig>:
void port_toggle(uint8_t port, uint32_t pinmask) {
	PORT_REGS->GROUP[port].PORT_OUTTGL = pinmask;
}


void port_wrconfig(uint8_t port, uint32_t pmux, uint32_t pinmask) {
    22f0:	b510      	push	{r4, lr}
		// enable writing to pincfg
		PORT_WRCONFIG_WRPINCFG(1) |
		// enable writing to pmux
		PORT_WRCONFIG_WRPMUX(1) |
		// select pmux function
		PORT_WRCONFIG_PMUX(pmux) |
    22f2:	060b      	lsls	r3, r1, #24
    22f4:	21f0      	movs	r1, #240	; 0xf0
    22f6:	0509      	lsls	r1, r1, #20
    22f8:	400b      	ands	r3, r1
	uint32_t wrconfig = {
    22fa:	490e      	ldr	r1, [pc, #56]	; (2334 <port_wrconfig+0x44>)
    22fc:	4319      	orrs	r1, r3
		// enable peripheral multiplexing
		PORT_WRCONFIG_PMUXEN(1)
	};
		
	// configure lower half pins
	if (pinmask & 0x0000FFFF) {
    22fe:	0413      	lsls	r3, r2, #16
    2300:	0c1c      	lsrs	r4, r3, #16
    2302:	2b00      	cmp	r3, #0
    2304:	d005      	beq.n	2312 <port_wrconfig+0x22>
		// wrconfig.bit.HWSEL = 0;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig &= ~PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)pinmask);
    2306:	4321      	orrs	r1, r4
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    2308:	01c3      	lsls	r3, r0, #7
    230a:	4c0b      	ldr	r4, [pc, #44]	; (2338 <port_wrconfig+0x48>)
    230c:	46a4      	mov	ip, r4
    230e:	4463      	add	r3, ip
    2310:	6299      	str	r1, [r3, #40]	; 0x28
	}
	// upper half
	if (pinmask & 0xFFFF0000) {
    2312:	2380      	movs	r3, #128	; 0x80
    2314:	025b      	lsls	r3, r3, #9
    2316:	429a      	cmp	r2, r3
    2318:	d30b      	bcc.n	2332 <port_wrconfig+0x42>
		// wrconfig.bit.HWSEL = 1;
		// wrconfig.bit.PINMASK = (uint16_t)(pinmask >> 16);
		// PORT->Group[port].WRCONFIG.reg = wrconfig.reg;
		wrconfig |= PORT_WRCONFIG_HWSEL(1);
		wrconfig &= ~PORT_WRCONFIG_PINMASK_Msk;
    231a:	0c09      	lsrs	r1, r1, #16
    231c:	0409      	lsls	r1, r1, #16
    231e:	2380      	movs	r3, #128	; 0x80
    2320:	061b      	lsls	r3, r3, #24
    2322:	430b      	orrs	r3, r1
		wrconfig |= PORT_WRCONFIG_PINMASK((uint16_t)(pinmask >> 16));
    2324:	0c12      	lsrs	r2, r2, #16
    2326:	431a      	orrs	r2, r3
		PORT_REGS->GROUP[port].PORT_WRCONFIG = wrconfig;
    2328:	01c0      	lsls	r0, r0, #7
    232a:	4b03      	ldr	r3, [pc, #12]	; (2338 <port_wrconfig+0x48>)
    232c:	469c      	mov	ip, r3
    232e:	4460      	add	r0, ip
    2330:	6282      	str	r2, [r0, #40]	; 0x28
	}
    2332:	bd10      	pop	{r4, pc}
    2334:	50010000 	.word	0x50010000
    2338:	41004400 	.word	0x41004400

0000233c <pwm_init_tc>:
	while (tcc->TCC_SYNCBUSY & TCC_SYNCBUSY_WAVE_Msk);
	
	return true;
}

bool pwm_init_tc(tc_registers_t* tc, uint32_t prescaler) {
    233c:	b510      	push	{r4, lr}
	switch ((uint32_t)tc) {
    233e:	4c2a      	ldr	r4, [pc, #168]	; (23e8 <pwm_init_tc+0xac>)
    2340:	42a0      	cmp	r0, r4
    2342:	d03c      	beq.n	23be <pwm_init_tc+0x82>
    2344:	d90f      	bls.n	2366 <pwm_init_tc+0x2a>
    2346:	4c29      	ldr	r4, [pc, #164]	; (23ec <pwm_init_tc+0xb0>)
    2348:	42a0      	cmp	r0, r4
    234a:	d042      	beq.n	23d2 <pwm_init_tc+0x96>
    234c:	4c28      	ldr	r4, [pc, #160]	; (23f0 <pwm_init_tc+0xb4>)
    234e:	42a0      	cmp	r0, r4
    2350:	d11b      	bne.n	238a <pwm_init_tc+0x4e>
		case (uint32_t)TC6_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
		break;
		case (uint32_t)TC7_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC7(1);
    2352:	4a28      	ldr	r2, [pc, #160]	; (23f4 <pwm_init_tc+0xb8>)
    2354:	6a14      	ldr	r4, [r2, #32]
    2356:	2380      	movs	r3, #128	; 0x80
    2358:	021b      	lsls	r3, r3, #8
    235a:	4323      	orrs	r3, r4
    235c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    235e:	4b26      	ldr	r3, [pc, #152]	; (23f8 <pwm_init_tc+0xbc>)
    2360:	4a26      	ldr	r2, [pc, #152]	; (23fc <pwm_init_tc+0xc0>)
    2362:	805a      	strh	r2, [r3, #2]
		break;
    2364:	e01c      	b.n	23a0 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    2366:	4c26      	ldr	r4, [pc, #152]	; (2400 <pwm_init_tc+0xc4>)
    2368:	42a0      	cmp	r0, r4
    236a:	d010      	beq.n	238e <pwm_init_tc+0x52>
    236c:	4c25      	ldr	r4, [pc, #148]	; (2404 <pwm_init_tc+0xc8>)
    236e:	42a0      	cmp	r0, r4
    2370:	d109      	bne.n	2386 <pwm_init_tc+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    2372:	4a20      	ldr	r2, [pc, #128]	; (23f4 <pwm_init_tc+0xb8>)
    2374:	6a14      	ldr	r4, [r2, #32]
    2376:	2380      	movs	r3, #128	; 0x80
    2378:	015b      	lsls	r3, r3, #5
    237a:	4323      	orrs	r3, r4
    237c:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    237e:	4b1e      	ldr	r3, [pc, #120]	; (23f8 <pwm_init_tc+0xbc>)
    2380:	4a21      	ldr	r2, [pc, #132]	; (2408 <pwm_init_tc+0xcc>)
    2382:	805a      	strh	r2, [r3, #2]
		break;
    2384:	e00c      	b.n	23a0 <pwm_init_tc+0x64>
	switch ((uint32_t)tc) {
    2386:	2000      	movs	r0, #0
    2388:	e018      	b.n	23bc <pwm_init_tc+0x80>
    238a:	2000      	movs	r0, #0
    238c:	e016      	b.n	23bc <pwm_init_tc+0x80>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC3(1);
    238e:	4a19      	ldr	r2, [pc, #100]	; (23f4 <pwm_init_tc+0xb8>)
    2390:	6a14      	ldr	r4, [r2, #32]
    2392:	2380      	movs	r3, #128	; 0x80
    2394:	011b      	lsls	r3, r3, #4
    2396:	4323      	orrs	r3, r4
    2398:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;
    239a:	4b17      	ldr	r3, [pc, #92]	; (23f8 <pwm_init_tc+0xbc>)
    239c:	4a1b      	ldr	r2, [pc, #108]	; (240c <pwm_init_tc+0xd0>)
    239e:	805a      	strh	r2, [r3, #2]
		return false;
		break;
	}
	
	// wait for sync
	while (GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    23a0:	4b15      	ldr	r3, [pc, #84]	; (23f8 <pwm_init_tc+0xbc>)
    23a2:	785b      	ldrb	r3, [r3, #1]
    23a4:	b25b      	sxtb	r3, r3
    23a6:	2b00      	cmp	r3, #0
    23a8:	dbfa      	blt.n	23a0 <pwm_init_tc+0x64>
	
	// set prescaler to no divide
	tc->COUNT8.TC_CTRLA = TC_CTRLA_PRESCALER(prescaler) | TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8;
    23aa:	020b      	lsls	r3, r1, #8
    23ac:	22e0      	movs	r2, #224	; 0xe0
    23ae:	00d2      	lsls	r2, r2, #3
    23b0:	4013      	ands	r3, r2
    23b2:	2244      	movs	r2, #68	; 0x44
    23b4:	4313      	orrs	r3, r2
    23b6:	b29b      	uxth	r3, r3
    23b8:	8003      	strh	r3, [r0, #0]
	
	return true;
    23ba:	2001      	movs	r0, #1
}
    23bc:	bd10      	pop	{r4, pc}
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC5(1);
    23be:	4a0d      	ldr	r2, [pc, #52]	; (23f4 <pwm_init_tc+0xb8>)
    23c0:	6a14      	ldr	r4, [r2, #32]
    23c2:	2380      	movs	r3, #128	; 0x80
    23c4:	019b      	lsls	r3, r3, #6
    23c6:	4323      	orrs	r3, r4
    23c8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    23ca:	4b0b      	ldr	r3, [pc, #44]	; (23f8 <pwm_init_tc+0xbc>)
    23cc:	4a0e      	ldr	r2, [pc, #56]	; (2408 <pwm_init_tc+0xcc>)
    23ce:	805a      	strh	r2, [r3, #2]
		break;
    23d0:	e7e6      	b.n	23a0 <pwm_init_tc+0x64>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC6(1);
    23d2:	4a08      	ldr	r2, [pc, #32]	; (23f4 <pwm_init_tc+0xb8>)
    23d4:	6a14      	ldr	r4, [r2, #32]
    23d6:	2380      	movs	r3, #128	; 0x80
    23d8:	01db      	lsls	r3, r3, #7
    23da:	4323      	orrs	r3, r4
    23dc:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC6_TC7;
    23de:	4b06      	ldr	r3, [pc, #24]	; (23f8 <pwm_init_tc+0xbc>)
    23e0:	4a06      	ldr	r2, [pc, #24]	; (23fc <pwm_init_tc+0xc0>)
    23e2:	805a      	strh	r2, [r3, #2]
		break;
    23e4:	e7dc      	b.n	23a0 <pwm_init_tc+0x64>
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	42003400 	.word	0x42003400
    23ec:	42003800 	.word	0x42003800
    23f0:	42003c00 	.word	0x42003c00
    23f4:	40000400 	.word	0x40000400
    23f8:	40000c00 	.word	0x40000c00
    23fc:	0000401d 	.word	0x0000401d
    2400:	42002c00 	.word	0x42002c00
    2404:	42003000 	.word	0x42003000
    2408:	0000401c 	.word	0x0000401c
    240c:	0000401b 	.word	0x0000401b

00002410 <pwm_enable_tc>:
	return true;
}

bool pwm_enable_tc(tc_registers_t* tc) {
	// check tcc
	switch ((uint32_t)tc) {
    2410:	4a0f      	ldr	r2, [pc, #60]	; (2450 <pwm_enable_tc+0x40>)
    2412:	4290      	cmp	r0, r2
    2414:	d010      	beq.n	2438 <pwm_enable_tc+0x28>
    2416:	d807      	bhi.n	2428 <pwm_enable_tc+0x18>
    2418:	4a0e      	ldr	r2, [pc, #56]	; (2454 <pwm_enable_tc+0x44>)
    241a:	4290      	cmp	r0, r2
    241c:	d00c      	beq.n	2438 <pwm_enable_tc+0x28>
    241e:	4a0e      	ldr	r2, [pc, #56]	; (2458 <pwm_enable_tc+0x48>)
    2420:	4290      	cmp	r0, r2
    2422:	d009      	beq.n	2438 <pwm_enable_tc+0x28>
    2424:	2000      	movs	r0, #0
		break;
	}
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
	return true;
}
    2426:	4770      	bx	lr
	switch ((uint32_t)tc) {
    2428:	4a0c      	ldr	r2, [pc, #48]	; (245c <pwm_enable_tc+0x4c>)
    242a:	4290      	cmp	r0, r2
    242c:	d004      	beq.n	2438 <pwm_enable_tc+0x28>
    242e:	4a0c      	ldr	r2, [pc, #48]	; (2460 <pwm_enable_tc+0x50>)
    2430:	4290      	cmp	r0, r2
    2432:	d001      	beq.n	2438 <pwm_enable_tc+0x28>
    2434:	2000      	movs	r0, #0
    2436:	e7f6      	b.n	2426 <pwm_enable_tc+0x16>
	tc->COUNT8.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    2438:	8803      	ldrh	r3, [r0, #0]
    243a:	2202      	movs	r2, #2
    243c:	4313      	orrs	r3, r2
    243e:	b29b      	uxth	r3, r3
    2440:	8003      	strh	r3, [r0, #0]
	while (tc->COUNT8.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    2442:	7bc3      	ldrb	r3, [r0, #15]
    2444:	b25b      	sxtb	r3, r3
    2446:	2b00      	cmp	r3, #0
    2448:	dbfb      	blt.n	2442 <pwm_enable_tc+0x32>
	return true;
    244a:	2001      	movs	r0, #1
    244c:	e7eb      	b.n	2426 <pwm_enable_tc+0x16>
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	42003400 	.word	0x42003400
    2454:	42002c00 	.word	0x42002c00
    2458:	42003000 	.word	0x42003000
    245c:	42003800 	.word	0x42003800
    2460:	42003c00 	.word	0x42003c00

00002464 <pwm_get_div_val>:

int pwm_get_div_val(uint32_t prescaler) {
	prescaler &= 0x7;
    2464:	2307      	movs	r3, #7
    2466:	4018      	ands	r0, r3
	switch (prescaler) {
    2468:	2807      	cmp	r0, #7
    246a:	d813      	bhi.n	2494 <pwm_get_div_val+0x30>
    246c:	0080      	lsls	r0, r0, #2
    246e:	4b0b      	ldr	r3, [pc, #44]	; (249c <pwm_get_div_val+0x38>)
    2470:	581b      	ldr	r3, [r3, r0]
    2472:	469f      	mov	pc, r3
    2474:	2001      	movs	r0, #1
		case PWM_PRESCALER_DIV256: return 256;
		case PWM_PRESCALER_DIV1024: return 1024;
	}
	// inaccessible
	return 0;
}
    2476:	4770      	bx	lr
		case PWM_PRESCALER_DIV4: return 4;
    2478:	2004      	movs	r0, #4
    247a:	e7fc      	b.n	2476 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV8: return 8;
    247c:	2008      	movs	r0, #8
    247e:	e7fa      	b.n	2476 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV16: return 16;
    2480:	2010      	movs	r0, #16
    2482:	e7f8      	b.n	2476 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV64: return 64;
    2484:	2040      	movs	r0, #64	; 0x40
    2486:	e7f6      	b.n	2476 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV256: return 256;
    2488:	2080      	movs	r0, #128	; 0x80
    248a:	0040      	lsls	r0, r0, #1
    248c:	e7f3      	b.n	2476 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV1024: return 1024;
    248e:	2080      	movs	r0, #128	; 0x80
    2490:	00c0      	lsls	r0, r0, #3
    2492:	e7f0      	b.n	2476 <pwm_get_div_val+0x12>
	return 0;
    2494:	2000      	movs	r0, #0
    2496:	e7ee      	b.n	2476 <pwm_get_div_val+0x12>
		case PWM_PRESCALER_DIV2: return 2;
    2498:	2002      	movs	r0, #2
    249a:	e7ec      	b.n	2476 <pwm_get_div_val+0x12>
    249c:	00006288 	.word	0x00006288

000024a0 <pwm_set_frequency_tc>:
	// else set value
	tcc->TCC_PER |= TCC_PER_PER(per);
	return true;
}

bool pwm_set_frequency_tc(tc_registers_t* tc, float frequency) {
    24a0:	b570      	push	{r4, r5, r6, lr}
    24a2:	0004      	movs	r4, r0
    24a4:	1c0d      	adds	r5, r1, #0
	// check tcc
	switch ((uint32_t)tc) {
    24a6:	4a16      	ldr	r2, [pc, #88]	; (2500 <pwm_set_frequency_tc+0x60>)
    24a8:	4290      	cmp	r0, r2
    24aa:	d010      	beq.n	24ce <pwm_set_frequency_tc+0x2e>
    24ac:	d807      	bhi.n	24be <pwm_set_frequency_tc+0x1e>
    24ae:	4a15      	ldr	r2, [pc, #84]	; (2504 <pwm_set_frequency_tc+0x64>)
    24b0:	4290      	cmp	r0, r2
    24b2:	d00c      	beq.n	24ce <pwm_set_frequency_tc+0x2e>
    24b4:	4a14      	ldr	r2, [pc, #80]	; (2508 <pwm_set_frequency_tc+0x68>)
    24b6:	4290      	cmp	r0, r2
    24b8:	d009      	beq.n	24ce <pwm_set_frequency_tc+0x2e>
    24ba:	2000      	movs	r0, #0
	// calculated value is outside range for given prescaler
	if (per > 0xFF) return false;
	// else set value
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
	return true;
}
    24bc:	bd70      	pop	{r4, r5, r6, pc}
	switch ((uint32_t)tc) {
    24be:	4a13      	ldr	r2, [pc, #76]	; (250c <pwm_set_frequency_tc+0x6c>)
    24c0:	4290      	cmp	r0, r2
    24c2:	d004      	beq.n	24ce <pwm_set_frequency_tc+0x2e>
    24c4:	4a12      	ldr	r2, [pc, #72]	; (2510 <pwm_set_frequency_tc+0x70>)
    24c6:	4290      	cmp	r0, r2
    24c8:	d001      	beq.n	24ce <pwm_set_frequency_tc+0x2e>
    24ca:	2000      	movs	r0, #0
    24cc:	e7f6      	b.n	24bc <pwm_set_frequency_tc+0x1c>
	int div = pwm_get_div_val((tc->COUNT8.TC_CTRLA & TC_CTRLA_PRESCALER_Msk) >> TC_CTRLA_PRESCALER_Pos);
    24ce:	8823      	ldrh	r3, [r4, #0]
    24d0:	0a1b      	lsrs	r3, r3, #8
    24d2:	2007      	movs	r0, #7
    24d4:	4018      	ands	r0, r3
    24d6:	4b0f      	ldr	r3, [pc, #60]	; (2514 <pwm_set_frequency_tc+0x74>)
    24d8:	4798      	blx	r3
	uint32_t per = (uint32_t)((float)F_CPU / (frequency * div));
    24da:	4b0f      	ldr	r3, [pc, #60]	; (2518 <pwm_set_frequency_tc+0x78>)
    24dc:	4798      	blx	r3
    24de:	4b0f      	ldr	r3, [pc, #60]	; (251c <pwm_set_frequency_tc+0x7c>)
    24e0:	1c29      	adds	r1, r5, #0
    24e2:	4798      	blx	r3
    24e4:	1c01      	adds	r1, r0, #0
    24e6:	4b0e      	ldr	r3, [pc, #56]	; (2520 <pwm_set_frequency_tc+0x80>)
    24e8:	480e      	ldr	r0, [pc, #56]	; (2524 <pwm_set_frequency_tc+0x84>)
    24ea:	4798      	blx	r3
    24ec:	4b0e      	ldr	r3, [pc, #56]	; (2528 <pwm_set_frequency_tc+0x88>)
    24ee:	4798      	blx	r3
	if (per > 0xFF) return false;
    24f0:	28ff      	cmp	r0, #255	; 0xff
    24f2:	d803      	bhi.n	24fc <pwm_set_frequency_tc+0x5c>
	tc->COUNT8.TC_PER = TC_COUNT8_PER_PER(per);
    24f4:	b2c0      	uxtb	r0, r0
    24f6:	7520      	strb	r0, [r4, #20]
	return true;
    24f8:	2001      	movs	r0, #1
    24fa:	e7df      	b.n	24bc <pwm_set_frequency_tc+0x1c>
	if (per > 0xFF) return false;
    24fc:	2000      	movs	r0, #0
    24fe:	e7dd      	b.n	24bc <pwm_set_frequency_tc+0x1c>
    2500:	42003400 	.word	0x42003400
    2504:	42002c00 	.word	0x42002c00
    2508:	42003000 	.word	0x42003000
    250c:	42003800 	.word	0x42003800
    2510:	42003c00 	.word	0x42003c00
    2514:	00002465 	.word	0x00002465
    2518:	000058f9 	.word	0x000058f9
    251c:	00005319 	.word	0x00005319
    2520:	00004f4d 	.word	0x00004f4d
    2524:	4c371b00 	.word	0x4c371b00
    2528:	00004c19 	.word	0x00004c19

0000252c <pwm_set_duty_tc>:
	// tcc->TCC_CC[channel].bit.CC = pwm_val;
	tcc->TCC_CC[channel] |= TCC_CC_CC(pwm_val);
	return true;
}

bool pwm_set_duty_tc(tc_registers_t* tc, int channel, float duty) {
    252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    252e:	0004      	movs	r4, r0
    2530:	000e      	movs	r6, r1
    2532:	1c15      	adds	r5, r2, #0
	// check tcc
	switch ((uint32_t)tc) {
    2534:	4a1b      	ldr	r2, [pc, #108]	; (25a4 <pwm_set_duty_tc+0x78>)
    2536:	4290      	cmp	r0, r2
    2538:	d010      	beq.n	255c <pwm_set_duty_tc+0x30>
    253a:	d807      	bhi.n	254c <pwm_set_duty_tc+0x20>
    253c:	4a1a      	ldr	r2, [pc, #104]	; (25a8 <pwm_set_duty_tc+0x7c>)
    253e:	4290      	cmp	r0, r2
    2540:	d00c      	beq.n	255c <pwm_set_duty_tc+0x30>
    2542:	4a1a      	ldr	r2, [pc, #104]	; (25ac <pwm_set_duty_tc+0x80>)
    2544:	4290      	cmp	r0, r2
    2546:	d009      	beq.n	255c <pwm_set_duty_tc+0x30>
    2548:	2000      	movs	r0, #0
	// check pwm_val again in case of FP errors
	if (pwm_val > per) pwm_val = per;
	// assign value
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
	return true;
    254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch ((uint32_t)tc) {
    254c:	4a18      	ldr	r2, [pc, #96]	; (25b0 <pwm_set_duty_tc+0x84>)
    254e:	4290      	cmp	r0, r2
    2550:	d004      	beq.n	255c <pwm_set_duty_tc+0x30>
    2552:	4a18      	ldr	r2, [pc, #96]	; (25b4 <pwm_set_duty_tc+0x88>)
    2554:	4290      	cmp	r0, r2
    2556:	d001      	beq.n	255c <pwm_set_duty_tc+0x30>
    2558:	2000      	movs	r0, #0
    255a:	e7f6      	b.n	254a <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    255c:	4b16      	ldr	r3, [pc, #88]	; (25b8 <pwm_set_duty_tc+0x8c>)
    255e:	2100      	movs	r1, #0
    2560:	1c28      	adds	r0, r5, #0
    2562:	4798      	blx	r3
    2564:	2800      	cmp	r0, #0
    2566:	d11b      	bne.n	25a0 <pwm_set_duty_tc+0x74>
	duty = MIN_2(1.0f, duty);
    2568:	4b14      	ldr	r3, [pc, #80]	; (25bc <pwm_set_duty_tc+0x90>)
    256a:	21fe      	movs	r1, #254	; 0xfe
    256c:	0589      	lsls	r1, r1, #22
    256e:	1c28      	adds	r0, r5, #0
    2570:	4798      	blx	r3
    2572:	2800      	cmp	r0, #0
    2574:	d001      	beq.n	257a <pwm_set_duty_tc+0x4e>
    2576:	25fe      	movs	r5, #254	; 0xfe
    2578:	05ad      	lsls	r5, r5, #22
	uint8_t per = (tc->COUNT8.TC_PER & TC_COUNT8_PER_PER_Msk) >> TC_COUNT8_PER_PER_Pos;
    257a:	7d27      	ldrb	r7, [r4, #20]
    257c:	b2ff      	uxtb	r7, r7
	uint32_t pwm_val = duty * per;
    257e:	4b10      	ldr	r3, [pc, #64]	; (25c0 <pwm_set_duty_tc+0x94>)
    2580:	0038      	movs	r0, r7
    2582:	4798      	blx	r3
    2584:	4b0f      	ldr	r3, [pc, #60]	; (25c4 <pwm_set_duty_tc+0x98>)
    2586:	1c29      	adds	r1, r5, #0
    2588:	4798      	blx	r3
    258a:	4b0f      	ldr	r3, [pc, #60]	; (25c8 <pwm_set_duty_tc+0x9c>)
    258c:	4798      	blx	r3
	if (pwm_val > per) pwm_val = per;
    258e:	003b      	movs	r3, r7
    2590:	4287      	cmp	r7, r0
    2592:	d300      	bcc.n	2596 <pwm_set_duty_tc+0x6a>
	uint32_t pwm_val = duty * per;
    2594:	0003      	movs	r3, r0
	tc->COUNT8.TC_CC[channel] = TC_COUNT8_CC_CC(pwm_val);
    2596:	b2db      	uxtb	r3, r3
    2598:	19a4      	adds	r4, r4, r6
    259a:	7623      	strb	r3, [r4, #24]
	return true;
    259c:	2001      	movs	r0, #1
    259e:	e7d4      	b.n	254a <pwm_set_duty_tc+0x1e>
	duty = MAX_2(0.0f, duty);
    25a0:	2500      	movs	r5, #0
    25a2:	e7e1      	b.n	2568 <pwm_set_duty_tc+0x3c>
    25a4:	42003400 	.word	0x42003400
    25a8:	42002c00 	.word	0x42002c00
    25ac:	42003000 	.word	0x42003000
    25b0:	42003800 	.word	0x42003800
    25b4:	42003c00 	.word	0x42003c00
    25b8:	00004b6d 	.word	0x00004b6d
    25bc:	00004b95 	.word	0x00004b95
    25c0:	000058f9 	.word	0x000058f9
    25c4:	00005319 	.word	0x00005319
    25c8:	00004c19 	.word	0x00004c19

000025cc <sercom_check>:
#include "sercom.h"

bool sercom_check(sercom_registers_t* sercom) {
	switch ((uint32_t)sercom) {
    25cc:	4b11      	ldr	r3, [pc, #68]	; (2614 <sercom_check+0x48>)
    25ce:	4298      	cmp	r0, r3
    25d0:	d017      	beq.n	2602 <sercom_check+0x36>
    25d2:	d80c      	bhi.n	25ee <sercom_check+0x22>
    25d4:	4b10      	ldr	r3, [pc, #64]	; (2618 <sercom_check+0x4c>)
    25d6:	4298      	cmp	r0, r3
    25d8:	d015      	beq.n	2606 <sercom_check+0x3a>
    25da:	4b10      	ldr	r3, [pc, #64]	; (261c <sercom_check+0x50>)
    25dc:	4298      	cmp	r0, r3
    25de:	d014      	beq.n	260a <sercom_check+0x3e>
    25e0:	4b0f      	ldr	r3, [pc, #60]	; (2620 <sercom_check+0x54>)
    25e2:	4298      	cmp	r0, r3
    25e4:	d001      	beq.n	25ea <sercom_check+0x1e>
		case (uint32_t)SERCOM5_REGS:
		#endif
		return true;
		break;
		default:
		return false;
    25e6:	2000      	movs	r0, #0
		break;
	}
}
    25e8:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    25ea:	2001      	movs	r0, #1
    25ec:	e7fc      	b.n	25e8 <sercom_check+0x1c>
    25ee:	4b0d      	ldr	r3, [pc, #52]	; (2624 <sercom_check+0x58>)
    25f0:	4298      	cmp	r0, r3
    25f2:	d00c      	beq.n	260e <sercom_check+0x42>
    25f4:	4b0c      	ldr	r3, [pc, #48]	; (2628 <sercom_check+0x5c>)
    25f6:	4298      	cmp	r0, r3
    25f8:	d001      	beq.n	25fe <sercom_check+0x32>
		return false;
    25fa:	2000      	movs	r0, #0
    25fc:	e7f4      	b.n	25e8 <sercom_check+0x1c>
	switch ((uint32_t)sercom) {
    25fe:	2001      	movs	r0, #1
    2600:	e7f2      	b.n	25e8 <sercom_check+0x1c>
    2602:	2001      	movs	r0, #1
    2604:	e7f0      	b.n	25e8 <sercom_check+0x1c>
    2606:	2001      	movs	r0, #1
    2608:	e7ee      	b.n	25e8 <sercom_check+0x1c>
    260a:	2001      	movs	r0, #1
    260c:	e7ec      	b.n	25e8 <sercom_check+0x1c>
    260e:	2001      	movs	r0, #1
    2610:	e7ea      	b.n	25e8 <sercom_check+0x1c>
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	42001400 	.word	0x42001400
    2618:	42000c00 	.word	0x42000c00
    261c:	42001000 	.word	0x42001000
    2620:	42000800 	.word	0x42000800
    2624:	42001800 	.word	0x42001800
    2628:	42001c00 	.word	0x42001c00

0000262c <sercom_init>:

bool sercom_init(sercom_registers_t* sercom) {
	// send power and clock to SERCOM
	switch ((uint32_t)sercom) {
    262c:	4b29      	ldr	r3, [pc, #164]	; (26d4 <sercom_init+0xa8>)
    262e:	4298      	cmp	r0, r3
    2630:	d03d      	beq.n	26ae <sercom_init+0x82>
    2632:	d822      	bhi.n	267a <sercom_init+0x4e>
    2634:	4b28      	ldr	r3, [pc, #160]	; (26d8 <sercom_init+0xac>)
    2636:	4298      	cmp	r0, r3
    2638:	d030      	beq.n	269c <sercom_init+0x70>
    263a:	4b28      	ldr	r3, [pc, #160]	; (26dc <sercom_init+0xb0>)
    263c:	4298      	cmp	r0, r3
    263e:	d108      	bne.n	2652 <sercom_init+0x26>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
		break;
		
		case (uint32_t)SERCOM2_REGS:
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM2(1);
    2640:	4a27      	ldr	r2, [pc, #156]	; (26e0 <sercom_init+0xb4>)
    2642:	6a13      	ldr	r3, [r2, #32]
    2644:	2110      	movs	r1, #16
    2646:	430b      	orrs	r3, r1
    2648:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    264a:	4b26      	ldr	r3, [pc, #152]	; (26e4 <sercom_init+0xb8>)
    264c:	4a26      	ldr	r2, [pc, #152]	; (26e8 <sercom_init+0xbc>)
    264e:	805a      	strh	r2, [r3, #2]
		break;
    2650:	e00a      	b.n	2668 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    2652:	4b26      	ldr	r3, [pc, #152]	; (26ec <sercom_init+0xc0>)
    2654:	4298      	cmp	r0, r3
    2656:	d10e      	bne.n	2676 <sercom_init+0x4a>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM0(1);
    2658:	4a21      	ldr	r2, [pc, #132]	; (26e0 <sercom_init+0xb4>)
    265a:	6a13      	ldr	r3, [r2, #32]
    265c:	2104      	movs	r1, #4
    265e:	430b      	orrs	r3, r1
    2660:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    2662:	4b20      	ldr	r3, [pc, #128]	; (26e4 <sercom_init+0xb8>)
    2664:	4a22      	ldr	r2, [pc, #136]	; (26f0 <sercom_init+0xc4>)
    2666:	805a      	strh	r2, [r3, #2]
		default:
		return false;
		break;
	}
	
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2668:	4b1e      	ldr	r3, [pc, #120]	; (26e4 <sercom_init+0xb8>)
    266a:	785b      	ldrb	r3, [r3, #1]
    266c:	b25b      	sxtb	r3, r3
    266e:	2b00      	cmp	r3, #0
    2670:	dbfa      	blt.n	2668 <sercom_init+0x3c>
	
	return true;
    2672:	2001      	movs	r0, #1
    2674:	4770      	bx	lr
	switch ((uint32_t)sercom) {
    2676:	2000      	movs	r0, #0
    2678:	e7fc      	b.n	2674 <sercom_init+0x48>
    267a:	4b1e      	ldr	r3, [pc, #120]	; (26f4 <sercom_init+0xc8>)
    267c:	4298      	cmp	r0, r3
    267e:	d01f      	beq.n	26c0 <sercom_init+0x94>
    2680:	4b1d      	ldr	r3, [pc, #116]	; (26f8 <sercom_init+0xcc>)
    2682:	4298      	cmp	r0, r3
    2684:	d108      	bne.n	2698 <sercom_init+0x6c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM5(1);
    2686:	4a16      	ldr	r2, [pc, #88]	; (26e0 <sercom_init+0xb4>)
    2688:	6a13      	ldr	r3, [r2, #32]
    268a:	2180      	movs	r1, #128	; 0x80
    268c:	430b      	orrs	r3, r1
    268e:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    2690:	4b14      	ldr	r3, [pc, #80]	; (26e4 <sercom_init+0xb8>)
    2692:	4a1a      	ldr	r2, [pc, #104]	; (26fc <sercom_init+0xd0>)
    2694:	805a      	strh	r2, [r3, #2]
		break;
    2696:	e7e7      	b.n	2668 <sercom_init+0x3c>
	switch ((uint32_t)sercom) {
    2698:	2000      	movs	r0, #0
    269a:	e7eb      	b.n	2674 <sercom_init+0x48>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM1(1);
    269c:	4a10      	ldr	r2, [pc, #64]	; (26e0 <sercom_init+0xb4>)
    269e:	6a13      	ldr	r3, [r2, #32]
    26a0:	2108      	movs	r1, #8
    26a2:	430b      	orrs	r3, r1
    26a4:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    26a6:	4b0f      	ldr	r3, [pc, #60]	; (26e4 <sercom_init+0xb8>)
    26a8:	4a15      	ldr	r2, [pc, #84]	; (2700 <sercom_init+0xd4>)
    26aa:	805a      	strh	r2, [r3, #2]
		break;
    26ac:	e7dc      	b.n	2668 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM3(1);
    26ae:	4a0c      	ldr	r2, [pc, #48]	; (26e0 <sercom_init+0xb4>)
    26b0:	6a13      	ldr	r3, [r2, #32]
    26b2:	2120      	movs	r1, #32
    26b4:	430b      	orrs	r3, r1
    26b6:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    26b8:	4b0a      	ldr	r3, [pc, #40]	; (26e4 <sercom_init+0xb8>)
    26ba:	4a12      	ldr	r2, [pc, #72]	; (2704 <sercom_init+0xd8>)
    26bc:	805a      	strh	r2, [r3, #2]
		break;
    26be:	e7d3      	b.n	2668 <sercom_init+0x3c>
		PM_REGS->PM_APBCMASK |= PM_APBCMASK_SERCOM4(1);
    26c0:	4a07      	ldr	r2, [pc, #28]	; (26e0 <sercom_init+0xb4>)
    26c2:	6a13      	ldr	r3, [r2, #32]
    26c4:	2140      	movs	r1, #64	; 0x40
    26c6:	430b      	orrs	r3, r1
    26c8:	6213      	str	r3, [r2, #32]
		GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    26ca:	4b06      	ldr	r3, [pc, #24]	; (26e4 <sercom_init+0xb8>)
    26cc:	4a0e      	ldr	r2, [pc, #56]	; (2708 <sercom_init+0xdc>)
    26ce:	805a      	strh	r2, [r3, #2]
		break;
    26d0:	e7ca      	b.n	2668 <sercom_init+0x3c>
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	42001400 	.word	0x42001400
    26d8:	42000c00 	.word	0x42000c00
    26dc:	42001000 	.word	0x42001000
    26e0:	40000400 	.word	0x40000400
    26e4:	40000c00 	.word	0x40000c00
    26e8:	00004016 	.word	0x00004016
    26ec:	42000800 	.word	0x42000800
    26f0:	00004014 	.word	0x00004014
    26f4:	42001800 	.word	0x42001800
    26f8:	42001c00 	.word	0x42001c00
    26fc:	00004019 	.word	0x00004019
    2700:	00004015 	.word	0x00004015
    2704:	00004017 	.word	0x00004017
    2708:	00004018 	.word	0x00004018

0000270c <spi_set_baud>:
	// wait for sync
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
	return true;
}

bool spi_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    270c:	b570      	push	{r4, r5, r6, lr}
    270e:	0006      	movs	r6, r0
    2710:	000d      	movs	r5, r1
	if (!sercom_check(sercom)) return false;
    2712:	4b0a      	ldr	r3, [pc, #40]	; (273c <spi_set_baud+0x30>)
    2714:	4798      	blx	r3
    2716:	1e04      	subs	r4, r0, #0
    2718:	d00e      	beq.n	2738 <spi_set_baud+0x2c>
	
	float baudval = (float)F_CPU / (2 * baud) - 1;
    271a:	0068      	lsls	r0, r5, #1
    271c:	4b08      	ldr	r3, [pc, #32]	; (2740 <spi_set_baud+0x34>)
    271e:	4798      	blx	r3
    2720:	1c01      	adds	r1, r0, #0
    2722:	4b08      	ldr	r3, [pc, #32]	; (2744 <spi_set_baud+0x38>)
    2724:	4808      	ldr	r0, [pc, #32]	; (2748 <spi_set_baud+0x3c>)
    2726:	4798      	blx	r3
    2728:	4b08      	ldr	r3, [pc, #32]	; (274c <spi_set_baud+0x40>)
    272a:	21fe      	movs	r1, #254	; 0xfe
    272c:	0589      	lsls	r1, r1, #22
    272e:	4798      	blx	r3
	sercom->SPIM.SERCOM_BAUD = (uint8_t)baudval;
    2730:	4b07      	ldr	r3, [pc, #28]	; (2750 <spi_set_baud+0x44>)
    2732:	4798      	blx	r3
    2734:	b2c0      	uxtb	r0, r0
    2736:	7330      	strb	r0, [r6, #12]
	return true;
}
    2738:	0020      	movs	r0, r4
    273a:	bd70      	pop	{r4, r5, r6, pc}
    273c:	000025cd 	.word	0x000025cd
    2740:	00005991 	.word	0x00005991
    2744:	00004f4d 	.word	0x00004f4d
    2748:	4c371b00 	.word	0x4c371b00
    274c:	00005595 	.word	0x00005595
    2750:	00004c19 	.word	0x00004c19

00002754 <spi_init>:
bool spi_init(sercom_registers_t* sercom, uint8_t cpol, uint8_t cpha, uint8_t dipo, uint8_t dopo, uint32_t baud) {
    2754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2756:	46ce      	mov	lr, r9
    2758:	4647      	mov	r7, r8
    275a:	b580      	push	{r7, lr}
    275c:	0004      	movs	r4, r0
    275e:	000d      	movs	r5, r1
    2760:	0017      	movs	r7, r2
    2762:	001e      	movs	r6, r3
    2764:	ab08      	add	r3, sp, #32
    2766:	781b      	ldrb	r3, [r3, #0]
    2768:	4699      	mov	r9, r3
	if (!sercom_init(sercom)) return false;
    276a:	4b12      	ldr	r3, [pc, #72]	; (27b4 <spi_init+0x60>)
    276c:	4798      	blx	r3
    276e:	4680      	mov	r8, r0
    2770:	2800      	cmp	r0, #0
    2772:	d104      	bne.n	277e <spi_init+0x2a>
}
    2774:	4640      	mov	r0, r8
    2776:	bcc0      	pop	{r6, r7}
    2778:	46b9      	mov	r9, r7
    277a:	46b0      	mov	r8, r6
    277c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    277e:	076d      	lsls	r5, r5, #29
    2780:	073f      	lsls	r7, r7, #28
    2782:	433d      	orrs	r5, r7
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    2784:	0536      	lsls	r6, r6, #20
    2786:	4335      	orrs	r5, r6
		((uint32_t)dopo << SERCOM_SPIM_CTRLA_DOPO_Pos);
    2788:	464b      	mov	r3, r9
    278a:	041b      	lsls	r3, r3, #16
		SERCOM_SPIM_CTRLA_MODE_SPI_MASTER | ((uint32_t)dipo << SERCOM_SPIM_CTRLA_DIPO_Pos) | 
    278c:	431d      	orrs	r5, r3
    278e:	230c      	movs	r3, #12
    2790:	431d      	orrs	r5, r3
	sercom->SPIM.SERCOM_CTRLA = ((uint32_t)cpol << SERCOM_SPIM_CTRLA_CPOL_Pos) | ((uint32_t)cpha << SERCOM_SPIM_CTRLA_CPHA_Pos) | 
    2792:	6025      	str	r5, [r4, #0]
	sercom->SPIM.SERCOM_CTRLB = SERCOM_SPIM_CTRLB_RXEN(1);
    2794:	2380      	movs	r3, #128	; 0x80
    2796:	029b      	lsls	r3, r3, #10
    2798:	6063      	str	r3, [r4, #4]
	spi_set_baud(sercom, baud);
    279a:	9909      	ldr	r1, [sp, #36]	; 0x24
    279c:	0020      	movs	r0, r4
    279e:	4b06      	ldr	r3, [pc, #24]	; (27b8 <spi_init+0x64>)
    27a0:	4798      	blx	r3
	sercom->SPIM.SERCOM_CTRLA |= SERCOM_SPIM_CTRLA_ENABLE(1);
    27a2:	6823      	ldr	r3, [r4, #0]
    27a4:	2202      	movs	r2, #2
    27a6:	4313      	orrs	r3, r2
    27a8:	6023      	str	r3, [r4, #0]
	while (sercom->SPIM.SERCOM_SYNCBUSY & SERCOM_SPIM_SYNCBUSY_ENABLE_Msk);
    27aa:	69e3      	ldr	r3, [r4, #28]
    27ac:	079b      	lsls	r3, r3, #30
    27ae:	d4fc      	bmi.n	27aa <spi_init+0x56>
    27b0:	e7e0      	b.n	2774 <spi_init+0x20>
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	0000262d 	.word	0x0000262d
    27b8:	0000270d 	.word	0x0000270d

000027bc <spi_command>:

uint8_t spi_command(sercom_registers_t* sercom, uint8_t data) {
	// wait until ready to send
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_DRE_Msk));
    27bc:	7e03      	ldrb	r3, [r0, #24]
    27be:	07db      	lsls	r3, r3, #31
    27c0:	d5fc      	bpl.n	27bc <spi_command>
	sercom->SPIM.SERCOM_DATA = data;
    27c2:	6281      	str	r1, [r0, #40]	; 0x28
	// wait until done
	while (!(sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_TXC_Msk));
    27c4:	7e03      	ldrb	r3, [r0, #24]
    27c6:	079b      	lsls	r3, r3, #30
    27c8:	d5fc      	bpl.n	27c4 <spi_command+0x8>
	// read buffer
	return sercom->SPIM.SERCOM_DATA;
    27ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
    27cc:	b2c0      	uxtb	r0, r0
}
    27ce:	4770      	bx	lr

000027d0 <spi_flush>:

void spi_flush(sercom_registers_t* sercom) {
	// while there is unread data touch the data register
	while (sercom->SPIM.SERCOM_INTFLAG & SERCOM_SPIM_INTFLAG_RXC_Msk) sercom->SPIM.SERCOM_DATA;
    27d0:	e000      	b.n	27d4 <spi_flush+0x4>
    27d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    27d4:	7e03      	ldrb	r3, [r0, #24]
    27d6:	075b      	lsls	r3, r3, #29
    27d8:	d4fb      	bmi.n	27d2 <spi_flush+0x2>
    27da:	4770      	bx	lr

000027dc <set_clock_48m>:

void set_clock_48m() {
	// set wait states for flash to 1
	// see datasheet table 37-42

	NVMCTRL_REGS->NVMCTRL_CTRLB |= NVMCTRL_CTRLB_RWS(1);
    27dc:	4a27      	ldr	r2, [pc, #156]	; (287c <set_clock_48m+0xa0>)
    27de:	6853      	ldr	r3, [r2, #4]
    27e0:	2102      	movs	r1, #2
    27e2:	430b      	orrs	r3, r1
    27e4:	6053      	str	r3, [r2, #4]

	// enable external 32khz oscillator
	SYSCTRL_REGS->SYSCTRL_XOSC32K = SYSCTRL_XOSC32K_STARTUP(0x4) | SYSCTRL_XOSC32K_EN32K(1) | SYSCTRL_XOSC32K_XTALEN(1);
    27e6:	4a26      	ldr	r2, [pc, #152]	; (2880 <set_clock_48m+0xa4>)
    27e8:	4b26      	ldr	r3, [pc, #152]	; (2884 <set_clock_48m+0xa8>)
    27ea:	8293      	strh	r3, [r2, #20]
	// seperate write
	SYSCTRL_REGS->SYSCTRL_XOSC32K |= SYSCTRL_XOSC32K_ENABLE(1);
    27ec:	8a93      	ldrh	r3, [r2, #20]
    27ee:	430b      	orrs	r3, r1
    27f0:	b29b      	uxth	r3, r3
    27f2:	8293      	strh	r3, [r2, #20]

	// wait until done
	while (!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_XOSC32KRDY_Msk));
    27f4:	4b22      	ldr	r3, [pc, #136]	; (2880 <set_clock_48m+0xa4>)
    27f6:	68db      	ldr	r3, [r3, #12]
    27f8:	079b      	lsls	r3, r3, #30
    27fa:	d5fb      	bpl.n	27f4 <set_clock_48m+0x18>

	// configure GCLK1
	// set divide to 1 (no division)
	GCLK_REGS->GCLK_GENDIV = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);
    27fc:	4b22      	ldr	r3, [pc, #136]	; (2888 <set_clock_48m+0xac>)
    27fe:	2202      	movs	r2, #2
    2800:	32ff      	adds	r2, #255	; 0xff
    2802:	609a      	str	r2, [r3, #8]

	// set GCLK1 to use external 32k oscillator
	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    2804:	4a21      	ldr	r2, [pc, #132]	; (288c <set_clock_48m+0xb0>)
    2806:	605a      	str	r2, [r3, #4]

	// wait for data write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2808:	4b1f      	ldr	r3, [pc, #124]	; (2888 <set_clock_48m+0xac>)
    280a:	785b      	ldrb	r3, [r3, #1]
    280c:	b25b      	sxtb	r3, r3
    280e:	2b00      	cmp	r3, #0
    2810:	dbfa      	blt.n	2808 <set_clock_48m+0x2c>

	// send GCLK1 to DFLL
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_ID_DFLL48 | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_CLKEN(1);
    2812:	4b1d      	ldr	r3, [pc, #116]	; (2888 <set_clock_48m+0xac>)
    2814:	2282      	movs	r2, #130	; 0x82
    2816:	01d2      	lsls	r2, r2, #7
    2818:	805a      	strh	r2, [r3, #2]

	// set up DFLL
	// mush reset value before configuration
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    281a:	4b19      	ldr	r3, [pc, #100]	; (2880 <set_clock_48m+0xa4>)
    281c:	68db      	ldr	r3, [r3, #12]
    281e:	06db      	lsls	r3, r3, #27
    2820:	d5fb      	bpl.n	281a <set_clock_48m+0x3e>
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL = SYSCTRL_DFLLCTRL_ENABLE(1);
    2822:	4b17      	ldr	r3, [pc, #92]	; (2880 <set_clock_48m+0xa4>)
    2824:	2202      	movs	r2, #2
    2826:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2828:	4b15      	ldr	r3, [pc, #84]	; (2880 <set_clock_48m+0xa4>)
    282a:	68db      	ldr	r3, [r3, #12]
    282c:	06db      	lsls	r3, r3, #27
    282e:	d5fb      	bpl.n	2828 <set_clock_48m+0x4c>

	// set clock multiplier and trims
	// SYSCTRL_DFLLMUL_MUL = factor of multiplication
	// SYSCTRL_DFLLMUL_FSTEP = fine step
	// SYSCTRL_SFLLMUL_CSTEP = coarse step
	SYSCTRL_REGS->SYSCTRL_DFLLMUL = SYSCTRL_DFLLMUL_MUL(1465) | SYSCTRL_DFLLMUL_FSTEP(511) | SYSCTRL_DFLLMUL_CSTEP(31);
    2830:	4b13      	ldr	r3, [pc, #76]	; (2880 <set_clock_48m+0xa4>)
    2832:	4a17      	ldr	r2, [pc, #92]	; (2890 <set_clock_48m+0xb4>)
    2834:	62da      	str	r2, [r3, #44]	; 0x2c

	// wait for write to finish
	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2836:	4b12      	ldr	r3, [pc, #72]	; (2880 <set_clock_48m+0xa4>)
    2838:	68db      	ldr	r3, [r3, #12]
    283a:	06db      	lsls	r3, r3, #27
    283c:	d5fb      	bpl.n	2836 <set_clock_48m+0x5a>

	// set default DFLL values from fuses
	// revisit for full understanding
	uint32_t coarse = FUSES_OTP4_WORD_1_DFLL48M_COARSE_CAL(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    283e:	4b15      	ldr	r3, [pc, #84]	; (2894 <set_clock_48m+0xb8>)
    2840:	685b      	ldr	r3, [r3, #4]
	
	SYSCTRL_REGS->SYSCTRL_DFLLVAL |= SYSCTRL_DFLLVAL_COARSE(coarse);
    2842:	4b0f      	ldr	r3, [pc, #60]	; (2880 <set_clock_48m+0xa4>)
    2844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2846:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLRDY_Msk));
    2848:	4b0d      	ldr	r3, [pc, #52]	; (2880 <set_clock_48m+0xa4>)
    284a:	68db      	ldr	r3, [r3, #12]
    284c:	06db      	lsls	r3, r3, #27
    284e:	d5fb      	bpl.n	2848 <set_clock_48m+0x6c>

	// turn on DFLL and set to closed loop mode
	SYSCTRL_REGS->SYSCTRL_DFLLCTRL |= SYSCTRL_DFLLCTRL_MODE(1) | SYSCTRL_DFLLCTRL_WAITLOCK(1) | SYSCTRL_DFLLCTRL_ENABLE(1);
    2850:	4a0b      	ldr	r2, [pc, #44]	; (2880 <set_clock_48m+0xa4>)
    2852:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2854:	4910      	ldr	r1, [pc, #64]	; (2898 <set_clock_48m+0xbc>)
    2856:	430b      	orrs	r3, r1
    2858:	8493      	strh	r3, [r2, #36]	; 0x24

	// wait for frequency lock
	while(!((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKC_Msk) >> SYSCTRL_PCLKSR_DFLLLCKC_Pos) || !((SYSCTRL_REGS->SYSCTRL_PCLKSR & SYSCTRL_PCLKSR_DFLLLCKF_Msk) >> SYSCTRL_PCLKSR_DFLLLCKF_Pos));
    285a:	4b09      	ldr	r3, [pc, #36]	; (2880 <set_clock_48m+0xa4>)
    285c:	68db      	ldr	r3, [r3, #12]
    285e:	061b      	lsls	r3, r3, #24
    2860:	d5fb      	bpl.n	285a <set_clock_48m+0x7e>
    2862:	4b07      	ldr	r3, [pc, #28]	; (2880 <set_clock_48m+0xa4>)
    2864:	68db      	ldr	r3, [r3, #12]
    2866:	065b      	lsls	r3, r3, #25
    2868:	d5f7      	bpl.n	285a <set_clock_48m+0x7e>
	// switch GCLK0 to use DFLL

	GCLK_REGS->GCLK_GENCTRL = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M | GCLK_GENCTRL_IDC(1) | GCLK_GENCTRL_GENEN(1);
    286a:	4b07      	ldr	r3, [pc, #28]	; (2888 <set_clock_48m+0xac>)
    286c:	4a0b      	ldr	r2, [pc, #44]	; (289c <set_clock_48m+0xc0>)
    286e:	605a      	str	r2, [r3, #4]

	// wait for write to complete
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    2870:	4b05      	ldr	r3, [pc, #20]	; (2888 <set_clock_48m+0xac>)
    2872:	785b      	ldrb	r3, [r3, #1]
    2874:	b25b      	sxtb	r3, r3
    2876:	2b00      	cmp	r3, #0
    2878:	dbfa      	blt.n	2870 <set_clock_48m+0x94>
}
    287a:	4770      	bx	lr
    287c:	41004000 	.word	0x41004000
    2880:	40000800 	.word	0x40000800
    2884:	0000040c 	.word	0x0000040c
    2888:	40000c00 	.word	0x40000c00
    288c:	00030501 	.word	0x00030501
    2890:	7dff05b9 	.word	0x7dff05b9
    2894:	00806020 	.word	0x00806020
    2898:	00000806 	.word	0x00000806
    289c:	00030700 	.word	0x00030700

000028a0 <delay_8c>:

//__attribute__((section(".ramfunc")))
void delay_8c(uint32_t n) {
	__asm (
    28a0:	3801      	subs	r0, #1
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	46c0      	nop			; (mov r8, r8)
    28a6:	46c0      	nop			; (mov r8, r8)
    28a8:	46c0      	nop			; (mov r8, r8)
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	d1f8      	bne.n	28a0 <delay_8c>
	"	nop				\n"
	"	nop				\n"
	"	nop				\n"
	"	bne loop		\n" // if counter is not 0, loop
	);
}
    28ae:	4770      	bx	lr

000028b0 <init_timer>:


void init_timer() {
	// never forget the bus clock
	// PM->APBCMASK.bit.TC4_ = 1;
	PM_REGS->PM_APBCMASK |= PM_APBCMASK_TC4(1);
    28b0:	4a14      	ldr	r2, [pc, #80]	; (2904 <init_timer+0x54>)
    28b2:	6a11      	ldr	r1, [r2, #32]
    28b4:	2380      	movs	r3, #128	; 0x80
    28b6:	015b      	lsls	r3, r3, #5
    28b8:	430b      	orrs	r3, r1
    28ba:	6213      	str	r3, [r2, #32]
	
	// pipe 48mhz clock to tc4/tc5 counters
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    28bc:	4b12      	ldr	r3, [pc, #72]	; (2908 <init_timer+0x58>)
    28be:	4a13      	ldr	r2, [pc, #76]	; (290c <init_timer+0x5c>)
    28c0:	805a      	strh	r2, [r3, #2]
	while(GCLK_REGS->GCLK_STATUS & GCLK_STATUS_SYNCBUSY_Msk);
    28c2:	4b11      	ldr	r3, [pc, #68]	; (2908 <init_timer+0x58>)
    28c4:	785b      	ldrb	r3, [r3, #1]
    28c6:	b25b      	sxtb	r3, r3
    28c8:	2b00      	cmp	r3, #0
    28ca:	dbfa      	blt.n	28c2 <init_timer+0x12>
	
	// configure counters
	TC4_REGS->COUNT32.TC_CTRLA = TC_CTRLA_MODE_COUNT32;
    28cc:	4b10      	ldr	r3, [pc, #64]	; (2910 <init_timer+0x60>)
    28ce:	2208      	movs	r2, #8
    28d0:	801a      	strh	r2, [r3, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    28d2:	4b0f      	ldr	r3, [pc, #60]	; (2910 <init_timer+0x60>)
    28d4:	7bdb      	ldrb	r3, [r3, #15]
    28d6:	b25b      	sxtb	r3, r3
    28d8:	2b00      	cmp	r3, #0
    28da:	dbfa      	blt.n	28d2 <init_timer+0x22>
	
	// enable TC4
	TC4_REGS->COUNT32.TC_CTRLA |= TC_CTRLA_ENABLE(1);
    28dc:	4a0c      	ldr	r2, [pc, #48]	; (2910 <init_timer+0x60>)
    28de:	8813      	ldrh	r3, [r2, #0]
    28e0:	2102      	movs	r1, #2
    28e2:	430b      	orrs	r3, r1
    28e4:	b29b      	uxth	r3, r3
    28e6:	8013      	strh	r3, [r2, #0]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    28e8:	4b09      	ldr	r3, [pc, #36]	; (2910 <init_timer+0x60>)
    28ea:	7bdb      	ldrb	r3, [r3, #15]
    28ec:	b25b      	sxtb	r3, r3
    28ee:	2b00      	cmp	r3, #0
    28f0:	dbfa      	blt.n	28e8 <init_timer+0x38>
	
	// enable continuous read
	TC4_REGS->COUNT32.TC_READREQ = TC_READREQ_RCONT(1) | TC_READREQ_ADDR(0x10);
    28f2:	4b07      	ldr	r3, [pc, #28]	; (2910 <init_timer+0x60>)
    28f4:	4a07      	ldr	r2, [pc, #28]	; (2914 <init_timer+0x64>)
    28f6:	805a      	strh	r2, [r3, #2]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    28f8:	4b05      	ldr	r3, [pc, #20]	; (2910 <init_timer+0x60>)
    28fa:	7bdb      	ldrb	r3, [r3, #15]
    28fc:	b25b      	sxtb	r3, r3
    28fe:	2b00      	cmp	r3, #0
    2900:	dbfa      	blt.n	28f8 <init_timer+0x48>
}
    2902:	4770      	bx	lr
    2904:	40000400 	.word	0x40000400
    2908:	40000c00 	.word	0x40000c00
    290c:	0000401c 	.word	0x0000401c
    2910:	42003000 	.word	0x42003000
    2914:	00004010 	.word	0x00004010

00002918 <read_timer_20ns>:
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
}


uint32_t read_timer_20ns() {
	return TC4_REGS->COUNT32.TC_COUNT;
    2918:	4b01      	ldr	r3, [pc, #4]	; (2920 <read_timer_20ns+0x8>)
    291a:	6918      	ldr	r0, [r3, #16]
}
    291c:	4770      	bx	lr
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	42003000 	.word	0x42003000

00002924 <init_timer_interrupt>:
	return (float)TC4_REGS->COUNT32.TC_COUNT * TIMER_S_MULTIPLIER;
}


void init_timer_interrupt() {
	TC4_REGS->COUNT32.TC_INTENSET = TC_INTENSET_MC0(1);
    2924:	4b04      	ldr	r3, [pc, #16]	; (2938 <init_timer_interrupt+0x14>)
    2926:	2210      	movs	r2, #16
    2928:	735a      	strb	r2, [r3, #13]
	while(TC4_REGS->COUNT32.TC_STATUS & TC_STATUS_SYNCBUSY_Msk);
    292a:	4b03      	ldr	r3, [pc, #12]	; (2938 <init_timer_interrupt+0x14>)
    292c:	7bdb      	ldrb	r3, [r3, #15]
    292e:	b25b      	sxtb	r3, r3
    2930:	2b00      	cmp	r3, #0
    2932:	dbfa      	blt.n	292a <init_timer_interrupt+0x6>
}
    2934:	4770      	bx	lr
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	42003000 	.word	0x42003000

0000293c <timer_enable_interrupt>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    293c:	4b02      	ldr	r3, [pc, #8]	; (2948 <timer_enable_interrupt+0xc>)
    293e:	2280      	movs	r2, #128	; 0x80
    2940:	0312      	lsls	r2, r2, #12
    2942:	601a      	str	r2, [r3, #0]

void timer_enable_interrupt() {
	NVIC_EnableIRQ(TC4_IRQn);
}
    2944:	4770      	bx	lr
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	e000e100 	.word	0xe000e100

0000294c <timer_disable_interrupt>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    294c:	4a04      	ldr	r2, [pc, #16]	; (2960 <timer_disable_interrupt+0x14>)
    294e:	2380      	movs	r3, #128	; 0x80
    2950:	2180      	movs	r1, #128	; 0x80
    2952:	0309      	lsls	r1, r1, #12
    2954:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2956:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    295a:	f3bf 8f6f 	isb	sy

void timer_disable_interrupt() {
	NVIC_DisableIRQ(TC4_IRQn);
}
    295e:	4770      	bx	lr
    2960:	e000e100 	.word	0xe000e100

00002964 <timer_clear_interrupt>:

void timer_clear_interrupt() {
	TC4_REGS->COUNT32.TC_INTFLAG = TC_INTFLAG_MC0(1);
    2964:	4b04      	ldr	r3, [pc, #16]	; (2978 <timer_clear_interrupt+0x14>)
    2966:	2210      	movs	r2, #16
    2968:	739a      	strb	r2, [r3, #14]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    296a:	4a04      	ldr	r2, [pc, #16]	; (297c <timer_clear_interrupt+0x18>)
    296c:	23c0      	movs	r3, #192	; 0xc0
    296e:	005b      	lsls	r3, r3, #1
    2970:	2180      	movs	r1, #128	; 0x80
    2972:	0309      	lsls	r1, r1, #12
    2974:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(TC4_IRQn);
}
    2976:	4770      	bx	lr
    2978:	42003000 	.word	0x42003000
    297c:	e000e100 	.word	0xe000e100

00002980 <timer_set_interrupt_time>:

void timer_set_interrupt_time(uint32_t time) {
	TC4_REGS->COUNT32.TC_CC[0] |= TC_COUNT32_CC_CC(time);
    2980:	4a02      	ldr	r2, [pc, #8]	; (298c <timer_set_interrupt_time+0xc>)
    2982:	6993      	ldr	r3, [r2, #24]
    2984:	4303      	orrs	r3, r0
    2986:	6193      	str	r3, [r2, #24]
    2988:	4770      	bx	lr
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	42003000 	.word	0x42003000

00002990 <uart_set_baud>:
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);

    return true;
}

bool uart_set_baud(sercom_registers_t* sercom, uint32_t baud) {
    2990:	b570      	push	{r4, r5, r6, lr}
    2992:	0006      	movs	r6, r0
    2994:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    2996:	4b10      	ldr	r3, [pc, #64]	; (29d8 <uart_set_baud+0x48>)
    2998:	4798      	blx	r3
    299a:	1e04      	subs	r4, r0, #0
    299c:	d018      	beq.n	29d0 <uart_set_baud+0x40>
    // check baud is in range
    if (baud > 3E6) return false;
    299e:	4b0f      	ldr	r3, [pc, #60]	; (29dc <uart_set_baud+0x4c>)
    29a0:	429d      	cmp	r5, r3
    29a2:	d817      	bhi.n	29d4 <uart_set_baud+0x44>

    float baudval = 65536.0f * (1.0f - ((float)baud / F_CPU * 16));
    29a4:	4b0e      	ldr	r3, [pc, #56]	; (29e0 <uart_set_baud+0x50>)
    29a6:	0028      	movs	r0, r5
    29a8:	4798      	blx	r3
    29aa:	4b0e      	ldr	r3, [pc, #56]	; (29e4 <uart_set_baud+0x54>)
    29ac:	490e      	ldr	r1, [pc, #56]	; (29e8 <uart_set_baud+0x58>)
    29ae:	4798      	blx	r3
    29b0:	4d0e      	ldr	r5, [pc, #56]	; (29ec <uart_set_baud+0x5c>)
    29b2:	2183      	movs	r1, #131	; 0x83
    29b4:	05c9      	lsls	r1, r1, #23
    29b6:	47a8      	blx	r5
    29b8:	1c01      	adds	r1, r0, #0
    29ba:	4b0d      	ldr	r3, [pc, #52]	; (29f0 <uart_set_baud+0x60>)
    29bc:	20fe      	movs	r0, #254	; 0xfe
    29be:	0580      	lsls	r0, r0, #22
    29c0:	4798      	blx	r3
    29c2:	218f      	movs	r1, #143	; 0x8f
    29c4:	05c9      	lsls	r1, r1, #23
    29c6:	47a8      	blx	r5
    sercom->USART_INT.SERCOM_BAUD = (uint16_t)baudval;
    29c8:	4b0a      	ldr	r3, [pc, #40]	; (29f4 <uart_set_baud+0x64>)
    29ca:	4798      	blx	r3
    29cc:	b280      	uxth	r0, r0
    29ce:	81b0      	strh	r0, [r6, #12]
    return true;
}
    29d0:	0020      	movs	r0, r4
    29d2:	bd70      	pop	{r4, r5, r6, pc}
    if (baud > 3E6) return false;
    29d4:	2400      	movs	r4, #0
    29d6:	e7fb      	b.n	29d0 <uart_set_baud+0x40>
    29d8:	000025cd 	.word	0x000025cd
    29dc:	002dc6c0 	.word	0x002dc6c0
    29e0:	00005991 	.word	0x00005991
    29e4:	00004f4d 	.word	0x00004f4d
    29e8:	4c371b00 	.word	0x4c371b00
    29ec:	00005319 	.word	0x00005319
    29f0:	00005595 	.word	0x00005595
    29f4:	00004c19 	.word	0x00004c19

000029f8 <uart_init>:
bool uart_init(sercom_registers_t* sercom, uint8_t rxpo, uint8_t txpo, uint32_t baud) {
    29f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29fa:	0004      	movs	r4, r0
    29fc:	000e      	movs	r6, r1
    29fe:	0017      	movs	r7, r2
    2a00:	001d      	movs	r5, r3
    if (!sercom_init(sercom)) return false;
    2a02:	4b11      	ldr	r3, [pc, #68]	; (2a48 <uart_init+0x50>)
    2a04:	4798      	blx	r3
    2a06:	2800      	cmp	r0, #0
    2a08:	d01c      	beq.n	2a44 <uart_init+0x4c>
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2a0a:	0536      	lsls	r6, r6, #20
    2a0c:	23c0      	movs	r3, #192	; 0xc0
    2a0e:	039b      	lsls	r3, r3, #14
    2a10:	401e      	ands	r6, r3
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    2a12:	043f      	lsls	r7, r7, #16
    2a14:	22c0      	movs	r2, #192	; 0xc0
    2a16:	0292      	lsls	r2, r2, #10
    2a18:	4017      	ands	r7, r2
        SERCOM_USART_INT_CTRLA_FORM_USART_FRAME_NO_PARITY | SERCOM_USART_INT_CTRLA_RXPO(rxpo) |
    2a1a:	433e      	orrs	r6, r7
        SERCOM_USART_INT_CTRLA_TXPO(txpo) | SERCOM_USART_INT_CTRLA_MODE_USART_INT_CLK;
    2a1c:	4b0b      	ldr	r3, [pc, #44]	; (2a4c <uart_init+0x54>)
    2a1e:	4333      	orrs	r3, r6
    sercom->USART_INT.SERCOM_CTRLA = SERCOM_USART_INT_CTRLA_DORD(1) | SERCOM_USART_INT_CTRLA_CMODE_ASYNC |
    2a20:	6023      	str	r3, [r4, #0]
    sercom->USART_INT.SERCOM_CTRLB = SERCOM_USART_INT_CTRLB_RXEN(1) | SERCOM_USART_INT_CTRLB_TXEN(1);
    2a22:	6062      	str	r2, [r4, #4]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_CTRLB_Msk);
    2a24:	69e2      	ldr	r2, [r4, #28]
    2a26:	0752      	lsls	r2, r2, #29
    2a28:	d4fc      	bmi.n	2a24 <uart_init+0x2c>
    if (!uart_set_baud(sercom, baud)) return false;
    2a2a:	0029      	movs	r1, r5
    2a2c:	0020      	movs	r0, r4
    2a2e:	4b08      	ldr	r3, [pc, #32]	; (2a50 <uart_init+0x58>)
    2a30:	4798      	blx	r3
    2a32:	2800      	cmp	r0, #0
    2a34:	d006      	beq.n	2a44 <uart_init+0x4c>
    sercom->USART_INT.SERCOM_CTRLA |= SERCOM_USART_INT_CTRLA_ENABLE(1);
    2a36:	6823      	ldr	r3, [r4, #0]
    2a38:	2202      	movs	r2, #2
    2a3a:	4313      	orrs	r3, r2
    2a3c:	6023      	str	r3, [r4, #0]
    while (sercom->USART_INT.SERCOM_SYNCBUSY & SERCOM_USART_INT_SYNCBUSY_ENABLE_Msk);
    2a3e:	69e3      	ldr	r3, [r4, #28]
    2a40:	079b      	lsls	r3, r3, #30
    2a42:	d4fc      	bmi.n	2a3e <uart_init+0x46>
}
    2a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	0000262d 	.word	0x0000262d
    2a4c:	40000004 	.word	0x40000004
    2a50:	00002991 	.word	0x00002991

00002a54 <uart_set_interrupt>:

bool uart_set_interrupt(sercom_registers_t* sercom, void (*callback)(void)) {
    2a54:	b570      	push	{r4, r5, r6, lr}
    2a56:	0004      	movs	r4, r0
    2a58:	000d      	movs	r5, r1
    if (!sercom_check(sercom)) return false;
    2a5a:	4b17      	ldr	r3, [pc, #92]	; (2ab8 <uart_set_interrupt+0x64>)
    2a5c:	4798      	blx	r3
    2a5e:	2800      	cmp	r0, #0
    2a60:	d022      	beq.n	2aa8 <uart_set_interrupt+0x54>
    
    sercom->USART_INT.SERCOM_INTENSET = SERCOM_USART_INT_INTFLAG_RXC(1);
    2a62:	2304      	movs	r3, #4
    2a64:	75a3      	strb	r3, [r4, #22]

    switch ((uint32_t)sercom) {
    2a66:	4b15      	ldr	r3, [pc, #84]	; (2abc <uart_set_interrupt+0x68>)
    2a68:	429c      	cmp	r4, r3
    2a6a:	d01e      	beq.n	2aaa <uart_set_interrupt+0x56>
    2a6c:	d80c      	bhi.n	2a88 <uart_set_interrupt+0x34>
    2a6e:	4b14      	ldr	r3, [pc, #80]	; (2ac0 <uart_set_interrupt+0x6c>)
    2a70:	429c      	cmp	r4, r3
    2a72:	d013      	beq.n	2a9c <uart_set_interrupt+0x48>
    2a74:	4b13      	ldr	r3, [pc, #76]	; (2ac4 <uart_set_interrupt+0x70>)
    2a76:	429c      	cmp	r4, r3
    2a78:	d116      	bne.n	2aa8 <uart_set_interrupt+0x54>
        sercom0_callback = callback;
        NVIC_EnableIRQ(SERCOM0_IRQn);
        break;

        case (uint32_t)SERCOM1_REGS:
        sercom1_callback = callback;
    2a7a:	4b13      	ldr	r3, [pc, #76]	; (2ac8 <uart_set_interrupt+0x74>)
    2a7c:	605d      	str	r5, [r3, #4]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a7e:	4b13      	ldr	r3, [pc, #76]	; (2acc <uart_set_interrupt+0x78>)
    2a80:	2280      	movs	r2, #128	; 0x80
    2a82:	00d2      	lsls	r2, r2, #3
    2a84:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
    2a86:	e00f      	b.n	2aa8 <uart_set_interrupt+0x54>
    switch ((uint32_t)sercom) {
    2a88:	4b11      	ldr	r3, [pc, #68]	; (2ad0 <uart_set_interrupt+0x7c>)
    2a8a:	429c      	cmp	r4, r3
    2a8c:	d10c      	bne.n	2aa8 <uart_set_interrupt+0x54>
        sercom4_callback = callback;
        NVIC_EnableIRQ(SERCOM4_IRQn);
        break;

        case (uint32_t)SERCOM5_REGS:
        sercom5_callback = callback;
    2a8e:	4b0e      	ldr	r3, [pc, #56]	; (2ac8 <uart_set_interrupt+0x74>)
    2a90:	60dd      	str	r5, [r3, #12]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a92:	4b0e      	ldr	r3, [pc, #56]	; (2acc <uart_set_interrupt+0x78>)
    2a94:	2280      	movs	r2, #128	; 0x80
    2a96:	01d2      	lsls	r2, r2, #7
    2a98:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(SERCOM5_IRQn);
        break;
    }
}
    2a9a:	e005      	b.n	2aa8 <uart_set_interrupt+0x54>
        sercom0_callback = callback;
    2a9c:	4b0a      	ldr	r3, [pc, #40]	; (2ac8 <uart_set_interrupt+0x74>)
    2a9e:	601d      	str	r5, [r3, #0]
    2aa0:	4b0a      	ldr	r3, [pc, #40]	; (2acc <uart_set_interrupt+0x78>)
    2aa2:	2280      	movs	r2, #128	; 0x80
    2aa4:	0092      	lsls	r2, r2, #2
    2aa6:	601a      	str	r2, [r3, #0]
}
    2aa8:	bd70      	pop	{r4, r5, r6, pc}
        sercom4_callback = callback;
    2aaa:	4b07      	ldr	r3, [pc, #28]	; (2ac8 <uart_set_interrupt+0x74>)
    2aac:	609d      	str	r5, [r3, #8]
    2aae:	4b07      	ldr	r3, [pc, #28]	; (2acc <uart_set_interrupt+0x78>)
    2ab0:	2280      	movs	r2, #128	; 0x80
    2ab2:	0192      	lsls	r2, r2, #6
    2ab4:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
    2ab6:	e7f7      	b.n	2aa8 <uart_set_interrupt+0x54>
    2ab8:	000025cd 	.word	0x000025cd
    2abc:	42001800 	.word	0x42001800
    2ac0:	42000800 	.word	0x42000800
    2ac4:	42000c00 	.word	0x42000c00
    2ac8:	200005d8 	.word	0x200005d8
    2acc:	e000e100 	.word	0xe000e100
    2ad0:	42001c00 	.word	0x42001c00

00002ad4 <uart_flush>:

void uart_flush(sercom_registers_t* sercom) {
    while (sercom->USART_INT.SERCOM_INTFLAG & SERCOM_USART_INT_INTFLAG_RXC_Msk) sercom->USART_INT.SERCOM_DATA;
    2ad4:	e000      	b.n	2ad8 <uart_flush+0x4>
    2ad6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2ad8:	7e03      	ldrb	r3, [r0, #24]
    2ada:	075b      	lsls	r3, r3, #29
    2adc:	d4fb      	bmi.n	2ad6 <uart_flush+0x2>
}
    2ade:	4770      	bx	lr

00002ae0 <SERCOM0_Handler>:
        buffer[i] = (uint8_t)(sercom->USART_INT.SERCOM_DATA);
    }
    return i;
}

void SERCOM0_Handler() {
    2ae0:	b510      	push	{r4, lr}
    sercom0_callback();
    2ae2:	4b04      	ldr	r3, [pc, #16]	; (2af4 <SERCOM0_Handler+0x14>)
    2ae4:	681b      	ldr	r3, [r3, #0]
    2ae6:	4798      	blx	r3
    SERCOM0_REGS->USART_INT.SERCOM_INTFLAG = SERCOM0_REGS->USART_INT.SERCOM_INTFLAG;
    2ae8:	4a03      	ldr	r2, [pc, #12]	; (2af8 <SERCOM0_Handler+0x18>)
    2aea:	7e13      	ldrb	r3, [r2, #24]
    2aec:	b2db      	uxtb	r3, r3
    2aee:	7613      	strb	r3, [r2, #24]
}
    2af0:	bd10      	pop	{r4, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	200005d8 	.word	0x200005d8
    2af8:	42000800 	.word	0x42000800

00002afc <SERCOM1_Handler>:

void SERCOM1_Handler() {
    2afc:	b510      	push	{r4, lr}
    sercom1_callback();
    2afe:	4b04      	ldr	r3, [pc, #16]	; (2b10 <SERCOM1_Handler+0x14>)
    2b00:	685b      	ldr	r3, [r3, #4]
    2b02:	4798      	blx	r3
    SERCOM1_REGS->USART_INT.SERCOM_INTFLAG = SERCOM1_REGS->USART_INT.SERCOM_INTFLAG;
    2b04:	4a03      	ldr	r2, [pc, #12]	; (2b14 <SERCOM1_Handler+0x18>)
    2b06:	7e13      	ldrb	r3, [r2, #24]
    2b08:	b2db      	uxtb	r3, r3
    2b0a:	7613      	strb	r3, [r2, #24]
}
    2b0c:	bd10      	pop	{r4, pc}
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	200005d8 	.word	0x200005d8
    2b14:	42000c00 	.word	0x42000c00

00002b18 <SERCOM4_Handler>:

void SERCOM4_Handler() {
    2b18:	b510      	push	{r4, lr}
    sercom4_callback();
    2b1a:	4b04      	ldr	r3, [pc, #16]	; (2b2c <SERCOM4_Handler+0x14>)
    2b1c:	689b      	ldr	r3, [r3, #8]
    2b1e:	4798      	blx	r3
    SERCOM4_REGS->USART_INT.SERCOM_INTFLAG = SERCOM4_REGS->USART_INT.SERCOM_INTFLAG;
    2b20:	4a03      	ldr	r2, [pc, #12]	; (2b30 <SERCOM4_Handler+0x18>)
    2b22:	7e13      	ldrb	r3, [r2, #24]
    2b24:	b2db      	uxtb	r3, r3
    2b26:	7613      	strb	r3, [r2, #24]
}
    2b28:	bd10      	pop	{r4, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	200005d8 	.word	0x200005d8
    2b30:	42001800 	.word	0x42001800

00002b34 <SERCOM5_Handler>:

void SERCOM5_Handler() {
    2b34:	b510      	push	{r4, lr}
    sercom5_callback();
    2b36:	4b04      	ldr	r3, [pc, #16]	; (2b48 <SERCOM5_Handler+0x14>)
    2b38:	68db      	ldr	r3, [r3, #12]
    2b3a:	4798      	blx	r3
    SERCOM5_REGS->USART_INT.SERCOM_INTFLAG = SERCOM5_REGS->USART_INT.SERCOM_INTFLAG;
    2b3c:	4a03      	ldr	r2, [pc, #12]	; (2b4c <SERCOM5_Handler+0x18>)
    2b3e:	7e13      	ldrb	r3, [r2, #24]
    2b40:	b2db      	uxtb	r3, r3
    2b42:	7613      	strb	r3, [r2, #24]
    2b44:	bd10      	pop	{r4, pc}
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	200005d8 	.word	0x200005d8
    2b4c:	42001c00 	.word	0x42001c00

00002b50 <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
    2b50:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    2b52:	4b10      	ldr	r3, [pc, #64]	; (2b94 <usb_ep0_in_multi+0x44>)
    2b54:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    2b56:	2c40      	cmp	r4, #64	; 0x40
    2b58:	d900      	bls.n	2b5c <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    2b5a:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    2b5c:	0026      	movs	r6, r4
    2b5e:	4b0d      	ldr	r3, [pc, #52]	; (2b94 <usb_ep0_in_multi+0x44>)
    2b60:	1d1d      	adds	r5, r3, #4
    2b62:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2b64:	0022      	movs	r2, r4
    2b66:	0028      	movs	r0, r5
    2b68:	4b0b      	ldr	r3, [pc, #44]	; (2b98 <usb_ep0_in_multi+0x48>)
    2b6a:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    2b6c:	2300      	movs	r3, #0
    2b6e:	0022      	movs	r2, r4
    2b70:	0029      	movs	r1, r5
    2b72:	2080      	movs	r0, #128	; 0x80
    2b74:	4d09      	ldr	r5, [pc, #36]	; (2b9c <usb_ep0_in_multi+0x4c>)
    2b76:	47a8      	blx	r5

	if (tsize == 0) {
    2b78:	2c00      	cmp	r4, #0
    2b7a:	d007      	beq.n	2b8c <usb_ep0_in_multi+0x3c>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    2b7c:	4b05      	ldr	r3, [pc, #20]	; (2b94 <usb_ep0_in_multi+0x44>)
    2b7e:	881a      	ldrh	r2, [r3, #0]
    2b80:	1b12      	subs	r2, r2, r4
    2b82:	801a      	strh	r2, [r3, #0]
	usb_ep0_in_ptr += tsize;
    2b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2b86:	1992      	adds	r2, r2, r6
    2b88:	645a      	str	r2, [r3, #68]	; 0x44
}
    2b8a:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    2b8c:	4b04      	ldr	r3, [pc, #16]	; (2ba0 <usb_ep0_in_multi+0x50>)
    2b8e:	4798      	blx	r3
    2b90:	e7f4      	b.n	2b7c <usb_ep0_in_multi+0x2c>
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	200005e8 	.word	0x200005e8
    2b98:	00005b49 	.word	0x00005b49
    2b9c:	00003061 	.word	0x00003061
    2ba0:	00003169 	.word	0x00003169

00002ba4 <usb_handle_setup>:

void usb_handle_setup(void){
    2ba4:	b510      	push	{r4, lr}
    2ba6:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    2ba8:	4b40      	ldr	r3, [pc, #256]	; (2cac <usb_handle_setup+0x108>)
    2baa:	2248      	movs	r2, #72	; 0x48
    2bac:	5c9b      	ldrb	r3, [r3, r2]
    2bae:	3218      	adds	r2, #24
    2bb0:	421a      	tst	r2, r3
    2bb2:	d177      	bne.n	2ca4 <usb_handle_setup+0x100>
		switch (usb_setup.bRequest){
    2bb4:	4b3e      	ldr	r3, [pc, #248]	; (2cb0 <usb_handle_setup+0x10c>)
    2bb6:	785b      	ldrb	r3, [r3, #1]
    2bb8:	2b0b      	cmp	r3, #11
    2bba:	d870      	bhi.n	2c9e <usb_handle_setup+0xfa>
    2bbc:	009b      	lsls	r3, r3, #2
    2bbe:	4a3d      	ldr	r2, [pc, #244]	; (2cb4 <usb_handle_setup+0x110>)
    2bc0:	58d3      	ldr	r3, [r2, r3]
    2bc2:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    2bc4:	4b39      	ldr	r3, [pc, #228]	; (2cac <usb_handle_setup+0x108>)
    2bc6:	2200      	movs	r2, #0
    2bc8:	711a      	strb	r2, [r3, #4]
				ep0_buf_in[1] = 0;
    2bca:	715a      	strb	r2, [r3, #5]
				usb_ep0_in(2);
    2bcc:	2002      	movs	r0, #2
    2bce:	4b3a      	ldr	r3, [pc, #232]	; (2cb8 <usb_handle_setup+0x114>)
    2bd0:	4798      	blx	r3
				return usb_ep0_out();
    2bd2:	4b3a      	ldr	r3, [pc, #232]	; (2cbc <usb_handle_setup+0x118>)
    2bd4:	4798      	blx	r3
    2bd6:	e067      	b.n	2ca8 <usb_handle_setup+0x104>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    2bd8:	2000      	movs	r0, #0
    2bda:	4b37      	ldr	r3, [pc, #220]	; (2cb8 <usb_handle_setup+0x114>)
    2bdc:	4798      	blx	r3
				return usb_ep0_out();
    2bde:	4b37      	ldr	r3, [pc, #220]	; (2cbc <usb_handle_setup+0x118>)
    2be0:	4798      	blx	r3
    2be2:	e061      	b.n	2ca8 <usb_handle_setup+0x104>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    2be4:	2000      	movs	r0, #0
    2be6:	4b34      	ldr	r3, [pc, #208]	; (2cb8 <usb_handle_setup+0x114>)
    2be8:	4798      	blx	r3
				return usb_ep0_out();
    2bea:	4b34      	ldr	r3, [pc, #208]	; (2cbc <usb_handle_setup+0x118>)
    2bec:	4798      	blx	r3
    2bee:	e05b      	b.n	2ca8 <usb_handle_setup+0x104>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    2bf0:	4b2f      	ldr	r3, [pc, #188]	; (2cb0 <usb_handle_setup+0x10c>)
    2bf2:	8859      	ldrh	r1, [r3, #2]
    2bf4:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    2bf6:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    2bf8:	2300      	movs	r3, #0
    2bfa:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2bfc:	aa01      	add	r2, sp, #4
    2bfe:	4b30      	ldr	r3, [pc, #192]	; (2cc0 <usb_handle_setup+0x11c>)
    2c00:	4798      	blx	r3

				if (size && descriptor){
    2c02:	2800      	cmp	r0, #0
    2c04:	d019      	beq.n	2c3a <usb_handle_setup+0x96>
    2c06:	9901      	ldr	r1, [sp, #4]
    2c08:	2900      	cmp	r1, #0
    2c0a:	d016      	beq.n	2c3a <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    2c0c:	4a28      	ldr	r2, [pc, #160]	; (2cb0 <usb_handle_setup+0x10c>)
    2c0e:	88d2      	ldrh	r2, [r2, #6]
    2c10:	4282      	cmp	r2, r0
    2c12:	d300      	bcc.n	2c16 <usb_handle_setup+0x72>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    2c14:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
    2c16:	4b2b      	ldr	r3, [pc, #172]	; (2cc4 <usb_handle_setup+0x120>)
    2c18:	4299      	cmp	r1, r3
    2c1a:	d005      	beq.n	2c28 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    2c1c:	4b23      	ldr	r3, [pc, #140]	; (2cac <usb_handle_setup+0x108>)
    2c1e:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    2c20:	6459      	str	r1, [r3, #68]	; 0x44
						usb_ep0_in_multi();
    2c22:	4b29      	ldr	r3, [pc, #164]	; (2cc8 <usb_handle_setup+0x124>)
    2c24:	4798      	blx	r3
					}

					return;
    2c26:	e03f      	b.n	2ca8 <usb_handle_setup+0x104>
						usb_ep0_in_size = 0;
    2c28:	4920      	ldr	r1, [pc, #128]	; (2cac <usb_handle_setup+0x108>)
    2c2a:	2300      	movs	r3, #0
    2c2c:	800b      	strh	r3, [r1, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    2c2e:	3104      	adds	r1, #4
    2c30:	3301      	adds	r3, #1
    2c32:	2080      	movs	r0, #128	; 0x80
    2c34:	4c25      	ldr	r4, [pc, #148]	; (2ccc <usb_handle_setup+0x128>)
    2c36:	47a0      	blx	r4
    2c38:	e036      	b.n	2ca8 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2c3a:	4b25      	ldr	r3, [pc, #148]	; (2cd0 <usb_handle_setup+0x12c>)
    2c3c:	4798      	blx	r3
    2c3e:	e033      	b.n	2ca8 <usb_handle_setup+0x104>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    2c40:	4b1a      	ldr	r3, [pc, #104]	; (2cac <usb_handle_setup+0x108>)
    2c42:	2250      	movs	r2, #80	; 0x50
    2c44:	5c9a      	ldrb	r2, [r3, r2]
    2c46:	711a      	strb	r2, [r3, #4]
				usb_ep0_in(1);
    2c48:	2001      	movs	r0, #1
    2c4a:	4b1b      	ldr	r3, [pc, #108]	; (2cb8 <usb_handle_setup+0x114>)
    2c4c:	4798      	blx	r3
				return usb_ep0_out();
    2c4e:	4b1b      	ldr	r3, [pc, #108]	; (2cbc <usb_handle_setup+0x118>)
    2c50:	4798      	blx	r3
    2c52:	e029      	b.n	2ca8 <usb_handle_setup+0x104>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    2c54:	4b16      	ldr	r3, [pc, #88]	; (2cb0 <usb_handle_setup+0x10c>)
    2c56:	7898      	ldrb	r0, [r3, #2]
    2c58:	4b1e      	ldr	r3, [pc, #120]	; (2cd4 <usb_handle_setup+0x130>)
    2c5a:	4798      	blx	r3
    2c5c:	2800      	cmp	r0, #0
    2c5e:	d00b      	beq.n	2c78 <usb_handle_setup+0xd4>
					usb_ep0_in(0);
    2c60:	2000      	movs	r0, #0
    2c62:	4b15      	ldr	r3, [pc, #84]	; (2cb8 <usb_handle_setup+0x114>)
    2c64:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    2c66:	4b11      	ldr	r3, [pc, #68]	; (2cac <usb_handle_setup+0x108>)
    2c68:	001a      	movs	r2, r3
    2c6a:	3248      	adds	r2, #72	; 0x48
    2c6c:	7891      	ldrb	r1, [r2, #2]
    2c6e:	2250      	movs	r2, #80	; 0x50
    2c70:	5499      	strb	r1, [r3, r2]
					return usb_ep0_out();
    2c72:	4b12      	ldr	r3, [pc, #72]	; (2cbc <usb_handle_setup+0x118>)
    2c74:	4798      	blx	r3
    2c76:	e017      	b.n	2ca8 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2c78:	4b15      	ldr	r3, [pc, #84]	; (2cd0 <usb_handle_setup+0x12c>)
    2c7a:	4798      	blx	r3
    2c7c:	e014      	b.n	2ca8 <usb_handle_setup+0x104>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    2c7e:	4b0c      	ldr	r3, [pc, #48]	; (2cb0 <usb_handle_setup+0x10c>)
    2c80:	8859      	ldrh	r1, [r3, #2]
    2c82:	8898      	ldrh	r0, [r3, #4]
    2c84:	4b14      	ldr	r3, [pc, #80]	; (2cd8 <usb_handle_setup+0x134>)
    2c86:	4798      	blx	r3
    2c88:	2800      	cmp	r0, #0
    2c8a:	d005      	beq.n	2c98 <usb_handle_setup+0xf4>
					usb_ep0_in(0);
    2c8c:	2000      	movs	r0, #0
    2c8e:	4b0a      	ldr	r3, [pc, #40]	; (2cb8 <usb_handle_setup+0x114>)
    2c90:	4798      	blx	r3
					return usb_ep0_out();
    2c92:	4b0a      	ldr	r3, [pc, #40]	; (2cbc <usb_handle_setup+0x118>)
    2c94:	4798      	blx	r3
    2c96:	e007      	b.n	2ca8 <usb_handle_setup+0x104>
				} else {
					return usb_ep0_stall();
    2c98:	4b0d      	ldr	r3, [pc, #52]	; (2cd0 <usb_handle_setup+0x12c>)
    2c9a:	4798      	blx	r3
    2c9c:	e004      	b.n	2ca8 <usb_handle_setup+0x104>
				}

			default:
				return usb_ep0_stall();
    2c9e:	4b0c      	ldr	r3, [pc, #48]	; (2cd0 <usb_handle_setup+0x12c>)
    2ca0:	4798      	blx	r3
    2ca2:	e001      	b.n	2ca8 <usb_handle_setup+0x104>
		}
	}

	usb_cb_control_setup();
    2ca4:	4b0d      	ldr	r3, [pc, #52]	; (2cdc <usb_handle_setup+0x138>)
    2ca6:	4798      	blx	r3
}
    2ca8:	b002      	add	sp, #8
    2caa:	bd10      	pop	{r4, pc}
    2cac:	200005e8 	.word	0x200005e8
    2cb0:	20000630 	.word	0x20000630
    2cb4:	000062a8 	.word	0x000062a8
    2cb8:	00003181 	.word	0x00003181
    2cbc:	00003169 	.word	0x00003169
    2cc0:	00003501 	.word	0x00003501
    2cc4:	200005ec 	.word	0x200005ec
    2cc8:	00002b51 	.word	0x00002b51
    2ccc:	00003061 	.word	0x00003061
    2cd0:	00003199 	.word	0x00003199
    2cd4:	000034c5 	.word	0x000034c5
    2cd8:	000034dd 	.word	0x000034dd
    2cdc:	000033b5 	.word	0x000033b5

00002ce0 <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    2ce0:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    2ce2:	4b05      	ldr	r3, [pc, #20]	; (2cf8 <usb_handle_control_out_complete+0x18>)
    2ce4:	2248      	movs	r2, #72	; 0x48
    2ce6:	5c9b      	ldrb	r3, [r3, r2]
    2ce8:	3218      	adds	r2, #24
    2cea:	421a      	tst	r2, r3
    2cec:	d100      	bne.n	2cf0 <usb_handle_control_out_complete+0x10>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
	}
}
    2cee:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    2cf0:	4b02      	ldr	r3, [pc, #8]	; (2cfc <usb_handle_control_out_complete+0x1c>)
    2cf2:	4798      	blx	r3
}
    2cf4:	e7fb      	b.n	2cee <usb_handle_control_out_complete+0xe>
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	200005e8 	.word	0x200005e8
    2cfc:	000034c3 	.word	0x000034c3

00002d00 <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    2d00:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    2d02:	4b0d      	ldr	r3, [pc, #52]	; (2d38 <usb_handle_control_in_complete+0x38>)
    2d04:	2248      	movs	r2, #72	; 0x48
    2d06:	5c9b      	ldrb	r3, [r3, r2]
    2d08:	3218      	adds	r2, #24
    2d0a:	421a      	tst	r2, r3
    2d0c:	d110      	bne.n	2d30 <usb_handle_control_in_complete+0x30>
		switch (usb_setup.bRequest){
    2d0e:	4b0b      	ldr	r3, [pc, #44]	; (2d3c <usb_handle_control_in_complete+0x3c>)
    2d10:	785b      	ldrb	r3, [r3, #1]
    2d12:	2b05      	cmp	r3, #5
    2d14:	d002      	beq.n	2d1c <usb_handle_control_in_complete+0x1c>
    2d16:	2b06      	cmp	r3, #6
    2d18:	d007      	beq.n	2d2a <usb_handle_control_in_complete+0x2a>
				return;
		}
	} else {
		usb_cb_control_in_completion();
	}
}
    2d1a:	bd10      	pop	{r4, pc}
				usb_set_address(usb_setup.wValue & 0x7F);
    2d1c:	4b07      	ldr	r3, [pc, #28]	; (2d3c <usb_handle_control_in_complete+0x3c>)
    2d1e:	789b      	ldrb	r3, [r3, #2]
    2d20:	207f      	movs	r0, #127	; 0x7f
    2d22:	4018      	ands	r0, r3
    2d24:	4b06      	ldr	r3, [pc, #24]	; (2d40 <usb_handle_control_in_complete+0x40>)
    2d26:	4798      	blx	r3
				return;
    2d28:	e7f7      	b.n	2d1a <usb_handle_control_in_complete+0x1a>
				usb_ep0_in_multi();
    2d2a:	4b06      	ldr	r3, [pc, #24]	; (2d44 <usb_handle_control_in_complete+0x44>)
    2d2c:	4798      	blx	r3
				return;
    2d2e:	e7f4      	b.n	2d1a <usb_handle_control_in_complete+0x1a>
		usb_cb_control_in_completion();
    2d30:	4b05      	ldr	r3, [pc, #20]	; (2d48 <usb_handle_control_in_complete+0x48>)
    2d32:	4798      	blx	r3
    2d34:	e7f1      	b.n	2d1a <usb_handle_control_in_complete+0x1a>
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	200005e8 	.word	0x200005e8
    2d3c:	20000630 	.word	0x20000630
    2d40:	00002ead 	.word	0x00002ead
    2d44:	00002b51 	.word	0x00002b51
    2d48:	000034c1 	.word	0x000034c1

00002d4c <usb_string_to_descriptor>:
	} else {
		return usb_ep0_stall();
	}
}

void* usb_string_to_descriptor(char* str) {
    2d4c:	b570      	push	{r4, r5, r6, lr}
    2d4e:	0006      	movs	r6, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    2d50:	4b0b      	ldr	r3, [pc, #44]	; (2d80 <usb_string_to_descriptor+0x34>)
    2d52:	4798      	blx	r3
    2d54:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE - 2)/2;
	if (len > maxlen) len = maxlen;
    2d56:	281f      	cmp	r0, #31
    2d58:	d900      	bls.n	2d5c <usb_string_to_descriptor+0x10>
    2d5a:	201f      	movs	r0, #31
	desc->bLength = USB_STRING_LEN(len);
    2d5c:	1c43      	adds	r3, r0, #1
    2d5e:	005b      	lsls	r3, r3, #1
    2d60:	4a08      	ldr	r2, [pc, #32]	; (2d84 <usb_string_to_descriptor+0x38>)
    2d62:	7113      	strb	r3, [r2, #4]
	desc->bDescriptorType = USB_DTYPE_String;
    2d64:	2303      	movs	r3, #3
    2d66:	7153      	strb	r3, [r2, #5]
	for (int i=0; i<len; i++) {
    2d68:	2200      	movs	r2, #0
    2d6a:	e005      	b.n	2d78 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    2d6c:	5cb1      	ldrb	r1, [r6, r2]
    2d6e:	4b05      	ldr	r3, [pc, #20]	; (2d84 <usb_string_to_descriptor+0x38>)
    2d70:	0054      	lsls	r4, r2, #1
    2d72:	191b      	adds	r3, r3, r4
    2d74:	80d9      	strh	r1, [r3, #6]
	for (int i=0; i<len; i++) {
    2d76:	3201      	adds	r2, #1
    2d78:	4290      	cmp	r0, r2
    2d7a:	dcf7      	bgt.n	2d6c <usb_string_to_descriptor+0x20>
	}
	return desc;
    2d7c:	4802      	ldr	r0, [pc, #8]	; (2d88 <usb_string_to_descriptor+0x3c>)
}
    2d7e:	bd70      	pop	{r4, r5, r6, pc}
    2d80:	00005bd9 	.word	0x00005bd9
    2d84:	200005e8 	.word	0x200005e8
    2d88:	200005ec 	.word	0x200005ec

00002d8c <usb_reset>:
#define USB_EPTYPE_BULK 3
#define USB_EPTYPE_INTERRUPT 4
#define USB_EPTYPE_DUAL_BANK 5

void usb_reset(){
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) &ep0_buf_out;
    2d8c:	4a12      	ldr	r2, [pc, #72]	; (2dd8 <usb_reset+0x4c>)
    2d8e:	4b13      	ldr	r3, [pc, #76]	; (2ddc <usb_reset+0x50>)
    2d90:	601a      	str	r2, [r3, #0]
	// usb_endpoints[0].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2d92:	685a      	ldr	r2, [r3, #4]
    2d94:	4812      	ldr	r0, [pc, #72]	; (2de0 <usb_reset+0x54>)
    2d96:	4002      	ands	r2, r0
    2d98:	605a      	str	r2, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    2d9a:	6859      	ldr	r1, [r3, #4]
    2d9c:	22c0      	movs	r2, #192	; 0xc0
    2d9e:	0592      	lsls	r2, r2, #22
    2da0:	4311      	orrs	r1, r2
    2da2:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) &ep0_buf_in;
    2da4:	490f      	ldr	r1, [pc, #60]	; (2de4 <usb_reset+0x58>)
    2da6:	6119      	str	r1, [r3, #16]
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
	// usb_endpoints[0].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = 1;
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2da8:	6959      	ldr	r1, [r3, #20]
    2daa:	4001      	ands	r1, r0
    2dac:	6159      	str	r1, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(USB_EP0_SIZE));
    2dae:	6959      	ldr	r1, [r3, #20]
    2db0:	430a      	orrs	r2, r1
    2db2:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    2db4:	695a      	ldr	r2, [r3, #20]
    2db6:	0052      	lsls	r2, r2, #1
    2db8:	0852      	lsrs	r2, r2, #1
    2dba:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(1);
    2dbc:	6959      	ldr	r1, [r3, #20]
    2dbe:	2280      	movs	r2, #128	; 0x80
    2dc0:	0612      	lsls	r2, r2, #24
    2dc2:	430a      	orrs	r2, r1
    2dc4:	615a      	str	r2, [r3, #20]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTENSET = USB_DEVICE_EPINTENSET_RXSTP(1);
    2dc6:	4b08      	ldr	r3, [pc, #32]	; (2de8 <usb_reset+0x5c>)
    2dc8:	220a      	movs	r2, #10
    2dca:	32ff      	adds	r2, #255	; 0xff
    2dcc:	2110      	movs	r1, #16
    2dce:	5499      	strb	r1, [r3, r2]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPCFG = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    2dd0:	3a09      	subs	r2, #9
    2dd2:	3101      	adds	r1, #1
    2dd4:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    2dd6:	4770      	bx	lr
    2dd8:	2000063c 	.word	0x2000063c
    2ddc:	200006c8 	.word	0x200006c8
    2de0:	8fffffff 	.word	0x8fffffff
    2de4:	200005ec 	.word	0x200005ec
    2de8:	41005000 	.word	0x41005000

00002dec <usb_init>:
void usb_init(){
    2dec:	b570      	push	{r4, r5, r6, lr}
	PM_REGS->PM_APBBMASK |= PM_APBBMASK_USB(1);
    2dee:	4a26      	ldr	r2, [pc, #152]	; (2e88 <usb_init+0x9c>)
    2df0:	69d3      	ldr	r3, [r2, #28]
    2df2:	2120      	movs	r1, #32
    2df4:	430b      	orrs	r3, r1
    2df6:	61d3      	str	r3, [r2, #28]
	GCLK_REGS->GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN(1) |
    2df8:	4b24      	ldr	r3, [pc, #144]	; (2e8c <usb_init+0xa0>)
    2dfa:	4a25      	ldr	r2, [pc, #148]	; (2e90 <usb_init+0xa4>)
    2dfc:	805a      	strh	r2, [r3, #2]
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_SWRST(1);
    2dfe:	4b25      	ldr	r3, [pc, #148]	; (2e94 <usb_init+0xa8>)
    2e00:	2201      	movs	r2, #1
    2e02:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_SWRST_Msk);
    2e04:	4b23      	ldr	r3, [pc, #140]	; (2e94 <usb_init+0xa8>)
    2e06:	789b      	ldrb	r3, [r3, #2]
    2e08:	07db      	lsls	r3, r3, #31
    2e0a:	d4fb      	bmi.n	2e04 <usb_init+0x18>
	USB_REGS->DEVICE.USB_CTRLA = USB_CTRLA_ENABLE(1) | USB_CTRLA_MODE_DEVICE;
    2e0c:	4b21      	ldr	r3, [pc, #132]	; (2e94 <usb_init+0xa8>)
    2e0e:	2202      	movs	r2, #2
    2e10:	701a      	strb	r2, [r3, #0]
	while (USB_REGS->DEVICE.USB_SYNCBUSY & USB_SYNCBUSY_ENABLE_Msk);
    2e12:	4b20      	ldr	r3, [pc, #128]	; (2e94 <usb_init+0xa8>)
    2e14:	789b      	ldrb	r3, [r3, #2]
    2e16:	079b      	lsls	r3, r3, #30
    2e18:	d4fb      	bmi.n	2e12 <usb_init+0x26>
	pad_transn = FUSES_OTP4_WORD_1_USB_TRANSN(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2e1a:	4b1f      	ldr	r3, [pc, #124]	; (2e98 <usb_init+0xac>)
    2e1c:	685b      	ldr	r3, [r3, #4]
    2e1e:	035b      	lsls	r3, r3, #13
    2e20:	22f8      	movs	r2, #248	; 0xf8
    2e22:	0292      	lsls	r2, r2, #10
    2e24:	4013      	ands	r3, r2
	if (pad_transn == 0x1F) {
    2e26:	2b1f      	cmp	r3, #31
    2e28:	d028      	beq.n	2e7c <usb_init+0x90>
	pad_transp = FUSES_OTP4_WORD_1_USB_TRANSP(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2e2a:	4a1b      	ldr	r2, [pc, #108]	; (2e98 <usb_init+0xac>)
    2e2c:	6851      	ldr	r1, [r2, #4]
    2e2e:	0489      	lsls	r1, r1, #18
    2e30:	22f8      	movs	r2, #248	; 0xf8
    2e32:	03d2      	lsls	r2, r2, #15
    2e34:	4011      	ands	r1, r2
	if (pad_transp == 0x1F) {
    2e36:	291f      	cmp	r1, #31
    2e38:	d022      	beq.n	2e80 <usb_init+0x94>
	pad_trim = FUSES_OTP4_WORD_1_USB_TRIM(OTP4_FUSES_REGS->FUSES_OTP4_WORD_1);
    2e3a:	4a17      	ldr	r2, [pc, #92]	; (2e98 <usb_init+0xac>)
    2e3c:	6852      	ldr	r2, [r2, #4]
    2e3e:	05d2      	lsls	r2, r2, #23
    2e40:	20e0      	movs	r0, #224	; 0xe0
    2e42:	0480      	lsls	r0, r0, #18
    2e44:	4002      	ands	r2, r0
	if (pad_trim == 0x7) {
    2e46:	2a07      	cmp	r2, #7
    2e48:	d01c      	beq.n	2e84 <usb_init+0x98>
	USB_REGS->DEVICE.USB_PADCAL = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2e4a:	019b      	lsls	r3, r3, #6
    2e4c:	20f8      	movs	r0, #248	; 0xf8
    2e4e:	00c0      	lsls	r0, r0, #3
    2e50:	4003      	ands	r3, r0
    2e52:	201f      	movs	r0, #31
    2e54:	4001      	ands	r1, r0
    2e56:	430b      	orrs	r3, r1
    2e58:	0312      	lsls	r2, r2, #12
    2e5a:	4313      	orrs	r3, r2
    2e5c:	4d0d      	ldr	r5, [pc, #52]	; (2e94 <usb_init+0xa8>)
    2e5e:	852b      	strh	r3, [r5, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(usb_device_desc_bank_registers_t));
    2e60:	4b0e      	ldr	r3, [pc, #56]	; (2e9c <usb_init+0xb0>)
    2e62:	781a      	ldrb	r2, [r3, #0]
    2e64:	0112      	lsls	r2, r2, #4
    2e66:	4c0e      	ldr	r4, [pc, #56]	; (2ea0 <usb_init+0xb4>)
    2e68:	2100      	movs	r1, #0
    2e6a:	0020      	movs	r0, r4
    2e6c:	4b0d      	ldr	r3, [pc, #52]	; (2ea4 <usb_init+0xb8>)
    2e6e:	4798      	blx	r3
	USB_REGS->DEVICE.USB_DESCADD = (uint32_t)(&usb_endpoints[0]);
    2e70:	626c      	str	r4, [r5, #36]	; 0x24
	USB_REGS->DEVICE.USB_INTENSET = USB_DEVICE_INTENSET_EORST(1);
    2e72:	2308      	movs	r3, #8
    2e74:	832b      	strh	r3, [r5, #24]
	usb_reset();
    2e76:	4b0c      	ldr	r3, [pc, #48]	; (2ea8 <usb_init+0xbc>)
    2e78:	4798      	blx	r3
}
    2e7a:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    2e7c:	3b1a      	subs	r3, #26
    2e7e:	e7d4      	b.n	2e2a <usb_init+0x3e>
		pad_transp = 29;
    2e80:	3902      	subs	r1, #2
    2e82:	e7da      	b.n	2e3a <usb_init+0x4e>
		pad_trim = 3;
    2e84:	3a04      	subs	r2, #4
    2e86:	e7e0      	b.n	2e4a <usb_init+0x5e>
    2e88:	40000400 	.word	0x40000400
    2e8c:	40000c00 	.word	0x40000c00
    2e90:	00004006 	.word	0x00004006
    2e94:	41005000 	.word	0x41005000
    2e98:	00806020 	.word	0x00806020
    2e9c:	0000632a 	.word	0x0000632a
    2ea0:	200006c8 	.word	0x200006c8
    2ea4:	00005a51 	.word	0x00005a51
    2ea8:	00002d8d 	.word	0x00002d8d

00002eac <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB_REGS->DEVICE.USB_DADD = USB_DEVICE_DADD_ADDEN(1) | addr;
    2eac:	2380      	movs	r3, #128	; 0x80
    2eae:	425b      	negs	r3, r3
    2eb0:	4318      	orrs	r0, r3
    2eb2:	b2c0      	uxtb	r0, r0
    2eb4:	4b01      	ldr	r3, [pc, #4]	; (2ebc <usb_set_address+0x10>)
    2eb6:	7298      	strb	r0, [r3, #10]
}
    2eb8:	4770      	bx	lr
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	41005000 	.word	0x41005000

00002ec0 <usb_enable_ep>:

inline usb_device_desc_bank_registers_t* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DEVICE_DESC_BANK[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    2ec0:	b530      	push	{r4, r5, lr}
    2ec2:	0003      	movs	r3, r0
	if (ep & 0x80) {
    2ec4:	b240      	sxtb	r0, r0
    2ec6:	2800      	cmp	r0, #0
    2ec8:	db24      	blt.n	2f14 <usb_enable_ep+0x54>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN(1);
	} else {
		// usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2eca:	203f      	movs	r0, #63	; 0x3f
    2ecc:	4018      	ands	r0, r3
    2ece:	4b49      	ldr	r3, [pc, #292]	; (2ff4 <usb_enable_ep+0x134>)
    2ed0:	0144      	lsls	r4, r0, #5
    2ed2:	191b      	adds	r3, r3, r4
    2ed4:	685c      	ldr	r4, [r3, #4]
    2ed6:	4d48      	ldr	r5, [pc, #288]	; (2ff8 <usb_enable_ep+0x138>)
    2ed8:	402c      	ands	r4, r5
    2eda:	605c      	str	r4, [r3, #4]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2edc:	685b      	ldr	r3, [r3, #4]
    2ede:	2a08      	cmp	r2, #8
    2ee0:	d95f      	bls.n	2fa2 <usb_enable_ep+0xe2>
    2ee2:	2a10      	cmp	r2, #16
    2ee4:	d800      	bhi.n	2ee8 <usb_enable_ep+0x28>
    2ee6:	e072      	b.n	2fce <usb_enable_ep+0x10e>
    2ee8:	2a20      	cmp	r2, #32
    2eea:	d800      	bhi.n	2eee <usb_enable_ep+0x2e>
    2eec:	e072      	b.n	2fd4 <usb_enable_ep+0x114>
    2eee:	2a40      	cmp	r2, #64	; 0x40
    2ef0:	d800      	bhi.n	2ef4 <usb_enable_ep+0x34>
    2ef2:	e072      	b.n	2fda <usb_enable_ep+0x11a>
    2ef4:	2a80      	cmp	r2, #128	; 0x80
    2ef6:	d800      	bhi.n	2efa <usb_enable_ep+0x3a>
    2ef8:	e072      	b.n	2fe0 <usb_enable_ep+0x120>
    2efa:	2480      	movs	r4, #128	; 0x80
    2efc:	0064      	lsls	r4, r4, #1
    2efe:	42a2      	cmp	r2, r4
    2f00:	d800      	bhi.n	2f04 <usb_enable_ep+0x44>
    2f02:	e070      	b.n	2fe6 <usb_enable_ep+0x126>
    2f04:	3401      	adds	r4, #1
    2f06:	34ff      	adds	r4, #255	; 0xff
    2f08:	42a2      	cmp	r2, r4
    2f0a:	d900      	bls.n	2f0e <usb_enable_ep+0x4e>
    2f0c:	e06e      	b.n	2fec <usb_enable_ep+0x12c>
    2f0e:	22c0      	movs	r2, #192	; 0xc0
    2f10:	05d2      	lsls	r2, r2, #23
    2f12:	e047      	b.n	2fa4 <usb_enable_ep+0xe4>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_SIZE_Msk;
    2f14:	203f      	movs	r0, #63	; 0x3f
    2f16:	4003      	ands	r3, r0
    2f18:	4836      	ldr	r0, [pc, #216]	; (2ff4 <usb_enable_ep+0x134>)
    2f1a:	015c      	lsls	r4, r3, #5
    2f1c:	1900      	adds	r0, r0, r4
    2f1e:	6944      	ldr	r4, [r0, #20]
    2f20:	4d35      	ldr	r5, [pc, #212]	; (2ff8 <usb_enable_ep+0x138>)
    2f22:	402c      	ands	r4, r5
    2f24:	6144      	str	r4, [r0, #20]
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2f26:	6940      	ldr	r0, [r0, #20]
    2f28:	2a08      	cmp	r2, #8
    2f2a:	d912      	bls.n	2f52 <usb_enable_ep+0x92>
    2f2c:	2a10      	cmp	r2, #16
    2f2e:	d926      	bls.n	2f7e <usb_enable_ep+0xbe>
    2f30:	2a20      	cmp	r2, #32
    2f32:	d927      	bls.n	2f84 <usb_enable_ep+0xc4>
    2f34:	2a40      	cmp	r2, #64	; 0x40
    2f36:	d928      	bls.n	2f8a <usb_enable_ep+0xca>
    2f38:	2a80      	cmp	r2, #128	; 0x80
    2f3a:	d929      	bls.n	2f90 <usb_enable_ep+0xd0>
    2f3c:	2480      	movs	r4, #128	; 0x80
    2f3e:	0064      	lsls	r4, r4, #1
    2f40:	42a2      	cmp	r2, r4
    2f42:	d928      	bls.n	2f96 <usb_enable_ep+0xd6>
    2f44:	3401      	adds	r4, #1
    2f46:	34ff      	adds	r4, #255	; 0xff
    2f48:	42a2      	cmp	r2, r4
    2f4a:	d827      	bhi.n	2f9c <usb_enable_ep+0xdc>
    2f4c:	22c0      	movs	r2, #192	; 0xc0
    2f4e:	05d2      	lsls	r2, r2, #23
    2f50:	e000      	b.n	2f54 <usb_enable_ep+0x94>
    2f52:	2200      	movs	r2, #0
    2f54:	4310      	orrs	r0, r2
    2f56:	4a27      	ldr	r2, [pc, #156]	; (2ff4 <usb_enable_ep+0x134>)
    2f58:	015c      	lsls	r4, r3, #5
    2f5a:	1912      	adds	r2, r2, r4
    2f5c:	6150      	str	r0, [r2, #20]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE1(type + 1);
    2f5e:	4c27      	ldr	r4, [pc, #156]	; (2ffc <usb_enable_ep+0x13c>)
    2f60:	3308      	adds	r3, #8
    2f62:	015b      	lsls	r3, r3, #5
    2f64:	5d1a      	ldrb	r2, [r3, r4]
    2f66:	3101      	adds	r1, #1
    2f68:	b2c9      	uxtb	r1, r1
    2f6a:	0109      	lsls	r1, r1, #4
    2f6c:	2070      	movs	r0, #112	; 0x70
    2f6e:	4001      	ands	r1, r0
    2f70:	430a      	orrs	r2, r1
    2f72:	551a      	strb	r2, [r3, r4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK1RDY(1)
    2f74:	46a4      	mov	ip, r4
    2f76:	4463      	add	r3, ip
    2f78:	22a2      	movs	r2, #162	; 0xa2
    2f7a:	711a      	strb	r2, [r3, #4]
    2f7c:	e026      	b.n	2fcc <usb_enable_ep+0x10c>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2f7e:	2280      	movs	r2, #128	; 0x80
    2f80:	0552      	lsls	r2, r2, #21
    2f82:	e7e7      	b.n	2f54 <usb_enable_ep+0x94>
    2f84:	2280      	movs	r2, #128	; 0x80
    2f86:	0592      	lsls	r2, r2, #22
    2f88:	e7e4      	b.n	2f54 <usb_enable_ep+0x94>
    2f8a:	22c0      	movs	r2, #192	; 0xc0
    2f8c:	0592      	lsls	r2, r2, #22
    2f8e:	e7e1      	b.n	2f54 <usb_enable_ep+0x94>
    2f90:	2280      	movs	r2, #128	; 0x80
    2f92:	05d2      	lsls	r2, r2, #23
    2f94:	e7de      	b.n	2f54 <usb_enable_ep+0x94>
    2f96:	22a0      	movs	r2, #160	; 0xa0
    2f98:	05d2      	lsls	r2, r2, #23
    2f9a:	e7db      	b.n	2f54 <usb_enable_ep+0x94>
    2f9c:	22e0      	movs	r2, #224	; 0xe0
    2f9e:	05d2      	lsls	r2, r2, #23
    2fa0:	e7d8      	b.n	2f54 <usb_enable_ep+0x94>
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2fa2:	2200      	movs	r2, #0
    2fa4:	431a      	orrs	r2, r3
    2fa6:	4b13      	ldr	r3, [pc, #76]	; (2ff4 <usb_enable_ep+0x134>)
    2fa8:	0144      	lsls	r4, r0, #5
    2faa:	191b      	adds	r3, r3, r4
    2fac:	605a      	str	r2, [r3, #4]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPCFG |= USB_DEVICE_EPCFG_EPTYPE0(type + 1);
    2fae:	4a13      	ldr	r2, [pc, #76]	; (2ffc <usb_enable_ep+0x13c>)
    2fb0:	3008      	adds	r0, #8
    2fb2:	0140      	lsls	r0, r0, #5
    2fb4:	5c83      	ldrb	r3, [r0, r2]
    2fb6:	3101      	adds	r1, #1
    2fb8:	2407      	movs	r4, #7
    2fba:	4021      	ands	r1, r4
    2fbc:	430b      	orrs	r3, r1
    2fbe:	5483      	strb	r3, [r0, r2]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
    2fc0:	4694      	mov	ip, r2
    2fc2:	4460      	add	r0, ip
    2fc4:	2340      	movs	r3, #64	; 0x40
    2fc6:	7143      	strb	r3, [r0, #5]
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    2fc8:	3b2f      	subs	r3, #47	; 0x2f
    2fca:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT(1);
	}
}
    2fcc:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_SIZE(USB_EP_size_to_gc(bufsize));
    2fce:	2280      	movs	r2, #128	; 0x80
    2fd0:	0552      	lsls	r2, r2, #21
    2fd2:	e7e7      	b.n	2fa4 <usb_enable_ep+0xe4>
    2fd4:	2280      	movs	r2, #128	; 0x80
    2fd6:	0592      	lsls	r2, r2, #22
    2fd8:	e7e4      	b.n	2fa4 <usb_enable_ep+0xe4>
    2fda:	22c0      	movs	r2, #192	; 0xc0
    2fdc:	0592      	lsls	r2, r2, #22
    2fde:	e7e1      	b.n	2fa4 <usb_enable_ep+0xe4>
    2fe0:	2280      	movs	r2, #128	; 0x80
    2fe2:	05d2      	lsls	r2, r2, #23
    2fe4:	e7de      	b.n	2fa4 <usb_enable_ep+0xe4>
    2fe6:	22a0      	movs	r2, #160	; 0xa0
    2fe8:	05d2      	lsls	r2, r2, #23
    2fea:	e7db      	b.n	2fa4 <usb_enable_ep+0xe4>
    2fec:	22e0      	movs	r2, #224	; 0xe0
    2fee:	05d2      	lsls	r2, r2, #23
    2ff0:	e7d8      	b.n	2fa4 <usb_enable_ep+0xe4>
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	200006c8 	.word	0x200006c8
    2ff8:	8fffffff 	.word	0x8fffffff
    2ffc:	41005000 	.word	0x41005000

00003000 <usb_ep_start_out>:
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3f].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK0RDY(1);
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    3000:	b5f0      	push	{r4, r5, r6, r7, lr}
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    3002:	4d12      	ldr	r5, [pc, #72]	; (304c <usb_ep_start_out+0x4c>)
    3004:	0144      	lsls	r4, r0, #5
    3006:	192b      	adds	r3, r5, r4
    3008:	685e      	ldr	r6, [r3, #4]
    300a:	4f11      	ldr	r7, [pc, #68]	; (3050 <usb_ep_start_out+0x50>)
    300c:	403e      	ands	r6, r7
    300e:	605e      	str	r6, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(len);
    3010:	685e      	ldr	r6, [r3, #4]
    3012:	0392      	lsls	r2, r2, #14
    3014:	4f0f      	ldr	r7, [pc, #60]	; (3054 <usb_ep_start_out+0x54>)
    3016:	403a      	ands	r2, r7
    3018:	4316      	orrs	r6, r2
    301a:	605e      	str	r6, [r3, #4]
	// usb_endpoints[ep].DEVICE_DESC_BANK[0].PCKSIZE.bit.BYTE_COUNT = 0;
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    301c:	685a      	ldr	r2, [r3, #4]
    301e:	0b92      	lsrs	r2, r2, #14
    3020:	0392      	lsls	r2, r2, #14
    3022:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(0);
    3024:	685a      	ldr	r2, [r3, #4]
    3026:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_ADDR = (uint32_t) data;
    3028:	5161      	str	r1, [r4, r5]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_TRFAIL0(1);
    302a:	3008      	adds	r0, #8
    302c:	0140      	lsls	r0, r0, #5
    302e:	4b0a      	ldr	r3, [pc, #40]	; (3058 <usb_ep_start_out+0x58>)
    3030:	469c      	mov	ip, r3
    3032:	4460      	add	r0, ip
    3034:	2305      	movs	r3, #5
    3036:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT0(1);
    3038:	4b08      	ldr	r3, [pc, #32]	; (305c <usb_ep_start_out+0x5c>)
    303a:	469c      	mov	ip, r3
    303c:	4464      	add	r4, ip
    303e:	2301      	movs	r3, #1
    3040:	7023      	strb	r3, [r4, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSCLR = USB_DEVICE_EPSTATUS_BK0RDY(1);
    3042:	333f      	adds	r3, #63	; 0x3f
    3044:	7103      	strb	r3, [r0, #4]
	return 0;
}
    3046:	2000      	movs	r0, #0
    3048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	200006c8 	.word	0x200006c8
    3050:	f0003fff 	.word	0xf0003fff
    3054:	0fffc000 	.word	0x0fffc000
    3058:	41005000 	.word	0x41005000
    305c:	41005109 	.word	0x41005109

00003060 <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    3060:	b570      	push	{r4, r5, r6, lr}
	ep &= 0x3f;
    3062:	243f      	movs	r4, #63	; 0x3f
    3064:	4020      	ands	r0, r4
	// usb_endpoints[ep].DEVICE_DESC_BANK[1].PCKSIZE.bit.AUTO_ZLP = zlp;
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP_Msk;
    3066:	4c15      	ldr	r4, [pc, #84]	; (30bc <usb_ep_start_in+0x5c>)
    3068:	0146      	lsls	r6, r0, #5
    306a:	19a4      	adds	r4, r4, r6
    306c:	6965      	ldr	r5, [r4, #20]
    306e:	006d      	lsls	r5, r5, #1
    3070:	086d      	lsrs	r5, r5, #1
    3072:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_AUTO_ZLP(zlp);
    3074:	6965      	ldr	r5, [r4, #20]
    3076:	07db      	lsls	r3, r3, #31
    3078:	431d      	orrs	r5, r3
    307a:	6165      	str	r5, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk;
    307c:	6963      	ldr	r3, [r4, #20]
    307e:	4d10      	ldr	r5, [pc, #64]	; (30c0 <usb_ep_start_in+0x60>)
    3080:	402b      	ands	r3, r5
    3082:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(0);
    3084:	6963      	ldr	r3, [r4, #20]
    3086:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE &= ~USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk;
    3088:	6963      	ldr	r3, [r4, #20]
    308a:	0b9b      	lsrs	r3, r3, #14
    308c:	039b      	lsls	r3, r3, #14
    308e:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_PCKSIZE |= USB_DEVICE_PCKSIZE_BYTE_COUNT(size);
    3090:	6963      	ldr	r3, [r4, #20]
    3092:	0492      	lsls	r2, r2, #18
    3094:	0c92      	lsrs	r2, r2, #18
    3096:	4313      	orrs	r3, r2
    3098:	6163      	str	r3, [r4, #20]
	usb_endpoints[ep].DEVICE_DESC_BANK[1].USB_ADDR = (uint32_t) data;
    309a:	6121      	str	r1, [r4, #16]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRFAIL1(1);
    309c:	3008      	adds	r0, #8
    309e:	0140      	lsls	r0, r0, #5
    30a0:	4b08      	ldr	r3, [pc, #32]	; (30c4 <usb_ep_start_in+0x64>)
    30a2:	469c      	mov	ip, r3
    30a4:	4460      	add	r0, ip
    30a6:	230a      	movs	r3, #10
    30a8:	71c3      	strb	r3, [r0, #7]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPINTENSET = USB_DEVICE_EPINTENSET_TRCPT1(1);
    30aa:	4b07      	ldr	r3, [pc, #28]	; (30c8 <usb_ep_start_in+0x68>)
    30ac:	469c      	mov	ip, r3
    30ae:	4466      	add	r6, ip
    30b0:	2302      	movs	r3, #2
    30b2:	7033      	strb	r3, [r6, #0]
	USB_REGS->DEVICE.DEVICE_ENDPOINT[ep].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_BK1RDY(1);
    30b4:	337e      	adds	r3, #126	; 0x7e
    30b6:	7143      	strb	r3, [r0, #5]
	return 0;
}
    30b8:	2000      	movs	r0, #0
    30ba:	bd70      	pop	{r4, r5, r6, pc}
    30bc:	200006c8 	.word	0x200006c8
    30c0:	f0003fff 	.word	0xf0003fff
    30c4:	41005000 	.word	0x41005000
    30c8:	41005109 	.word	0x41005109

000030cc <usb_ep_pending>:
inline bool usb_ep_ready(uint8_t ep) {
	return usb_ep_empty(ep);
}

inline bool usb_ep_pending(uint8_t ep) {
	if (ep & 0x80) {
    30cc:	b243      	sxtb	r3, r0
    30ce:	2b00      	cmp	r3, #0
    30d0:	db0a      	blt.n	30e8 <usb_ep_pending+0x1c>
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
	} else {
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT0_Msk;
    30d2:	233f      	movs	r3, #63	; 0x3f
    30d4:	4003      	ands	r3, r0
    30d6:	3308      	adds	r3, #8
    30d8:	015b      	lsls	r3, r3, #5
    30da:	4a09      	ldr	r2, [pc, #36]	; (3100 <usb_ep_pending+0x34>)
    30dc:	4694      	mov	ip, r2
    30de:	4463      	add	r3, ip
    30e0:	79d8      	ldrb	r0, [r3, #7]
    30e2:	2301      	movs	r3, #1
    30e4:	4018      	ands	r0, r3
	}
}
    30e6:	4770      	bx	lr
		return USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG & USB_DEVICE_EPINTFLAG_TRCPT1_Msk;
    30e8:	233f      	movs	r3, #63	; 0x3f
    30ea:	4003      	ands	r3, r0
    30ec:	3308      	adds	r3, #8
    30ee:	015b      	lsls	r3, r3, #5
    30f0:	4a03      	ldr	r2, [pc, #12]	; (3100 <usb_ep_pending+0x34>)
    30f2:	4694      	mov	ip, r2
    30f4:	4463      	add	r3, ip
    30f6:	79db      	ldrb	r3, [r3, #7]
    30f8:	085b      	lsrs	r3, r3, #1
    30fa:	2001      	movs	r0, #1
    30fc:	4018      	ands	r0, r3
    30fe:	e7f2      	b.n	30e6 <usb_ep_pending+0x1a>
    3100:	41005000 	.word	0x41005000

00003104 <usb_ep_handled>:

inline void usb_ep_handled(uint8_t ep) {
	if (ep & 0x80) {
    3104:	b243      	sxtb	r3, r0
    3106:	2b00      	cmp	r3, #0
    3108:	db09      	blt.n	311e <usb_ep_handled+0x1a>
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
	} else {
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT0(1);
    310a:	233f      	movs	r3, #63	; 0x3f
    310c:	4003      	ands	r3, r0
    310e:	3308      	adds	r3, #8
    3110:	015b      	lsls	r3, r3, #5
    3112:	4a08      	ldr	r2, [pc, #32]	; (3134 <usb_ep_handled+0x30>)
    3114:	4694      	mov	ip, r2
    3116:	4463      	add	r3, ip
    3118:	2201      	movs	r2, #1
    311a:	71da      	strb	r2, [r3, #7]
	}
}
    311c:	4770      	bx	lr
		USB_REGS->DEVICE.DEVICE_ENDPOINT[ep & 0x3F].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1);
    311e:	233f      	movs	r3, #63	; 0x3f
    3120:	4003      	ands	r3, r0
    3122:	3308      	adds	r3, #8
    3124:	015b      	lsls	r3, r3, #5
    3126:	4a03      	ldr	r2, [pc, #12]	; (3134 <usb_ep_handled+0x30>)
    3128:	4694      	mov	ip, r2
    312a:	4463      	add	r3, ip
    312c:	2202      	movs	r2, #2
    312e:	71da      	strb	r2, [r3, #7]
    3130:	e7f4      	b.n	311c <usb_ep_handled+0x18>
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	41005000 	.word	0x41005000

00003138 <usb_ep_out_length>:

inline usb_size usb_ep_out_length(uint8_t ep){
	return (usb_endpoints[ep].DEVICE_DESC_BANK[0].USB_PCKSIZE & USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk) >> USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos;
    3138:	4b03      	ldr	r3, [pc, #12]	; (3148 <usb_ep_out_length+0x10>)
    313a:	0140      	lsls	r0, r0, #5
    313c:	181b      	adds	r3, r3, r0
    313e:	6858      	ldr	r0, [r3, #4]
    3140:	0480      	lsls	r0, r0, #18
    3142:	0c80      	lsrs	r0, r0, #18
}
    3144:	4770      	bx	lr
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	200006c8 	.word	0x200006c8

0000314c <usb_attach>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    314c:	4b04      	ldr	r3, [pc, #16]	; (3160 <usb_attach+0x14>)
    314e:	2280      	movs	r2, #128	; 0x80
    3150:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB_REGS->DEVICE.USB_CTRLB &= ~USB_DEVICE_CTRLB_DETACH(1);
    3152:	4a04      	ldr	r2, [pc, #16]	; (3164 <usb_attach+0x18>)
    3154:	8913      	ldrh	r3, [r2, #8]
    3156:	2101      	movs	r1, #1
    3158:	438b      	bics	r3, r1
    315a:	8113      	strh	r3, [r2, #8]
}
    315c:	4770      	bx	lr
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	e000e100 	.word	0xe000e100
    3164:	41005000 	.word	0x41005000

00003168 <usb_ep0_out>:

/// Enable the OUT stage on the default control pipe.
inline void usb_ep0_out(void) {
    3168:	b510      	push	{r4, lr}
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
    316a:	4903      	ldr	r1, [pc, #12]	; (3178 <usb_ep0_out+0x10>)
    316c:	2240      	movs	r2, #64	; 0x40
    316e:	2000      	movs	r0, #0
    3170:	4b02      	ldr	r3, [pc, #8]	; (317c <usb_ep0_out+0x14>)
    3172:	4798      	blx	r3
}
    3174:	bd10      	pop	{r4, pc}
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	2000063c 	.word	0x2000063c
    317c:	00003001 	.word	0x00003001

00003180 <usb_ep0_in>:

inline void usb_ep0_in(uint8_t size){
    3180:	b510      	push	{r4, lr}
    3182:	0002      	movs	r2, r0
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
    3184:	4902      	ldr	r1, [pc, #8]	; (3190 <usb_ep0_in+0x10>)
    3186:	2301      	movs	r3, #1
    3188:	2080      	movs	r0, #128	; 0x80
    318a:	4c02      	ldr	r4, [pc, #8]	; (3194 <usb_ep0_in+0x14>)
    318c:	47a0      	blx	r4
}
    318e:	bd10      	pop	{r4, pc}
    3190:	200005ec 	.word	0x200005ec
    3194:	00003061 	.word	0x00003061

00003198 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPSTATUSSET = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    3198:	4a02      	ldr	r2, [pc, #8]	; (31a4 <usb_ep0_stall+0xc>)
    319a:	2306      	movs	r3, #6
    319c:	33ff      	adds	r3, #255	; 0xff
    319e:	2130      	movs	r1, #48	; 0x30
    31a0:	54d1      	strb	r1, [r2, r3]
}
    31a2:	4770      	bx	lr
    31a4:	41005000 	.word	0x41005000

000031a8 <usb_handle_function>:
	//}
//
	//usb_cb_completion();
//}

void usb_handle_function() {
    31a8:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB_REGS->DEVICE.USB_EPINTSMRY;
    31aa:	4b25      	ldr	r3, [pc, #148]	; (3240 <usb_handle_function+0x98>)
    31ac:	8c1c      	ldrh	r4, [r3, #32]
    31ae:	b2a4      	uxth	r4, r4
	uint32_t status = USB_REGS->DEVICE.USB_INTFLAG;
    31b0:	8b9b      	ldrh	r3, [r3, #28]

	if (status & USB_DEVICE_INTFLAG_EORST(1)) {
    31b2:	071b      	lsls	r3, r3, #28
    31b4:	d410      	bmi.n	31d8 <usb_handle_function+0x30>
		usb_reset();
		usb_cb_reset();
		goto usb_handle_function_end;
	}

	if (summary & (1<<0)) {
    31b6:	07e3      	lsls	r3, r4, #31
    31b8:	d50c      	bpl.n	31d4 <usb_handle_function+0x2c>
		uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG;
    31ba:	4921      	ldr	r1, [pc, #132]	; (3240 <usb_handle_function+0x98>)
    31bc:	2208      	movs	r2, #8
    31be:	32ff      	adds	r2, #255	; 0xff
    31c0:	5c8b      	ldrb	r3, [r1, r2]
    31c2:	b2dd      	uxtb	r5, r3
		USB_REGS->DEVICE.DEVICE_ENDPOINT[0].USB_EPINTFLAG = USB_DEVICE_EPINTFLAG_TRCPT1(1) | USB_DEVICE_EPINTFLAG_TRCPT0(1) | USB_DEVICE_EPINTFLAG_RXSTP(1);
    31c4:	2013      	movs	r0, #19
    31c6:	5488      	strb	r0, [r1, r2]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP(1)) {
    31c8:	06db      	lsls	r3, r3, #27
    31ca:	d40d      	bmi.n	31e8 <usb_handle_function+0x40>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0(1)) {
    31cc:	07eb      	lsls	r3, r5, #31
    31ce:	d413      	bmi.n	31f8 <usb_handle_function+0x50>
			usb_handle_control_out_complete();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1(1)) {
    31d0:	07ad      	lsls	r5, r5, #30
    31d2:	d414      	bmi.n	31fe <usb_handle_function+0x56>
void usb_handle_function() {
    31d4:	2301      	movs	r3, #1
    31d6:	e016      	b.n	3206 <usb_handle_function+0x5e>
		USB_REGS->DEVICE.USB_INTFLAG = USB_DEVICE_INTFLAG_EORST(1);
    31d8:	4b19      	ldr	r3, [pc, #100]	; (3240 <usb_handle_function+0x98>)
    31da:	2208      	movs	r2, #8
    31dc:	839a      	strh	r2, [r3, #28]
		usb_reset();
    31de:	4b19      	ldr	r3, [pc, #100]	; (3244 <usb_handle_function+0x9c>)
    31e0:	4798      	blx	r3
		usb_cb_reset();
    31e2:	4b19      	ldr	r3, [pc, #100]	; (3248 <usb_handle_function+0xa0>)
    31e4:	4798      	blx	r3
		goto usb_handle_function_end;
    31e6:	e026      	b.n	3236 <usb_handle_function+0x8e>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    31e8:	4818      	ldr	r0, [pc, #96]	; (324c <usb_handle_function+0xa4>)
    31ea:	4919      	ldr	r1, [pc, #100]	; (3250 <usb_handle_function+0xa8>)
    31ec:	3aff      	subs	r2, #255	; 0xff
    31ee:	4b19      	ldr	r3, [pc, #100]	; (3254 <usb_handle_function+0xac>)
    31f0:	4798      	blx	r3
			usb_handle_setup();
    31f2:	4b19      	ldr	r3, [pc, #100]	; (3258 <usb_handle_function+0xb0>)
    31f4:	4798      	blx	r3
    31f6:	e7e9      	b.n	31cc <usb_handle_function+0x24>
			usb_handle_control_out_complete();
    31f8:	4b18      	ldr	r3, [pc, #96]	; (325c <usb_handle_function+0xb4>)
    31fa:	4798      	blx	r3
    31fc:	e7e8      	b.n	31d0 <usb_handle_function+0x28>
			usb_handle_control_in_complete();
    31fe:	4b18      	ldr	r3, [pc, #96]	; (3260 <usb_handle_function+0xb8>)
    3200:	4798      	blx	r3
    3202:	e7e7      	b.n	31d4 <usb_handle_function+0x2c>
		}
	}

	for (int i=1; i<usb_num_endpoints; i++) {
    3204:	3301      	adds	r3, #1
    3206:	4a17      	ldr	r2, [pc, #92]	; (3264 <usb_handle_function+0xbc>)
    3208:	7812      	ldrb	r2, [r2, #0]
    320a:	429a      	cmp	r2, r3
    320c:	dd11      	ble.n	3232 <usb_handle_function+0x8a>
		if (summary & 1<<i) {
    320e:	2201      	movs	r2, #1
    3210:	409a      	lsls	r2, r3
    3212:	4214      	tst	r4, r2
    3214:	d0f6      	beq.n	3204 <usb_handle_function+0x5c>
			uint32_t flags = USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTFLAG;
    3216:	001a      	movs	r2, r3
    3218:	3208      	adds	r2, #8
    321a:	0152      	lsls	r2, r2, #5
    321c:	4908      	ldr	r1, [pc, #32]	; (3240 <usb_handle_function+0x98>)
    321e:	468c      	mov	ip, r1
    3220:	4462      	add	r2, ip
    3222:	79d1      	ldrb	r1, [r2, #7]
    3224:	b2c9      	uxtb	r1, r1
			USB_REGS->DEVICE.DEVICE_ENDPOINT[i].USB_EPINTENCLR = flags;
    3226:	015a      	lsls	r2, r3, #5
    3228:	480f      	ldr	r0, [pc, #60]	; (3268 <usb_handle_function+0xc0>)
    322a:	4684      	mov	ip, r0
    322c:	4462      	add	r2, ip
    322e:	7011      	strb	r1, [r2, #0]
    3230:	e7e8      	b.n	3204 <usb_handle_function+0x5c>
		}
	}

	usb_cb_completion();
    3232:	4b0e      	ldr	r3, [pc, #56]	; (326c <usb_handle_function+0xc4>)
    3234:	4798      	blx	r3
    3236:	4b0e      	ldr	r3, [pc, #56]	; (3270 <usb_handle_function+0xc8>)
    3238:	2280      	movs	r2, #128	; 0x80
    323a:	601a      	str	r2, [r3, #0]
	
	usb_handle_function_end:
	NVIC_EnableIRQ(USB_IRQn);
}
    323c:	bd70      	pop	{r4, r5, r6, pc}
    323e:	46c0      	nop			; (mov r8, r8)
    3240:	41005000 	.word	0x41005000
    3244:	00002d8d 	.word	0x00002d8d
    3248:	000033b1 	.word	0x000033b1
    324c:	20000630 	.word	0x20000630
    3250:	2000063c 	.word	0x2000063c
    3254:	00005b49 	.word	0x00005b49
    3258:	00002ba5 	.word	0x00002ba5
    325c:	00002ce1 	.word	0x00002ce1
    3260:	00002d01 	.word	0x00002d01
    3264:	0000632a 	.word	0x0000632a
    3268:	41005108 	.word	0x41005108
    326c:	00003481 	.word	0x00003481
    3270:	e000e100 	.word	0xe000e100

00003274 <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    3274:	b510      	push	{r4, lr}
    3276:	b088      	sub	sp, #32
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    3278:	2000      	movs	r0, #0
    327a:	e01c      	b.n	32b6 <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    327c:	0082      	lsls	r2, r0, #2
    327e:	1812      	adds	r2, r2, r0
    3280:	17d4      	asrs	r4, r2, #31
    3282:	2307      	movs	r3, #7
    3284:	0019      	movs	r1, r3
    3286:	4021      	ands	r1, r4
    3288:	1889      	adds	r1, r1, r2
    328a:	10c9      	asrs	r1, r1, #3
		unsigned pos = (i*5)%8;
    328c:	0f64      	lsrs	r4, r4, #29
    328e:	1912      	adds	r2, r2, r4
    3290:	4013      	ands	r3, r2
    3292:	1b1b      	subs	r3, r3, r4
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    3294:	4a0c      	ldr	r2, [pc, #48]	; (32c8 <samd_serial_number_string_descriptor+0x54>)
    3296:	5c8a      	ldrb	r2, [r1, r2]
    3298:	411a      	asrs	r2, r3
    329a:	4c0c      	ldr	r4, [pc, #48]	; (32cc <samd_serial_number_string_descriptor+0x58>)
    329c:	5d09      	ldrb	r1, [r1, r4]
    329e:	2408      	movs	r4, #8
    32a0:	1ae3      	subs	r3, r4, r3
    32a2:	4099      	lsls	r1, r3
    32a4:	000b      	movs	r3, r1
    32a6:	4313      	orrs	r3, r2
    32a8:	221f      	movs	r2, #31
    32aa:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    32ac:	4a08      	ldr	r2, [pc, #32]	; (32d0 <samd_serial_number_string_descriptor+0x5c>)
    32ae:	5cd2      	ldrb	r2, [r2, r3]
    32b0:	ab01      	add	r3, sp, #4
    32b2:	541a      	strb	r2, [r3, r0]
	for (int i=0; i<26; i++) {
    32b4:	3001      	adds	r0, #1
    32b6:	2819      	cmp	r0, #25
    32b8:	dde0      	ble.n	327c <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    32ba:	a801      	add	r0, sp, #4
    32bc:	2300      	movs	r3, #0
    32be:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    32c0:	4b04      	ldr	r3, [pc, #16]	; (32d4 <samd_serial_number_string_descriptor+0x60>)
    32c2:	4798      	blx	r3
}
    32c4:	b008      	add	sp, #32
    32c6:	bd10      	pop	{r4, pc}
    32c8:	0080a00c 	.word	0x0080a00c
    32cc:	0080a00d 	.word	0x0080a00d
    32d0:	000062d8 	.word	0x000062d8
    32d4:	00002d4d 	.word	0x00002d4d

000032d8 <usb_serial_init>:
__attribute__((aligned(4))) volatile uint8_t usb_serial_buffer_in[USB_SERIAL_BUFFER_SIZE];
	
volatile bool usb_tx_busy;
volatile size_t usb_rx_buffer_length;
	
void usb_serial_init() {
    32d8:	b510      	push	{r4, lr}
	// init endpoints
	usb_enable_ep(USB_EP_CDC_NOTIFICATION, USB_EP_TYPE_INTERRUPT, 8);
    32da:	2208      	movs	r2, #8
    32dc:	2103      	movs	r1, #3
    32de:	2081      	movs	r0, #129	; 0x81
    32e0:	4c09      	ldr	r4, [pc, #36]	; (3308 <usb_serial_init+0x30>)
    32e2:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_OUT, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    32e4:	2220      	movs	r2, #32
    32e6:	2102      	movs	r1, #2
    32e8:	2002      	movs	r0, #2
    32ea:	47a0      	blx	r4
	usb_enable_ep(USB_EP_CDC_IN, USB_EP_TYPE_BULK, USB_SERIAL_BUFFER_SIZE);
    32ec:	2220      	movs	r2, #32
    32ee:	2102      	movs	r1, #2
    32f0:	2082      	movs	r0, #130	; 0x82
    32f2:	47a0      	blx	r4
	
	// start OUT transfer (host to device)
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    32f4:	4c05      	ldr	r4, [pc, #20]	; (330c <usb_serial_init+0x34>)
    32f6:	2220      	movs	r2, #32
    32f8:	0021      	movs	r1, r4
    32fa:	2002      	movs	r0, #2
    32fc:	4b04      	ldr	r3, [pc, #16]	; (3310 <usb_serial_init+0x38>)
    32fe:	4798      	blx	r3
	
	usb_tx_busy = false;
    3300:	2320      	movs	r3, #32
    3302:	2200      	movs	r2, #0
    3304:	54e2      	strb	r2, [r4, r3]
}
    3306:	bd10      	pop	{r4, pc}
    3308:	00002ec1 	.word	0x00002ec1
    330c:	2000067c 	.word	0x2000067c
    3310:	00003001 	.word	0x00003001

00003314 <usb_serial_out_completion>:

volatile size_t usb_rx_buffer_length;

void usb_serial_out_completion() {
    3314:	b510      	push	{r4, lr}
	usb_rx_buffer_length = usb_ep_out_length(USB_EP_CDC_OUT);
    3316:	2002      	movs	r0, #2
    3318:	4b02      	ldr	r3, [pc, #8]	; (3324 <usb_serial_out_completion+0x10>)
    331a:	4798      	blx	r3
    331c:	4b02      	ldr	r3, [pc, #8]	; (3328 <usb_serial_out_completion+0x14>)
    331e:	6258      	str	r0, [r3, #36]	; 0x24
}
    3320:	bd10      	pop	{r4, pc}
    3322:	46c0      	nop			; (mov r8, r8)
    3324:	00003139 	.word	0x00003139
    3328:	2000067c 	.word	0x2000067c

0000332c <usb_serial_in_completion>:

void usb_serial_in_completion() {
	usb_tx_busy = false;
    332c:	4b02      	ldr	r3, [pc, #8]	; (3338 <usb_serial_in_completion+0xc>)
    332e:	2220      	movs	r2, #32
    3330:	2100      	movs	r1, #0
    3332:	5499      	strb	r1, [r3, r2]
}
    3334:	4770      	bx	lr
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	2000067c 	.word	0x2000067c

0000333c <usb_serial_send_buffer>:

int usb_serial_send_buffer(uint8_t* data, int n) {
    333c:	b570      	push	{r4, r5, r6, lr}
    333e:	000c      	movs	r4, r1
	n = (n > USB_SERIAL_BUFFER_SIZE) ? USB_SERIAL_BUFFER_SIZE : n;
    3340:	2920      	cmp	r1, #32
    3342:	dd00      	ble.n	3346 <usb_serial_send_buffer+0xa>
    3344:	2420      	movs	r4, #32
	
	//for (int i = 0; i < n; ++i) {
		//usb_serial_buffer_in[i] = data[i];
	//}
	memcpy(usb_serial_buffer_in, data, n);
    3346:	4d09      	ldr	r5, [pc, #36]	; (336c <usb_serial_send_buffer+0x30>)
    3348:	002e      	movs	r6, r5
    334a:	3628      	adds	r6, #40	; 0x28
    334c:	0022      	movs	r2, r4
    334e:	0001      	movs	r1, r0
    3350:	0030      	movs	r0, r6
    3352:	4b07      	ldr	r3, [pc, #28]	; (3370 <usb_serial_send_buffer+0x34>)
    3354:	4798      	blx	r3
	
	usb_ep_start_in(USB_EP_CDC_IN, usb_serial_buffer_in, n, false);
    3356:	2300      	movs	r3, #0
    3358:	0022      	movs	r2, r4
    335a:	0031      	movs	r1, r6
    335c:	2082      	movs	r0, #130	; 0x82
    335e:	4e05      	ldr	r6, [pc, #20]	; (3374 <usb_serial_send_buffer+0x38>)
    3360:	47b0      	blx	r6
	usb_tx_busy = true;
    3362:	2320      	movs	r3, #32
    3364:	2201      	movs	r2, #1
    3366:	54ea      	strb	r2, [r5, r3]
	
	return n;
}
    3368:	0020      	movs	r0, r4
    336a:	bd70      	pop	{r4, r5, r6, pc}
    336c:	2000067c 	.word	0x2000067c
    3370:	00005b49 	.word	0x00005b49
    3374:	00003061 	.word	0x00003061

00003378 <usb_serial_read_buffer>:

int usb_serial_read_buffer(uint8_t* data, int n) {
    3378:	b570      	push	{r4, r5, r6, lr}
    337a:	000c      	movs	r4, r1
	n = (n > usb_rx_buffer_length) ? usb_rx_buffer_length : n;
    337c:	4b09      	ldr	r3, [pc, #36]	; (33a4 <usb_serial_read_buffer+0x2c>)
    337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3380:	4299      	cmp	r1, r3
    3382:	d901      	bls.n	3388 <usb_serial_read_buffer+0x10>
    3384:	4b07      	ldr	r3, [pc, #28]	; (33a4 <usb_serial_read_buffer+0x2c>)
    3386:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	
	memcpy(data, usb_serial_buffer_out, n);
    3388:	4d06      	ldr	r5, [pc, #24]	; (33a4 <usb_serial_read_buffer+0x2c>)
    338a:	0022      	movs	r2, r4
    338c:	0029      	movs	r1, r5
    338e:	4b06      	ldr	r3, [pc, #24]	; (33a8 <usb_serial_read_buffer+0x30>)
    3390:	4798      	blx	r3
	
	usb_ep_start_out(USB_EP_CDC_OUT, usb_serial_buffer_out, USB_SERIAL_BUFFER_SIZE);
    3392:	2220      	movs	r2, #32
    3394:	0029      	movs	r1, r5
    3396:	2002      	movs	r0, #2
    3398:	4b04      	ldr	r3, [pc, #16]	; (33ac <usb_serial_read_buffer+0x34>)
    339a:	4798      	blx	r3
	
	usb_rx_buffer_length = 0;
    339c:	2300      	movs	r3, #0
    339e:	626b      	str	r3, [r5, #36]	; 0x24
	return n;
    33a0:	0020      	movs	r0, r4
    33a2:	bd70      	pop	{r4, r5, r6, pc}
    33a4:	2000067c 	.word	0x2000067c
    33a8:	00005b49 	.word	0x00005b49
    33ac:	00003001 	.word	0x00003001

000033b0 <usb_cb_reset>:

volatile uint8_t line_state = 0;

void usb_cb_reset(void) {
	
}
    33b0:	4770      	bx	lr
	...

000033b4 <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    33b4:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_CLASS) {
    33b6:	4b2a      	ldr	r3, [pc, #168]	; (3460 <usb_cb_control_setup+0xac>)
    33b8:	781a      	ldrb	r2, [r3, #0]
    33ba:	2360      	movs	r3, #96	; 0x60
    33bc:	4013      	ands	r3, r2
    33be:	2b20      	cmp	r3, #32
    33c0:	d000      	beq.n	33c4 <usb_cb_control_setup+0x10>
			default:
			usb_ep0_stall();
			break;
		}
	}
}
    33c2:	bd10      	pop	{r4, pc}
		uint8_t interface = usb_setup.wIndex & 0xff;
    33c4:	4b26      	ldr	r3, [pc, #152]	; (3460 <usb_cb_control_setup+0xac>)
    33c6:	7919      	ldrb	r1, [r3, #4]
		switch (usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK) {
    33c8:	231f      	movs	r3, #31
    33ca:	4013      	ands	r3, r2
    33cc:	2b01      	cmp	r3, #1
    33ce:	d144      	bne.n	345a <usb_cb_control_setup+0xa6>
			if (interface == CDC_CONTROL_INTERFACE) {
    33d0:	2900      	cmp	r1, #0
    33d2:	d1f6      	bne.n	33c2 <usb_cb_control_setup+0xe>
				switch (usb_setup.bRequest) {
    33d4:	4b22      	ldr	r3, [pc, #136]	; (3460 <usb_cb_control_setup+0xac>)
    33d6:	785b      	ldrb	r3, [r3, #1]
    33d8:	2b22      	cmp	r3, #34	; 0x22
    33da:	d031      	beq.n	3440 <usb_cb_control_setup+0x8c>
    33dc:	d80c      	bhi.n	33f8 <usb_cb_control_setup+0x44>
    33de:	2b20      	cmp	r3, #32
    33e0:	d026      	beq.n	3430 <usb_cb_control_setup+0x7c>
    33e2:	2b21      	cmp	r3, #33	; 0x21
    33e4:	d136      	bne.n	3454 <usb_cb_control_setup+0xa0>
    33e6:	2300      	movs	r3, #0
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    33e8:	2b06      	cmp	r3, #6
    33ea:	d823      	bhi.n	3434 <usb_cb_control_setup+0x80>
						ep0_buf_in[i] = ((uint8_t*)(&line_coding))[i];
    33ec:	4a1d      	ldr	r2, [pc, #116]	; (3464 <usb_cb_control_setup+0xb0>)
    33ee:	5cd1      	ldrb	r1, [r2, r3]
    33f0:	4a1d      	ldr	r2, [pc, #116]	; (3468 <usb_cb_control_setup+0xb4>)
    33f2:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < sizeof(CDC_LineEncoding); ++i) {
    33f4:	3301      	adds	r3, #1
    33f6:	e7f7      	b.n	33e8 <usb_cb_control_setup+0x34>
    33f8:	2b23      	cmp	r3, #35	; 0x23
    33fa:	d12b      	bne.n	3454 <usb_cb_control_setup+0xa0>
					usb_ep0_in(0);
    33fc:	2000      	movs	r0, #0
    33fe:	4b1b      	ldr	r3, [pc, #108]	; (346c <usb_cb_control_setup+0xb8>)
    3400:	4798      	blx	r3
					usb_ep0_out();
    3402:	4b1b      	ldr	r3, [pc, #108]	; (3470 <usb_cb_control_setup+0xbc>)
    3404:	4798      	blx	r3
					break;
    3406:	e7dc      	b.n	33c2 <usb_cb_control_setup+0xe>
						((uint8_t*)(&line_coding))[i] = ep0_buf_out[i];
    3408:	4b16      	ldr	r3, [pc, #88]	; (3464 <usb_cb_control_setup+0xb0>)
    340a:	491a      	ldr	r1, [pc, #104]	; (3474 <usb_cb_control_setup+0xc0>)
    340c:	5c89      	ldrb	r1, [r1, r2]
    340e:	5499      	strb	r1, [r3, r2]
					for (int i = 0; i < usb_setup.wLength && i < sizeof(CDC_LineEncoding); ++i) {
    3410:	3201      	adds	r2, #1
    3412:	4b13      	ldr	r3, [pc, #76]	; (3460 <usb_cb_control_setup+0xac>)
    3414:	7999      	ldrb	r1, [r3, #6]
    3416:	79db      	ldrb	r3, [r3, #7]
    3418:	021b      	lsls	r3, r3, #8
    341a:	430b      	orrs	r3, r1
    341c:	4293      	cmp	r3, r2
    341e:	dd01      	ble.n	3424 <usb_cb_control_setup+0x70>
    3420:	2a06      	cmp	r2, #6
    3422:	d9f1      	bls.n	3408 <usb_cb_control_setup+0x54>
					usb_ep0_in(0);
    3424:	2000      	movs	r0, #0
    3426:	4b11      	ldr	r3, [pc, #68]	; (346c <usb_cb_control_setup+0xb8>)
    3428:	4798      	blx	r3
					usb_ep0_out();
    342a:	4b11      	ldr	r3, [pc, #68]	; (3470 <usb_cb_control_setup+0xbc>)
    342c:	4798      	blx	r3
					break;
    342e:	e7c8      	b.n	33c2 <usb_cb_control_setup+0xe>
    3430:	2200      	movs	r2, #0
    3432:	e7ee      	b.n	3412 <usb_cb_control_setup+0x5e>
					usb_ep0_in(sizeof(CDC_LineEncoding));
    3434:	2007      	movs	r0, #7
    3436:	4b0d      	ldr	r3, [pc, #52]	; (346c <usb_cb_control_setup+0xb8>)
    3438:	4798      	blx	r3
					usb_ep0_out();
    343a:	4b0d      	ldr	r3, [pc, #52]	; (3470 <usb_cb_control_setup+0xbc>)
    343c:	4798      	blx	r3
					break;
    343e:	e7c0      	b.n	33c2 <usb_cb_control_setup+0xe>
					line_state = (uint8_t)(usb_setup.wValue);
    3440:	4b07      	ldr	r3, [pc, #28]	; (3460 <usb_cb_control_setup+0xac>)
    3442:	789a      	ldrb	r2, [r3, #2]
    3444:	4b0c      	ldr	r3, [pc, #48]	; (3478 <usb_cb_control_setup+0xc4>)
    3446:	701a      	strb	r2, [r3, #0]
					usb_ep0_in(0);
    3448:	2000      	movs	r0, #0
    344a:	4b08      	ldr	r3, [pc, #32]	; (346c <usb_cb_control_setup+0xb8>)
    344c:	4798      	blx	r3
					usb_ep0_out();
    344e:	4b08      	ldr	r3, [pc, #32]	; (3470 <usb_cb_control_setup+0xbc>)
    3450:	4798      	blx	r3
					break;
    3452:	e7b6      	b.n	33c2 <usb_cb_control_setup+0xe>
					usb_ep0_stall();
    3454:	4b09      	ldr	r3, [pc, #36]	; (347c <usb_cb_control_setup+0xc8>)
    3456:	4798      	blx	r3
					break;
    3458:	e7b3      	b.n	33c2 <usb_cb_control_setup+0xe>
			usb_ep0_stall();
    345a:	4b08      	ldr	r3, [pc, #32]	; (347c <usb_cb_control_setup+0xc8>)
    345c:	4798      	blx	r3
}
    345e:	e7b0      	b.n	33c2 <usb_cb_control_setup+0xe>
    3460:	20000630 	.word	0x20000630
    3464:	200000a4 	.word	0x200000a4
    3468:	200005ec 	.word	0x200005ec
    346c:	00003181 	.word	0x00003181
    3470:	00003169 	.word	0x00003169
    3474:	2000063c 	.word	0x2000063c
    3478:	200006c4 	.word	0x200006c4
    347c:	00003199 	.word	0x00003199

00003480 <usb_cb_completion>:

void usb_cb_completion(void) {
    3480:	b510      	push	{r4, lr}
	if (usb_ep_pending(USB_EP_CDC_OUT)) {
    3482:	2002      	movs	r0, #2
    3484:	4b0a      	ldr	r3, [pc, #40]	; (34b0 <usb_cb_completion+0x30>)
    3486:	4798      	blx	r3
    3488:	2800      	cmp	r0, #0
    348a:	d105      	bne.n	3498 <usb_cb_completion+0x18>
		usb_ep_handled(USB_EP_CDC_OUT);
		usb_serial_out_completion();
	}

	if (usb_ep_pending(USB_EP_CDC_IN)) {
    348c:	2082      	movs	r0, #130	; 0x82
    348e:	4b08      	ldr	r3, [pc, #32]	; (34b0 <usb_cb_completion+0x30>)
    3490:	4798      	blx	r3
    3492:	2800      	cmp	r0, #0
    3494:	d106      	bne.n	34a4 <usb_cb_completion+0x24>
		usb_ep_handled(USB_EP_CDC_IN);
		usb_serial_in_completion();
	}
}
    3496:	bd10      	pop	{r4, pc}
		usb_ep_handled(USB_EP_CDC_OUT);
    3498:	2002      	movs	r0, #2
    349a:	4b06      	ldr	r3, [pc, #24]	; (34b4 <usb_cb_completion+0x34>)
    349c:	4798      	blx	r3
		usb_serial_out_completion();
    349e:	4b06      	ldr	r3, [pc, #24]	; (34b8 <usb_cb_completion+0x38>)
    34a0:	4798      	blx	r3
    34a2:	e7f3      	b.n	348c <usb_cb_completion+0xc>
		usb_ep_handled(USB_EP_CDC_IN);
    34a4:	2082      	movs	r0, #130	; 0x82
    34a6:	4b03      	ldr	r3, [pc, #12]	; (34b4 <usb_cb_completion+0x34>)
    34a8:	4798      	blx	r3
		usb_serial_in_completion();
    34aa:	4b04      	ldr	r3, [pc, #16]	; (34bc <usb_cb_completion+0x3c>)
    34ac:	4798      	blx	r3
}
    34ae:	e7f2      	b.n	3496 <usb_cb_completion+0x16>
    34b0:	000030cd 	.word	0x000030cd
    34b4:	00003105 	.word	0x00003105
    34b8:	00003315 	.word	0x00003315
    34bc:	0000332d 	.word	0x0000332d

000034c0 <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {
	
}
    34c0:	4770      	bx	lr

000034c2 <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {
	
}
    34c2:	4770      	bx	lr

000034c4 <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    34c4:	b510      	push	{r4, lr}
	if (config <= 1) {
    34c6:	2801      	cmp	r0, #1
    34c8:	d901      	bls.n	34ce <usb_cb_set_configuration+0xa>
		usb_serial_init();
		return true;
	}
	return false;
    34ca:	2000      	movs	r0, #0
}
    34cc:	bd10      	pop	{r4, pc}
		usb_serial_init();
    34ce:	4b02      	ldr	r3, [pc, #8]	; (34d8 <usb_cb_set_configuration+0x14>)
    34d0:	4798      	blx	r3
		return true;
    34d2:	2001      	movs	r0, #1
    34d4:	e7fa      	b.n	34cc <usb_cb_set_configuration+0x8>
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	000032d9 	.word	0x000032d9

000034dc <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	switch (interface) {
    34dc:	2800      	cmp	r0, #0
    34de:	d003      	beq.n	34e8 <usb_cb_set_interface+0xc>
    34e0:	2801      	cmp	r0, #1
    34e2:	d005      	beq.n	34f0 <usb_cb_set_interface+0x14>
    34e4:	2000      	movs	r0, #0
		case CDC_DATA_INTERFACE:
		if (altsetting == 0) return true;
		break;
	}
	return false;
}
    34e6:	4770      	bx	lr
		if (altsetting == 0) return true;
    34e8:	2900      	cmp	r1, #0
    34ea:	d005      	beq.n	34f8 <usb_cb_set_interface+0x1c>
	return false;
    34ec:	2000      	movs	r0, #0
    34ee:	e7fa      	b.n	34e6 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    34f0:	2900      	cmp	r1, #0
    34f2:	d003      	beq.n	34fc <usb_cb_set_interface+0x20>
	return false;
    34f4:	2000      	movs	r0, #0
    34f6:	e7f6      	b.n	34e6 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    34f8:	2001      	movs	r0, #1
    34fa:	e7f4      	b.n	34e6 <usb_cb_set_interface+0xa>
		if (altsetting == 0) return true;
    34fc:	2001      	movs	r0, #1
    34fe:	e7f2      	b.n	34e6 <usb_cb_set_interface+0xa>

00003500 <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    3500:	b510      	push	{r4, lr}
    3502:	0014      	movs	r4, r2
	const void* address = 0;
	uint16_t size = 0;
	
	switch (type) {
    3504:	2802      	cmp	r0, #2
    3506:	d028      	beq.n	355a <usb_cb_get_descriptor+0x5a>
    3508:	2803      	cmp	r0, #3
    350a:	d008      	beq.n	351e <usb_cb_get_descriptor+0x1e>
    350c:	2801      	cmp	r0, #1
    350e:	d003      	beq.n	3518 <usb_cb_get_descriptor+0x18>
    3510:	2000      	movs	r0, #0
    3512:	2300      	movs	r3, #0
		}
		size = (((USB_StringDescriptor*)address))->bLength;
		break;
	}
	
	*descriptor_ptr = address;
    3514:	6023      	str	r3, [r4, #0]
	return size;
    3516:	bd10      	pop	{r4, pc}
		size = sizeof(USB_DeviceDescriptor);
    3518:	3011      	adds	r0, #17
		address = &device_descriptor;
    351a:	4b11      	ldr	r3, [pc, #68]	; (3560 <usb_cb_get_descriptor+0x60>)
    351c:	e7fa      	b.n	3514 <usb_cb_get_descriptor+0x14>
		switch (index) {
    351e:	2902      	cmp	r1, #2
    3520:	d00f      	beq.n	3542 <usb_cb_get_descriptor+0x42>
    3522:	d808      	bhi.n	3536 <usb_cb_get_descriptor+0x36>
    3524:	2900      	cmp	r1, #0
    3526:	d015      	beq.n	3554 <usb_cb_get_descriptor+0x54>
    3528:	2901      	cmp	r1, #1
    352a:	d10f      	bne.n	354c <usb_cb_get_descriptor+0x4c>
			address = usb_string_to_descriptor("Finley Blaine");
    352c:	480d      	ldr	r0, [pc, #52]	; (3564 <usb_cb_get_descriptor+0x64>)
    352e:	4b0e      	ldr	r3, [pc, #56]	; (3568 <usb_cb_get_descriptor+0x68>)
    3530:	4798      	blx	r3
    3532:	0003      	movs	r3, r0
			break;
    3534:	e00f      	b.n	3556 <usb_cb_get_descriptor+0x56>
    3536:	2903      	cmp	r1, #3
    3538:	d108      	bne.n	354c <usb_cb_get_descriptor+0x4c>
			address = samd_serial_number_string_descriptor();
    353a:	4b0c      	ldr	r3, [pc, #48]	; (356c <usb_cb_get_descriptor+0x6c>)
    353c:	4798      	blx	r3
    353e:	0003      	movs	r3, r0
			break;
    3540:	e009      	b.n	3556 <usb_cb_get_descriptor+0x56>
			address = usb_string_to_descriptor("GNC2");
    3542:	480b      	ldr	r0, [pc, #44]	; (3570 <usb_cb_get_descriptor+0x70>)
    3544:	4b08      	ldr	r3, [pc, #32]	; (3568 <usb_cb_get_descriptor+0x68>)
    3546:	4798      	blx	r3
    3548:	0003      	movs	r3, r0
			break;
    354a:	e004      	b.n	3556 <usb_cb_get_descriptor+0x56>
			*descriptor_ptr = 0;
    354c:	2300      	movs	r3, #0
    354e:	6023      	str	r3, [r4, #0]
			return 0;
    3550:	2000      	movs	r0, #0
    3552:	e7e0      	b.n	3516 <usb_cb_get_descriptor+0x16>
    3554:	4b07      	ldr	r3, [pc, #28]	; (3574 <usb_cb_get_descriptor+0x74>)
		size = (((USB_StringDescriptor*)address))->bLength;
    3556:	7818      	ldrb	r0, [r3, #0]
		break;
    3558:	e7dc      	b.n	3514 <usb_cb_get_descriptor+0x14>
		size = sizeof(USB_FullConfigurationDescriptor);
    355a:	2046      	movs	r0, #70	; 0x46
		address = &full_config;
    355c:	4b06      	ldr	r3, [pc, #24]	; (3578 <usb_cb_get_descriptor+0x78>)
    355e:	e7d9      	b.n	3514 <usb_cb_get_descriptor+0x14>
    3560:	00006318 	.word	0x00006318
    3564:	000062fc 	.word	0x000062fc
    3568:	00002d4d 	.word	0x00002d4d
    356c:	00003275 	.word	0x00003275
    3570:	0000630c 	.word	0x0000630c
    3574:	00006314 	.word	0x00006314
    3578:	200000ac 	.word	0x200000ac

0000357c <rtos_init>:
	
	return 0;
}


bool rtos_init() {
    357c:	b510      	push	{r4, lr}
	#ifdef configure_clock
	configure_clock();
    357e:	4b07      	ldr	r3, [pc, #28]	; (359c <rtos_init+0x20>)
    3580:	4798      	blx	r3
	#endif
	
	time_init();
    3582:	4b07      	ldr	r3, [pc, #28]	; (35a0 <rtos_init+0x24>)
    3584:	4798      	blx	r3
	
	#ifdef DEBUG_LED
	led_init();
    3586:	2180      	movs	r1, #128	; 0x80
    3588:	03c9      	lsls	r1, r1, #15
    358a:	2001      	movs	r0, #1
    358c:	4b05      	ldr	r3, [pc, #20]	; (35a4 <rtos_init+0x28>)
    358e:	4798      	blx	r3
	#endif
	
	init_process_queue();
    3590:	4b05      	ldr	r3, [pc, #20]	; (35a8 <rtos_init+0x2c>)
    3592:	4798      	blx	r3
	
	// initialize preemption
	#ifdef RTOS_PREEMPT
	preempt_init_interrupts();
    3594:	4b05      	ldr	r3, [pc, #20]	; (35ac <rtos_init+0x30>)
    3596:	4798      	blx	r3
	#endif
	
	return true;
}
    3598:	2001      	movs	r0, #1
    359a:	bd10      	pop	{r4, pc}
    359c:	000027dd 	.word	0x000027dd
    35a0:	000028b1 	.word	0x000028b1
    35a4:	000022c1 	.word	0x000022c1
    35a8:	00003799 	.word	0x00003799
    35ac:	00002925 	.word	0x00002925

000035b0 <morse>:

#ifdef DEBUG_LED
void morse(const char* string) {
    35b0:	b570      	push	{r4, r5, r6, lr}
    35b2:	0004      	movs	r4, r0
	char* c = string;
	while (*c != '\0') {
    35b4:	e011      	b.n	35da <morse+0x2a>
		int delay = 0;
		if (*c == '.') delay = 100;
    35b6:	2564      	movs	r5, #100	; 0x64
		else if (*c == '-') delay = 200;
		led_on();
    35b8:	2680      	movs	r6, #128	; 0x80
    35ba:	03f6      	lsls	r6, r6, #15
    35bc:	0031      	movs	r1, r6
    35be:	2001      	movs	r0, #1
    35c0:	4b0c      	ldr	r3, [pc, #48]	; (35f4 <morse+0x44>)
    35c2:	4798      	blx	r3
		delay_ms(delay);
    35c4:	480c      	ldr	r0, [pc, #48]	; (35f8 <morse+0x48>)
    35c6:	4368      	muls	r0, r5
    35c8:	4d0c      	ldr	r5, [pc, #48]	; (35fc <morse+0x4c>)
    35ca:	47a8      	blx	r5
		led_off();
    35cc:	0031      	movs	r1, r6
    35ce:	2001      	movs	r0, #1
    35d0:	4b0b      	ldr	r3, [pc, #44]	; (3600 <morse+0x50>)
    35d2:	4798      	blx	r3
		delay_ms(100);
    35d4:	480b      	ldr	r0, [pc, #44]	; (3604 <morse+0x54>)
    35d6:	47a8      	blx	r5
		++c;
    35d8:	3401      	adds	r4, #1
	while (*c != '\0') {
    35da:	7823      	ldrb	r3, [r4, #0]
    35dc:	2b00      	cmp	r3, #0
    35de:	d007      	beq.n	35f0 <morse+0x40>
		if (*c == '.') delay = 100;
    35e0:	2b2e      	cmp	r3, #46	; 0x2e
    35e2:	d0e8      	beq.n	35b6 <morse+0x6>
		else if (*c == '-') delay = 200;
    35e4:	2b2d      	cmp	r3, #45	; 0x2d
    35e6:	d001      	beq.n	35ec <morse+0x3c>
		int delay = 0;
    35e8:	2500      	movs	r5, #0
    35ea:	e7e5      	b.n	35b8 <morse+0x8>
		else if (*c == '-') delay = 200;
    35ec:	25c8      	movs	r5, #200	; 0xc8
    35ee:	e7e3      	b.n	35b8 <morse+0x8>
	}
}
    35f0:	bd70      	pop	{r4, r5, r6, pc}
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	000022d1 	.word	0x000022d1
    35f8:	00001770 	.word	0x00001770
    35fc:	000028a1 	.word	0x000028a1
    3600:	000022e1 	.word	0x000022e1
    3604:	000927c0 	.word	0x000927c0

00003608 <SOS>:

void SOS() {
    3608:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    360a:	b672      	cpsid	i
	__disable_irq();
	
	while(1) {
		morse("...---...");
    360c:	4803      	ldr	r0, [pc, #12]	; (361c <SOS+0x14>)
    360e:	4b04      	ldr	r3, [pc, #16]	; (3620 <SOS+0x18>)
    3610:	4798      	blx	r3
		delay_ms(600);
    3612:	4804      	ldr	r0, [pc, #16]	; (3624 <SOS+0x1c>)
    3614:	4b04      	ldr	r3, [pc, #16]	; (3628 <SOS+0x20>)
    3616:	4798      	blx	r3
	while(1) {
    3618:	e7f8      	b.n	360c <SOS+0x4>
    361a:	46c0      	nop			; (mov r8, r8)
    361c:	0000632c 	.word	0x0000632c
    3620:	000035b1 	.word	0x000035b1
    3624:	0036ee80 	.word	0x0036ee80
    3628:	000028a1 	.word	0x000028a1

0000362c <rtos_main>:
int rtos_main(void) {
    362c:	b570      	push	{r4, r5, r6, lr}
	rtos_init();
    362e:	4b13      	ldr	r3, [pc, #76]	; (367c <rtos_main+0x50>)
    3630:	4798      	blx	r3
	mainproc = &_mainproc;
    3632:	4c13      	ldr	r4, [pc, #76]	; (3680 <rtos_main+0x54>)
    3634:	1d20      	adds	r0, r4, #4
    3636:	6020      	str	r0, [r4, #0]
	init_process(mainproc, MAINFUNC, RTOS_STACK_ALLOC, MAIN_STACK_ALLOC);
    3638:	2380      	movs	r3, #128	; 0x80
    363a:	22c0      	movs	r2, #192	; 0xc0
    363c:	4911      	ldr	r1, [pc, #68]	; (3684 <rtos_main+0x58>)
    363e:	00db      	lsls	r3, r3, #3
    3640:	0092      	lsls	r2, r2, #2
    3642:	4d11      	ldr	r5, [pc, #68]	; (3688 <rtos_main+0x5c>)
    3644:	47a8      	blx	r5
	dispatch_process(mainproc);
    3646:	6820      	ldr	r0, [r4, #0]
    3648:	4b10      	ldr	r3, [pc, #64]	; (368c <rtos_main+0x60>)
    364a:	4798      	blx	r3
	while (process_count) {
    364c:	e001      	b.n	3652 <rtos_main+0x26>
		dispatch_process(lastproc);
    364e:	4b0f      	ldr	r3, [pc, #60]	; (368c <rtos_main+0x60>)
    3650:	4798      	blx	r3
	while (process_count) {
    3652:	4b0f      	ldr	r3, [pc, #60]	; (3690 <rtos_main+0x64>)
    3654:	681b      	ldr	r3, [r3, #0]
    3656:	2b00      	cmp	r3, #0
    3658:	d003      	beq.n	3662 <rtos_main+0x36>
		if (!(lastproc = next_process())) break;
    365a:	4b0e      	ldr	r3, [pc, #56]	; (3694 <rtos_main+0x68>)
    365c:	4798      	blx	r3
    365e:	2800      	cmp	r0, #0
    3660:	d1f5      	bne.n	364e <rtos_main+0x22>
	if (process_count) SOS();
    3662:	4b0b      	ldr	r3, [pc, #44]	; (3690 <rtos_main+0x64>)
    3664:	681b      	ldr	r3, [r3, #0]
    3666:	2b00      	cmp	r3, #0
    3668:	d106      	bne.n	3678 <rtos_main+0x4c>
	led_on();
    366a:	2180      	movs	r1, #128	; 0x80
    366c:	03c9      	lsls	r1, r1, #15
    366e:	2001      	movs	r0, #1
    3670:	4b09      	ldr	r3, [pc, #36]	; (3698 <rtos_main+0x6c>)
    3672:	4798      	blx	r3
}
    3674:	2000      	movs	r0, #0
    3676:	bd70      	pop	{r4, r5, r6, pc}
	if (process_count) SOS();
    3678:	4b08      	ldr	r3, [pc, #32]	; (369c <rtos_main+0x70>)
    367a:	4798      	blx	r3
    367c:	0000357d 	.word	0x0000357d
    3680:	20000748 	.word	0x20000748
    3684:	00001475 	.word	0x00001475
    3688:	000036c9 	.word	0x000036c9
    368c:	000037ad 	.word	0x000037ad
    3690:	20000780 	.word	0x20000780
    3694:	00003861 	.word	0x00003861
    3698:	000022d1 	.word	0x000022d1
    369c:	00003609 	.word	0x00003609

000036a0 <TC4_Handler>:
		//"cpsie i\n" // enable interrupts
		//"bx r0\n"
	//);
//}

void rtos_preemption_handler() {
    36a0:	b510      	push	{r4, lr}
	preempt_clear_interrupts();
    36a2:	4b05      	ldr	r3, [pc, #20]	; (36b8 <TC4_Handler+0x18>)
    36a4:	4798      	blx	r3
	
	current_process->return_deadline = time_read_ticks();
    36a6:	4b05      	ldr	r3, [pc, #20]	; (36bc <TC4_Handler+0x1c>)
    36a8:	681c      	ldr	r4, [r3, #0]
    36aa:	4b05      	ldr	r3, [pc, #20]	; (36c0 <TC4_Handler+0x20>)
    36ac:	4798      	blx	r3
    36ae:	6160      	str	r0, [r4, #20]
	
	yield_process(Process_State_Running);
    36b0:	2001      	movs	r0, #1
    36b2:	4b04      	ldr	r3, [pc, #16]	; (36c4 <TC4_Handler+0x24>)
    36b4:	4798      	blx	r3
}
    36b6:	bd10      	pop	{r4, pc}
    36b8:	00002965 	.word	0x00002965
    36bc:	20000774 	.word	0x20000774
    36c0:	00002919 	.word	0x00002919
    36c4:	000039d1 	.word	0x000039d1

000036c8 <init_process>:
// 	// jump to process
// 	((void (*)(void))(current_process->data + 1))();
// }


void init_process(Process* process, void (*procFunction)(void), uint32_t stack_position, uint32_t stack_size) {
    36c8:	b510      	push	{r4, lr}
    36ca:	0004      	movs	r4, r0
	process->stack_base = rtos_stack_base - stack_position;
    36cc:	4807      	ldr	r0, [pc, #28]	; (36ec <init_process+0x24>)
    36ce:	1a82      	subs	r2, r0, r2
    36d0:	6062      	str	r2, [r4, #4]
	process->stack_size = stack_size;
    36d2:	60a3      	str	r3, [r4, #8]
	process->program_counter = (uint32_t)procFunction - 1;
    36d4:	1e4b      	subs	r3, r1, #1
    36d6:	6023      	str	r3, [r4, #0]
	process->stack_pointer = process->stack_base;
    36d8:	60e2      	str	r2, [r4, #12]
	process->procFunction = procFunction;
    36da:	6121      	str	r1, [r4, #16]
	process->return_deadline = time_read_ticks();
    36dc:	4b04      	ldr	r3, [pc, #16]	; (36f0 <init_process+0x28>)
    36de:	4798      	blx	r3
    36e0:	6160      	str	r0, [r4, #20]
	process->status = Process_State_Ready;
    36e2:	2300      	movs	r3, #0
    36e4:	61a3      	str	r3, [r4, #24]
	#ifdef RTOS_PREEMPT
	process->enable_preempt = false;
    36e6:	2224      	movs	r2, #36	; 0x24
    36e8:	54a3      	strb	r3, [r4, r2]
	#endif
}
    36ea:	bd10      	pop	{r4, pc}
    36ec:	200029d0 	.word	0x200029d0
    36f0:	00002919 	.word	0x00002919

000036f4 <switch_process>:
	process->program_counter = (uint32_t)process->procFunction - 1;
	process->return_deadline = time_read_ticks();
	process->status = Process_State_Ready;
}

void switch_process(Process* process) {
    36f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36f6:	465f      	mov	r7, fp
    36f8:	4656      	mov	r6, sl
    36fa:	464d      	mov	r5, r9
    36fc:	4644      	mov	r4, r8
    36fe:	b4f0      	push	{r4, r5, r6, r7}
    3700:	b083      	sub	sp, #12
    3702:	9001      	str	r0, [sp, #4]
    3704:	b672      	cpsid	i
	__disable_irq();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {
    3706:	2324      	movs	r3, #36	; 0x24
    3708:	5cc3      	ldrb	r3, [r0, r3]
    370a:	2b00      	cmp	r3, #0
    370c:	d122      	bne.n	3754 <switch_process+0x60>
		preempt_enable_interrupts();
	}
	#endif
	
	// set current process
	current_process = process;
    370e:	4b1b      	ldr	r3, [pc, #108]	; (377c <switch_process+0x88>)
    3710:	9a01      	ldr	r2, [sp, #4]
    3712:	601a      	str	r2, [r3, #0]
	
	// set process state to done. If it returns and it is not finished,
	// the preemption routines will set it to running
	process->status = Process_State_Done;
    3714:	2303      	movs	r3, #3
    3716:	6193      	str	r3, [r2, #24]
	
	// // set stack pointer to process stack pointer
	// stack_pointer = process->stack_pointer;
	// // __set_PSP(process->stack_pointer);

	__set_PSP(process->stack_pointer);
    3718:	68d3      	ldr	r3, [r2, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    371a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    371e:	2302      	movs	r3, #2
    3720:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3724:	f3bf 8f6f 	isb	sy
	USE_PSP();
	
	// __enable_irq();
	
	// jump to process
	((void (*)(void))(process->program_counter + 1))();
    3728:	9201      	str	r2, [sp, #4]
    372a:	6813      	ldr	r3, [r2, #0]
    372c:	3301      	adds	r3, #1
    372e:	4798      	blx	r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3730:	2300      	movs	r3, #0
    3732:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3736:	f3bf 8f6f 	isb	sy
	// stack_pointer = __get_PSP();

	USE_MSP();
	
	#ifdef RTOS_PREEMPT
	if (process->enable_preempt) {	
    373a:	3324      	adds	r3, #36	; 0x24
    373c:	9a01      	ldr	r2, [sp, #4]
    373e:	5cd3      	ldrb	r3, [r2, r3]
    3740:	2b00      	cmp	r3, #0
    3742:	d118      	bne.n	3776 <switch_process+0x82>
  __ASM volatile ("cpsie i" : : : "memory");
    3744:	b662      	cpsie	i

	
	
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_DIRSET = DEBUG_LED_MASK;
	// PORT_REGS->GROUP[DEBUG_LED_PORT].PORT_OUTSET = DEBUG_LED_MASK;
}
    3746:	b003      	add	sp, #12
    3748:	bcf0      	pop	{r4, r5, r6, r7}
    374a:	46bb      	mov	fp, r7
    374c:	46b2      	mov	sl, r6
    374e:	46a9      	mov	r9, r5
    3750:	46a0      	mov	r8, r4
    3752:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preempt_set_interrupt_time(time_read_ticks() + RTOS_TICK_TIME * time_ticks_us_mult);
    3754:	4b0a      	ldr	r3, [pc, #40]	; (3780 <switch_process+0x8c>)
    3756:	4798      	blx	r3
    3758:	4b0a      	ldr	r3, [pc, #40]	; (3784 <switch_process+0x90>)
    375a:	681a      	ldr	r2, [r3, #0]
    375c:	0153      	lsls	r3, r2, #5
    375e:	1a9b      	subs	r3, r3, r2
    3760:	009b      	lsls	r3, r3, #2
    3762:	189b      	adds	r3, r3, r2
    3764:	00db      	lsls	r3, r3, #3
    3766:	18c0      	adds	r0, r0, r3
    3768:	4b07      	ldr	r3, [pc, #28]	; (3788 <switch_process+0x94>)
    376a:	4798      	blx	r3
		preempt_clear_interrupts();
    376c:	4b07      	ldr	r3, [pc, #28]	; (378c <switch_process+0x98>)
    376e:	4798      	blx	r3
		preempt_enable_interrupts();
    3770:	4b07      	ldr	r3, [pc, #28]	; (3790 <switch_process+0x9c>)
    3772:	4798      	blx	r3
    3774:	e7cb      	b.n	370e <switch_process+0x1a>
		preempt_disable_interrupts();
    3776:	4b07      	ldr	r3, [pc, #28]	; (3794 <switch_process+0xa0>)
    3778:	4798      	blx	r3
    377a:	e7e3      	b.n	3744 <switch_process+0x50>
    377c:	20000774 	.word	0x20000774
    3780:	00002919 	.word	0x00002919
    3784:	00006368 	.word	0x00006368
    3788:	00002981 	.word	0x00002981
    378c:	00002965 	.word	0x00002965
    3790:	0000293d 	.word	0x0000293d
    3794:	0000294d 	.word	0x0000294d

00003798 <init_process_queue>:


void init_process_queue() {
	process_queue_head = process_queue_tail = 0;
    3798:	4b03      	ldr	r3, [pc, #12]	; (37a8 <init_process_queue+0x10>)
    379a:	2200      	movs	r2, #0
    379c:	605a      	str	r2, [r3, #4]
    379e:	609a      	str	r2, [r3, #8]
	current_process = 0;
    37a0:	601a      	str	r2, [r3, #0]
	process_count = 0;
    37a2:	60da      	str	r2, [r3, #12]
}
    37a4:	4770      	bx	lr
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	20000774 	.word	0x20000774

000037ac <dispatch_process>:

bool dispatch_process(Process* process) {
    37ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37ae:	464f      	mov	r7, r9
    37b0:	4646      	mov	r6, r8
    37b2:	b4c0      	push	{r6, r7}
    37b4:	4681      	mov	r9, r0
  __ASM volatile ("cpsid i" : : : "memory");
    37b6:	b672      	cpsid	i
	__disable_irq();
	
	// check process is not finished
	if (process->status == Process_State_Done) {
    37b8:	6983      	ldr	r3, [r0, #24]
    37ba:	2b03      	cmp	r3, #3
    37bc:	d049      	beq.n	3852 <dispatch_process+0xa6>
		return false;
	}
	// check if there is space in the queue
	// if not return false
	if (process_count >= RTOS_MAX_PROCESS_COUNT) return false;
    37be:	4b26      	ldr	r3, [pc, #152]	; (3858 <dispatch_process+0xac>)
    37c0:	68db      	ldr	r3, [r3, #12]
    37c2:	2b0f      	cmp	r3, #15
    37c4:	dd04      	ble.n	37d0 <dispatch_process+0x24>
    37c6:	2000      	movs	r0, #0
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
	
	__enable_irq();
	
	return true;
}
    37c8:	bcc0      	pop	{r6, r7}
    37ca:	46b9      	mov	r9, r7
    37cc:	46b0      	mov	r8, r6
    37ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_time = time_read_ticks();
    37d0:	4b22      	ldr	r3, [pc, #136]	; (385c <dispatch_process+0xb0>)
    37d2:	4798      	blx	r3
    37d4:	4680      	mov	r8, r0
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    37d6:	464b      	mov	r3, r9
    37d8:	699b      	ldr	r3, [r3, #24]
    37da:	2b00      	cmp	r3, #0
    37dc:	d007      	beq.n	37ee <dispatch_process+0x42>
    37de:	464b      	mov	r3, r9
    37e0:	695f      	ldr	r7, [r3, #20]
    37e2:	1a3f      	subs	r7, r7, r0
	int queue_pointer = process_queue_tail;
    37e4:	4b1c      	ldr	r3, [pc, #112]	; (3858 <dispatch_process+0xac>)
    37e6:	685b      	ldr	r3, [r3, #4]
    37e8:	469c      	mov	ip, r3
	for (int i = 0; i < process_count; ++i) {
    37ea:	2500      	movs	r5, #0
    37ec:	e00c      	b.n	3808 <dispatch_process+0x5c>
	uint32_t time_to_deadline = (process->status == Process_State_Ready) ? 0 : process->return_deadline - current_time;
    37ee:	2700      	movs	r7, #0
    37f0:	e7f8      	b.n	37e4 <dispatch_process+0x38>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    37f2:	3110      	adds	r1, #16
    37f4:	e00e      	b.n	3814 <dispatch_process+0x68>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    37f6:	2200      	movs	r2, #0
		if ((int)next_time_to_deadline > (int)time_to_deadline) {
    37f8:	42ba      	cmp	r2, r7
    37fa:	dd16      	ble.n	382a <dispatch_process+0x7e>
			process_queue[queue_pointer] = process_queue[next_queue_pointer];
    37fc:	4a16      	ldr	r2, [pc, #88]	; (3858 <dispatch_process+0xac>)
    37fe:	009e      	lsls	r6, r3, #2
    3800:	1993      	adds	r3, r2, r6
    3802:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < process_count; ++i) {
    3804:	3501      	adds	r5, #1
		queue_pointer = next_queue_pointer;
    3806:	000b      	movs	r3, r1
	for (int i = 0; i < process_count; ++i) {
    3808:	4a13      	ldr	r2, [pc, #76]	; (3858 <dispatch_process+0xac>)
    380a:	68d6      	ldr	r6, [r2, #12]
    380c:	42ae      	cmp	r6, r5
    380e:	dd0c      	ble.n	382a <dispatch_process+0x7e>
		if (next_queue_pointer < 0) next_queue_pointer += RTOS_MAX_PROCESS_COUNT;
    3810:	1e59      	subs	r1, r3, #1
    3812:	d4ee      	bmi.n	37f2 <dispatch_process+0x46>
		uint32_t next_time_to_deadline = (process_queue[next_queue_pointer]->status == Process_State_Ready) ? 0 : process_queue[next_queue_pointer]->return_deadline - current_time;
    3814:	4a10      	ldr	r2, [pc, #64]	; (3858 <dispatch_process+0xac>)
    3816:	0088      	lsls	r0, r1, #2
    3818:	1812      	adds	r2, r2, r0
    381a:	6910      	ldr	r0, [r2, #16]
    381c:	6982      	ldr	r2, [r0, #24]
    381e:	2a00      	cmp	r2, #0
    3820:	d0e9      	beq.n	37f6 <dispatch_process+0x4a>
    3822:	6942      	ldr	r2, [r0, #20]
    3824:	4644      	mov	r4, r8
    3826:	1b12      	subs	r2, r2, r4
    3828:	e7e6      	b.n	37f8 <dispatch_process+0x4c>
	process_queue[queue_pointer] = process;
    382a:	4a0b      	ldr	r2, [pc, #44]	; (3858 <dispatch_process+0xac>)
    382c:	009b      	lsls	r3, r3, #2
    382e:	18d3      	adds	r3, r2, r3
    3830:	4649      	mov	r1, r9
    3832:	6119      	str	r1, [r3, #16]
	++process_count;
    3834:	1c73      	adds	r3, r6, #1
    3836:	60d3      	str	r3, [r2, #12]
	++process_queue_tail;
    3838:	4666      	mov	r6, ip
    383a:	3601      	adds	r6, #1
    383c:	6056      	str	r6, [r2, #4]
	process_queue_tail %= RTOS_MAX_PROCESS_COUNT;
    383e:	17f1      	asrs	r1, r6, #31
    3840:	0f09      	lsrs	r1, r1, #28
    3842:	1876      	adds	r6, r6, r1
    3844:	230f      	movs	r3, #15
    3846:	4033      	ands	r3, r6
    3848:	1a5b      	subs	r3, r3, r1
    384a:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    384c:	b662      	cpsie	i
	return true;
    384e:	2001      	movs	r0, #1
    3850:	e7ba      	b.n	37c8 <dispatch_process+0x1c>
		return false;
    3852:	2000      	movs	r0, #0
    3854:	e7b8      	b.n	37c8 <dispatch_process+0x1c>
    3856:	46c0      	nop			; (mov r8, r8)
    3858:	20000774 	.word	0x20000774
    385c:	00002919 	.word	0x00002919

00003860 <next_process>:

Process* next_process() {
    3860:	b5f0      	push	{r4, r5, r6, r7, lr}
    3862:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    3864:	b672      	cpsid	i
	__disable_irq();
	//Process* proc = process_queue[process_queue_head];
	// find first unblocked process, or unblock process if possible
	int queue_pointer = process_queue_head;
    3866:	4b57      	ldr	r3, [pc, #348]	; (39c4 <next_process+0x164>)
    3868:	689e      	ldr	r6, [r3, #8]
	//Process* proc = 0;
	int blocked_count = 0;
    386a:	2500      	movs	r5, #0
	
	for (; blocked_count < process_count; ++blocked_count) {
    386c:	e015      	b.n	389a <next_process+0x3a>
			if (data->callback) data->callback();
			// check if unblocked by callback
			if (current_process->status == Process_State_Running) break;
			// get variable, avoiding accessing protected portions of memory
			if (data->mask) {
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    386e:	6823      	ldr	r3, [r4, #0]
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	e03d      	b.n	38f0 <next_process+0x90>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    3874:	6823      	ldr	r3, [r4, #0]
    3876:	881b      	ldrh	r3, [r3, #0]
    3878:	e03a      	b.n	38f0 <next_process+0x90>
				variable &= data->mask;
			}
			// switch condition
			switch (data->condition) {
				case Process_Wait_Until_Equal:
				if (variable == data->value) unblocked = true;
    387a:	6863      	ldr	r3, [r4, #4]
    387c:	42bb      	cmp	r3, r7
    387e:	d041      	beq.n	3904 <next_process+0xa4>
				default:
				return 0; // error
				break;
			}
			// if unblocked break
			if (unblocked) {
    3880:	466b      	mov	r3, sp
    3882:	3307      	adds	r3, #7
    3884:	781b      	ldrb	r3, [r3, #0]
    3886:	2b00      	cmp	r3, #0
    3888:	d163      	bne.n	3952 <next_process+0xf2>
			}
		}
		
		// else if process is blocked and it cannot be unblocked
		// advance the queue pointer
		++queue_pointer;
    388a:	3601      	adds	r6, #1
		queue_pointer %= RTOS_MAX_PROCESS_COUNT;
    388c:	17f3      	asrs	r3, r6, #31
    388e:	0f1b      	lsrs	r3, r3, #28
    3890:	18f6      	adds	r6, r6, r3
    3892:	220f      	movs	r2, #15
    3894:	4016      	ands	r6, r2
    3896:	1af6      	subs	r6, r6, r3
	for (; blocked_count < process_count; ++blocked_count) {
    3898:	3501      	adds	r5, #1
    389a:	4b4a      	ldr	r3, [pc, #296]	; (39c4 <next_process+0x164>)
    389c:	68db      	ldr	r3, [r3, #12]
    389e:	42ab      	cmp	r3, r5
    38a0:	dd59      	ble.n	3956 <next_process+0xf6>
		current_process = process_queue[queue_pointer];
    38a2:	4b48      	ldr	r3, [pc, #288]	; (39c4 <next_process+0x164>)
    38a4:	00b2      	lsls	r2, r6, #2
    38a6:	189a      	adds	r2, r3, r2
    38a8:	6912      	ldr	r2, [r2, #16]
    38aa:	601a      	str	r2, [r3, #0]
		if (current_process->status != Process_State_Blocked) break;
    38ac:	6993      	ldr	r3, [r2, #24]
    38ae:	2b02      	cmp	r3, #2
    38b0:	d151      	bne.n	3956 <next_process+0xf6>
			volatile Process_Wait_Until_Data* data = current_process->internal_data;
    38b2:	69d4      	ldr	r4, [r2, #28]
			volatile bool unblocked = false;
    38b4:	466b      	mov	r3, sp
    38b6:	2200      	movs	r2, #0
    38b8:	71da      	strb	r2, [r3, #7]
			if (data->callback) data->callback();
    38ba:	68e3      	ldr	r3, [r4, #12]
    38bc:	2b00      	cmp	r3, #0
    38be:	d001      	beq.n	38c4 <next_process+0x64>
    38c0:	68e3      	ldr	r3, [r4, #12]
    38c2:	4798      	blx	r3
			if (current_process->status == Process_State_Running) break;
    38c4:	4b3f      	ldr	r3, [pc, #252]	; (39c4 <next_process+0x164>)
    38c6:	681a      	ldr	r2, [r3, #0]
    38c8:	6993      	ldr	r3, [r2, #24]
    38ca:	2b01      	cmp	r3, #1
    38cc:	d043      	beq.n	3956 <next_process+0xf6>
			if (data->mask) {
    38ce:	68a3      	ldr	r3, [r4, #8]
    38d0:	2b00      	cmp	r3, #0
    38d2:	d00f      	beq.n	38f4 <next_process+0x94>
				if ((data->mask & U8_MASK) == data->mask) variable = *((uint8_t*)(data->variable));
    38d4:	68a1      	ldr	r1, [r4, #8]
    38d6:	23ff      	movs	r3, #255	; 0xff
    38d8:	400b      	ands	r3, r1
    38da:	68a1      	ldr	r1, [r4, #8]
    38dc:	428b      	cmp	r3, r1
    38de:	d0c6      	beq.n	386e <next_process+0xe>
				else if ((data->mask & U16_MASK) == data->mask) variable = *((uint16_t*)(data->variable));
    38e0:	68a3      	ldr	r3, [r4, #8]
    38e2:	041b      	lsls	r3, r3, #16
    38e4:	0c1b      	lsrs	r3, r3, #16
    38e6:	68a1      	ldr	r1, [r4, #8]
    38e8:	428b      	cmp	r3, r1
    38ea:	d0c3      	beq.n	3874 <next_process+0x14>
				else variable = *(data->variable);
    38ec:	6823      	ldr	r3, [r4, #0]
    38ee:	681b      	ldr	r3, [r3, #0]
				variable &= data->mask;
    38f0:	68a7      	ldr	r7, [r4, #8]
    38f2:	401f      	ands	r7, r3
			switch (data->condition) {
    38f4:	7c23      	ldrb	r3, [r4, #16]
    38f6:	b2db      	uxtb	r3, r3
    38f8:	2b06      	cmp	r3, #6
    38fa:	d861      	bhi.n	39c0 <next_process+0x160>
    38fc:	009b      	lsls	r3, r3, #2
    38fe:	4932      	ldr	r1, [pc, #200]	; (39c8 <next_process+0x168>)
    3900:	58cb      	ldr	r3, [r1, r3]
    3902:	469f      	mov	pc, r3
				if (variable == data->value) unblocked = true;
    3904:	466b      	mov	r3, sp
    3906:	2101      	movs	r1, #1
    3908:	71d9      	strb	r1, [r3, #7]
    390a:	e7b9      	b.n	3880 <next_process+0x20>
				if (variable != data->value) unblocked = true;
    390c:	6863      	ldr	r3, [r4, #4]
    390e:	42bb      	cmp	r3, r7
    3910:	d0b6      	beq.n	3880 <next_process+0x20>
    3912:	466b      	mov	r3, sp
    3914:	2101      	movs	r1, #1
    3916:	71d9      	strb	r1, [r3, #7]
    3918:	e7b2      	b.n	3880 <next_process+0x20>
				if (variable > data->value) unblocked = true;
    391a:	6863      	ldr	r3, [r4, #4]
    391c:	42bb      	cmp	r3, r7
    391e:	d2af      	bcs.n	3880 <next_process+0x20>
    3920:	466b      	mov	r3, sp
    3922:	2101      	movs	r1, #1
    3924:	71d9      	strb	r1, [r3, #7]
    3926:	e7ab      	b.n	3880 <next_process+0x20>
				if (variable >= data->value) unblocked = true;
    3928:	6863      	ldr	r3, [r4, #4]
    392a:	42bb      	cmp	r3, r7
    392c:	d8a8      	bhi.n	3880 <next_process+0x20>
    392e:	466b      	mov	r3, sp
    3930:	2101      	movs	r1, #1
    3932:	71d9      	strb	r1, [r3, #7]
    3934:	e7a4      	b.n	3880 <next_process+0x20>
				if (variable < data->value) unblocked = true;
    3936:	6863      	ldr	r3, [r4, #4]
    3938:	42bb      	cmp	r3, r7
    393a:	d9a1      	bls.n	3880 <next_process+0x20>
    393c:	466b      	mov	r3, sp
    393e:	2101      	movs	r1, #1
    3940:	71d9      	strb	r1, [r3, #7]
    3942:	e79d      	b.n	3880 <next_process+0x20>
				if (variable <= data->value) unblocked = true;
    3944:	6863      	ldr	r3, [r4, #4]
    3946:	42bb      	cmp	r3, r7
    3948:	d39a      	bcc.n	3880 <next_process+0x20>
    394a:	466b      	mov	r3, sp
    394c:	2101      	movs	r1, #1
    394e:	71d9      	strb	r1, [r3, #7]
    3950:	e796      	b.n	3880 <next_process+0x20>
				current_process->status = Process_State_Running;
    3952:	2301      	movs	r3, #1
    3954:	6193      	str	r3, [r2, #24]
	}
	
	bool run_process = blocked_count != process_count;
    3956:	4b1b      	ldr	r3, [pc, #108]	; (39c4 <next_process+0x164>)
    3958:	68dc      	ldr	r4, [r3, #12]

	// move blocked processes up queue
	for (; blocked_count > 0; --blocked_count) {
    395a:	0028      	movs	r0, r5
    395c:	e015      	b.n	398a <next_process+0x12a>
		int source_pointer = (process_queue_head + blocked_count - 1) % RTOS_MAX_PROCESS_COUNT;
    395e:	4919      	ldr	r1, [pc, #100]	; (39c4 <next_process+0x164>)
    3960:	688e      	ldr	r6, [r1, #8]
    3962:	1986      	adds	r6, r0, r6
    3964:	1e73      	subs	r3, r6, #1
    3966:	17df      	asrs	r7, r3, #31
    3968:	0f3f      	lsrs	r7, r7, #28
    396a:	19db      	adds	r3, r3, r7
    396c:	220f      	movs	r2, #15
    396e:	4013      	ands	r3, r2
    3970:	1bdb      	subs	r3, r3, r7
		int destination_pointer = (process_queue_head + blocked_count) % RTOS_MAX_PROCESS_COUNT;
    3972:	17f7      	asrs	r7, r6, #31
    3974:	0f3f      	lsrs	r7, r7, #28
    3976:	19f6      	adds	r6, r6, r7
    3978:	4032      	ands	r2, r6
    397a:	1bd2      	subs	r2, r2, r7
		process_queue[destination_pointer] = process_queue[source_pointer];
    397c:	009b      	lsls	r3, r3, #2
    397e:	18cb      	adds	r3, r1, r3
    3980:	691b      	ldr	r3, [r3, #16]
    3982:	0092      	lsls	r2, r2, #2
    3984:	1889      	adds	r1, r1, r2
    3986:	610b      	str	r3, [r1, #16]
	for (; blocked_count > 0; --blocked_count) {
    3988:	3801      	subs	r0, #1
    398a:	2800      	cmp	r0, #0
    398c:	dce7      	bgt.n	395e <next_process+0xfe>
	}

	--process_count;
    398e:	490d      	ldr	r1, [pc, #52]	; (39c4 <next_process+0x164>)
    3990:	1e63      	subs	r3, r4, #1
    3992:	60cb      	str	r3, [r1, #12]
	++process_queue_head;
    3994:	688b      	ldr	r3, [r1, #8]
    3996:	3301      	adds	r3, #1
    3998:	608b      	str	r3, [r1, #8]
	process_queue_head %= RTOS_MAX_PROCESS_COUNT;
    399a:	17d8      	asrs	r0, r3, #31
    399c:	0f00      	lsrs	r0, r0, #28
    399e:	181b      	adds	r3, r3, r0
    39a0:	220f      	movs	r2, #15
    39a2:	4013      	ands	r3, r2
    39a4:	1a1b      	subs	r3, r3, r0
    39a6:	608b      	str	r3, [r1, #8]
  __ASM volatile ("cpsie i" : : : "memory");
    39a8:	b662      	cpsie	i
	
	__enable_irq();

	// run next unblocked process (if there are unblocked processes)
	if (run_process) switch_process(current_process);
    39aa:	42ac      	cmp	r4, r5
    39ac:	d103      	bne.n	39b6 <next_process+0x156>
	
	return current_process;
    39ae:	4b05      	ldr	r3, [pc, #20]	; (39c4 <next_process+0x164>)
    39b0:	6818      	ldr	r0, [r3, #0]
}
    39b2:	b003      	add	sp, #12
    39b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (run_process) switch_process(current_process);
    39b6:	4b03      	ldr	r3, [pc, #12]	; (39c4 <next_process+0x164>)
    39b8:	6818      	ldr	r0, [r3, #0]
    39ba:	4b04      	ldr	r3, [pc, #16]	; (39cc <next_process+0x16c>)
    39bc:	4798      	blx	r3
    39be:	e7f6      	b.n	39ae <next_process+0x14e>
			switch (data->condition) {
    39c0:	2000      	movs	r0, #0
    39c2:	e7f6      	b.n	39b2 <next_process+0x152>
    39c4:	20000774 	.word	0x20000774
    39c8:	00006338 	.word	0x00006338
    39cc:	000036f5 	.word	0x000036f5

000039d0 <yield_process>:


__attribute__((optimize("-Og"))) void yield_process(int process_status) {
    39d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39d2:	465f      	mov	r7, fp
    39d4:	4656      	mov	r6, sl
    39d6:	464d      	mov	r5, r9
    39d8:	4644      	mov	r4, r8
    39da:	b4f0      	push	{r4, r5, r6, r7}
    39dc:	b083      	sub	sp, #12
    39de:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    39e0:	f3ef 8314 	mrs	r3, CONTROL
	// throw error if program tries to yield in an interrupt
	// i.e check the stack is the PSP (control is 2)
	if (__get_CONTROL() == 0) SOS();
    39e4:	2b00      	cmp	r3, #0
    39e6:	d01c      	beq.n	3a22 <yield_process+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    39e8:	b672      	cpsid	i

	__disable_irq();
	
	// set status of process
	current_process->status = process_status;
    39ea:	4b0f      	ldr	r3, [pc, #60]	; (3a28 <yield_process+0x58>)
    39ec:	9301      	str	r3, [sp, #4]
    39ee:	681b      	ldr	r3, [r3, #0]
    39f0:	619c      	str	r4, [r3, #24]
	
	// save stack pointer of process
	current_process->stack_pointer = stack_pointer - 8;
    39f2:	2208      	movs	r2, #8
    39f4:	4252      	negs	r2, r2
    39f6:	446a      	add	r2, sp
    39f8:	60da      	str	r2, [r3, #12]
	
	// set stack pointer to be above the first address in the stack (link register)
	stack_pointer = current_process->stack_base - 4;
    39fa:	685a      	ldr	r2, [r3, #4]
    39fc:	3a04      	subs	r2, #4
    39fe:	4695      	mov	sp, r2
	
	// read program counter
	// register stack isn't overwritten
	register uint32_t pc;
	// asm macro
	READ_PROGRAM_COUNTER(pc);
    3a00:	467a      	mov	r2, pc
	// save program counter for return (accounting for pipeline)
	current_process->program_counter = pc + 4; // 4
    3a02:	3204      	adds	r2, #4
    3a04:	601a      	str	r2, [r3, #0]
	
	// branch (return) to process caller
	POP_PROGRAM_COUNTER();
    3a06:	bd00      	pop	{pc}
	
	// execution will resume here when control is returned by the OS
	DISCARD_REGISTERS;
	
	stack_pointer += 8;
    3a08:	b002      	add	sp, #8
	
	// set ended to true so OS will know if process ends
	current_process->status = Process_State_Done;
    3a0a:	9b01      	ldr	r3, [sp, #4]
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	2203      	movs	r2, #3
    3a10:	619a      	str	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
    3a12:	b662      	cpsie	i
	
	__enable_irq();
}
    3a14:	b003      	add	sp, #12
    3a16:	bcf0      	pop	{r4, r5, r6, r7}
    3a18:	46bb      	mov	fp, r7
    3a1a:	46b2      	mov	sl, r6
    3a1c:	46a9      	mov	r9, r5
    3a1e:	46a0      	mov	r8, r4
    3a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__get_CONTROL() == 0) SOS();
    3a22:	4b02      	ldr	r3, [pc, #8]	; (3a2c <yield_process+0x5c>)
    3a24:	4798      	blx	r3
    3a26:	e7df      	b.n	39e8 <yield_process+0x18>
    3a28:	20000774 	.word	0x20000774
    3a2c:	00003609 	.word	0x00003609

00003a30 <wait_until>:
	//current_process->status = process_status;
	//NVIC_SetPendingIRQ(TC4_IRQn);
//}


void wait_until(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition) {
    3a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a32:	464f      	mov	r7, r9
    3a34:	4646      	mov	r6, r8
    3a36:	b4c0      	push	{r6, r7}
    3a38:	b08b      	sub	sp, #44	; 0x2c
    3a3a:	4681      	mov	r9, r0
    3a3c:	000f      	movs	r7, r1
    3a3e:	4690      	mov	r8, r2
    3a40:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    3a42:	4e0f      	ldr	r6, [pc, #60]	; (3a80 <wait_until+0x50>)
    3a44:	6834      	ldr	r4, [r6, #0]
    3a46:	4b0f      	ldr	r3, [pc, #60]	; (3a84 <wait_until+0x54>)
    3a48:	4798      	blx	r3
    3a4a:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3a4c:	ac05      	add	r4, sp, #20
    3a4e:	464b      	mov	r3, r9
    3a50:	9305      	str	r3, [sp, #20]
    3a52:	9706      	str	r7, [sp, #24]
    3a54:	4643      	mov	r3, r8
    3a56:	9307      	str	r3, [sp, #28]
    3a58:	2300      	movs	r3, #0
    3a5a:	9308      	str	r3, [sp, #32]
    3a5c:	7425      	strb	r5, [r4, #16]
    3a5e:	466b      	mov	r3, sp
    3a60:	001a      	movs	r2, r3
    3a62:	cc23      	ldmia	r4!, {r0, r1, r5}
    3a64:	c223      	stmia	r2!, {r0, r1, r5}
    3a66:	cc03      	ldmia	r4!, {r0, r1}
    3a68:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = 0
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3a6a:	6832      	ldr	r2, [r6, #0]
    3a6c:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3a6e:	2002      	movs	r0, #2
    3a70:	4b05      	ldr	r3, [pc, #20]	; (3a88 <wait_until+0x58>)
    3a72:	4798      	blx	r3
}
    3a74:	b00b      	add	sp, #44	; 0x2c
    3a76:	bcc0      	pop	{r6, r7}
    3a78:	46b9      	mov	r9, r7
    3a7a:	46b0      	mov	r8, r6
    3a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a7e:	46c0      	nop			; (mov r8, r8)
    3a80:	20000774 	.word	0x20000774
    3a84:	00002919 	.word	0x00002919
    3a88:	000039d1 	.word	0x000039d1

00003a8c <wait_until_callback>:

void wait_until_callback(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    3a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a8e:	464f      	mov	r7, r9
    3a90:	4646      	mov	r6, r8
    3a92:	b4c0      	push	{r6, r7}
    3a94:	b08b      	sub	sp, #44	; 0x2c
    3a96:	4681      	mov	r9, r0
    3a98:	000f      	movs	r7, r1
    3a9a:	4690      	mov	r8, r2
    3a9c:	001d      	movs	r5, r3
	// set return deadline to now (as soon as possible)
	current_process->return_deadline = time_read_ticks();
    3a9e:	4e0f      	ldr	r6, [pc, #60]	; (3adc <wait_until_callback+0x50>)
    3aa0:	6834      	ldr	r4, [r6, #0]
    3aa2:	4b0f      	ldr	r3, [pc, #60]	; (3ae0 <wait_until_callback+0x54>)
    3aa4:	4798      	blx	r3
    3aa6:	6160      	str	r0, [r4, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3aa8:	ac05      	add	r4, sp, #20
    3aaa:	464b      	mov	r3, r9
    3aac:	9305      	str	r3, [sp, #20]
    3aae:	9706      	str	r7, [sp, #24]
    3ab0:	4643      	mov	r3, r8
    3ab2:	9307      	str	r3, [sp, #28]
    3ab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ab6:	9308      	str	r3, [sp, #32]
    3ab8:	7425      	strb	r5, [r4, #16]
    3aba:	466b      	mov	r3, sp
    3abc:	001a      	movs	r2, r3
    3abe:	cc23      	ldmia	r4!, {r0, r1, r5}
    3ac0:	c223      	stmia	r2!, {r0, r1, r5}
    3ac2:	cc03      	ldmia	r4!, {r0, r1}
    3ac4:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3ac6:	6832      	ldr	r2, [r6, #0]
    3ac8:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3aca:	2002      	movs	r0, #2
    3acc:	4b05      	ldr	r3, [pc, #20]	; (3ae4 <wait_until_callback+0x58>)
    3ace:	4798      	blx	r3
}
    3ad0:	b00b      	add	sp, #44	; 0x2c
    3ad2:	bcc0      	pop	{r6, r7}
    3ad4:	46b9      	mov	r9, r7
    3ad6:	46b0      	mov	r8, r6
    3ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	20000774 	.word	0x20000774
    3ae0:	00002919 	.word	0x00002919
    3ae4:	000039d1 	.word	0x000039d1

00003ae8 <wait_until_callback_preserve_deadline>:

void wait_until_callback_preserve_deadline(void* variable, uint32_t value, uint32_t mask, Process_Wait_Until_Condition condition, void (*callback)(void)) {
    3ae8:	b530      	push	{r4, r5, lr}
    3aea:	b08b      	sub	sp, #44	; 0x2c
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3aec:	ac05      	add	r4, sp, #20
    3aee:	9005      	str	r0, [sp, #20]
    3af0:	9106      	str	r1, [sp, #24]
    3af2:	9207      	str	r2, [sp, #28]
    3af4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3af6:	9208      	str	r2, [sp, #32]
    3af8:	7423      	strb	r3, [r4, #16]
    3afa:	466b      	mov	r3, sp
    3afc:	001a      	movs	r2, r3
    3afe:	cc23      	ldmia	r4!, {r0, r1, r5}
    3b00:	c223      	stmia	r2!, {r0, r1, r5}
    3b02:	cc03      	ldmia	r4!, {r0, r1}
    3b04:	c203      	stmia	r2!, {r0, r1}
		.condition = condition,
		.callback = callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3b06:	4a04      	ldr	r2, [pc, #16]	; (3b18 <wait_until_callback_preserve_deadline+0x30>)
    3b08:	6812      	ldr	r2, [r2, #0]
    3b0a:	61d3      	str	r3, [r2, #28]
	
	yield_process(Process_State_Blocked);
    3b0c:	2002      	movs	r0, #2
    3b0e:	4b03      	ldr	r3, [pc, #12]	; (3b1c <wait_until_callback_preserve_deadline+0x34>)
    3b10:	4798      	blx	r3
    3b12:	b00b      	add	sp, #44	; 0x2c
    3b14:	bd30      	pop	{r4, r5, pc}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	20000774 	.word	0x20000774
    3b1c:	000039d1 	.word	0x000039d1

00003b20 <rtos_delay_callback>:
#include "rtos_util.h"
#include "rtos_process.h"

extern void yield_process(int process_status);

void rtos_delay_callback() {
    3b20:	b500      	push	{lr}
    3b22:	b083      	sub	sp, #12
	// if ((int)(current_process->return_deadline - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
	volatile uint32_t time = time_read_ticks();
    3b24:	4b0c      	ldr	r3, [pc, #48]	; (3b58 <rtos_delay_callback+0x38>)
    3b26:	4798      	blx	r3
    3b28:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    3b2a:	4b0c      	ldr	r3, [pc, #48]	; (3b5c <rtos_delay_callback+0x3c>)
    3b2c:	681a      	ldr	r2, [r3, #0]
    3b2e:	6953      	ldr	r3, [r2, #20]
    3b30:	9901      	ldr	r1, [sp, #4]
    3b32:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    3b34:	490a      	ldr	r1, [pc, #40]	; (3b60 <rtos_delay_callback+0x40>)
    3b36:	6809      	ldr	r1, [r1, #0]
    3b38:	4299      	cmp	r1, r3
    3b3a:	dc07      	bgt.n	3b4c <rtos_delay_callback+0x2c>
    3b3c:	4908      	ldr	r1, [pc, #32]	; (3b60 <rtos_delay_callback+0x40>)
    3b3e:	6808      	ldr	r0, [r1, #0]
    3b40:	4907      	ldr	r1, [pc, #28]	; (3b60 <rtos_delay_callback+0x40>)
    3b42:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    3b44:	2b00      	cmp	r3, #0
    3b46:	dd03      	ble.n	3b50 <rtos_delay_callback+0x30>
}
    3b48:	b003      	add	sp, #12
    3b4a:	bd00      	pop	{pc}
	min = (t < min) ? t : min;
    3b4c:	0018      	movs	r0, r3
    3b4e:	e7f7      	b.n	3b40 <rtos_delay_callback+0x20>
	if (t <= 0) current_process->status = Process_State_Running;
    3b50:	2301      	movs	r3, #1
    3b52:	6193      	str	r3, [r2, #24]
}
    3b54:	e7f8      	b.n	3b48 <rtos_delay_callback+0x28>
    3b56:	46c0      	nop			; (mov r8, r8)
    3b58:	00002919 	.word	0x00002919
    3b5c:	20000774 	.word	0x20000774
    3b60:	200000f4 	.word	0x200000f4

00003b64 <rtos_delay_ctick>:

void rtos_delay_ctick(uint32_t n) {
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	b086      	sub	sp, #24
    3b68:	0004      	movs	r4, r0
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + n;
    3b6a:	4b09      	ldr	r3, [pc, #36]	; (3b90 <rtos_delay_ctick+0x2c>)
    3b6c:	4798      	blx	r3
    3b6e:	4b09      	ldr	r3, [pc, #36]	; (3b94 <rtos_delay_ctick+0x30>)
    3b70:	681d      	ldr	r5, [r3, #0]
    3b72:	1900      	adds	r0, r0, r4
    3b74:	6168      	str	r0, [r5, #20]
	
	// create structure to define when process resumes execution
	volatile Process_Wait_Until_Data data = {
    3b76:	aa01      	add	r2, sp, #4
    3b78:	4b07      	ldr	r3, [pc, #28]	; (3b98 <rtos_delay_ctick+0x34>)
    3b7a:	0011      	movs	r1, r2
    3b7c:	cb51      	ldmia	r3!, {r0, r4, r6}
    3b7e:	c151      	stmia	r1!, {r0, r4, r6}
    3b80:	cb11      	ldmia	r3!, {r0, r4}
    3b82:	c111      	stmia	r1!, {r0, r4}
		.condition = Process_Wait_Until_None,
		.callback = rtos_delay_callback
	};
	
	// make internal data pointer point to structure
	current_process->internal_data = &data;
    3b84:	61ea      	str	r2, [r5, #28]
	
	yield_process(Process_State_Blocked);
    3b86:	2002      	movs	r0, #2
    3b88:	4b04      	ldr	r3, [pc, #16]	; (3b9c <rtos_delay_ctick+0x38>)
    3b8a:	4798      	blx	r3
    3b8c:	b006      	add	sp, #24
    3b8e:	bd70      	pop	{r4, r5, r6, pc}
    3b90:	00002919 	.word	0x00002919
    3b94:	20000774 	.word	0x20000774
    3b98:	00006354 	.word	0x00006354
    3b9c:	000039d1 	.word	0x000039d1

00003ba0 <busmanager_process_wait_callback>:
		// if match set status
		if (current_request->device_id == device_id) current_request->status = status;
	}
}

void busmanager_process_wait_callback() {
    3ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if busy processes are no longer busy
	// if one is found, change process status to running
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3ba2:	4b16      	ldr	r3, [pc, #88]	; (3bfc <busmanager_process_wait_callback+0x5c>)
    3ba4:	681b      	ldr	r3, [r3, #0]
    3ba6:	6a1e      	ldr	r6, [r3, #32]
	BusManager_Transaction_Request* current_request;
	int queue_pointer = data->request_queue_head;
    3ba8:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	
	for (int i = 0; i < data->request_count; ++i) {
    3baa:	2500      	movs	r5, #0
    3bac:	e00b      	b.n	3bc6 <busmanager_process_wait_callback+0x26>
		current_request = data->request_queue[queue_pointer];
		// if busy
		if (current_request->busy) {
			int v = (int)(current_request->busy_until - time_read_ticks());
			if (v <= 0)
				current_process->status = Process_State_Running;
    3bae:	4b13      	ldr	r3, [pc, #76]	; (3bfc <busmanager_process_wait_callback+0x5c>)
    3bb0:	681b      	ldr	r3, [r3, #0]
    3bb2:	2201      	movs	r2, #1
    3bb4:	619a      	str	r2, [r3, #24]
			//if ((int)(current_request->busy_until - time_read_ticks()) <= 0) current_process->status = Process_State_Running;
		}
		
		++queue_pointer;
    3bb6:	3401      	adds	r4, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3bb8:	17e3      	asrs	r3, r4, #31
    3bba:	0f5b      	lsrs	r3, r3, #29
    3bbc:	18e4      	adds	r4, r4, r3
    3bbe:	2207      	movs	r2, #7
    3bc0:	4014      	ands	r4, r2
    3bc2:	1ae4      	subs	r4, r4, r3
	for (int i = 0; i < data->request_count; ++i) {
    3bc4:	3501      	adds	r5, #1
    3bc6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3bc8:	42ab      	cmp	r3, r5
    3bca:	dd15      	ble.n	3bf8 <busmanager_process_wait_callback+0x58>
		current_request = data->request_queue[queue_pointer];
    3bcc:	1ca3      	adds	r3, r4, #2
    3bce:	009b      	lsls	r3, r3, #2
    3bd0:	599b      	ldr	r3, [r3, r6]
		if (current_request->busy) {
    3bd2:	7d1a      	ldrb	r2, [r3, #20]
    3bd4:	2a00      	cmp	r2, #0
    3bd6:	d0ee      	beq.n	3bb6 <busmanager_process_wait_callback+0x16>
			int v = (int)(current_request->busy_until - time_read_ticks());
    3bd8:	7c1a      	ldrb	r2, [r3, #16]
    3bda:	7c59      	ldrb	r1, [r3, #17]
    3bdc:	0209      	lsls	r1, r1, #8
    3bde:	4311      	orrs	r1, r2
    3be0:	7c9a      	ldrb	r2, [r3, #18]
    3be2:	0412      	lsls	r2, r2, #16
    3be4:	430a      	orrs	r2, r1
    3be6:	7cdf      	ldrb	r7, [r3, #19]
    3be8:	063f      	lsls	r7, r7, #24
    3bea:	4317      	orrs	r7, r2
    3bec:	4b04      	ldr	r3, [pc, #16]	; (3c00 <busmanager_process_wait_callback+0x60>)
    3bee:	4798      	blx	r3
    3bf0:	1a3f      	subs	r7, r7, r0
			if (v <= 0)
    3bf2:	2f00      	cmp	r7, #0
    3bf4:	dcdf      	bgt.n	3bb6 <busmanager_process_wait_callback+0x16>
    3bf6:	e7da      	b.n	3bae <busmanager_process_wait_callback+0xe>
	}
}
    3bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	20000774 	.word	0x20000774
    3c00:	00002919 	.word	0x00002919

00003c04 <set_matching_id_status>:
void set_matching_id_status(BusManager_Process_Data* data, BusManager_Transaction_Request* request, int queue_pointer, int8_t status) {
    3c04:	b5f0      	push	{r4, r5, r6, r7, lr}
	int device_id = request->device_id;
    3c06:	780c      	ldrb	r4, [r1, #0]
    3c08:	784d      	ldrb	r5, [r1, #1]
    3c0a:	022d      	lsls	r5, r5, #8
    3c0c:	4325      	orrs	r5, r4
    3c0e:	788c      	ldrb	r4, [r1, #2]
    3c10:	0424      	lsls	r4, r4, #16
    3c12:	432c      	orrs	r4, r5
    3c14:	78cf      	ldrb	r7, [r1, #3]
    3c16:	063f      	lsls	r7, r7, #24
    3c18:	4327      	orrs	r7, r4
	for (int count = 1; count < data->request_count; ++count) {
    3c1a:	2601      	movs	r6, #1
    3c1c:	e000      	b.n	3c20 <set_matching_id_status+0x1c>
    3c1e:	3601      	adds	r6, #1
    3c20:	6b01      	ldr	r1, [r0, #48]	; 0x30
    3c22:	42b1      	cmp	r1, r6
    3c24:	dd17      	ble.n	3c56 <set_matching_id_status+0x52>
		++queue_pointer;
    3c26:	3201      	adds	r2, #1
		queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3c28:	17d1      	asrs	r1, r2, #31
    3c2a:	0f49      	lsrs	r1, r1, #29
    3c2c:	1852      	adds	r2, r2, r1
    3c2e:	2407      	movs	r4, #7
    3c30:	4022      	ands	r2, r4
    3c32:	1a52      	subs	r2, r2, r1
		current_request = data->request_queue[queue_pointer];
    3c34:	1c91      	adds	r1, r2, #2
    3c36:	0089      	lsls	r1, r1, #2
    3c38:	580d      	ldr	r5, [r1, r0]
		if (current_request->device_id == device_id) current_request->status = status;
    3c3a:	782c      	ldrb	r4, [r5, #0]
    3c3c:	7869      	ldrb	r1, [r5, #1]
    3c3e:	0209      	lsls	r1, r1, #8
    3c40:	4321      	orrs	r1, r4
    3c42:	78ac      	ldrb	r4, [r5, #2]
    3c44:	0424      	lsls	r4, r4, #16
    3c46:	430c      	orrs	r4, r1
    3c48:	78e9      	ldrb	r1, [r5, #3]
    3c4a:	0609      	lsls	r1, r1, #24
    3c4c:	4321      	orrs	r1, r4
    3c4e:	42b9      	cmp	r1, r7
    3c50:	d1e5      	bne.n	3c1e <set_matching_id_status+0x1a>
    3c52:	756b      	strb	r3, [r5, #21]
    3c54:	e7e3      	b.n	3c1e <set_matching_id_status+0x1a>
}
    3c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003c58 <busmanager_process_function>:

void busmanager_process_function() {
    3c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c5a:	46ce      	mov	lr, r9
    3c5c:	4647      	mov	r7, r8
    3c5e:	b580      	push	{r7, lr}
    3c60:	b083      	sub	sp, #12
	// create typed pointer to process data
	BusManager_Process_Data* data = (BusManager_Process_Data*)(current_process->data);
    3c62:	4b63      	ldr	r3, [pc, #396]	; (3df0 <busmanager_process_function+0x198>)
    3c64:	681b      	ldr	r3, [r3, #0]
    3c66:	6a1f      	ldr	r7, [r3, #32]
    3c68:	e05e      	b.n	3d28 <busmanager_process_function+0xd0>
	BusManager_Transaction_Request* current_request;
	
	// message loop
	while (1) {
		// wait until number of requests is greater than 0
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    3c6a:	0038      	movs	r0, r7
    3c6c:	3030      	adds	r0, #48	; 0x30
    3c6e:	2201      	movs	r2, #1
    3c70:	3302      	adds	r3, #2
    3c72:	4252      	negs	r2, r2
    3c74:	2100      	movs	r1, #0
    3c76:	4c5f      	ldr	r4, [pc, #380]	; (3df4 <busmanager_process_function+0x19c>)
    3c78:	47a0      	blx	r4
    3c7a:	e058      	b.n	3d2e <busmanager_process_function+0xd6>
			bool unblocked = false;
			current_request = data->request_queue[queue_pointer];
			//// break if ready and not blocked
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
			// if busy attempt to set busy state to false
			if (current_request->busy) {
    3c7c:	7d2b      	ldrb	r3, [r5, #20]
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d159      	bne.n	3d36 <busmanager_process_function+0xde>
			}
			// check if unblocked
			if (unblocked) break;
			
			// increment queue pointer
			++queue_pointer;
    3c82:	3401      	adds	r4, #1
			queue_pointer %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3c84:	17e3      	asrs	r3, r4, #31
    3c86:	0f5b      	lsrs	r3, r3, #29
    3c88:	18e4      	adds	r4, r4, r3
    3c8a:	2207      	movs	r2, #7
    3c8c:	4014      	ands	r4, r2
    3c8e:	1ae4      	subs	r4, r4, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3c90:	2301      	movs	r3, #1
    3c92:	469c      	mov	ip, r3
    3c94:	44e1      	add	r9, ip
    3c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3c98:	454b      	cmp	r3, r9
    3c9a:	dd09      	ble.n	3cb0 <busmanager_process_function+0x58>
			current_request = data->request_queue[queue_pointer];
    3c9c:	1ca3      	adds	r3, r4, #2
    3c9e:	009b      	lsls	r3, r3, #2
    3ca0:	59dd      	ldr	r5, [r3, r7]
			if (current_request->status == BusManager_Request_Ready && !current_request->busy) break;
    3ca2:	2315      	movs	r3, #21
    3ca4:	56eb      	ldrsb	r3, [r5, r3]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d1e8      	bne.n	3c7c <busmanager_process_function+0x24>
    3caa:	7d2b      	ldrb	r3, [r5, #20]
    3cac:	2b00      	cmp	r3, #0
    3cae:	d1e5      	bne.n	3c7c <busmanager_process_function+0x24>
		}
		
		// check if all is blocked
		// if so, hand control to OS until either a request is unblocked
		// or a new request is added
		if (blocked_count == data->request_count) {
    3cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3cb2:	4549      	cmp	r1, r9
    3cb4:	d05f      	beq.n	3d76 <busmanager_process_function+0x11e>
			Process_Wait_Until_NotEqual, busmanager_process_wait_callback);
			continue;
		}
		
		// execute next request
		if (current_request->status != BusManager_Request_Complete) {
    3cb6:	2315      	movs	r3, #21
    3cb8:	56eb      	ldrsb	r3, [r5, r3]
    3cba:	2b02      	cmp	r3, #2
    3cbc:	d030      	beq.n	3d20 <busmanager_process_function+0xc8>
			// data->execute_function(current_request, data->port_descriptor);
			if (!current_request->request_processor_function)
    3cbe:	7b2a      	ldrb	r2, [r5, #12]
    3cc0:	7b6b      	ldrb	r3, [r5, #13]
    3cc2:	021b      	lsls	r3, r3, #8
    3cc4:	4313      	orrs	r3, r2
    3cc6:	7baa      	ldrb	r2, [r5, #14]
    3cc8:	0412      	lsls	r2, r2, #16
    3cca:	431a      	orrs	r2, r3
    3ccc:	7beb      	ldrb	r3, [r5, #15]
    3cce:	061b      	lsls	r3, r3, #24
    3cd0:	4313      	orrs	r3, r2
    3cd2:	d05a      	beq.n	3d8a <busmanager_process_function+0x132>
  __ASM volatile ("cpsid i" : : : "memory");
    3cd4:	b672      	cpsid	i
				SOS();
			__disable_irq();
			if (current_request->request_processor_function(current_request->device_descriptor, data->port_descriptor, current_request->request_data, current_request)) {
    3cd6:	7b2b      	ldrb	r3, [r5, #12]
    3cd8:	7b6a      	ldrb	r2, [r5, #13]
    3cda:	0212      	lsls	r2, r2, #8
    3cdc:	431a      	orrs	r2, r3
    3cde:	7bab      	ldrb	r3, [r5, #14]
    3ce0:	041b      	lsls	r3, r3, #16
    3ce2:	4313      	orrs	r3, r2
    3ce4:	7bec      	ldrb	r4, [r5, #15]
    3ce6:	0624      	lsls	r4, r4, #24
    3ce8:	431c      	orrs	r4, r3
    3cea:	7a2b      	ldrb	r3, [r5, #8]
    3cec:	7a6a      	ldrb	r2, [r5, #9]
    3cee:	0212      	lsls	r2, r2, #8
    3cf0:	431a      	orrs	r2, r3
    3cf2:	7aab      	ldrb	r3, [r5, #10]
    3cf4:	041b      	lsls	r3, r3, #16
    3cf6:	4313      	orrs	r3, r2
    3cf8:	7aea      	ldrb	r2, [r5, #11]
    3cfa:	0612      	lsls	r2, r2, #24
    3cfc:	431a      	orrs	r2, r3
    3cfe:	6879      	ldr	r1, [r7, #4]
    3d00:	792b      	ldrb	r3, [r5, #4]
    3d02:	7968      	ldrb	r0, [r5, #5]
    3d04:	0200      	lsls	r0, r0, #8
    3d06:	4318      	orrs	r0, r3
    3d08:	79ab      	ldrb	r3, [r5, #6]
    3d0a:	041b      	lsls	r3, r3, #16
    3d0c:	4303      	orrs	r3, r0
    3d0e:	79e8      	ldrb	r0, [r5, #7]
    3d10:	0600      	lsls	r0, r0, #24
    3d12:	4318      	orrs	r0, r3
    3d14:	002b      	movs	r3, r5
    3d16:	47a0      	blx	r4
    3d18:	2800      	cmp	r0, #0
    3d1a:	d001      	beq.n	3d20 <busmanager_process_function+0xc8>
				current_request->status = BusManager_Request_Complete;
    3d1c:	2302      	movs	r3, #2
    3d1e:	756b      	strb	r3, [r5, #21]
		}
		
		// clear request if done and device is not busy
		// done request acts as a record of if the device is busy, and which request
		// it is busy executing
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    3d20:	2315      	movs	r3, #21
    3d22:	56eb      	ldrsb	r3, [r5, r3]
    3d24:	2b02      	cmp	r3, #2
    3d26:	d033      	beq.n	3d90 <busmanager_process_function+0x138>
		if (data->request_count == 0) wait_until(&(data->request_count), 0, INT_MASK, Process_Wait_Until_Greater);
    3d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d09d      	beq.n	3c6a <busmanager_process_function+0x12>
		int queue_pointer = data->request_queue_head;
    3d2e:	6abc      	ldr	r4, [r7, #40]	; 0x28
		int blocked_count = 0;
    3d30:	2300      	movs	r3, #0
    3d32:	4699      	mov	r9, r3
		for (; blocked_count < data->request_count; ++blocked_count) {
    3d34:	e7af      	b.n	3c96 <busmanager_process_function+0x3e>
				if ((int)(current_request->busy_until - time_read_ticks()) <= 0) {
    3d36:	7c2a      	ldrb	r2, [r5, #16]
    3d38:	7c6b      	ldrb	r3, [r5, #17]
    3d3a:	021b      	lsls	r3, r3, #8
    3d3c:	4313      	orrs	r3, r2
    3d3e:	7caa      	ldrb	r2, [r5, #18]
    3d40:	0412      	lsls	r2, r2, #16
    3d42:	431a      	orrs	r2, r3
    3d44:	7ceb      	ldrb	r3, [r5, #19]
    3d46:	061b      	lsls	r3, r3, #24
    3d48:	4313      	orrs	r3, r2
    3d4a:	4698      	mov	r8, r3
    3d4c:	4b2a      	ldr	r3, [pc, #168]	; (3df8 <busmanager_process_function+0x1a0>)
    3d4e:	4798      	blx	r3
    3d50:	4643      	mov	r3, r8
    3d52:	1a18      	subs	r0, r3, r0
    3d54:	2800      	cmp	r0, #0
    3d56:	dd06      	ble.n	3d66 <busmanager_process_function+0x10e>
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Blocked);
    3d58:	2301      	movs	r3, #1
    3d5a:	0022      	movs	r2, r4
    3d5c:	0029      	movs	r1, r5
    3d5e:	0038      	movs	r0, r7
    3d60:	4e26      	ldr	r6, [pc, #152]	; (3dfc <busmanager_process_function+0x1a4>)
    3d62:	47b0      	blx	r6
			if (unblocked) break;
    3d64:	e78d      	b.n	3c82 <busmanager_process_function+0x2a>
					current_request->busy = false;
    3d66:	2300      	movs	r3, #0
    3d68:	752b      	strb	r3, [r5, #20]
					set_matching_id_status(data, current_request, queue_pointer, BusManager_Request_Ready);
    3d6a:	0022      	movs	r2, r4
    3d6c:	0029      	movs	r1, r5
    3d6e:	0038      	movs	r0, r7
    3d70:	4c22      	ldr	r4, [pc, #136]	; (3dfc <busmanager_process_function+0x1a4>)
    3d72:	47a0      	blx	r4
			if (unblocked) break;
    3d74:	e79c      	b.n	3cb0 <busmanager_process_function+0x58>
			wait_until_callback(&(data->request_count), data->request_count, INT_MASK,
    3d76:	0038      	movs	r0, r7
    3d78:	3030      	adds	r0, #48	; 0x30
    3d7a:	2201      	movs	r2, #1
    3d7c:	4b20      	ldr	r3, [pc, #128]	; (3e00 <busmanager_process_function+0x1a8>)
    3d7e:	9300      	str	r3, [sp, #0]
    3d80:	2301      	movs	r3, #1
    3d82:	4252      	negs	r2, r2
    3d84:	4c1f      	ldr	r4, [pc, #124]	; (3e04 <busmanager_process_function+0x1ac>)
    3d86:	47a0      	blx	r4
			continue;
    3d88:	e7ce      	b.n	3d28 <busmanager_process_function+0xd0>
				SOS();
    3d8a:	4b1f      	ldr	r3, [pc, #124]	; (3e08 <busmanager_process_function+0x1b0>)
    3d8c:	4798      	blx	r3
    3d8e:	e7a1      	b.n	3cd4 <busmanager_process_function+0x7c>
		if (current_request->status == BusManager_Request_Complete && !current_request->busy) {
    3d90:	7d2b      	ldrb	r3, [r5, #20]
    3d92:	2b00      	cmp	r3, #0
    3d94:	d1c8      	bne.n	3d28 <busmanager_process_function+0xd0>
			current_request->status = BusManager_Request_CompleteNotBusy;
    3d96:	3303      	adds	r3, #3
    3d98:	756b      	strb	r3, [r5, #21]

			// move blocked processes up queue
			for (; blocked_count > 0; --blocked_count) {
    3d9a:	e017      	b.n	3dcc <busmanager_process_function+0x174>
				int source_pointer = (data->request_queue_head + blocked_count - 1) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3d9e:	4449      	add	r1, r9
    3da0:	1e4b      	subs	r3, r1, #1
    3da2:	17d8      	asrs	r0, r3, #31
    3da4:	0f40      	lsrs	r0, r0, #29
    3da6:	181b      	adds	r3, r3, r0
    3da8:	2207      	movs	r2, #7
    3daa:	4013      	ands	r3, r2
    3dac:	1a1b      	subs	r3, r3, r0
				int destination_pointer = (data->request_queue_head + blocked_count) % BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3dae:	17c8      	asrs	r0, r1, #31
    3db0:	0f40      	lsrs	r0, r0, #29
    3db2:	1809      	adds	r1, r1, r0
    3db4:	400a      	ands	r2, r1
    3db6:	1a12      	subs	r2, r2, r0
				data->request_queue[destination_pointer] = data->request_queue[source_pointer];
    3db8:	3302      	adds	r3, #2
    3dba:	009b      	lsls	r3, r3, #2
    3dbc:	59d9      	ldr	r1, [r3, r7]
    3dbe:	3202      	adds	r2, #2
    3dc0:	0093      	lsls	r3, r2, #2
    3dc2:	51d9      	str	r1, [r3, r7]
			for (; blocked_count > 0; --blocked_count) {
    3dc4:	2301      	movs	r3, #1
    3dc6:	425b      	negs	r3, r3
    3dc8:	469c      	mov	ip, r3
    3dca:	44e1      	add	r9, ip
    3dcc:	464b      	mov	r3, r9
    3dce:	2b00      	cmp	r3, #0
    3dd0:	dce4      	bgt.n	3d9c <busmanager_process_function+0x144>
			}

			--(data->request_count);
    3dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3dd4:	3b01      	subs	r3, #1
    3dd6:	633b      	str	r3, [r7, #48]	; 0x30
			++(data->request_queue_head);
    3dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dda:	3301      	adds	r3, #1
    3ddc:	62bb      	str	r3, [r7, #40]	; 0x28
			data->request_queue_head %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3dde:	17d9      	asrs	r1, r3, #31
    3de0:	0f49      	lsrs	r1, r1, #29
    3de2:	185b      	adds	r3, r3, r1
    3de4:	2207      	movs	r2, #7
    3de6:	4013      	ands	r3, r2
    3de8:	1a5b      	subs	r3, r3, r1
    3dea:	62bb      	str	r3, [r7, #40]	; 0x28
    3dec:	e79c      	b.n	3d28 <busmanager_process_function+0xd0>
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	20000774 	.word	0x20000774
    3df4:	00003a31 	.word	0x00003a31
    3df8:	00002919 	.word	0x00002919
    3dfc:	00003c05 	.word	0x00003c05
    3e00:	00003ba1 	.word	0x00003ba1
    3e04:	00003a8d 	.word	0x00003a8d
    3e08:	00003609 	.word	0x00003609

00003e0c <busmanager_new_process>:
// 	proc->process.data = &(proc->data);
// 	dispatch_process(&(proc->process));
// }

void busmanager_new_process(BusManager_Process* proc, uint32_t stack_base, uint32_t stack_size, sercom_registers_t* sercom,
void* port_descriptor) {
    3e0c:	b570      	push	{r4, r5, r6, lr}
    3e0e:	0004      	movs	r4, r0
    3e10:	001d      	movs	r5, r3
	init_process(&(proc->process), busmanager_process_function, stack_base, stack_size);
    3e12:	480a      	ldr	r0, [pc, #40]	; (3e3c <busmanager_new_process+0x30>)
    3e14:	0013      	movs	r3, r2
    3e16:	000a      	movs	r2, r1
    3e18:	0001      	movs	r1, r0
    3e1a:	0020      	movs	r0, r4
    3e1c:	4e08      	ldr	r6, [pc, #32]	; (3e40 <busmanager_new_process+0x34>)
    3e1e:	47b0      	blx	r6
	proc->data.sercom = sercom;
    3e20:	62a5      	str	r5, [r4, #40]	; 0x28
	proc->data.port_descriptor = port_descriptor;
    3e22:	9b04      	ldr	r3, [sp, #16]
    3e24:	62e3      	str	r3, [r4, #44]	; 0x2c
	proc->data.request_queue_head = 0;
    3e26:	2300      	movs	r3, #0
    3e28:	6523      	str	r3, [r4, #80]	; 0x50
	proc->data.request_queue_tail = 0;
    3e2a:	6563      	str	r3, [r4, #84]	; 0x54
	proc->data.request_count = 0;
    3e2c:	65a3      	str	r3, [r4, #88]	; 0x58
	proc->process.data = &(proc->data);
    3e2e:	0023      	movs	r3, r4
    3e30:	3328      	adds	r3, #40	; 0x28
    3e32:	6223      	str	r3, [r4, #32]
	dispatch_process(&(proc->process));
    3e34:	0020      	movs	r0, r4
    3e36:	4b03      	ldr	r3, [pc, #12]	; (3e44 <busmanager_new_process+0x38>)
    3e38:	4798      	blx	r3
}
    3e3a:	bd70      	pop	{r4, r5, r6, pc}
    3e3c:	00003c59 	.word	0x00003c59
    3e40:	000036c9 	.word	0x000036c9
    3e44:	000037ad 	.word	0x000037ad

00003e48 <busmanager_request_transaction>:
// 	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
// }

void busmanager_request_transaction(BusManager_Process* proc, BusManager_Transaction_Request* request,
	int device_id, void* device_descriptor, void* request_data,
	bool (*request_processor_function)(void* device_descriptor, void* port_descriptor, void* request, BusManager_Transaction_Request* busrequest)) {
    3e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e4a:	0004      	movs	r4, r0
    3e4c:	000d      	movs	r5, r1
    3e4e:	9806      	ldr	r0, [sp, #24]
    3e50:	9907      	ldr	r1, [sp, #28]
	// set request info
	request->device_id = device_id;
    3e52:	2600      	movs	r6, #0
    3e54:	702a      	strb	r2, [r5, #0]
    3e56:	0a17      	lsrs	r7, r2, #8
    3e58:	706f      	strb	r7, [r5, #1]
    3e5a:	0c17      	lsrs	r7, r2, #16
    3e5c:	70af      	strb	r7, [r5, #2]
    3e5e:	0e12      	lsrs	r2, r2, #24
    3e60:	70ea      	strb	r2, [r5, #3]
	request->device_descriptor = device_descriptor;
    3e62:	712b      	strb	r3, [r5, #4]
    3e64:	0a1a      	lsrs	r2, r3, #8
    3e66:	716a      	strb	r2, [r5, #5]
    3e68:	0c1a      	lsrs	r2, r3, #16
    3e6a:	71aa      	strb	r2, [r5, #6]
    3e6c:	0e1b      	lsrs	r3, r3, #24
    3e6e:	71eb      	strb	r3, [r5, #7]
	request->request_data = request_data;
    3e70:	7228      	strb	r0, [r5, #8]
    3e72:	0a03      	lsrs	r3, r0, #8
    3e74:	726b      	strb	r3, [r5, #9]
    3e76:	0c03      	lsrs	r3, r0, #16
    3e78:	72ab      	strb	r3, [r5, #10]
    3e7a:	0e00      	lsrs	r0, r0, #24
    3e7c:	72e8      	strb	r0, [r5, #11]
	request->request_processor_function = request_processor_function;
    3e7e:	7329      	strb	r1, [r5, #12]
    3e80:	0a0b      	lsrs	r3, r1, #8
    3e82:	736b      	strb	r3, [r5, #13]
    3e84:	0c0b      	lsrs	r3, r1, #16
    3e86:	73ab      	strb	r3, [r5, #14]
    3e88:	0e09      	lsrs	r1, r1, #24
    3e8a:	73e9      	strb	r1, [r5, #15]
	request->busy = false;
    3e8c:	752e      	strb	r6, [r5, #20]
	//request->blocked = false;
	//request->complete = false;
	request->status = BusManager_Request_Ready;
    3e8e:	756e      	strb	r6, [r5, #21]
	
	// push to request queue
	// if queue is full wait until there is space
	// in while loop to avoid race condition if two processes are pushing a request at once
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3e90:	e007      	b.n	3ea2 <busmanager_request_transaction+0x5a>
		wait_until(&(proc->data.request_count), BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH, INT_MASK, Process_Wait_Until_NotEqual);
    3e92:	0020      	movs	r0, r4
    3e94:	3058      	adds	r0, #88	; 0x58
    3e96:	2201      	movs	r2, #1
    3e98:	2301      	movs	r3, #1
    3e9a:	4252      	negs	r2, r2
    3e9c:	2108      	movs	r1, #8
    3e9e:	4e0b      	ldr	r6, [pc, #44]	; (3ecc <busmanager_request_transaction+0x84>)
    3ea0:	47b0      	blx	r6
	while (proc->data.request_count == BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH)
    3ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3ea4:	2b08      	cmp	r3, #8
    3ea6:	d0f4      	beq.n	3e92 <busmanager_request_transaction+0x4a>
	
	// now there is guaranteed to be space in the queue
	// add request at tail
	proc->data.request_queue[proc->data.request_queue_tail] = request;
    3ea8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3eaa:	0011      	movs	r1, r2
    3eac:	310c      	adds	r1, #12
    3eae:	0089      	lsls	r1, r1, #2
    3eb0:	510d      	str	r5, [r1, r4]
	// increment request count
	++(proc->data.request_count);
    3eb2:	3301      	adds	r3, #1
    3eb4:	65a3      	str	r3, [r4, #88]	; 0x58
	// increment tail and overflow
	++(proc->data.request_queue_tail);
    3eb6:	3201      	adds	r2, #1
    3eb8:	6562      	str	r2, [r4, #84]	; 0x54
	proc->data.request_queue_tail %= BUSMGR_PROCESS_REQUEST_QUEUE_LENGTH;
    3eba:	17d1      	asrs	r1, r2, #31
    3ebc:	0f49      	lsrs	r1, r1, #29
    3ebe:	1853      	adds	r3, r2, r1
    3ec0:	2207      	movs	r2, #7
    3ec2:	4013      	ands	r3, r2
    3ec4:	1a5b      	subs	r3, r3, r1
    3ec6:	6563      	str	r3, [r4, #84]	; 0x54
    3ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3eca:	46c0      	nop			; (mov r8, r8)
    3ecc:	00003a31 	.word	0x00003a31

00003ed0 <dma_eeprom_read>:
typedef struct __attribute__((packed, scalar_storage_order("big-endian"))) {
	uint8_t command;
	uint16_t address;
} DMA_EEPROM_Addressed_Request;

void dma_eeprom_read(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* writeback) {
    3ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ed2:	46de      	mov	lr, fp
    3ed4:	4657      	mov	r7, sl
    3ed6:	464e      	mov	r6, r9
    3ed8:	4645      	mov	r5, r8
    3eda:	b5e0      	push	{r5, r6, r7, lr}
    3edc:	b089      	sub	sp, #36	; 0x24
    3ede:	0004      	movs	r4, r0
    3ee0:	000e      	movs	r6, r1
    3ee2:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    3ee4:	ab07      	add	r3, sp, #28
    3ee6:	2003      	movs	r0, #3
    3ee8:	4682      	mov	sl, r0
    3eea:	7018      	strb	r0, [r3, #0]
		.command = EEPROM_READ,
		.address = (uint16_t)address
    3eec:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    3eee:	2115      	movs	r1, #21
    3ef0:	a802      	add	r0, sp, #8
    3ef2:	4684      	mov	ip, r0
    3ef4:	4461      	add	r1, ip
    3ef6:	0a10      	lsrs	r0, r2, #8
    3ef8:	7008      	strb	r0, [r1, #0]
    3efa:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    3efc:	7822      	ldrb	r2, [r4, #0]
    3efe:	7861      	ldrb	r1, [r4, #1]
    3f00:	0209      	lsls	r1, r1, #8
    3f02:	4311      	orrs	r1, r2
    3f04:	78a2      	ldrb	r2, [r4, #2]
    3f06:	0412      	lsls	r2, r2, #16
    3f08:	430a      	orrs	r2, r1
    3f0a:	78e5      	ldrb	r5, [r4, #3]
    3f0c:	062d      	lsls	r5, r5, #24
    3f0e:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3f10:	9604      	str	r6, [sp, #16]
    3f12:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    3f14:	2128      	movs	r1, #40	; 0x28
    3f16:	4689      	mov	r9, r1
    3f18:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3f1a:	0100      	lsls	r0, r0, #4
    3f1c:	4e24      	ldr	r6, [pc, #144]	; (3fb0 <dma_eeprom_read+0xe0>)
    3f1e:	1980      	adds	r0, r0, r6
    3f20:	4924      	ldr	r1, [pc, #144]	; (3fb4 <dma_eeprom_read+0xe4>)
    3f22:	468b      	mov	fp, r1
    3f24:	9103      	str	r1, [sp, #12]
    3f26:	4649      	mov	r1, r9
    3f28:	9102      	str	r1, [sp, #8]
    3f2a:	9301      	str	r3, [sp, #4]
    3f2c:	4651      	mov	r1, sl
    3f2e:	9100      	str	r1, [sp, #0]
    3f30:	2300      	movs	r3, #0
    3f32:	2200      	movs	r2, #0
    3f34:	3902      	subs	r1, #2
    3f36:	4f20      	ldr	r7, [pc, #128]	; (3fb8 <dma_eeprom_read+0xe8>)
    3f38:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    3f3a:	466b      	mov	r3, sp
    3f3c:	8a9b      	ldrh	r3, [r3, #20]
    3f3e:	4698      	mov	r8, r3
    3f40:	2300      	movs	r3, #0
    3f42:	9303      	str	r3, [sp, #12]
    3f44:	4649      	mov	r1, r9
    3f46:	9102      	str	r1, [sp, #8]
    3f48:	4b1c      	ldr	r3, [pc, #112]	; (3fbc <dma_eeprom_read+0xec>)
    3f4a:	9301      	str	r3, [sp, #4]
    3f4c:	4641      	mov	r1, r8
    3f4e:	9100      	str	r1, [sp, #0]
    3f50:	2300      	movs	r3, #0
    3f52:	2200      	movs	r2, #0
    3f54:	2100      	movs	r1, #0
    3f56:	4658      	mov	r0, fp
    3f58:	47b8      	blx	r7
		&zero, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    3f5a:	9a04      	ldr	r2, [sp, #16]
    3f5c:	7850      	ldrb	r0, [r2, #1]
    3f5e:	0100      	lsls	r0, r0, #4
    3f60:	1980      	adds	r0, r0, r6
    3f62:	4917      	ldr	r1, [pc, #92]	; (3fc0 <dma_eeprom_read+0xf0>)
    3f64:	468b      	mov	fp, r1
    3f66:	9103      	str	r1, [sp, #12]
    3f68:	4b16      	ldr	r3, [pc, #88]	; (3fc4 <dma_eeprom_read+0xf4>)
    3f6a:	9302      	str	r3, [sp, #8]
    3f6c:	4649      	mov	r1, r9
    3f6e:	9101      	str	r1, [sp, #4]
    3f70:	4651      	mov	r1, sl
    3f72:	9100      	str	r1, [sp, #0]
    3f74:	2300      	movs	r3, #0
    3f76:	2200      	movs	r2, #0
    3f78:	2100      	movs	r1, #0
    3f7a:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    3f7c:	2300      	movs	r3, #0
    3f7e:	9303      	str	r3, [sp, #12]
    3f80:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3f82:	9302      	str	r3, [sp, #8]
    3f84:	464b      	mov	r3, r9
    3f86:	9301      	str	r3, [sp, #4]
    3f88:	4643      	mov	r3, r8
    3f8a:	9300      	str	r3, [sp, #0]
    3f8c:	2300      	movs	r3, #0
    3f8e:	2201      	movs	r2, #1
    3f90:	2100      	movs	r1, #0
    3f92:	4658      	mov	r0, fp
    3f94:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), writeback, DMA_NEXTDESCRIPTOR_NONE);
		
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    3f96:	1d21      	adds	r1, r4, #4
    3f98:	9a04      	ldr	r2, [sp, #16]
    3f9a:	0028      	movs	r0, r5
    3f9c:	4b0a      	ldr	r3, [pc, #40]	; (3fc8 <dma_eeprom_read+0xf8>)
    3f9e:	4798      	blx	r3
}
    3fa0:	b009      	add	sp, #36	; 0x24
    3fa2:	bcf0      	pop	{r4, r5, r6, r7}
    3fa4:	46bb      	mov	fp, r7
    3fa6:	46b2      	mov	sl, r6
    3fa8:	46a9      	mov	r9, r5
    3faa:	46a0      	mov	r8, r4
    3fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fae:	46c0      	nop			; (mov r8, r8)
    3fb0:	20000538 	.word	0x20000538
    3fb4:	200007e0 	.word	0x200007e0
    3fb8:	00001a71 	.word	0x00001a71
    3fbc:	00006185 	.word	0x00006185
    3fc0:	200007d0 	.word	0x200007d0
    3fc4:	2000033c 	.word	0x2000033c
    3fc8:	00004465 	.word	0x00004465

00003fcc <dma_eeprom_write>:

void dma_eeprom_write(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, uint32_t address, int count, void* data) {
    3fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fce:	46de      	mov	lr, fp
    3fd0:	4657      	mov	r7, sl
    3fd2:	464e      	mov	r6, r9
    3fd4:	4645      	mov	r5, r8
    3fd6:	b5e0      	push	{r5, r6, r7, lr}
    3fd8:	b089      	sub	sp, #36	; 0x24
    3fda:	0004      	movs	r4, r0
    3fdc:	000e      	movs	r6, r1
    3fde:	9305      	str	r3, [sp, #20]
	// create request data
	DMA_EEPROM_Addressed_Request request = {
    3fe0:	ab07      	add	r3, sp, #28
    3fe2:	2102      	movs	r1, #2
    3fe4:	7019      	strb	r1, [r3, #0]
		.command = EEPROM_WRITE,
		.address = (uint16_t)address
    3fe6:	b292      	uxth	r2, r2
	DMA_EEPROM_Addressed_Request request = {
    3fe8:	3113      	adds	r1, #19
    3fea:	a802      	add	r0, sp, #8
    3fec:	4684      	mov	ip, r0
    3fee:	4461      	add	r1, ip
    3ff0:	0a10      	lsrs	r0, r2, #8
    3ff2:	7008      	strb	r0, [r1, #0]
    3ff4:	704a      	strb	r2, [r1, #1]
	};
	register sercom_registers_t* sercom = eepromdesc->sercom;
    3ff6:	7822      	ldrb	r2, [r4, #0]
    3ff8:	7861      	ldrb	r1, [r4, #1]
    3ffa:	0209      	lsls	r1, r1, #8
    3ffc:	4311      	orrs	r1, r2
    3ffe:	78a2      	ldrb	r2, [r4, #2]
    4000:	0412      	lsls	r2, r2, #16
    4002:	430a      	orrs	r2, r1
    4004:	78e5      	ldrb	r5, [r4, #3]
    4006:	062d      	lsls	r5, r5, #24
    4008:	4315      	orrs	r5, r2
	// create descriptor for tx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    400a:	7830      	ldrb	r0, [r6, #0]
		&request, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    400c:	2228      	movs	r2, #40	; 0x28
    400e:	4690      	mov	r8, r2
    4010:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, sizeof(request),
    4012:	0100      	lsls	r0, r0, #4
    4014:	4a25      	ldr	r2, [pc, #148]	; (40ac <dma_eeprom_write+0xe0>)
    4016:	4691      	mov	r9, r2
    4018:	4448      	add	r0, r9
    401a:	4a25      	ldr	r2, [pc, #148]	; (40b0 <dma_eeprom_write+0xe4>)
    401c:	4693      	mov	fp, r2
    401e:	9203      	str	r2, [sp, #12]
    4020:	4642      	mov	r2, r8
    4022:	9202      	str	r2, [sp, #8]
    4024:	9301      	str	r3, [sp, #4]
    4026:	2203      	movs	r2, #3
    4028:	9200      	str	r2, [sp, #0]
    402a:	2300      	movs	r3, #0
    402c:	2200      	movs	r2, #0
    402e:	2101      	movs	r1, #1
    4030:	4f20      	ldr	r7, [pc, #128]	; (40b4 <dma_eeprom_write+0xe8>)
    4032:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    4034:	466b      	mov	r3, sp
    4036:	8a9b      	ldrh	r3, [r3, #20]
    4038:	469a      	mov	sl, r3
    403a:	2300      	movs	r3, #0
    403c:	9303      	str	r3, [sp, #12]
    403e:	4641      	mov	r1, r8
    4040:	9102      	str	r1, [sp, #8]
    4042:	9912      	ldr	r1, [sp, #72]	; 0x48
    4044:	9101      	str	r1, [sp, #4]
    4046:	4651      	mov	r1, sl
    4048:	9100      	str	r1, [sp, #0]
    404a:	2200      	movs	r2, #0
    404c:	2101      	movs	r1, #1
    404e:	4658      	mov	r0, fp
    4050:	47b8      	blx	r7
		data, &(sercom->SPIM.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
	// create descriptor for rx channel
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, sizeof(request),
    4052:	7870      	ldrb	r0, [r6, #1]
    4054:	0100      	lsls	r0, r0, #4
    4056:	4448      	add	r0, r9
    4058:	4917      	ldr	r1, [pc, #92]	; (40b8 <dma_eeprom_write+0xec>)
    405a:	4689      	mov	r9, r1
    405c:	9103      	str	r1, [sp, #12]
    405e:	4917      	ldr	r1, [pc, #92]	; (40bc <dma_eeprom_write+0xf0>)
    4060:	468b      	mov	fp, r1
    4062:	9102      	str	r1, [sp, #8]
    4064:	4641      	mov	r1, r8
    4066:	9101      	str	r1, [sp, #4]
    4068:	2203      	movs	r2, #3
    406a:	9200      	str	r2, [sp, #0]
    406c:	2300      	movs	r3, #0
    406e:	2200      	movs	r2, #0
    4070:	2100      	movs	r1, #0
    4072:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, &rxdesc2);
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    4074:	2300      	movs	r3, #0
    4076:	9303      	str	r3, [sp, #12]
    4078:	465b      	mov	r3, fp
    407a:	9302      	str	r3, [sp, #8]
    407c:	4643      	mov	r3, r8
    407e:	9301      	str	r3, [sp, #4]
    4080:	4653      	mov	r3, sl
    4082:	9300      	str	r3, [sp, #0]
    4084:	2300      	movs	r3, #0
    4086:	2200      	movs	r2, #0
    4088:	2100      	movs	r1, #0
    408a:	4648      	mov	r0, r9
    408c:	47b8      	blx	r7
		&(sercom->SPIM.SERCOM_DATA), &datasink, DMA_NEXTDESCRIPTOR_NONE);
	
	eeprom_write_enable(eepromdesc);
    408e:	0020      	movs	r0, r4
    4090:	4b0b      	ldr	r3, [pc, #44]	; (40c0 <dma_eeprom_write+0xf4>)
    4092:	4798      	blx	r3
	dma_spi_transaction(sercom, &(eepromdesc->sspin), dmadesc);
    4094:	1d21      	adds	r1, r4, #4
    4096:	0032      	movs	r2, r6
    4098:	0028      	movs	r0, r5
    409a:	4b0a      	ldr	r3, [pc, #40]	; (40c4 <dma_eeprom_write+0xf8>)
    409c:	4798      	blx	r3
}
    409e:	b009      	add	sp, #36	; 0x24
    40a0:	bcf0      	pop	{r4, r5, r6, r7}
    40a2:	46bb      	mov	fp, r7
    40a4:	46b2      	mov	sl, r6
    40a6:	46a9      	mov	r9, r5
    40a8:	46a0      	mov	r8, r4
    40aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40ac:	20000538 	.word	0x20000538
    40b0:	200007e0 	.word	0x200007e0
    40b4:	00001a71 	.word	0x00001a71
    40b8:	200007d0 	.word	0x200007d0
    40bc:	2000033c 	.word	0x2000033c
    40c0:	00001be1 	.word	0x00001be1
    40c4:	00004465 	.word	0x00004465

000040c8 <dma_eeprom_process_request>:

bool dma_eeprom_process_request(EEPROM_Descriptor* eepromdesc, DMA_Descriptor* dmadesc, EEPROM_Request* request, BusManager_Transaction_Request* busrequest) {
    40c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ca:	b083      	sub	sp, #12
    40cc:	0014      	movs	r4, r2
    40ce:	001d      	movs	r5, r3
	switch (request->type) {
    40d0:	2324      	movs	r3, #36	; 0x24
    40d2:	5cd3      	ldrb	r3, [r2, r3]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d004      	beq.n	40e2 <dma_eeprom_process_request+0x1a>
    40d8:	2b01      	cmp	r3, #1
    40da:	d00a      	beq.n	40f2 <dma_eeprom_process_request+0x2a>
    40dc:	2001      	movs	r0, #1
			//rtos_delay_ms(EEPROM_WRITE_CYCLE_TIME);
		}
		break;
	}
	return true;
}
    40de:	b003      	add	sp, #12
    40e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dma_eeprom_read(eepromdesc, dmadesc, request->address, request->count, request->data);
    40e2:	69d3      	ldr	r3, [r2, #28]
    40e4:	6992      	ldr	r2, [r2, #24]
    40e6:	6a24      	ldr	r4, [r4, #32]
    40e8:	9400      	str	r4, [sp, #0]
    40ea:	4c1a      	ldr	r4, [pc, #104]	; (4154 <dma_eeprom_process_request+0x8c>)
    40ec:	47a0      	blx	r4
	return true;
    40ee:	2001      	movs	r0, #1
		break;
    40f0:	e7f5      	b.n	40de <dma_eeprom_process_request+0x16>
			uint32_t top = request->address + request->count;
    40f2:	6992      	ldr	r2, [r2, #24]
    40f4:	69e6      	ldr	r6, [r4, #28]
    40f6:	1993      	adds	r3, r2, r6
    40f8:	469c      	mov	ip, r3
			uint32_t next_page = (request->address / EEPROM_PAGE_SIZE) * EEPROM_PAGE_SIZE + EEPROM_PAGE_SIZE;
    40fa:	233f      	movs	r3, #63	; 0x3f
    40fc:	0017      	movs	r7, r2
    40fe:	439f      	bics	r7, r3
    4100:	003b      	movs	r3, r7
    4102:	3340      	adds	r3, #64	; 0x40
			int count = (top < next_page) ? request->count : next_page - request->address;
    4104:	459c      	cmp	ip, r3
    4106:	d300      	bcc.n	410a <dma_eeprom_process_request+0x42>
    4108:	1a9e      	subs	r6, r3, r2
			dma_eeprom_write(eepromdesc, dmadesc, request->address, count, request->data);
    410a:	6a23      	ldr	r3, [r4, #32]
    410c:	9300      	str	r3, [sp, #0]
    410e:	0033      	movs	r3, r6
    4110:	4f11      	ldr	r7, [pc, #68]	; (4158 <dma_eeprom_process_request+0x90>)
    4112:	47b8      	blx	r7
			busrequest->busy_until = time_read_ticks() + (uint32_t)(EEPROM_WRITE_CYCLE_TIME) * TIME_TICKS_MS_MULT;
    4114:	4b11      	ldr	r3, [pc, #68]	; (415c <dma_eeprom_process_request+0x94>)
    4116:	4798      	blx	r3
    4118:	4b11      	ldr	r3, [pc, #68]	; (4160 <dma_eeprom_process_request+0x98>)
    411a:	4798      	blx	r3
    411c:	4b11      	ldr	r3, [pc, #68]	; (4164 <dma_eeprom_process_request+0x9c>)
    411e:	4912      	ldr	r1, [pc, #72]	; (4168 <dma_eeprom_process_request+0xa0>)
    4120:	4798      	blx	r3
    4122:	4b12      	ldr	r3, [pc, #72]	; (416c <dma_eeprom_process_request+0xa4>)
    4124:	4798      	blx	r3
    4126:	7428      	strb	r0, [r5, #16]
    4128:	0a03      	lsrs	r3, r0, #8
    412a:	746b      	strb	r3, [r5, #17]
    412c:	0c03      	lsrs	r3, r0, #16
    412e:	74ab      	strb	r3, [r5, #18]
    4130:	0e00      	lsrs	r0, r0, #24
    4132:	74e8      	strb	r0, [r5, #19]
			busrequest->busy = true;
    4134:	2301      	movs	r3, #1
    4136:	752b      	strb	r3, [r5, #20]
			request->count -= count;
    4138:	69e3      	ldr	r3, [r4, #28]
    413a:	1b9b      	subs	r3, r3, r6
    413c:	61e3      	str	r3, [r4, #28]
			if (request->count) {
    413e:	d101      	bne.n	4144 <dma_eeprom_process_request+0x7c>
	return true;
    4140:	2001      	movs	r0, #1
    4142:	e7cc      	b.n	40de <dma_eeprom_process_request+0x16>
				request->address += count;
    4144:	69a3      	ldr	r3, [r4, #24]
    4146:	199b      	adds	r3, r3, r6
    4148:	61a3      	str	r3, [r4, #24]
				request->data = (uint8_t*)(request->data) + count;
    414a:	6a23      	ldr	r3, [r4, #32]
    414c:	199b      	adds	r3, r3, r6
    414e:	6223      	str	r3, [r4, #32]
				return false;
    4150:	2000      	movs	r0, #0
    4152:	e7c4      	b.n	40de <dma_eeprom_process_request+0x16>
    4154:	00003ed1 	.word	0x00003ed1
    4158:	00003fcd 	.word	0x00003fcd
    415c:	00002919 	.word	0x00002919
    4160:	00005991 	.word	0x00005991
    4164:	00004c49 	.word	0x00004c49
    4168:	486a6000 	.word	0x486a6000
    416c:	00004c19 	.word	0x00004c19

00004170 <eeprom_request>:

void eeprom_request(BusManager_Process* proc, EEPROM_Request* request, EEPROM_Descriptor* desc, int device_id, EEPROM_Transaction_Type type, uint32_t address, int count, void* data) {
    4170:	b530      	push	{r4, r5, lr}
    4172:	b083      	sub	sp, #12
    4174:	0014      	movs	r4, r2
    4176:	001a      	movs	r2, r3
    4178:	ab06      	add	r3, sp, #24
    417a:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    417c:	2324      	movs	r3, #36	; 0x24
    417e:	54cd      	strb	r5, [r1, r3]
	request->address = address;
    4180:	9b07      	ldr	r3, [sp, #28]
    4182:	618b      	str	r3, [r1, #24]
	request->count = count;
    4184:	9b08      	ldr	r3, [sp, #32]
    4186:	61cb      	str	r3, [r1, #28]
	request->data = data;
    4188:	9b09      	ldr	r3, [sp, #36]	; 0x24
    418a:	620b      	str	r3, [r1, #32]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_eeprom_process_request);
    418c:	4b03      	ldr	r3, [pc, #12]	; (419c <eeprom_request+0x2c>)
    418e:	9301      	str	r3, [sp, #4]
    4190:	9100      	str	r1, [sp, #0]
    4192:	0023      	movs	r3, r4
    4194:	4c02      	ldr	r4, [pc, #8]	; (41a0 <eeprom_request+0x30>)
    4196:	47a0      	blx	r4
}
    4198:	b003      	add	sp, #12
    419a:	bd30      	pop	{r4, r5, pc}
    419c:	000040c9 	.word	0x000040c9
    41a0:	00003e49 	.word	0x00003e49

000041a4 <eeprom_wait_until_done>:

void eeprom_wait_until_done(EEPROM_Request* request) {
    41a4:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    41a6:	3015      	adds	r0, #21
    41a8:	2300      	movs	r3, #0
    41aa:	22ff      	movs	r2, #255	; 0xff
    41ac:	2103      	movs	r1, #3
    41ae:	4c01      	ldr	r4, [pc, #4]	; (41b4 <eeprom_wait_until_done+0x10>)
    41b0:	47a0      	blx	r4
    41b2:	bd10      	pop	{r4, pc}
    41b4:	00003a31 	.word	0x00003a31

000041b8 <dma_imu_icm20948_read>:
void dma_imu_icm20948_read(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* writeback) {
    41b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ba:	46de      	mov	lr, fp
    41bc:	4657      	mov	r7, sl
    41be:	464e      	mov	r6, r9
    41c0:	4645      	mov	r5, r8
    41c2:	b5e0      	push	{r5, r6, r7, lr}
    41c4:	b087      	sub	sp, #28
    41c6:	0004      	movs	r4, r0
    41c8:	000e      	movs	r6, r1
    41ca:	9304      	str	r3, [sp, #16]
    41cc:	2317      	movs	r3, #23
    41ce:	446b      	add	r3, sp
    41d0:	701a      	strb	r2, [r3, #0]
	address |= IMU_READ_MASK;
    41d2:	b2d1      	uxtb	r1, r2
    41d4:	2280      	movs	r2, #128	; 0x80
    41d6:	4252      	negs	r2, r2
    41d8:	430a      	orrs	r2, r1
    41da:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    41dc:	7802      	ldrb	r2, [r0, #0]
    41de:	7841      	ldrb	r1, [r0, #1]
    41e0:	0209      	lsls	r1, r1, #8
    41e2:	4311      	orrs	r1, r2
    41e4:	7882      	ldrb	r2, [r0, #2]
    41e6:	0412      	lsls	r2, r2, #16
    41e8:	430a      	orrs	r2, r1
    41ea:	78c5      	ldrb	r5, [r0, #3]
    41ec:	062d      	lsls	r5, r5, #24
    41ee:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    41f0:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    41f2:	2228      	movs	r2, #40	; 0x28
    41f4:	4691      	mov	r9, r2
    41f6:	44a9      	add	r9, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    41f8:	0100      	lsls	r0, r0, #4
    41fa:	4a24      	ldr	r2, [pc, #144]	; (428c <dma_imu_icm20948_read+0xd4>)
    41fc:	4692      	mov	sl, r2
    41fe:	4450      	add	r0, sl
    4200:	4a23      	ldr	r2, [pc, #140]	; (4290 <dma_imu_icm20948_read+0xd8>)
    4202:	4693      	mov	fp, r2
    4204:	9203      	str	r2, [sp, #12]
    4206:	464a      	mov	r2, r9
    4208:	9202      	str	r2, [sp, #8]
    420a:	9301      	str	r3, [sp, #4]
    420c:	2201      	movs	r2, #1
    420e:	9200      	str	r2, [sp, #0]
    4210:	2300      	movs	r3, #0
    4212:	2200      	movs	r2, #0
    4214:	2100      	movs	r1, #0
    4216:	4f1f      	ldr	r7, [pc, #124]	; (4294 <dma_imu_icm20948_read+0xdc>)
    4218:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    421a:	466b      	mov	r3, sp
    421c:	8a1b      	ldrh	r3, [r3, #16]
    421e:	4698      	mov	r8, r3
    4220:	2300      	movs	r3, #0
    4222:	9303      	str	r3, [sp, #12]
    4224:	4649      	mov	r1, r9
    4226:	9102      	str	r1, [sp, #8]
    4228:	4b1b      	ldr	r3, [pc, #108]	; (4298 <dma_imu_icm20948_read+0xe0>)
    422a:	9301      	str	r3, [sp, #4]
    422c:	4641      	mov	r1, r8
    422e:	9100      	str	r1, [sp, #0]
    4230:	2300      	movs	r3, #0
    4232:	2200      	movs	r2, #0
    4234:	2100      	movs	r1, #0
    4236:	4658      	mov	r0, fp
    4238:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    423a:	7870      	ldrb	r0, [r6, #1]
    423c:	0100      	lsls	r0, r0, #4
    423e:	4450      	add	r0, sl
    4240:	4916      	ldr	r1, [pc, #88]	; (429c <dma_imu_icm20948_read+0xe4>)
    4242:	468b      	mov	fp, r1
    4244:	9103      	str	r1, [sp, #12]
    4246:	4b16      	ldr	r3, [pc, #88]	; (42a0 <dma_imu_icm20948_read+0xe8>)
    4248:	9302      	str	r3, [sp, #8]
    424a:	4649      	mov	r1, r9
    424c:	9101      	str	r1, [sp, #4]
    424e:	2201      	movs	r2, #1
    4250:	9200      	str	r2, [sp, #0]
    4252:	2300      	movs	r3, #0
    4254:	2200      	movs	r2, #0
    4256:	2100      	movs	r1, #0
    4258:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, true, DMA_BEATSIZE_BYTE, count,
    425a:	2300      	movs	r3, #0
    425c:	9303      	str	r3, [sp, #12]
    425e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4260:	9302      	str	r3, [sp, #8]
    4262:	464b      	mov	r3, r9
    4264:	9301      	str	r3, [sp, #4]
    4266:	4643      	mov	r3, r8
    4268:	9300      	str	r3, [sp, #0]
    426a:	2300      	movs	r3, #0
    426c:	2201      	movs	r2, #1
    426e:	2100      	movs	r1, #0
    4270:	4658      	mov	r0, fp
    4272:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    4274:	1d21      	adds	r1, r4, #4
    4276:	0032      	movs	r2, r6
    4278:	0028      	movs	r0, r5
    427a:	4b0a      	ldr	r3, [pc, #40]	; (42a4 <dma_imu_icm20948_read+0xec>)
    427c:	4798      	blx	r3
}
    427e:	b007      	add	sp, #28
    4280:	bcf0      	pop	{r4, r5, r6, r7}
    4282:	46bb      	mov	fp, r7
    4284:	46b2      	mov	sl, r6
    4286:	46a9      	mov	r9, r5
    4288:	46a0      	mov	r8, r4
    428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    428c:	20000538 	.word	0x20000538
    4290:	200007e0 	.word	0x200007e0
    4294:	00001a71 	.word	0x00001a71
    4298:	00006185 	.word	0x00006185
    429c:	200007d0 	.word	0x200007d0
    42a0:	2000033c 	.word	0x2000033c
    42a4:	00004465 	.word	0x00004465

000042a8 <dma_imu_icm20948_write>:
void dma_imu_icm20948_write(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, uint8_t address, int count, void* data) {
    42a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    42aa:	46de      	mov	lr, fp
    42ac:	4657      	mov	r7, sl
    42ae:	464e      	mov	r6, r9
    42b0:	4645      	mov	r5, r8
    42b2:	b5e0      	push	{r5, r6, r7, lr}
    42b4:	b087      	sub	sp, #28
    42b6:	0004      	movs	r4, r0
    42b8:	000e      	movs	r6, r1
    42ba:	9304      	str	r3, [sp, #16]
    42bc:	2317      	movs	r3, #23
    42be:	446b      	add	r3, sp
    42c0:	701a      	strb	r2, [r3, #0]
	address &= IMU_WRITE_MASK;
    42c2:	b2d1      	uxtb	r1, r2
    42c4:	227f      	movs	r2, #127	; 0x7f
    42c6:	400a      	ands	r2, r1
    42c8:	701a      	strb	r2, [r3, #0]
	register sercom_registers_t* sercom = imudesc->sercom;
    42ca:	7802      	ldrb	r2, [r0, #0]
    42cc:	7841      	ldrb	r1, [r0, #1]
    42ce:	0209      	lsls	r1, r1, #8
    42d0:	4311      	orrs	r1, r2
    42d2:	7882      	ldrb	r2, [r0, #2]
    42d4:	0412      	lsls	r2, r2, #16
    42d6:	430a      	orrs	r2, r1
    42d8:	78c5      	ldrb	r5, [r0, #3]
    42da:	062d      	lsls	r5, r5, #24
    42dc:	4315      	orrs	r5, r2
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    42de:	7830      	ldrb	r0, [r6, #0]
	&address, &(sercom->SPIM.SERCOM_DATA), &txdesc2);
    42e0:	2228      	movs	r2, #40	; 0x28
    42e2:	4690      	mov	r8, r2
    42e4:	44a8      	add	r8, r5
	dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    42e6:	0100      	lsls	r0, r0, #4
    42e8:	4a24      	ldr	r2, [pc, #144]	; (437c <dma_imu_icm20948_write+0xd4>)
    42ea:	4691      	mov	r9, r2
    42ec:	4448      	add	r0, r9
    42ee:	4a24      	ldr	r2, [pc, #144]	; (4380 <dma_imu_icm20948_write+0xd8>)
    42f0:	4693      	mov	fp, r2
    42f2:	9203      	str	r2, [sp, #12]
    42f4:	4642      	mov	r2, r8
    42f6:	9202      	str	r2, [sp, #8]
    42f8:	9301      	str	r3, [sp, #4]
    42fa:	2201      	movs	r2, #1
    42fc:	9200      	str	r2, [sp, #0]
    42fe:	2300      	movs	r3, #0
    4300:	2200      	movs	r2, #0
    4302:	2100      	movs	r1, #0
    4304:	4f1f      	ldr	r7, [pc, #124]	; (4384 <dma_imu_icm20948_write+0xdc>)
    4306:	47b8      	blx	r7
	dma_create_descriptor(&txdesc2, true, false, DMA_BEATSIZE_BYTE, count,
    4308:	466b      	mov	r3, sp
    430a:	8a1b      	ldrh	r3, [r3, #16]
    430c:	469a      	mov	sl, r3
    430e:	2300      	movs	r3, #0
    4310:	9303      	str	r3, [sp, #12]
    4312:	4641      	mov	r1, r8
    4314:	9102      	str	r1, [sp, #8]
    4316:	9910      	ldr	r1, [sp, #64]	; 0x40
    4318:	9101      	str	r1, [sp, #4]
    431a:	4651      	mov	r1, sl
    431c:	9100      	str	r1, [sp, #0]
    431e:	2200      	movs	r2, #0
    4320:	2101      	movs	r1, #1
    4322:	4658      	mov	r0, fp
    4324:	47b8      	blx	r7
	dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, false, DMA_BEATSIZE_BYTE, 1,
    4326:	7870      	ldrb	r0, [r6, #1]
    4328:	0100      	lsls	r0, r0, #4
    432a:	4448      	add	r0, r9
    432c:	4916      	ldr	r1, [pc, #88]	; (4388 <dma_imu_icm20948_write+0xe0>)
    432e:	4689      	mov	r9, r1
    4330:	9103      	str	r1, [sp, #12]
    4332:	4916      	ldr	r1, [pc, #88]	; (438c <dma_imu_icm20948_write+0xe4>)
    4334:	468b      	mov	fp, r1
    4336:	9102      	str	r1, [sp, #8]
    4338:	4641      	mov	r1, r8
    433a:	9101      	str	r1, [sp, #4]
    433c:	2201      	movs	r2, #1
    433e:	9200      	str	r2, [sp, #0]
    4340:	2300      	movs	r3, #0
    4342:	2200      	movs	r2, #0
    4344:	2100      	movs	r1, #0
    4346:	47b8      	blx	r7
	dma_create_descriptor(&rxdesc2, false, false, DMA_BEATSIZE_BYTE, count,
    4348:	2300      	movs	r3, #0
    434a:	9303      	str	r3, [sp, #12]
    434c:	465b      	mov	r3, fp
    434e:	9302      	str	r3, [sp, #8]
    4350:	4643      	mov	r3, r8
    4352:	9301      	str	r3, [sp, #4]
    4354:	4653      	mov	r3, sl
    4356:	9300      	str	r3, [sp, #0]
    4358:	2300      	movs	r3, #0
    435a:	2200      	movs	r2, #0
    435c:	2100      	movs	r1, #0
    435e:	4648      	mov	r0, r9
    4360:	47b8      	blx	r7
	dma_spi_transaction(sercom, &(imudesc->sspin), dmadesc);
    4362:	1d21      	adds	r1, r4, #4
    4364:	0032      	movs	r2, r6
    4366:	0028      	movs	r0, r5
    4368:	4b09      	ldr	r3, [pc, #36]	; (4390 <dma_imu_icm20948_write+0xe8>)
    436a:	4798      	blx	r3
}
    436c:	b007      	add	sp, #28
    436e:	bcf0      	pop	{r4, r5, r6, r7}
    4370:	46bb      	mov	fp, r7
    4372:	46b2      	mov	sl, r6
    4374:	46a9      	mov	r9, r5
    4376:	46a0      	mov	r8, r4
    4378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    437a:	46c0      	nop			; (mov r8, r8)
    437c:	20000538 	.word	0x20000538
    4380:	200007e0 	.word	0x200007e0
    4384:	00001a71 	.word	0x00001a71
    4388:	200007d0 	.word	0x200007d0
    438c:	2000033c 	.word	0x2000033c
    4390:	00004465 	.word	0x00004465

00004394 <dma_imu_icm20948_process_request>:
bool dma_imu_icm20948_process_request(IMU_ICM20948_Descriptor* imudesc, DMA_Descriptor* dmadesc, IMU_Request* request, BusManager_Transaction_Request* busrequest) {
    4394:	b5f0      	push	{r4, r5, r6, r7, lr}
    4396:	b085      	sub	sp, #20
    4398:	0005      	movs	r5, r0
    439a:	000e      	movs	r6, r1
    439c:	0014      	movs	r4, r2
	IMU_ON_BUS();
    439e:	2180      	movs	r1, #128	; 0x80
    43a0:	0389      	lsls	r1, r1, #14
    43a2:	2000      	movs	r0, #0
    43a4:	4b17      	ldr	r3, [pc, #92]	; (4404 <dma_imu_icm20948_process_request+0x70>)
    43a6:	4798      	blx	r3
	uint8_t bank = (request->user_bank) << 4;
    43a8:	2325      	movs	r3, #37	; 0x25
    43aa:	5ce3      	ldrb	r3, [r4, r3]
    43ac:	011b      	lsls	r3, r3, #4
    43ae:	220f      	movs	r2, #15
    43b0:	446a      	add	r2, sp
    43b2:	7013      	strb	r3, [r2, #0]
	dma_imu_icm20948_write(imudesc, dmadesc, REG_BANK_SEL, 1, &bank);
    43b4:	9200      	str	r2, [sp, #0]
    43b6:	2301      	movs	r3, #1
    43b8:	227f      	movs	r2, #127	; 0x7f
    43ba:	0031      	movs	r1, r6
    43bc:	0028      	movs	r0, r5
    43be:	4f12      	ldr	r7, [pc, #72]	; (4408 <dma_imu_icm20948_process_request+0x74>)
    43c0:	47b8      	blx	r7
	switch (request->type) {
    43c2:	2324      	movs	r3, #36	; 0x24
    43c4:	5ce3      	ldrb	r3, [r4, r3]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d009      	beq.n	43de <dma_imu_icm20948_process_request+0x4a>
    43ca:	2b01      	cmp	r3, #1
    43cc:	d010      	beq.n	43f0 <dma_imu_icm20948_process_request+0x5c>
	IMU_OFF_BUS();
    43ce:	2180      	movs	r1, #128	; 0x80
    43d0:	0389      	lsls	r1, r1, #14
    43d2:	2000      	movs	r0, #0
    43d4:	4b0d      	ldr	r3, [pc, #52]	; (440c <dma_imu_icm20948_process_request+0x78>)
    43d6:	4798      	blx	r3
}
    43d8:	2001      	movs	r0, #1
    43da:	b005      	add	sp, #20
    43dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dma_imu_icm20948_read(imudesc, dmadesc, request->address, request->count, request->data);
    43de:	69e3      	ldr	r3, [r4, #28]
    43e0:	7e22      	ldrb	r2, [r4, #24]
    43e2:	6a21      	ldr	r1, [r4, #32]
    43e4:	9100      	str	r1, [sp, #0]
    43e6:	0031      	movs	r1, r6
    43e8:	0028      	movs	r0, r5
    43ea:	4c09      	ldr	r4, [pc, #36]	; (4410 <dma_imu_icm20948_process_request+0x7c>)
    43ec:	47a0      	blx	r4
		break;
    43ee:	e7ee      	b.n	43ce <dma_imu_icm20948_process_request+0x3a>
		dma_imu_icm20948_write(imudesc, dmadesc, request->address, request->count, request->data);
    43f0:	69e3      	ldr	r3, [r4, #28]
    43f2:	7e22      	ldrb	r2, [r4, #24]
    43f4:	6a21      	ldr	r1, [r4, #32]
    43f6:	9100      	str	r1, [sp, #0]
    43f8:	0031      	movs	r1, r6
    43fa:	0028      	movs	r0, r5
    43fc:	4c02      	ldr	r4, [pc, #8]	; (4408 <dma_imu_icm20948_process_request+0x74>)
    43fe:	47a0      	blx	r4
		break;
    4400:	e7e5      	b.n	43ce <dma_imu_icm20948_process_request+0x3a>
    4402:	46c0      	nop			; (mov r8, r8)
    4404:	000022d1 	.word	0x000022d1
    4408:	000042a9 	.word	0x000042a9
    440c:	000022e1 	.word	0x000022e1
    4410:	000041b9 	.word	0x000041b9

00004414 <imu_icm20948_request>:
void imu_icm20948_request(BusManager_Process* proc, IMU_Request* request, IMU_ICM20948_Descriptor* desc, int device_id, IMU_Transaction_Type type, uint8_t user_bank, uint32_t address, int count, void* data) {
    4414:	b570      	push	{r4, r5, r6, lr}
    4416:	b082      	sub	sp, #8
    4418:	0014      	movs	r4, r2
    441a:	001a      	movs	r2, r3
    441c:	ab06      	add	r3, sp, #24
    441e:	781e      	ldrb	r6, [r3, #0]
    4420:	ab07      	add	r3, sp, #28
    4422:	781d      	ldrb	r5, [r3, #0]
	request->type = type;
    4424:	2324      	movs	r3, #36	; 0x24
    4426:	54ce      	strb	r6, [r1, r3]
	request->address = address;
    4428:	9b08      	ldr	r3, [sp, #32]
    442a:	618b      	str	r3, [r1, #24]
	request->count = count;
    442c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    442e:	61cb      	str	r3, [r1, #28]
	request->data = data;
    4430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4432:	620b      	str	r3, [r1, #32]
	request->user_bank = user_bank;
    4434:	2325      	movs	r3, #37	; 0x25
    4436:	54cd      	strb	r5, [r1, r3]
	busmanager_request_transaction(proc, &(request->request), device_id, desc, request, dma_imu_icm20948_process_request);
    4438:	4b03      	ldr	r3, [pc, #12]	; (4448 <imu_icm20948_request+0x34>)
    443a:	9301      	str	r3, [sp, #4]
    443c:	9100      	str	r1, [sp, #0]
    443e:	0023      	movs	r3, r4
    4440:	4c02      	ldr	r4, [pc, #8]	; (444c <imu_icm20948_request+0x38>)
    4442:	47a0      	blx	r4
}
    4444:	b002      	add	sp, #8
    4446:	bd70      	pop	{r4, r5, r6, pc}
    4448:	00004395 	.word	0x00004395
    444c:	00003e49 	.word	0x00003e49

00004450 <imu_icm20948_wait_until_done>:
void imu_icm20948_wait_until_done(IMU_Request* request) {
    4450:	b510      	push	{r4, lr}
	wait_until(&(request->request.status), BusManager_Request_CompleteNotBusy, U8_MASK, Process_Wait_Until_Equal);
    4452:	3015      	adds	r0, #21
    4454:	2300      	movs	r3, #0
    4456:	22ff      	movs	r2, #255	; 0xff
    4458:	2103      	movs	r1, #3
    445a:	4c01      	ldr	r4, [pc, #4]	; (4460 <imu_icm20948_wait_until_done+0x10>)
    445c:	47a0      	blx	r4
}
    445e:	bd10      	pop	{r4, pc}
    4460:	00003a31 	.word	0x00003a31

00004464 <dma_spi_transaction>:
#include "dma_eeprom_cat25.h"

DMA_Descriptor_Type txdesc2;
DMA_Descriptor_Type rxdesc2;

void dma_spi_transaction(sercom_registers_t* sercom, Pin* sspin, DMA_Descriptor* desc) {
    4464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4466:	0007      	movs	r7, r0
    4468:	000d      	movs	r5, r1
    446a:	0014      	movs	r4, r2
	// disable channels
	dma_disable_channel(desc->txchannel);
    446c:	7810      	ldrb	r0, [r2, #0]
    446e:	4e1c      	ldr	r6, [pc, #112]	; (44e0 <dma_spi_transaction+0x7c>)
    4470:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    4472:	7860      	ldrb	r0, [r4, #1]
    4474:	47b0      	blx	r6
	// flush spi
	spi_flush(sercom);
    4476:	0038      	movs	r0, r7
    4478:	4b1a      	ldr	r3, [pc, #104]	; (44e4 <dma_spi_transaction+0x80>)
    447a:	4798      	blx	r3
	// init for correct parameters
	dma_init_channel(desc->txchannel, DMA_TRIGACT_BEAT, desc->txtrig, desc->priority);
    447c:	7923      	ldrb	r3, [r4, #4]
    447e:	78e2      	ldrb	r2, [r4, #3]
    4480:	7820      	ldrb	r0, [r4, #0]
    4482:	2102      	movs	r1, #2
    4484:	4f18      	ldr	r7, [pc, #96]	; (44e8 <dma_spi_transaction+0x84>)
    4486:	47b8      	blx	r7
	dma_init_channel(desc->rxchannel, DMA_TRIGACT_BEAT, desc->rxtrig, desc->priority);
    4488:	7923      	ldrb	r3, [r4, #4]
    448a:	78a2      	ldrb	r2, [r4, #2]
    448c:	7860      	ldrb	r0, [r4, #1]
    448e:	2102      	movs	r1, #2
    4490:	47b8      	blx	r7
	// set ss low
	port_clear(sspin->port, sspin->pin);
    4492:	782b      	ldrb	r3, [r5, #0]
    4494:	786a      	ldrb	r2, [r5, #1]
    4496:	0212      	lsls	r2, r2, #8
    4498:	431a      	orrs	r2, r3
    449a:	78ab      	ldrb	r3, [r5, #2]
    449c:	041b      	lsls	r3, r3, #16
    449e:	4313      	orrs	r3, r2
    44a0:	78e9      	ldrb	r1, [r5, #3]
    44a2:	0609      	lsls	r1, r1, #24
    44a4:	4319      	orrs	r1, r3
    44a6:	7928      	ldrb	r0, [r5, #4]
    44a8:	4b10      	ldr	r3, [pc, #64]	; (44ec <dma_spi_transaction+0x88>)
    44aa:	4798      	blx	r3
	// start transfer
	dma_enable_channel(desc->txchannel);
    44ac:	7820      	ldrb	r0, [r4, #0]
    44ae:	4f10      	ldr	r7, [pc, #64]	; (44f0 <dma_spi_transaction+0x8c>)
    44b0:	47b8      	blx	r7
	dma_enable_channel(desc->rxchannel);
    44b2:	7860      	ldrb	r0, [r4, #1]
    44b4:	47b8      	blx	r7
	// wait until transfer done
	rtos_dma_wait_until_end(desc->rxchannel);
    44b6:	7860      	ldrb	r0, [r4, #1]
    44b8:	4b0e      	ldr	r3, [pc, #56]	; (44f4 <dma_spi_transaction+0x90>)
    44ba:	4798      	blx	r3
	// disable channels
	dma_disable_channel(desc->txchannel);
    44bc:	7820      	ldrb	r0, [r4, #0]
    44be:	47b0      	blx	r6
	dma_disable_channel(desc->rxchannel);
    44c0:	7860      	ldrb	r0, [r4, #1]
    44c2:	47b0      	blx	r6
	// set ss high
	port_set(sspin->port, sspin->pin);
    44c4:	782b      	ldrb	r3, [r5, #0]
    44c6:	786a      	ldrb	r2, [r5, #1]
    44c8:	0212      	lsls	r2, r2, #8
    44ca:	431a      	orrs	r2, r3
    44cc:	78ab      	ldrb	r3, [r5, #2]
    44ce:	041b      	lsls	r3, r3, #16
    44d0:	4313      	orrs	r3, r2
    44d2:	78e9      	ldrb	r1, [r5, #3]
    44d4:	0609      	lsls	r1, r1, #24
    44d6:	4319      	orrs	r1, r3
    44d8:	7928      	ldrb	r0, [r5, #4]
    44da:	4b07      	ldr	r3, [pc, #28]	; (44f8 <dma_spi_transaction+0x94>)
    44dc:	4798      	blx	r3
    44de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44e0:	00001b51 	.word	0x00001b51
    44e4:	000027d1 	.word	0x000027d1
    44e8:	00001add 	.word	0x00001add
    44ec:	000022e1 	.word	0x000022e1
    44f0:	00001b29 	.word	0x00001b29
    44f4:	00004569 	.word	0x00004569
    44f8:	000022d1 	.word	0x000022d1

000044fc <rtos_dma_wait_until_end_callback>:
#include "Drivers/dma.h"
#include "RTOS/rtos.h"

void rtos_dma_wait_until_end_callback() {
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    44fc:	4b03      	ldr	r3, [pc, #12]	; (450c <rtos_dma_wait_until_end_callback+0x10>)
    44fe:	681b      	ldr	r3, [r3, #0]
    4500:	6a1b      	ldr	r3, [r3, #32]
    4502:	7819      	ldrb	r1, [r3, #0]
    4504:	4a02      	ldr	r2, [pc, #8]	; (4510 <rtos_dma_wait_until_end_callback+0x14>)
    4506:	233f      	movs	r3, #63	; 0x3f
    4508:	54d1      	strb	r1, [r2, r3]

	// // for evaluation
	// if (DMAC_REGS->DMAC_CHINTFLAG & DMAC_CHINTFLAG_TCMPL(1))
	// 	current_process->status = Process_State_Running;
}
    450a:	4770      	bx	lr
    450c:	20000774 	.word	0x20000774
    4510:	41004800 	.word	0x41004800

00004514 <rtos_dma_wait_until_end_or_timeout_callback>:
	// 	Process_Wait_Until_None, rtos_dma_wait_until_end_callback);
	// while (!(DMAC_REGS->DMAC_CHINTFLAG & DMAC_CHINTFLAG_TCMPL(1))) DMAC_REGS->DMAC_CHID = channel;
	current_process->data = data;
}

void rtos_dma_wait_until_end_or_timeout_callback() {
    4514:	b510      	push	{r4, lr}
    4516:	b082      	sub	sp, #8
	// Ensure correct DMAC channel is being checked
	DMAC_REGS->DMAC_CHID = *((uint8_t*)(current_process->data));
    4518:	4c0f      	ldr	r4, [pc, #60]	; (4558 <rtos_dma_wait_until_end_or_timeout_callback+0x44>)
    451a:	6823      	ldr	r3, [r4, #0]
    451c:	6a1b      	ldr	r3, [r3, #32]
    451e:	7819      	ldrb	r1, [r3, #0]
    4520:	4a0e      	ldr	r2, [pc, #56]	; (455c <rtos_dma_wait_until_end_or_timeout_callback+0x48>)
    4522:	233f      	movs	r3, #63	; 0x3f
    4524:	54d1      	strb	r1, [r2, r3]

	// Check whether timeout has occured
	volatile uint32_t time = time_read_ticks();
    4526:	4b0e      	ldr	r3, [pc, #56]	; (4560 <rtos_dma_wait_until_end_or_timeout_callback+0x4c>)
    4528:	4798      	blx	r3
    452a:	9001      	str	r0, [sp, #4]
	int t = (int)(current_process->return_deadline - time);
    452c:	6822      	ldr	r2, [r4, #0]
    452e:	6953      	ldr	r3, [r2, #20]
    4530:	9901      	ldr	r1, [sp, #4]
    4532:	1a5b      	subs	r3, r3, r1
	static volatile int min = INT32_MAX;
	min = (t < min) ? t : min;
    4534:	490b      	ldr	r1, [pc, #44]	; (4564 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    4536:	6809      	ldr	r1, [r1, #0]
    4538:	4299      	cmp	r1, r3
    453a:	dc07      	bgt.n	454c <rtos_dma_wait_until_end_or_timeout_callback+0x38>
    453c:	4909      	ldr	r1, [pc, #36]	; (4564 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    453e:	6808      	ldr	r0, [r1, #0]
    4540:	4908      	ldr	r1, [pc, #32]	; (4564 <rtos_dma_wait_until_end_or_timeout_callback+0x50>)
    4542:	6008      	str	r0, [r1, #0]
	if (t <= 0) current_process->status = Process_State_Running;
    4544:	2b00      	cmp	r3, #0
    4546:	dd03      	ble.n	4550 <rtos_dma_wait_until_end_or_timeout_callback+0x3c>
}
    4548:	b002      	add	sp, #8
    454a:	bd10      	pop	{r4, pc}
	min = (t < min) ? t : min;
    454c:	0018      	movs	r0, r3
    454e:	e7f7      	b.n	4540 <rtos_dma_wait_until_end_or_timeout_callback+0x2c>
	if (t <= 0) current_process->status = Process_State_Running;
    4550:	2301      	movs	r3, #1
    4552:	6193      	str	r3, [r2, #24]
}
    4554:	e7f8      	b.n	4548 <rtos_dma_wait_until_end_or_timeout_callback+0x34>
    4556:	46c0      	nop			; (mov r8, r8)
    4558:	20000774 	.word	0x20000774
    455c:	41004800 	.word	0x41004800
    4560:	00002919 	.word	0x00002919
    4564:	200000f8 	.word	0x200000f8

00004568 <rtos_dma_wait_until_end>:
void rtos_dma_wait_until_end(int channel) {
    4568:	b570      	push	{r4, r5, r6, lr}
    456a:	b084      	sub	sp, #16
    456c:	9003      	str	r0, [sp, #12]
	void* data = current_process->data;
    456e:	4c08      	ldr	r4, [pc, #32]	; (4590 <rtos_dma_wait_until_end+0x28>)
    4570:	6823      	ldr	r3, [r4, #0]
    4572:	6a1d      	ldr	r5, [r3, #32]
	current_process->data = &channel;
    4574:	aa03      	add	r2, sp, #12
    4576:	621a      	str	r2, [r3, #32]
	wait_until_callback(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    4578:	4b06      	ldr	r3, [pc, #24]	; (4594 <rtos_dma_wait_until_end+0x2c>)
    457a:	9300      	str	r3, [sp, #0]
    457c:	2300      	movs	r3, #0
    457e:	2202      	movs	r2, #2
    4580:	2102      	movs	r1, #2
    4582:	4805      	ldr	r0, [pc, #20]	; (4598 <rtos_dma_wait_until_end+0x30>)
    4584:	4e05      	ldr	r6, [pc, #20]	; (459c <rtos_dma_wait_until_end+0x34>)
    4586:	47b0      	blx	r6
	current_process->data = data;
    4588:	6823      	ldr	r3, [r4, #0]
    458a:	621d      	str	r5, [r3, #32]
}
    458c:	b004      	add	sp, #16
    458e:	bd70      	pop	{r4, r5, r6, pc}
    4590:	20000774 	.word	0x20000774
    4594:	000044fd 	.word	0x000044fd
    4598:	4100484e 	.word	0x4100484e
    459c:	00003a8d 	.word	0x00003a8d

000045a0 <rtos_dma_wait_until_end_or_timeout>:

void rtos_dma_wait_until_end_or_timeout(int channel, uint32_t timeout_ticks) {
    45a0:	b570      	push	{r4, r5, r6, lr}
    45a2:	b084      	sub	sp, #16
    45a4:	9003      	str	r0, [sp, #12]
    45a6:	000c      	movs	r4, r1
	// set return deadline for process
	current_process->return_deadline = time_read_ticks() + timeout_ticks;
    45a8:	4b0a      	ldr	r3, [pc, #40]	; (45d4 <rtos_dma_wait_until_end_or_timeout+0x34>)
    45aa:	4798      	blx	r3
    45ac:	4d0a      	ldr	r5, [pc, #40]	; (45d8 <rtos_dma_wait_until_end_or_timeout+0x38>)
    45ae:	682b      	ldr	r3, [r5, #0]
    45b0:	1900      	adds	r0, r0, r4
    45b2:	6158      	str	r0, [r3, #20]

	// save value of current_process->data as it is changed by this function
	void* data = current_process->data;
    45b4:	6a1c      	ldr	r4, [r3, #32]
	current_process->data = &channel;
    45b6:	aa03      	add	r2, sp, #12
    45b8:	621a      	str	r2, [r3, #32]
	wait_until_callback_preserve_deadline(&(DMAC_REGS->DMAC_CHINTFLAG), DMAC_CHINTFLAG_TCMPL(1), DMAC_CHINTFLAG_TCMPL(1),
    45ba:	4b08      	ldr	r3, [pc, #32]	; (45dc <rtos_dma_wait_until_end_or_timeout+0x3c>)
    45bc:	9300      	str	r3, [sp, #0]
    45be:	2300      	movs	r3, #0
    45c0:	2202      	movs	r2, #2
    45c2:	2102      	movs	r1, #2
    45c4:	4806      	ldr	r0, [pc, #24]	; (45e0 <rtos_dma_wait_until_end_or_timeout+0x40>)
    45c6:	4e07      	ldr	r6, [pc, #28]	; (45e4 <rtos_dma_wait_until_end_or_timeout+0x44>)
    45c8:	47b0      	blx	r6
		Process_Wait_Until_Equal, rtos_dma_wait_until_end_or_timeout_callback);
		
	current_process->data = data;
    45ca:	682b      	ldr	r3, [r5, #0]
    45cc:	621c      	str	r4, [r3, #32]
    45ce:	b004      	add	sp, #16
    45d0:	bd70      	pop	{r4, r5, r6, pc}
    45d2:	46c0      	nop			; (mov r8, r8)
    45d4:	00002919 	.word	0x00002919
    45d8:	20000774 	.word	0x20000774
    45dc:	00004515 	.word	0x00004515
    45e0:	4100484e 	.word	0x4100484e
    45e4:	00003ae9 	.word	0x00003ae9

000045e8 <rtos_uart_start_send_buffer>:
#include "rtos_uart.h"
#include "Drivers/sercom.h"
#include "rtos_dma.h"

bool rtos_uart_start_send_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    45e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ea:	b087      	sub	sp, #28
    45ec:	0005      	movs	r5, r0
    45ee:	000c      	movs	r4, r1
    45f0:	0016      	movs	r6, r2
    45f2:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    45f4:	4b12      	ldr	r3, [pc, #72]	; (4640 <rtos_uart_start_send_buffer+0x58>)
    45f6:	4798      	blx	r3
    45f8:	1e07      	subs	r7, r0, #0
    45fa:	d102      	bne.n	4602 <rtos_uart_start_send_buffer+0x1a>
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->txchannel);

    return true;
}
    45fc:	0038      	movs	r0, r7
    45fe:	b007      	add	sp, #28
    4600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    4602:	7820      	ldrb	r0, [r4, #0]
    buffer, &(sercom->USART_INT.SERCOM_DATA), DMA_NEXTDESCRIPTOR_NONE);
    4604:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->txchannel]), true, false, DMA_BEATSIZE_BYTE, count,
    4606:	0100      	lsls	r0, r0, #4
    4608:	4b0e      	ldr	r3, [pc, #56]	; (4644 <rtos_uart_start_send_buffer+0x5c>)
    460a:	18c0      	adds	r0, r0, r3
    460c:	2300      	movs	r3, #0
    460e:	9303      	str	r3, [sp, #12]
    4610:	9502      	str	r5, [sp, #8]
    4612:	9601      	str	r6, [sp, #4]
    4614:	466b      	mov	r3, sp
    4616:	8a9e      	ldrh	r6, [r3, #20]
    4618:	9600      	str	r6, [sp, #0]
    461a:	2300      	movs	r3, #0
    461c:	2200      	movs	r2, #0
    461e:	2101      	movs	r1, #1
    4620:	4d09      	ldr	r5, [pc, #36]	; (4648 <rtos_uart_start_send_buffer+0x60>)
    4622:	47a8      	blx	r5
	dma_disable_channel(dmadesc->txchannel);
    4624:	7820      	ldrb	r0, [r4, #0]
    4626:	4b09      	ldr	r3, [pc, #36]	; (464c <rtos_uart_start_send_buffer+0x64>)
    4628:	4798      	blx	r3
	dma_init_channel(dmadesc->txchannel, DMA_TRIGACT_BEAT, dmadesc->txtrig, dmadesc->priority);
    462a:	7923      	ldrb	r3, [r4, #4]
    462c:	78e2      	ldrb	r2, [r4, #3]
    462e:	7820      	ldrb	r0, [r4, #0]
    4630:	2102      	movs	r1, #2
    4632:	4d07      	ldr	r5, [pc, #28]	; (4650 <rtos_uart_start_send_buffer+0x68>)
    4634:	47a8      	blx	r5
	dma_enable_channel(dmadesc->txchannel);
    4636:	7820      	ldrb	r0, [r4, #0]
    4638:	4b06      	ldr	r3, [pc, #24]	; (4654 <rtos_uart_start_send_buffer+0x6c>)
    463a:	4798      	blx	r3
    return true;
    463c:	e7de      	b.n	45fc <rtos_uart_start_send_buffer+0x14>
    463e:	46c0      	nop			; (mov r8, r8)
    4640:	000025cd 	.word	0x000025cd
    4644:	20000538 	.word	0x20000538
    4648:	00001a71 	.word	0x00001a71
    464c:	00001b51 	.word	0x00001b51
    4650:	00001add 	.word	0x00001add
    4654:	00001b29 	.word	0x00001b29

00004658 <rtos_uart_wait_until_send_complete>:

void rtos_uart_wait_until_send_complete(DMA_Descriptor* dmadesc) {
    4658:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->txchannel);
    465a:	7800      	ldrb	r0, [r0, #0]
    465c:	4b01      	ldr	r3, [pc, #4]	; (4664 <rtos_uart_wait_until_send_complete+0xc>)
    465e:	4798      	blx	r3
}
    4660:	bd10      	pop	{r4, pc}
    4662:	46c0      	nop			; (mov r8, r8)
    4664:	00004569 	.word	0x00004569

00004668 <rtos_uart_start_read_buffer>:


bool rtos_uart_start_read_buffer(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    4668:	b5f0      	push	{r4, r5, r6, r7, lr}
    466a:	b087      	sub	sp, #28
    466c:	0005      	movs	r5, r0
    466e:	000c      	movs	r4, r1
    4670:	0016      	movs	r6, r2
    4672:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    4674:	4b12      	ldr	r3, [pc, #72]	; (46c0 <rtos_uart_start_read_buffer+0x58>)
    4676:	4798      	blx	r3
    4678:	1e07      	subs	r7, r0, #0
    467a:	d102      	bne.n	4682 <rtos_uart_start_read_buffer+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
}
    467c:	0038      	movs	r0, r7
    467e:	b007      	add	sp, #28
    4680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    4682:	7860      	ldrb	r0, [r4, #1]
    &(sercom->USART_INT.SERCOM_DATA), buffer, DMA_NEXTDESCRIPTOR_NONE);
    4684:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    4686:	0100      	lsls	r0, r0, #4
    4688:	4b0e      	ldr	r3, [pc, #56]	; (46c4 <rtos_uart_start_read_buffer+0x5c>)
    468a:	18c0      	adds	r0, r0, r3
    468c:	2300      	movs	r3, #0
    468e:	9303      	str	r3, [sp, #12]
    4690:	9602      	str	r6, [sp, #8]
    4692:	9501      	str	r5, [sp, #4]
    4694:	466b      	mov	r3, sp
    4696:	8a9e      	ldrh	r6, [r3, #20]
    4698:	9600      	str	r6, [sp, #0]
    469a:	2300      	movs	r3, #0
    469c:	2201      	movs	r2, #1
    469e:	2100      	movs	r1, #0
    46a0:	4d09      	ldr	r5, [pc, #36]	; (46c8 <rtos_uart_start_read_buffer+0x60>)
    46a2:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    46a4:	7860      	ldrb	r0, [r4, #1]
    46a6:	4b09      	ldr	r3, [pc, #36]	; (46cc <rtos_uart_start_read_buffer+0x64>)
    46a8:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    46aa:	7923      	ldrb	r3, [r4, #4]
    46ac:	78a2      	ldrb	r2, [r4, #2]
    46ae:	7860      	ldrb	r0, [r4, #1]
    46b0:	2102      	movs	r1, #2
    46b2:	4d07      	ldr	r5, [pc, #28]	; (46d0 <rtos_uart_start_read_buffer+0x68>)
    46b4:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    46b6:	7860      	ldrb	r0, [r4, #1]
    46b8:	4b06      	ldr	r3, [pc, #24]	; (46d4 <rtos_uart_start_read_buffer+0x6c>)
    46ba:	4798      	blx	r3
    return true;
    46bc:	e7de      	b.n	467c <rtos_uart_start_read_buffer+0x14>
    46be:	46c0      	nop			; (mov r8, r8)
    46c0:	000025cd 	.word	0x000025cd
    46c4:	20000538 	.word	0x20000538
    46c8:	00001a71 	.word	0x00001a71
    46cc:	00001b51 	.word	0x00001b51
    46d0:	00001add 	.word	0x00001add
    46d4:	00001b29 	.word	0x00001b29

000046d8 <rtos_uart_wait_until_read_complete>:

void rtos_uart_wait_until_read_complete(DMA_Descriptor* dmadesc) {
    46d8:	b510      	push	{r4, lr}
    rtos_dma_wait_until_end(dmadesc->rxchannel);
    46da:	7840      	ldrb	r0, [r0, #1]
    46dc:	4b01      	ldr	r3, [pc, #4]	; (46e4 <rtos_uart_wait_until_read_complete+0xc>)
    46de:	4798      	blx	r3
}
    46e0:	bd10      	pop	{r4, pc}
    46e2:	46c0      	nop			; (mov r8, r8)
    46e4:	00004569 	.word	0x00004569

000046e8 <rtos_uart_wait_until_read_complete_or_timeout>:

void rtos_uart_wait_until_read_complete_or_timeout(DMA_Descriptor* dmadesc, uint32_t timeout_ticks) {
    46e8:	b510      	push	{r4, lr}
    46ea:	0004      	movs	r4, r0
    rtos_dma_wait_until_end_or_timeout(dmadesc->rxchannel, timeout_ticks);
    46ec:	7840      	ldrb	r0, [r0, #1]
    46ee:	4b03      	ldr	r3, [pc, #12]	; (46fc <rtos_uart_wait_until_read_complete_or_timeout+0x14>)
    46f0:	4798      	blx	r3

    dma_enable_channel(dmadesc->rxchannel);
    46f2:	7860      	ldrb	r0, [r4, #1]
    46f4:	4b02      	ldr	r3, [pc, #8]	; (4700 <rtos_uart_wait_until_read_complete_or_timeout+0x18>)
    46f6:	4798      	blx	r3
}
    46f8:	bd10      	pop	{r4, pc}
    46fa:	46c0      	nop			; (mov r8, r8)
    46fc:	000045a1 	.word	0x000045a1
    4700:	00001b29 	.word	0x00001b29

00004704 <rtos_uart_start_read_buffer_infinite>:

bool rtos_uart_start_read_buffer_infinite(sercom_registers_t* sercom, DMA_Descriptor* dmadesc, uint8_t* buffer, int count) {
    4704:	b5f0      	push	{r4, r5, r6, r7, lr}
    4706:	b087      	sub	sp, #28
    4708:	0005      	movs	r5, r0
    470a:	000c      	movs	r4, r1
    470c:	0016      	movs	r6, r2
    470e:	9305      	str	r3, [sp, #20]
    if (!sercom_check(sercom)) return false;
    4710:	4b11      	ldr	r3, [pc, #68]	; (4758 <rtos_uart_start_read_buffer_infinite+0x54>)
    4712:	4798      	blx	r3
    4714:	1e07      	subs	r7, r0, #0
    4716:	d102      	bne.n	471e <rtos_uart_start_read_buffer_infinite+0x1a>
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    // start transfer
	dma_enable_channel(dmadesc->rxchannel);

    return true;
    4718:	0038      	movs	r0, r7
    471a:	b007      	add	sp, #28
    471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    471e:	7860      	ldrb	r0, [r4, #1]
    4720:	0100      	lsls	r0, r0, #4
    4722:	4b0e      	ldr	r3, [pc, #56]	; (475c <rtos_uart_start_read_buffer_infinite+0x58>)
    4724:	18c0      	adds	r0, r0, r3
    &(sercom->USART_INT.SERCOM_DATA), buffer, &(dma_descriptor[dmadesc->rxchannel]));
    4726:	3528      	adds	r5, #40	; 0x28
    dma_create_descriptor(&(dma_descriptor[dmadesc->rxchannel]), false, true, DMA_BEATSIZE_BYTE, count,
    4728:	9003      	str	r0, [sp, #12]
    472a:	9602      	str	r6, [sp, #8]
    472c:	9501      	str	r5, [sp, #4]
    472e:	466b      	mov	r3, sp
    4730:	8a9e      	ldrh	r6, [r3, #20]
    4732:	9600      	str	r6, [sp, #0]
    4734:	2300      	movs	r3, #0
    4736:	2201      	movs	r2, #1
    4738:	2100      	movs	r1, #0
    473a:	4d09      	ldr	r5, [pc, #36]	; (4760 <rtos_uart_start_read_buffer_infinite+0x5c>)
    473c:	47a8      	blx	r5
	dma_disable_channel(dmadesc->rxchannel);
    473e:	7860      	ldrb	r0, [r4, #1]
    4740:	4b08      	ldr	r3, [pc, #32]	; (4764 <rtos_uart_start_read_buffer_infinite+0x60>)
    4742:	4798      	blx	r3
	dma_init_channel(dmadesc->rxchannel, DMA_TRIGACT_BEAT, dmadesc->rxtrig, dmadesc->priority);
    4744:	7923      	ldrb	r3, [r4, #4]
    4746:	78a2      	ldrb	r2, [r4, #2]
    4748:	7860      	ldrb	r0, [r4, #1]
    474a:	2102      	movs	r1, #2
    474c:	4d06      	ldr	r5, [pc, #24]	; (4768 <rtos_uart_start_read_buffer_infinite+0x64>)
    474e:	47a8      	blx	r5
	dma_enable_channel(dmadesc->rxchannel);
    4750:	7860      	ldrb	r0, [r4, #1]
    4752:	4b06      	ldr	r3, [pc, #24]	; (476c <rtos_uart_start_read_buffer_infinite+0x68>)
    4754:	4798      	blx	r3
    return true;
    4756:	e7df      	b.n	4718 <rtos_uart_start_read_buffer_infinite+0x14>
    4758:	000025cd 	.word	0x000025cd
    475c:	20000538 	.word	0x20000538
    4760:	00001a71 	.word	0x00001a71
    4764:	00001b51 	.word	0x00001b51
    4768:	00001add 	.word	0x00001add
    476c:	00001b29 	.word	0x00001b29

00004770 <usb_proc_loop>:
	dispatch_process(&usbproc);
	wait_until_started(&usbproc);
	NVIC_EnableIRQ(USB_IRQn);
}

void usb_proc_loop() {
    4770:	b570      	push	{r4, r5, r6, lr}
	usb_interrupt = false;
    4772:	4b25      	ldr	r3, [pc, #148]	; (4808 <usb_proc_loop+0x98>)
    4774:	2200      	movs	r2, #0
    4776:	701a      	strb	r2, [r3, #0]
	usb_quit = false;
    4778:	705a      	strb	r2, [r3, #1]
	usb_send_status = false;
    477a:	709a      	strb	r2, [r3, #2]
	usb_read_status = false;
    477c:	70da      	strb	r2, [r3, #3]
    477e:	e00f      	b.n	47a0 <usb_proc_loop+0x30>

		// if send operation is in progress and new data must be sent
		if (usb_send_status && !usb_tx_busy) {
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
			if (bytes_left == 0) usb_send_status = false;
			else usb_send_bytes_sent += usb_serial_send_buffer(usb_send_buffer + usb_send_bytes_sent, bytes_left);
    4780:	4c21      	ldr	r4, [pc, #132]	; (4808 <usb_proc_loop+0x98>)
    4782:	68e0      	ldr	r0, [r4, #12]
    4784:	18c0      	adds	r0, r0, r3
    4786:	4b21      	ldr	r3, [pc, #132]	; (480c <usb_proc_loop+0x9c>)
    4788:	4798      	blx	r3
    478a:	68a3      	ldr	r3, [r4, #8]
    478c:	181b      	adds	r3, r3, r0
    478e:	60a3      	str	r3, [r4, #8]
		}

		// if read operation is in progress and data is ready to be read out
		if (usb_read_status && usb_rx_buffer_length != 0) {
    4790:	4b1d      	ldr	r3, [pc, #116]	; (4808 <usb_proc_loop+0x98>)
    4792:	78db      	ldrb	r3, [r3, #3]
    4794:	2b00      	cmp	r3, #0
    4796:	d003      	beq.n	47a0 <usb_proc_loop+0x30>
    4798:	4b1d      	ldr	r3, [pc, #116]	; (4810 <usb_proc_loop+0xa0>)
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	2b00      	cmp	r3, #0
    479e:	d11f      	bne.n	47e0 <usb_proc_loop+0x70>
		wait_until_true(&usb_interrupt);
    47a0:	4c19      	ldr	r4, [pc, #100]	; (4808 <usb_proc_loop+0x98>)
    47a2:	2301      	movs	r3, #1
    47a4:	22ff      	movs	r2, #255	; 0xff
    47a6:	2100      	movs	r1, #0
    47a8:	0020      	movs	r0, r4
    47aa:	4d1a      	ldr	r5, [pc, #104]	; (4814 <usb_proc_loop+0xa4>)
    47ac:	47a8      	blx	r5
		usb_interrupt = false;
    47ae:	2300      	movs	r3, #0
    47b0:	7023      	strb	r3, [r4, #0]
		if (usb_quit) break;
    47b2:	7863      	ldrb	r3, [r4, #1]
    47b4:	2b00      	cmp	r3, #0
    47b6:	d125      	bne.n	4804 <usb_proc_loop+0x94>
		usb_handle_function();
    47b8:	4b17      	ldr	r3, [pc, #92]	; (4818 <usb_proc_loop+0xa8>)
    47ba:	4798      	blx	r3
		if (usb_send_status && !usb_tx_busy) {
    47bc:	4b12      	ldr	r3, [pc, #72]	; (4808 <usb_proc_loop+0x98>)
    47be:	789b      	ldrb	r3, [r3, #2]
    47c0:	2b00      	cmp	r3, #0
    47c2:	d0e5      	beq.n	4790 <usb_proc_loop+0x20>
    47c4:	4b15      	ldr	r3, [pc, #84]	; (481c <usb_proc_loop+0xac>)
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	2b00      	cmp	r3, #0
    47ca:	d1e1      	bne.n	4790 <usb_proc_loop+0x20>
			int bytes_left = usb_send_buffer_count - usb_send_bytes_sent;
    47cc:	4b0e      	ldr	r3, [pc, #56]	; (4808 <usb_proc_loop+0x98>)
    47ce:	685a      	ldr	r2, [r3, #4]
    47d0:	689b      	ldr	r3, [r3, #8]
    47d2:	1ad1      	subs	r1, r2, r3
			if (bytes_left == 0) usb_send_status = false;
    47d4:	429a      	cmp	r2, r3
    47d6:	d1d3      	bne.n	4780 <usb_proc_loop+0x10>
    47d8:	4b0b      	ldr	r3, [pc, #44]	; (4808 <usb_proc_loop+0x98>)
    47da:	2200      	movs	r2, #0
    47dc:	709a      	strb	r2, [r3, #2]
    47de:	e7d7      	b.n	4790 <usb_proc_loop+0x20>
			usb_read_bytes_read += usb_serial_read_buffer(usb_read_buffer + usb_read_bytes_read, usb_rx_buffer_length);
    47e0:	4b0b      	ldr	r3, [pc, #44]	; (4810 <usb_proc_loop+0xa0>)
    47e2:	6819      	ldr	r1, [r3, #0]
    47e4:	4c08      	ldr	r4, [pc, #32]	; (4808 <usb_proc_loop+0x98>)
    47e6:	6920      	ldr	r0, [r4, #16]
    47e8:	6963      	ldr	r3, [r4, #20]
    47ea:	18c0      	adds	r0, r0, r3
    47ec:	4b0c      	ldr	r3, [pc, #48]	; (4820 <usb_proc_loop+0xb0>)
    47ee:	4798      	blx	r3
    47f0:	6963      	ldr	r3, [r4, #20]
    47f2:	18c0      	adds	r0, r0, r3
    47f4:	6160      	str	r0, [r4, #20]
			int bytes_left = usb_read_buffer_count - usb_read_bytes_read;
    47f6:	69a3      	ldr	r3, [r4, #24]
			if (bytes_left == 0) usb_read_status = false;
    47f8:	4298      	cmp	r0, r3
    47fa:	d1d1      	bne.n	47a0 <usb_proc_loop+0x30>
    47fc:	4b02      	ldr	r3, [pc, #8]	; (4808 <usb_proc_loop+0x98>)
    47fe:	2200      	movs	r2, #0
    4800:	70da      	strb	r2, [r3, #3]
    4802:	e7cd      	b.n	47a0 <usb_proc_loop+0x30>
		}
	}
}
    4804:	bd70      	pop	{r4, r5, r6, pc}
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	200007f0 	.word	0x200007f0
    480c:	0000333d 	.word	0x0000333d
    4810:	200006a0 	.word	0x200006a0
    4814:	00003a31 	.word	0x00003a31
    4818:	000031a9 	.word	0x000031a9
    481c:	2000069c 	.word	0x2000069c
    4820:	00003379 	.word	0x00003379

00004824 <rtos_usb_init>:
void rtos_usb_init(uint32_t stack_base, uint32_t stack_size) {
    4824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4826:	46ce      	mov	lr, r9
    4828:	4647      	mov	r7, r8
    482a:	b580      	push	{r7, lr}
    482c:	0006      	movs	r6, r0
    482e:	4688      	mov	r8, r1
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4830:	4f15      	ldr	r7, [pc, #84]	; (4888 <rtos_usb_init+0x64>)
    4832:	2580      	movs	r5, #128	; 0x80
    4834:	517d      	str	r5, [r7, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    4836:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    483a:	f3bf 8f6f 	isb	sy
	port_wrconfig(PORT_PORTA, PORT_PMUX_G, PORT_PA24 | PORT_PA25);
    483e:	22c0      	movs	r2, #192	; 0xc0
    4840:	0492      	lsls	r2, r2, #18
    4842:	2106      	movs	r1, #6
    4844:	2000      	movs	r0, #0
    4846:	4b11      	ldr	r3, [pc, #68]	; (488c <rtos_usb_init+0x68>)
    4848:	4798      	blx	r3
	usb_init();
    484a:	4b11      	ldr	r3, [pc, #68]	; (4890 <rtos_usb_init+0x6c>)
    484c:	4798      	blx	r3
	usb_attach();
    484e:	4b11      	ldr	r3, [pc, #68]	; (4894 <rtos_usb_init+0x70>)
    4850:	4798      	blx	r3
	init_process(&usbproc, usb_proc_loop, stack_base, stack_size);
    4852:	4911      	ldr	r1, [pc, #68]	; (4898 <rtos_usb_init+0x74>)
    4854:	4c11      	ldr	r4, [pc, #68]	; (489c <rtos_usb_init+0x78>)
    4856:	231c      	movs	r3, #28
    4858:	4699      	mov	r9, r3
    485a:	44a1      	add	r9, r4
    485c:	4643      	mov	r3, r8
    485e:	0032      	movs	r2, r6
    4860:	4648      	mov	r0, r9
    4862:	4e0f      	ldr	r6, [pc, #60]	; (48a0 <rtos_usb_init+0x7c>)
    4864:	47b0      	blx	r6
	dispatch_process(&usbproc);
    4866:	4648      	mov	r0, r9
    4868:	4b0e      	ldr	r3, [pc, #56]	; (48a4 <rtos_usb_init+0x80>)
    486a:	4798      	blx	r3
	wait_until_started(&usbproc);
    486c:	2201      	movs	r2, #1
    486e:	0020      	movs	r0, r4
    4870:	3034      	adds	r0, #52	; 0x34
    4872:	2301      	movs	r3, #1
    4874:	4252      	negs	r2, r2
    4876:	2100      	movs	r1, #0
    4878:	4c0b      	ldr	r4, [pc, #44]	; (48a8 <rtos_usb_init+0x84>)
    487a:	47a0      	blx	r4
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    487c:	603d      	str	r5, [r7, #0]
}
    487e:	bcc0      	pop	{r6, r7}
    4880:	46b9      	mov	r9, r7
    4882:	46b0      	mov	r8, r6
    4884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	e000e100 	.word	0xe000e100
    488c:	000022f1 	.word	0x000022f1
    4890:	00002ded 	.word	0x00002ded
    4894:	0000314d 	.word	0x0000314d
    4898:	00004771 	.word	0x00004771
    489c:	200007f0 	.word	0x200007f0
    48a0:	000036c9 	.word	0x000036c9
    48a4:	000037ad 	.word	0x000037ad
    48a8:	00003a31 	.word	0x00003a31

000048ac <USB_Handler>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48ac:	2380      	movs	r3, #128	; 0x80
    48ae:	4a05      	ldr	r2, [pc, #20]	; (48c4 <USB_Handler+0x18>)
    48b0:	50d3      	str	r3, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    48b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48b6:	f3bf 8f6f 	isb	sy
void USB_Handler() {
	NVIC_DisableIRQ(USB_IRQn);

	// ++usb_int_counter;
	
	usb_interrupt = true;
    48ba:	4b03      	ldr	r3, [pc, #12]	; (48c8 <USB_Handler+0x1c>)
    48bc:	2201      	movs	r2, #1
    48be:	701a      	strb	r2, [r3, #0]
}
    48c0:	4770      	bx	lr
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	e000e100 	.word	0xe000e100
    48c8:	200007f0 	.word	0x200007f0

000048cc <rtos_usb_start_send_buffer>:
	usb_quit = true;
	join_process(&usbproc);
}


void rtos_usb_start_send_buffer(uint8_t* buffer, int count) {
    48cc:	b570      	push	{r4, r5, r6, lr}
    48ce:	0005      	movs	r5, r0
    48d0:	000e      	movs	r6, r1
	// if send operation is currently in progress wait until it finishes
	if (usb_send_status) wait_until_false(&usb_send_status);
    48d2:	4b0d      	ldr	r3, [pc, #52]	; (4908 <rtos_usb_start_send_buffer+0x3c>)
    48d4:	789b      	ldrb	r3, [r3, #2]
    48d6:	2b00      	cmp	r3, #0
    48d8:	d10e      	bne.n	48f8 <rtos_usb_start_send_buffer+0x2c>
	usb_send_buffer = buffer;
    48da:	4c0b      	ldr	r4, [pc, #44]	; (4908 <rtos_usb_start_send_buffer+0x3c>)
    48dc:	60e5      	str	r5, [r4, #12]
	usb_send_buffer_count = count;
    48de:	6066      	str	r6, [r4, #4]
	usb_send_bytes_sent = 0;
    48e0:	2300      	movs	r3, #0
    48e2:	60a3      	str	r3, [r4, #8]
	usb_send_status = true;
    48e4:	3301      	adds	r3, #1
    48e6:	70a3      	strb	r3, [r4, #2]
	// start send
	usb_send_bytes_sent += usb_serial_send_buffer(buffer, count);
    48e8:	0031      	movs	r1, r6
    48ea:	0028      	movs	r0, r5
    48ec:	4b07      	ldr	r3, [pc, #28]	; (490c <rtos_usb_start_send_buffer+0x40>)
    48ee:	4798      	blx	r3
    48f0:	68a3      	ldr	r3, [r4, #8]
    48f2:	181b      	adds	r3, r3, r0
    48f4:	60a3      	str	r3, [r4, #8]
}
    48f6:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_send_status) wait_until_false(&usb_send_status);
    48f8:	4805      	ldr	r0, [pc, #20]	; (4910 <rtos_usb_start_send_buffer+0x44>)
    48fa:	2300      	movs	r3, #0
    48fc:	22ff      	movs	r2, #255	; 0xff
    48fe:	2100      	movs	r1, #0
    4900:	4c04      	ldr	r4, [pc, #16]	; (4914 <rtos_usb_start_send_buffer+0x48>)
    4902:	47a0      	blx	r4
    4904:	e7e9      	b.n	48da <rtos_usb_start_send_buffer+0xe>
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	200007f0 	.word	0x200007f0
    490c:	0000333d 	.word	0x0000333d
    4910:	200007f2 	.word	0x200007f2
    4914:	00003a31 	.word	0x00003a31

00004918 <rtos_usb_wait_until_send_complete>:

int rtos_usb_wait_until_send_complete() {
    4918:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_send_status);
    491a:	4c04      	ldr	r4, [pc, #16]	; (492c <rtos_usb_wait_until_send_complete+0x14>)
    491c:	1ca0      	adds	r0, r4, #2
    491e:	2300      	movs	r3, #0
    4920:	22ff      	movs	r2, #255	; 0xff
    4922:	2100      	movs	r1, #0
    4924:	4d02      	ldr	r5, [pc, #8]	; (4930 <rtos_usb_wait_until_send_complete+0x18>)
    4926:	47a8      	blx	r5
	return usb_send_bytes_sent;
    4928:	68a0      	ldr	r0, [r4, #8]
}
    492a:	bd70      	pop	{r4, r5, r6, pc}
    492c:	200007f0 	.word	0x200007f0
    4930:	00003a31 	.word	0x00003a31

00004934 <rtos_usb_start_read_buffer>:


void rtos_usb_start_read_buffer(uint8_t* buffer, int count) {
    4934:	b570      	push	{r4, r5, r6, lr}
    4936:	0005      	movs	r5, r0
    4938:	000c      	movs	r4, r1
	// if read operation is currently in progress wait until it finishes
	if (usb_read_status) wait_until_false(&usb_read_status);
    493a:	4b09      	ldr	r3, [pc, #36]	; (4960 <rtos_usb_start_read_buffer+0x2c>)
    493c:	78db      	ldrb	r3, [r3, #3]
    493e:	2b00      	cmp	r3, #0
    4940:	d107      	bne.n	4952 <rtos_usb_start_read_buffer+0x1e>
	usb_read_buffer = buffer;
    4942:	4b07      	ldr	r3, [pc, #28]	; (4960 <rtos_usb_start_read_buffer+0x2c>)
    4944:	611d      	str	r5, [r3, #16]
	usb_read_buffer_count = count;
    4946:	619c      	str	r4, [r3, #24]
	usb_read_bytes_read = 0;
    4948:	2200      	movs	r2, #0
    494a:	615a      	str	r2, [r3, #20]
	usb_read_status = true;
    494c:	3201      	adds	r2, #1
    494e:	70da      	strb	r2, [r3, #3]
}
    4950:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_read_status) wait_until_false(&usb_read_status);
    4952:	4804      	ldr	r0, [pc, #16]	; (4964 <rtos_usb_start_read_buffer+0x30>)
    4954:	2300      	movs	r3, #0
    4956:	22ff      	movs	r2, #255	; 0xff
    4958:	2100      	movs	r1, #0
    495a:	4e03      	ldr	r6, [pc, #12]	; (4968 <rtos_usb_start_read_buffer+0x34>)
    495c:	47b0      	blx	r6
    495e:	e7f0      	b.n	4942 <rtos_usb_start_read_buffer+0xe>
    4960:	200007f0 	.word	0x200007f0
    4964:	200007f3 	.word	0x200007f3
    4968:	00003a31 	.word	0x00003a31

0000496c <rtos_usb_wait_until_read_complete>:

int rtos_usb_wait_until_read_complete() {
    496c:	b570      	push	{r4, r5, r6, lr}
	wait_until_false(&usb_read_status);
    496e:	4c04      	ldr	r4, [pc, #16]	; (4980 <rtos_usb_wait_until_read_complete+0x14>)
    4970:	1ce0      	adds	r0, r4, #3
    4972:	2300      	movs	r3, #0
    4974:	22ff      	movs	r2, #255	; 0xff
    4976:	2100      	movs	r1, #0
    4978:	4d02      	ldr	r5, [pc, #8]	; (4984 <rtos_usb_wait_until_read_complete+0x18>)
    497a:	47a8      	blx	r5
	return usb_read_bytes_read;
    497c:	6960      	ldr	r0, [r4, #20]
}
    497e:	bd70      	pop	{r4, r5, r6, pc}
    4980:	200007f0 	.word	0x200007f0
    4984:	00003a31 	.word	0x00003a31

00004988 <CRC8>:
#include "gnclink.h"

const uint8_t CRC8_LUT_L[] = { 0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D };
const uint8_t CRC8_LUT_H[] = { 0x00, 0x70, 0xE0, 0x90, 0xC7, 0xB7, 0x27, 0x57, 0x89, 0xF9, 0x69, 0x19, 0x4E, 0x3E, 0xAE, 0xDE };

uint8_t CRC8(uint8_t* data, int length) {
    4988:	b570      	push	{r4, r5, r6, lr}
    498a:	0006      	movs	r6, r0
	uint8_t crc = 0;
	for (int index = 0; index < length; ++index) {
    498c:	2400      	movs	r4, #0
	uint8_t crc = 0;
    498e:	2000      	movs	r0, #0
	for (int index = 0; index < length; ++index) {
    4990:	e00a      	b.n	49a8 <CRC8+0x20>
		crc ^= data[index];
    4992:	5d33      	ldrb	r3, [r6, r4]
    4994:	4043      	eors	r3, r0
		crc = CRC8_LUT_L[crc & 0xF] ^ CRC8_LUT_H[crc >> 4];
    4996:	250f      	movs	r5, #15
    4998:	401d      	ands	r5, r3
    499a:	4a05      	ldr	r2, [pc, #20]	; (49b0 <CRC8+0x28>)
    499c:	5d50      	ldrb	r0, [r2, r5]
    499e:	091b      	lsrs	r3, r3, #4
    49a0:	18d2      	adds	r2, r2, r3
    49a2:	7c13      	ldrb	r3, [r2, #16]
    49a4:	4058      	eors	r0, r3
	for (int index = 0; index < length; ++index) {
    49a6:	3401      	adds	r4, #1
    49a8:	428c      	cmp	r4, r1
    49aa:	dbf2      	blt.n	4992 <CRC8+0xa>
	}
	return crc;
}
    49ac:	bd70      	pop	{r4, r5, r6, pc}
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	00006374 	.word	0x00006374

000049b4 <GNClink_Get_Packet_Payload_Pointer>:

uint8_t* GNClink_Get_Packet_Payload_Pointer(uint8_t* packetPointer) {
	return packetPointer + GNCLINK_PACKET_HEADER_LENGTH;
    49b4:	3004      	adds	r0, #4
}
    49b6:	4770      	bx	lr

000049b8 <GNClink_Construct_Packet>:

bool GNClink_Construct_Packet(uint8_t* packetPointer, GNClink_PacketType packetType, GNClink_PacketFlags packetFlags, int payloadSize) {
    49b8:	b570      	push	{r4, r5, r6, lr}
    49ba:	000c      	movs	r4, r1
	// validate inputs
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    49bc:	2b3b      	cmp	r3, #59	; 0x3b
    49be:	d80c      	bhi.n	49da <GNClink_Construct_Packet+0x22>

	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;
	// get pointer to footer
	GNClink_PacketFooter* footer = (GNClink_PacketFooter*)(packetPointer + GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    49c0:	1d19      	adds	r1, r3, #4
    49c2:	1845      	adds	r5, r0, r1

	// populate header
	header->magic = GNCLINK_PACKET_MAGIC;
    49c4:	26ac      	movs	r6, #172	; 0xac
    49c6:	7006      	strb	r6, [r0, #0]
	header->packetType = packetType;
    49c8:	7044      	strb	r4, [r0, #1]
	header->packetFlags = packetFlags;
    49ca:	7082      	strb	r2, [r0, #2]
	header->packetLength = payloadSize + GNCLINK_PACKET_HEADER_LENGTH + GNCLINK_PACKET_FOOTER_LENGTH;
    49cc:	3305      	adds	r3, #5
    49ce:	70c3      	strb	r3, [r0, #3]

	// populate footer
	footer->crc = CRC8(packetPointer, GNCLINK_PACKET_HEADER_LENGTH + payloadSize);
    49d0:	4b03      	ldr	r3, [pc, #12]	; (49e0 <GNClink_Construct_Packet+0x28>)
    49d2:	4798      	blx	r3
    49d4:	7028      	strb	r0, [r5, #0]

	return true;
    49d6:	2001      	movs	r0, #1
}
    49d8:	bd70      	pop	{r4, r5, r6, pc}
	if (payloadSize < GNCLINK_PACKET_MIN_PAYLOAD_LENGTH || payloadSize > GNCLINK_PACKET_MAX_PAYLOAD_LENGTH) return false;
    49da:	2000      	movs	r0, #0
    49dc:	e7fc      	b.n	49d8 <GNClink_Construct_Packet+0x20>
    49de:	46c0      	nop			; (mov r8, r8)
    49e0:	00004989 	.word	0x00004989

000049e4 <GNClink_Check_Packet>:

bool GNClink_Check_Packet(uint8_t* packetPointer) {
    49e4:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	// check magic
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    49e6:	7803      	ldrb	r3, [r0, #0]
    49e8:	2bac      	cmp	r3, #172	; 0xac
    49ea:	d10a      	bne.n	4a02 <GNClink_Check_Packet+0x1e>

	// check packet length
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    49ec:	78c1      	ldrb	r1, [r0, #3]
    49ee:	1f4b      	subs	r3, r1, #5
    49f0:	b2db      	uxtb	r3, r3
    49f2:	2b3b      	cmp	r3, #59	; 0x3b
    49f4:	d807      	bhi.n	4a06 <GNClink_Check_Packet+0x22>

	// check CRC
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    49f6:	4b06      	ldr	r3, [pc, #24]	; (4a10 <GNClink_Check_Packet+0x2c>)
    49f8:	4798      	blx	r3
    49fa:	2800      	cmp	r0, #0
    49fc:	d105      	bne.n	4a0a <GNClink_Check_Packet+0x26>

	// all checks passed, return true
	return true;
    49fe:	3001      	adds	r0, #1
    4a00:	e000      	b.n	4a04 <GNClink_Check_Packet+0x20>
	if (header->magic != GNCLINK_PACKET_MAGIC) return false;
    4a02:	2000      	movs	r0, #0
}
    4a04:	bd10      	pop	{r4, pc}
	if (header->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || header->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4a06:	2000      	movs	r0, #0
    4a08:	e7fc      	b.n	4a04 <GNClink_Check_Packet+0x20>
	if (CRC8(packetPointer, header->packetLength) != 0) return false;
    4a0a:	2000      	movs	r0, #0
    4a0c:	e7fa      	b.n	4a04 <GNClink_Check_Packet+0x20>
    4a0e:	46c0      	nop			; (mov r8, r8)
    4a10:	00004989 	.word	0x00004989

00004a14 <GNClink_Get_Packet_Type>:

GNClink_PacketType GNClink_Get_Packet_Type(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetType;
    4a14:	7840      	ldrb	r0, [r0, #1]
}
    4a16:	4770      	bx	lr

00004a18 <GNClink_Get_Packet_Flags>:

GNClink_PacketFlags GNClink_Get_Packet_Flags(uint8_t* packetPointer) {
	// get pointer to header
	GNClink_PacketHeader* header = (GNClink_PacketHeader*)packetPointer;

	return (GNClink_PacketType)header->packetFlags;
    4a18:	7880      	ldrb	r0, [r0, #2]
}
    4a1a:	4770      	bx	lr

00004a1c <GNClink_Get_Frame_Payload_Pointer>:


uint8_t* GNClink_Get_Frame_Payload_Pointer(uint8_t* framePointer) {
	return framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    4a1c:	3003      	adds	r0, #3
}
    4a1e:	4770      	bx	lr

00004a20 <GNClink_Get_Frame>:

bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    4a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a22:	000e      	movs	r6, r1
	// get pointer to packet header
	GNClink_PacketHeader* packetHeader = (GNClink_PacketHeader*)packetPointer;

	// check packet length
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4a24:	78c1      	ldrb	r1, [r0, #3]
    4a26:	1f4c      	subs	r4, r1, #5
    4a28:	b2e4      	uxtb	r4, r4
    4a2a:	2c3b      	cmp	r4, #59	; 0x3b
    4a2c:	d832      	bhi.n	4a94 <GNClink_Get_Frame+0x74>

	// calculate number of frames for packet
	int frameCount = (packetHeader->packetLength + GNCLINK_FRAME_PAYLOAD_LENGTH - 1) / GNCLINK_FRAME_PAYLOAD_LENGTH;
    4a2e:	310f      	adds	r1, #15
    4a30:	1109      	asrs	r1, r1, #4
	*moreFrames = frameIndex < frameCount - 1;
    4a32:	1e4d      	subs	r5, r1, #1
    4a34:	2401      	movs	r4, #1
    4a36:	429d      	cmp	r5, r3
    4a38:	dc00      	bgt.n	4a3c <GNClink_Get_Frame+0x1c>
    4a3a:	2400      	movs	r4, #0
    4a3c:	9d06      	ldr	r5, [sp, #24]
    4a3e:	702c      	strb	r4, [r5, #0]

	// check index is valid
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    4a40:	2b00      	cmp	r3, #0
    4a42:	db29      	blt.n	4a98 <GNClink_Get_Frame+0x78>
    4a44:	4299      	cmp	r1, r3
    4a46:	dd29      	ble.n	4a9c <GNClink_Get_Frame+0x7c>
	// get pointer to frame header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;
	// get pointer to frame footer
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;
    4a48:	1cf7      	adds	r7, r6, #3

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    4a4a:	24ae      	movs	r4, #174	; 0xae
    4a4c:	7034      	strb	r4, [r6, #0]
	header->index = frameIndex;
    4a4e:	7073      	strb	r3, [r6, #1]
	header->flags = flags;
    4a50:	70b2      	strb	r2, [r6, #2]
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    4a52:	1c5c      	adds	r4, r3, #1
    4a54:	428c      	cmp	r4, r1
    4a56:	d00c      	beq.n	4a72 <GNClink_Get_Frame+0x52>
bool GNClink_Get_Frame(uint8_t* packetPointer, uint8_t* framePointer, GNClink_FrameFlags flags, int frameIndex, bool* moreFrames) {
    4a58:	2200      	movs	r2, #0

	// populate payload
	int i = 0;
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4a5a:	2a0f      	cmp	r2, #15
    4a5c:	dc11      	bgt.n	4a82 <GNClink_Get_Frame+0x62>
    4a5e:	78c5      	ldrb	r5, [r0, #3]
    4a60:	011c      	lsls	r4, r3, #4
    4a62:	1b2d      	subs	r5, r5, r4
    4a64:	4295      	cmp	r5, r2
    4a66:	dd0c      	ble.n	4a82 <GNClink_Get_Frame+0x62>
		payload[i] = packetPointer[i + GNCLINK_FRAME_PAYLOAD_LENGTH * frameIndex];
    4a68:	18a4      	adds	r4, r4, r2
    4a6a:	5d01      	ldrb	r1, [r0, r4]
    4a6c:	54b9      	strb	r1, [r7, r2]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i < packetHeader->packetLength - frameIndex * GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4a6e:	3201      	adds	r2, #1
    4a70:	e7f3      	b.n	4a5a <GNClink_Get_Frame+0x3a>
	if (frameIndex + 1 == frameCount) header->flags |= GNClink_FrameFlags_TransactionEnd;
    4a72:	2102      	movs	r1, #2
    4a74:	430a      	orrs	r2, r1
    4a76:	70b2      	strb	r2, [r6, #2]
    4a78:	e7ee      	b.n	4a58 <GNClink_Get_Frame+0x38>
	}
	// populate the rest with zeros
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
		payload[i] = 0;
    4a7a:	18bb      	adds	r3, r7, r2
    4a7c:	2100      	movs	r1, #0
    4a7e:	7019      	strb	r1, [r3, #0]
	for (; i < GNCLINK_FRAME_PAYLOAD_LENGTH; ++i) {
    4a80:	3201      	adds	r2, #1
    4a82:	2a0f      	cmp	r2, #15
    4a84:	ddf9      	ble.n	4a7a <GNClink_Get_Frame+0x5a>
	}

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    4a86:	2113      	movs	r1, #19
    4a88:	0030      	movs	r0, r6
    4a8a:	4b05      	ldr	r3, [pc, #20]	; (4aa0 <GNClink_Get_Frame+0x80>)
    4a8c:	4798      	blx	r3
    4a8e:	74f0      	strb	r0, [r6, #19]

	return true;
    4a90:	2001      	movs	r0, #1
    4a92:	e000      	b.n	4a96 <GNClink_Get_Frame+0x76>
	if (packetHeader->packetLength < GNCLINK_PACKET_MIN_TOTAL_LENGTH || packetHeader->packetLength > GNCLINK_PACKET_MAX_TOTAL_LENGTH) return false;
    4a94:	2000      	movs	r0, #0
}
    4a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (frameIndex < 0 || frameIndex >= frameCount) return false;
    4a98:	2000      	movs	r0, #0
    4a9a:	e7fc      	b.n	4a96 <GNClink_Get_Frame+0x76>
    4a9c:	2000      	movs	r0, #0
    4a9e:	e7fa      	b.n	4a96 <GNClink_Get_Frame+0x76>
    4aa0:	00004989 	.word	0x00004989

00004aa4 <GNClink_Check_Frame>:

bool GNClink_Check_Frame(uint8_t* framePointer) {
    4aa4:	b510      	push	{r4, lr}
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	// check magic
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4aa6:	7803      	ldrb	r3, [r0, #0]
    4aa8:	2bae      	cmp	r3, #174	; 0xae
    4aaa:	d109      	bne.n	4ac0 <GNClink_Check_Frame+0x1c>

	// check index
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4aac:	7843      	ldrb	r3, [r0, #1]
    4aae:	2b03      	cmp	r3, #3
    4ab0:	d808      	bhi.n	4ac4 <GNClink_Check_Frame+0x20>

	// check CRC
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4ab2:	2114      	movs	r1, #20
    4ab4:	4b05      	ldr	r3, [pc, #20]	; (4acc <GNClink_Check_Frame+0x28>)
    4ab6:	4798      	blx	r3
    4ab8:	2800      	cmp	r0, #0
    4aba:	d105      	bne.n	4ac8 <GNClink_Check_Frame+0x24>

	// all checks passed, return true
	return true;
    4abc:	3001      	adds	r0, #1
    4abe:	e000      	b.n	4ac2 <GNClink_Check_Frame+0x1e>
	if (header->magic != GNCLINK_FRAME_MAGIC) return false;
    4ac0:	2000      	movs	r0, #0
}
    4ac2:	bd10      	pop	{r4, pc}
	if (header->index >= GNCLINK_MAX_FRAMES_PER_PACKET) return false;
    4ac4:	2000      	movs	r0, #0
    4ac6:	e7fc      	b.n	4ac2 <GNClink_Check_Frame+0x1e>
	if (CRC8(framePointer, GNCLINK_FRAME_TOTAL_LENGTH) != 0) return false;
    4ac8:	2000      	movs	r0, #0
    4aca:	e7fa      	b.n	4ac2 <GNClink_Check_Frame+0x1e>
    4acc:	00004989 	.word	0x00004989

00004ad0 <GNClink_Frame_RequestResend>:

bool GNClink_Frame_RequestResend(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (header->flags & GNClink_FrameFlags_RequestResend) != 0;
    4ad0:	7883      	ldrb	r3, [r0, #2]
    4ad2:	089b      	lsrs	r3, r3, #2
    4ad4:	2001      	movs	r0, #1
    4ad6:	4018      	ands	r0, r3
}
    4ad8:	4770      	bx	lr

00004ada <GNClink_Get_Frame_Index>:

int GNClink_Get_Frame_Index(uint8_t* framePointer) {
	// get pointer to header
	GNClink_FrameHeader* header = (GNClink_FrameHeader*)framePointer;

	return (int)header->index;
    4ada:	7840      	ldrb	r0, [r0, #1]
}
    4adc:	4770      	bx	lr
	...

00004ae0 <GNClink_Construct_RequestResendFrame>:

void GNClink_Construct_RequestResendFrame(uint8_t* framePointer) {
    4ae0:	b510      	push	{r4, lr}
    4ae2:	0004      	movs	r4, r0
	GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	// populate header
	header->magic = GNCLINK_FRAME_MAGIC;
    4ae4:	23ae      	movs	r3, #174	; 0xae
    4ae6:	7003      	strb	r3, [r0, #0]
	header->index = 0;
    4ae8:	2300      	movs	r3, #0
    4aea:	7043      	strb	r3, [r0, #1]
	header->flags = GNClink_FrameFlags_RequestResend;
    4aec:	3304      	adds	r3, #4
    4aee:	7083      	strb	r3, [r0, #2]

	// populate footer
	footer->crc = CRC8(framePointer, GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
    4af0:	2113      	movs	r1, #19
    4af2:	4b02      	ldr	r3, [pc, #8]	; (4afc <GNClink_Construct_RequestResendFrame+0x1c>)
    4af4:	4798      	blx	r3
    4af6:	74e0      	strb	r0, [r4, #19]
}
    4af8:	bd10      	pop	{r4, pc}
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	00004989 	.word	0x00004989

00004b00 <GNClink_Reconstruct_Packet_From_Frames>:


bool GNClink_Reconstruct_Packet_From_Frames(uint8_t* framePointer, uint8_t* packetPointer, bool* moreFrames) {
    4b00:	b530      	push	{r4, r5, lr}
	// get pointer to frame footer
	//GNClink_FrameFooter* footer = (GNClink_FrameFooter*)(framePointer + GNCLINK_FRAME_HEADER_LENGTH + GNCLINK_FRAME_PAYLOAD_LENGTH);
	// get pointer to payload section
	uint8_t* payload = framePointer + GNCLINK_FRAME_HEADER_LENGTH;

	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    4b02:	2400      	movs	r4, #0
    4b04:	2c0f      	cmp	r4, #15
    4b06:	dc09      	bgt.n	4b1c <GNClink_Reconstruct_Packet_From_Frames+0x1c>
    4b08:	7843      	ldrb	r3, [r0, #1]
    4b0a:	011b      	lsls	r3, r3, #4
    4b0c:	191b      	adds	r3, r3, r4
    4b0e:	2b3f      	cmp	r3, #63	; 0x3f
    4b10:	dc04      	bgt.n	4b1c <GNClink_Reconstruct_Packet_From_Frames+0x1c>
		packetPointer[i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH] = payload[i];
    4b12:	1905      	adds	r5, r0, r4
    4b14:	78ed      	ldrb	r5, [r5, #3]
    4b16:	54cd      	strb	r5, [r1, r3]
	for (int i = 0; i < GNCLINK_FRAME_PAYLOAD_LENGTH && i + header->index * GNCLINK_FRAME_PAYLOAD_LENGTH < GNCLINK_PACKET_MAX_TOTAL_LENGTH; ++i) {
    4b18:	3401      	adds	r4, #1
    4b1a:	e7f3      	b.n	4b04 <GNClink_Reconstruct_Packet_From_Frames+0x4>
	}

	*moreFrames = (header->flags & GNClink_FrameFlags_TransactionEnd) == 0;
    4b1c:	7883      	ldrb	r3, [r0, #2]
    4b1e:	085b      	lsrs	r3, r3, #1
    4b20:	2101      	movs	r1, #1
    4b22:	404b      	eors	r3, r1
    4b24:	2101      	movs	r1, #1
    4b26:	400b      	ands	r3, r1
    4b28:	7013      	strb	r3, [r2, #0]

	return true;
    4b2a:	2001      	movs	r0, #1
    4b2c:	bd30      	pop	{r4, r5, pc}
	...

00004b30 <fp_multiply>:
#include <fixedpoint_defs.h>

fp32_t fp_multiply(fp32_t a, fp32_t b) {
    4b30:	b510      	push	{r4, lr}
    4b32:	000a      	movs	r2, r1
    fp_long c = (fp_long)a * b;
    4b34:	17c1      	asrs	r1, r0, #31
    4b36:	17d3      	asrs	r3, r2, #31
    4b38:	4c02      	ldr	r4, [pc, #8]	; (4b44 <fp_multiply+0x14>)
    4b3a:	47a0      	blx	r4
    return c >> 16;
    4b3c:	0409      	lsls	r1, r1, #16
    4b3e:	0c00      	lsrs	r0, r0, #16
    4b40:	4308      	orrs	r0, r1
    4b42:	bd10      	pop	{r4, pc}
    4b44:	00004bbd 	.word	0x00004bbd

00004b48 <__aeabi_cfrcmple>:
    4b48:	4684      	mov	ip, r0
    4b4a:	0008      	movs	r0, r1
    4b4c:	4661      	mov	r1, ip
    4b4e:	e7ff      	b.n	4b50 <__aeabi_cfcmpeq>

00004b50 <__aeabi_cfcmpeq>:
    4b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4b52:	f000 fb93 	bl	527c <__lesf2>
    4b56:	2800      	cmp	r0, #0
    4b58:	d401      	bmi.n	4b5e <__aeabi_cfcmpeq+0xe>
    4b5a:	2100      	movs	r1, #0
    4b5c:	42c8      	cmn	r0, r1
    4b5e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004b60 <__aeabi_fcmpeq>:
    4b60:	b510      	push	{r4, lr}
    4b62:	f000 fb13 	bl	518c <__eqsf2>
    4b66:	4240      	negs	r0, r0
    4b68:	3001      	adds	r0, #1
    4b6a:	bd10      	pop	{r4, pc}

00004b6c <__aeabi_fcmplt>:
    4b6c:	b510      	push	{r4, lr}
    4b6e:	f000 fb85 	bl	527c <__lesf2>
    4b72:	2800      	cmp	r0, #0
    4b74:	db01      	blt.n	4b7a <__aeabi_fcmplt+0xe>
    4b76:	2000      	movs	r0, #0
    4b78:	bd10      	pop	{r4, pc}
    4b7a:	2001      	movs	r0, #1
    4b7c:	bd10      	pop	{r4, pc}
    4b7e:	46c0      	nop			; (mov r8, r8)

00004b80 <__aeabi_fcmple>:
    4b80:	b510      	push	{r4, lr}
    4b82:	f000 fb7b 	bl	527c <__lesf2>
    4b86:	2800      	cmp	r0, #0
    4b88:	dd01      	ble.n	4b8e <__aeabi_fcmple+0xe>
    4b8a:	2000      	movs	r0, #0
    4b8c:	bd10      	pop	{r4, pc}
    4b8e:	2001      	movs	r0, #1
    4b90:	bd10      	pop	{r4, pc}
    4b92:	46c0      	nop			; (mov r8, r8)

00004b94 <__aeabi_fcmpgt>:
    4b94:	b510      	push	{r4, lr}
    4b96:	f000 fb21 	bl	51dc <__gesf2>
    4b9a:	2800      	cmp	r0, #0
    4b9c:	dc01      	bgt.n	4ba2 <__aeabi_fcmpgt+0xe>
    4b9e:	2000      	movs	r0, #0
    4ba0:	bd10      	pop	{r4, pc}
    4ba2:	2001      	movs	r0, #1
    4ba4:	bd10      	pop	{r4, pc}
    4ba6:	46c0      	nop			; (mov r8, r8)

00004ba8 <__aeabi_fcmpge>:
    4ba8:	b510      	push	{r4, lr}
    4baa:	f000 fb17 	bl	51dc <__gesf2>
    4bae:	2800      	cmp	r0, #0
    4bb0:	da01      	bge.n	4bb6 <__aeabi_fcmpge+0xe>
    4bb2:	2000      	movs	r0, #0
    4bb4:	bd10      	pop	{r4, pc}
    4bb6:	2001      	movs	r0, #1
    4bb8:	bd10      	pop	{r4, pc}
    4bba:	46c0      	nop			; (mov r8, r8)

00004bbc <__aeabi_lmul>:
    4bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bbe:	46ce      	mov	lr, r9
    4bc0:	4699      	mov	r9, r3
    4bc2:	0c03      	lsrs	r3, r0, #16
    4bc4:	469c      	mov	ip, r3
    4bc6:	0413      	lsls	r3, r2, #16
    4bc8:	4647      	mov	r7, r8
    4bca:	0c1b      	lsrs	r3, r3, #16
    4bcc:	001d      	movs	r5, r3
    4bce:	000e      	movs	r6, r1
    4bd0:	4661      	mov	r1, ip
    4bd2:	0404      	lsls	r4, r0, #16
    4bd4:	0c24      	lsrs	r4, r4, #16
    4bd6:	b580      	push	{r7, lr}
    4bd8:	0007      	movs	r7, r0
    4bda:	0c10      	lsrs	r0, r2, #16
    4bdc:	434b      	muls	r3, r1
    4bde:	4365      	muls	r5, r4
    4be0:	4341      	muls	r1, r0
    4be2:	4360      	muls	r0, r4
    4be4:	0c2c      	lsrs	r4, r5, #16
    4be6:	18c0      	adds	r0, r0, r3
    4be8:	1824      	adds	r4, r4, r0
    4bea:	468c      	mov	ip, r1
    4bec:	42a3      	cmp	r3, r4
    4bee:	d903      	bls.n	4bf8 <__aeabi_lmul+0x3c>
    4bf0:	2380      	movs	r3, #128	; 0x80
    4bf2:	025b      	lsls	r3, r3, #9
    4bf4:	4698      	mov	r8, r3
    4bf6:	44c4      	add	ip, r8
    4bf8:	4649      	mov	r1, r9
    4bfa:	4379      	muls	r1, r7
    4bfc:	4356      	muls	r6, r2
    4bfe:	0c23      	lsrs	r3, r4, #16
    4c00:	042d      	lsls	r5, r5, #16
    4c02:	0c2d      	lsrs	r5, r5, #16
    4c04:	1989      	adds	r1, r1, r6
    4c06:	4463      	add	r3, ip
    4c08:	0424      	lsls	r4, r4, #16
    4c0a:	1960      	adds	r0, r4, r5
    4c0c:	18c9      	adds	r1, r1, r3
    4c0e:	bcc0      	pop	{r6, r7}
    4c10:	46b9      	mov	r9, r7
    4c12:	46b0      	mov	r8, r6
    4c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c16:	46c0      	nop			; (mov r8, r8)

00004c18 <__aeabi_f2uiz>:
    4c18:	219e      	movs	r1, #158	; 0x9e
    4c1a:	b510      	push	{r4, lr}
    4c1c:	05c9      	lsls	r1, r1, #23
    4c1e:	1c04      	adds	r4, r0, #0
    4c20:	f7ff ffc2 	bl	4ba8 <__aeabi_fcmpge>
    4c24:	2800      	cmp	r0, #0
    4c26:	d103      	bne.n	4c30 <__aeabi_f2uiz+0x18>
    4c28:	1c20      	adds	r0, r4, #0
    4c2a:	f000 fe45 	bl	58b8 <__aeabi_f2iz>
    4c2e:	bd10      	pop	{r4, pc}
    4c30:	219e      	movs	r1, #158	; 0x9e
    4c32:	1c20      	adds	r0, r4, #0
    4c34:	05c9      	lsls	r1, r1, #23
    4c36:	f000 fcad 	bl	5594 <__aeabi_fsub>
    4c3a:	f000 fe3d 	bl	58b8 <__aeabi_f2iz>
    4c3e:	2380      	movs	r3, #128	; 0x80
    4c40:	061b      	lsls	r3, r3, #24
    4c42:	469c      	mov	ip, r3
    4c44:	4460      	add	r0, ip
    4c46:	e7f2      	b.n	4c2e <__aeabi_f2uiz+0x16>

00004c48 <__aeabi_fadd>:
    4c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c4a:	0243      	lsls	r3, r0, #9
    4c4c:	0045      	lsls	r5, r0, #1
    4c4e:	0fc4      	lsrs	r4, r0, #31
    4c50:	0248      	lsls	r0, r1, #9
    4c52:	0a42      	lsrs	r2, r0, #9
    4c54:	4694      	mov	ip, r2
    4c56:	004a      	lsls	r2, r1, #1
    4c58:	0a5f      	lsrs	r7, r3, #9
    4c5a:	0e2d      	lsrs	r5, r5, #24
    4c5c:	099b      	lsrs	r3, r3, #6
    4c5e:	0e12      	lsrs	r2, r2, #24
    4c60:	0fc9      	lsrs	r1, r1, #31
    4c62:	0980      	lsrs	r0, r0, #6
    4c64:	428c      	cmp	r4, r1
    4c66:	d022      	beq.n	4cae <__aeabi_fadd+0x66>
    4c68:	1aae      	subs	r6, r5, r2
    4c6a:	2e00      	cmp	r6, #0
    4c6c:	dd0d      	ble.n	4c8a <__aeabi_fadd+0x42>
    4c6e:	2a00      	cmp	r2, #0
    4c70:	d12d      	bne.n	4cce <__aeabi_fadd+0x86>
    4c72:	2800      	cmp	r0, #0
    4c74:	d100      	bne.n	4c78 <__aeabi_fadd+0x30>
    4c76:	e083      	b.n	4d80 <__aeabi_fadd+0x138>
    4c78:	1e72      	subs	r2, r6, #1
    4c7a:	2e01      	cmp	r6, #1
    4c7c:	d100      	bne.n	4c80 <__aeabi_fadd+0x38>
    4c7e:	e11b      	b.n	4eb8 <__aeabi_fadd+0x270>
    4c80:	2eff      	cmp	r6, #255	; 0xff
    4c82:	d100      	bne.n	4c86 <__aeabi_fadd+0x3e>
    4c84:	e0a2      	b.n	4dcc <__aeabi_fadd+0x184>
    4c86:	0016      	movs	r6, r2
    4c88:	e027      	b.n	4cda <__aeabi_fadd+0x92>
    4c8a:	2e00      	cmp	r6, #0
    4c8c:	d048      	beq.n	4d20 <__aeabi_fadd+0xd8>
    4c8e:	1b56      	subs	r6, r2, r5
    4c90:	2d00      	cmp	r5, #0
    4c92:	d000      	beq.n	4c96 <__aeabi_fadd+0x4e>
    4c94:	e0c1      	b.n	4e1a <__aeabi_fadd+0x1d2>
    4c96:	2b00      	cmp	r3, #0
    4c98:	d100      	bne.n	4c9c <__aeabi_fadd+0x54>
    4c9a:	e0f7      	b.n	4e8c <__aeabi_fadd+0x244>
    4c9c:	1e74      	subs	r4, r6, #1
    4c9e:	2e01      	cmp	r6, #1
    4ca0:	d100      	bne.n	4ca4 <__aeabi_fadd+0x5c>
    4ca2:	e12d      	b.n	4f00 <__aeabi_fadd+0x2b8>
    4ca4:	2eff      	cmp	r6, #255	; 0xff
    4ca6:	d100      	bne.n	4caa <__aeabi_fadd+0x62>
    4ca8:	e08e      	b.n	4dc8 <__aeabi_fadd+0x180>
    4caa:	0026      	movs	r6, r4
    4cac:	e0ba      	b.n	4e24 <__aeabi_fadd+0x1dc>
    4cae:	1aa9      	subs	r1, r5, r2
    4cb0:	2900      	cmp	r1, #0
    4cb2:	dc00      	bgt.n	4cb6 <__aeabi_fadd+0x6e>
    4cb4:	e08c      	b.n	4dd0 <__aeabi_fadd+0x188>
    4cb6:	2a00      	cmp	r2, #0
    4cb8:	d046      	beq.n	4d48 <__aeabi_fadd+0x100>
    4cba:	2dff      	cmp	r5, #255	; 0xff
    4cbc:	d100      	bne.n	4cc0 <__aeabi_fadd+0x78>
    4cbe:	e085      	b.n	4dcc <__aeabi_fadd+0x184>
    4cc0:	2280      	movs	r2, #128	; 0x80
    4cc2:	04d2      	lsls	r2, r2, #19
    4cc4:	4310      	orrs	r0, r2
    4cc6:	291b      	cmp	r1, #27
    4cc8:	dd49      	ble.n	4d5e <__aeabi_fadd+0x116>
    4cca:	3301      	adds	r3, #1
    4ccc:	e016      	b.n	4cfc <__aeabi_fadd+0xb4>
    4cce:	2dff      	cmp	r5, #255	; 0xff
    4cd0:	d100      	bne.n	4cd4 <__aeabi_fadd+0x8c>
    4cd2:	e07b      	b.n	4dcc <__aeabi_fadd+0x184>
    4cd4:	2280      	movs	r2, #128	; 0x80
    4cd6:	04d2      	lsls	r2, r2, #19
    4cd8:	4310      	orrs	r0, r2
    4cda:	2201      	movs	r2, #1
    4cdc:	2e1b      	cmp	r6, #27
    4cde:	dc07      	bgt.n	4cf0 <__aeabi_fadd+0xa8>
    4ce0:	2120      	movs	r1, #32
    4ce2:	1b89      	subs	r1, r1, r6
    4ce4:	0002      	movs	r2, r0
    4ce6:	4088      	lsls	r0, r1
    4ce8:	40f2      	lsrs	r2, r6
    4cea:	1e41      	subs	r1, r0, #1
    4cec:	4188      	sbcs	r0, r1
    4cee:	4302      	orrs	r2, r0
    4cf0:	1a9b      	subs	r3, r3, r2
    4cf2:	015a      	lsls	r2, r3, #5
    4cf4:	d451      	bmi.n	4d9a <__aeabi_fadd+0x152>
    4cf6:	2207      	movs	r2, #7
    4cf8:	401a      	ands	r2, r3
    4cfa:	d042      	beq.n	4d82 <__aeabi_fadd+0x13a>
    4cfc:	220f      	movs	r2, #15
    4cfe:	401a      	ands	r2, r3
    4d00:	2a04      	cmp	r2, #4
    4d02:	d000      	beq.n	4d06 <__aeabi_fadd+0xbe>
    4d04:	3304      	adds	r3, #4
    4d06:	015a      	lsls	r2, r3, #5
    4d08:	d53b      	bpl.n	4d82 <__aeabi_fadd+0x13a>
    4d0a:	1c68      	adds	r0, r5, #1
    4d0c:	2dfe      	cmp	r5, #254	; 0xfe
    4d0e:	d034      	beq.n	4d7a <__aeabi_fadd+0x132>
    4d10:	019b      	lsls	r3, r3, #6
    4d12:	0a5b      	lsrs	r3, r3, #9
    4d14:	b2c0      	uxtb	r0, r0
    4d16:	05c0      	lsls	r0, r0, #23
    4d18:	4318      	orrs	r0, r3
    4d1a:	07e4      	lsls	r4, r4, #31
    4d1c:	4320      	orrs	r0, r4
    4d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d20:	26fe      	movs	r6, #254	; 0xfe
    4d22:	1c6a      	adds	r2, r5, #1
    4d24:	4216      	tst	r6, r2
    4d26:	d000      	beq.n	4d2a <__aeabi_fadd+0xe2>
    4d28:	e08b      	b.n	4e42 <__aeabi_fadd+0x1fa>
    4d2a:	2d00      	cmp	r5, #0
    4d2c:	d000      	beq.n	4d30 <__aeabi_fadd+0xe8>
    4d2e:	e0b1      	b.n	4e94 <__aeabi_fadd+0x24c>
    4d30:	2b00      	cmp	r3, #0
    4d32:	d100      	bne.n	4d36 <__aeabi_fadd+0xee>
    4d34:	e0df      	b.n	4ef6 <__aeabi_fadd+0x2ae>
    4d36:	2800      	cmp	r0, #0
    4d38:	d069      	beq.n	4e0e <__aeabi_fadd+0x1c6>
    4d3a:	1a1a      	subs	r2, r3, r0
    4d3c:	0156      	lsls	r6, r2, #5
    4d3e:	d400      	bmi.n	4d42 <__aeabi_fadd+0xfa>
    4d40:	e0fb      	b.n	4f3a <__aeabi_fadd+0x2f2>
    4d42:	000c      	movs	r4, r1
    4d44:	1ac3      	subs	r3, r0, r3
    4d46:	e03c      	b.n	4dc2 <__aeabi_fadd+0x17a>
    4d48:	2800      	cmp	r0, #0
    4d4a:	d100      	bne.n	4d4e <__aeabi_fadd+0x106>
    4d4c:	e0b7      	b.n	4ebe <__aeabi_fadd+0x276>
    4d4e:	1e4a      	subs	r2, r1, #1
    4d50:	2901      	cmp	r1, #1
    4d52:	d100      	bne.n	4d56 <__aeabi_fadd+0x10e>
    4d54:	e0aa      	b.n	4eac <__aeabi_fadd+0x264>
    4d56:	29ff      	cmp	r1, #255	; 0xff
    4d58:	d038      	beq.n	4dcc <__aeabi_fadd+0x184>
    4d5a:	0011      	movs	r1, r2
    4d5c:	e7b3      	b.n	4cc6 <__aeabi_fadd+0x7e>
    4d5e:	0002      	movs	r2, r0
    4d60:	2620      	movs	r6, #32
    4d62:	40ca      	lsrs	r2, r1
    4d64:	1a71      	subs	r1, r6, r1
    4d66:	4088      	lsls	r0, r1
    4d68:	1e41      	subs	r1, r0, #1
    4d6a:	4188      	sbcs	r0, r1
    4d6c:	4310      	orrs	r0, r2
    4d6e:	181b      	adds	r3, r3, r0
    4d70:	015a      	lsls	r2, r3, #5
    4d72:	d5c0      	bpl.n	4cf6 <__aeabi_fadd+0xae>
    4d74:	3501      	adds	r5, #1
    4d76:	2dff      	cmp	r5, #255	; 0xff
    4d78:	d16c      	bne.n	4e54 <__aeabi_fadd+0x20c>
    4d7a:	20ff      	movs	r0, #255	; 0xff
    4d7c:	2300      	movs	r3, #0
    4d7e:	e7ca      	b.n	4d16 <__aeabi_fadd+0xce>
    4d80:	0035      	movs	r5, r6
    4d82:	08db      	lsrs	r3, r3, #3
    4d84:	2dff      	cmp	r5, #255	; 0xff
    4d86:	d144      	bne.n	4e12 <__aeabi_fadd+0x1ca>
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d0f6      	beq.n	4d7a <__aeabi_fadd+0x132>
    4d8c:	2280      	movs	r2, #128	; 0x80
    4d8e:	03d2      	lsls	r2, r2, #15
    4d90:	4313      	orrs	r3, r2
    4d92:	025b      	lsls	r3, r3, #9
    4d94:	20ff      	movs	r0, #255	; 0xff
    4d96:	0a5b      	lsrs	r3, r3, #9
    4d98:	e7bd      	b.n	4d16 <__aeabi_fadd+0xce>
    4d9a:	019e      	lsls	r6, r3, #6
    4d9c:	09b6      	lsrs	r6, r6, #6
    4d9e:	0030      	movs	r0, r6
    4da0:	f000 fe38 	bl	5a14 <__clzsi2>
    4da4:	3805      	subs	r0, #5
    4da6:	4086      	lsls	r6, r0
    4da8:	4285      	cmp	r5, r0
    4daa:	dc20      	bgt.n	4dee <__aeabi_fadd+0x1a6>
    4dac:	2220      	movs	r2, #32
    4dae:	1b40      	subs	r0, r0, r5
    4db0:	3001      	adds	r0, #1
    4db2:	1a12      	subs	r2, r2, r0
    4db4:	0033      	movs	r3, r6
    4db6:	4096      	lsls	r6, r2
    4db8:	40c3      	lsrs	r3, r0
    4dba:	1e72      	subs	r2, r6, #1
    4dbc:	4196      	sbcs	r6, r2
    4dbe:	2500      	movs	r5, #0
    4dc0:	4333      	orrs	r3, r6
    4dc2:	075a      	lsls	r2, r3, #29
    4dc4:	d19a      	bne.n	4cfc <__aeabi_fadd+0xb4>
    4dc6:	e79e      	b.n	4d06 <__aeabi_fadd+0xbe>
    4dc8:	000c      	movs	r4, r1
    4dca:	0003      	movs	r3, r0
    4dcc:	08db      	lsrs	r3, r3, #3
    4dce:	e7db      	b.n	4d88 <__aeabi_fadd+0x140>
    4dd0:	2900      	cmp	r1, #0
    4dd2:	d010      	beq.n	4df6 <__aeabi_fadd+0x1ae>
    4dd4:	1b51      	subs	r1, r2, r5
    4dd6:	2d00      	cmp	r5, #0
    4dd8:	d143      	bne.n	4e62 <__aeabi_fadd+0x21a>
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d100      	bne.n	4de0 <__aeabi_fadd+0x198>
    4dde:	e093      	b.n	4f08 <__aeabi_fadd+0x2c0>
    4de0:	1e4d      	subs	r5, r1, #1
    4de2:	2901      	cmp	r1, #1
    4de4:	d062      	beq.n	4eac <__aeabi_fadd+0x264>
    4de6:	29ff      	cmp	r1, #255	; 0xff
    4de8:	d0ef      	beq.n	4dca <__aeabi_fadd+0x182>
    4dea:	0029      	movs	r1, r5
    4dec:	e03e      	b.n	4e6c <__aeabi_fadd+0x224>
    4dee:	4b55      	ldr	r3, [pc, #340]	; (4f44 <__aeabi_fadd+0x2fc>)
    4df0:	1a2d      	subs	r5, r5, r0
    4df2:	4033      	ands	r3, r6
    4df4:	e7e5      	b.n	4dc2 <__aeabi_fadd+0x17a>
    4df6:	21fe      	movs	r1, #254	; 0xfe
    4df8:	1c6a      	adds	r2, r5, #1
    4dfa:	4211      	tst	r1, r2
    4dfc:	d13b      	bne.n	4e76 <__aeabi_fadd+0x22e>
    4dfe:	2d00      	cmp	r5, #0
    4e00:	d16a      	bne.n	4ed8 <__aeabi_fadd+0x290>
    4e02:	2b00      	cmp	r3, #0
    4e04:	d100      	bne.n	4e08 <__aeabi_fadd+0x1c0>
    4e06:	e08e      	b.n	4f26 <__aeabi_fadd+0x2de>
    4e08:	2800      	cmp	r0, #0
    4e0a:	d000      	beq.n	4e0e <__aeabi_fadd+0x1c6>
    4e0c:	e08d      	b.n	4f2a <__aeabi_fadd+0x2e2>
    4e0e:	2500      	movs	r5, #0
    4e10:	08db      	lsrs	r3, r3, #3
    4e12:	025b      	lsls	r3, r3, #9
    4e14:	0a5b      	lsrs	r3, r3, #9
    4e16:	b2e8      	uxtb	r0, r5
    4e18:	e77d      	b.n	4d16 <__aeabi_fadd+0xce>
    4e1a:	2aff      	cmp	r2, #255	; 0xff
    4e1c:	d0d4      	beq.n	4dc8 <__aeabi_fadd+0x180>
    4e1e:	2480      	movs	r4, #128	; 0x80
    4e20:	04e4      	lsls	r4, r4, #19
    4e22:	4323      	orrs	r3, r4
    4e24:	2401      	movs	r4, #1
    4e26:	2e1b      	cmp	r6, #27
    4e28:	dc07      	bgt.n	4e3a <__aeabi_fadd+0x1f2>
    4e2a:	2520      	movs	r5, #32
    4e2c:	1bad      	subs	r5, r5, r6
    4e2e:	001c      	movs	r4, r3
    4e30:	40ab      	lsls	r3, r5
    4e32:	40f4      	lsrs	r4, r6
    4e34:	1e5d      	subs	r5, r3, #1
    4e36:	41ab      	sbcs	r3, r5
    4e38:	431c      	orrs	r4, r3
    4e3a:	1b03      	subs	r3, r0, r4
    4e3c:	0015      	movs	r5, r2
    4e3e:	000c      	movs	r4, r1
    4e40:	e757      	b.n	4cf2 <__aeabi_fadd+0xaa>
    4e42:	1a1e      	subs	r6, r3, r0
    4e44:	0172      	lsls	r2, r6, #5
    4e46:	d42e      	bmi.n	4ea6 <__aeabi_fadd+0x25e>
    4e48:	2e00      	cmp	r6, #0
    4e4a:	d1a8      	bne.n	4d9e <__aeabi_fadd+0x156>
    4e4c:	2400      	movs	r4, #0
    4e4e:	2000      	movs	r0, #0
    4e50:	2300      	movs	r3, #0
    4e52:	e760      	b.n	4d16 <__aeabi_fadd+0xce>
    4e54:	2201      	movs	r2, #1
    4e56:	493c      	ldr	r1, [pc, #240]	; (4f48 <__aeabi_fadd+0x300>)
    4e58:	401a      	ands	r2, r3
    4e5a:	085b      	lsrs	r3, r3, #1
    4e5c:	400b      	ands	r3, r1
    4e5e:	4313      	orrs	r3, r2
    4e60:	e7af      	b.n	4dc2 <__aeabi_fadd+0x17a>
    4e62:	2aff      	cmp	r2, #255	; 0xff
    4e64:	d0b1      	beq.n	4dca <__aeabi_fadd+0x182>
    4e66:	2580      	movs	r5, #128	; 0x80
    4e68:	04ed      	lsls	r5, r5, #19
    4e6a:	432b      	orrs	r3, r5
    4e6c:	291b      	cmp	r1, #27
    4e6e:	dd28      	ble.n	4ec2 <__aeabi_fadd+0x27a>
    4e70:	0015      	movs	r5, r2
    4e72:	1c43      	adds	r3, r0, #1
    4e74:	e742      	b.n	4cfc <__aeabi_fadd+0xb4>
    4e76:	2aff      	cmp	r2, #255	; 0xff
    4e78:	d100      	bne.n	4e7c <__aeabi_fadd+0x234>
    4e7a:	e77e      	b.n	4d7a <__aeabi_fadd+0x132>
    4e7c:	181b      	adds	r3, r3, r0
    4e7e:	085b      	lsrs	r3, r3, #1
    4e80:	0015      	movs	r5, r2
    4e82:	075a      	lsls	r2, r3, #29
    4e84:	d000      	beq.n	4e88 <__aeabi_fadd+0x240>
    4e86:	e739      	b.n	4cfc <__aeabi_fadd+0xb4>
    4e88:	08db      	lsrs	r3, r3, #3
    4e8a:	e7c2      	b.n	4e12 <__aeabi_fadd+0x1ca>
    4e8c:	000c      	movs	r4, r1
    4e8e:	0035      	movs	r5, r6
    4e90:	0003      	movs	r3, r0
    4e92:	e776      	b.n	4d82 <__aeabi_fadd+0x13a>
    4e94:	2b00      	cmp	r3, #0
    4e96:	d13a      	bne.n	4f0e <__aeabi_fadd+0x2c6>
    4e98:	2800      	cmp	r0, #0
    4e9a:	d195      	bne.n	4dc8 <__aeabi_fadd+0x180>
    4e9c:	2380      	movs	r3, #128	; 0x80
    4e9e:	2400      	movs	r4, #0
    4ea0:	20ff      	movs	r0, #255	; 0xff
    4ea2:	03db      	lsls	r3, r3, #15
    4ea4:	e737      	b.n	4d16 <__aeabi_fadd+0xce>
    4ea6:	000c      	movs	r4, r1
    4ea8:	1ac6      	subs	r6, r0, r3
    4eaa:	e778      	b.n	4d9e <__aeabi_fadd+0x156>
    4eac:	181b      	adds	r3, r3, r0
    4eae:	2502      	movs	r5, #2
    4eb0:	015a      	lsls	r2, r3, #5
    4eb2:	d4cf      	bmi.n	4e54 <__aeabi_fadd+0x20c>
    4eb4:	3d01      	subs	r5, #1
    4eb6:	e71e      	b.n	4cf6 <__aeabi_fadd+0xae>
    4eb8:	2501      	movs	r5, #1
    4eba:	1a1b      	subs	r3, r3, r0
    4ebc:	e719      	b.n	4cf2 <__aeabi_fadd+0xaa>
    4ebe:	000d      	movs	r5, r1
    4ec0:	e75f      	b.n	4d82 <__aeabi_fadd+0x13a>
    4ec2:	001d      	movs	r5, r3
    4ec4:	2620      	movs	r6, #32
    4ec6:	40cd      	lsrs	r5, r1
    4ec8:	1a71      	subs	r1, r6, r1
    4eca:	408b      	lsls	r3, r1
    4ecc:	1e59      	subs	r1, r3, #1
    4ece:	418b      	sbcs	r3, r1
    4ed0:	432b      	orrs	r3, r5
    4ed2:	181b      	adds	r3, r3, r0
    4ed4:	0015      	movs	r5, r2
    4ed6:	e74b      	b.n	4d70 <__aeabi_fadd+0x128>
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d100      	bne.n	4ede <__aeabi_fadd+0x296>
    4edc:	e775      	b.n	4dca <__aeabi_fadd+0x182>
    4ede:	2800      	cmp	r0, #0
    4ee0:	d100      	bne.n	4ee4 <__aeabi_fadd+0x29c>
    4ee2:	e773      	b.n	4dcc <__aeabi_fadd+0x184>
    4ee4:	2280      	movs	r2, #128	; 0x80
    4ee6:	03d2      	lsls	r2, r2, #15
    4ee8:	4297      	cmp	r7, r2
    4eea:	d302      	bcc.n	4ef2 <__aeabi_fadd+0x2aa>
    4eec:	4594      	cmp	ip, r2
    4eee:	d200      	bcs.n	4ef2 <__aeabi_fadd+0x2aa>
    4ef0:	0003      	movs	r3, r0
    4ef2:	08db      	lsrs	r3, r3, #3
    4ef4:	e74a      	b.n	4d8c <__aeabi_fadd+0x144>
    4ef6:	2800      	cmp	r0, #0
    4ef8:	d0a8      	beq.n	4e4c <__aeabi_fadd+0x204>
    4efa:	000c      	movs	r4, r1
    4efc:	0003      	movs	r3, r0
    4efe:	e786      	b.n	4e0e <__aeabi_fadd+0x1c6>
    4f00:	000c      	movs	r4, r1
    4f02:	1ac3      	subs	r3, r0, r3
    4f04:	3501      	adds	r5, #1
    4f06:	e6f4      	b.n	4cf2 <__aeabi_fadd+0xaa>
    4f08:	000d      	movs	r5, r1
    4f0a:	0003      	movs	r3, r0
    4f0c:	e739      	b.n	4d82 <__aeabi_fadd+0x13a>
    4f0e:	2800      	cmp	r0, #0
    4f10:	d100      	bne.n	4f14 <__aeabi_fadd+0x2cc>
    4f12:	e75b      	b.n	4dcc <__aeabi_fadd+0x184>
    4f14:	2280      	movs	r2, #128	; 0x80
    4f16:	03d2      	lsls	r2, r2, #15
    4f18:	4297      	cmp	r7, r2
    4f1a:	d3ea      	bcc.n	4ef2 <__aeabi_fadd+0x2aa>
    4f1c:	4594      	cmp	ip, r2
    4f1e:	d2e8      	bcs.n	4ef2 <__aeabi_fadd+0x2aa>
    4f20:	000c      	movs	r4, r1
    4f22:	0003      	movs	r3, r0
    4f24:	e7e5      	b.n	4ef2 <__aeabi_fadd+0x2aa>
    4f26:	0003      	movs	r3, r0
    4f28:	e771      	b.n	4e0e <__aeabi_fadd+0x1c6>
    4f2a:	181b      	adds	r3, r3, r0
    4f2c:	015a      	lsls	r2, r3, #5
    4f2e:	d5ab      	bpl.n	4e88 <__aeabi_fadd+0x240>
    4f30:	4a04      	ldr	r2, [pc, #16]	; (4f44 <__aeabi_fadd+0x2fc>)
    4f32:	3501      	adds	r5, #1
    4f34:	4013      	ands	r3, r2
    4f36:	08db      	lsrs	r3, r3, #3
    4f38:	e76b      	b.n	4e12 <__aeabi_fadd+0x1ca>
    4f3a:	1e13      	subs	r3, r2, #0
    4f3c:	d086      	beq.n	4e4c <__aeabi_fadd+0x204>
    4f3e:	08db      	lsrs	r3, r3, #3
    4f40:	e767      	b.n	4e12 <__aeabi_fadd+0x1ca>
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	fbffffff 	.word	0xfbffffff
    4f48:	7dffffff 	.word	0x7dffffff

00004f4c <__aeabi_fdiv>:
    4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f4e:	464f      	mov	r7, r9
    4f50:	4646      	mov	r6, r8
    4f52:	46d6      	mov	lr, sl
    4f54:	0244      	lsls	r4, r0, #9
    4f56:	b5c0      	push	{r6, r7, lr}
    4f58:	0047      	lsls	r7, r0, #1
    4f5a:	1c0e      	adds	r6, r1, #0
    4f5c:	0a64      	lsrs	r4, r4, #9
    4f5e:	0e3f      	lsrs	r7, r7, #24
    4f60:	0fc5      	lsrs	r5, r0, #31
    4f62:	2f00      	cmp	r7, #0
    4f64:	d03c      	beq.n	4fe0 <__aeabi_fdiv+0x94>
    4f66:	2fff      	cmp	r7, #255	; 0xff
    4f68:	d042      	beq.n	4ff0 <__aeabi_fdiv+0xa4>
    4f6a:	2300      	movs	r3, #0
    4f6c:	2280      	movs	r2, #128	; 0x80
    4f6e:	4699      	mov	r9, r3
    4f70:	469a      	mov	sl, r3
    4f72:	00e4      	lsls	r4, r4, #3
    4f74:	04d2      	lsls	r2, r2, #19
    4f76:	4314      	orrs	r4, r2
    4f78:	3f7f      	subs	r7, #127	; 0x7f
    4f7a:	0273      	lsls	r3, r6, #9
    4f7c:	0a5b      	lsrs	r3, r3, #9
    4f7e:	4698      	mov	r8, r3
    4f80:	0073      	lsls	r3, r6, #1
    4f82:	0e1b      	lsrs	r3, r3, #24
    4f84:	0ff6      	lsrs	r6, r6, #31
    4f86:	2b00      	cmp	r3, #0
    4f88:	d01b      	beq.n	4fc2 <__aeabi_fdiv+0x76>
    4f8a:	2bff      	cmp	r3, #255	; 0xff
    4f8c:	d013      	beq.n	4fb6 <__aeabi_fdiv+0x6a>
    4f8e:	4642      	mov	r2, r8
    4f90:	2180      	movs	r1, #128	; 0x80
    4f92:	00d2      	lsls	r2, r2, #3
    4f94:	04c9      	lsls	r1, r1, #19
    4f96:	4311      	orrs	r1, r2
    4f98:	4688      	mov	r8, r1
    4f9a:	2000      	movs	r0, #0
    4f9c:	3b7f      	subs	r3, #127	; 0x7f
    4f9e:	0029      	movs	r1, r5
    4fa0:	1aff      	subs	r7, r7, r3
    4fa2:	464b      	mov	r3, r9
    4fa4:	4071      	eors	r1, r6
    4fa6:	b2c9      	uxtb	r1, r1
    4fa8:	2b0f      	cmp	r3, #15
    4faa:	d900      	bls.n	4fae <__aeabi_fdiv+0x62>
    4fac:	e0b5      	b.n	511a <__aeabi_fdiv+0x1ce>
    4fae:	4a74      	ldr	r2, [pc, #464]	; (5180 <__aeabi_fdiv+0x234>)
    4fb0:	009b      	lsls	r3, r3, #2
    4fb2:	58d3      	ldr	r3, [r2, r3]
    4fb4:	469f      	mov	pc, r3
    4fb6:	4643      	mov	r3, r8
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d13f      	bne.n	503c <__aeabi_fdiv+0xf0>
    4fbc:	3fff      	subs	r7, #255	; 0xff
    4fbe:	3302      	adds	r3, #2
    4fc0:	e003      	b.n	4fca <__aeabi_fdiv+0x7e>
    4fc2:	4643      	mov	r3, r8
    4fc4:	2b00      	cmp	r3, #0
    4fc6:	d12d      	bne.n	5024 <__aeabi_fdiv+0xd8>
    4fc8:	2301      	movs	r3, #1
    4fca:	0029      	movs	r1, r5
    4fcc:	464a      	mov	r2, r9
    4fce:	4071      	eors	r1, r6
    4fd0:	b2c9      	uxtb	r1, r1
    4fd2:	431a      	orrs	r2, r3
    4fd4:	2a0e      	cmp	r2, #14
    4fd6:	d838      	bhi.n	504a <__aeabi_fdiv+0xfe>
    4fd8:	486a      	ldr	r0, [pc, #424]	; (5184 <__aeabi_fdiv+0x238>)
    4fda:	0092      	lsls	r2, r2, #2
    4fdc:	5882      	ldr	r2, [r0, r2]
    4fde:	4697      	mov	pc, r2
    4fe0:	2c00      	cmp	r4, #0
    4fe2:	d113      	bne.n	500c <__aeabi_fdiv+0xc0>
    4fe4:	2304      	movs	r3, #4
    4fe6:	4699      	mov	r9, r3
    4fe8:	3b03      	subs	r3, #3
    4fea:	2700      	movs	r7, #0
    4fec:	469a      	mov	sl, r3
    4fee:	e7c4      	b.n	4f7a <__aeabi_fdiv+0x2e>
    4ff0:	2c00      	cmp	r4, #0
    4ff2:	d105      	bne.n	5000 <__aeabi_fdiv+0xb4>
    4ff4:	2308      	movs	r3, #8
    4ff6:	4699      	mov	r9, r3
    4ff8:	3b06      	subs	r3, #6
    4ffa:	27ff      	movs	r7, #255	; 0xff
    4ffc:	469a      	mov	sl, r3
    4ffe:	e7bc      	b.n	4f7a <__aeabi_fdiv+0x2e>
    5000:	230c      	movs	r3, #12
    5002:	4699      	mov	r9, r3
    5004:	3b09      	subs	r3, #9
    5006:	27ff      	movs	r7, #255	; 0xff
    5008:	469a      	mov	sl, r3
    500a:	e7b6      	b.n	4f7a <__aeabi_fdiv+0x2e>
    500c:	0020      	movs	r0, r4
    500e:	f000 fd01 	bl	5a14 <__clzsi2>
    5012:	2776      	movs	r7, #118	; 0x76
    5014:	1f43      	subs	r3, r0, #5
    5016:	409c      	lsls	r4, r3
    5018:	2300      	movs	r3, #0
    501a:	427f      	negs	r7, r7
    501c:	4699      	mov	r9, r3
    501e:	469a      	mov	sl, r3
    5020:	1a3f      	subs	r7, r7, r0
    5022:	e7aa      	b.n	4f7a <__aeabi_fdiv+0x2e>
    5024:	4640      	mov	r0, r8
    5026:	f000 fcf5 	bl	5a14 <__clzsi2>
    502a:	4642      	mov	r2, r8
    502c:	1f43      	subs	r3, r0, #5
    502e:	409a      	lsls	r2, r3
    5030:	2376      	movs	r3, #118	; 0x76
    5032:	425b      	negs	r3, r3
    5034:	1a1b      	subs	r3, r3, r0
    5036:	4690      	mov	r8, r2
    5038:	2000      	movs	r0, #0
    503a:	e7b0      	b.n	4f9e <__aeabi_fdiv+0x52>
    503c:	2303      	movs	r3, #3
    503e:	464a      	mov	r2, r9
    5040:	431a      	orrs	r2, r3
    5042:	4691      	mov	r9, r2
    5044:	2003      	movs	r0, #3
    5046:	33fc      	adds	r3, #252	; 0xfc
    5048:	e7a9      	b.n	4f9e <__aeabi_fdiv+0x52>
    504a:	000d      	movs	r5, r1
    504c:	20ff      	movs	r0, #255	; 0xff
    504e:	2200      	movs	r2, #0
    5050:	05c0      	lsls	r0, r0, #23
    5052:	07ed      	lsls	r5, r5, #31
    5054:	4310      	orrs	r0, r2
    5056:	4328      	orrs	r0, r5
    5058:	bce0      	pop	{r5, r6, r7}
    505a:	46ba      	mov	sl, r7
    505c:	46b1      	mov	r9, r6
    505e:	46a8      	mov	r8, r5
    5060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5062:	000d      	movs	r5, r1
    5064:	2000      	movs	r0, #0
    5066:	2200      	movs	r2, #0
    5068:	e7f2      	b.n	5050 <__aeabi_fdiv+0x104>
    506a:	4653      	mov	r3, sl
    506c:	2b02      	cmp	r3, #2
    506e:	d0ed      	beq.n	504c <__aeabi_fdiv+0x100>
    5070:	2b03      	cmp	r3, #3
    5072:	d033      	beq.n	50dc <__aeabi_fdiv+0x190>
    5074:	46a0      	mov	r8, r4
    5076:	2b01      	cmp	r3, #1
    5078:	d105      	bne.n	5086 <__aeabi_fdiv+0x13a>
    507a:	2000      	movs	r0, #0
    507c:	2200      	movs	r2, #0
    507e:	e7e7      	b.n	5050 <__aeabi_fdiv+0x104>
    5080:	0035      	movs	r5, r6
    5082:	2803      	cmp	r0, #3
    5084:	d07a      	beq.n	517c <__aeabi_fdiv+0x230>
    5086:	003b      	movs	r3, r7
    5088:	337f      	adds	r3, #127	; 0x7f
    508a:	2b00      	cmp	r3, #0
    508c:	dd2d      	ble.n	50ea <__aeabi_fdiv+0x19e>
    508e:	4642      	mov	r2, r8
    5090:	0752      	lsls	r2, r2, #29
    5092:	d007      	beq.n	50a4 <__aeabi_fdiv+0x158>
    5094:	220f      	movs	r2, #15
    5096:	4641      	mov	r1, r8
    5098:	400a      	ands	r2, r1
    509a:	2a04      	cmp	r2, #4
    509c:	d002      	beq.n	50a4 <__aeabi_fdiv+0x158>
    509e:	2204      	movs	r2, #4
    50a0:	4694      	mov	ip, r2
    50a2:	44e0      	add	r8, ip
    50a4:	4642      	mov	r2, r8
    50a6:	0112      	lsls	r2, r2, #4
    50a8:	d505      	bpl.n	50b6 <__aeabi_fdiv+0x16a>
    50aa:	4642      	mov	r2, r8
    50ac:	4b36      	ldr	r3, [pc, #216]	; (5188 <__aeabi_fdiv+0x23c>)
    50ae:	401a      	ands	r2, r3
    50b0:	003b      	movs	r3, r7
    50b2:	4690      	mov	r8, r2
    50b4:	3380      	adds	r3, #128	; 0x80
    50b6:	2bfe      	cmp	r3, #254	; 0xfe
    50b8:	dcc8      	bgt.n	504c <__aeabi_fdiv+0x100>
    50ba:	4642      	mov	r2, r8
    50bc:	0192      	lsls	r2, r2, #6
    50be:	0a52      	lsrs	r2, r2, #9
    50c0:	b2d8      	uxtb	r0, r3
    50c2:	e7c5      	b.n	5050 <__aeabi_fdiv+0x104>
    50c4:	2280      	movs	r2, #128	; 0x80
    50c6:	2500      	movs	r5, #0
    50c8:	20ff      	movs	r0, #255	; 0xff
    50ca:	03d2      	lsls	r2, r2, #15
    50cc:	e7c0      	b.n	5050 <__aeabi_fdiv+0x104>
    50ce:	2280      	movs	r2, #128	; 0x80
    50d0:	03d2      	lsls	r2, r2, #15
    50d2:	4214      	tst	r4, r2
    50d4:	d002      	beq.n	50dc <__aeabi_fdiv+0x190>
    50d6:	4643      	mov	r3, r8
    50d8:	4213      	tst	r3, r2
    50da:	d049      	beq.n	5170 <__aeabi_fdiv+0x224>
    50dc:	2280      	movs	r2, #128	; 0x80
    50de:	03d2      	lsls	r2, r2, #15
    50e0:	4322      	orrs	r2, r4
    50e2:	0252      	lsls	r2, r2, #9
    50e4:	20ff      	movs	r0, #255	; 0xff
    50e6:	0a52      	lsrs	r2, r2, #9
    50e8:	e7b2      	b.n	5050 <__aeabi_fdiv+0x104>
    50ea:	2201      	movs	r2, #1
    50ec:	1ad3      	subs	r3, r2, r3
    50ee:	2b1b      	cmp	r3, #27
    50f0:	dcc3      	bgt.n	507a <__aeabi_fdiv+0x12e>
    50f2:	4642      	mov	r2, r8
    50f4:	40da      	lsrs	r2, r3
    50f6:	4643      	mov	r3, r8
    50f8:	379e      	adds	r7, #158	; 0x9e
    50fa:	40bb      	lsls	r3, r7
    50fc:	1e59      	subs	r1, r3, #1
    50fe:	418b      	sbcs	r3, r1
    5100:	431a      	orrs	r2, r3
    5102:	0753      	lsls	r3, r2, #29
    5104:	d004      	beq.n	5110 <__aeabi_fdiv+0x1c4>
    5106:	230f      	movs	r3, #15
    5108:	4013      	ands	r3, r2
    510a:	2b04      	cmp	r3, #4
    510c:	d000      	beq.n	5110 <__aeabi_fdiv+0x1c4>
    510e:	3204      	adds	r2, #4
    5110:	0153      	lsls	r3, r2, #5
    5112:	d529      	bpl.n	5168 <__aeabi_fdiv+0x21c>
    5114:	2001      	movs	r0, #1
    5116:	2200      	movs	r2, #0
    5118:	e79a      	b.n	5050 <__aeabi_fdiv+0x104>
    511a:	4642      	mov	r2, r8
    511c:	0163      	lsls	r3, r4, #5
    511e:	0155      	lsls	r5, r2, #5
    5120:	42ab      	cmp	r3, r5
    5122:	d215      	bcs.n	5150 <__aeabi_fdiv+0x204>
    5124:	201b      	movs	r0, #27
    5126:	2200      	movs	r2, #0
    5128:	3f01      	subs	r7, #1
    512a:	2601      	movs	r6, #1
    512c:	001c      	movs	r4, r3
    512e:	0052      	lsls	r2, r2, #1
    5130:	005b      	lsls	r3, r3, #1
    5132:	2c00      	cmp	r4, #0
    5134:	db01      	blt.n	513a <__aeabi_fdiv+0x1ee>
    5136:	429d      	cmp	r5, r3
    5138:	d801      	bhi.n	513e <__aeabi_fdiv+0x1f2>
    513a:	1b5b      	subs	r3, r3, r5
    513c:	4332      	orrs	r2, r6
    513e:	3801      	subs	r0, #1
    5140:	2800      	cmp	r0, #0
    5142:	d1f3      	bne.n	512c <__aeabi_fdiv+0x1e0>
    5144:	1e58      	subs	r0, r3, #1
    5146:	4183      	sbcs	r3, r0
    5148:	4313      	orrs	r3, r2
    514a:	4698      	mov	r8, r3
    514c:	000d      	movs	r5, r1
    514e:	e79a      	b.n	5086 <__aeabi_fdiv+0x13a>
    5150:	201a      	movs	r0, #26
    5152:	2201      	movs	r2, #1
    5154:	1b5b      	subs	r3, r3, r5
    5156:	e7e8      	b.n	512a <__aeabi_fdiv+0x1de>
    5158:	3b02      	subs	r3, #2
    515a:	425a      	negs	r2, r3
    515c:	4153      	adcs	r3, r2
    515e:	425b      	negs	r3, r3
    5160:	0035      	movs	r5, r6
    5162:	2200      	movs	r2, #0
    5164:	b2d8      	uxtb	r0, r3
    5166:	e773      	b.n	5050 <__aeabi_fdiv+0x104>
    5168:	0192      	lsls	r2, r2, #6
    516a:	2000      	movs	r0, #0
    516c:	0a52      	lsrs	r2, r2, #9
    516e:	e76f      	b.n	5050 <__aeabi_fdiv+0x104>
    5170:	431a      	orrs	r2, r3
    5172:	0252      	lsls	r2, r2, #9
    5174:	0035      	movs	r5, r6
    5176:	20ff      	movs	r0, #255	; 0xff
    5178:	0a52      	lsrs	r2, r2, #9
    517a:	e769      	b.n	5050 <__aeabi_fdiv+0x104>
    517c:	4644      	mov	r4, r8
    517e:	e7ad      	b.n	50dc <__aeabi_fdiv+0x190>
    5180:	00006394 	.word	0x00006394
    5184:	000063d4 	.word	0x000063d4
    5188:	f7ffffff 	.word	0xf7ffffff

0000518c <__eqsf2>:
    518c:	b570      	push	{r4, r5, r6, lr}
    518e:	0042      	lsls	r2, r0, #1
    5190:	024e      	lsls	r6, r1, #9
    5192:	004c      	lsls	r4, r1, #1
    5194:	0245      	lsls	r5, r0, #9
    5196:	0a6d      	lsrs	r5, r5, #9
    5198:	0e12      	lsrs	r2, r2, #24
    519a:	0fc3      	lsrs	r3, r0, #31
    519c:	0a76      	lsrs	r6, r6, #9
    519e:	0e24      	lsrs	r4, r4, #24
    51a0:	0fc9      	lsrs	r1, r1, #31
    51a2:	2aff      	cmp	r2, #255	; 0xff
    51a4:	d010      	beq.n	51c8 <__eqsf2+0x3c>
    51a6:	2cff      	cmp	r4, #255	; 0xff
    51a8:	d00c      	beq.n	51c4 <__eqsf2+0x38>
    51aa:	2001      	movs	r0, #1
    51ac:	42a2      	cmp	r2, r4
    51ae:	d10a      	bne.n	51c6 <__eqsf2+0x3a>
    51b0:	42b5      	cmp	r5, r6
    51b2:	d108      	bne.n	51c6 <__eqsf2+0x3a>
    51b4:	428b      	cmp	r3, r1
    51b6:	d00f      	beq.n	51d8 <__eqsf2+0x4c>
    51b8:	2a00      	cmp	r2, #0
    51ba:	d104      	bne.n	51c6 <__eqsf2+0x3a>
    51bc:	0028      	movs	r0, r5
    51be:	1e43      	subs	r3, r0, #1
    51c0:	4198      	sbcs	r0, r3
    51c2:	e000      	b.n	51c6 <__eqsf2+0x3a>
    51c4:	2001      	movs	r0, #1
    51c6:	bd70      	pop	{r4, r5, r6, pc}
    51c8:	2001      	movs	r0, #1
    51ca:	2cff      	cmp	r4, #255	; 0xff
    51cc:	d1fb      	bne.n	51c6 <__eqsf2+0x3a>
    51ce:	4335      	orrs	r5, r6
    51d0:	d1f9      	bne.n	51c6 <__eqsf2+0x3a>
    51d2:	404b      	eors	r3, r1
    51d4:	0018      	movs	r0, r3
    51d6:	e7f6      	b.n	51c6 <__eqsf2+0x3a>
    51d8:	2000      	movs	r0, #0
    51da:	e7f4      	b.n	51c6 <__eqsf2+0x3a>

000051dc <__gesf2>:
    51dc:	b530      	push	{r4, r5, lr}
    51de:	0042      	lsls	r2, r0, #1
    51e0:	0244      	lsls	r4, r0, #9
    51e2:	024d      	lsls	r5, r1, #9
    51e4:	0fc3      	lsrs	r3, r0, #31
    51e6:	0048      	lsls	r0, r1, #1
    51e8:	0a64      	lsrs	r4, r4, #9
    51ea:	0e12      	lsrs	r2, r2, #24
    51ec:	0a6d      	lsrs	r5, r5, #9
    51ee:	0e00      	lsrs	r0, r0, #24
    51f0:	0fc9      	lsrs	r1, r1, #31
    51f2:	2aff      	cmp	r2, #255	; 0xff
    51f4:	d019      	beq.n	522a <__gesf2+0x4e>
    51f6:	28ff      	cmp	r0, #255	; 0xff
    51f8:	d00b      	beq.n	5212 <__gesf2+0x36>
    51fa:	2a00      	cmp	r2, #0
    51fc:	d11e      	bne.n	523c <__gesf2+0x60>
    51fe:	2800      	cmp	r0, #0
    5200:	d10b      	bne.n	521a <__gesf2+0x3e>
    5202:	2d00      	cmp	r5, #0
    5204:	d027      	beq.n	5256 <__gesf2+0x7a>
    5206:	2c00      	cmp	r4, #0
    5208:	d134      	bne.n	5274 <__gesf2+0x98>
    520a:	2900      	cmp	r1, #0
    520c:	d02f      	beq.n	526e <__gesf2+0x92>
    520e:	0008      	movs	r0, r1
    5210:	bd30      	pop	{r4, r5, pc}
    5212:	2d00      	cmp	r5, #0
    5214:	d128      	bne.n	5268 <__gesf2+0x8c>
    5216:	2a00      	cmp	r2, #0
    5218:	d101      	bne.n	521e <__gesf2+0x42>
    521a:	2c00      	cmp	r4, #0
    521c:	d0f5      	beq.n	520a <__gesf2+0x2e>
    521e:	428b      	cmp	r3, r1
    5220:	d107      	bne.n	5232 <__gesf2+0x56>
    5222:	2b00      	cmp	r3, #0
    5224:	d023      	beq.n	526e <__gesf2+0x92>
    5226:	0018      	movs	r0, r3
    5228:	e7f2      	b.n	5210 <__gesf2+0x34>
    522a:	2c00      	cmp	r4, #0
    522c:	d11c      	bne.n	5268 <__gesf2+0x8c>
    522e:	28ff      	cmp	r0, #255	; 0xff
    5230:	d014      	beq.n	525c <__gesf2+0x80>
    5232:	1e58      	subs	r0, r3, #1
    5234:	2302      	movs	r3, #2
    5236:	4018      	ands	r0, r3
    5238:	3801      	subs	r0, #1
    523a:	e7e9      	b.n	5210 <__gesf2+0x34>
    523c:	2800      	cmp	r0, #0
    523e:	d0f8      	beq.n	5232 <__gesf2+0x56>
    5240:	428b      	cmp	r3, r1
    5242:	d1f6      	bne.n	5232 <__gesf2+0x56>
    5244:	4282      	cmp	r2, r0
    5246:	dcf4      	bgt.n	5232 <__gesf2+0x56>
    5248:	dbeb      	blt.n	5222 <__gesf2+0x46>
    524a:	42ac      	cmp	r4, r5
    524c:	d8f1      	bhi.n	5232 <__gesf2+0x56>
    524e:	2000      	movs	r0, #0
    5250:	42ac      	cmp	r4, r5
    5252:	d2dd      	bcs.n	5210 <__gesf2+0x34>
    5254:	e7e5      	b.n	5222 <__gesf2+0x46>
    5256:	2c00      	cmp	r4, #0
    5258:	d0da      	beq.n	5210 <__gesf2+0x34>
    525a:	e7ea      	b.n	5232 <__gesf2+0x56>
    525c:	2d00      	cmp	r5, #0
    525e:	d103      	bne.n	5268 <__gesf2+0x8c>
    5260:	428b      	cmp	r3, r1
    5262:	d1e6      	bne.n	5232 <__gesf2+0x56>
    5264:	2000      	movs	r0, #0
    5266:	e7d3      	b.n	5210 <__gesf2+0x34>
    5268:	2002      	movs	r0, #2
    526a:	4240      	negs	r0, r0
    526c:	e7d0      	b.n	5210 <__gesf2+0x34>
    526e:	2001      	movs	r0, #1
    5270:	4240      	negs	r0, r0
    5272:	e7cd      	b.n	5210 <__gesf2+0x34>
    5274:	428b      	cmp	r3, r1
    5276:	d0e8      	beq.n	524a <__gesf2+0x6e>
    5278:	e7db      	b.n	5232 <__gesf2+0x56>
    527a:	46c0      	nop			; (mov r8, r8)

0000527c <__lesf2>:
    527c:	b530      	push	{r4, r5, lr}
    527e:	0042      	lsls	r2, r0, #1
    5280:	0244      	lsls	r4, r0, #9
    5282:	024d      	lsls	r5, r1, #9
    5284:	0fc3      	lsrs	r3, r0, #31
    5286:	0048      	lsls	r0, r1, #1
    5288:	0a64      	lsrs	r4, r4, #9
    528a:	0e12      	lsrs	r2, r2, #24
    528c:	0a6d      	lsrs	r5, r5, #9
    528e:	0e00      	lsrs	r0, r0, #24
    5290:	0fc9      	lsrs	r1, r1, #31
    5292:	2aff      	cmp	r2, #255	; 0xff
    5294:	d01a      	beq.n	52cc <__lesf2+0x50>
    5296:	28ff      	cmp	r0, #255	; 0xff
    5298:	d00e      	beq.n	52b8 <__lesf2+0x3c>
    529a:	2a00      	cmp	r2, #0
    529c:	d11e      	bne.n	52dc <__lesf2+0x60>
    529e:	2800      	cmp	r0, #0
    52a0:	d10e      	bne.n	52c0 <__lesf2+0x44>
    52a2:	2d00      	cmp	r5, #0
    52a4:	d02a      	beq.n	52fc <__lesf2+0x80>
    52a6:	2c00      	cmp	r4, #0
    52a8:	d00c      	beq.n	52c4 <__lesf2+0x48>
    52aa:	428b      	cmp	r3, r1
    52ac:	d01d      	beq.n	52ea <__lesf2+0x6e>
    52ae:	1e58      	subs	r0, r3, #1
    52b0:	2302      	movs	r3, #2
    52b2:	4018      	ands	r0, r3
    52b4:	3801      	subs	r0, #1
    52b6:	e010      	b.n	52da <__lesf2+0x5e>
    52b8:	2d00      	cmp	r5, #0
    52ba:	d10d      	bne.n	52d8 <__lesf2+0x5c>
    52bc:	2a00      	cmp	r2, #0
    52be:	d120      	bne.n	5302 <__lesf2+0x86>
    52c0:	2c00      	cmp	r4, #0
    52c2:	d11e      	bne.n	5302 <__lesf2+0x86>
    52c4:	2900      	cmp	r1, #0
    52c6:	d023      	beq.n	5310 <__lesf2+0x94>
    52c8:	0008      	movs	r0, r1
    52ca:	e006      	b.n	52da <__lesf2+0x5e>
    52cc:	2c00      	cmp	r4, #0
    52ce:	d103      	bne.n	52d8 <__lesf2+0x5c>
    52d0:	28ff      	cmp	r0, #255	; 0xff
    52d2:	d1ec      	bne.n	52ae <__lesf2+0x32>
    52d4:	2d00      	cmp	r5, #0
    52d6:	d017      	beq.n	5308 <__lesf2+0x8c>
    52d8:	2002      	movs	r0, #2
    52da:	bd30      	pop	{r4, r5, pc}
    52dc:	2800      	cmp	r0, #0
    52de:	d0e6      	beq.n	52ae <__lesf2+0x32>
    52e0:	428b      	cmp	r3, r1
    52e2:	d1e4      	bne.n	52ae <__lesf2+0x32>
    52e4:	4282      	cmp	r2, r0
    52e6:	dce2      	bgt.n	52ae <__lesf2+0x32>
    52e8:	db04      	blt.n	52f4 <__lesf2+0x78>
    52ea:	42ac      	cmp	r4, r5
    52ec:	d8df      	bhi.n	52ae <__lesf2+0x32>
    52ee:	2000      	movs	r0, #0
    52f0:	42ac      	cmp	r4, r5
    52f2:	d2f2      	bcs.n	52da <__lesf2+0x5e>
    52f4:	2b00      	cmp	r3, #0
    52f6:	d00b      	beq.n	5310 <__lesf2+0x94>
    52f8:	0018      	movs	r0, r3
    52fa:	e7ee      	b.n	52da <__lesf2+0x5e>
    52fc:	2c00      	cmp	r4, #0
    52fe:	d0ec      	beq.n	52da <__lesf2+0x5e>
    5300:	e7d5      	b.n	52ae <__lesf2+0x32>
    5302:	428b      	cmp	r3, r1
    5304:	d1d3      	bne.n	52ae <__lesf2+0x32>
    5306:	e7f5      	b.n	52f4 <__lesf2+0x78>
    5308:	2000      	movs	r0, #0
    530a:	428b      	cmp	r3, r1
    530c:	d0e5      	beq.n	52da <__lesf2+0x5e>
    530e:	e7ce      	b.n	52ae <__lesf2+0x32>
    5310:	2001      	movs	r0, #1
    5312:	4240      	negs	r0, r0
    5314:	e7e1      	b.n	52da <__lesf2+0x5e>
    5316:	46c0      	nop			; (mov r8, r8)

00005318 <__aeabi_fmul>:
    5318:	b5f0      	push	{r4, r5, r6, r7, lr}
    531a:	464f      	mov	r7, r9
    531c:	4646      	mov	r6, r8
    531e:	46d6      	mov	lr, sl
    5320:	0243      	lsls	r3, r0, #9
    5322:	0a5b      	lsrs	r3, r3, #9
    5324:	4699      	mov	r9, r3
    5326:	0043      	lsls	r3, r0, #1
    5328:	b5c0      	push	{r6, r7, lr}
    532a:	0e1b      	lsrs	r3, r3, #24
    532c:	1c0e      	adds	r6, r1, #0
    532e:	0fc5      	lsrs	r5, r0, #31
    5330:	2b00      	cmp	r3, #0
    5332:	d100      	bne.n	5336 <__aeabi_fmul+0x1e>
    5334:	e085      	b.n	5442 <__aeabi_fmul+0x12a>
    5336:	2bff      	cmp	r3, #255	; 0xff
    5338:	d100      	bne.n	533c <__aeabi_fmul+0x24>
    533a:	e08b      	b.n	5454 <__aeabi_fmul+0x13c>
    533c:	464a      	mov	r2, r9
    533e:	2180      	movs	r1, #128	; 0x80
    5340:	00d2      	lsls	r2, r2, #3
    5342:	04c9      	lsls	r1, r1, #19
    5344:	4311      	orrs	r1, r2
    5346:	227f      	movs	r2, #127	; 0x7f
    5348:	4252      	negs	r2, r2
    534a:	4690      	mov	r8, r2
    534c:	4498      	add	r8, r3
    534e:	2300      	movs	r3, #0
    5350:	4689      	mov	r9, r1
    5352:	2700      	movs	r7, #0
    5354:	469a      	mov	sl, r3
    5356:	0274      	lsls	r4, r6, #9
    5358:	0073      	lsls	r3, r6, #1
    535a:	0a64      	lsrs	r4, r4, #9
    535c:	0e1b      	lsrs	r3, r3, #24
    535e:	0ff6      	lsrs	r6, r6, #31
    5360:	2b00      	cmp	r3, #0
    5362:	d064      	beq.n	542e <__aeabi_fmul+0x116>
    5364:	2bff      	cmp	r3, #255	; 0xff
    5366:	d01f      	beq.n	53a8 <__aeabi_fmul+0x90>
    5368:	2280      	movs	r2, #128	; 0x80
    536a:	3b7f      	subs	r3, #127	; 0x7f
    536c:	00e4      	lsls	r4, r4, #3
    536e:	04d2      	lsls	r2, r2, #19
    5370:	4443      	add	r3, r8
    5372:	2000      	movs	r0, #0
    5374:	4314      	orrs	r4, r2
    5376:	1c59      	adds	r1, r3, #1
    5378:	2f0a      	cmp	r7, #10
    537a:	dc2b      	bgt.n	53d4 <__aeabi_fmul+0xbc>
    537c:	4075      	eors	r5, r6
    537e:	2f02      	cmp	r7, #2
    5380:	dc22      	bgt.n	53c8 <__aeabi_fmul+0xb0>
    5382:	3f01      	subs	r7, #1
    5384:	2f01      	cmp	r7, #1
    5386:	d900      	bls.n	538a <__aeabi_fmul+0x72>
    5388:	e0bb      	b.n	5502 <__aeabi_fmul+0x1ea>
    538a:	2802      	cmp	r0, #2
    538c:	d06b      	beq.n	5466 <__aeabi_fmul+0x14e>
    538e:	2801      	cmp	r0, #1
    5390:	d12a      	bne.n	53e8 <__aeabi_fmul+0xd0>
    5392:	2000      	movs	r0, #0
    5394:	2200      	movs	r2, #0
    5396:	05c0      	lsls	r0, r0, #23
    5398:	07ed      	lsls	r5, r5, #31
    539a:	4310      	orrs	r0, r2
    539c:	4328      	orrs	r0, r5
    539e:	bce0      	pop	{r5, r6, r7}
    53a0:	46ba      	mov	sl, r7
    53a2:	46b1      	mov	r9, r6
    53a4:	46a8      	mov	r8, r5
    53a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53a8:	2c00      	cmp	r4, #0
    53aa:	d064      	beq.n	5476 <__aeabi_fmul+0x15e>
    53ac:	2203      	movs	r2, #3
    53ae:	4641      	mov	r1, r8
    53b0:	4643      	mov	r3, r8
    53b2:	4317      	orrs	r7, r2
    53b4:	002a      	movs	r2, r5
    53b6:	3101      	adds	r1, #1
    53b8:	33ff      	adds	r3, #255	; 0xff
    53ba:	4072      	eors	r2, r6
    53bc:	31ff      	adds	r1, #255	; 0xff
    53be:	2f0a      	cmp	r7, #10
    53c0:	dd00      	ble.n	53c4 <__aeabi_fmul+0xac>
    53c2:	e0d7      	b.n	5574 <__aeabi_fmul+0x25c>
    53c4:	0015      	movs	r5, r2
    53c6:	2003      	movs	r0, #3
    53c8:	2201      	movs	r2, #1
    53ca:	40ba      	lsls	r2, r7
    53cc:	27a6      	movs	r7, #166	; 0xa6
    53ce:	00ff      	lsls	r7, r7, #3
    53d0:	423a      	tst	r2, r7
    53d2:	d020      	beq.n	5416 <__aeabi_fmul+0xfe>
    53d4:	4653      	mov	r3, sl
    53d6:	2b02      	cmp	r3, #2
    53d8:	d045      	beq.n	5466 <__aeabi_fmul+0x14e>
    53da:	2b03      	cmp	r3, #3
    53dc:	d100      	bne.n	53e0 <__aeabi_fmul+0xc8>
    53de:	e0bb      	b.n	5558 <__aeabi_fmul+0x240>
    53e0:	4650      	mov	r0, sl
    53e2:	464c      	mov	r4, r9
    53e4:	2801      	cmp	r0, #1
    53e6:	d0d4      	beq.n	5392 <__aeabi_fmul+0x7a>
    53e8:	000b      	movs	r3, r1
    53ea:	337f      	adds	r3, #127	; 0x7f
    53ec:	2b00      	cmp	r3, #0
    53ee:	dd70      	ble.n	54d2 <__aeabi_fmul+0x1ba>
    53f0:	0762      	lsls	r2, r4, #29
    53f2:	d004      	beq.n	53fe <__aeabi_fmul+0xe6>
    53f4:	220f      	movs	r2, #15
    53f6:	4022      	ands	r2, r4
    53f8:	2a04      	cmp	r2, #4
    53fa:	d000      	beq.n	53fe <__aeabi_fmul+0xe6>
    53fc:	3404      	adds	r4, #4
    53fe:	0122      	lsls	r2, r4, #4
    5400:	d503      	bpl.n	540a <__aeabi_fmul+0xf2>
    5402:	4b63      	ldr	r3, [pc, #396]	; (5590 <__aeabi_fmul+0x278>)
    5404:	401c      	ands	r4, r3
    5406:	000b      	movs	r3, r1
    5408:	3380      	adds	r3, #128	; 0x80
    540a:	2bfe      	cmp	r3, #254	; 0xfe
    540c:	dc2b      	bgt.n	5466 <__aeabi_fmul+0x14e>
    540e:	01a2      	lsls	r2, r4, #6
    5410:	0a52      	lsrs	r2, r2, #9
    5412:	b2d8      	uxtb	r0, r3
    5414:	e7bf      	b.n	5396 <__aeabi_fmul+0x7e>
    5416:	2790      	movs	r7, #144	; 0x90
    5418:	00bf      	lsls	r7, r7, #2
    541a:	423a      	tst	r2, r7
    541c:	d126      	bne.n	546c <__aeabi_fmul+0x154>
    541e:	3fb9      	subs	r7, #185	; 0xb9
    5420:	3fff      	subs	r7, #255	; 0xff
    5422:	4217      	tst	r7, r2
    5424:	d06d      	beq.n	5502 <__aeabi_fmul+0x1ea>
    5426:	0035      	movs	r5, r6
    5428:	46a1      	mov	r9, r4
    542a:	4682      	mov	sl, r0
    542c:	e7d2      	b.n	53d4 <__aeabi_fmul+0xbc>
    542e:	2c00      	cmp	r4, #0
    5430:	d141      	bne.n	54b6 <__aeabi_fmul+0x19e>
    5432:	2301      	movs	r3, #1
    5434:	431f      	orrs	r7, r3
    5436:	4643      	mov	r3, r8
    5438:	2001      	movs	r0, #1
    543a:	1c59      	adds	r1, r3, #1
    543c:	2f0a      	cmp	r7, #10
    543e:	dd9d      	ble.n	537c <__aeabi_fmul+0x64>
    5440:	e7c8      	b.n	53d4 <__aeabi_fmul+0xbc>
    5442:	464b      	mov	r3, r9
    5444:	2b00      	cmp	r3, #0
    5446:	d127      	bne.n	5498 <__aeabi_fmul+0x180>
    5448:	2300      	movs	r3, #0
    544a:	4698      	mov	r8, r3
    544c:	3301      	adds	r3, #1
    544e:	2704      	movs	r7, #4
    5450:	469a      	mov	sl, r3
    5452:	e780      	b.n	5356 <__aeabi_fmul+0x3e>
    5454:	464b      	mov	r3, r9
    5456:	2b00      	cmp	r3, #0
    5458:	d118      	bne.n	548c <__aeabi_fmul+0x174>
    545a:	23ff      	movs	r3, #255	; 0xff
    545c:	4698      	mov	r8, r3
    545e:	3bfd      	subs	r3, #253	; 0xfd
    5460:	2708      	movs	r7, #8
    5462:	469a      	mov	sl, r3
    5464:	e777      	b.n	5356 <__aeabi_fmul+0x3e>
    5466:	20ff      	movs	r0, #255	; 0xff
    5468:	2200      	movs	r2, #0
    546a:	e794      	b.n	5396 <__aeabi_fmul+0x7e>
    546c:	2280      	movs	r2, #128	; 0x80
    546e:	2500      	movs	r5, #0
    5470:	20ff      	movs	r0, #255	; 0xff
    5472:	03d2      	lsls	r2, r2, #15
    5474:	e78f      	b.n	5396 <__aeabi_fmul+0x7e>
    5476:	2302      	movs	r3, #2
    5478:	431f      	orrs	r7, r3
    547a:	4643      	mov	r3, r8
    547c:	1c59      	adds	r1, r3, #1
    547e:	31ff      	adds	r1, #255	; 0xff
    5480:	2f0a      	cmp	r7, #10
    5482:	dca7      	bgt.n	53d4 <__aeabi_fmul+0xbc>
    5484:	2002      	movs	r0, #2
    5486:	33ff      	adds	r3, #255	; 0xff
    5488:	4075      	eors	r5, r6
    548a:	e778      	b.n	537e <__aeabi_fmul+0x66>
    548c:	23ff      	movs	r3, #255	; 0xff
    548e:	4698      	mov	r8, r3
    5490:	3bfc      	subs	r3, #252	; 0xfc
    5492:	270c      	movs	r7, #12
    5494:	469a      	mov	sl, r3
    5496:	e75e      	b.n	5356 <__aeabi_fmul+0x3e>
    5498:	4648      	mov	r0, r9
    549a:	f000 fabb 	bl	5a14 <__clzsi2>
    549e:	464a      	mov	r2, r9
    54a0:	1f43      	subs	r3, r0, #5
    54a2:	409a      	lsls	r2, r3
    54a4:	2376      	movs	r3, #118	; 0x76
    54a6:	425b      	negs	r3, r3
    54a8:	1a1b      	subs	r3, r3, r0
    54aa:	4698      	mov	r8, r3
    54ac:	2300      	movs	r3, #0
    54ae:	4691      	mov	r9, r2
    54b0:	2700      	movs	r7, #0
    54b2:	469a      	mov	sl, r3
    54b4:	e74f      	b.n	5356 <__aeabi_fmul+0x3e>
    54b6:	0020      	movs	r0, r4
    54b8:	f000 faac 	bl	5a14 <__clzsi2>
    54bc:	1f43      	subs	r3, r0, #5
    54be:	409c      	lsls	r4, r3
    54c0:	4643      	mov	r3, r8
    54c2:	1a1b      	subs	r3, r3, r0
    54c4:	3b76      	subs	r3, #118	; 0x76
    54c6:	2000      	movs	r0, #0
    54c8:	1c59      	adds	r1, r3, #1
    54ca:	2f0a      	cmp	r7, #10
    54cc:	dc00      	bgt.n	54d0 <__aeabi_fmul+0x1b8>
    54ce:	e755      	b.n	537c <__aeabi_fmul+0x64>
    54d0:	e780      	b.n	53d4 <__aeabi_fmul+0xbc>
    54d2:	2201      	movs	r2, #1
    54d4:	1ad3      	subs	r3, r2, r3
    54d6:	2b1b      	cmp	r3, #27
    54d8:	dd00      	ble.n	54dc <__aeabi_fmul+0x1c4>
    54da:	e75a      	b.n	5392 <__aeabi_fmul+0x7a>
    54dc:	319e      	adds	r1, #158	; 0x9e
    54de:	0022      	movs	r2, r4
    54e0:	408c      	lsls	r4, r1
    54e2:	40da      	lsrs	r2, r3
    54e4:	1e63      	subs	r3, r4, #1
    54e6:	419c      	sbcs	r4, r3
    54e8:	4322      	orrs	r2, r4
    54ea:	0753      	lsls	r3, r2, #29
    54ec:	d004      	beq.n	54f8 <__aeabi_fmul+0x1e0>
    54ee:	230f      	movs	r3, #15
    54f0:	4013      	ands	r3, r2
    54f2:	2b04      	cmp	r3, #4
    54f4:	d000      	beq.n	54f8 <__aeabi_fmul+0x1e0>
    54f6:	3204      	adds	r2, #4
    54f8:	0153      	lsls	r3, r2, #5
    54fa:	d537      	bpl.n	556c <__aeabi_fmul+0x254>
    54fc:	2001      	movs	r0, #1
    54fe:	2200      	movs	r2, #0
    5500:	e749      	b.n	5396 <__aeabi_fmul+0x7e>
    5502:	0c20      	lsrs	r0, r4, #16
    5504:	464a      	mov	r2, r9
    5506:	0424      	lsls	r4, r4, #16
    5508:	0c24      	lsrs	r4, r4, #16
    550a:	0027      	movs	r7, r4
    550c:	0c16      	lsrs	r6, r2, #16
    550e:	0412      	lsls	r2, r2, #16
    5510:	0c12      	lsrs	r2, r2, #16
    5512:	4374      	muls	r4, r6
    5514:	4357      	muls	r7, r2
    5516:	4346      	muls	r6, r0
    5518:	4350      	muls	r0, r2
    551a:	0c3a      	lsrs	r2, r7, #16
    551c:	1900      	adds	r0, r0, r4
    551e:	1812      	adds	r2, r2, r0
    5520:	4294      	cmp	r4, r2
    5522:	d903      	bls.n	552c <__aeabi_fmul+0x214>
    5524:	2080      	movs	r0, #128	; 0x80
    5526:	0240      	lsls	r0, r0, #9
    5528:	4684      	mov	ip, r0
    552a:	4466      	add	r6, ip
    552c:	043f      	lsls	r7, r7, #16
    552e:	0410      	lsls	r0, r2, #16
    5530:	0c3f      	lsrs	r7, r7, #16
    5532:	19c0      	adds	r0, r0, r7
    5534:	0184      	lsls	r4, r0, #6
    5536:	1e67      	subs	r7, r4, #1
    5538:	41bc      	sbcs	r4, r7
    553a:	0c12      	lsrs	r2, r2, #16
    553c:	0e80      	lsrs	r0, r0, #26
    553e:	1992      	adds	r2, r2, r6
    5540:	4304      	orrs	r4, r0
    5542:	0192      	lsls	r2, r2, #6
    5544:	4314      	orrs	r4, r2
    5546:	0112      	lsls	r2, r2, #4
    5548:	d50e      	bpl.n	5568 <__aeabi_fmul+0x250>
    554a:	2301      	movs	r3, #1
    554c:	0862      	lsrs	r2, r4, #1
    554e:	401c      	ands	r4, r3
    5550:	4314      	orrs	r4, r2
    5552:	e749      	b.n	53e8 <__aeabi_fmul+0xd0>
    5554:	0035      	movs	r5, r6
    5556:	46a1      	mov	r9, r4
    5558:	2280      	movs	r2, #128	; 0x80
    555a:	464b      	mov	r3, r9
    555c:	03d2      	lsls	r2, r2, #15
    555e:	431a      	orrs	r2, r3
    5560:	0252      	lsls	r2, r2, #9
    5562:	20ff      	movs	r0, #255	; 0xff
    5564:	0a52      	lsrs	r2, r2, #9
    5566:	e716      	b.n	5396 <__aeabi_fmul+0x7e>
    5568:	0019      	movs	r1, r3
    556a:	e73d      	b.n	53e8 <__aeabi_fmul+0xd0>
    556c:	0192      	lsls	r2, r2, #6
    556e:	2000      	movs	r0, #0
    5570:	0a52      	lsrs	r2, r2, #9
    5572:	e710      	b.n	5396 <__aeabi_fmul+0x7e>
    5574:	2f0f      	cmp	r7, #15
    5576:	d1ed      	bne.n	5554 <__aeabi_fmul+0x23c>
    5578:	2280      	movs	r2, #128	; 0x80
    557a:	464b      	mov	r3, r9
    557c:	03d2      	lsls	r2, r2, #15
    557e:	4213      	tst	r3, r2
    5580:	d0ea      	beq.n	5558 <__aeabi_fmul+0x240>
    5582:	4214      	tst	r4, r2
    5584:	d1e8      	bne.n	5558 <__aeabi_fmul+0x240>
    5586:	0035      	movs	r5, r6
    5588:	20ff      	movs	r0, #255	; 0xff
    558a:	4322      	orrs	r2, r4
    558c:	e703      	b.n	5396 <__aeabi_fmul+0x7e>
    558e:	46c0      	nop			; (mov r8, r8)
    5590:	f7ffffff 	.word	0xf7ffffff

00005594 <__aeabi_fsub>:
    5594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5596:	0243      	lsls	r3, r0, #9
    5598:	0045      	lsls	r5, r0, #1
    559a:	0fc4      	lsrs	r4, r0, #31
    559c:	0248      	lsls	r0, r1, #9
    559e:	0a42      	lsrs	r2, r0, #9
    55a0:	4694      	mov	ip, r2
    55a2:	004a      	lsls	r2, r1, #1
    55a4:	0a5e      	lsrs	r6, r3, #9
    55a6:	0e2d      	lsrs	r5, r5, #24
    55a8:	099b      	lsrs	r3, r3, #6
    55aa:	0e12      	lsrs	r2, r2, #24
    55ac:	0fc9      	lsrs	r1, r1, #31
    55ae:	0980      	lsrs	r0, r0, #6
    55b0:	2aff      	cmp	r2, #255	; 0xff
    55b2:	d023      	beq.n	55fc <__aeabi_fsub+0x68>
    55b4:	2701      	movs	r7, #1
    55b6:	4079      	eors	r1, r7
    55b8:	1aaf      	subs	r7, r5, r2
    55ba:	428c      	cmp	r4, r1
    55bc:	d00f      	beq.n	55de <__aeabi_fsub+0x4a>
    55be:	2f00      	cmp	r7, #0
    55c0:	dc00      	bgt.n	55c4 <__aeabi_fsub+0x30>
    55c2:	e15d      	b.n	5880 <__aeabi_fsub+0x2ec>
    55c4:	2a00      	cmp	r2, #0
    55c6:	d12f      	bne.n	5628 <__aeabi_fsub+0x94>
    55c8:	2800      	cmp	r0, #0
    55ca:	d100      	bne.n	55ce <__aeabi_fsub+0x3a>
    55cc:	e090      	b.n	56f0 <__aeabi_fsub+0x15c>
    55ce:	1e7a      	subs	r2, r7, #1
    55d0:	2f01      	cmp	r7, #1
    55d2:	d100      	bne.n	55d6 <__aeabi_fsub+0x42>
    55d4:	e11a      	b.n	580c <__aeabi_fsub+0x278>
    55d6:	2fff      	cmp	r7, #255	; 0xff
    55d8:	d01c      	beq.n	5614 <__aeabi_fsub+0x80>
    55da:	0017      	movs	r7, r2
    55dc:	e029      	b.n	5632 <__aeabi_fsub+0x9e>
    55de:	2f00      	cmp	r7, #0
    55e0:	dc00      	bgt.n	55e4 <__aeabi_fsub+0x50>
    55e2:	e159      	b.n	5898 <__aeabi_fsub+0x304>
    55e4:	2a00      	cmp	r2, #0
    55e6:	d052      	beq.n	568e <__aeabi_fsub+0xfa>
    55e8:	2dff      	cmp	r5, #255	; 0xff
    55ea:	d013      	beq.n	5614 <__aeabi_fsub+0x80>
    55ec:	2280      	movs	r2, #128	; 0x80
    55ee:	04d2      	lsls	r2, r2, #19
    55f0:	4310      	orrs	r0, r2
    55f2:	2f1b      	cmp	r7, #27
    55f4:	dc00      	bgt.n	55f8 <__aeabi_fsub+0x64>
    55f6:	e06a      	b.n	56ce <__aeabi_fsub+0x13a>
    55f8:	3301      	adds	r3, #1
    55fa:	e02b      	b.n	5654 <__aeabi_fsub+0xc0>
    55fc:	2800      	cmp	r0, #0
    55fe:	d03b      	beq.n	5678 <__aeabi_fsub+0xe4>
    5600:	428c      	cmp	r4, r1
    5602:	d04d      	beq.n	56a0 <__aeabi_fsub+0x10c>
    5604:	2dff      	cmp	r5, #255	; 0xff
    5606:	d100      	bne.n	560a <__aeabi_fsub+0x76>
    5608:	e08f      	b.n	572a <__aeabi_fsub+0x196>
    560a:	2d00      	cmp	r5, #0
    560c:	d100      	bne.n	5610 <__aeabi_fsub+0x7c>
    560e:	e0ab      	b.n	5768 <__aeabi_fsub+0x1d4>
    5610:	000c      	movs	r4, r1
    5612:	0003      	movs	r3, r0
    5614:	08db      	lsrs	r3, r3, #3
    5616:	2b00      	cmp	r3, #0
    5618:	d067      	beq.n	56ea <__aeabi_fsub+0x156>
    561a:	2280      	movs	r2, #128	; 0x80
    561c:	03d2      	lsls	r2, r2, #15
    561e:	4313      	orrs	r3, r2
    5620:	025b      	lsls	r3, r3, #9
    5622:	20ff      	movs	r0, #255	; 0xff
    5624:	0a5b      	lsrs	r3, r3, #9
    5626:	e022      	b.n	566e <__aeabi_fsub+0xda>
    5628:	2dff      	cmp	r5, #255	; 0xff
    562a:	d0f3      	beq.n	5614 <__aeabi_fsub+0x80>
    562c:	2280      	movs	r2, #128	; 0x80
    562e:	04d2      	lsls	r2, r2, #19
    5630:	4310      	orrs	r0, r2
    5632:	2201      	movs	r2, #1
    5634:	2f1b      	cmp	r7, #27
    5636:	dc07      	bgt.n	5648 <__aeabi_fsub+0xb4>
    5638:	2120      	movs	r1, #32
    563a:	1bc9      	subs	r1, r1, r7
    563c:	0002      	movs	r2, r0
    563e:	4088      	lsls	r0, r1
    5640:	40fa      	lsrs	r2, r7
    5642:	1e41      	subs	r1, r0, #1
    5644:	4188      	sbcs	r0, r1
    5646:	4302      	orrs	r2, r0
    5648:	1a9b      	subs	r3, r3, r2
    564a:	015a      	lsls	r2, r3, #5
    564c:	d456      	bmi.n	56fc <__aeabi_fsub+0x168>
    564e:	2207      	movs	r2, #7
    5650:	401a      	ands	r2, r3
    5652:	d04e      	beq.n	56f2 <__aeabi_fsub+0x15e>
    5654:	220f      	movs	r2, #15
    5656:	401a      	ands	r2, r3
    5658:	2a04      	cmp	r2, #4
    565a:	d000      	beq.n	565e <__aeabi_fsub+0xca>
    565c:	3304      	adds	r3, #4
    565e:	015a      	lsls	r2, r3, #5
    5660:	d547      	bpl.n	56f2 <__aeabi_fsub+0x15e>
    5662:	1c68      	adds	r0, r5, #1
    5664:	2dfe      	cmp	r5, #254	; 0xfe
    5666:	d040      	beq.n	56ea <__aeabi_fsub+0x156>
    5668:	019b      	lsls	r3, r3, #6
    566a:	0a5b      	lsrs	r3, r3, #9
    566c:	b2c0      	uxtb	r0, r0
    566e:	05c0      	lsls	r0, r0, #23
    5670:	4318      	orrs	r0, r3
    5672:	07e4      	lsls	r4, r4, #31
    5674:	4320      	orrs	r0, r4
    5676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5678:	2701      	movs	r7, #1
    567a:	4079      	eors	r1, r7
    567c:	428c      	cmp	r4, r1
    567e:	d1c1      	bne.n	5604 <__aeabi_fsub+0x70>
    5680:	2dff      	cmp	r5, #255	; 0xff
    5682:	d010      	beq.n	56a6 <__aeabi_fsub+0x112>
    5684:	2d00      	cmp	r5, #0
    5686:	d100      	bne.n	568a <__aeabi_fsub+0xf6>
    5688:	e0e7      	b.n	585a <__aeabi_fsub+0x2c6>
    568a:	2300      	movs	r3, #0
    568c:	e7c2      	b.n	5614 <__aeabi_fsub+0x80>
    568e:	2800      	cmp	r0, #0
    5690:	d02e      	beq.n	56f0 <__aeabi_fsub+0x15c>
    5692:	1e7a      	subs	r2, r7, #1
    5694:	2f01      	cmp	r7, #1
    5696:	d07f      	beq.n	5798 <__aeabi_fsub+0x204>
    5698:	2fff      	cmp	r7, #255	; 0xff
    569a:	d0bb      	beq.n	5614 <__aeabi_fsub+0x80>
    569c:	0017      	movs	r7, r2
    569e:	e7a8      	b.n	55f2 <__aeabi_fsub+0x5e>
    56a0:	2dff      	cmp	r5, #255	; 0xff
    56a2:	d000      	beq.n	56a6 <__aeabi_fsub+0x112>
    56a4:	e083      	b.n	57ae <__aeabi_fsub+0x21a>
    56a6:	27fe      	movs	r7, #254	; 0xfe
    56a8:	1c6a      	adds	r2, r5, #1
    56aa:	4217      	tst	r7, r2
    56ac:	d000      	beq.n	56b0 <__aeabi_fsub+0x11c>
    56ae:	e08d      	b.n	57cc <__aeabi_fsub+0x238>
    56b0:	2d00      	cmp	r5, #0
    56b2:	d000      	beq.n	56b6 <__aeabi_fsub+0x122>
    56b4:	e0ad      	b.n	5812 <__aeabi_fsub+0x27e>
    56b6:	2b00      	cmp	r3, #0
    56b8:	d100      	bne.n	56bc <__aeabi_fsub+0x128>
    56ba:	e0d2      	b.n	5862 <__aeabi_fsub+0x2ce>
    56bc:	2800      	cmp	r0, #0
    56be:	d000      	beq.n	56c2 <__aeabi_fsub+0x12e>
    56c0:	e0d1      	b.n	5866 <__aeabi_fsub+0x2d2>
    56c2:	2500      	movs	r5, #0
    56c4:	08db      	lsrs	r3, r3, #3
    56c6:	025b      	lsls	r3, r3, #9
    56c8:	0a5b      	lsrs	r3, r3, #9
    56ca:	b2e8      	uxtb	r0, r5
    56cc:	e7cf      	b.n	566e <__aeabi_fsub+0xda>
    56ce:	2120      	movs	r1, #32
    56d0:	1bc9      	subs	r1, r1, r7
    56d2:	0002      	movs	r2, r0
    56d4:	4088      	lsls	r0, r1
    56d6:	40fa      	lsrs	r2, r7
    56d8:	1e41      	subs	r1, r0, #1
    56da:	4188      	sbcs	r0, r1
    56dc:	4310      	orrs	r0, r2
    56de:	181b      	adds	r3, r3, r0
    56e0:	015a      	lsls	r2, r3, #5
    56e2:	d5b4      	bpl.n	564e <__aeabi_fsub+0xba>
    56e4:	3501      	adds	r5, #1
    56e6:	2dff      	cmp	r5, #255	; 0xff
    56e8:	d15a      	bne.n	57a0 <__aeabi_fsub+0x20c>
    56ea:	20ff      	movs	r0, #255	; 0xff
    56ec:	2300      	movs	r3, #0
    56ee:	e7be      	b.n	566e <__aeabi_fsub+0xda>
    56f0:	003d      	movs	r5, r7
    56f2:	08db      	lsrs	r3, r3, #3
    56f4:	2dff      	cmp	r5, #255	; 0xff
    56f6:	d100      	bne.n	56fa <__aeabi_fsub+0x166>
    56f8:	e78d      	b.n	5616 <__aeabi_fsub+0x82>
    56fa:	e7e4      	b.n	56c6 <__aeabi_fsub+0x132>
    56fc:	019e      	lsls	r6, r3, #6
    56fe:	09b6      	lsrs	r6, r6, #6
    5700:	0030      	movs	r0, r6
    5702:	f000 f987 	bl	5a14 <__clzsi2>
    5706:	3805      	subs	r0, #5
    5708:	4086      	lsls	r6, r0
    570a:	4285      	cmp	r5, r0
    570c:	dc1f      	bgt.n	574e <__aeabi_fsub+0x1ba>
    570e:	2220      	movs	r2, #32
    5710:	1b40      	subs	r0, r0, r5
    5712:	3001      	adds	r0, #1
    5714:	1a12      	subs	r2, r2, r0
    5716:	0033      	movs	r3, r6
    5718:	4096      	lsls	r6, r2
    571a:	40c3      	lsrs	r3, r0
    571c:	1e72      	subs	r2, r6, #1
    571e:	4196      	sbcs	r6, r2
    5720:	2500      	movs	r5, #0
    5722:	4333      	orrs	r3, r6
    5724:	075a      	lsls	r2, r3, #29
    5726:	d195      	bne.n	5654 <__aeabi_fsub+0xc0>
    5728:	e799      	b.n	565e <__aeabi_fsub+0xca>
    572a:	27fe      	movs	r7, #254	; 0xfe
    572c:	1c6a      	adds	r2, r5, #1
    572e:	4217      	tst	r7, r2
    5730:	d111      	bne.n	5756 <__aeabi_fsub+0x1c2>
    5732:	2d00      	cmp	r5, #0
    5734:	d15a      	bne.n	57ec <__aeabi_fsub+0x258>
    5736:	2b00      	cmp	r3, #0
    5738:	d100      	bne.n	573c <__aeabi_fsub+0x1a8>
    573a:	e089      	b.n	5850 <__aeabi_fsub+0x2bc>
    573c:	2800      	cmp	r0, #0
    573e:	d0c0      	beq.n	56c2 <__aeabi_fsub+0x12e>
    5740:	1a1a      	subs	r2, r3, r0
    5742:	0156      	lsls	r6, r2, #5
    5744:	d400      	bmi.n	5748 <__aeabi_fsub+0x1b4>
    5746:	e096      	b.n	5876 <__aeabi_fsub+0x2e2>
    5748:	000c      	movs	r4, r1
    574a:	1ac3      	subs	r3, r0, r3
    574c:	e7ea      	b.n	5724 <__aeabi_fsub+0x190>
    574e:	4b58      	ldr	r3, [pc, #352]	; (58b0 <__aeabi_fsub+0x31c>)
    5750:	1a2d      	subs	r5, r5, r0
    5752:	4033      	ands	r3, r6
    5754:	e7e6      	b.n	5724 <__aeabi_fsub+0x190>
    5756:	1a1e      	subs	r6, r3, r0
    5758:	0172      	lsls	r2, r6, #5
    575a:	d444      	bmi.n	57e6 <__aeabi_fsub+0x252>
    575c:	2e00      	cmp	r6, #0
    575e:	d1cf      	bne.n	5700 <__aeabi_fsub+0x16c>
    5760:	2400      	movs	r4, #0
    5762:	2000      	movs	r0, #0
    5764:	2300      	movs	r3, #0
    5766:	e782      	b.n	566e <__aeabi_fsub+0xda>
    5768:	25ff      	movs	r5, #255	; 0xff
    576a:	2b00      	cmp	r3, #0
    576c:	d038      	beq.n	57e0 <__aeabi_fsub+0x24c>
    576e:	1e6e      	subs	r6, r5, #1
    5770:	2d01      	cmp	r5, #1
    5772:	d06a      	beq.n	584a <__aeabi_fsub+0x2b6>
    5774:	2dff      	cmp	r5, #255	; 0xff
    5776:	d100      	bne.n	577a <__aeabi_fsub+0x1e6>
    5778:	e74a      	b.n	5610 <__aeabi_fsub+0x7c>
    577a:	2401      	movs	r4, #1
    577c:	2e1b      	cmp	r6, #27
    577e:	dc07      	bgt.n	5790 <__aeabi_fsub+0x1fc>
    5780:	2520      	movs	r5, #32
    5782:	1bad      	subs	r5, r5, r6
    5784:	001c      	movs	r4, r3
    5786:	40ab      	lsls	r3, r5
    5788:	40f4      	lsrs	r4, r6
    578a:	1e5d      	subs	r5, r3, #1
    578c:	41ab      	sbcs	r3, r5
    578e:	431c      	orrs	r4, r3
    5790:	1b03      	subs	r3, r0, r4
    5792:	0015      	movs	r5, r2
    5794:	000c      	movs	r4, r1
    5796:	e758      	b.n	564a <__aeabi_fsub+0xb6>
    5798:	181b      	adds	r3, r3, r0
    579a:	2502      	movs	r5, #2
    579c:	015a      	lsls	r2, r3, #5
    579e:	d533      	bpl.n	5808 <__aeabi_fsub+0x274>
    57a0:	2201      	movs	r2, #1
    57a2:	4944      	ldr	r1, [pc, #272]	; (58b4 <__aeabi_fsub+0x320>)
    57a4:	401a      	ands	r2, r3
    57a6:	085b      	lsrs	r3, r3, #1
    57a8:	400b      	ands	r3, r1
    57aa:	4313      	orrs	r3, r2
    57ac:	e7ba      	b.n	5724 <__aeabi_fsub+0x190>
    57ae:	2d00      	cmp	r5, #0
    57b0:	d131      	bne.n	5816 <__aeabi_fsub+0x282>
    57b2:	35ff      	adds	r5, #255	; 0xff
    57b4:	2b00      	cmp	r3, #0
    57b6:	d052      	beq.n	585e <__aeabi_fsub+0x2ca>
    57b8:	1e69      	subs	r1, r5, #1
    57ba:	2d01      	cmp	r5, #1
    57bc:	d020      	beq.n	5800 <__aeabi_fsub+0x26c>
    57be:	2dff      	cmp	r5, #255	; 0xff
    57c0:	d029      	beq.n	5816 <__aeabi_fsub+0x282>
    57c2:	291b      	cmp	r1, #27
    57c4:	dd36      	ble.n	5834 <__aeabi_fsub+0x2a0>
    57c6:	0015      	movs	r5, r2
    57c8:	1c43      	adds	r3, r0, #1
    57ca:	e743      	b.n	5654 <__aeabi_fsub+0xc0>
    57cc:	2aff      	cmp	r2, #255	; 0xff
    57ce:	d08c      	beq.n	56ea <__aeabi_fsub+0x156>
    57d0:	181b      	adds	r3, r3, r0
    57d2:	085b      	lsrs	r3, r3, #1
    57d4:	0015      	movs	r5, r2
    57d6:	075a      	lsls	r2, r3, #29
    57d8:	d000      	beq.n	57dc <__aeabi_fsub+0x248>
    57da:	e73b      	b.n	5654 <__aeabi_fsub+0xc0>
    57dc:	08db      	lsrs	r3, r3, #3
    57de:	e772      	b.n	56c6 <__aeabi_fsub+0x132>
    57e0:	000c      	movs	r4, r1
    57e2:	0003      	movs	r3, r0
    57e4:	e785      	b.n	56f2 <__aeabi_fsub+0x15e>
    57e6:	000c      	movs	r4, r1
    57e8:	1ac6      	subs	r6, r0, r3
    57ea:	e789      	b.n	5700 <__aeabi_fsub+0x16c>
    57ec:	2b00      	cmp	r3, #0
    57ee:	d114      	bne.n	581a <__aeabi_fsub+0x286>
    57f0:	2800      	cmp	r0, #0
    57f2:	d000      	beq.n	57f6 <__aeabi_fsub+0x262>
    57f4:	e70c      	b.n	5610 <__aeabi_fsub+0x7c>
    57f6:	2380      	movs	r3, #128	; 0x80
    57f8:	2400      	movs	r4, #0
    57fa:	20ff      	movs	r0, #255	; 0xff
    57fc:	03db      	lsls	r3, r3, #15
    57fe:	e736      	b.n	566e <__aeabi_fsub+0xda>
    5800:	181b      	adds	r3, r3, r0
    5802:	3501      	adds	r5, #1
    5804:	015a      	lsls	r2, r3, #5
    5806:	d4cb      	bmi.n	57a0 <__aeabi_fsub+0x20c>
    5808:	3d01      	subs	r5, #1
    580a:	e720      	b.n	564e <__aeabi_fsub+0xba>
    580c:	2501      	movs	r5, #1
    580e:	1a1b      	subs	r3, r3, r0
    5810:	e71b      	b.n	564a <__aeabi_fsub+0xb6>
    5812:	2b00      	cmp	r3, #0
    5814:	d101      	bne.n	581a <__aeabi_fsub+0x286>
    5816:	0003      	movs	r3, r0
    5818:	e6fc      	b.n	5614 <__aeabi_fsub+0x80>
    581a:	2800      	cmp	r0, #0
    581c:	d100      	bne.n	5820 <__aeabi_fsub+0x28c>
    581e:	e6f9      	b.n	5614 <__aeabi_fsub+0x80>
    5820:	2280      	movs	r2, #128	; 0x80
    5822:	03d2      	lsls	r2, r2, #15
    5824:	4296      	cmp	r6, r2
    5826:	d303      	bcc.n	5830 <__aeabi_fsub+0x29c>
    5828:	4594      	cmp	ip, r2
    582a:	d201      	bcs.n	5830 <__aeabi_fsub+0x29c>
    582c:	000c      	movs	r4, r1
    582e:	0003      	movs	r3, r0
    5830:	08db      	lsrs	r3, r3, #3
    5832:	e6f2      	b.n	561a <__aeabi_fsub+0x86>
    5834:	001d      	movs	r5, r3
    5836:	2620      	movs	r6, #32
    5838:	40cd      	lsrs	r5, r1
    583a:	1a71      	subs	r1, r6, r1
    583c:	408b      	lsls	r3, r1
    583e:	1e59      	subs	r1, r3, #1
    5840:	418b      	sbcs	r3, r1
    5842:	432b      	orrs	r3, r5
    5844:	181b      	adds	r3, r3, r0
    5846:	0015      	movs	r5, r2
    5848:	e74a      	b.n	56e0 <__aeabi_fsub+0x14c>
    584a:	000c      	movs	r4, r1
    584c:	1ac3      	subs	r3, r0, r3
    584e:	e6fc      	b.n	564a <__aeabi_fsub+0xb6>
    5850:	2800      	cmp	r0, #0
    5852:	d085      	beq.n	5760 <__aeabi_fsub+0x1cc>
    5854:	000c      	movs	r4, r1
    5856:	0003      	movs	r3, r0
    5858:	e733      	b.n	56c2 <__aeabi_fsub+0x12e>
    585a:	25ff      	movs	r5, #255	; 0xff
    585c:	e7aa      	b.n	57b4 <__aeabi_fsub+0x220>
    585e:	0003      	movs	r3, r0
    5860:	e747      	b.n	56f2 <__aeabi_fsub+0x15e>
    5862:	0003      	movs	r3, r0
    5864:	e72d      	b.n	56c2 <__aeabi_fsub+0x12e>
    5866:	181b      	adds	r3, r3, r0
    5868:	015a      	lsls	r2, r3, #5
    586a:	d5b7      	bpl.n	57dc <__aeabi_fsub+0x248>
    586c:	4a10      	ldr	r2, [pc, #64]	; (58b0 <__aeabi_fsub+0x31c>)
    586e:	3501      	adds	r5, #1
    5870:	4013      	ands	r3, r2
    5872:	08db      	lsrs	r3, r3, #3
    5874:	e727      	b.n	56c6 <__aeabi_fsub+0x132>
    5876:	1e13      	subs	r3, r2, #0
    5878:	d100      	bne.n	587c <__aeabi_fsub+0x2e8>
    587a:	e771      	b.n	5760 <__aeabi_fsub+0x1cc>
    587c:	08db      	lsrs	r3, r3, #3
    587e:	e722      	b.n	56c6 <__aeabi_fsub+0x132>
    5880:	2f00      	cmp	r7, #0
    5882:	d100      	bne.n	5886 <__aeabi_fsub+0x2f2>
    5884:	e751      	b.n	572a <__aeabi_fsub+0x196>
    5886:	1b56      	subs	r6, r2, r5
    5888:	2d00      	cmp	r5, #0
    588a:	d101      	bne.n	5890 <__aeabi_fsub+0x2fc>
    588c:	0035      	movs	r5, r6
    588e:	e76c      	b.n	576a <__aeabi_fsub+0x1d6>
    5890:	2480      	movs	r4, #128	; 0x80
    5892:	04e4      	lsls	r4, r4, #19
    5894:	4323      	orrs	r3, r4
    5896:	e770      	b.n	577a <__aeabi_fsub+0x1e6>
    5898:	2f00      	cmp	r7, #0
    589a:	d100      	bne.n	589e <__aeabi_fsub+0x30a>
    589c:	e703      	b.n	56a6 <__aeabi_fsub+0x112>
    589e:	1b51      	subs	r1, r2, r5
    58a0:	2d00      	cmp	r5, #0
    58a2:	d101      	bne.n	58a8 <__aeabi_fsub+0x314>
    58a4:	000d      	movs	r5, r1
    58a6:	e785      	b.n	57b4 <__aeabi_fsub+0x220>
    58a8:	2580      	movs	r5, #128	; 0x80
    58aa:	04ed      	lsls	r5, r5, #19
    58ac:	432b      	orrs	r3, r5
    58ae:	e788      	b.n	57c2 <__aeabi_fsub+0x22e>
    58b0:	fbffffff 	.word	0xfbffffff
    58b4:	7dffffff 	.word	0x7dffffff

000058b8 <__aeabi_f2iz>:
    58b8:	0241      	lsls	r1, r0, #9
    58ba:	0042      	lsls	r2, r0, #1
    58bc:	0fc3      	lsrs	r3, r0, #31
    58be:	0a49      	lsrs	r1, r1, #9
    58c0:	2000      	movs	r0, #0
    58c2:	0e12      	lsrs	r2, r2, #24
    58c4:	2a7e      	cmp	r2, #126	; 0x7e
    58c6:	dd03      	ble.n	58d0 <__aeabi_f2iz+0x18>
    58c8:	2a9d      	cmp	r2, #157	; 0x9d
    58ca:	dd02      	ble.n	58d2 <__aeabi_f2iz+0x1a>
    58cc:	4a09      	ldr	r2, [pc, #36]	; (58f4 <__aeabi_f2iz+0x3c>)
    58ce:	1898      	adds	r0, r3, r2
    58d0:	4770      	bx	lr
    58d2:	2080      	movs	r0, #128	; 0x80
    58d4:	0400      	lsls	r0, r0, #16
    58d6:	4301      	orrs	r1, r0
    58d8:	2a95      	cmp	r2, #149	; 0x95
    58da:	dc07      	bgt.n	58ec <__aeabi_f2iz+0x34>
    58dc:	2096      	movs	r0, #150	; 0x96
    58de:	1a82      	subs	r2, r0, r2
    58e0:	40d1      	lsrs	r1, r2
    58e2:	4248      	negs	r0, r1
    58e4:	2b00      	cmp	r3, #0
    58e6:	d1f3      	bne.n	58d0 <__aeabi_f2iz+0x18>
    58e8:	0008      	movs	r0, r1
    58ea:	e7f1      	b.n	58d0 <__aeabi_f2iz+0x18>
    58ec:	3a96      	subs	r2, #150	; 0x96
    58ee:	4091      	lsls	r1, r2
    58f0:	e7f7      	b.n	58e2 <__aeabi_f2iz+0x2a>
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	7fffffff 	.word	0x7fffffff

000058f8 <__aeabi_i2f>:
    58f8:	b570      	push	{r4, r5, r6, lr}
    58fa:	2800      	cmp	r0, #0
    58fc:	d013      	beq.n	5926 <__aeabi_i2f+0x2e>
    58fe:	17c3      	asrs	r3, r0, #31
    5900:	18c5      	adds	r5, r0, r3
    5902:	405d      	eors	r5, r3
    5904:	0fc4      	lsrs	r4, r0, #31
    5906:	0028      	movs	r0, r5
    5908:	f000 f884 	bl	5a14 <__clzsi2>
    590c:	239e      	movs	r3, #158	; 0x9e
    590e:	0001      	movs	r1, r0
    5910:	1a1b      	subs	r3, r3, r0
    5912:	2b96      	cmp	r3, #150	; 0x96
    5914:	dc0f      	bgt.n	5936 <__aeabi_i2f+0x3e>
    5916:	2808      	cmp	r0, #8
    5918:	d034      	beq.n	5984 <__aeabi_i2f+0x8c>
    591a:	3908      	subs	r1, #8
    591c:	408d      	lsls	r5, r1
    591e:	026d      	lsls	r5, r5, #9
    5920:	0a6d      	lsrs	r5, r5, #9
    5922:	b2d8      	uxtb	r0, r3
    5924:	e002      	b.n	592c <__aeabi_i2f+0x34>
    5926:	2400      	movs	r4, #0
    5928:	2000      	movs	r0, #0
    592a:	2500      	movs	r5, #0
    592c:	05c0      	lsls	r0, r0, #23
    592e:	4328      	orrs	r0, r5
    5930:	07e4      	lsls	r4, r4, #31
    5932:	4320      	orrs	r0, r4
    5934:	bd70      	pop	{r4, r5, r6, pc}
    5936:	2b99      	cmp	r3, #153	; 0x99
    5938:	dc16      	bgt.n	5968 <__aeabi_i2f+0x70>
    593a:	1f42      	subs	r2, r0, #5
    593c:	2805      	cmp	r0, #5
    593e:	d000      	beq.n	5942 <__aeabi_i2f+0x4a>
    5940:	4095      	lsls	r5, r2
    5942:	002a      	movs	r2, r5
    5944:	4811      	ldr	r0, [pc, #68]	; (598c <__aeabi_i2f+0x94>)
    5946:	4002      	ands	r2, r0
    5948:	076e      	lsls	r6, r5, #29
    594a:	d009      	beq.n	5960 <__aeabi_i2f+0x68>
    594c:	260f      	movs	r6, #15
    594e:	4035      	ands	r5, r6
    5950:	2d04      	cmp	r5, #4
    5952:	d005      	beq.n	5960 <__aeabi_i2f+0x68>
    5954:	3204      	adds	r2, #4
    5956:	0155      	lsls	r5, r2, #5
    5958:	d502      	bpl.n	5960 <__aeabi_i2f+0x68>
    595a:	239f      	movs	r3, #159	; 0x9f
    595c:	4002      	ands	r2, r0
    595e:	1a5b      	subs	r3, r3, r1
    5960:	0192      	lsls	r2, r2, #6
    5962:	0a55      	lsrs	r5, r2, #9
    5964:	b2d8      	uxtb	r0, r3
    5966:	e7e1      	b.n	592c <__aeabi_i2f+0x34>
    5968:	2205      	movs	r2, #5
    596a:	1a12      	subs	r2, r2, r0
    596c:	0028      	movs	r0, r5
    596e:	40d0      	lsrs	r0, r2
    5970:	0002      	movs	r2, r0
    5972:	0008      	movs	r0, r1
    5974:	301b      	adds	r0, #27
    5976:	4085      	lsls	r5, r0
    5978:	0028      	movs	r0, r5
    597a:	1e45      	subs	r5, r0, #1
    597c:	41a8      	sbcs	r0, r5
    597e:	4302      	orrs	r2, r0
    5980:	0015      	movs	r5, r2
    5982:	e7de      	b.n	5942 <__aeabi_i2f+0x4a>
    5984:	026d      	lsls	r5, r5, #9
    5986:	2096      	movs	r0, #150	; 0x96
    5988:	0a6d      	lsrs	r5, r5, #9
    598a:	e7cf      	b.n	592c <__aeabi_i2f+0x34>
    598c:	fbffffff 	.word	0xfbffffff

00005990 <__aeabi_ui2f>:
    5990:	b570      	push	{r4, r5, r6, lr}
    5992:	1e04      	subs	r4, r0, #0
    5994:	d00e      	beq.n	59b4 <__aeabi_ui2f+0x24>
    5996:	f000 f83d 	bl	5a14 <__clzsi2>
    599a:	239e      	movs	r3, #158	; 0x9e
    599c:	0001      	movs	r1, r0
    599e:	1a1b      	subs	r3, r3, r0
    59a0:	2b96      	cmp	r3, #150	; 0x96
    59a2:	dc0c      	bgt.n	59be <__aeabi_ui2f+0x2e>
    59a4:	2808      	cmp	r0, #8
    59a6:	d02f      	beq.n	5a08 <__aeabi_ui2f+0x78>
    59a8:	3908      	subs	r1, #8
    59aa:	408c      	lsls	r4, r1
    59ac:	0264      	lsls	r4, r4, #9
    59ae:	0a64      	lsrs	r4, r4, #9
    59b0:	b2d8      	uxtb	r0, r3
    59b2:	e001      	b.n	59b8 <__aeabi_ui2f+0x28>
    59b4:	2000      	movs	r0, #0
    59b6:	2400      	movs	r4, #0
    59b8:	05c0      	lsls	r0, r0, #23
    59ba:	4320      	orrs	r0, r4
    59bc:	bd70      	pop	{r4, r5, r6, pc}
    59be:	2b99      	cmp	r3, #153	; 0x99
    59c0:	dc16      	bgt.n	59f0 <__aeabi_ui2f+0x60>
    59c2:	1f42      	subs	r2, r0, #5
    59c4:	2805      	cmp	r0, #5
    59c6:	d000      	beq.n	59ca <__aeabi_ui2f+0x3a>
    59c8:	4094      	lsls	r4, r2
    59ca:	0022      	movs	r2, r4
    59cc:	4810      	ldr	r0, [pc, #64]	; (5a10 <__aeabi_ui2f+0x80>)
    59ce:	4002      	ands	r2, r0
    59d0:	0765      	lsls	r5, r4, #29
    59d2:	d009      	beq.n	59e8 <__aeabi_ui2f+0x58>
    59d4:	250f      	movs	r5, #15
    59d6:	402c      	ands	r4, r5
    59d8:	2c04      	cmp	r4, #4
    59da:	d005      	beq.n	59e8 <__aeabi_ui2f+0x58>
    59dc:	3204      	adds	r2, #4
    59de:	0154      	lsls	r4, r2, #5
    59e0:	d502      	bpl.n	59e8 <__aeabi_ui2f+0x58>
    59e2:	239f      	movs	r3, #159	; 0x9f
    59e4:	4002      	ands	r2, r0
    59e6:	1a5b      	subs	r3, r3, r1
    59e8:	0192      	lsls	r2, r2, #6
    59ea:	0a54      	lsrs	r4, r2, #9
    59ec:	b2d8      	uxtb	r0, r3
    59ee:	e7e3      	b.n	59b8 <__aeabi_ui2f+0x28>
    59f0:	0002      	movs	r2, r0
    59f2:	0020      	movs	r0, r4
    59f4:	321b      	adds	r2, #27
    59f6:	4090      	lsls	r0, r2
    59f8:	0002      	movs	r2, r0
    59fa:	1e50      	subs	r0, r2, #1
    59fc:	4182      	sbcs	r2, r0
    59fe:	2005      	movs	r0, #5
    5a00:	1a40      	subs	r0, r0, r1
    5a02:	40c4      	lsrs	r4, r0
    5a04:	4314      	orrs	r4, r2
    5a06:	e7e0      	b.n	59ca <__aeabi_ui2f+0x3a>
    5a08:	0264      	lsls	r4, r4, #9
    5a0a:	2096      	movs	r0, #150	; 0x96
    5a0c:	0a64      	lsrs	r4, r4, #9
    5a0e:	e7d3      	b.n	59b8 <__aeabi_ui2f+0x28>
    5a10:	fbffffff 	.word	0xfbffffff

00005a14 <__clzsi2>:
    5a14:	211c      	movs	r1, #28
    5a16:	2301      	movs	r3, #1
    5a18:	041b      	lsls	r3, r3, #16
    5a1a:	4298      	cmp	r0, r3
    5a1c:	d301      	bcc.n	5a22 <__clzsi2+0xe>
    5a1e:	0c00      	lsrs	r0, r0, #16
    5a20:	3910      	subs	r1, #16
    5a22:	0a1b      	lsrs	r3, r3, #8
    5a24:	4298      	cmp	r0, r3
    5a26:	d301      	bcc.n	5a2c <__clzsi2+0x18>
    5a28:	0a00      	lsrs	r0, r0, #8
    5a2a:	3908      	subs	r1, #8
    5a2c:	091b      	lsrs	r3, r3, #4
    5a2e:	4298      	cmp	r0, r3
    5a30:	d301      	bcc.n	5a36 <__clzsi2+0x22>
    5a32:	0900      	lsrs	r0, r0, #4
    5a34:	3904      	subs	r1, #4
    5a36:	a202      	add	r2, pc, #8	; (adr r2, 5a40 <__clzsi2+0x2c>)
    5a38:	5c10      	ldrb	r0, [r2, r0]
    5a3a:	1840      	adds	r0, r0, r1
    5a3c:	4770      	bx	lr
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	02020304 	.word	0x02020304
    5a44:	01010101 	.word	0x01010101
	...

00005a50 <memset>:
    5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a52:	0005      	movs	r5, r0
    5a54:	0783      	lsls	r3, r0, #30
    5a56:	d049      	beq.n	5aec <memset+0x9c>
    5a58:	1e54      	subs	r4, r2, #1
    5a5a:	2a00      	cmp	r2, #0
    5a5c:	d045      	beq.n	5aea <memset+0x9a>
    5a5e:	0003      	movs	r3, r0
    5a60:	2603      	movs	r6, #3
    5a62:	b2ca      	uxtb	r2, r1
    5a64:	e002      	b.n	5a6c <memset+0x1c>
    5a66:	3501      	adds	r5, #1
    5a68:	3c01      	subs	r4, #1
    5a6a:	d33e      	bcc.n	5aea <memset+0x9a>
    5a6c:	3301      	adds	r3, #1
    5a6e:	702a      	strb	r2, [r5, #0]
    5a70:	4233      	tst	r3, r6
    5a72:	d1f8      	bne.n	5a66 <memset+0x16>
    5a74:	2c03      	cmp	r4, #3
    5a76:	d930      	bls.n	5ada <memset+0x8a>
    5a78:	22ff      	movs	r2, #255	; 0xff
    5a7a:	400a      	ands	r2, r1
    5a7c:	0215      	lsls	r5, r2, #8
    5a7e:	18ad      	adds	r5, r5, r2
    5a80:	042a      	lsls	r2, r5, #16
    5a82:	18ad      	adds	r5, r5, r2
    5a84:	2c0f      	cmp	r4, #15
    5a86:	d934      	bls.n	5af2 <memset+0xa2>
    5a88:	0027      	movs	r7, r4
    5a8a:	3f10      	subs	r7, #16
    5a8c:	093f      	lsrs	r7, r7, #4
    5a8e:	013e      	lsls	r6, r7, #4
    5a90:	46b4      	mov	ip, r6
    5a92:	001e      	movs	r6, r3
    5a94:	001a      	movs	r2, r3
    5a96:	3610      	adds	r6, #16
    5a98:	4466      	add	r6, ip
    5a9a:	6015      	str	r5, [r2, #0]
    5a9c:	6055      	str	r5, [r2, #4]
    5a9e:	6095      	str	r5, [r2, #8]
    5aa0:	60d5      	str	r5, [r2, #12]
    5aa2:	3210      	adds	r2, #16
    5aa4:	4296      	cmp	r6, r2
    5aa6:	d1f8      	bne.n	5a9a <memset+0x4a>
    5aa8:	3701      	adds	r7, #1
    5aaa:	013f      	lsls	r7, r7, #4
    5aac:	19db      	adds	r3, r3, r7
    5aae:	270f      	movs	r7, #15
    5ab0:	220c      	movs	r2, #12
    5ab2:	4027      	ands	r7, r4
    5ab4:	4022      	ands	r2, r4
    5ab6:	003c      	movs	r4, r7
    5ab8:	2a00      	cmp	r2, #0
    5aba:	d00e      	beq.n	5ada <memset+0x8a>
    5abc:	1f3e      	subs	r6, r7, #4
    5abe:	08b6      	lsrs	r6, r6, #2
    5ac0:	00b4      	lsls	r4, r6, #2
    5ac2:	46a4      	mov	ip, r4
    5ac4:	001a      	movs	r2, r3
    5ac6:	1d1c      	adds	r4, r3, #4
    5ac8:	4464      	add	r4, ip
    5aca:	c220      	stmia	r2!, {r5}
    5acc:	42a2      	cmp	r2, r4
    5ace:	d1fc      	bne.n	5aca <memset+0x7a>
    5ad0:	2403      	movs	r4, #3
    5ad2:	3601      	adds	r6, #1
    5ad4:	00b6      	lsls	r6, r6, #2
    5ad6:	199b      	adds	r3, r3, r6
    5ad8:	403c      	ands	r4, r7
    5ada:	2c00      	cmp	r4, #0
    5adc:	d005      	beq.n	5aea <memset+0x9a>
    5ade:	b2c9      	uxtb	r1, r1
    5ae0:	191c      	adds	r4, r3, r4
    5ae2:	7019      	strb	r1, [r3, #0]
    5ae4:	3301      	adds	r3, #1
    5ae6:	429c      	cmp	r4, r3
    5ae8:	d1fb      	bne.n	5ae2 <memset+0x92>
    5aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aec:	0003      	movs	r3, r0
    5aee:	0014      	movs	r4, r2
    5af0:	e7c0      	b.n	5a74 <memset+0x24>
    5af2:	0027      	movs	r7, r4
    5af4:	e7e2      	b.n	5abc <memset+0x6c>
    5af6:	46c0      	nop			; (mov r8, r8)

00005af8 <__libc_init_array>:
    5af8:	b570      	push	{r4, r5, r6, lr}
    5afa:	4b0d      	ldr	r3, [pc, #52]	; (5b30 <__libc_init_array+0x38>)
    5afc:	4d0d      	ldr	r5, [pc, #52]	; (5b34 <__libc_init_array+0x3c>)
    5afe:	1b5e      	subs	r6, r3, r5
    5b00:	10b6      	asrs	r6, r6, #2
    5b02:	42ab      	cmp	r3, r5
    5b04:	d005      	beq.n	5b12 <__libc_init_array+0x1a>
    5b06:	2400      	movs	r4, #0
    5b08:	cd08      	ldmia	r5!, {r3}
    5b0a:	3401      	adds	r4, #1
    5b0c:	4798      	blx	r3
    5b0e:	42a6      	cmp	r6, r4
    5b10:	d8fa      	bhi.n	5b08 <__libc_init_array+0x10>
    5b12:	f000 fc7d 	bl	6410 <_init>
    5b16:	4b08      	ldr	r3, [pc, #32]	; (5b38 <__libc_init_array+0x40>)
    5b18:	4d08      	ldr	r5, [pc, #32]	; (5b3c <__libc_init_array+0x44>)
    5b1a:	1b5e      	subs	r6, r3, r5
    5b1c:	10b6      	asrs	r6, r6, #2
    5b1e:	42ab      	cmp	r3, r5
    5b20:	d005      	beq.n	5b2e <__libc_init_array+0x36>
    5b22:	2400      	movs	r4, #0
    5b24:	cd08      	ldmia	r5!, {r3}
    5b26:	3401      	adds	r4, #1
    5b28:	4798      	blx	r3
    5b2a:	42a6      	cmp	r6, r4
    5b2c:	d8fa      	bhi.n	5b24 <__libc_init_array+0x2c>
    5b2e:	bd70      	pop	{r4, r5, r6, pc}
    5b30:	0000641c 	.word	0x0000641c
    5b34:	0000641c 	.word	0x0000641c
    5b38:	00006424 	.word	0x00006424
    5b3c:	0000641c 	.word	0x0000641c

00005b40 <__retarget_lock_acquire_recursive>:
    5b40:	4770      	bx	lr
    5b42:	46c0      	nop			; (mov r8, r8)

00005b44 <__retarget_lock_release_recursive>:
    5b44:	4770      	bx	lr
    5b46:	46c0      	nop			; (mov r8, r8)

00005b48 <memcpy>:
    5b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b4a:	0005      	movs	r5, r0
    5b4c:	2a0f      	cmp	r2, #15
    5b4e:	d933      	bls.n	5bb8 <memcpy+0x70>
    5b50:	2403      	movs	r4, #3
    5b52:	0003      	movs	r3, r0
    5b54:	0026      	movs	r6, r4
    5b56:	430b      	orrs	r3, r1
    5b58:	401e      	ands	r6, r3
    5b5a:	421c      	tst	r4, r3
    5b5c:	d137      	bne.n	5bce <memcpy+0x86>
    5b5e:	0015      	movs	r5, r2
    5b60:	3d10      	subs	r5, #16
    5b62:	092d      	lsrs	r5, r5, #4
    5b64:	0003      	movs	r3, r0
    5b66:	000c      	movs	r4, r1
    5b68:	46ac      	mov	ip, r5
    5b6a:	012f      	lsls	r7, r5, #4
    5b6c:	183f      	adds	r7, r7, r0
    5b6e:	6865      	ldr	r5, [r4, #4]
    5b70:	605d      	str	r5, [r3, #4]
    5b72:	68a5      	ldr	r5, [r4, #8]
    5b74:	609d      	str	r5, [r3, #8]
    5b76:	68e5      	ldr	r5, [r4, #12]
    5b78:	60dd      	str	r5, [r3, #12]
    5b7a:	6825      	ldr	r5, [r4, #0]
    5b7c:	3410      	adds	r4, #16
    5b7e:	601d      	str	r5, [r3, #0]
    5b80:	001d      	movs	r5, r3
    5b82:	3310      	adds	r3, #16
    5b84:	42bd      	cmp	r5, r7
    5b86:	d1f2      	bne.n	5b6e <memcpy+0x26>
    5b88:	4665      	mov	r5, ip
    5b8a:	230f      	movs	r3, #15
    5b8c:	240c      	movs	r4, #12
    5b8e:	3501      	adds	r5, #1
    5b90:	012d      	lsls	r5, r5, #4
    5b92:	1949      	adds	r1, r1, r5
    5b94:	4013      	ands	r3, r2
    5b96:	1945      	adds	r5, r0, r5
    5b98:	4214      	tst	r4, r2
    5b9a:	d01a      	beq.n	5bd2 <memcpy+0x8a>
    5b9c:	598c      	ldr	r4, [r1, r6]
    5b9e:	51ac      	str	r4, [r5, r6]
    5ba0:	3604      	adds	r6, #4
    5ba2:	1b9c      	subs	r4, r3, r6
    5ba4:	2c03      	cmp	r4, #3
    5ba6:	d8f9      	bhi.n	5b9c <memcpy+0x54>
    5ba8:	3b04      	subs	r3, #4
    5baa:	089b      	lsrs	r3, r3, #2
    5bac:	3301      	adds	r3, #1
    5bae:	009b      	lsls	r3, r3, #2
    5bb0:	18ed      	adds	r5, r5, r3
    5bb2:	18c9      	adds	r1, r1, r3
    5bb4:	2303      	movs	r3, #3
    5bb6:	401a      	ands	r2, r3
    5bb8:	1e56      	subs	r6, r2, #1
    5bba:	2a00      	cmp	r2, #0
    5bbc:	d006      	beq.n	5bcc <memcpy+0x84>
    5bbe:	2300      	movs	r3, #0
    5bc0:	5ccc      	ldrb	r4, [r1, r3]
    5bc2:	001a      	movs	r2, r3
    5bc4:	54ec      	strb	r4, [r5, r3]
    5bc6:	3301      	adds	r3, #1
    5bc8:	4296      	cmp	r6, r2
    5bca:	d1f9      	bne.n	5bc0 <memcpy+0x78>
    5bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bce:	1e56      	subs	r6, r2, #1
    5bd0:	e7f5      	b.n	5bbe <memcpy+0x76>
    5bd2:	001a      	movs	r2, r3
    5bd4:	e7f0      	b.n	5bb8 <memcpy+0x70>
    5bd6:	46c0      	nop			; (mov r8, r8)

00005bd8 <strlen>:
    5bd8:	b510      	push	{r4, lr}
    5bda:	0783      	lsls	r3, r0, #30
    5bdc:	d00a      	beq.n	5bf4 <strlen+0x1c>
    5bde:	0003      	movs	r3, r0
    5be0:	2103      	movs	r1, #3
    5be2:	e002      	b.n	5bea <strlen+0x12>
    5be4:	3301      	adds	r3, #1
    5be6:	420b      	tst	r3, r1
    5be8:	d005      	beq.n	5bf6 <strlen+0x1e>
    5bea:	781a      	ldrb	r2, [r3, #0]
    5bec:	2a00      	cmp	r2, #0
    5bee:	d1f9      	bne.n	5be4 <strlen+0xc>
    5bf0:	1a18      	subs	r0, r3, r0
    5bf2:	bd10      	pop	{r4, pc}
    5bf4:	0003      	movs	r3, r0
    5bf6:	6819      	ldr	r1, [r3, #0]
    5bf8:	4a0c      	ldr	r2, [pc, #48]	; (5c2c <strlen+0x54>)
    5bfa:	4c0d      	ldr	r4, [pc, #52]	; (5c30 <strlen+0x58>)
    5bfc:	188a      	adds	r2, r1, r2
    5bfe:	438a      	bics	r2, r1
    5c00:	4222      	tst	r2, r4
    5c02:	d10f      	bne.n	5c24 <strlen+0x4c>
    5c04:	6859      	ldr	r1, [r3, #4]
    5c06:	4a09      	ldr	r2, [pc, #36]	; (5c2c <strlen+0x54>)
    5c08:	3304      	adds	r3, #4
    5c0a:	188a      	adds	r2, r1, r2
    5c0c:	438a      	bics	r2, r1
    5c0e:	4222      	tst	r2, r4
    5c10:	d108      	bne.n	5c24 <strlen+0x4c>
    5c12:	6859      	ldr	r1, [r3, #4]
    5c14:	4a05      	ldr	r2, [pc, #20]	; (5c2c <strlen+0x54>)
    5c16:	3304      	adds	r3, #4
    5c18:	188a      	adds	r2, r1, r2
    5c1a:	438a      	bics	r2, r1
    5c1c:	4222      	tst	r2, r4
    5c1e:	d0f1      	beq.n	5c04 <strlen+0x2c>
    5c20:	e000      	b.n	5c24 <strlen+0x4c>
    5c22:	3301      	adds	r3, #1
    5c24:	781a      	ldrb	r2, [r3, #0]
    5c26:	2a00      	cmp	r2, #0
    5c28:	d1fb      	bne.n	5c22 <strlen+0x4a>
    5c2a:	e7e1      	b.n	5bf0 <strlen+0x18>
    5c2c:	fefefeff 	.word	0xfefefeff
    5c30:	80808080 	.word	0x80808080

00005c34 <register_fini>:
    5c34:	4b03      	ldr	r3, [pc, #12]	; (5c44 <register_fini+0x10>)
    5c36:	b510      	push	{r4, lr}
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d002      	beq.n	5c42 <register_fini+0xe>
    5c3c:	4802      	ldr	r0, [pc, #8]	; (5c48 <register_fini+0x14>)
    5c3e:	f000 f805 	bl	5c4c <atexit>
    5c42:	bd10      	pop	{r4, pc}
    5c44:	00000000 	.word	0x00000000
    5c48:	00005c5d 	.word	0x00005c5d

00005c4c <atexit>:
    5c4c:	b510      	push	{r4, lr}
    5c4e:	0001      	movs	r1, r0
    5c50:	2300      	movs	r3, #0
    5c52:	2200      	movs	r2, #0
    5c54:	2000      	movs	r0, #0
    5c56:	f000 f815 	bl	5c84 <__register_exitproc>
    5c5a:	bd10      	pop	{r4, pc}

00005c5c <__libc_fini_array>:
    5c5c:	b570      	push	{r4, r5, r6, lr}
    5c5e:	4c07      	ldr	r4, [pc, #28]	; (5c7c <__libc_fini_array+0x20>)
    5c60:	4d07      	ldr	r5, [pc, #28]	; (5c80 <__libc_fini_array+0x24>)
    5c62:	1b64      	subs	r4, r4, r5
    5c64:	10a4      	asrs	r4, r4, #2
    5c66:	d005      	beq.n	5c74 <__libc_fini_array+0x18>
    5c68:	3c01      	subs	r4, #1
    5c6a:	00a3      	lsls	r3, r4, #2
    5c6c:	58eb      	ldr	r3, [r5, r3]
    5c6e:	4798      	blx	r3
    5c70:	2c00      	cmp	r4, #0
    5c72:	d1f9      	bne.n	5c68 <__libc_fini_array+0xc>
    5c74:	f000 fbd6 	bl	6424 <_fini>
    5c78:	bd70      	pop	{r4, r5, r6, pc}
    5c7a:	46c0      	nop			; (mov r8, r8)
    5c7c:	00006434 	.word	0x00006434
    5c80:	00006430 	.word	0x00006430

00005c84 <__register_exitproc>:
    5c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c86:	46d6      	mov	lr, sl
    5c88:	464f      	mov	r7, r9
    5c8a:	4646      	mov	r6, r8
    5c8c:	4698      	mov	r8, r3
    5c8e:	4b22      	ldr	r3, [pc, #136]	; (5d18 <__register_exitproc+0x94>)
    5c90:	b5c0      	push	{r6, r7, lr}
    5c92:	0006      	movs	r6, r0
    5c94:	6818      	ldr	r0, [r3, #0]
    5c96:	4699      	mov	r9, r3
    5c98:	000f      	movs	r7, r1
    5c9a:	4692      	mov	sl, r2
    5c9c:	f7ff ff50 	bl	5b40 <__retarget_lock_acquire_recursive>
    5ca0:	4b1e      	ldr	r3, [pc, #120]	; (5d1c <__register_exitproc+0x98>)
    5ca2:	681d      	ldr	r5, [r3, #0]
    5ca4:	2d00      	cmp	r5, #0
    5ca6:	d02d      	beq.n	5d04 <__register_exitproc+0x80>
    5ca8:	686c      	ldr	r4, [r5, #4]
    5caa:	2c1f      	cmp	r4, #31
    5cac:	dc2d      	bgt.n	5d0a <__register_exitproc+0x86>
    5cae:	2e00      	cmp	r6, #0
    5cb0:	d10e      	bne.n	5cd0 <__register_exitproc+0x4c>
    5cb2:	1c63      	adds	r3, r4, #1
    5cb4:	606b      	str	r3, [r5, #4]
    5cb6:	464b      	mov	r3, r9
    5cb8:	3402      	adds	r4, #2
    5cba:	00a4      	lsls	r4, r4, #2
    5cbc:	6818      	ldr	r0, [r3, #0]
    5cbe:	5167      	str	r7, [r4, r5]
    5cc0:	f7ff ff40 	bl	5b44 <__retarget_lock_release_recursive>
    5cc4:	2000      	movs	r0, #0
    5cc6:	bce0      	pop	{r5, r6, r7}
    5cc8:	46ba      	mov	sl, r7
    5cca:	46b1      	mov	r9, r6
    5ccc:	46a8      	mov	r8, r5
    5cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cd0:	2288      	movs	r2, #136	; 0x88
    5cd2:	4651      	mov	r1, sl
    5cd4:	0028      	movs	r0, r5
    5cd6:	00a3      	lsls	r3, r4, #2
    5cd8:	18eb      	adds	r3, r5, r3
    5cda:	5099      	str	r1, [r3, r2]
    5cdc:	3a87      	subs	r2, #135	; 0x87
    5cde:	40a2      	lsls	r2, r4
    5ce0:	3089      	adds	r0, #137	; 0x89
    5ce2:	30ff      	adds	r0, #255	; 0xff
    5ce4:	6801      	ldr	r1, [r0, #0]
    5ce6:	4311      	orrs	r1, r2
    5ce8:	6001      	str	r1, [r0, #0]
    5cea:	2184      	movs	r1, #132	; 0x84
    5cec:	4640      	mov	r0, r8
    5cee:	0049      	lsls	r1, r1, #1
    5cf0:	5058      	str	r0, [r3, r1]
    5cf2:	2e02      	cmp	r6, #2
    5cf4:	d1dd      	bne.n	5cb2 <__register_exitproc+0x2e>
    5cf6:	0029      	movs	r1, r5
    5cf8:	318d      	adds	r1, #141	; 0x8d
    5cfa:	31ff      	adds	r1, #255	; 0xff
    5cfc:	680b      	ldr	r3, [r1, #0]
    5cfe:	4313      	orrs	r3, r2
    5d00:	600b      	str	r3, [r1, #0]
    5d02:	e7d6      	b.n	5cb2 <__register_exitproc+0x2e>
    5d04:	4d06      	ldr	r5, [pc, #24]	; (5d20 <__register_exitproc+0x9c>)
    5d06:	601d      	str	r5, [r3, #0]
    5d08:	e7ce      	b.n	5ca8 <__register_exitproc+0x24>
    5d0a:	464b      	mov	r3, r9
    5d0c:	6818      	ldr	r0, [r3, #0]
    5d0e:	f7ff ff19 	bl	5b44 <__retarget_lock_release_recursive>
    5d12:	2001      	movs	r0, #1
    5d14:	4240      	negs	r0, r0
    5d16:	e7d6      	b.n	5cc6 <__register_exitproc+0x42>
    5d18:	200000fc 	.word	0x200000fc
    5d1c:	20000838 	.word	0x20000838
    5d20:	2000083c 	.word	0x2000083c
    5d24:	000004a0 	.word	0x000004a0
    5d28:	00000468 	.word	0x00000468
    5d2c:	00000470 	.word	0x00000470
    5d30:	00000478 	.word	0x00000478
    5d34:	00000488 	.word	0x00000488
    5d38:	00000480 	.word	0x00000480
    5d3c:	00000490 	.word	0x00000490
    5d40:	00000498 	.word	0x00000498
    5d44:	41564e49 	.word	0x41564e49
    5d48:	0044494c 	.word	0x0044494c
    5d4c:	20776152 	.word	0x20776152
    5d50:	69442058 	.word	0x69442058
    5d54:	74636572 	.word	0x74636572
    5d58:	206e6f69 	.word	0x206e6f69
    5d5c:	65636341 	.word	0x65636341
    5d60:	6172656c 	.word	0x6172656c
    5d64:	6e6f6974 	.word	0x6e6f6974
    5d68:	00000000 	.word	0x00000000
    5d6c:	20776152 	.word	0x20776152
    5d70:	69442059 	.word	0x69442059
    5d74:	74636572 	.word	0x74636572
    5d78:	206e6f69 	.word	0x206e6f69
    5d7c:	65636341 	.word	0x65636341
    5d80:	6172656c 	.word	0x6172656c
    5d84:	6e6f6974 	.word	0x6e6f6974
    5d88:	00000000 	.word	0x00000000
    5d8c:	20776152 	.word	0x20776152
    5d90:	6944205a 	.word	0x6944205a
    5d94:	74636572 	.word	0x74636572
    5d98:	206e6f69 	.word	0x206e6f69
    5d9c:	65636341 	.word	0x65636341
    5da0:	6172656c 	.word	0x6172656c
    5da4:	6e6f6974 	.word	0x6e6f6974
    5da8:	00000000 	.word	0x00000000
    5dac:	20776152 	.word	0x20776152
    5db0:	78412058 	.word	0x78412058
    5db4:	41207369 	.word	0x41207369
    5db8:	6c75676e 	.word	0x6c75676e
    5dbc:	56207261 	.word	0x56207261
    5dc0:	636f6c65 	.word	0x636f6c65
    5dc4:	00797469 	.word	0x00797469
    5dc8:	20776152 	.word	0x20776152
    5dcc:	78412059 	.word	0x78412059
    5dd0:	41207369 	.word	0x41207369
    5dd4:	6c75676e 	.word	0x6c75676e
    5dd8:	56207261 	.word	0x56207261
    5ddc:	636f6c65 	.word	0x636f6c65
    5de0:	00797469 	.word	0x00797469
    5de4:	20776152 	.word	0x20776152
    5de8:	7841205a 	.word	0x7841205a
    5dec:	41207369 	.word	0x41207369
    5df0:	6c75676e 	.word	0x6c75676e
    5df4:	56207261 	.word	0x56207261
    5df8:	636f6c65 	.word	0x636f6c65
    5dfc:	00797469 	.word	0x00797469
    5e00:	696c6143 	.word	0x696c6143
    5e04:	74617262 	.word	0x74617262
    5e08:	58206465 	.word	0x58206465
    5e0c:	72694420 	.word	0x72694420
    5e10:	69746365 	.word	0x69746365
    5e14:	41206e6f 	.word	0x41206e6f
    5e18:	6c656363 	.word	0x6c656363
    5e1c:	74617265 	.word	0x74617265
    5e20:	006e6f69 	.word	0x006e6f69
    5e24:	696c6143 	.word	0x696c6143
    5e28:	74617262 	.word	0x74617262
    5e2c:	59206465 	.word	0x59206465
    5e30:	72694420 	.word	0x72694420
    5e34:	69746365 	.word	0x69746365
    5e38:	41206e6f 	.word	0x41206e6f
    5e3c:	6c656363 	.word	0x6c656363
    5e40:	74617265 	.word	0x74617265
    5e44:	006e6f69 	.word	0x006e6f69
    5e48:	696c6143 	.word	0x696c6143
    5e4c:	74617262 	.word	0x74617262
    5e50:	5a206465 	.word	0x5a206465
    5e54:	72694420 	.word	0x72694420
    5e58:	69746365 	.word	0x69746365
    5e5c:	41206e6f 	.word	0x41206e6f
    5e60:	6c656363 	.word	0x6c656363
    5e64:	74617265 	.word	0x74617265
    5e68:	006e6f69 	.word	0x006e6f69
    5e6c:	696c6143 	.word	0x696c6143
    5e70:	74617262 	.word	0x74617262
    5e74:	58206465 	.word	0x58206465
    5e78:	69784120 	.word	0x69784120
    5e7c:	6e412073 	.word	0x6e412073
    5e80:	616c7567 	.word	0x616c7567
    5e84:	65562072 	.word	0x65562072
    5e88:	69636f6c 	.word	0x69636f6c
    5e8c:	00007974 	.word	0x00007974
    5e90:	696c6143 	.word	0x696c6143
    5e94:	74617262 	.word	0x74617262
    5e98:	59206465 	.word	0x59206465
    5e9c:	69784120 	.word	0x69784120
    5ea0:	6e412073 	.word	0x6e412073
    5ea4:	616c7567 	.word	0x616c7567
    5ea8:	65562072 	.word	0x65562072
    5eac:	69636f6c 	.word	0x69636f6c
    5eb0:	00007974 	.word	0x00007974
    5eb4:	696c6143 	.word	0x696c6143
    5eb8:	74617262 	.word	0x74617262
    5ebc:	5a206465 	.word	0x5a206465
    5ec0:	69784120 	.word	0x69784120
    5ec4:	6e412073 	.word	0x6e412073
    5ec8:	616c7567 	.word	0x616c7567
    5ecc:	65562072 	.word	0x65562072
    5ed0:	69636f6c 	.word	0x69636f6c
    5ed4:	00007974 	.word	0x00007974
    5ed8:	75626544 	.word	0x75626544
    5edc:	6e492067 	.word	0x6e492067
    5ee0:	00312074 	.word	0x00312074
    5ee4:	52504545 	.word	0x52504545
    5ee8:	4c204d4f 	.word	0x4c204d4f
    5eec:	756f7961 	.word	0x756f7961
    5ef0:	61482074 	.word	0x61482074
    5ef4:	00006873 	.word	0x00006873
    5ef8:	65776f50 	.word	0x65776f50
    5efc:	79432072 	.word	0x79432072
    5f00:	73656c63 	.word	0x73656c63
    5f04:	00000000 	.word	0x00000000
    5f08:	43204352 	.word	0x43204352
    5f0c:	6e6e6168 	.word	0x6e6e6168
    5f10:	31206c65 	.word	0x31206c65
    5f14:	00000000 	.word	0x00000000
    5f18:	43204352 	.word	0x43204352
    5f1c:	6e6e6168 	.word	0x6e6e6168
    5f20:	32206c65 	.word	0x32206c65
    5f24:	00000000 	.word	0x00000000
    5f28:	43204352 	.word	0x43204352
    5f2c:	6e6e6168 	.word	0x6e6e6168
    5f30:	33206c65 	.word	0x33206c65
    5f34:	00000000 	.word	0x00000000
    5f38:	43204352 	.word	0x43204352
    5f3c:	6e6e6168 	.word	0x6e6e6168
    5f40:	34206c65 	.word	0x34206c65
    5f44:	00000000 	.word	0x00000000
    5f48:	43204352 	.word	0x43204352
    5f4c:	6e6e6168 	.word	0x6e6e6168
    5f50:	35206c65 	.word	0x35206c65
    5f54:	00000000 	.word	0x00000000
    5f58:	43204352 	.word	0x43204352
    5f5c:	6e6e6168 	.word	0x6e6e6168
    5f60:	36206c65 	.word	0x36206c65
    5f64:	00000000 	.word	0x00000000
    5f68:	43204352 	.word	0x43204352
    5f6c:	6e6e6168 	.word	0x6e6e6168
    5f70:	37206c65 	.word	0x37206c65
    5f74:	00000000 	.word	0x00000000
    5f78:	43204352 	.word	0x43204352
    5f7c:	6e6e6168 	.word	0x6e6e6168
    5f80:	38206c65 	.word	0x38206c65
    5f84:	00000000 	.word	0x00000000
    5f88:	43204352 	.word	0x43204352
    5f8c:	6e6e6168 	.word	0x6e6e6168
    5f90:	39206c65 	.word	0x39206c65
    5f94:	00000000 	.word	0x00000000
    5f98:	43204352 	.word	0x43204352
    5f9c:	6e6e6168 	.word	0x6e6e6168
    5fa0:	31206c65 	.word	0x31206c65
    5fa4:	00000030 	.word	0x00000030
    5fa8:	43204352 	.word	0x43204352
    5fac:	6e6e6168 	.word	0x6e6e6168
    5fb0:	31206c65 	.word	0x31206c65
    5fb4:	00000031 	.word	0x00000031
    5fb8:	43204352 	.word	0x43204352
    5fbc:	6e6e6168 	.word	0x6e6e6168
    5fc0:	31206c65 	.word	0x31206c65
    5fc4:	00000032 	.word	0x00000032
    5fc8:	43204352 	.word	0x43204352
    5fcc:	6e6e6168 	.word	0x6e6e6168
    5fd0:	31206c65 	.word	0x31206c65
    5fd4:	00000033 	.word	0x00000033
    5fd8:	43204352 	.word	0x43204352
    5fdc:	6e6e6168 	.word	0x6e6e6168
    5fe0:	31206c65 	.word	0x31206c65
    5fe4:	00000034 	.word	0x00000034
    5fe8:	43204352 	.word	0x43204352
    5fec:	6e6e6168 	.word	0x6e6e6168
    5ff0:	31206c65 	.word	0x31206c65
    5ff4:	00000035 	.word	0x00000035
    5ff8:	43204352 	.word	0x43204352
    5ffc:	6e6e6168 	.word	0x6e6e6168
    6000:	31206c65 	.word	0x31206c65
    6004:	00000036 	.word	0x00000036
    6008:	61736944 	.word	0x61736944
    600c:	20656c62 	.word	0x20656c62
    6010:	7a7a7542 	.word	0x7a7a7542
    6014:	00007265 	.word	0x00007265
    6018:	61736944 	.word	0x61736944
    601c:	20656c62 	.word	0x20656c62
    6020:	0044454c 	.word	0x0044454c
    6024:	61656c43 	.word	0x61656c43
    6028:	6853206e 	.word	0x6853206e
    602c:	6f647475 	.word	0x6f647475
    6030:	00006e77 	.word	0x00006e77
    6034:	206e7552 	.word	0x206e7552
    6038:	6976614e 	.word	0x6976614e
    603c:	69746167 	.word	0x69746167
    6040:	50206e6f 	.word	0x50206e6f
    6044:	65636f72 	.word	0x65636f72
    6048:	00007373 	.word	0x00007373
    604c:	206e7552 	.word	0x206e7552
    6050:	746e6f43 	.word	0x746e6f43
    6054:	206c6f72 	.word	0x206c6f72
    6058:	636f7250 	.word	0x636f7250
    605c:	00737365 	.word	0x00737365
    6060:	206e7552 	.word	0x206e7552
    6064:	64697547 	.word	0x64697547
    6068:	65636e61 	.word	0x65636e61
    606c:	6f725020 	.word	0x6f725020
    6070:	73736563 	.word	0x73736563
    6074:	00000000 	.word	0x00000000
    6078:	52204352 	.word	0x52204352
    607c:	69656365 	.word	0x69656365
    6080:	20726576 	.word	0x20726576
    6084:	6c696166 	.word	0x6c696166
    6088:	65666173 	.word	0x65666173
    608c:	00000000 	.word	0x00000000
    6090:	75626544 	.word	0x75626544
    6094:	6f422067 	.word	0x6f422067
    6098:	31206c6f 	.word	0x31206c6f
    609c:	00000000 	.word	0x00000000
    60a0:	75626544 	.word	0x75626544
    60a4:	6f422067 	.word	0x6f422067
    60a8:	32206c6f 	.word	0x32206c6f
    60ac:	00000000 	.word	0x00000000
    60b0:	40000000 	.word	0x40000000
    60b4:	00000001 	.word	0x00000001
    60b8:	00000e66 	.word	0x00000e66
    60bc:	00000e3e 	.word	0x00000e3e
    60c0:	00000e48 	.word	0x00000e48
    60c4:	00000e52 	.word	0x00000e52
    60c8:	00000e5c 	.word	0x00000e5c
    60cc:	00000ebe 	.word	0x00000ebe
    60d0:	00000e96 	.word	0x00000e96
    60d4:	00000ea0 	.word	0x00000ea0
    60d8:	00000eaa 	.word	0x00000eaa
    60dc:	00000eb4 	.word	0x00000eb4
    60e0:	00000eee 	.word	0x00000eee
    60e4:	00000efa 	.word	0x00000efa
    60e8:	00000f08 	.word	0x00000f08
    60ec:	00000f16 	.word	0x00000f16
    60f0:	00000f24 	.word	0x00000f24
    60f4:	00000f72 	.word	0x00000f72
    60f8:	00000f7a 	.word	0x00000f7a
    60fc:	00000f84 	.word	0x00000f84
    6100:	00000f8e 	.word	0x00000f8e
    6104:	00000f98 	.word	0x00000f98
    6108:	00000fd6 	.word	0x00000fd6
    610c:	00000fe2 	.word	0x00000fe2
    6110:	00000ff0 	.word	0x00000ff0
    6114:	00000ffe 	.word	0x00000ffe
    6118:	0000100c 	.word	0x0000100c
    611c:	0000105a 	.word	0x0000105a
    6120:	00001062 	.word	0x00001062
    6124:	0000106c 	.word	0x0000106c
    6128:	00001076 	.word	0x00001076
    612c:	00001080 	.word	0x00001080
    6130:	0000113e 	.word	0x0000113e
    6134:	00001146 	.word	0x00001146
    6138:	00001156 	.word	0x00001156
    613c:	00001166 	.word	0x00001166
    6140:	00001176 	.word	0x00001176
    6144:	000011e6 	.word	0x000011e6
    6148:	000011be 	.word	0x000011be
    614c:	000011c8 	.word	0x000011c8
    6150:	000011d2 	.word	0x000011d2
    6154:	000011dc 	.word	0x000011dc

00006158 <uart1_descriptor>:
    6158:	02010302 00000002                       ........

00006160 <uart2_descriptor>:
    6160:	04030504 00000002                       ........

00006168 <uart3_descriptor>:
    6168:	0a090706 00000002                       ........

00006170 <uart4_descriptor>:
    6170:	0c0b0908 00000002 80000000 00000001     ................

00006180 <dma_spi_desc>:
    6180:	08070100                                 .....

00006185 <zero>:
    6185:	                                         ...

00006188 <crc8tab>:
    6188:	aa7fd500 54812bfe 8356fc29 7da802d7     .....+.T).V....}
    6198:	f82d8752 06d379ac d104ae7b 2ffa5085     R.-..y..{....P./
    61a8:	0edb71a4 f0258f5a 27f2588d d90ca673     .q..Z.%..X.'s...
    61b8:	5c8923f6 a277dd08 75a00adf 8b5ef421     .#.\..w....u!.^.
    61c8:	37e2489d c91cb663 1ecb61b4 e0359f4a     .H.7c....a..J.5.
    61d8:	65b01acf 9b4ee431 4c9933e6 b267cd18     ...e1.N..3.L..g.
    61e8:	9346ec39 6db812c7 ba6fc510 44913bee     9.F....m..o..;.D
    61f8:	c114be6b 3fea4095 e83d9742 16c369bc     k....@.?B.=..i..
    6208:	45903aef bb6ec411 6cb913c6 9247ed38     .:.E..n....l8.G.
    6218:	17c268bd e93c9643 3eeb4194 c015bf6a     .h..C.<..A.>j...
    6228:	e1349e4b 1fca60b5 c81db762 36e3499c     K.4..`..b....I.6
    6238:	b366cc19 4d9832e7 9a4fe530 64b11bce     ..f..2.M0.O....d
    6248:	d80da772 26f3598c f1248e5b 0fda70a5     r....Y.&[.$..p..
    6258:	8a5ff520 74a10bde a376dc09 5d8822f7      ._....t..v..".]
    6268:	7ca903d6 8257fd28 55802aff ab7ed401     ...|(.W..*.U..~.
    6278:	2efb5184 d005af7a 07d278ad f92c8653     .Q..z....x..S.,.
    6288:	00002474 00002498 00002478 0000247c     t$...$..x$..|$..
    6298:	00002480 00002484 00002488 0000248e     .$...$...$...$..
    62a8:	00002bc4 00002bd8 00002c9e 00002bd8     .+...+...,...+..
    62b8:	00002c9e 00002be4 00002bf0 00002c9e     .,...+...+...,..
    62c8:	00002c40 00002c54 00002c9e 00002c7e     @,..T,...,..~,..
    62d8:	33323130 37363534 42413938 47464443     0123456789ABCDFG
    62e8:	4c4b4a48 51504e4d 56545352 5a595857     HJKLMNPQRSTVWXYZ
    62f8:	00000000 6c6e6946 42207965 6e69616c     ....Finley Blain
    6308:	00000065 32434e47 00000000              e...GNC2....

00006314 <language_string>:
    6314:	04090304                                ....

00006318 <device_descriptor>:
    6318:	02000112 400102ef 000e1209 02010200     .......@........
    6328:	                                         ..

0000632a <usb_num_endpoints>:
    632a:	2e2e0003 2d2d2d2e 002e2e2e 387a0000     .....---......z8
    633a:	390c0000 391a0000 39280000 39360000     ...9...9..(9..69
    634a:	39440000 38800000 00000000 00000000     ..D9...8........
    635a:	00000000 3b210000 00060000               ......!;......

00006368 <time_ticks_us_mult>:
    6368:	00000030                                0...

0000636c <time_ticks_ms_mult>:
    636c:	0000bb80                                ....

00006370 <time_ticks_s_mult>:
    6370:	02dc6c00                                .l..

00006374 <CRC8_LUT_L>:
    6374:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

00006384 <CRC8_LUT_H>:
    6384:	90e07000 5727b7c7 1969f989 deae3e4e     .p....'W..i.N>..
    6394:	0000511a 0000504a 00005062 00005080     .Q..JP..bP...P..
    63a4:	00005062 000050c4 00005062 00005080     bP...P..bP...P..
    63b4:	0000504a 0000504a 000050c4 00005080     JP..JP...P...P..
    63c4:	0000506a 0000506a 0000506a 000050ce     jP..jP..jP...P..
    63d4:	0000504a 0000504a 00005062 00005158     JP..JP..bP..XQ..
    63e4:	00005062 000050c4 00005062 00005158     bP...P..bP..XQ..
    63f4:	0000504a 0000504a 000050c4 00005158     JP..JP...P..XQ..
    6404:	0000506a 0000506a 0000506a              jP..jP..jP..

00006410 <_init>:
    6410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6412:	46c0      	nop			; (mov r8, r8)
    6414:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6416:	bc08      	pop	{r3}
    6418:	469e      	mov	lr, r3
    641a:	4770      	bx	lr

0000641c <__init_array_start>:
    641c:	00005c35 	.word	0x00005c35

00006420 <__frame_dummy_init_array_entry>:
    6420:	0000012d                                -...

00006424 <_fini>:
    6424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6426:	46c0      	nop			; (mov r8, r8)
    6428:	bcf8      	pop	{r3, r4, r5, r6, r7}
    642a:	bc08      	pop	{r3}
    642c:	469e      	mov	lr, r3
    642e:	4770      	bx	lr

00006430 <__do_global_dtors_aux_fini_array_entry>:
    6430:	0101 0000                                   ....
