//----------WARNING----------//
// THIS FILE IS AUTO-GENERATED
// DO NOT MODIFY

#ifndef GLOBAL_VARIABLES_H
#define GLOBAL_VARIABLES_H

#include <stdint.h>
#include <stdbool.h>

#include <fixedpoint.h>

typedef enum {
    {%- for variableType in variableTypes %}
    __{{ variableType|upper }},
    {%- endfor %}
} __Global_Variable_Types;

typedef struct __attribute__((packed, aligned(8))) {
    {%- for variable in variableTypes["i64"] %}
    int64_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["u64"] %}
    uint64_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["f64"] %}
    double {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["i32"] %}
    int32_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}
    
    {%- for variable in variableTypes["u32"] %}
    uint32_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["fp32"] %}
    fp32_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["f32"] %}
    float {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["i16"] %}
    int16_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["u16"] %}
    uint16_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["i8"] %}
    int8_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["u8"] %}
    uint8_t {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["bool"] %}
    bool {{ variable.name }}; // {{ variable["verbose_name"] }}
    {%- endfor %}

    {%- for variable in variableTypes["bool_packed"] %}
    bool {{ variable.name }} :1; // {{ variable["verbose_name"] }}
    {%- endfor %}
} Global_Variables;
{% for variableType in variableTypes %}
#define __GLOBAL_{{ variableType|upper }}_COUNT {{ variableTypes[variableType]|length }}
{%- endfor %}

typedef enum {
    Global_ID_INVALID,
    {%- for variableType in variableTypes %}
    {%- for variable in variableTypes[variableType] %}
    Global_ID_{{ variable.name }},
    {%- endfor %}
    {%- endfor %}
} Global_Variable_IDs;

#define __GLOBAL_VARIABLE_NAMES {\
    "INVALID",\
    {%- for variableType in variableTypes %}
    {%- for variable in variableTypes[variableType] %}
    "{{ variable["verbose_name"] }}",\
    {%- endfor %}
    {%- endfor %}
};

{% set count = 1 -%}
#define __GLOBAL_ID_START {{ count }}
#define __GLOBAL_I64_ID_START {{ count }}
#define __GLOBAL_I64_ID_END {% set count = count + variableTypes["i64"]|length %}{{ count }}
#define __GLOBAL_U64_ID_START {{ count }}
#define __GLOBAL_U64_ID_END {% set count = count + variableTypes["u64"]|length %}{{ count }}
#define __GLOBAL_F64_ID_START {{ count }}
#define __GLOBAL_F64_ID_END {% set count = count + variableTypes["f64"]|length %}{{ count }}
#define __GLOBAL_I32_ID_START {{ count }}
#define __GLOBAL_I32_ID_END {% set count = count + variableTypes["i32"]|length %}{{ count }}
#define __GLOBAL_U32_ID_START {{ count }}
#define __GLOBAL_U32_ID_END {% set count = count + variableTypes["u32"]|length %}{{ count }}
#define __GLOBAL_FP32_ID_START {{ count }}
#define __GLOBAL_FP32_ID_END {% set count = count + variableTypes["fp32"]|length %}{{ count }}
#define __GLOBAL_F32_ID_START {{ count }}
#define __GLOBAL_F32_ID_END {% set count = count + variableTypes["f32"]|length %}{{ count }}
#define __GLOBAL_I16_ID_START {{ count }}
#define __GLOBAL_I16_ID_END {% set count = count + variableTypes["i16"]|length %}{{ count }}
#define __GLOBAL_U16_ID_START {{ count }}
#define __GLOBAL_U16_ID_END {% set count = count + variableTypes["u16"]|length %}{{ count }}
#define __GLOBAL_I8_ID_START {{ count }}
#define __GLOBAL_I8_ID_END {% set count = count + variableTypes["i8"]|length %}{{ count }}
#define __GLOBAL_U8_ID_START {{ count }}
#define __GLOBAL_U8_ID_END {% set count = count + variableTypes["u8"]|length %}{{ count }}
#define __GLOBAL_BOOL_ID_START {{ count }}
#define __GLOBAL_BOOL_ID_END {% set count = count + variableTypes["bool"]|length %}{{ count }}
#define __GLOBAL_ID_END {{ count }}
{% for variableType in variableTypes %}
{%- if variableTypes[variableType]|length %}
#define __GLOBAL_{{ variableType|upper }}_START_VARIABLE {{ variableTypes[variableType][0].name }}
{%- endif %}
{%- endfor %}

// CRC32 of the source JSON used to create this file
// Used to identify when the globals structure changes
#define __GLOBAL_HASH {{ JSONCRC }}

#endif